
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116b0  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011924  08011924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a24  08011a24  00013024  2**0
                  CONTENTS
  4 .ARM          00000008  08011a24  08011a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a2c  08011a2c  00013024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a2c  08011a2c  00012a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a30  08011a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08011a34  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec0  20000024  08011a58  00013024  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000ee4  08011a58  00013ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031bc6  00000000  00000000  0001305a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d0a  00000000  00000000  00044c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  00049930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002171  00000000  00000000  0004c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047320  00000000  00000000  0004e541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b96  00000000  00000000  00095861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9a8  00000000  00000000  000cb3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287d9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd64  00000000  00000000  00287de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00293b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000024 	.word	0x20000024
 8000290:	00000000 	.word	0x00000000
 8000294:	0801190c 	.word	0x0801190c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000028 	.word	0x20000028
 80002b0:	0801190c 	.word	0x0801190c

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 faab 	bl	8002b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f901 	bl	80007dc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f96b 	bl	80008b4 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f9a0 	bl	8000922 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 ff0f 	bl	8001404 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb9d 	bl	8000d24 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb5d 	bl	8000ca8 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbd1 	bl	8000d94 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc4d 	bl	8000e90 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc8b 	bl	8000f10 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc9d 	bl	8000f38 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd1b 	bl	8001038 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fdd3 	bl	80011ac <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f99b 	bl	8000940 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe81 	bl	8001310 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd61 	bl	80010d4 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 facf 	bl	8000bb4 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fbfb 	bl	8000e10 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 fec5 	bl	80013a8 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fe27 	bl	8001270 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 8000622:	220d      	movs	r2, #13
 8000624:	4962      	ldr	r1, [pc, #392]	@ (80007b0 <main+0x1e4>)
 8000626:	4863      	ldr	r0, [pc, #396]	@ (80007b4 <main+0x1e8>)
 8000628:	f003 f9cc 	bl	80039c4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 800062c:	2202      	movs	r2, #2
 800062e:	4962      	ldr	r1, [pc, #392]	@ (80007b8 <main+0x1ec>)
 8000630:	4862      	ldr	r0, [pc, #392]	@ (80007bc <main+0x1f0>)
 8000632:	f003 f9c7 	bl	80039c4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000636:	4862      	ldr	r0, [pc, #392]	@ (80007c0 <main+0x1f4>)
 8000638:	f00e faf2 	bl	800ec20 <HAL_TIM_Base_Start>

  HAL_Delay(2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000640:	f002 fb3a 	bl	8002cb8 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	485e      	ldr	r0, [pc, #376]	@ (80007c4 <main+0x1f8>)
 800064a:	f007 f923 	bl	8007894 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800064e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000652:	f002 fb31 	bl	8002cb8 <HAL_Delay>

  //Transmits each instruction sequentially from pcm6260Config array
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e010      	b.n	800067e <main+0xb2>
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4a59      	ldr	r2, [pc, #356]	@ (80007c8 <main+0x1fc>)
 8000662:	441a      	add	r2, r3
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2302      	movs	r3, #2
 800066a:	2190      	movs	r1, #144	@ 0x90
 800066c:	4857      	ldr	r0, [pc, #348]	@ (80007cc <main+0x200>)
 800066e:	f007 fa01 	bl	8007a74 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	@ 0x64
 8000674:	f002 fb20 	bl	8002cb8 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b15      	cmp	r3, #21
 8000682:	d9eb      	bls.n	800065c <main+0x90>
  }

  HAL_Delay(100);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f002 fb17 	bl	8002cb8 <HAL_Delay>
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
 800068a:	2208      	movs	r2, #8
 800068c:	4950      	ldr	r1, [pc, #320]	@ (80007d0 <main+0x204>)
 800068e:	4851      	ldr	r0, [pc, #324]	@ (80007d4 <main+0x208>)
 8000690:	f00d ff78 	bl	800e584 <HAL_SAI_Receive_DMA>
  //HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacData, DIM(dacData));

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	e083      	b.n	80007a2 <main+0x1d6>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	e00d      	b.n	80006bc <main+0xf0>
	  {
		  channels[i].channelData[s] = 0;
 80006a0:	494d      	ldr	r1, [pc, #308]	@ (80007d8 <main+0x20c>)
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	2200      	movs	r2, #0
 80006b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3301      	adds	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d9ee      	bls.n	80006a0 <main+0xd4>
	  }
	  channels[i].channelNum = i;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	b2d8      	uxtb	r0, r3
 80006c6:	4944      	ldr	r1, [pc, #272]	@ (80007d8 <main+0x20c>)
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	4613      	mov	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4413      	add	r3, r2
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	440b      	add	r3, r1
 80006d4:	3304      	adds	r3, #4
 80006d6:	4602      	mov	r2, r0
 80006d8:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 80006da:	493f      	ldr	r1, [pc, #252]	@ (80007d8 <main+0x20c>)
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	440b      	add	r3, r1
 80006e8:	3308      	adds	r3, #8
 80006ea:	f04f 0200 	mov.w	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 80006f0:	4939      	ldr	r1, [pc, #228]	@ (80007d8 <main+0x20c>)
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	440b      	add	r3, r1
 80006fe:	330c      	adds	r3, #12
 8000700:	f04f 0200 	mov.w	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 8000706:	4934      	ldr	r1, [pc, #208]	@ (80007d8 <main+0x20c>)
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	011b      	lsls	r3, r3, #4
 8000712:	440b      	add	r3, r1
 8000714:	3310      	adds	r3, #16
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 800071a:	492f      	ldr	r1, [pc, #188]	@ (80007d8 <main+0x20c>)
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	440b      	add	r3, r1
 8000728:	3311      	adds	r3, #17
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 800072e:	492a      	ldr	r1, [pc, #168]	@ (80007d8 <main+0x20c>)
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	440b      	add	r3, r1
 800073c:	3312      	adds	r3, #18
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 8000742:	4925      	ldr	r1, [pc, #148]	@ (80007d8 <main+0x20c>)
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	440b      	add	r3, r1
 8000750:	3314      	adds	r3, #20
 8000752:	f04f 0200 	mov.w	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	e010      	b.n	8000780 <main+0x1b4>
	  {
		  channels[i].eqLevels[r] = 0.0;
 800075e:	491e      	ldr	r1, [pc, #120]	@ (80007d8 <main+0x20c>)
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	4413      	add	r3, r2
 800076e:	3306      	adds	r3, #6
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	440b      	add	r3, r1
 8000774:	f04f 0200 	mov.w	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b13      	cmp	r3, #19
 8000784:	d9eb      	bls.n	800075e <main+0x192>
	  }
	  channels[i].distortionStrength = 0.0;
 8000786:	4914      	ldr	r1, [pc, #80]	@ (80007d8 <main+0x20c>)
 8000788:	68ba      	ldr	r2, [r7, #8]
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	440b      	add	r3, r1
 8000794:	332c      	adds	r3, #44	@ 0x2c
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	3301      	adds	r3, #1
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 80007a8:	f4ff af77 	bcc.w	800069a <main+0xce>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <main+0x1e0>
 80007b0:	20000d74 	.word	0x20000d74
 80007b4:	20000040 	.word	0x20000040
 80007b8:	20000d90 	.word	0x20000d90
 80007bc:	200000cc 	.word	0x200000cc
 80007c0:	200007b0 	.word	0x200007b0
 80007c4:	42021000 	.word	0x42021000
 80007c8:	20000000 	.word	0x20000000
 80007cc:	2000034c 	.word	0x2000034c
 80007d0:	20000d94 	.word	0x20000d94
 80007d4:	20000564 	.word	0x20000564
 80007d8:	20000dbc 	.word	0x20000dbc

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09e      	sub	sp, #120	@ 0x78
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	2260      	movs	r2, #96	@ 0x60
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f011 f861 	bl	80118b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
 80007fe:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000800:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000804:	f008 ff7a 	bl	80096fc <HAL_PWREx_ControlVoltageScaling>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800080e:	f000 ffcf 	bl	80017b0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000812:	f008 ff63 	bl	80096dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <SystemClock_Config+0xd4>)
 8000818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800081c:	4a24      	ldr	r2, [pc, #144]	@ (80008b0 <SystemClock_Config+0xd4>)
 800081e:	f023 0318 	bic.w	r3, r3, #24
 8000822:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000826:	2307      	movs	r3, #7
 8000828:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800082e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000830:	2381      	movs	r3, #129	@ 0x81
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083a:	2310      	movs	r3, #16
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	2303      	movs	r3, #3
 8000844:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800084e:	2308      	movs	r3, #8
 8000850:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000852:	2308      	movs	r3, #8
 8000854:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800085e:	230c      	movs	r3, #12
 8000860:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	4618      	mov	r0, r3
 800086c:	f009 f870 	bl	8009950 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000876:	f000 ff9b 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	231f      	movs	r3, #31
 800087c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2303      	movs	r3, #3
 8000880:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	2103      	movs	r1, #3
 8000896:	4618      	mov	r0, r3
 8000898:	f009 ff36 	bl	800a708 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008a2:	f000 ff85 	bl	80017b0 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3778      	adds	r7, #120	@ 0x78
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	46020c00 	.word	0x46020c00

080008b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0b8      	sub	sp, #224	@ 0xe0
 80008b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	22e0      	movs	r2, #224	@ 0xe0
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f010 fff6 	bl	80118b2 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80008c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ca:	f04f 0301 	mov.w	r3, #1
 80008ce:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80008d8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80008dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80008e0:	2303      	movs	r3, #3
 80008e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80008e8:	230c      	movs	r3, #12
 80008ea:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 80008f0:	2303      	movs	r3, #3
 80008f2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80008f8:	230c      	movs	r3, #12
 80008fa:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000902:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4618      	mov	r0, r3
 800090c:	f00a facc 	bl	800aea8 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000916:	f000 ff4b 	bl	80017b0 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	37e0      	adds	r7, #224	@ 0xe0
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000926:	f008 ffd5 	bl	80098d4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800092a:	2002      	movs	r0, #2
 800092c:	f008 ff72 	bl	8009814 <HAL_PWREx_ConfigSupply>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000936:	f000 ff3b 	bl	80017b0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2220      	movs	r2, #32
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f010 ffb0 	bl	80118b2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000952:	4b89      	ldr	r3, [pc, #548]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000954:	4a89      	ldr	r2, [pc, #548]	@ (8000b7c <MX_ADC1_Init+0x23c>)
 8000956:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000958:	4b87      	ldr	r3, [pc, #540]	@ (8000b78 <MX_ADC1_Init+0x238>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800095e:	4b86      	ldr	r3, [pc, #536]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000964:	4b84      	ldr	r3, [pc, #528]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096a:	4b83      	ldr	r3, [pc, #524]	@ (8000b78 <MX_ADC1_Init+0x238>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000970:	4b81      	ldr	r3, [pc, #516]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000972:	2201      	movs	r2, #1
 8000974:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000976:	4b80      	ldr	r3, [pc, #512]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000978:	2204      	movs	r2, #4
 800097a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800097c:	4b7e      	ldr	r3, [pc, #504]	@ (8000b78 <MX_ADC1_Init+0x238>)
 800097e:	2201      	movs	r2, #1
 8000980:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000982:	4b7d      	ldr	r3, [pc, #500]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 800098a:	4b7b      	ldr	r3, [pc, #492]	@ (8000b78 <MX_ADC1_Init+0x238>)
 800098c:	220d      	movs	r2, #13
 800098e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000990:	4b79      	ldr	r3, [pc, #484]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000992:	2200      	movs	r2, #0
 8000994:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000998:	4b77      	ldr	r3, [pc, #476]	@ (8000b78 <MX_ADC1_Init+0x238>)
 800099a:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 800099e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009a0:	4b75      	ldr	r3, [pc, #468]	@ (8000b78 <MX_ADC1_Init+0x238>)
 80009a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009a8:	4b73      	ldr	r3, [pc, #460]	@ (8000b78 <MX_ADC1_Init+0x238>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009b0:	4b71      	ldr	r3, [pc, #452]	@ (8000b78 <MX_ADC1_Init+0x238>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b6:	4b70      	ldr	r3, [pc, #448]	@ (8000b78 <MX_ADC1_Init+0x238>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009bc:	4b6e      	ldr	r3, [pc, #440]	@ (8000b78 <MX_ADC1_Init+0x238>)
 80009be:	2200      	movs	r2, #0
 80009c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009c2:	4b6d      	ldr	r3, [pc, #436]	@ (8000b78 <MX_ADC1_Init+0x238>)
 80009c4:	2203      	movs	r2, #3
 80009c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009c8:	4b6b      	ldr	r3, [pc, #428]	@ (8000b78 <MX_ADC1_Init+0x238>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d0:	4869      	ldr	r0, [pc, #420]	@ (8000b78 <MX_ADC1_Init+0x238>)
 80009d2:	f002 fd0f 	bl	80033f4 <HAL_ADC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80009dc:	f000 fee8 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009e0:	4b67      	ldr	r3, [pc, #412]	@ (8000b80 <MX_ADC1_Init+0x240>)
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e4:	2306      	movs	r3, #6
 80009e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f2:	2304      	movs	r3, #4
 80009f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	485e      	ldr	r0, [pc, #376]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000a00:	f003 fc26 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000a0a:	f000 fed1 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b84 <MX_ADC1_Init+0x244>)
 8000a10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a12:	230c      	movs	r3, #12
 8000a14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4857      	ldr	r0, [pc, #348]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000a1c:	f003 fc18 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000a26:	f000 fec3 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a2a:	4b57      	ldr	r3, [pc, #348]	@ (8000b88 <MX_ADC1_Init+0x248>)
 8000a2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a2e:	2312      	movs	r3, #18
 8000a30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a32:	463b      	mov	r3, r7
 8000a34:	4619      	mov	r1, r3
 8000a36:	4850      	ldr	r0, [pc, #320]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000a38:	f003 fc0a 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000a42:	f000 feb5 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a46:	4b51      	ldr	r3, [pc, #324]	@ (8000b8c <MX_ADC1_Init+0x24c>)
 8000a48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a4a:	2318      	movs	r3, #24
 8000a4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4619      	mov	r1, r3
 8000a52:	4849      	ldr	r0, [pc, #292]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000a54:	f003 fbfc 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a5e:	f000 fea7 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a62:	4b4b      	ldr	r3, [pc, #300]	@ (8000b90 <MX_ADC1_Init+0x250>)
 8000a64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4841      	ldr	r0, [pc, #260]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000a72:	f003 fbed 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000a7c:	f000 fe98 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a80:	4b44      	ldr	r3, [pc, #272]	@ (8000b94 <MX_ADC1_Init+0x254>)
 8000a82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a84:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	483a      	ldr	r0, [pc, #232]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000a90:	f003 fbde 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000a9a:	f000 fe89 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b98 <MX_ADC1_Init+0x258>)
 8000aa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000aa2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000aa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4832      	ldr	r0, [pc, #200]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000aae:	f003 fbcf 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000ab8:	f000 fe7a 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000abc:	4b37      	ldr	r3, [pc, #220]	@ (8000b9c <MX_ADC1_Init+0x25c>)
 8000abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000ac0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000ac4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	482b      	ldr	r0, [pc, #172]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000acc:	f003 fbc0 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000ad6:	f000 fe6b 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ada:	4b31      	ldr	r3, [pc, #196]	@ (8000ba0 <MX_ADC1_Init+0x260>)
 8000adc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000ade:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000ae2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4823      	ldr	r0, [pc, #140]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000aea:	f003 fbb1 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000af4:	f000 fe5c 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <MX_ADC1_Init+0x264>)
 8000afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000afc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b02:	463b      	mov	r3, r7
 8000b04:	4619      	mov	r1, r3
 8000b06:	481c      	ldr	r0, [pc, #112]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000b08:	f003 fba2 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000b12:	f000 fe4d 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b16:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <MX_ADC1_Init+0x268>)
 8000b18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000b1a:	f240 2306 	movw	r3, #518	@ 0x206
 8000b1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000b26:	f003 fb93 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000b30:	f000 fe3e 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_ADC1_Init+0x26c>)
 8000b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b38:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000b3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000b44:	f003 fb84 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000b4e:	f000 fe2f 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b52:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_ADC1_Init+0x270>)
 8000b54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b56:	f240 2312 	movw	r3, #530	@ 0x212
 8000b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_ADC1_Init+0x238>)
 8000b62:	f003 fb75 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b6c:	f000 fe20 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000040 	.word	0x20000040
 8000b7c:	42028000 	.word	0x42028000
 8000b80:	04000002 	.word	0x04000002
 8000b84:	08000004 	.word	0x08000004
 8000b88:	0c000008 	.word	0x0c000008
 8000b8c:	10000010 	.word	0x10000010
 8000b90:	14000020 	.word	0x14000020
 8000b94:	1c000080 	.word	0x1c000080
 8000b98:	20000100 	.word	0x20000100
 8000b9c:	2a000400 	.word	0x2a000400
 8000ba0:	2e000800 	.word	0x2e000800
 8000ba4:	32001000 	.word	0x32001000
 8000ba8:	3e008000 	.word	0x3e008000
 8000bac:	42010000 	.word	0x42010000
 8000bb0:	ce080000 	.word	0xce080000

08000bb4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f010 fe76 	bl	80118b2 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000bc6:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000bc8:	4a34      	ldr	r2, [pc, #208]	@ (8000c9c <MX_ADC4_Init+0xe8>)
 8000bca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bcc:	4b32      	ldr	r3, [pc, #200]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd2:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000bde:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000be0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000be4:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000be8:	2204      	movs	r2, #4
 8000bea:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000bec:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000bf2:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c06:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c20:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c3c:	4816      	ldr	r0, [pc, #88]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c3e:	f002 fbd9 	bl	80033f4 <HAL_ADC_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000c48:	f000 fdb2 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_ADC4_Init+0xec>)
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c66:	f003 faf3 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000c70:	f000 fd9e 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <MX_ADC4_Init+0xf0>)
 8000c76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_ADC4_Init+0xe4>)
 8000c82:	f003 fae5 	bl	8004250 <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000c8c:	f000 fd90 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000cc 	.word	0x200000cc
 8000c9c:	46021000 	.word	0x46021000
 8000ca0:	1c000080 	.word	0x1c000080
 8000ca4:	20000100 	.word	0x20000100

08000ca8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <MX_DMA2D_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cf4:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000cf6:	f005 fa39 	bl	800616c <HAL_DMA2D_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 fd56 	bl	80017b0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d04:	2101      	movs	r1, #1
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_DMA2D_Init+0x74>)
 8000d08:	f005 fa92 	bl	8006230 <HAL_DMA2D_ConfigLayer>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 fd4d 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000284 	.word	0x20000284
 8000d20:	4002b000 	.word	0x4002b000

08000d24 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_GPDMA1_Init+0x6c>)
 8000d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d30:	4a17      	ldr	r2, [pc, #92]	@ (8000d90 <MX_GPDMA1_Init+0x6c>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_GPDMA1_Init+0x6c>)
 8000d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	201d      	movs	r0, #29
 8000d4e:	f004 faaf 	bl	80052b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d52:	201d      	movs	r0, #29
 8000d54:	f004 fac6 	bl	80052e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	201e      	movs	r0, #30
 8000d5e:	f004 faa7 	bl	80052b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d62:	201e      	movs	r0, #30
 8000d64:	f004 fabe 	bl	80052e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	201f      	movs	r0, #31
 8000d6e:	f004 fa9f 	bl	80052b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d72:	201f      	movs	r0, #31
 8000d74:	f004 fab6 	bl	80052e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2020      	movs	r0, #32
 8000d7e:	f004 fa97 	bl	80052b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d82:	2020      	movs	r0, #32
 8000d84:	f004 faae 	bl	80052e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	46020c00 	.word	0x46020c00

08000d94 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e0c <MX_HSPI1_Init+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000da0:	2204      	movs	r2, #4
 8000da2:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000da4:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000dac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000db0:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000db4:	221a      	movs	r2, #26
 8000db6:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000de8:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_HSPI1_Init+0x74>)
 8000df6:	f010 f8f5 	bl	8010fe4 <HAL_XSPI_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000e00:	f000 fcd6 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200002ec 	.word	0x200002ec
 8000e0c:	420d3400 	.word	0x420d3400

08000e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	@ (8000e88 <MX_I2C1_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e8c <MX_I2C1_Init+0x7c>)
 8000e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e20:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e26:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e32:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4a:	480e      	ldr	r0, [pc, #56]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e4c:	f006 fd76 	bl	800793c <HAL_I2C_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e56:	f000 fcab 	bl	80017b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e5e:	f007 ff01 	bl	8008c64 <HAL_I2CEx_ConfigAnalogFilter>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e68:	f000 fca2 	bl	80017b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e70:	f007 ff43 	bl	8008cfa <HAL_I2CEx_ConfigDigitalFilter>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 fc99 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000034c 	.word	0x2000034c
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	20a0c4df 	.word	0x20a0c4df

08000e90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	@ (8000f08 <MX_I2C2_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <MX_I2C2_Init+0x7c>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eca:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ecc:	f006 fd36 	bl	800793c <HAL_I2C_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ed6:	f000 fc6b 	bl	80017b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ede:	f007 fec1 	bl	8008c64 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ee8:	f000 fc62 	bl	80017b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ef0:	f007 ff03 	bl	8008cfa <HAL_I2CEx_ConfigDigitalFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 fc59 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200003a0 	.word	0x200003a0
 8000f08:	40005800 	.word	0x40005800
 8000f0c:	20a0c4df 	.word	0x20a0c4df

08000f10 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000f14:	2000      	movs	r0, #0
 8000f16:	f007 ff3d 	bl	8008d94 <HAL_ICACHE_ConfigAssociativityMode>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000f20:	f000 fc46 	bl	80017b0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f24:	f007 ff56 	bl	8008dd4 <HAL_ICACHE_Enable>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f2e:	f000 fc3f 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	@ 0x38
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2234      	movs	r2, #52	@ 0x34
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f010 fcb4 	bl	80118b2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f4a:	4b39      	ldr	r3, [pc, #228]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f4c:	4a39      	ldr	r2, [pc, #228]	@ (8001034 <MX_LTDC_Init+0xfc>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f50:	4b37      	ldr	r3, [pc, #220]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f56:	4b36      	ldr	r3, [pc, #216]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f5c:	4b34      	ldr	r3, [pc, #208]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f62:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f68:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f6e:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f70:	2203      	movs	r2, #3
 8000f72:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f74:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f76:	220b      	movs	r2, #11
 8000f78:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f7c:	220b      	movs	r2, #11
 8000f7e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f80:	4b2b      	ldr	r3, [pc, #172]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f82:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f86:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f8a:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000f90:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f92:	f240 3233 	movw	r2, #819	@ 0x333
 8000f96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000f98:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000f9a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fa0:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fb8:	481d      	ldr	r0, [pc, #116]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8000fba:	f007 ff1b 	bl	8008df4 <HAL_LTDC_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000fc4:	f000 fbf4 	bl	80017b0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000fcc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000fd0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fd6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000fda:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fe0:	23ff      	movs	r3, #255	@ 0xff
 8000fe2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fe8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fec:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	@ (8001030 <MX_LTDC_Init+0xf8>)
 8001018:	f008 f87e 	bl	8009118 <HAL_LTDC_ConfigLayer>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001022:	f000 fbc5 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	@ 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200003f4 	.word	0x200003f4
 8001034:	40016800 	.word	0x40016800

08001038 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001050:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <MX_RTC_Init+0x94>)
 8001052:	4a1f      	ldr	r2, [pc, #124]	@ (80010d0 <MX_RTC_Init+0x98>)
 8001054:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <MX_RTC_Init+0x94>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <MX_RTC_Init+0x94>)
 800105e:	227f      	movs	r2, #127	@ 0x7f
 8001060:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_RTC_Init+0x94>)
 8001064:	22ff      	movs	r2, #255	@ 0xff
 8001066:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <MX_RTC_Init+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800106e:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <MX_RTC_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <MX_RTC_Init+0x94>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_RTC_Init+0x94>)
 800107c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001080:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <MX_RTC_Init+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001088:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <MX_RTC_Init+0x94>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800108e:	480f      	ldr	r0, [pc, #60]	@ (80010cc <MX_RTC_Init+0x94>)
 8001090:	f00c ff06 	bl	800dea0 <HAL_RTC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800109a:	f000 fb89 	bl	80017b0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	@ (80010cc <MX_RTC_Init+0x94>)
 80010b4:	f00d f822 	bl	800e0fc <HAL_RTCEx_PrivilegeModeSet>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80010be:	f000 fb77 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000049c 	.word	0x2000049c
 80010d0:	46007800 	.word	0x46007800

080010d4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <MX_SAI2_Init+0xc4>)
 80010da:	4a30      	ldr	r2, [pc, #192]	@ (800119c <MX_SAI2_Init+0xc8>)
 80010dc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010de:	4b2e      	ldr	r3, [pc, #184]	@ (8001198 <MX_SAI2_Init+0xc4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <MX_SAI2_Init+0xc4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <MX_SAI2_Init+0xc4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010f0:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <MX_SAI2_Init+0xc4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010f6:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <MX_SAI2_Init+0xc4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80010fc:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <MX_SAI2_Init+0xc4>)
 80010fe:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <MX_SAI2_Init+0xcc>)
 8001100:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <MX_SAI2_Init+0xc4>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001108:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <MX_SAI2_Init+0xc4>)
 800110a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800110e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001110:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <MX_SAI2_Init+0xc4>)
 8001112:	2200      	movs	r2, #0
 8001114:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <MX_SAI2_Init+0xc4>)
 8001118:	2200      	movs	r2, #0
 800111a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 800111c:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <MX_SAI2_Init+0xc4>)
 800111e:	2210      	movs	r2, #16
 8001120:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001122:	2302      	movs	r3, #2
 8001124:	2202      	movs	r2, #2
 8001126:	2101      	movs	r1, #1
 8001128:	481b      	ldr	r0, [pc, #108]	@ (8001198 <MX_SAI2_Init+0xc4>)
 800112a:	f00d f815 	bl	800e158 <HAL_SAI_InitProtocol>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001134:	f000 fb3c 	bl	80017b0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 800113a:	4a1b      	ldr	r2, [pc, #108]	@ (80011a8 <MX_SAI2_Init+0xd4>)
 800113c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 8001140:	2201      	movs	r2, #1
 8001142:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 8001158:	2202      	movs	r2, #2
 800115a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <MX_SAI2_Init+0xcc>)
 8001160:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 800116a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800116e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 8001172:	2200      	movs	r2, #0
 8001174:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001176:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 800117c:	2308      	movs	r3, #8
 800117e:	2202      	movs	r2, #2
 8001180:	2100      	movs	r1, #0
 8001182:	4808      	ldr	r0, [pc, #32]	@ (80011a4 <MX_SAI2_Init+0xd0>)
 8001184:	f00c ffe8 	bl	800e158 <HAL_SAI_InitProtocol>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 800118e:	f000 fb0f 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200004cc 	.word	0x200004cc
 800119c:	40015804 	.word	0x40015804
 80011a0:	00017700 	.word	0x00017700
 80011a4:	20000564 	.word	0x20000564
 80011a8:	40015824 	.word	0x40015824

080011ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	615a      	str	r2, [r3, #20]
 80011ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011d2:	4a26      	ldr	r2, [pc, #152]	@ (800126c <MX_TIM3_Init+0xc0>)
 80011d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80011d6:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011d8:	22a0      	movs	r2, #160	@ 0xa0
 80011da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80011e2:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011e4:	2264      	movs	r2, #100	@ 0x64
 80011e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f4:	481c      	ldr	r0, [pc, #112]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011f6:	f00d fdab 	bl	800ed50 <HAL_TIM_PWM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 fad6 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4815      	ldr	r0, [pc, #84]	@ (8001268 <MX_TIM3_Init+0xbc>)
 8001214:	f00e fd82 	bl	800fd1c <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800121e:	f000 fac7 	bl	80017b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001222:	2360      	movs	r3, #96	@ 0x60
 8001224:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001226:	234b      	movs	r3, #75	@ 0x4b
 8001228:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	220c      	movs	r2, #12
 8001236:	4619      	mov	r1, r3
 8001238:	480b      	ldr	r0, [pc, #44]	@ (8001268 <MX_TIM3_Init+0xbc>)
 800123a:	f00d fde1 	bl	800ee00 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001244:	f000 fab4 	bl	80017b0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <MX_TIM3_Init+0xbc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	69da      	ldr	r2, [r3, #28]
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_TIM3_Init+0xbc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001256:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <MX_TIM3_Init+0xbc>)
 800125a:	f001 f857 	bl	800230c <HAL_TIM_MspPostInit>

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	@ 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000764 	.word	0x20000764
 800126c:	40000400 	.word	0x40000400

08001270 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800128e:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_TIM15_Init+0x98>)
 8001290:	4a1e      	ldr	r2, [pc, #120]	@ (800130c <MX_TIM15_Init+0x9c>)
 8001292:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_TIM15_Init+0x98>)
 8001296:	221a      	movs	r2, #26
 8001298:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_TIM15_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_TIM15_Init+0x98>)
 80012a2:	2231      	movs	r2, #49	@ 0x31
 80012a4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_TIM15_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_TIM15_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_TIM15_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80012b8:	4813      	ldr	r0, [pc, #76]	@ (8001308 <MX_TIM15_Init+0x98>)
 80012ba:	f00d fc59 	bl	800eb70 <HAL_TIM_Base_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80012c4:	f000 fa74 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <MX_TIM15_Init+0x98>)
 80012d6:	f00d fea7 	bl	800f028 <HAL_TIM_ConfigClockSource>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80012e0:	f000 fa66 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012e4:	2320      	movs	r3, #32
 80012e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_TIM15_Init+0x98>)
 80012f2:	f00e fd13 	bl	800fd1c <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80012fc:	f000 fa58 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200007b0 	.word	0x200007b0
 800130c:	40014000 	.word	0x40014000

08001310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001314:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001316:	4a23      	ldr	r2, [pc, #140]	@ (80013a4 <MX_USART1_UART_Init+0x94>)
 8001318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131a:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001358:	4811      	ldr	r0, [pc, #68]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800135a:	f00e fda1 	bl	800fea0 <HAL_UART_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001364:	f000 fa24 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800136c:	f00f fd6f 	bl	8010e4e <HAL_UARTEx_SetTxFifoThreshold>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001376:	f000 fa1b 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800137e:	f00f fda4 	bl	8010eca <HAL_UARTEx_SetRxFifoThreshold>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001388:	f000 fa12 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_USART1_UART_Init+0x90>)
 800138e:	f00f fd25 	bl	8010ddc <HAL_UARTEx_DisableFifoMode>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001398:	f000 fa0a 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200007fc 	.word	0x200007fc
 80013a4:	40013800 	.word	0x40013800

080013a8 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80013ac:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ae:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80013b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b4:	2209      	movs	r2, #9
 80013b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013c0:	2203      	movs	r2, #3
 80013c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013d8:	2200      	movs	r2, #0
 80013da:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013de:	2200      	movs	r2, #0
 80013e0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	@ (80013fc <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ea:	f008 f846 	bl	800947a <HAL_PCD_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80013f4:	f000 f9dc 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000890 	.word	0x20000890
 8001400:	42040000 	.word	0x42040000

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08e      	sub	sp, #56	@ 0x38
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	4b8c      	ldr	r3, [pc, #560]	@ (800164c <MX_GPIO_Init+0x248>)
 800141c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001420:	4a8a      	ldr	r2, [pc, #552]	@ (800164c <MX_GPIO_Init+0x248>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800142a:	4b88      	ldr	r3, [pc, #544]	@ (800164c <MX_GPIO_Init+0x248>)
 800142c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	623b      	str	r3, [r7, #32]
 8001436:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	4b84      	ldr	r3, [pc, #528]	@ (800164c <MX_GPIO_Init+0x248>)
 800143a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800143e:	4a83      	ldr	r2, [pc, #524]	@ (800164c <MX_GPIO_Init+0x248>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001448:	4b80      	ldr	r3, [pc, #512]	@ (800164c <MX_GPIO_Init+0x248>)
 800144a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001456:	4b7d      	ldr	r3, [pc, #500]	@ (800164c <MX_GPIO_Init+0x248>)
 8001458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145c:	4a7b      	ldr	r2, [pc, #492]	@ (800164c <MX_GPIO_Init+0x248>)
 800145e:	f043 0320 	orr.w	r3, r3, #32
 8001462:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001466:	4b79      	ldr	r3, [pc, #484]	@ (800164c <MX_GPIO_Init+0x248>)
 8001468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001474:	4b75      	ldr	r3, [pc, #468]	@ (800164c <MX_GPIO_Init+0x248>)
 8001476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147a:	4a74      	ldr	r2, [pc, #464]	@ (800164c <MX_GPIO_Init+0x248>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001480:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001484:	4b71      	ldr	r3, [pc, #452]	@ (800164c <MX_GPIO_Init+0x248>)
 8001486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b6e      	ldr	r3, [pc, #440]	@ (800164c <MX_GPIO_Init+0x248>)
 8001494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001498:	4a6c      	ldr	r2, [pc, #432]	@ (800164c <MX_GPIO_Init+0x248>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014a2:	4b6a      	ldr	r3, [pc, #424]	@ (800164c <MX_GPIO_Init+0x248>)
 80014a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b0:	4b66      	ldr	r3, [pc, #408]	@ (800164c <MX_GPIO_Init+0x248>)
 80014b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b6:	4a65      	ldr	r2, [pc, #404]	@ (800164c <MX_GPIO_Init+0x248>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014c0:	4b62      	ldr	r3, [pc, #392]	@ (800164c <MX_GPIO_Init+0x248>)
 80014c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ce:	4b5f      	ldr	r3, [pc, #380]	@ (800164c <MX_GPIO_Init+0x248>)
 80014d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d4:	4a5d      	ldr	r2, [pc, #372]	@ (800164c <MX_GPIO_Init+0x248>)
 80014d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014de:	4b5b      	ldr	r3, [pc, #364]	@ (800164c <MX_GPIO_Init+0x248>)
 80014e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ec:	4b57      	ldr	r3, [pc, #348]	@ (800164c <MX_GPIO_Init+0x248>)
 80014ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f2:	4a56      	ldr	r2, [pc, #344]	@ (800164c <MX_GPIO_Init+0x248>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014fc:	4b53      	ldr	r3, [pc, #332]	@ (800164c <MX_GPIO_Init+0x248>)
 80014fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800150a:	4b50      	ldr	r3, [pc, #320]	@ (800164c <MX_GPIO_Init+0x248>)
 800150c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001510:	4a4e      	ldr	r2, [pc, #312]	@ (800164c <MX_GPIO_Init+0x248>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001516:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800151a:	4b4c      	ldr	r3, [pc, #304]	@ (800164c <MX_GPIO_Init+0x248>)
 800151c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2104      	movs	r1, #4
 800152c:	4848      	ldr	r0, [pc, #288]	@ (8001650 <MX_GPIO_Init+0x24c>)
 800152e:	f006 f9b1 	bl	8007894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2110      	movs	r1, #16
 8001536:	4846      	ldr	r0, [pc, #280]	@ (8001650 <MX_GPIO_Init+0x24c>)
 8001538:	f006 f9ac 	bl	8007894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2114      	movs	r1, #20
 8001540:	4844      	ldr	r0, [pc, #272]	@ (8001654 <MX_GPIO_Init+0x250>)
 8001542:	f006 f9a7 	bl	8007894 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001546:	2314      	movs	r3, #20
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	483c      	ldr	r0, [pc, #240]	@ (8001650 <MX_GPIO_Init+0x24c>)
 800155e:	f005 ffc1 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001562:	2320      	movs	r3, #32
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001566:	4b3c      	ldr	r3, [pc, #240]	@ (8001658 <MX_GPIO_Init+0x254>)
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4836      	ldr	r0, [pc, #216]	@ (8001650 <MX_GPIO_Init+0x24c>)
 8001576:	f005 ffb5 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800157a:	2302      	movs	r3, #2
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800157e:	4b37      	ldr	r3, [pc, #220]	@ (800165c <MX_GPIO_Init+0x258>)
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	4834      	ldr	r0, [pc, #208]	@ (8001660 <MX_GPIO_Init+0x25c>)
 800158e:	f005 ffa9 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001592:	2310      	movs	r3, #16
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001596:	4b33      	ldr	r3, [pc, #204]	@ (8001664 <MX_GPIO_Init+0x260>)
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159a:	2301      	movs	r3, #1
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	482e      	ldr	r0, [pc, #184]	@ (8001660 <MX_GPIO_Init+0x25c>)
 80015a6:	f005 ff9d 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80015aa:	2314      	movs	r3, #20
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4824      	ldr	r0, [pc, #144]	@ (8001654 <MX_GPIO_Init+0x250>)
 80015c2:	f005 ff8f 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80015c6:	2380      	movs	r3, #128	@ 0x80
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	481e      	ldr	r0, [pc, #120]	@ (8001654 <MX_GPIO_Init+0x250>)
 80015da:	f005 ff83 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80015de:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	481d      	ldr	r0, [pc, #116]	@ (8001668 <MX_GPIO_Init+0x264>)
 80015f4:	f005 ff76 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80015f8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	4817      	ldr	r0, [pc, #92]	@ (800166c <MX_GPIO_Init+0x268>)
 800160e:	f005 ff69 	bl	80074e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200c      	movs	r0, #12
 8001618:	f003 fe4a 	bl	80052b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800161c:	200c      	movs	r0, #12
 800161e:	f003 fe61 	bl	80052e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	200f      	movs	r0, #15
 8001628:	f003 fe42 	bl	80052b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800162c:	200f      	movs	r0, #15
 800162e:	f003 fe59 	bl	80052e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2010      	movs	r0, #16
 8001638:	f003 fe3a 	bl	80052b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 800163c:	2010      	movs	r0, #16
 800163e:	f003 fe51 	bl	80052e4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001642:	bf00      	nop
 8001644:	3738      	adds	r7, #56	@ 0x38
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	46020c00 	.word	0x46020c00
 8001650:	42021000 	.word	0x42021000
 8001654:	42020c00 	.word	0x42020c00
 8001658:	10110000 	.word	0x10110000
 800165c:	10310000 	.word	0x10310000
 8001660:	42020000 	.word	0x42020000
 8001664:	10210000 	.word	0x10210000
 8001668:	42021800 	.word	0x42021800
 800166c:	42020400 	.word	0x42020400

08001670 <HAL_SAI_RxHalfCpltCallback>:
	temp = temp / denoiseSize;
	return temp;
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 8 ) / 2; i += 8)
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	e033      	b.n	80016ea <HAL_SAI_RxHalfCpltCallback+0x7a>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 8001682:	4a1f      	ldr	r2, [pc, #124]	@ (8001700 <HAL_SAI_RxHalfCpltCallback+0x90>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001692:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001696:	ee27 7a87 	vmul.f32	s14, s15, s14
 800169a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001704 <HAL_SAI_RxHalfCpltCallback+0x94>
 800169e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ae:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 80016b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001708 <HAL_SAI_RxHalfCpltCallback+0x98>
 80016ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c2:	ee17 3a90 	vmov	r3, s15
 80016c6:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 80016c8:	8afb      	ldrh	r3, [r7, #22]
 80016ca:	4910      	ldr	r1, [pc, #64]	@ (800170c <HAL_SAI_RxHalfCpltCallback+0x9c>)
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 80016d2:	8afb      	ldrh	r3, [r7, #22]
 80016d4:	3301      	adds	r3, #1
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <HAL_SAI_RxHalfCpltCallback+0x9c>)
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 80016de:	8afb      	ldrh	r3, [r7, #22]
 80016e0:	3302      	adds	r3, #2
 80016e2:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 8 ) / 2; i += 8)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	3308      	adds	r3, #8
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	ddc8      	ble.n	8001682 <HAL_SAI_RxHalfCpltCallback+0x12>
	}
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000d94 	.word	0x20000d94
 8001704:	4b800000 	.word	0x4b800000
 8001708:	4b000000 	.word	0x4b000000
 800170c:	20000db4 	.word	0x20000db4

08001710 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = sampleSize;
 8001718:	2301      	movs	r3, #1
 800171a:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8)) / 2; i < sampleSize * 8; i += 8)
 800171c:	2304      	movs	r3, #4
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	e033      	b.n	800178a <HAL_SAI_RxCpltCallback+0x7a>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 8001722:	4a1f      	ldr	r2, [pc, #124]	@ (80017a0 <HAL_SAI_RxCpltCallback+0x90>)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001732:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001736:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80017a4 <HAL_SAI_RxCpltCallback+0x94>
 800173e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001742:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800174a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174e:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 8001752:	edd7 7a03 	vldr	s15, [r7, #12]
 8001756:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80017a8 <HAL_SAI_RxCpltCallback+0x98>
 800175a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001762:	ee17 3a90 	vmov	r3, s15
 8001766:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 8001768:	8afb      	ldrh	r3, [r7, #22]
 800176a:	4910      	ldr	r1, [pc, #64]	@ (80017ac <HAL_SAI_RxCpltCallback+0x9c>)
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 8001772:	8afb      	ldrh	r3, [r7, #22]
 8001774:	3301      	adds	r3, #1
 8001776:	490d      	ldr	r1, [pc, #52]	@ (80017ac <HAL_SAI_RxCpltCallback+0x9c>)
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 800177e:	8afb      	ldrh	r3, [r7, #22]
 8001780:	3302      	adds	r3, #2
 8001782:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8)) / 2; i < sampleSize * 8; i += 8)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	3308      	adds	r3, #8
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b07      	cmp	r3, #7
 800178e:	ddc8      	ble.n	8001722 <HAL_SAI_RxCpltCallback+0x12>
	}
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000d94 	.word	0x20000d94
 80017a4:	4b800000 	.word	0x4b800000
 80017a8:	4b000000 	.word	0x4b000000
 80017ac:	20000db4 	.word	0x20000db4

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <Error_Handler+0x8>

080017bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_MspInit+0x30>)
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c8:	4a08      	ldr	r2, [pc, #32]	@ (80017ec <HAL_MspInit+0x30>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_MspInit+0x30>)
 80017d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80017e0:	f008 f888 	bl	80098f4 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	46020c00 	.word	0x46020c00

080017f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0e0      	sub	sp, #384	@ 0x180
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017fa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001814:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001818:	4618      	mov	r0, r3
 800181a:	23e0      	movs	r3, #224	@ 0xe0
 800181c:	461a      	mov	r2, r3
 800181e:	2100      	movs	r1, #0
 8001820:	f010 f847 	bl	80118b2 <memset>
  if(hadc->Instance==ADC1)
 8001824:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001828:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4aa1      	ldr	r2, [pc, #644]	@ (8001ab8 <HAL_ADC_MspInit+0x2c8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	f040 8152 	bne.w	8001adc <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001838:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800183c:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001840:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800184c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001850:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001854:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001858:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185c:	f107 0320 	add.w	r3, r7, #32
 8001860:	4618      	mov	r0, r3
 8001862:	f009 fb21 	bl	800aea8 <HAL_RCCEx_PeriphCLKConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 800186c:	f7ff ffa0 	bl	80017b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001870:	4b92      	ldr	r3, [pc, #584]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 8001872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001876:	4a91      	ldr	r2, [pc, #580]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 8001878:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800187c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001880:	4b8e      	ldr	r3, [pc, #568]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 8001882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001886:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800188a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800188e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001898:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800189c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800189e:	4b87      	ldr	r3, [pc, #540]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 80018a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a4:	4a85      	ldr	r2, [pc, #532]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018ae:	4b83      	ldr	r3, [pc, #524]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 80018b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b4:	f003 0204 	and.w	r2, r3, #4
 80018b8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018bc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018ca:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b7b      	ldr	r3, [pc, #492]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 80018ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d2:	4a7a      	ldr	r2, [pc, #488]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018dc:	4b77      	ldr	r3, [pc, #476]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 80018de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018f8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b70      	ldr	r3, [pc, #448]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 80018fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001900:	4a6e      	ldr	r2, [pc, #440]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800190a:	4b6c      	ldr	r3, [pc, #432]	@ (8001abc <HAL_ADC_MspInit+0x2cc>)
 800190c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001910:	f003 0202 	and.w	r2, r3, #2
 8001914:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001918:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001922:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001926:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001928:	230f      	movs	r3, #15
 800192a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192e:	2303      	movs	r3, #3
 8001930:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193a:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800193e:	4619      	mov	r1, r3
 8001940:	485f      	ldr	r0, [pc, #380]	@ (8001ac0 <HAL_ADC_MspInit+0x2d0>)
 8001942:	f005 fdcf 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8001946:	23ed      	movs	r3, #237	@ 0xed
 8001948:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194c:	2303      	movs	r3, #3
 800194e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800195c:	4619      	mov	r1, r3
 800195e:	4859      	ldr	r0, [pc, #356]	@ (8001ac4 <HAL_ADC_MspInit+0x2d4>)
 8001960:	f005 fdc0 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8001964:	2303      	movs	r3, #3
 8001966:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800197a:	4619      	mov	r1, r3
 800197c:	4852      	ldr	r0, [pc, #328]	@ (8001ac8 <HAL_ADC_MspInit+0x2d8>)
 800197e:	f005 fdb1 	bl	80074e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001982:	2321      	movs	r3, #33	@ 0x21
 8001984:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80019a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80019a4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80019ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 80019bc:	2301      	movs	r3, #1
 80019be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80019c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80019dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019e0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80019e4:	232b      	movs	r3, #43	@ 0x2b
 80019e6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80019f6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80019fa:	4934      	ldr	r1, [pc, #208]	@ (8001acc <HAL_ADC_MspInit+0x2dc>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fe85 	bl	800670c <HAL_DMAEx_List_BuildNode>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 8001a08:	f7ff fed2 	bl	80017b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8001acc <HAL_ADC_MspInit+0x2dc>)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	482f      	ldr	r0, [pc, #188]	@ (8001ad0 <HAL_ADC_MspInit+0x2e0>)
 8001a12:	f004 fea7 	bl	8006764 <HAL_DMAEx_List_InsertNode>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8001a1c:	f7ff fec8 	bl	80017b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001a20:	482b      	ldr	r0, [pc, #172]	@ (8001ad0 <HAL_ADC_MspInit+0x2e0>)
 8001a22:	f004 ff68 	bl	80068f6 <HAL_DMAEx_List_SetCircularMode>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8001a2c:	f7ff fec0 	bl	80017b0 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001a30:	4b28      	ldr	r3, [pc, #160]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a32:	4a29      	ldr	r2, [pc, #164]	@ (8001ad8 <HAL_ADC_MspInit+0x2e8>)
 8001a34:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001a36:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a48:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a50:	2281      	movs	r2, #129	@ 0x81
 8001a52:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001a54:	481f      	ldr	r0, [pc, #124]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a56:	f004 fc99 	bl	800638c <HAL_DMAEx_List_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001a60:	f7ff fea6 	bl	80017b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001a64:	491a      	ldr	r1, [pc, #104]	@ (8001ad0 <HAL_ADC_MspInit+0x2e0>)
 8001a66:	481b      	ldr	r0, [pc, #108]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a68:	f004 ffa6 	bl	80069b8 <HAL_DMAEx_List_LinkQ>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8001a72:	f7ff fe9d 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001a76:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a7a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a82:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a84:	4a13      	ldr	r2, [pc, #76]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a86:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a8a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a92:	2110      	movs	r1, #16
 8001a94:	480f      	ldr	r0, [pc, #60]	@ (8001ad4 <HAL_ADC_MspInit+0x2e4>)
 8001a96:	f004 f887 	bl	8005ba8 <HAL_DMA_ConfigChannelAttributes>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001aa0:	f7ff fe86 	bl	80017b0 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2025      	movs	r0, #37	@ 0x25
 8001aaa:	f003 fc01 	bl	80052b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001aae:	2025      	movs	r0, #37	@ 0x25
 8001ab0:	f003 fc18 	bl	80052e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001ab4:	e0c0      	b.n	8001c38 <HAL_ADC_MspInit+0x448>
 8001ab6:	bf00      	nop
 8001ab8:	42028000 	.word	0x42028000
 8001abc:	46020c00 	.word	0x46020c00
 8001ac0:	42020800 	.word	0x42020800
 8001ac4:	42020000 	.word	0x42020000
 8001ac8:	42020400 	.word	0x42020400
 8001acc:	20000158 	.word	0x20000158
 8001ad0:	2000017c 	.word	0x2000017c
 8001ad4:	20000194 	.word	0x20000194
 8001ad8:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001adc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ae0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a56      	ldr	r2, [pc, #344]	@ (8001c44 <HAL_ADC_MspInit+0x454>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	f040 80a4 	bne.w	8001c38 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001af0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001af4:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001af8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001b04:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b08:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b10:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f009 f9c5 	bl	800aea8 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001b24:	f7ff fe44 	bl	80017b0 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001b28:	4b47      	ldr	r3, [pc, #284]	@ (8001c48 <HAL_ADC_MspInit+0x458>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2e:	4a46      	ldr	r2, [pc, #280]	@ (8001c48 <HAL_ADC_MspInit+0x458>)
 8001b30:	f043 0320 	orr.w	r3, r3, #32
 8001b34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b38:	4b43      	ldr	r3, [pc, #268]	@ (8001c48 <HAL_ADC_MspInit+0x458>)
 8001b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b3e:	f003 0220 	and.w	r2, r3, #32
 8001b42:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b46:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b50:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b54:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b56:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <HAL_ADC_MspInit+0x458>)
 8001b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c48 <HAL_ADC_MspInit+0x458>)
 8001b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b66:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <HAL_ADC_MspInit+0x458>)
 8001b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6c:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001b70:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b74:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b7e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b82:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001b84:	2303      	movs	r3, #3
 8001b86:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b96:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	482b      	ldr	r0, [pc, #172]	@ (8001c4c <HAL_ADC_MspInit+0x45c>)
 8001b9e:	f005 fca1 	bl	80074e4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c54 <HAL_ADC_MspInit+0x464>)
 8001ba6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001ba8:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001bae:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb4:	4b26      	ldr	r3, [pc, #152]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001bba:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001bc0:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bc2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bc6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001bc8:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001bce:	4b20      	ldr	r3, [pc, #128]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bd0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bd4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001be2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001be8:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001bfa:	4815      	ldr	r0, [pc, #84]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001bfc:	f003 fc34 	bl	8005468 <HAL_DMA_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001c06:	f7ff fdd3 	bl	80017b0 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001c0a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001c0e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001c16:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c18:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001c1a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001c1e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c26:	2110      	movs	r1, #16
 8001c28:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <HAL_ADC_MspInit+0x460>)
 8001c2a:	f003 ffbd 	bl	8005ba8 <HAL_DMA_ConfigChannelAttributes>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8001c34:	f7ff fdbc 	bl	80017b0 <Error_Handler>
}
 8001c38:	bf00      	nop
 8001c3a:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	46021000 	.word	0x46021000
 8001c48:	46020c00 	.word	0x46020c00
 8001c4c:	42021800 	.word	0x42021800
 8001c50:	2000020c 	.word	0x2000020c
 8001c54:	40020150 	.word	0x40020150

08001c58 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0b      	ldr	r2, [pc, #44]	@ (8001c94 <HAL_DMA2D_MspInit+0x3c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10e      	bne.n	8001c88 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_DMA2D_MspInit+0x40>)
 8001c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c70:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <HAL_DMA2D_MspInit+0x40>)
 8001c72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <HAL_DMA2D_MspInit+0x40>)
 8001c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	4002b000 	.word	0x4002b000
 8001c98:	46020c00 	.word	0x46020c00

08001c9c <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	@ 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d64 <HAL_XSPI_MspInit+0xc8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d14d      	bne.n	8001d5a <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <HAL_XSPI_MspInit+0xcc>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc4:	4a28      	ldr	r2, [pc, #160]	@ (8001d68 <HAL_XSPI_MspInit+0xcc>)
 8001cc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cce:	4b26      	ldr	r3, [pc, #152]	@ (8001d68 <HAL_XSPI_MspInit+0xcc>)
 8001cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cdc:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <HAL_XSPI_MspInit+0xcc>)
 8001cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce2:	4a21      	ldr	r2, [pc, #132]	@ (8001d68 <HAL_XSPI_MspInit+0xcc>)
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <HAL_XSPI_MspInit+0xcc>)
 8001cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <HAL_XSPI_MspInit+0xcc>)
 8001cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d00:	4a19      	ldr	r2, [pc, #100]	@ (8001d68 <HAL_XSPI_MspInit+0xcc>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <HAL_XSPI_MspInit+0xcc>)
 8001d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001d18:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001d1c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	480d      	ldr	r0, [pc, #52]	@ (8001d6c <HAL_XSPI_MspInit+0xd0>)
 8001d36:	f005 fbd5 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4806      	ldr	r0, [pc, #24]	@ (8001d70 <HAL_XSPI_MspInit+0xd4>)
 8001d56:	f005 fbc5 	bl	80074e4 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	@ 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	420d3400 	.word	0x420d3400
 8001d68:	46020c00 	.word	0x46020c00
 8001d6c:	42021c00 	.word	0x42021c00
 8001d70:	42022000 	.word	0x42022000

08001d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0c4      	sub	sp, #272	@ 0x110
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d82:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	22e0      	movs	r2, #224	@ 0xe0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f00f fd88 	bl	80118b2 <memset>
  if(hi2c->Instance==I2C1)
 8001da2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001da6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a63      	ldr	r2, [pc, #396]	@ (8001f3c <HAL_I2C_MspInit+0x1c8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d14f      	bne.n	8001e54 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001db4:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc6:	f107 0318 	add.w	r3, r7, #24
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f009 f86c 	bl	800aea8 <HAL_RCCEx_PeriphCLKConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001dd6:	f7ff fceb 	bl	80017b0 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dda:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de0:	4a57      	ldr	r2, [pc, #348]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001de6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dea:	4b55      	ldr	r3, [pc, #340]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001df8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001dfc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e00:	2312      	movs	r3, #18
 8001e02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e12:	2304      	movs	r3, #4
 8001e14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e18:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4849      	ldr	r0, [pc, #292]	@ (8001f44 <HAL_I2C_MspInit+0x1d0>)
 8001e20:	f005 fb60 	bl	80074e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	4b46      	ldr	r3, [pc, #280]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e2a:	4a45      	ldr	r2, [pc, #276]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001e2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e30:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e34:	4b42      	ldr	r3, [pc, #264]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e3a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001e3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e42:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e50:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e52:	e06e      	b.n	8001f32 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001e54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e58:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a39      	ldr	r2, [pc, #228]	@ (8001f48 <HAL_I2C_MspInit+0x1d4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d165      	bne.n	8001f32 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e66:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f009 f813 	bl	800aea8 <HAL_RCCEx_PeriphCLKConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001e88:	f7ff fc92 	bl	80017b0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e92:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e9c:	4b28      	ldr	r3, [pc, #160]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ea2:	f003 0220 	and.w	r2, r3, #32
 8001ea6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eb8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec0:	2312      	movs	r3, #18
 8001ec2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ed8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001edc:	4619      	mov	r1, r3
 8001ede:	481b      	ldr	r0, [pc, #108]	@ (8001f4c <HAL_I2C_MspInit+0x1d8>)
 8001ee0:	f005 fb00 	bl	80074e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001eea:	4a15      	ldr	r2, [pc, #84]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_I2C_MspInit+0x1cc>)
 8001ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001efa:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001efe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f10:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2039      	movs	r0, #57	@ 0x39
 8001f18:	f003 f9ca 	bl	80052b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001f1c:	2039      	movs	r0, #57	@ 0x39
 8001f1e:	f003 f9e1 	bl	80052e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	203a      	movs	r0, #58	@ 0x3a
 8001f28:	f003 f9c2 	bl	80052b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001f2c:	203a      	movs	r0, #58	@ 0x3a
 8001f2e:	f003 f9d9 	bl	80052e4 <HAL_NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40005400 	.word	0x40005400
 8001f40:	46020c00 	.word	0x46020c00
 8001f44:	42021800 	.word	0x42021800
 8001f48:	40005800 	.word	0x40005800
 8001f4c:	42021400 	.word	0x42021400

08001f50 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0c6      	sub	sp, #280	@ 0x118
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f5e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f70:	f107 0320 	add.w	r3, r7, #32
 8001f74:	22e0      	movs	r2, #224	@ 0xe0
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00f fc9a 	bl	80118b2 <memset>
  if(hltdc->Instance==LTDC)
 8001f7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a92      	ldr	r2, [pc, #584]	@ (80021d4 <HAL_LTDC_MspInit+0x284>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	f040 811b 	bne.w	80021c8 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0302 	mov.w	r3, #2
 8001f9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001fac:	2332      	movs	r3, #50	@ 0x32
 8001fae:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001fc4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f008 ff6a 	bl	800aea8 <HAL_RCCEx_PeriphCLKConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001fda:	f7ff fbe9 	bl	80017b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fde:	4b7e      	ldr	r3, [pc, #504]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 8001fe0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fe4:	4a7c      	ldr	r2, [pc, #496]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 8001fe6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001fea:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001fee:	4b7a      	ldr	r3, [pc, #488]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 8001ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ff4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	4b76      	ldr	r3, [pc, #472]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 8001ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002002:	4a75      	ldr	r2, [pc, #468]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800200c:	4b72      	ldr	r3, [pc, #456]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 800200e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002012:	f003 0202 	and.w	r2, r3, #2
 8002016:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800201a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002024:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002028:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800202a:	4b6b      	ldr	r3, [pc, #428]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 800202c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002030:	4a69      	ldr	r2, [pc, #420]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 8002032:	f043 0310 	orr.w	r3, r3, #16
 8002036:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800203a:	4b67      	ldr	r3, [pc, #412]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 800203c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002040:	f003 0210 	and.w	r2, r3, #16
 8002044:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002056:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002058:	4b5f      	ldr	r3, [pc, #380]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 800205a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800205e:	4a5e      	ldr	r2, [pc, #376]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 8002060:	f043 0308 	orr.w	r3, r3, #8
 8002064:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002068:	4b5b      	ldr	r3, [pc, #364]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 800206a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800206e:	f003 0208 	and.w	r2, r3, #8
 8002072:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002084:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	4b54      	ldr	r3, [pc, #336]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 8002088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800208c:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 800208e:	f043 0304 	orr.w	r3, r3, #4
 8002092:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002096:	4b50      	ldr	r3, [pc, #320]	@ (80021d8 <HAL_LTDC_MspInit+0x288>)
 8002098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209c:	f003 0204 	and.w	r2, r3, #4
 80020a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020b2:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b4:	2304      	movs	r3, #4
 80020b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020cc:	2308      	movs	r3, #8
 80020ce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020d6:	4619      	mov	r1, r3
 80020d8:	4840      	ldr	r0, [pc, #256]	@ (80021dc <HAL_LTDC_MspInit+0x28c>)
 80020da:	f005 fa03 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80020de:	f64f 7381 	movw	r3, #65409	@ 0xff81
 80020e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020f8:	2308      	movs	r3, #8
 80020fa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020fe:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002102:	4619      	mov	r1, r3
 8002104:	4836      	ldr	r0, [pc, #216]	@ (80021e0 <HAL_LTDC_MspInit+0x290>)
 8002106:	f005 f9ed 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800210a:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 800210e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002124:	2308      	movs	r3, #8
 8002126:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800212e:	4619      	mov	r1, r3
 8002130:	482c      	ldr	r0, [pc, #176]	@ (80021e4 <HAL_LTDC_MspInit+0x294>)
 8002132:	f005 f9d7 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002136:	23c0      	movs	r3, #192	@ 0xc0
 8002138:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 800214e:	2307      	movs	r3, #7
 8002150:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002154:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002158:	4619      	mov	r1, r3
 800215a:	4823      	ldr	r0, [pc, #140]	@ (80021e8 <HAL_LTDC_MspInit+0x298>)
 800215c:	f005 f9c2 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002160:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002164:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800217a:	2308      	movs	r3, #8
 800217c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002180:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002184:	4619      	mov	r1, r3
 8002186:	4818      	ldr	r0, [pc, #96]	@ (80021e8 <HAL_LTDC_MspInit+0x298>)
 8002188:	f005 f9ac 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800218c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002190:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80021a6:	2307      	movs	r3, #7
 80021a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ac:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80021b0:	4619      	mov	r1, r3
 80021b2:	480a      	ldr	r0, [pc, #40]	@ (80021dc <HAL_LTDC_MspInit+0x28c>)
 80021b4:	f005 f996 	bl	80074e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	2087      	movs	r0, #135	@ 0x87
 80021be:	f003 f877 	bl	80052b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80021c2:	2087      	movs	r0, #135	@ 0x87
 80021c4:	f003 f88e 	bl	80052e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80021c8:	bf00      	nop
 80021ca:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40016800 	.word	0x40016800
 80021d8:	46020c00 	.word	0x46020c00
 80021dc:	42020400 	.word	0x42020400
 80021e0:	42021000 	.word	0x42021000
 80021e4:	42020c00 	.word	0x42020c00
 80021e8:	42020800 	.word	0x42020800

080021ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0bc      	sub	sp, #240	@ 0xf0
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	22e0      	movs	r2, #224	@ 0xe0
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f00f fb58 	bl	80118b2 <memset>
  if(hrtc->Instance==RTC)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1d      	ldr	r2, [pc, #116]	@ (800227c <HAL_RTC_MspInit+0x90>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d132      	bne.n	8002272 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800220c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800221c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	4618      	mov	r0, r3
 8002226:	f008 fe3f 	bl	800aea8 <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002230:	f7ff fabe 	bl	80017b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <HAL_RTC_MspInit+0x94>)
 8002236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800223a:	4a11      	ldr	r2, [pc, #68]	@ (8002280 <HAL_RTC_MspInit+0x94>)
 800223c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002240:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002244:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <HAL_RTC_MspInit+0x94>)
 8002246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800224a:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <HAL_RTC_MspInit+0x94>)
 800224c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002250:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002254:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_RTC_MspInit+0x94>)
 8002256:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800225a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002262:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <HAL_RTC_MspInit+0x94>)
 8002264:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002268:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <HAL_RTC_MspInit+0x94>)
 800226a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800226e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002272:	bf00      	nop
 8002274:	37f0      	adds	r7, #240	@ 0xf0
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	46007800 	.word	0x46007800
 8002280:	46020c00 	.word	0x46020c00

08002284 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0b      	ldr	r2, [pc, #44]	@ (80022c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_TIM_PWM_MspInit+0x40>)
 8002298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800229c:	4a09      	ldr	r2, [pc, #36]	@ (80022c4 <HAL_TIM_PWM_MspInit+0x40>)
 800229e:	f043 0302 	orr.w	r3, r3, #2
 80022a2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022a6:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <HAL_TIM_PWM_MspInit+0x40>)
 80022a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40000400 	.word	0x40000400
 80022c4:	46020c00 	.word	0x46020c00

080022c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002304 <HAL_TIM_Base_MspInit+0x3c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022da:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <HAL_TIM_Base_MspInit+0x40>)
 80022dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022e0:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <HAL_TIM_Base_MspInit+0x40>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <HAL_TIM_Base_MspInit+0x40>)
 80022ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40014000 	.word	0x40014000
 8002308:	46020c00 	.word	0x46020c00

0800230c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <HAL_TIM_MspPostInit+0x68>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d11e      	bne.n	800236c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_TIM_MspPostInit+0x6c>)
 8002330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002334:	4a10      	ldr	r2, [pc, #64]	@ (8002378 <HAL_TIM_MspPostInit+0x6c>)
 8002336:	f043 0310 	orr.w	r3, r3, #16
 800233a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <HAL_TIM_MspPostInit+0x6c>)
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 800234c:	2340      	movs	r3, #64	@ 0x40
 800234e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800235c:	2302      	movs	r3, #2
 800235e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	4619      	mov	r1, r3
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <HAL_TIM_MspPostInit+0x70>)
 8002368:	f005 f8bc 	bl	80074e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800236c:	bf00      	nop
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40000400 	.word	0x40000400
 8002378:	46020c00 	.word	0x46020c00
 800237c:	42021000 	.word	0x42021000

08002380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0c2      	sub	sp, #264	@ 0x108
 8002384:	af00      	add	r7, sp, #0
 8002386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800238a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800238e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	22e0      	movs	r2, #224	@ 0xe0
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f00f fa82 	bl	80118b2 <memset>
  if(huart->Instance==USART1)
 80023ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002478 <HAL_UART_MspInit+0xf8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d155      	bne.n	800246c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023c0:	f04f 0201 	mov.w	r2, #1
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023cc:	2300      	movs	r3, #0
 80023ce:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4618      	mov	r0, r3
 80023d6:	f008 fd67 	bl	800aea8 <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80023e0:	f7ff f9e6 	bl	80017b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e4:	4b25      	ldr	r3, [pc, #148]	@ (800247c <HAL_UART_MspInit+0xfc>)
 80023e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023ea:	4a24      	ldr	r2, [pc, #144]	@ (800247c <HAL_UART_MspInit+0xfc>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023f4:	4b21      	ldr	r3, [pc, #132]	@ (800247c <HAL_UART_MspInit+0xfc>)
 80023f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <HAL_UART_MspInit+0xfc>)
 8002404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002408:	4a1c      	ldr	r2, [pc, #112]	@ (800247c <HAL_UART_MspInit+0xfc>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <HAL_UART_MspInit+0xfc>)
 8002414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002418:	f003 0201 	and.w	r2, r3, #1
 800241c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002420:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800242a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800242e:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002430:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002434:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800244a:	2307      	movs	r3, #7
 800244c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002454:	4619      	mov	r1, r3
 8002456:	480a      	ldr	r0, [pc, #40]	@ (8002480 <HAL_UART_MspInit+0x100>)
 8002458:	f005 f844 	bl	80074e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	2100      	movs	r1, #0
 8002460:	203d      	movs	r0, #61	@ 0x3d
 8002462:	f002 ff25 	bl	80052b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002466:	203d      	movs	r0, #61	@ 0x3d
 8002468:	f002 ff3c 	bl	80052e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800246c:	bf00      	nop
 800246e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40013800 	.word	0x40013800
 800247c:	46020c00 	.word	0x46020c00
 8002480:	42020000 	.word	0x42020000

08002484 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0be      	sub	sp, #248	@ 0xf8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800248c:	f107 0318 	add.w	r3, r7, #24
 8002490:	22e0      	movs	r2, #224	@ 0xe0
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f00f fa0c 	bl	80118b2 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a3a      	ldr	r2, [pc, #232]	@ (8002588 <HAL_PCD_MspInit+0x104>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d16d      	bne.n	8002580 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a4:	4b39      	ldr	r3, [pc, #228]	@ (800258c <HAL_PCD_MspInit+0x108>)
 80024a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80024aa:	4a38      	ldr	r2, [pc, #224]	@ (800258c <HAL_PCD_MspInit+0x108>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80024b4:	4b35      	ldr	r3, [pc, #212]	@ (800258c <HAL_PCD_MspInit+0x108>)
 80024b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0308 	mov.w	r3, #8
 80024ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80024ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d6:	f107 0318 	add.w	r3, r7, #24
 80024da:	4618      	mov	r0, r3
 80024dc:	f008 fce4 	bl	800aea8 <HAL_RCCEx_PeriphCLKConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80024e6:	f7ff f963 	bl	80017b0 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80024ea:	200c      	movs	r0, #12
 80024ec:	f000 fc1c 	bl	8002d28 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80024f0:	4b26      	ldr	r3, [pc, #152]	@ (800258c <HAL_PCD_MspInit+0x108>)
 80024f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f6:	4a25      	ldr	r2, [pc, #148]	@ (800258c <HAL_PCD_MspInit+0x108>)
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002500:	4b22      	ldr	r3, [pc, #136]	@ (800258c <HAL_PCD_MspInit+0x108>)
 8002502:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 800250e:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <HAL_PCD_MspInit+0x108>)
 8002510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002514:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <HAL_PCD_MspInit+0x108>)
 8002516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800251e:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <HAL_PCD_MspInit+0x108>)
 8002520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252c:	4b17      	ldr	r3, [pc, #92]	@ (800258c <HAL_PCD_MspInit+0x108>)
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11b      	bne.n	8002572 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_PCD_MspInit+0x108>)
 800253c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002540:	4a12      	ldr	r2, [pc, #72]	@ (800258c <HAL_PCD_MspInit+0x108>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800254a:	4b10      	ldr	r3, [pc, #64]	@ (800258c <HAL_PCD_MspInit+0x108>)
 800254c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002558:	f007 f9ac 	bl	80098b4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800255c:	f007 f9da 	bl	8009914 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_PCD_MspInit+0x108>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002566:	4a09      	ldr	r2, [pc, #36]	@ (800258c <HAL_PCD_MspInit+0x108>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002570:	e003      	b.n	800257a <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002572:	f007 f99f 	bl	80098b4 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002576:	f007 f9cd 	bl	8009914 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800257a:	2001      	movs	r0, #1
 800257c:	f000 fbc0 	bl	8002d00 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002580:	bf00      	nop
 8002582:	37f8      	adds	r7, #248	@ 0xf8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	42040000 	.word	0x42040000
 800258c:	46020c00 	.word	0x46020c00

08002590 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b0a4      	sub	sp, #144	@ 0x90
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4abb      	ldr	r2, [pc, #748]	@ (800288c <HAL_SAI_MspInit+0x2fc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	f040 80ca 	bne.w	8002738 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80025a4:	4bba      	ldr	r3, [pc, #744]	@ (8002890 <HAL_SAI_MspInit+0x300>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10e      	bne.n	80025ca <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80025ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002894 <HAL_SAI_MspInit+0x304>)
 80025ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025b2:	4ab8      	ldr	r2, [pc, #736]	@ (8002894 <HAL_SAI_MspInit+0x304>)
 80025b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025b8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80025bc:	4bb5      	ldr	r3, [pc, #724]	@ (8002894 <HAL_SAI_MspInit+0x304>)
 80025be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80025ca:	4bb1      	ldr	r3, [pc, #708]	@ (8002890 <HAL_SAI_MspInit+0x300>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	4aaf      	ldr	r2, [pc, #700]	@ (8002890 <HAL_SAI_MspInit+0x300>)
 80025d2:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80025d4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80025d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025ec:	230d      	movs	r3, #13
 80025ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025f6:	4619      	mov	r1, r3
 80025f8:	48a7      	ldr	r0, [pc, #668]	@ (8002898 <HAL_SAI_MspInit+0x308>)
 80025fa:	f004 ff73 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002602:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002616:	230d      	movs	r3, #13
 8002618:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002620:	4619      	mov	r1, r3
 8002622:	489d      	ldr	r0, [pc, #628]	@ (8002898 <HAL_SAI_MspInit+0x308>)
 8002624:	f004 ff5e 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800262c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002640:	230d      	movs	r3, #13
 8002642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002646:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800264a:	4619      	mov	r1, r3
 800264c:	4893      	ldr	r0, [pc, #588]	@ (800289c <HAL_SAI_MspInit+0x30c>)
 800264e:	f004 ff49 	bl	80074e4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002652:	2321      	movs	r3, #33	@ 0x21
 8002654:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002656:	2326      	movs	r3, #38	@ 0x26
 8002658:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800265e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002662:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002664:	2308      	movs	r3, #8
 8002666:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800266c:	2302      	movs	r3, #2
 800266e:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002670:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800267a:	2301      	movs	r3, #1
 800267c:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800267e:	2300      	movs	r3, #0
 8002680:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002682:	2300      	movs	r3, #0
 8002684:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002686:	2300      	movs	r3, #0
 8002688:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800268a:	2300      	movs	r3, #0
 800268c:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800268e:	2300      	movs	r3, #0
 8002690:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002692:	2300      	movs	r3, #0
 8002694:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	4981      	ldr	r1, [pc, #516]	@ (80028a0 <HAL_SAI_MspInit+0x310>)
 800269c:	4618      	mov	r0, r3
 800269e:	f004 f835 	bl	800670c <HAL_DMAEx_List_BuildNode>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80026a8:	f7ff f882 	bl	80017b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 80026ac:	4a7c      	ldr	r2, [pc, #496]	@ (80028a0 <HAL_SAI_MspInit+0x310>)
 80026ae:	2100      	movs	r1, #0
 80026b0:	487c      	ldr	r0, [pc, #496]	@ (80028a4 <HAL_SAI_MspInit+0x314>)
 80026b2:	f004 f857 	bl	8006764 <HAL_DMAEx_List_InsertNode>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 80026bc:	f7ff f878 	bl	80017b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 80026c0:	4878      	ldr	r0, [pc, #480]	@ (80028a4 <HAL_SAI_MspInit+0x314>)
 80026c2:	f004 f918 	bl	80068f6 <HAL_DMAEx_List_SetCircularMode>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 80026cc:	f7ff f870 	bl	80017b0 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80026d0:	4b75      	ldr	r3, [pc, #468]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 80026d2:	4a76      	ldr	r2, [pc, #472]	@ (80028ac <HAL_SAI_MspInit+0x31c>)
 80026d4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80026d6:	4b74      	ldr	r3, [pc, #464]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 80026d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026dc:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80026de:	4b72      	ldr	r3, [pc, #456]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80026e4:	4b70      	ldr	r3, [pc, #448]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026ea:	4b6f      	ldr	r3, [pc, #444]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80026f0:	4b6d      	ldr	r3, [pc, #436]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 80026f2:	2281      	movs	r2, #129	@ 0x81
 80026f4:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80026f6:	486c      	ldr	r0, [pc, #432]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 80026f8:	f003 fe48 	bl	800638c <HAL_DMAEx_List_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 8002702:	f7ff f855 	bl	80017b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8002706:	4967      	ldr	r1, [pc, #412]	@ (80028a4 <HAL_SAI_MspInit+0x314>)
 8002708:	4867      	ldr	r0, [pc, #412]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 800270a:	f004 f955 	bl	80069b8 <HAL_DMAEx_List_LinkQ>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8002714:	f7ff f84c 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a63      	ldr	r2, [pc, #396]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 800271c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002720:	4a61      	ldr	r2, [pc, #388]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002726:	2110      	movs	r1, #16
 8002728:	485f      	ldr	r0, [pc, #380]	@ (80028a8 <HAL_SAI_MspInit+0x318>)
 800272a:	f003 fa3d 	bl	8005ba8 <HAL_DMA_ConfigChannelAttributes>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8002734:	f7ff f83c 	bl	80017b0 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5c      	ldr	r2, [pc, #368]	@ (80028b0 <HAL_SAI_MspInit+0x320>)
 800273e:	4293      	cmp	r3, r2
 8002740:	f040 80eb 	bne.w	800291a <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002744:	4b52      	ldr	r3, [pc, #328]	@ (8002890 <HAL_SAI_MspInit+0x300>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10e      	bne.n	800276a <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800274c:	4b51      	ldr	r3, [pc, #324]	@ (8002894 <HAL_SAI_MspInit+0x304>)
 800274e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002752:	4a50      	ldr	r2, [pc, #320]	@ (8002894 <HAL_SAI_MspInit+0x304>)
 8002754:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002758:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800275c:	4b4d      	ldr	r3, [pc, #308]	@ (8002894 <HAL_SAI_MspInit+0x304>)
 800275e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800276a:	4b49      	ldr	r3, [pc, #292]	@ (8002890 <HAL_SAI_MspInit+0x300>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	4a47      	ldr	r2, [pc, #284]	@ (8002890 <HAL_SAI_MspInit+0x300>)
 8002772:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002774:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002778:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800278c:	230d      	movs	r3, #13
 800278e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002796:	4619      	mov	r1, r3
 8002798:	4846      	ldr	r0, [pc, #280]	@ (80028b4 <HAL_SAI_MspInit+0x324>)
 800279a:	f004 fea3 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800279e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027b6:	230d      	movs	r3, #13
 80027b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80027c0:	4619      	mov	r1, r3
 80027c2:	483d      	ldr	r0, [pc, #244]	@ (80028b8 <HAL_SAI_MspInit+0x328>)
 80027c4:	f004 fe8e 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027c8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027e0:	230d      	movs	r3, #13
 80027e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80027ea:	4619      	mov	r1, r3
 80027ec:	4832      	ldr	r0, [pc, #200]	@ (80028b8 <HAL_SAI_MspInit+0x328>)
 80027ee:	f004 fe79 	bl	80074e4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80027f2:	2321      	movs	r3, #33	@ 0x21
 80027f4:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80027f6:	2327      	movs	r3, #39	@ 0x27
 80027f8:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002806:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800280c:	2302      	movs	r3, #2
 800280e:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002810:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800281a:	2301      	movs	r3, #1
 800281c:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800281e:	2300      	movs	r3, #0
 8002820:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002822:	2300      	movs	r3, #0
 8002824:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002826:	2300      	movs	r3, #0
 8002828:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800282a:	2300      	movs	r3, #0
 800282c:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800282e:	2300      	movs	r3, #0
 8002830:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002832:	2300      	movs	r3, #0
 8002834:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002836:	f107 0310 	add.w	r3, r7, #16
 800283a:	4920      	ldr	r1, [pc, #128]	@ (80028bc <HAL_SAI_MspInit+0x32c>)
 800283c:	4618      	mov	r0, r3
 800283e:	f003 ff65 	bl	800670c <HAL_DMAEx_List_BuildNode>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8002848:	f7fe ffb2 	bl	80017b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800284c:	4a1b      	ldr	r2, [pc, #108]	@ (80028bc <HAL_SAI_MspInit+0x32c>)
 800284e:	2100      	movs	r1, #0
 8002850:	481b      	ldr	r0, [pc, #108]	@ (80028c0 <HAL_SAI_MspInit+0x330>)
 8002852:	f003 ff87 	bl	8006764 <HAL_DMAEx_List_InsertNode>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 800285c:	f7fe ffa8 	bl	80017b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002860:	4817      	ldr	r0, [pc, #92]	@ (80028c0 <HAL_SAI_MspInit+0x330>)
 8002862:	f004 f848 	bl	80068f6 <HAL_DMAEx_List_SetCircularMode>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 800286c:	f7fe ffa0 	bl	80017b0 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <HAL_SAI_MspInit+0x334>)
 8002872:	4a15      	ldr	r2, [pc, #84]	@ (80028c8 <HAL_SAI_MspInit+0x338>)
 8002874:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002876:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_SAI_MspInit+0x334>)
 8002878:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800287c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800287e:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <HAL_SAI_MspInit+0x334>)
 8002880:	2200      	movs	r2, #0
 8002882:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <HAL_SAI_MspInit+0x334>)
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	@ 0x40
 800288a:	e01f      	b.n	80028cc <HAL_SAI_MspInit+0x33c>
 800288c:	40015804 	.word	0x40015804
 8002890:	20000edc 	.word	0x20000edc
 8002894:	46020c00 	.word	0x46020c00
 8002898:	42020400 	.word	0x42020400
 800289c:	42021800 	.word	0x42021800
 80028a0:	200005fc 	.word	0x200005fc
 80028a4:	20000620 	.word	0x20000620
 80028a8:	20000638 	.word	0x20000638
 80028ac:	400201d0 	.word	0x400201d0
 80028b0:	40015824 	.word	0x40015824
 80028b4:	42020000 	.word	0x42020000
 80028b8:	42020800 	.word	0x42020800
 80028bc:	200006b0 	.word	0x200006b0
 80028c0:	200006d4 	.word	0x200006d4
 80028c4:	200006ec 	.word	0x200006ec
 80028c8:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_SAI_MspInit+0x394>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80028d2:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <HAL_SAI_MspInit+0x394>)
 80028d4:	2281      	movs	r2, #129	@ 0x81
 80028d6:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80028d8:	4812      	ldr	r0, [pc, #72]	@ (8002924 <HAL_SAI_MspInit+0x394>)
 80028da:	f003 fd57 	bl	800638c <HAL_DMAEx_List_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 80028e4:	f7fe ff64 	bl	80017b0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80028e8:	490f      	ldr	r1, [pc, #60]	@ (8002928 <HAL_SAI_MspInit+0x398>)
 80028ea:	480e      	ldr	r0, [pc, #56]	@ (8002924 <HAL_SAI_MspInit+0x394>)
 80028ec:	f004 f864 	bl	80069b8 <HAL_DMAEx_List_LinkQ>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80028f6:	f7fe ff5b 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a09      	ldr	r2, [pc, #36]	@ (8002924 <HAL_SAI_MspInit+0x394>)
 80028fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002902:	4a08      	ldr	r2, [pc, #32]	@ (8002924 <HAL_SAI_MspInit+0x394>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002908:	2110      	movs	r1, #16
 800290a:	4806      	ldr	r0, [pc, #24]	@ (8002924 <HAL_SAI_MspInit+0x394>)
 800290c:	f003 f94c 	bl	8005ba8 <HAL_DMA_ConfigChannelAttributes>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 8002916:	f7fe ff4b 	bl	80017b0 <Error_Handler>
    }

    }
}
 800291a:	bf00      	nop
 800291c:	3790      	adds	r7, #144	@ 0x90
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200006ec 	.word	0x200006ec
 8002928:	200006d4 	.word	0x200006d4

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <NMI_Handler+0x4>

08002934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <HardFault_Handler+0x4>

0800293c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <MemManage_Handler+0x4>

08002944 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <BusFault_Handler+0x4>

0800294c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <UsageFault_Handler+0x4>

08002954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002982:	f000 f979 	bl	8002c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}

0800298a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 800298e:	2002      	movs	r0, #2
 8002990:	f004 ff98 	bl	80078c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 800299c:	2010      	movs	r0, #16
 800299e:	f004 ff91 	bl	80078c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80029aa:	2020      	movs	r0, #32
 80029ac:	f004 ff8a 	bl	80078c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80029b8:	4802      	ldr	r0, [pc, #8]	@ (80029c4 <GPDMA1_Channel0_IRQHandler+0x10>)
 80029ba:	f002 ff86 	bl	80058ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000194 	.word	0x20000194

080029c8 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80029cc:	4802      	ldr	r0, [pc, #8]	@ (80029d8 <GPDMA1_Channel1_IRQHandler+0x10>)
 80029ce:	f002 ff7c 	bl	80058ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200006ec 	.word	0x200006ec

080029dc <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80029e0:	4802      	ldr	r0, [pc, #8]	@ (80029ec <GPDMA1_Channel2_IRQHandler+0x10>)
 80029e2:	f002 ff72 	bl	80058ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000020c 	.word	0x2000020c

080029f0 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80029f4:	4802      	ldr	r0, [pc, #8]	@ (8002a00 <GPDMA1_Channel3_IRQHandler+0x10>)
 80029f6:	f002 ff68 	bl	80058ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000638 	.word	0x20000638

08002a04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a08:	4802      	ldr	r0, [pc, #8]	@ (8002a14 <ADC1_2_IRQHandler+0x10>)
 8002a0a:	f001 f925 	bl	8003c58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000040 	.word	0x20000040

08002a18 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002a1c:	4802      	ldr	r0, [pc, #8]	@ (8002a28 <I2C2_EV_IRQHandler+0x10>)
 8002a1e:	f005 f91d 	bl	8007c5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200003a0 	.word	0x200003a0

08002a2c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002a30:	4802      	ldr	r0, [pc, #8]	@ (8002a3c <I2C2_ER_IRQHandler+0x10>)
 8002a32:	f005 f92d 	bl	8007c90 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200003a0 	.word	0x200003a0

08002a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a44:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <USART1_IRQHandler+0x10>)
 8002a46:	f00d fa7b 	bl	800ff40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200007fc 	.word	0x200007fc

08002a54 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a58:	4802      	ldr	r0, [pc, #8]	@ (8002a64 <LTDC_IRQHandler+0x10>)
 8002a5a:	f006 fa9b 	bl	8008f94 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200003f4 	.word	0x200003f4

08002a68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a6c:	4b18      	ldr	r3, [pc, #96]	@ (8002ad0 <SystemInit+0x68>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a72:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <SystemInit+0x68>)
 8002a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002a7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <SystemInit+0x6c>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002a82:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <SystemInit+0x6c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002a88:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <SystemInit+0x6c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <SystemInit+0x6c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <SystemInit+0x6c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad4 <SystemInit+0x6c>)
 8002a9a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a9e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002aa2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <SystemInit+0x6c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <SystemInit+0x6c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a09      	ldr	r2, [pc, #36]	@ (8002ad4 <SystemInit+0x6c>)
 8002ab0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <SystemInit+0x6c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <SystemInit+0x68>)
 8002abe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ac2:	609a      	str	r2, [r3, #8]
  #endif
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00
 8002ad4:	46020c00 	.word	0x46020c00

08002ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b10 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002adc:	f7ff ffc4 	bl	8002a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ae0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ae2:	e003      	b.n	8002aec <LoopCopyDataInit>

08002ae4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ae6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ae8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002aea:	3104      	adds	r1, #4

08002aec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002aec:	480a      	ldr	r0, [pc, #40]	@ (8002b18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002aee:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002af0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002af2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002af4:	d3f6      	bcc.n	8002ae4 <CopyDataInit>
	ldr	r2, =_sbss
 8002af6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002af8:	e002      	b.n	8002b00 <LoopFillZerobss>

08002afa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002afa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002afc:	f842 3b04 	str.w	r3, [r2], #4

08002b00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b00:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <LoopForever+0x16>)
	cmp	r2, r3
 8002b02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b04:	d3f9      	bcc.n	8002afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b06:	f00e fedd 	bl	80118c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b0a:	f7fd fd5f 	bl	80005cc <main>

08002b0e <LoopForever>:

LoopForever:
    b LoopForever
 8002b0e:	e7fe      	b.n	8002b0e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002b10:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002b14:	08011a34 	.word	0x08011a34
	ldr	r0, =_sdata
 8002b18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b1c:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8002b20:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8002b24:	20000ee4 	.word	0x20000ee4

08002b28 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b28:	e7fe      	b.n	8002b28 <ADC4_IRQHandler>
	...

08002b2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b30:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <HAL_Init+0x50>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a11      	ldr	r2, [pc, #68]	@ (8002b7c <HAL_Init+0x50>)
 8002b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b3c:	2003      	movs	r0, #3
 8002b3e:	f002 fbac 	bl	800529a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b42:	f007 ffd3 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <HAL_Init+0x54>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	490c      	ldr	r1, [pc, #48]	@ (8002b84 <HAL_Init+0x58>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
 8002b58:	4a0b      	ldr	r2, [pc, #44]	@ (8002b88 <HAL_Init+0x5c>)
 8002b5a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b5c:	2004      	movs	r0, #4
 8002b5e:	f002 fbf1 	bl	8005344 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b62:	200f      	movs	r0, #15
 8002b64:	f000 f812 	bl	8002b8c <HAL_InitTick>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e002      	b.n	8002b78 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b72:	f7fe fe23 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	46020c00 	.word	0x46020c00
 8002b84:	08011924 	.word	0x08011924
 8002b88:	20000018 	.word	0x20000018

08002b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b98:	4b33      	ldr	r3, [pc, #204]	@ (8002c68 <HAL_InitTick+0xdc>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e05c      	b.n	8002c5e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002ba4:	4b31      	ldr	r3, [pc, #196]	@ (8002c6c <HAL_InitTick+0xe0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d10c      	bne.n	8002bca <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002c70 <HAL_InitTick+0xe4>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002c68 <HAL_InitTick+0xdc>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e037      	b.n	8002c3a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002bca:	f002 fc13 	bl	80053f4 <HAL_SYSTICK_GetCLKSourceConfig>
 8002bce:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d023      	beq.n	8002c1e <HAL_InitTick+0x92>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d82d      	bhi.n	8002c38 <HAL_InitTick+0xac>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_InitTick+0x5e>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d00d      	beq.n	8002c04 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002be8:	e026      	b.n	8002c38 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002bea:	4b21      	ldr	r3, [pc, #132]	@ (8002c70 <HAL_InitTick+0xe4>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <HAL_InitTick+0xdc>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002bf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	60fb      	str	r3, [r7, #12]
        break;
 8002c02:	e01a      	b.n	8002c3a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002c04:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <HAL_InitTick+0xdc>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c12:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	60fb      	str	r3, [r7, #12]
        break;
 8002c1c:	e00d      	b.n	8002c3a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002c1e:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <HAL_InitTick+0xdc>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	60fb      	str	r3, [r7, #12]
        break;
 8002c36:	e000      	b.n	8002c3a <HAL_InitTick+0xae>
        break;
 8002c38:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f002 fb60 	bl	8005300 <HAL_SYSTICK_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e009      	b.n	8002c5e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c52:	f002 fb2d 	bl	80052b0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c56:	4a07      	ldr	r2, [pc, #28]	@ (8002c74 <HAL_InitTick+0xe8>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000020 	.word	0x20000020
 8002c6c:	e000e010 	.word	0xe000e010
 8002c70:	20000018 	.word	0x20000018
 8002c74:	2000001c 	.word	0x2000001c

08002c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_IncTick+0x20>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_IncTick+0x24>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	4a04      	ldr	r2, [pc, #16]	@ (8002c9c <HAL_IncTick+0x24>)
 8002c8a:	6013      	str	r3, [r2, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000020 	.word	0x20000020
 8002c9c:	20000ee0 	.word	0x20000ee0

08002ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	@ (8002cb4 <HAL_GetTick+0x14>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000ee0 	.word	0x20000ee0

08002cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7ff ffee 	bl	8002ca0 <HAL_GetTick>
 8002cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d005      	beq.n	8002cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <HAL_Delay+0x44>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cde:	bf00      	nop
 8002ce0:	f7ff ffde 	bl	8002ca0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d8f7      	bhi.n	8002ce0 <HAL_Delay+0x28>
  {
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000020 	.word	0x20000020

08002d00 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0c:	f023 0201 	bic.w	r2, r3, #1
 8002d10:	4904      	ldr	r1, [pc, #16]	@ (8002d24 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	46000400 	.word	0x46000400

08002d28 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d34:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002d38:	4904      	ldr	r1, [pc, #16]	@ (8002d4c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	46000400 	.word	0x46000400

08002d50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <LL_ADC_SetResolution+0x3c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d104      	bne.n	8002dd8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f023 020c 	bic.w	r2, r3, #12
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	46021000 	.word	0x46021000

08002df8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3360      	adds	r3, #96	@ 0x60
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	430b      	orrs	r3, r1
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3360      	adds	r3, #96	@ 0x60
 8002e48:	461a      	mov	r2, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b087      	sub	sp, #28
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3360      	adds	r3, #96	@ 0x60
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	601a      	str	r2, [r3, #0]
}
 8002e90:	bf00      	nop
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3360      	adds	r3, #96	@ 0x60
 8002eac:	461a      	mov	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	601a      	str	r2, [r3, #0]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b087      	sub	sp, #28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3360      	adds	r3, #96	@ 0x60
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	601a      	str	r2, [r3, #0]
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f16:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f1a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	2a00      	cmp	r2, #0
 8002f32:	d002      	beq.n	8002f3a <LL_ADC_SetGainCompensation+0x32>
 8002f34:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002f38:	e000      	b.n	8002f3c <LL_ADC_SetGainCompensation+0x34>
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2107      	movs	r1, #7
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8003070 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d020      	beq.n	800300a <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3330      	adds	r3, #48	@ 0x30
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	4413      	add	r3, r2
 8002fda:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	211f      	movs	r1, #31
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	f003 011f 	and.w	r1, r3, #31
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	431a      	orrs	r2, r3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003008:	e02b      	b.n	8003062 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	210f      	movs	r1, #15
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	401a      	ands	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d104      	bne.n	8003032 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	0e9b      	lsrs	r3, r3, #26
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	e010      	b.n	8003054 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	613b      	str	r3, [r7, #16]
  return result;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e003      	b.n	8003054 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	f001 011f 	and.w	r1, r1, #31
 800305a:	408b      	lsls	r3, r1
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	46021000 	.word	0x46021000

08003074 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d107      	bne.n	8003098 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	0e9b      	lsrs	r3, r3, #26
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2201      	movs	r2, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	e015      	b.n	80030c4 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	60fb      	str	r3, [r7, #12]
  return result;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80030ae:	2320      	movs	r3, #32
 80030b0:	e003      	b.n	80030ba <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2201      	movs	r2, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	0e9b      	lsrs	r3, r3, #26
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2101      	movs	r1, #1
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	401a      	ands	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0303 	and.w	r3, r3, #3
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003132:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800314c:	b480      	push	{r7}
 800314e:	b08b      	sub	sp, #44	@ 0x2c
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a2d      	ldr	r2, [pc, #180]	@ (8003210 <LL_ADC_SetChannelSamplingTime+0xc4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d042      	beq.n	80031e6 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <LL_ADC_SetChannelSamplingTime+0x28>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	0e9b      	lsrs	r3, r3, #26
 800316e:	f003 021f 	and.w	r2, r3, #31
 8003172:	e011      	b.n	8003198 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	617b      	str	r3, [r7, #20]
  return result;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 800318a:	2320      	movs	r3, #32
 800318c:	e003      	b.n	8003196 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	0e5b      	lsrs	r3, r3, #25
 800319c:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	1ad2      	subs	r2, r2, r3
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3314      	adds	r3, #20
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	0e5b      	lsrs	r3, r3, #25
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	4413      	add	r3, r2
 80031c4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	2107      	movs	r1, #7
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	401a      	ands	r2, r3
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	431a      	orrs	r2, r3
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80031e4:	e00e      	b.n	8003204 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	43db      	mvns	r3, r3
 80031f0:	401a      	ands	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	0219      	lsls	r1, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	400b      	ands	r3, r1
 80031fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031fe:	431a      	orrs	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	615a      	str	r2, [r3, #20]
}
 8003204:	bf00      	nop
 8003206:	372c      	adds	r7, #44	@ 0x2c
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	46021000 	.word	0x46021000

08003214 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800322c:	43db      	mvns	r3, r3
 800322e:	401a      	ands	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0318 	and.w	r3, r3, #24
 8003236:	4908      	ldr	r1, [pc, #32]	@ (8003258 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003238:	40d9      	lsrs	r1, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	400b      	ands	r3, r1
 800323e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003242:	431a      	orrs	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	000fffff 	.word	0x000fffff

0800325c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 031f 	and.w	r3, r3, #31
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80032a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6093      	str	r3, [r2, #8]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032cc:	d101      	bne.n	80032d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800331c:	d101      	bne.n	8003322 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <LL_ADC_IsEnabled+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_ADC_IsEnabled+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800338e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003392:	f043 0204 	orr.w	r2, r3, #4
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d101      	bne.n	80033be <LL_ADC_REG_IsConversionOngoing+0x18>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d101      	bne.n	80033e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b08b      	sub	sp, #44	@ 0x2c
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e2ce      	b.n	80039b2 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a95      	ldr	r2, [pc, #596]	@ (8003678 <HAL_ADC_Init+0x284>)
 8003422:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe f9df 	bl	80017f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff37 	bl	80032b8 <LL_ADC_IsDeepPowerDownEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff1d 	bl	8003294 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff52 	bl	8003308 <LL_ADC_IsInternalRegulatorEnabled>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d115      	bne.n	8003496 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff ff36 	bl	80032e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003474:	4b81      	ldr	r3, [pc, #516]	@ (800367c <HAL_ADC_Init+0x288>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	4a81      	ldr	r2, [pc, #516]	@ (8003680 <HAL_ADC_Init+0x28c>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003488:	e002      	b.n	8003490 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3b01      	subs	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f9      	bne.n	800348a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff34 	bl	8003308 <LL_ADC_IsInternalRegulatorEnabled>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10e      	bne.n	80034c4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034aa:	f043 0210 	orr.w	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034b6:	f043 0201 	orr.w	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff6c 	bl	80033a6 <LL_ADC_REG_IsConversionOngoing>
 80034ce:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f040 825f 	bne.w	800399c <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f040 825b 	bne.w	800399c <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ea:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034ee:	f043 0202 	orr.w	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff2c 	bl	8003358 <LL_ADC_IsEnabled>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d14f      	bne.n	80035a6 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a5b      	ldr	r2, [pc, #364]	@ (8003678 <HAL_ADC_Init+0x284>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d037      	beq.n	8003580 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5b      	ldr	r2, [pc, #364]	@ (8003684 <HAL_ADC_Init+0x290>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_ADC_Init+0x130>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a5a      	ldr	r2, [pc, #360]	@ (8003688 <HAL_ADC_Init+0x294>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d10e      	bne.n	8003542 <HAL_ADC_Init+0x14e>
 8003524:	4857      	ldr	r0, [pc, #348]	@ (8003684 <HAL_ADC_Init+0x290>)
 8003526:	f7ff ff17 	bl	8003358 <LL_ADC_IsEnabled>
 800352a:	4604      	mov	r4, r0
 800352c:	4856      	ldr	r0, [pc, #344]	@ (8003688 <HAL_ADC_Init+0x294>)
 800352e:	f7ff ff13 	bl	8003358 <LL_ADC_IsEnabled>
 8003532:	4603      	mov	r3, r0
 8003534:	4323      	orrs	r3, r4
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf0c      	ite	eq
 800353a:	2301      	moveq	r3, #1
 800353c:	2300      	movne	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	e008      	b.n	8003554 <HAL_ADC_Init+0x160>
 8003542:	484d      	ldr	r0, [pc, #308]	@ (8003678 <HAL_ADC_Init+0x284>)
 8003544:	f7ff ff08 	bl	8003358 <LL_ADC_IsEnabled>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf0c      	ite	eq
 800354e:	2301      	moveq	r3, #1
 8003550:	2300      	movne	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d026      	beq.n	80035a6 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a49      	ldr	r2, [pc, #292]	@ (8003684 <HAL_ADC_Init+0x290>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_ADC_Init+0x178>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a48      	ldr	r2, [pc, #288]	@ (8003688 <HAL_ADC_Init+0x294>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d101      	bne.n	8003570 <HAL_ADC_Init+0x17c>
 800356c:	4a47      	ldr	r2, [pc, #284]	@ (800368c <HAL_ADC_Init+0x298>)
 800356e:	e000      	b.n	8003572 <HAL_ADC_Init+0x17e>
 8003570:	4a47      	ldr	r2, [pc, #284]	@ (8003690 <HAL_ADC_Init+0x29c>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f7ff fbe9 	bl	8002d50 <LL_ADC_SetCommonClock>
 800357e:	e012      	b.n	80035a6 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f7ff fc14 	bl	8002db8 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003590:	4b3f      	ldr	r3, [pc, #252]	@ (8003690 <HAL_ADC_Init+0x29c>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80035a0:	493b      	ldr	r1, [pc, #236]	@ (8003690 <HAL_ADC_Init+0x29c>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a33      	ldr	r2, [pc, #204]	@ (8003678 <HAL_ADC_Init+0x284>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d010      	beq.n	80035d2 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035b6:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035bc:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80035c2:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80035ca:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80035cc:	4313      	orrs	r3, r2
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	e035      	b.n	800363e <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7f1b      	ldrb	r3, [r3, #28]
 80035d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035de:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035e0:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035e6:	2a00      	cmp	r2, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_ADC_Init+0x1fc>
 80035ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035ee:	e000      	b.n	80035f2 <HAL_ADC_Init+0x1fe>
 80035f0:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035f2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035f8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da04      	bge.n	800360c <HAL_ADC_Init+0x218>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800360a:	e001      	b.n	8003610 <HAL_ADC_Init+0x21c>
 800360c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003610:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	491b      	ldr	r1, [pc, #108]	@ (8003684 <HAL_ADC_Init+0x290>)
 8003618:	428b      	cmp	r3, r1
 800361a:	d004      	beq.n	8003626 <HAL_ADC_Init+0x232>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4919      	ldr	r1, [pc, #100]	@ (8003688 <HAL_ADC_Init+0x294>)
 8003622:	428b      	cmp	r3, r1
 8003624:	d103      	bne.n	800362e <HAL_ADC_Init+0x23a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800362c:	e003      	b.n	8003636 <HAL_ADC_Init+0x242>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003634:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003636:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	4313      	orrs	r3, r2
 800363c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d131      	bne.n	80036ac <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0a      	ldr	r2, [pc, #40]	@ (8003678 <HAL_ADC_Init+0x284>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d007      	beq.n	8003662 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	3b01      	subs	r3, #1
 8003658:	045b      	lsls	r3, r3, #17
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	4313      	orrs	r3, r2
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	e024      	b.n	80036ac <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003668:	2b00      	cmp	r3, #0
 800366a:	d113      	bne.n	8003694 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	e01a      	b.n	80036ac <HAL_ADC_Init+0x2b8>
 8003676:	bf00      	nop
 8003678:	46021000 	.word	0x46021000
 800367c:	20000018 	.word	0x20000018
 8003680:	053e2d63 	.word	0x053e2d63
 8003684:	42028000 	.word	0x42028000
 8003688:	42028100 	.word	0x42028100
 800368c:	42028300 	.word	0x42028300
 8003690:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003698:	f043 0220 	orr.w	r2, r3, #32
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a75      	ldr	r2, [pc, #468]	@ (8003888 <HAL_ADC_Init+0x494>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ca:	4313      	orrs	r3, r2
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4b6c      	ldr	r3, [pc, #432]	@ (800388c <HAL_ADC_Init+0x498>)
 80036da:	4013      	ands	r3, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	6a39      	ldr	r1, [r7, #32]
 80036e2:	430b      	orrs	r3, r1
 80036e4:	60d3      	str	r3, [r2, #12]
 80036e6:	e031      	b.n	800374c <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d009      	beq.n	8003704 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	4313      	orrs	r3, r2
 80036fe:	6a3a      	ldr	r2, [r7, #32]
 8003700:	4313      	orrs	r3, r2
 8003702:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	4b61      	ldr	r3, [pc, #388]	@ (8003890 <HAL_ADC_Init+0x49c>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	6a39      	ldr	r1, [r7, #32]
 8003714:	430b      	orrs	r3, r1
 8003716:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <HAL_ADC_Init+0x494>)
 8003752:	4293      	cmp	r3, r2
 8003754:	f000 80a4 	beq.w	80038a0 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fe22 	bl	80033a6 <LL_ADC_REG_IsConversionOngoing>
 8003762:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fe2f 	bl	80033cc <LL_ADC_INJ_IsConversionOngoing>
 800376e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d166      	bne.n	8003844 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d163      	bne.n	8003844 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7f1b      	ldrb	r3, [r3, #28]
 8003780:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4943      	ldr	r1, [pc, #268]	@ (8003894 <HAL_ADC_Init+0x4a0>)
 8003788:	428b      	cmp	r3, r1
 800378a:	d004      	beq.n	8003796 <HAL_ADC_Init+0x3a2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4941      	ldr	r1, [pc, #260]	@ (8003898 <HAL_ADC_Init+0x4a4>)
 8003792:	428b      	cmp	r3, r1
 8003794:	d102      	bne.n	800379c <HAL_ADC_Init+0x3a8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379a:	e002      	b.n	80037a2 <HAL_ADC_Init+0x3ae>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a0:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037a2:	4313      	orrs	r3, r2
 80037a4:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037b0:	f023 0303 	bic.w	r3, r3, #3
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	6a39      	ldr	r1, [r7, #32]
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4619      	mov	r1, r3
 80037d0:	4610      	mov	r0, r2
 80037d2:	f7ff fb99 	bl	8002f08 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d11e      	bne.n	800381e <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e4:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <HAL_ADC_Init+0x4a8>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037f4:	0411      	lsls	r1, r2, #16
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800380c:	0892      	lsrs	r2, r2, #2
 800380e:	430a      	orrs	r2, r1
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	611a      	str	r2, [r3, #16]
 800381c:	e007      	b.n	800382e <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d10c      	bne.n	8003866 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	f023 010f 	bic.w	r1, r3, #15
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385a:	1e5a      	subs	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
 8003864:	e007      	b.n	8003876 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 020f 	bic.w	r2, r2, #15
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	f043 0201 	orr.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003886:	e092      	b.n	80039ae <HAL_ADC_Init+0x5ba>
 8003888:	46021000 	.word	0x46021000
 800388c:	fff0c013 	.word	0xfff0c013
 8003890:	ffde800d 	.word	0xffde800d
 8003894:	42028000 	.word	0x42028000
 8003898:	42028100 	.word	0x42028100
 800389c:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d111      	bne.n	80038ce <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80038b2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80038b8:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80038be:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <HAL_ADC_Init+0x5c8>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	430b      	orrs	r3, r1
 80038e0:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	461a      	mov	r2, r3
 80038ec:	2100      	movs	r1, #0
 80038ee:	f7ff fb2e 	bl	8002f4e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	461a      	mov	r2, r3
 80038fc:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003900:	f7ff fb25 	bl	8002f4e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d108      	bne.n	800391e <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f062 020f 	orn	r2, r2, #15
 800391a:	629a      	str	r2, [r3, #40]	@ 0x28
 800391c:	e018      	b.n	8003950 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003926:	d113      	bne.n	8003950 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f003 031c 	and.w	r3, r3, #28
 800393a:	f06f 020f 	mvn.w	r2, #15
 800393e:	fa02 f103 	lsl.w	r1, r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	4b1a      	ldr	r3, [pc, #104]	@ (80039c0 <HAL_ADC_Init+0x5cc>)
 8003958:	4013      	ands	r3, r2
 800395a:	6a3a      	ldr	r2, [r7, #32]
 800395c:	429a      	cmp	r2, r3
 800395e:	d10b      	bne.n	8003978 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003976:	e01a      	b.n	80039ae <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800397c:	f023 0312 	bic.w	r3, r3, #18
 8003980:	f043 0210 	orr.w	r2, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800399a:	e008      	b.n	80039ae <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039a0:	f043 0210 	orr.w	r2, r3, #16
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80039ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	372c      	adds	r7, #44	@ 0x2c
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}
 80039ba:	bf00      	nop
 80039bc:	f7fffc02 	.word	0xf7fffc02
 80039c0:	833ffff3 	.word	0x833ffff3

080039c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b0a2      	sub	sp, #136	@ 0x88
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a98      	ldr	r2, [pc, #608]	@ (8003c38 <HAL_ADC_Start_DMA+0x274>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_ADC_Start_DMA+0x20>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a97      	ldr	r2, [pc, #604]	@ (8003c3c <HAL_ADC_Start_DMA+0x278>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_ADC_Start_DMA+0x24>
 80039e4:	4b96      	ldr	r3, [pc, #600]	@ (8003c40 <HAL_ADC_Start_DMA+0x27c>)
 80039e6:	e000      	b.n	80039ea <HAL_ADC_Start_DMA+0x26>
 80039e8:	4b96      	ldr	r3, [pc, #600]	@ (8003c44 <HAL_ADC_Start_DMA+0x280>)
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fc36 	bl	800325c <LL_ADC_GetMultimode>
 80039f0:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fcd5 	bl	80033a6 <LL_ADC_REG_IsConversionOngoing>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f040 8111 	bne.w	8003c26 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_Start_DMA+0x4e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e10e      	b.n	8003c30 <HAL_ADC_Start_DMA+0x26c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d003      	beq.n	8003a2e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a28:	2b09      	cmp	r3, #9
 8003a2a:	f040 80f4 	bne.w	8003c16 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f001 fa2c 	bl	8004e8c <ADC_Enable>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a3a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 80e4 	bne.w	8003c0c <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a7a      	ldr	r2, [pc, #488]	@ (8003c48 <HAL_ADC_Start_DMA+0x284>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d026      	beq.n	8003ab0 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a75      	ldr	r2, [pc, #468]	@ (8003c3c <HAL_ADC_Start_DMA+0x278>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d002      	beq.n	8003a72 <HAL_ADC_Start_DMA+0xae>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	e000      	b.n	8003a74 <HAL_ADC_Start_DMA+0xb0>
 8003a72:	4b71      	ldr	r3, [pc, #452]	@ (8003c38 <HAL_ADC_Start_DMA+0x274>)
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d002      	beq.n	8003a82 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a86:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a9e:	f023 0206 	bic.w	r2, r3, #6
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003aa6:	e006      	b.n	8003ab6 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003aae:	e002      	b.n	8003ab6 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	4a64      	ldr	r2, [pc, #400]	@ (8003c4c <HAL_ADC_Start_DMA+0x288>)
 8003abc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac2:	4a63      	ldr	r2, [pc, #396]	@ (8003c50 <HAL_ADC_Start_DMA+0x28c>)
 8003ac4:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	4a62      	ldr	r2, [pc, #392]	@ (8003c54 <HAL_ADC_Start_DMA+0x290>)
 8003acc:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	221c      	movs	r2, #28
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0210 	orr.w	r2, r2, #16
 8003aec:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a55      	ldr	r2, [pc, #340]	@ (8003c48 <HAL_ADC_Start_DMA+0x284>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d107      	bne.n	8003b08 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d04f      	beq.n	8003bb6 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d046      	beq.n	8003bae <HAL_ADC_Start_DMA+0x1ea>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d040      	beq.n	8003bae <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	f107 0310 	add.w	r3, r7, #16
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f002 fdfc 	bl	8006738 <HAL_DMAEx_List_GetNodeConfig>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e072      	b.n	8003c30 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d104      	bne.n	8003b5a <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b58:	e00a      	b.n	8003b70 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d104      	bne.n	8003b6a <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b68:	e002      	b.n	8003b70 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b7c:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 fd1f 	bl	80065e4 <HAL_DMAEx_List_Start_IT>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003bac:	e028      	b.n	8003c00 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003bb4:	e024      	b.n	8003c00 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d104      	bne.n	8003bca <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bc8:	e00c      	b.n	8003be4 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d104      	bne.n	8003bde <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bdc:	e002      	b.n	8003be4 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3340      	adds	r3, #64	@ 0x40
 8003bee:	4619      	mov	r1, r3
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bf6:	f001 fd63 	bl	80056c0 <HAL_DMA_Start_IT>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fbba 	bl	800337e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c0a:	e00f      	b.n	8003c2c <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003c14:	e00a      	b.n	8003c2c <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003c24:	e002      	b.n	8003c2c <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003c2c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3788      	adds	r7, #136	@ 0x88
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	42028000 	.word	0x42028000
 8003c3c:	42028100 	.word	0x42028100
 8003c40:	42028300 	.word	0x42028300
 8003c44:	46021300 	.word	0x46021300
 8003c48:	46021000 	.word	0x46021000
 8003c4c:	08004fc1 	.word	0x08004fc1
 8003c50:	0800509f 	.word	0x0800509f
 8003c54:	080050bb 	.word	0x080050bb

08003c58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	@ 0x28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a77      	ldr	r2, [pc, #476]	@ (8003e58 <HAL_ADC_IRQHandler+0x200>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_ADC_IRQHandler+0x30>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a76      	ldr	r2, [pc, #472]	@ (8003e5c <HAL_ADC_IRQHandler+0x204>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x34>
 8003c88:	4b75      	ldr	r3, [pc, #468]	@ (8003e60 <HAL_ADC_IRQHandler+0x208>)
 8003c8a:	e000      	b.n	8003c8e <HAL_ADC_IRQHandler+0x36>
 8003c8c:	4b75      	ldr	r3, [pc, #468]	@ (8003e64 <HAL_ADC_IRQHandler+0x20c>)
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fae4 	bl	800325c <LL_ADC_GetMultimode>
 8003c94:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d017      	beq.n	8003cd0 <HAL_ADC_IRQHandler+0x78>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d012      	beq.n	8003cd0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d105      	bne.n	8003cc2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cba:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f001 fa31 	bl	800512a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <HAL_ADC_IRQHandler+0x8c>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80d1 	beq.w	8003e92 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80cb 	beq.w	8003e92 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a53      	ldr	r2, [pc, #332]	@ (8003e68 <HAL_ADC_IRQHandler+0x210>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d06c      	beq.n	8003df8 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff f932 	bl	8002f8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80aa 	beq.w	8003e84 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a49      	ldr	r2, [pc, #292]	@ (8003e5c <HAL_ADC_IRQHandler+0x204>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d002      	beq.n	8003d40 <HAL_ADC_IRQHandler+0xe8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	e000      	b.n	8003d42 <HAL_ADC_IRQHandler+0xea>
 8003d40:	4b45      	ldr	r3, [pc, #276]	@ (8003e58 <HAL_ADC_IRQHandler+0x200>)
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d008      	beq.n	8003d5c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d002      	beq.n	8003d5c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b09      	cmp	r3, #9
 8003d5a:	d104      	bne.n	8003d66 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	e00c      	b.n	8003d80 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e5c <HAL_ADC_IRQHandler+0x204>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d002      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x11e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	e000      	b.n	8003d78 <HAL_ADC_IRQHandler+0x120>
 8003d76:	4b38      	ldr	r3, [pc, #224]	@ (8003e58 <HAL_ADC_IRQHandler+0x200>)
 8003d78:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d17c      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d175      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fb02 	bl	80033a6 <LL_ADC_REG_IsConversionOngoing>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11a      	bne.n	8003dde <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 020c 	bic.w	r2, r2, #12
 8003db6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d159      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	679a      	str	r2, [r3, #120]	@ 0x78
 8003ddc:	e052      	b.n	8003e84 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003de2:	f043 0210 	orr.w	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dee:	f043 0201 	orr.w	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003df6:	e045      	b.n	8003e84 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff f8c5 	bl	8002f8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d03d      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d138      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d131      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fabe 	bl	80033a6 <LL_ADC_REG_IsConversionOngoing>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11d      	bne.n	8003e6c <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 020c 	bic.w	r2, r2, #12
 8003e3e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	679a      	str	r2, [r3, #120]	@ 0x78
 8003e54:	e016      	b.n	8003e84 <HAL_ADC_IRQHandler+0x22c>
 8003e56:	bf00      	nop
 8003e58:	42028000 	.word	0x42028000
 8003e5c:	42028100 	.word	0x42028100
 8003e60:	42028300 	.word	0x42028300
 8003e64:	46021300 	.word	0x46021300
 8003e68:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f99d 	bl	80041c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	220c      	movs	r2, #12
 8003e90:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a8c      	ldr	r2, [pc, #560]	@ (80040c8 <HAL_ADC_IRQHandler+0x470>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	f000 8095 	beq.w	8003fc8 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_IRQHandler+0x25a>
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8085 	beq.w	8003fc8 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d07f      	beq.n	8003fc8 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff f91e 	bl	8003126 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003eea:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff f84b 	bl	8002f8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ef6:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a73      	ldr	r2, [pc, #460]	@ (80040cc <HAL_ADC_IRQHandler+0x474>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d002      	beq.n	8003f08 <HAL_ADC_IRQHandler+0x2b0>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	e000      	b.n	8003f0a <HAL_ADC_IRQHandler+0x2b2>
 8003f08:	4b71      	ldr	r3, [pc, #452]	@ (80040d0 <HAL_ADC_IRQHandler+0x478>)
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d008      	beq.n	8003f24 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d002      	beq.n	8003f24 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b07      	cmp	r3, #7
 8003f22:	d104      	bne.n	8003f2e <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	623b      	str	r3, [r7, #32]
 8003f2c:	e00c      	b.n	8003f48 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a66      	ldr	r2, [pc, #408]	@ (80040cc <HAL_ADC_IRQHandler+0x474>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d002      	beq.n	8003f3e <HAL_ADC_IRQHandler+0x2e6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	e000      	b.n	8003f40 <HAL_ADC_IRQHandler+0x2e8>
 8003f3e:	4b64      	ldr	r3, [pc, #400]	@ (80040d0 <HAL_ADC_IRQHandler+0x478>)
 8003f40:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d035      	beq.n	8003fba <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_ADC_IRQHandler+0x310>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02d      	beq.n	8003fba <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d128      	bne.n	8003fba <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d121      	bne.n	8003fba <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fa26 	bl	80033cc <LL_ADC_INJ_IsConversionOngoing>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d119      	bne.n	8003fba <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f94:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb2:	f043 0201 	orr.w	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f001 f897 	bl	80050ee <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2260      	movs	r2, #96	@ 0x60
 8003fc6:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d011      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x39e>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00c      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f8ff 	bl	80041ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2280      	movs	r2, #128	@ 0x80
 8003ff4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d012      	beq.n	8004026 <HAL_ADC_IRQHandler+0x3ce>
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800400e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f001 f873 	bl	8005102 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800402c:	2b00      	cmp	r3, #0
 800402e:	d012      	beq.n	8004056 <HAL_ADC_IRQHandler+0x3fe>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800403e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f001 f865 	bl	8005116 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004054:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d05d      	beq.n	800411c <HAL_ADC_IRQHandler+0x4c4>
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d058      	beq.n	800411c <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8004072:	2301      	movs	r3, #1
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
 8004076:	e03b      	b.n	80040f0 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a12      	ldr	r2, [pc, #72]	@ (80040c8 <HAL_ADC_IRQHandler+0x470>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02c      	beq.n	80040dc <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d015      	beq.n	80040b4 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a10      	ldr	r2, [pc, #64]	@ (80040d0 <HAL_ADC_IRQHandler+0x478>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_ADC_IRQHandler+0x444>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a0d      	ldr	r2, [pc, #52]	@ (80040cc <HAL_ADC_IRQHandler+0x474>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x448>
 800409c:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <HAL_ADC_IRQHandler+0x47c>)
 800409e:	e000      	b.n	80040a2 <HAL_ADC_IRQHandler+0x44a>
 80040a0:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <HAL_ADC_IRQHandler+0x480>)
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff f8e8 	bl	8003278 <LL_ADC_GetMultiDMATransfer>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d020      	beq.n	80040f0 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80040ae:	2301      	movs	r3, #1
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b2:	e01d      	b.n	80040f0 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80040c2:	2301      	movs	r3, #1
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c6:	e013      	b.n	80040f0 <HAL_ADC_IRQHandler+0x498>
 80040c8:	46021000 	.word	0x46021000
 80040cc:	42028100 	.word	0x42028100
 80040d0:	42028000 	.word	0x42028000
 80040d4:	42028300 	.word	0x42028300
 80040d8:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff f812 	bl	800310a <LL_ADC_REG_GetDMATransfer>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 80040ec:	2301      	movs	r3, #1
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10e      	bne.n	8004114 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040fa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004106:	f043 0202 	orr.w	r2, r3, #2
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f876 	bl	8004200 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2210      	movs	r2, #16
 800411a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01b      	beq.n	800415e <HAL_ADC_IRQHandler+0x506>
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d016      	beq.n	800415e <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004140:	f043 0201 	orr.w	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f877 	bl	800423c <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a17      	ldr	r2, [pc, #92]	@ (80041c0 <HAL_ADC_IRQHandler+0x568>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d126      	bne.n	80041b6 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_ADC_IRQHandler+0x534>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f849 	bl	8004214 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800418a:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00f      	beq.n	80041b6 <HAL_ADC_IRQHandler+0x55e>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f841 	bl	8004228 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041b4:	605a      	str	r2, [r3, #4]
    }
  }
}
 80041b6:	bf00      	nop
 80041b8:	3728      	adds	r7, #40	@ 0x28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	46021000 	.word	0x46021000

080041c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b0b7      	sub	sp, #220	@ 0xdc
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4aa8      	ldr	r2, [pc, #672]	@ (800450c <HAL_ADC_ConfigChannel+0x2bc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d103      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800427c:	2b01      	cmp	r3, #1
 800427e:	d102      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x36>
 8004280:	2302      	movs	r3, #2
 8004282:	f000 bdfe 	b.w	8004e82 <HAL_ADC_ConfigChannel+0xc32>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff f887 	bl	80033a6 <LL_ADC_REG_IsConversionOngoing>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 85c1 	bne.w	8004e22 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a99      	ldr	r2, [pc, #612]	@ (800450c <HAL_ADC_ConfigChannel+0x2bc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	f000 8409 	beq.w	8004abe <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d108      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x7a>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	0e9b      	lsrs	r3, r3, #26
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2201      	movs	r2, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	e01d      	b.n	8004306 <HAL_ADC_ConfigChannel+0xb6>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80042de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80042e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80042ee:	2320      	movs	r3, #32
 80042f0:	e004      	b.n	80042fc <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80042f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2201      	movs	r2, #1
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	69d1      	ldr	r1, [r2, #28]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	430b      	orrs	r3, r1
 8004312:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	f7fe fe47 	bl	8002fb4 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f83b 	bl	80033a6 <LL_ADC_REG_IsConversionOngoing>
 8004330:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f847 	bl	80033cc <LL_ADC_INJ_IsConversionOngoing>
 800433e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004346:	2b00      	cmp	r3, #0
 8004348:	f040 81df 	bne.w	800470a <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800434c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 81da 	bne.w	800470a <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6819      	ldr	r1, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	461a      	mov	r2, r3
 8004364:	f7fe fef2 	bl	800314c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d046      	beq.n	8004418 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6919      	ldr	r1, [r3, #16]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800439a:	f7fe fd2d 	bl	8002df8 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f7fe fd5b 	bl	8002e66 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	7e9b      	ldrb	r3, [r3, #26]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d11e      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x17e>
 80043c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043cc:	e000      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x180>
 80043ce:	2300      	movs	r3, #0
 80043d0:	461a      	mov	r2, r3
 80043d2:	f7fe fd7e 	bl	8002ed2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d102      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x19c>
 80043e6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80043ea:	e000      	b.n	80043ee <HAL_ADC_ConfigChannel+0x19e>
 80043ec:	2300      	movs	r3, #0
 80043ee:	461a      	mov	r2, r3
 80043f0:	f7fe fd54 	bl	8002e9c <LL_ADC_SetOffsetSignedSaturation>
 80043f4:	e189      	b.n	800470a <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2200      	movs	r2, #0
 8004400:	4619      	mov	r1, r3
 8004402:	f7fe fd66 	bl	8002ed2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2200      	movs	r2, #0
 8004410:	4619      	mov	r1, r3
 8004412:	f7fe fd43 	bl	8002e9c <LL_ADC_SetOffsetSignedSaturation>
 8004416:	e178      	b.n	800470a <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fd0b 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 8004424:	4603      	mov	r3, r0
 8004426:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x1f4>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe fd00 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 800443a:	4603      	mov	r3, r0
 800443c:	0e9b      	lsrs	r3, r3, #26
 800443e:	f003 021f 	and.w	r2, r3, #31
 8004442:	e01e      	b.n	8004482 <HAL_ADC_ConfigChannel+0x232>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fcf5 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 8004450:	4603      	mov	r3, r0
 8004452:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800446a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004472:	2320      	movs	r3, #32
 8004474:	e004      	b.n	8004480 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004476:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <HAL_ADC_ConfigChannel+0x24a>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	0e9b      	lsrs	r3, r3, #26
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	e018      	b.n	80044cc <HAL_ADC_ConfigChannel+0x27c>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80044ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80044b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80044be:	2320      	movs	r3, #32
 80044c0:	e004      	b.n	80044cc <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80044c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d107      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2300      	movs	r3, #0
 80044da:	2100      	movs	r1, #0
 80044dc:	f7fe fc8c 	bl	8002df8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fca7 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10c      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x2c0>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2101      	movs	r1, #1
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fc9c 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 8004502:	4603      	mov	r3, r0
 8004504:	0e9b      	lsrs	r3, r3, #26
 8004506:	f003 021f 	and.w	r2, r3, #31
 800450a:	e020      	b.n	800454e <HAL_ADC_ConfigChannel+0x2fe>
 800450c:	46021000 	.word	0x46021000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fc8f 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 800451c:	4603      	mov	r3, r0
 800451e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800452e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004532:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004536:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800453e:	2320      	movs	r3, #32
 8004540:	e004      	b.n	800454c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004542:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x316>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	0e9b      	lsrs	r3, r3, #26
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	e018      	b.n	8004598 <HAL_ADC_ConfigChannel+0x348>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004572:	fa93 f3a3 	rbit	r3, r3
 8004576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800457a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800457e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800458a:	2320      	movs	r3, #32
 800458c:	e004      	b.n	8004598 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800458e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004598:	429a      	cmp	r2, r3
 800459a:	d107      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	2101      	movs	r1, #1
 80045a8:	f7fe fc26 	bl	8002df8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2102      	movs	r1, #2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fc41 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x388>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2102      	movs	r1, #2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe fc36 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 80045ce:	4603      	mov	r3, r0
 80045d0:	0e9b      	lsrs	r3, r3, #26
 80045d2:	f003 021f 	and.w	r2, r3, #31
 80045d6:	e01a      	b.n	800460e <HAL_ADC_ConfigChannel+0x3be>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe fc2b 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 80045e4:	4603      	mov	r3, r0
 80045e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ea:	fa93 f3a3 	rbit	r3, r3
 80045ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80045f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80045f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80045fe:	2320      	movs	r3, #32
 8004600:	e004      	b.n	800460c <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004602:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d105      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x3d6>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	0e9b      	lsrs	r3, r3, #26
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	e011      	b.n	800464a <HAL_ADC_ConfigChannel+0x3fa>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004636:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004638:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800463e:	2320      	movs	r3, #32
 8004640:	e003      	b.n	800464a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004644:	fab3 f383 	clz	r3, r3
 8004648:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800464a:	429a      	cmp	r2, r3
 800464c:	d107      	bne.n	800465e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	2102      	movs	r1, #2
 800465a:	f7fe fbcd 	bl	8002df8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2103      	movs	r1, #3
 8004664:	4618      	mov	r0, r3
 8004666:	f7fe fbe8 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 800466a:	4603      	mov	r3, r0
 800466c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <HAL_ADC_ConfigChannel+0x43a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2103      	movs	r1, #3
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fbdd 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 8004680:	4603      	mov	r3, r0
 8004682:	0e9b      	lsrs	r3, r3, #26
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	e017      	b.n	80046ba <HAL_ADC_ConfigChannel+0x46a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2103      	movs	r1, #3
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fbd2 	bl	8002e3a <LL_ADC_GetOffsetChannel>
 8004696:	4603      	mov	r3, r0
 8004698:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80046a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80046a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80046ac:	2320      	movs	r3, #32
 80046ae:	e003      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80046b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d105      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x482>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	0e9b      	lsrs	r3, r3, #26
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	e011      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x4a6>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80046e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80046e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80046ea:	2320      	movs	r3, #32
 80046ec:	e003      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80046ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d107      	bne.n	800470a <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	2300      	movs	r3, #0
 8004704:	2103      	movs	r1, #3
 8004706:	f7fe fb77 	bl	8002df8 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe fe22 	bl	8003358 <LL_ADC_IsEnabled>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	f040 83ad 	bne.w	8004e76 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	461a      	mov	r2, r3
 800472a:	f7fe fd73 	bl	8003214 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004736:	f040 80d6 	bne.w	80048e6 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <HAL_ADC_ConfigChannel+0x50e>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	0e9b      	lsrs	r3, r3, #26
 800474c:	3301      	adds	r3, #1
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2b09      	cmp	r3, #9
 8004754:	bf94      	ite	ls
 8004756:	2301      	movls	r3, #1
 8004758:	2300      	movhi	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e019      	b.n	8004792 <HAL_ADC_ConfigChannel+0x542>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800476c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800476e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004776:	2320      	movs	r3, #32
 8004778:	e003      	b.n	8004782 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800477a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800477c:	fab3 f383 	clz	r3, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2b09      	cmp	r3, #9
 800478a:	bf94      	ite	ls
 800478c:	2301      	movls	r3, #1
 800478e:	2300      	movhi	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04d      	beq.n	8004832 <HAL_ADC_ConfigChannel+0x5e2>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x562>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	0e9b      	lsrs	r3, r3, #26
 80047a8:	3301      	adds	r3, #1
 80047aa:	069b      	lsls	r3, r3, #26
 80047ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047b0:	e015      	b.n	80047de <HAL_ADC_ConfigChannel+0x58e>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80047c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80047c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80047ca:	2320      	movs	r3, #32
 80047cc:	e003      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80047ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d0:	fab3 f383 	clz	r3, r3
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	3301      	adds	r3, #1
 80047d8:	069b      	lsls	r3, r3, #26
 80047da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x5ae>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	0e9b      	lsrs	r3, r3, #26
 80047f0:	3301      	adds	r3, #1
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	2101      	movs	r1, #1
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	e017      	b.n	800482e <HAL_ADC_ConfigChannel+0x5de>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004806:	fa93 f3a3 	rbit	r3, r3
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800480c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8004816:	2320      	movs	r3, #32
 8004818:	e003      	b.n	8004822 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2101      	movs	r1, #1
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	4313      	orrs	r3, r2
 8004830:	e04e      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x680>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d107      	bne.n	800484e <HAL_ADC_ConfigChannel+0x5fe>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	0e9b      	lsrs	r3, r3, #26
 8004844:	3301      	adds	r3, #1
 8004846:	069b      	lsls	r3, r3, #26
 8004848:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800484c:	e015      	b.n	800487a <HAL_ADC_ConfigChannel+0x62a>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004866:	2320      	movs	r3, #32
 8004868:	e003      	b.n	8004872 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	fab3 f383 	clz	r3, r3
 8004870:	b2db      	uxtb	r3, r3
 8004872:	3301      	adds	r3, #1
 8004874:	069b      	lsls	r3, r3, #26
 8004876:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_ADC_ConfigChannel+0x64a>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	0e9b      	lsrs	r3, r3, #26
 800488c:	3301      	adds	r3, #1
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2101      	movs	r1, #1
 8004894:	fa01 f303 	lsl.w	r3, r1, r3
 8004898:	e017      	b.n	80048ca <HAL_ADC_ConfigChannel+0x67a>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	61bb      	str	r3, [r7, #24]
  return result;
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80048b2:	2320      	movs	r3, #32
 80048b4:	e003      	b.n	80048be <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	fab3 f383 	clz	r3, r3
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	3301      	adds	r3, #1
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2101      	movs	r1, #1
 80048c6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	461a      	mov	r2, r3
 80048de:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80048e2:	f7fe fc33 	bl	800314c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f280 82c3 	bge.w	8004e76 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a92      	ldr	r2, [pc, #584]	@ (8004b40 <HAL_ADC_ConfigChannel+0x8f0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_ADC_ConfigChannel+0x6b4>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a91      	ldr	r2, [pc, #580]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x6b8>
 8004904:	4b90      	ldr	r3, [pc, #576]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f8>)
 8004906:	e000      	b.n	800490a <HAL_ADC_ConfigChannel+0x6ba>
 8004908:	4b90      	ldr	r3, [pc, #576]	@ (8004b4c <HAL_ADC_ConfigChannel+0x8fc>)
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fa46 	bl	8002d9c <LL_ADC_GetCommonPathInternalCh>
 8004910:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a89      	ldr	r2, [pc, #548]	@ (8004b40 <HAL_ADC_ConfigChannel+0x8f0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_ADC_ConfigChannel+0x6d8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a88      	ldr	r2, [pc, #544]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10e      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x6f6>
 8004928:	4885      	ldr	r0, [pc, #532]	@ (8004b40 <HAL_ADC_ConfigChannel+0x8f0>)
 800492a:	f7fe fd15 	bl	8003358 <LL_ADC_IsEnabled>
 800492e:	4604      	mov	r4, r0
 8004930:	4884      	ldr	r0, [pc, #528]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f4>)
 8004932:	f7fe fd11 	bl	8003358 <LL_ADC_IsEnabled>
 8004936:	4603      	mov	r3, r0
 8004938:	4323      	orrs	r3, r4
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	e008      	b.n	8004958 <HAL_ADC_ConfigChannel+0x708>
 8004946:	4882      	ldr	r0, [pc, #520]	@ (8004b50 <HAL_ADC_ConfigChannel+0x900>)
 8004948:	f7fe fd06 	bl	8003358 <LL_ADC_IsEnabled>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80a6 	beq.w	8004aaa <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7c      	ldr	r2, [pc, #496]	@ (8004b54 <HAL_ADC_ConfigChannel+0x904>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d13c      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800496c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d136      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a71      	ldr	r2, [pc, #452]	@ (8004b40 <HAL_ADC_ConfigChannel+0x8f0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00a      	beq.n	8004994 <HAL_ADC_ConfigChannel+0x744>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a70      	ldr	r2, [pc, #448]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d005      	beq.n	8004994 <HAL_ADC_ConfigChannel+0x744>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a70      	ldr	r2, [pc, #448]	@ (8004b50 <HAL_ADC_ConfigChannel+0x900>)
 800498e:	4293      	cmp	r3, r2
 8004990:	f040 826e 	bne.w	8004e70 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a69      	ldr	r2, [pc, #420]	@ (8004b40 <HAL_ADC_ConfigChannel+0x8f0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_ADC_ConfigChannel+0x758>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a68      	ldr	r2, [pc, #416]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x75c>
 80049a8:	4a67      	ldr	r2, [pc, #412]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f8>)
 80049aa:	e000      	b.n	80049ae <HAL_ADC_ConfigChannel+0x75e>
 80049ac:	4a67      	ldr	r2, [pc, #412]	@ (8004b4c <HAL_ADC_ConfigChannel+0x8fc>)
 80049ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f7fe f9dc 	bl	8002d76 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049be:	4b66      	ldr	r3, [pc, #408]	@ (8004b58 <HAL_ADC_ConfigChannel+0x908>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	099b      	lsrs	r3, r3, #6
 80049c4:	4a65      	ldr	r2, [pc, #404]	@ (8004b5c <HAL_ADC_ConfigChannel+0x90c>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	3301      	adds	r3, #1
 80049ce:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80049d0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80049d2:	e002      	b.n	80049da <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f9      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049e0:	e246      	b.n	8004e70 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004b60 <HAL_ADC_ConfigChannel+0x910>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d12b      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d125      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a50      	ldr	r2, [pc, #320]	@ (8004b40 <HAL_ADC_ConfigChannel+0x8f0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00a      	beq.n	8004a18 <HAL_ADC_ConfigChannel+0x7c8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a4f      	ldr	r2, [pc, #316]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d005      	beq.n	8004a18 <HAL_ADC_ConfigChannel+0x7c8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a4f      	ldr	r2, [pc, #316]	@ (8004b50 <HAL_ADC_ConfigChannel+0x900>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	f040 822e 	bne.w	8004e74 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a48      	ldr	r2, [pc, #288]	@ (8004b40 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <HAL_ADC_ConfigChannel+0x7dc>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a47      	ldr	r2, [pc, #284]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x7e0>
 8004a2c:	4a46      	ldr	r2, [pc, #280]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a2e:	e000      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x7e2>
 8004a30:	4a46      	ldr	r2, [pc, #280]	@ (8004b4c <HAL_ADC_ConfigChannel+0x8fc>)
 8004a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f7fe f99a 	bl	8002d76 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a42:	e217      	b.n	8004e74 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a46      	ldr	r2, [pc, #280]	@ (8004b64 <HAL_ADC_ConfigChannel+0x914>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	f040 8213 	bne.w	8004e76 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f040 820c 	bne.w	8004e76 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a37      	ldr	r2, [pc, #220]	@ (8004b40 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00a      	beq.n	8004a7e <HAL_ADC_ConfigChannel+0x82e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a35      	ldr	r2, [pc, #212]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d005      	beq.n	8004a7e <HAL_ADC_ConfigChannel+0x82e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a36      	ldr	r2, [pc, #216]	@ (8004b50 <HAL_ADC_ConfigChannel+0x900>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f040 81fc 	bne.w	8004e76 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2f      	ldr	r2, [pc, #188]	@ (8004b40 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_ADC_ConfigChannel+0x842>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x846>
 8004a92:	4a2d      	ldr	r2, [pc, #180]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a94:	e000      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x848>
 8004a96:	4a2d      	ldr	r2, [pc, #180]	@ (8004b4c <HAL_ADC_ConfigChannel+0x8fc>)
 8004a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fe f967 	bl	8002d76 <LL_ADC_SetCommonPathInternalCh>
 8004aa8:	e1e5      	b.n	8004e76 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aae:	f043 0220 	orr.w	r2, r3, #32
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004abc:	e1db      	b.n	8004e76 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	f000 811b 	beq.w	8004d06 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ad8:	d004      	beq.n	8004ae4 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004ade:	4a22      	ldr	r2, [pc, #136]	@ (8004b68 <HAL_ADC_ConfigChannel+0x918>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d107      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fe fac1 	bl	8003074 <LL_ADC_REG_SetSequencerChAdd>
 8004af2:	e059      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	210f      	movs	r1, #15
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b10:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x8d4>
 8004b18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b1c:	0e9b      	lsrs	r3, r3, #26
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	e027      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x924>
 8004b24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b28:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	60fb      	str	r3, [r7, #12]
  return result;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d117      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	e019      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x924>
 8004b40:	42028000 	.word	0x42028000
 8004b44:	42028100 	.word	0x42028100
 8004b48:	42028300 	.word	0x42028300
 8004b4c:	46021300 	.word	0x46021300
 8004b50:	46021000 	.word	0x46021000
 8004b54:	ce080000 	.word	0xce080000
 8004b58:	20000018 	.word	0x20000018
 8004b5c:	053e2d63 	.word	0x053e2d63
 8004b60:	ca040000 	.word	0xca040000
 8004b64:	80000001 	.word	0x80000001
 8004b68:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	fab3 f383 	clz	r3, r3
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	6849      	ldr	r1, [r1, #4]
 8004b78:	f001 011f 	and.w	r1, r1, #31
 8004b7c:	408b      	lsls	r3, r1
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d808      	bhi.n	8004ba8 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	f7fe fa06 	bl	8002fb4 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004bb6:	f7fe fac9 	bl	800314c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f280 8159 	bge.w	8004e76 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a9b      	ldr	r2, [pc, #620]	@ (8004e38 <HAL_ADC_ConfigChannel+0xbe8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_ADC_ConfigChannel+0x988>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a9a      	ldr	r2, [pc, #616]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbec>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x98c>
 8004bd8:	4b99      	ldr	r3, [pc, #612]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbf0>)
 8004bda:	e000      	b.n	8004bde <HAL_ADC_ConfigChannel+0x98e>
 8004bdc:	4b99      	ldr	r3, [pc, #612]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf4>)
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe f8dc 	bl	8002d9c <LL_ADC_GetCommonPathInternalCh>
 8004be4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a96      	ldr	r2, [pc, #600]	@ (8004e48 <HAL_ADC_ConfigChannel+0xbf8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d12b      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d125      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a8d      	ldr	r2, [pc, #564]	@ (8004e38 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_ADC_ConfigChannel+0x9c2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a8b      	ldr	r2, [pc, #556]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbec>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x9c6>
 8004c12:	4a8b      	ldr	r2, [pc, #556]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c14:	e000      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x9c8>
 8004c16:	4a8b      	ldr	r2, [pc, #556]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f7fe f8a7 	bl	8002d76 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004c28:	4b88      	ldr	r3, [pc, #544]	@ (8004e4c <HAL_ADC_ConfigChannel+0xbfc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	4a88      	ldr	r2, [pc, #544]	@ (8004e50 <HAL_ADC_ConfigChannel+0xc00>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	099b      	lsrs	r3, r3, #6
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c3a:	e002      	b.n	8004c42 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f9      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004c48:	e045      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a81      	ldr	r2, [pc, #516]	@ (8004e54 <HAL_ADC_ConfigChannel+0xc04>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d11b      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d115      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a74      	ldr	r2, [pc, #464]	@ (8004e38 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_ADC_ConfigChannel+0xa24>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a73      	ldr	r2, [pc, #460]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbec>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d101      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0xa28>
 8004c74:	4a72      	ldr	r2, [pc, #456]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c76:	e000      	b.n	8004c7a <HAL_ADC_ConfigChannel+0xa2a>
 8004c78:	4a72      	ldr	r2, [pc, #456]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f7fe f876 	bl	8002d76 <LL_ADC_SetCommonPathInternalCh>
 8004c8a:	e024      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a71      	ldr	r2, [pc, #452]	@ (8004e58 <HAL_ADC_ConfigChannel+0xc08>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d11f      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d115      	bne.n	8004cce <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a64      	ldr	r2, [pc, #400]	@ (8004e38 <HAL_ADC_ConfigChannel+0xbe8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_ADC_ConfigChannel+0xa66>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a62      	ldr	r2, [pc, #392]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbec>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d101      	bne.n	8004cba <HAL_ADC_ConfigChannel+0xa6a>
 8004cb6:	4a62      	ldr	r2, [pc, #392]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbf0>)
 8004cb8:	e000      	b.n	8004cbc <HAL_ADC_ConfigChannel+0xa6c>
 8004cba:	4a62      	ldr	r2, [pc, #392]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f7fe f855 	bl	8002d76 <LL_ADC_SetCommonPathInternalCh>
 8004ccc:	e003      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a62      	ldr	r2, [pc, #392]	@ (8004e5c <HAL_ADC_ConfigChannel+0xc0c>)
 8004cd4:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a61      	ldr	r2, [pc, #388]	@ (8004e60 <HAL_ADC_ConfigChannel+0xc10>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	f040 80ca 	bne.w	8004e76 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ce2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 80c3 	bne.w	8004e76 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0201 	orr.w	r2, r2, #1
 8004d00:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004d04:	e0b7      	b.n	8004e76 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d0e:	d004      	beq.n	8004d1a <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004d14:	4a53      	ldr	r2, [pc, #332]	@ (8004e64 <HAL_ADC_ConfigChannel+0xc14>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d106      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe f9d9 	bl	80030da <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f280 80a2 	bge.w	8004e76 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a40      	ldr	r2, [pc, #256]	@ (8004e38 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_ADC_ConfigChannel+0xaf6>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3e      	ldr	r2, [pc, #248]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d101      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0xafa>
 8004d46:	4b3e      	ldr	r3, [pc, #248]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d48:	e000      	b.n	8004d4c <HAL_ADC_ConfigChannel+0xafc>
 8004d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe f825 	bl	8002d9c <LL_ADC_GetCommonPathInternalCh>
 8004d52:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a43      	ldr	r2, [pc, #268]	@ (8004e68 <HAL_ADC_ConfigChannel+0xc18>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d115      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a34      	ldr	r2, [pc, #208]	@ (8004e38 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_ADC_ConfigChannel+0xb24>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a33      	ldr	r2, [pc, #204]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbec>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0xb28>
 8004d74:	4a32      	ldr	r2, [pc, #200]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d76:	e000      	b.n	8004d7a <HAL_ADC_ConfigChannel+0xb2a>
 8004d78:	4a32      	ldr	r2, [pc, #200]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d7e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f7fd fff6 	bl	8002d76 <LL_ADC_SetCommonPathInternalCh>
 8004d8a:	e034      	b.n	8004df6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a36      	ldr	r2, [pc, #216]	@ (8004e6c <HAL_ADC_ConfigChannel+0xc1c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d115      	bne.n	8004dc2 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a27      	ldr	r2, [pc, #156]	@ (8004e38 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_ADC_ConfigChannel+0xb5a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a25      	ldr	r2, [pc, #148]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbec>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_ADC_ConfigChannel+0xb5e>
 8004daa:	4a25      	ldr	r2, [pc, #148]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbf0>)
 8004dac:	e000      	b.n	8004db0 <HAL_ADC_ConfigChannel+0xb60>
 8004dae:	4a25      	ldr	r2, [pc, #148]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf4>)
 8004db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7fd ffdb 	bl	8002d76 <LL_ADC_SetCommonPathInternalCh>
 8004dc0:	e019      	b.n	8004df6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a24      	ldr	r2, [pc, #144]	@ (8004e58 <HAL_ADC_ConfigChannel+0xc08>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d114      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	@ (8004e38 <HAL_ADC_ConfigChannel+0xbe8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_ADC_ConfigChannel+0xb90>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a18      	ldr	r2, [pc, #96]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbec>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d101      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0xb94>
 8004de0:	4a17      	ldr	r2, [pc, #92]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbf0>)
 8004de2:	e000      	b.n	8004de6 <HAL_ADC_ConfigChannel+0xb96>
 8004de4:	4a17      	ldr	r2, [pc, #92]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf4>)
 8004de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dea:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7fd ffc0 	bl	8002d76 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a19      	ldr	r2, [pc, #100]	@ (8004e60 <HAL_ADC_ConfigChannel+0xc10>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d13a      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d134      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0201 	orr.w	r2, r2, #1
 8004e1c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004e20:	e029      	b.n	8004e76 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004e34:	e01f      	b.n	8004e76 <HAL_ADC_ConfigChannel+0xc26>
 8004e36:	bf00      	nop
 8004e38:	42028000 	.word	0x42028000
 8004e3c:	42028100 	.word	0x42028100
 8004e40:	42028300 	.word	0x42028300
 8004e44:	46021300 	.word	0x46021300
 8004e48:	b6002000 	.word	0xb6002000
 8004e4c:	20000018 	.word	0x20000018
 8004e50:	053e2d63 	.word	0x053e2d63
 8004e54:	ba004000 	.word	0xba004000
 8004e58:	80000001 	.word	0x80000001
 8004e5c:	b2001000 	.word	0xb2001000
 8004e60:	d7200000 	.word	0xd7200000
 8004e64:	80000010 	.word	0x80000010
 8004e68:	ce080000 	.word	0xce080000
 8004e6c:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e70:	bf00      	nop
 8004e72:	e000      	b.n	8004e76 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e74:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004e7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	37dc      	adds	r7, #220	@ 0xdc
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd90      	pop	{r4, r7, pc}
 8004e8a:	bf00      	nop

08004e8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe fa5d 	bl	8003358 <LL_ADC_IsEnabled>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d17b      	bne.n	8004f9c <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa8 <ADC_Enable+0x11c>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00d      	beq.n	8004ece <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eb6:	f043 0210 	orr.w	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ec2:	f043 0201 	orr.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e067      	b.n	8004f9e <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fa28 	bl	8003330 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <ADC_Enable+0x66>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2f      	ldr	r2, [pc, #188]	@ (8004fac <ADC_Enable+0x120>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d054      	beq.n	8004f9c <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004ef2:	f7fd fed5 	bl	8002ca0 <HAL_GetTick>
 8004ef6:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb0 <ADC_Enable+0x124>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <ADC_Enable+0x80>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb4 <ADC_Enable+0x128>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <ADC_Enable+0x84>
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb8 <ADC_Enable+0x12c>)
 8004f0e:	e000      	b.n	8004f12 <ADC_Enable+0x86>
 8004f10:	4b2a      	ldr	r3, [pc, #168]	@ (8004fbc <ADC_Enable+0x130>)
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe f9a2 	bl	800325c <LL_ADC_GetMultimode>
 8004f18:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a25      	ldr	r2, [pc, #148]	@ (8004fb4 <ADC_Enable+0x128>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d002      	beq.n	8004f2a <ADC_Enable+0x9e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	e000      	b.n	8004f2c <ADC_Enable+0xa0>
 8004f2a:	4b21      	ldr	r3, [pc, #132]	@ (8004fb0 <ADC_Enable+0x124>)
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d02c      	beq.n	8004f8e <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d130      	bne.n	8004f9c <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f3a:	e028      	b.n	8004f8e <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fe fa09 	bl	8003358 <LL_ADC_IsEnabled>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe f9ed 	bl	8003330 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f56:	f7fd fea3 	bl	8002ca0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d914      	bls.n	8004f8e <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d00d      	beq.n	8004f8e <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f76:	f043 0210 	orr.w	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f82:	f043 0201 	orr.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e007      	b.n	8004f9e <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d1cf      	bne.n	8004f3c <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	8000003f 	.word	0x8000003f
 8004fac:	46021000 	.word	0x46021000
 8004fb0:	42028000 	.word	0x42028000
 8004fb4:	42028100 	.word	0x42028100
 8004fb8:	42028300 	.word	0x42028300
 8004fbc:	46021300 	.word	0x46021300

08004fc0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fd2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d14b      	bne.n	8005072 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fde:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d021      	beq.n	8005038 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fd ffc7 	bl	8002f8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d032      	beq.n	800506a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d12b      	bne.n	800506a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005016:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005022:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11f      	bne.n	800506a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800502e:	f043 0201 	orr.w	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	679a      	str	r2, [r3, #120]	@ 0x78
 8005036:	e018      	b.n	800506a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d111      	bne.n	800506a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800504a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d105      	bne.n	800506a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff f8aa 	bl	80041c4 <HAL_ADC_ConvCpltCallback>
      /* Call ADC DMA error callback */
        HAL_ADC_ConvCpltCallback(hadc);
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005070:	e011      	b.n	8005096 <ADC_DMAConvCplt+0xd6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff f8be 	bl	8004200 <HAL_ADC_ErrorCallback>
}
 8005084:	e007      	b.n	8005096 <ADC_DMAConvCplt+0xd6>
        HAL_ADC_ConvCpltCallback(hadc);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff f89c 	bl	80041c4 <HAL_ADC_ConvCpltCallback>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005090:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff f893 	bl	80041d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050d8:	f043 0204 	orr.w	r2, r3, #4
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff f88d 	bl	8004200 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005150:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <__NVIC_SetPriorityGrouping+0x44>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800515c:	4013      	ands	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800516c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005172:	4a04      	ldr	r2, [pc, #16]	@ (8005184 <__NVIC_SetPriorityGrouping+0x44>)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	60d3      	str	r3, [r2, #12]
}
 8005178:	bf00      	nop
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	e000ed00 	.word	0xe000ed00

08005188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800518c:	4b04      	ldr	r3, [pc, #16]	@ (80051a0 <__NVIC_GetPriorityGrouping+0x18>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	0a1b      	lsrs	r3, r3, #8
 8005192:	f003 0307 	and.w	r3, r3, #7
}
 8005196:	4618      	mov	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	e000ed00 	.word	0xe000ed00

080051a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	db0b      	blt.n	80051ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	f003 021f 	and.w	r2, r3, #31
 80051bc:	4907      	ldr	r1, [pc, #28]	@ (80051dc <__NVIC_EnableIRQ+0x38>)
 80051be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2001      	movs	r0, #1
 80051c6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	e000e100 	.word	0xe000e100

080051e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	6039      	str	r1, [r7, #0]
 80051ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	db0a      	blt.n	800520a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	490c      	ldr	r1, [pc, #48]	@ (800522c <__NVIC_SetPriority+0x4c>)
 80051fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051fe:	0112      	lsls	r2, r2, #4
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	440b      	add	r3, r1
 8005204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005208:	e00a      	b.n	8005220 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	4908      	ldr	r1, [pc, #32]	@ (8005230 <__NVIC_SetPriority+0x50>)
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	3b04      	subs	r3, #4
 8005218:	0112      	lsls	r2, r2, #4
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	440b      	add	r3, r1
 800521e:	761a      	strb	r2, [r3, #24]
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	e000e100 	.word	0xe000e100
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005234:	b480      	push	{r7}
 8005236:	b089      	sub	sp, #36	@ 0x24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f1c3 0307 	rsb	r3, r3, #7
 800524e:	2b04      	cmp	r3, #4
 8005250:	bf28      	it	cs
 8005252:	2304      	movcs	r3, #4
 8005254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3304      	adds	r3, #4
 800525a:	2b06      	cmp	r3, #6
 800525c:	d902      	bls.n	8005264 <NVIC_EncodePriority+0x30>
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	3b03      	subs	r3, #3
 8005262:	e000      	b.n	8005266 <NVIC_EncodePriority+0x32>
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005268:	f04f 32ff 	mov.w	r2, #4294967295
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43da      	mvns	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	401a      	ands	r2, r3
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800527c:	f04f 31ff 	mov.w	r1, #4294967295
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	43d9      	mvns	r1, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800528c:	4313      	orrs	r3, r2
         );
}
 800528e:	4618      	mov	r0, r3
 8005290:	3724      	adds	r7, #36	@ 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff ff4c 	bl	8005140 <__NVIC_SetPriorityGrouping>
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052be:	f7ff ff63 	bl	8005188 <__NVIC_GetPriorityGrouping>
 80052c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	6978      	ldr	r0, [r7, #20]
 80052ca:	f7ff ffb3 	bl	8005234 <NVIC_EncodePriority>
 80052ce:	4602      	mov	r2, r0
 80052d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff ff82 	bl	80051e0 <__NVIC_SetPriority>
}
 80052dc:	bf00      	nop
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff ff56 	bl	80051a4 <__NVIC_EnableIRQ>
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3b01      	subs	r3, #1
 800530c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005310:	d301      	bcc.n	8005316 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005312:	2301      	movs	r3, #1
 8005314:	e00d      	b.n	8005332 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005316:	4a0a      	ldr	r2, [pc, #40]	@ (8005340 <HAL_SYSTICK_Config+0x40>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3b01      	subs	r3, #1
 800531c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800531e:	4b08      	ldr	r3, [pc, #32]	@ (8005340 <HAL_SYSTICK_Config+0x40>)
 8005320:	2200      	movs	r2, #0
 8005322:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005324:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <HAL_SYSTICK_Config+0x40>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a05      	ldr	r2, [pc, #20]	@ (8005340 <HAL_SYSTICK_Config+0x40>)
 800532a:	f043 0303 	orr.w	r3, r3, #3
 800532e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	e000e010 	.word	0xe000e010

08005344 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b04      	cmp	r3, #4
 8005350:	d844      	bhi.n	80053dc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005352:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800537b 	.word	0x0800537b
 800535c:	08005399 	.word	0x08005399
 8005360:	080053bb 	.word	0x080053bb
 8005364:	080053dd 	.word	0x080053dd
 8005368:	0800536d 	.word	0x0800536d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800536c:	4b1f      	ldr	r3, [pc, #124]	@ (80053ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1e      	ldr	r2, [pc, #120]	@ (80053ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005372:	f043 0304 	orr.w	r3, r3, #4
 8005376:	6013      	str	r3, [r2, #0]
      break;
 8005378:	e031      	b.n	80053de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800537a:	4b1c      	ldr	r3, [pc, #112]	@ (80053ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1b      	ldr	r2, [pc, #108]	@ (80053ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005386:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800538c:	4a18      	ldr	r2, [pc, #96]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800538e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005396:	e022      	b.n	80053de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005398:	4b14      	ldr	r3, [pc, #80]	@ (80053ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a13      	ldr	r2, [pc, #76]	@ (80053ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800539e:	f023 0304 	bic.w	r3, r3, #4
 80053a2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80053a4:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053ae:	4a10      	ldr	r2, [pc, #64]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80053b8:	e011      	b.n	80053de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80053ba:	4b0c      	ldr	r3, [pc, #48]	@ (80053ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a0b      	ldr	r2, [pc, #44]	@ (80053ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053c0:	f023 0304 	bic.w	r3, r3, #4
 80053c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80053c6:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053cc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053d0:	4a07      	ldr	r2, [pc, #28]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80053da:	e000      	b.n	80053de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80053dc:	bf00      	nop
  }
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000e010 	.word	0xe000e010
 80053f0:	46020c00 	.word	0x46020c00

080053f4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80053fa:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005406:	2304      	movs	r3, #4
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	e021      	b.n	8005450 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800540c:	4b15      	ldr	r3, [pc, #84]	@ (8005464 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800540e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005412:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005416:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800541e:	d011      	beq.n	8005444 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005426:	d810      	bhi.n	800544a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005434:	d003      	beq.n	800543e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005436:	e008      	b.n	800544a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005438:	2300      	movs	r3, #0
 800543a:	607b      	str	r3, [r7, #4]
        break;
 800543c:	e008      	b.n	8005450 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800543e:	2301      	movs	r3, #1
 8005440:	607b      	str	r3, [r7, #4]
        break;
 8005442:	e005      	b.n	8005450 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005444:	2302      	movs	r3, #2
 8005446:	607b      	str	r3, [r7, #4]
        break;
 8005448:	e002      	b.n	8005450 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]
        break;
 800544e:	bf00      	nop
    }
  }
  return systick_source;
 8005450:	687b      	ldr	r3, [r7, #4]
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e010 	.word	0xe000e010
 8005464:	46020c00 	.word	0x46020c00

08005468 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005470:	f7fd fc16 	bl	8002ca0 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0db      	b.n	8005638 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a6e      	ldr	r2, [pc, #440]	@ (8005640 <HAL_DMA_Init+0x1d8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	f000 809f 	beq.w	80055ca <HAL_DMA_Init+0x162>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6c      	ldr	r2, [pc, #432]	@ (8005644 <HAL_DMA_Init+0x1dc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	f000 8099 	beq.w	80055ca <HAL_DMA_Init+0x162>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a6a      	ldr	r2, [pc, #424]	@ (8005648 <HAL_DMA_Init+0x1e0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f000 8093 	beq.w	80055ca <HAL_DMA_Init+0x162>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a68      	ldr	r2, [pc, #416]	@ (800564c <HAL_DMA_Init+0x1e4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	f000 808d 	beq.w	80055ca <HAL_DMA_Init+0x162>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a66      	ldr	r2, [pc, #408]	@ (8005650 <HAL_DMA_Init+0x1e8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	f000 8087 	beq.w	80055ca <HAL_DMA_Init+0x162>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a64      	ldr	r2, [pc, #400]	@ (8005654 <HAL_DMA_Init+0x1ec>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	f000 8081 	beq.w	80055ca <HAL_DMA_Init+0x162>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a62      	ldr	r2, [pc, #392]	@ (8005658 <HAL_DMA_Init+0x1f0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d07b      	beq.n	80055ca <HAL_DMA_Init+0x162>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a61      	ldr	r2, [pc, #388]	@ (800565c <HAL_DMA_Init+0x1f4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d076      	beq.n	80055ca <HAL_DMA_Init+0x162>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a5f      	ldr	r2, [pc, #380]	@ (8005660 <HAL_DMA_Init+0x1f8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d071      	beq.n	80055ca <HAL_DMA_Init+0x162>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005664 <HAL_DMA_Init+0x1fc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d06c      	beq.n	80055ca <HAL_DMA_Init+0x162>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a5c      	ldr	r2, [pc, #368]	@ (8005668 <HAL_DMA_Init+0x200>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d067      	beq.n	80055ca <HAL_DMA_Init+0x162>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a5b      	ldr	r2, [pc, #364]	@ (800566c <HAL_DMA_Init+0x204>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d062      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a59      	ldr	r2, [pc, #356]	@ (8005670 <HAL_DMA_Init+0x208>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d05d      	beq.n	80055ca <HAL_DMA_Init+0x162>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a58      	ldr	r2, [pc, #352]	@ (8005674 <HAL_DMA_Init+0x20c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d058      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a56      	ldr	r2, [pc, #344]	@ (8005678 <HAL_DMA_Init+0x210>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d053      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a55      	ldr	r2, [pc, #340]	@ (800567c <HAL_DMA_Init+0x214>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d04e      	beq.n	80055ca <HAL_DMA_Init+0x162>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a53      	ldr	r2, [pc, #332]	@ (8005680 <HAL_DMA_Init+0x218>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d049      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a52      	ldr	r2, [pc, #328]	@ (8005684 <HAL_DMA_Init+0x21c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d044      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a50      	ldr	r2, [pc, #320]	@ (8005688 <HAL_DMA_Init+0x220>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d03f      	beq.n	80055ca <HAL_DMA_Init+0x162>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a4f      	ldr	r2, [pc, #316]	@ (800568c <HAL_DMA_Init+0x224>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d03a      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a4d      	ldr	r2, [pc, #308]	@ (8005690 <HAL_DMA_Init+0x228>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d035      	beq.n	80055ca <HAL_DMA_Init+0x162>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a4c      	ldr	r2, [pc, #304]	@ (8005694 <HAL_DMA_Init+0x22c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d030      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a4a      	ldr	r2, [pc, #296]	@ (8005698 <HAL_DMA_Init+0x230>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d02b      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a49      	ldr	r2, [pc, #292]	@ (800569c <HAL_DMA_Init+0x234>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d026      	beq.n	80055ca <HAL_DMA_Init+0x162>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a47      	ldr	r2, [pc, #284]	@ (80056a0 <HAL_DMA_Init+0x238>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d021      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a46      	ldr	r2, [pc, #280]	@ (80056a4 <HAL_DMA_Init+0x23c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d01c      	beq.n	80055ca <HAL_DMA_Init+0x162>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a44      	ldr	r2, [pc, #272]	@ (80056a8 <HAL_DMA_Init+0x240>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d017      	beq.n	80055ca <HAL_DMA_Init+0x162>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a43      	ldr	r2, [pc, #268]	@ (80056ac <HAL_DMA_Init+0x244>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d012      	beq.n	80055ca <HAL_DMA_Init+0x162>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a41      	ldr	r2, [pc, #260]	@ (80056b0 <HAL_DMA_Init+0x248>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00d      	beq.n	80055ca <HAL_DMA_Init+0x162>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a40      	ldr	r2, [pc, #256]	@ (80056b4 <HAL_DMA_Init+0x24c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d008      	beq.n	80055ca <HAL_DMA_Init+0x162>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a3e      	ldr	r2, [pc, #248]	@ (80056b8 <HAL_DMA_Init+0x250>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <HAL_DMA_Init+0x162>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a3d      	ldr	r2, [pc, #244]	@ (80056bc <HAL_DMA_Init+0x254>)
 80055c8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0206 	orr.w	r2, r2, #6
 80055e8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80055ea:	e00f      	b.n	800560c <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80055ec:	f7fd fb58 	bl	8002ca0 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d908      	bls.n	800560c <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2210      	movs	r2, #16
 80055fe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2203      	movs	r2, #3
 8005604:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e015      	b.n	8005638 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e8      	bne.n	80055ec <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fb26 	bl	8005c6c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40020050 	.word	0x40020050
 8005644:	50020050 	.word	0x50020050
 8005648:	400200d0 	.word	0x400200d0
 800564c:	500200d0 	.word	0x500200d0
 8005650:	40020150 	.word	0x40020150
 8005654:	50020150 	.word	0x50020150
 8005658:	400201d0 	.word	0x400201d0
 800565c:	500201d0 	.word	0x500201d0
 8005660:	40020250 	.word	0x40020250
 8005664:	50020250 	.word	0x50020250
 8005668:	400202d0 	.word	0x400202d0
 800566c:	500202d0 	.word	0x500202d0
 8005670:	40020350 	.word	0x40020350
 8005674:	50020350 	.word	0x50020350
 8005678:	400203d0 	.word	0x400203d0
 800567c:	500203d0 	.word	0x500203d0
 8005680:	40020450 	.word	0x40020450
 8005684:	50020450 	.word	0x50020450
 8005688:	400204d0 	.word	0x400204d0
 800568c:	500204d0 	.word	0x500204d0
 8005690:	40020550 	.word	0x40020550
 8005694:	50020550 	.word	0x50020550
 8005698:	400205d0 	.word	0x400205d0
 800569c:	500205d0 	.word	0x500205d0
 80056a0:	40020650 	.word	0x40020650
 80056a4:	50020650 	.word	0x50020650
 80056a8:	400206d0 	.word	0x400206d0
 80056ac:	500206d0 	.word	0x500206d0
 80056b0:	40020750 	.word	0x40020750
 80056b4:	50020750 	.word	0x50020750
 80056b8:	400207d0 	.word	0x400207d0
 80056bc:	500207d0 	.word	0x500207d0

080056c0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e04f      	b.n	8005778 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_DMA_Start_IT+0x26>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e048      	b.n	8005778 <HAL_DMA_Start_IT+0xb8>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d136      	bne.n	8005768 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fa86 	bl	8005c20 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005722:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800573a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005752:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695a      	ldr	r2, [r3, #20]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	e007      	b.n	8005778 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2240      	movs	r2, #64	@ 0x40
 800576c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005788:	f7fd fa8a 	bl	8002ca0 <HAL_GetTick>
 800578c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e06b      	b.n	8005870 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d008      	beq.n	80057b6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e05c      	b.n	8005870 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0204 	orr.w	r2, r2, #4
 80057c4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2205      	movs	r2, #5
 80057ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80057ce:	e020      	b.n	8005812 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80057d0:	f7fd fa66 	bl	8002ca0 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b05      	cmp	r3, #5
 80057dc:	d919      	bls.n	8005812 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e2:	f043 0210 	orr.w	r2, r3, #16
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2203      	movs	r2, #3
 80057ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005802:	2201      	movs	r2, #1
 8005804:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e02e      	b.n	8005870 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0d7      	beq.n	80057d0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0202 	orr.w	r2, r2, #2
 800582e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2204      	movs	r2, #4
 8005834:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005840:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800584e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585a:	2201      	movs	r2, #1
 800585c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e019      	b.n	80058be <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d004      	beq.n	80058a0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e00e      	b.n	80058be <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2204      	movs	r2, #4
 80058a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b086      	sub	sp, #24
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80058da:	f023 030f 	bic.w	r3, r3, #15
 80058de:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e8:	3b50      	subs	r3, #80	@ 0x50
 80058ea:	09db      	lsrs	r3, r3, #7
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	2201      	movs	r2, #1
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 813b 	beq.w	8005b80 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005914:	2b00      	cmp	r3, #0
 8005916:	d011      	beq.n	800593c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800592e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005934:	f043 0201 	orr.w	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005946:	2b00      	cmp	r3, #0
 8005948:	d011      	beq.n	800596e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005960:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	f043 0202 	orr.w	r2, r3, #2
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d011      	beq.n	80059a0 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005992:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005998:	f043 0204 	orr.w	r2, r3, #4
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d011      	beq.n	80059d2 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80059c4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ca:	f043 0208 	orr.w	r2, r3, #8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d013      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059f6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d04c      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d045      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a2c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d12e      	bne.n	8005a98 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a48:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0202 	orr.w	r2, r2, #2
 8005a58:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a72:	2201      	movs	r2, #1
 8005a74:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d07a      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4798      	blx	r3
        }

        return;
 8005a96:	e075      	b.n	8005b84 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d039      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d032      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d012      	beq.n	8005afe <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d116      	bne.n	8005b10 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d111      	bne.n	8005b10 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af8:	2201      	movs	r2, #1
 8005afa:	731a      	strb	r2, [r3, #12]
 8005afc:	e008      	b.n	8005b10 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d103      	bne.n	8005b10 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005b18:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d025      	beq.n	8005b86 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 0202 	orr.w	r2, r2, #2
 8005b48:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b62:	2201      	movs	r2, #1
 8005b64:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
 8005b7e:	e002      	b.n	8005b86 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005b80:	bf00      	nop
 8005b82:	e000      	b.n	8005b86 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005b84:	bf00      	nop
    }
  }
}
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b9a:	b2db      	uxtb	r3, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e02b      	b.n	8005c14 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005bc4:	f023 030f 	bic.w	r3, r3, #15
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd2:	3b50      	subs	r3, #80	@ 0x50
 8005bd4:	09db      	lsrs	r3, r3, #7
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	2201      	movs	r2, #1
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d012      	beq.n	8005c12 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	f003 0311 	and.w	r3, r3, #17
 8005bf2:	2b11      	cmp	r3, #17
 8005bf4:	d106      	bne.n	8005c04 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	e006      	b.n	8005c12 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	401a      	ands	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	b291      	uxth	r1, r2
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005c4c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a53      	ldr	r2, [pc, #332]	@ (8005df8 <DMA_Init+0x18c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	f000 80a0 	beq.w	8005df2 <DMA_Init+0x186>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a51      	ldr	r2, [pc, #324]	@ (8005dfc <DMA_Init+0x190>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	f000 809a 	beq.w	8005df2 <DMA_Init+0x186>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a4f      	ldr	r2, [pc, #316]	@ (8005e00 <DMA_Init+0x194>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	f000 8094 	beq.w	8005df2 <DMA_Init+0x186>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a4d      	ldr	r2, [pc, #308]	@ (8005e04 <DMA_Init+0x198>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	f000 808e 	beq.w	8005df2 <DMA_Init+0x186>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a4b      	ldr	r2, [pc, #300]	@ (8005e08 <DMA_Init+0x19c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	f000 8088 	beq.w	8005df2 <DMA_Init+0x186>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a49      	ldr	r2, [pc, #292]	@ (8005e0c <DMA_Init+0x1a0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	f000 8082 	beq.w	8005df2 <DMA_Init+0x186>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a47      	ldr	r2, [pc, #284]	@ (8005e10 <DMA_Init+0x1a4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d07c      	beq.n	8005df2 <DMA_Init+0x186>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a45      	ldr	r2, [pc, #276]	@ (8005e14 <DMA_Init+0x1a8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d077      	beq.n	8005df2 <DMA_Init+0x186>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a44      	ldr	r2, [pc, #272]	@ (8005e18 <DMA_Init+0x1ac>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d072      	beq.n	8005df2 <DMA_Init+0x186>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a42      	ldr	r2, [pc, #264]	@ (8005e1c <DMA_Init+0x1b0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d06d      	beq.n	8005df2 <DMA_Init+0x186>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a41      	ldr	r2, [pc, #260]	@ (8005e20 <DMA_Init+0x1b4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d068      	beq.n	8005df2 <DMA_Init+0x186>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a3f      	ldr	r2, [pc, #252]	@ (8005e24 <DMA_Init+0x1b8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d063      	beq.n	8005df2 <DMA_Init+0x186>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8005e28 <DMA_Init+0x1bc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d05e      	beq.n	8005df2 <DMA_Init+0x186>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a3c      	ldr	r2, [pc, #240]	@ (8005e2c <DMA_Init+0x1c0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d059      	beq.n	8005df2 <DMA_Init+0x186>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3b      	ldr	r2, [pc, #236]	@ (8005e30 <DMA_Init+0x1c4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d054      	beq.n	8005df2 <DMA_Init+0x186>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a39      	ldr	r2, [pc, #228]	@ (8005e34 <DMA_Init+0x1c8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d04f      	beq.n	8005df2 <DMA_Init+0x186>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a38      	ldr	r2, [pc, #224]	@ (8005e38 <DMA_Init+0x1cc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d04a      	beq.n	8005df2 <DMA_Init+0x186>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a36      	ldr	r2, [pc, #216]	@ (8005e3c <DMA_Init+0x1d0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d045      	beq.n	8005df2 <DMA_Init+0x186>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a35      	ldr	r2, [pc, #212]	@ (8005e40 <DMA_Init+0x1d4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d040      	beq.n	8005df2 <DMA_Init+0x186>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a33      	ldr	r2, [pc, #204]	@ (8005e44 <DMA_Init+0x1d8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d03b      	beq.n	8005df2 <DMA_Init+0x186>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a32      	ldr	r2, [pc, #200]	@ (8005e48 <DMA_Init+0x1dc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d036      	beq.n	8005df2 <DMA_Init+0x186>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a30      	ldr	r2, [pc, #192]	@ (8005e4c <DMA_Init+0x1e0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d031      	beq.n	8005df2 <DMA_Init+0x186>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a2f      	ldr	r2, [pc, #188]	@ (8005e50 <DMA_Init+0x1e4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d02c      	beq.n	8005df2 <DMA_Init+0x186>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e54 <DMA_Init+0x1e8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d027      	beq.n	8005df2 <DMA_Init+0x186>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a2c      	ldr	r2, [pc, #176]	@ (8005e58 <DMA_Init+0x1ec>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d022      	beq.n	8005df2 <DMA_Init+0x186>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a2a      	ldr	r2, [pc, #168]	@ (8005e5c <DMA_Init+0x1f0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01d      	beq.n	8005df2 <DMA_Init+0x186>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a29      	ldr	r2, [pc, #164]	@ (8005e60 <DMA_Init+0x1f4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d018      	beq.n	8005df2 <DMA_Init+0x186>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a27      	ldr	r2, [pc, #156]	@ (8005e64 <DMA_Init+0x1f8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <DMA_Init+0x186>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a26      	ldr	r2, [pc, #152]	@ (8005e68 <DMA_Init+0x1fc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00e      	beq.n	8005df2 <DMA_Init+0x186>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a24      	ldr	r2, [pc, #144]	@ (8005e6c <DMA_Init+0x200>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <DMA_Init+0x186>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a23      	ldr	r2, [pc, #140]	@ (8005e70 <DMA_Init+0x204>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d004      	beq.n	8005df2 <DMA_Init+0x186>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a21      	ldr	r2, [pc, #132]	@ (8005e74 <DMA_Init+0x208>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d142      	bne.n	8005e78 <DMA_Init+0x20c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e041      	b.n	8005e7a <DMA_Init+0x20e>
 8005df6:	bf00      	nop
 8005df8:	40020050 	.word	0x40020050
 8005dfc:	50020050 	.word	0x50020050
 8005e00:	400200d0 	.word	0x400200d0
 8005e04:	500200d0 	.word	0x500200d0
 8005e08:	40020150 	.word	0x40020150
 8005e0c:	50020150 	.word	0x50020150
 8005e10:	400201d0 	.word	0x400201d0
 8005e14:	500201d0 	.word	0x500201d0
 8005e18:	40020250 	.word	0x40020250
 8005e1c:	50020250 	.word	0x50020250
 8005e20:	400202d0 	.word	0x400202d0
 8005e24:	500202d0 	.word	0x500202d0
 8005e28:	40020350 	.word	0x40020350
 8005e2c:	50020350 	.word	0x50020350
 8005e30:	400203d0 	.word	0x400203d0
 8005e34:	500203d0 	.word	0x500203d0
 8005e38:	40020450 	.word	0x40020450
 8005e3c:	50020450 	.word	0x50020450
 8005e40:	400204d0 	.word	0x400204d0
 8005e44:	500204d0 	.word	0x500204d0
 8005e48:	40020550 	.word	0x40020550
 8005e4c:	50020550 	.word	0x50020550
 8005e50:	400205d0 	.word	0x400205d0
 8005e54:	500205d0 	.word	0x500205d0
 8005e58:	40020650 	.word	0x40020650
 8005e5c:	50020650 	.word	0x50020650
 8005e60:	400206d0 	.word	0x400206d0
 8005e64:	500206d0 	.word	0x500206d0
 8005e68:	40020750 	.word	0x40020750
 8005e6c:	50020750 	.word	0x50020750
 8005e70:	400207d0 	.word	0x400207d0
 8005e74:	500207d0 	.word	0x500207d0
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d012      	beq.n	8005ea4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e86:	3b01      	subs	r3, #1
 8005e88:	051b      	lsls	r3, r3, #20
 8005e8a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e8e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	3b01      	subs	r3, #1
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e9c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ed6:	f040 80b0 	bne.w	800603a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a82      	ldr	r2, [pc, #520]	@ (80060e8 <DMA_Init+0x47c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	f000 80a0 	beq.w	8006026 <DMA_Init+0x3ba>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a80      	ldr	r2, [pc, #512]	@ (80060ec <DMA_Init+0x480>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	f000 809a 	beq.w	8006026 <DMA_Init+0x3ba>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80060f0 <DMA_Init+0x484>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	f000 8094 	beq.w	8006026 <DMA_Init+0x3ba>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a7c      	ldr	r2, [pc, #496]	@ (80060f4 <DMA_Init+0x488>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	f000 808e 	beq.w	8006026 <DMA_Init+0x3ba>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a7a      	ldr	r2, [pc, #488]	@ (80060f8 <DMA_Init+0x48c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	f000 8088 	beq.w	8006026 <DMA_Init+0x3ba>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a78      	ldr	r2, [pc, #480]	@ (80060fc <DMA_Init+0x490>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	f000 8082 	beq.w	8006026 <DMA_Init+0x3ba>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a76      	ldr	r2, [pc, #472]	@ (8006100 <DMA_Init+0x494>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d07c      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a74      	ldr	r2, [pc, #464]	@ (8006104 <DMA_Init+0x498>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d077      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a73      	ldr	r2, [pc, #460]	@ (8006108 <DMA_Init+0x49c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d072      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a71      	ldr	r2, [pc, #452]	@ (800610c <DMA_Init+0x4a0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d06d      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a70      	ldr	r2, [pc, #448]	@ (8006110 <DMA_Init+0x4a4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d068      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a6e      	ldr	r2, [pc, #440]	@ (8006114 <DMA_Init+0x4a8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d063      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a6d      	ldr	r2, [pc, #436]	@ (8006118 <DMA_Init+0x4ac>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d05e      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800611c <DMA_Init+0x4b0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d059      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6a      	ldr	r2, [pc, #424]	@ (8006120 <DMA_Init+0x4b4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d054      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a68      	ldr	r2, [pc, #416]	@ (8006124 <DMA_Init+0x4b8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d04f      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a67      	ldr	r2, [pc, #412]	@ (8006128 <DMA_Init+0x4bc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d04a      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a65      	ldr	r2, [pc, #404]	@ (800612c <DMA_Init+0x4c0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d045      	beq.n	8006026 <DMA_Init+0x3ba>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a64      	ldr	r2, [pc, #400]	@ (8006130 <DMA_Init+0x4c4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d040      	beq.n	8006026 <DMA_Init+0x3ba>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a62      	ldr	r2, [pc, #392]	@ (8006134 <DMA_Init+0x4c8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d03b      	beq.n	8006026 <DMA_Init+0x3ba>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a61      	ldr	r2, [pc, #388]	@ (8006138 <DMA_Init+0x4cc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d036      	beq.n	8006026 <DMA_Init+0x3ba>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a5f      	ldr	r2, [pc, #380]	@ (800613c <DMA_Init+0x4d0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d031      	beq.n	8006026 <DMA_Init+0x3ba>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8006140 <DMA_Init+0x4d4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d02c      	beq.n	8006026 <DMA_Init+0x3ba>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8006144 <DMA_Init+0x4d8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d027      	beq.n	8006026 <DMA_Init+0x3ba>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a5b      	ldr	r2, [pc, #364]	@ (8006148 <DMA_Init+0x4dc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d022      	beq.n	8006026 <DMA_Init+0x3ba>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a59      	ldr	r2, [pc, #356]	@ (800614c <DMA_Init+0x4e0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d01d      	beq.n	8006026 <DMA_Init+0x3ba>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a58      	ldr	r2, [pc, #352]	@ (8006150 <DMA_Init+0x4e4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d018      	beq.n	8006026 <DMA_Init+0x3ba>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a56      	ldr	r2, [pc, #344]	@ (8006154 <DMA_Init+0x4e8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d013      	beq.n	8006026 <DMA_Init+0x3ba>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a55      	ldr	r2, [pc, #340]	@ (8006158 <DMA_Init+0x4ec>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <DMA_Init+0x3ba>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a53      	ldr	r2, [pc, #332]	@ (800615c <DMA_Init+0x4f0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <DMA_Init+0x3ba>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a52      	ldr	r2, [pc, #328]	@ (8006160 <DMA_Init+0x4f4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <DMA_Init+0x3ba>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a50      	ldr	r2, [pc, #320]	@ (8006164 <DMA_Init+0x4f8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d101      	bne.n	800602a <DMA_Init+0x3be>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <DMA_Init+0x3c0>
 800602a:	2300      	movs	r3, #0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00d      	beq.n	800604c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e008      	b.n	800604c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006042:	d103      	bne.n	800604c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800604a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006052:	4b45      	ldr	r3, [pc, #276]	@ (8006168 <DMA_Init+0x4fc>)
 8006054:	4013      	ands	r3, r2
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	430b      	orrs	r3, r1
 800605e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2200      	movs	r2, #0
 8006066:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a36      	ldr	r2, [pc, #216]	@ (8006148 <DMA_Init+0x4dc>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d022      	beq.n	80060b8 <DMA_Init+0x44c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a35      	ldr	r2, [pc, #212]	@ (800614c <DMA_Init+0x4e0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d01d      	beq.n	80060b8 <DMA_Init+0x44c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a33      	ldr	r2, [pc, #204]	@ (8006150 <DMA_Init+0x4e4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d018      	beq.n	80060b8 <DMA_Init+0x44c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a32      	ldr	r2, [pc, #200]	@ (8006154 <DMA_Init+0x4e8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d013      	beq.n	80060b8 <DMA_Init+0x44c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a30      	ldr	r2, [pc, #192]	@ (8006158 <DMA_Init+0x4ec>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00e      	beq.n	80060b8 <DMA_Init+0x44c>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2f      	ldr	r2, [pc, #188]	@ (800615c <DMA_Init+0x4f0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d009      	beq.n	80060b8 <DMA_Init+0x44c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2d      	ldr	r2, [pc, #180]	@ (8006160 <DMA_Init+0x4f4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <DMA_Init+0x44c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006164 <DMA_Init+0x4f8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d101      	bne.n	80060bc <DMA_Init+0x450>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <DMA_Init+0x452>
 80060bc:	2300      	movs	r3, #0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2200      	movs	r2, #0
 80060d0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2200      	movs	r2, #0
 80060d8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40020050 	.word	0x40020050
 80060ec:	50020050 	.word	0x50020050
 80060f0:	400200d0 	.word	0x400200d0
 80060f4:	500200d0 	.word	0x500200d0
 80060f8:	40020150 	.word	0x40020150
 80060fc:	50020150 	.word	0x50020150
 8006100:	400201d0 	.word	0x400201d0
 8006104:	500201d0 	.word	0x500201d0
 8006108:	40020250 	.word	0x40020250
 800610c:	50020250 	.word	0x50020250
 8006110:	400202d0 	.word	0x400202d0
 8006114:	500202d0 	.word	0x500202d0
 8006118:	40020350 	.word	0x40020350
 800611c:	50020350 	.word	0x50020350
 8006120:	400203d0 	.word	0x400203d0
 8006124:	500203d0 	.word	0x500203d0
 8006128:	40020450 	.word	0x40020450
 800612c:	50020450 	.word	0x50020450
 8006130:	400204d0 	.word	0x400204d0
 8006134:	500204d0 	.word	0x500204d0
 8006138:	40020550 	.word	0x40020550
 800613c:	50020550 	.word	0x50020550
 8006140:	400205d0 	.word	0x400205d0
 8006144:	500205d0 	.word	0x500205d0
 8006148:	40020650 	.word	0x40020650
 800614c:	50020650 	.word	0x50020650
 8006150:	400206d0 	.word	0x400206d0
 8006154:	500206d0 	.word	0x500206d0
 8006158:	40020750 	.word	0x40020750
 800615c:	50020750 	.word	0x50020750
 8006160:	400207d0 	.word	0x400207d0
 8006164:	500207d0 	.word	0x500207d0
 8006168:	3c803180 	.word	0x3c803180

0800616c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e053      	b.n	8006226 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fb fd60 	bl	8001c58 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80061aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6851      	ldr	r1, [r2, #4]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	69d2      	ldr	r2, [r2, #28]
 80061b6:	4311      	orrs	r1, r2
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	430b      	orrs	r3, r1
 80061be:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c6:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 80061ca:	f023 0301 	bic.w	r3, r3, #1
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6891      	ldr	r1, [r2, #8]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6992      	ldr	r2, [r2, #24]
 80061d6:	4311      	orrs	r1, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	430b      	orrs	r3, r1
 80061de:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	0c1b      	lsrs	r3, r3, #16
 80061e8:	041b      	lsls	r3, r3, #16
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68d1      	ldr	r1, [r2, #12]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	430b      	orrs	r3, r1
 80061f4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061fc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	051a      	lsls	r2, r3, #20
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	055b      	lsls	r3, r3, #21
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_DMA2D_ConfigLayer+0x24>
 8006250:	2302      	movs	r3, #2
 8006252:	e092      	b.n	800637a <HAL_DMA2D_ConfigLayer+0x14a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	4613      	mov	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	1a9b      	subs	r3, r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	3328      	adds	r3, #40	@ 0x28
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	4413      	add	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	041b      	lsls	r3, r3, #16
 8006280:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006288:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006294:	4b3c      	ldr	r3, [pc, #240]	@ (8006388 <HAL_DMA2D_ConfigLayer+0x158>)
 8006296:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b0a      	cmp	r3, #10
 800629e:	d003      	beq.n	80062a8 <HAL_DMA2D_ConfigLayer+0x78>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b09      	cmp	r3, #9
 80062a6:	d107      	bne.n	80062b8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	e005      	b.n	80062c4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	061b      	lsls	r3, r3, #24
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d120      	bne.n	800630c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	43db      	mvns	r3, r3
 80062d4:	ea02 0103 	and.w	r1, r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	430a      	orrs	r2, r1
 80062e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b0a      	cmp	r3, #10
 80062f2:	d003      	beq.n	80062fc <HAL_DMA2D_ConfigLayer+0xcc>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b09      	cmp	r3, #9
 80062fa:	d135      	bne.n	8006368 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006308:	629a      	str	r2, [r3, #40]	@ 0x28
 800630a:	e02d      	b.n	8006368 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b0b      	cmp	r3, #11
 8006312:	d109      	bne.n	8006328 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	049b      	lsls	r3, r3, #18
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006326:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69da      	ldr	r2, [r3, #28]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	43db      	mvns	r3, r3
 8006332:	ea02 0103 	and.w	r1, r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	430a      	orrs	r2, r1
 800633e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b0a      	cmp	r3, #10
 8006350:	d003      	beq.n	800635a <HAL_DMA2D_ConfigLayer+0x12a>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b09      	cmp	r3, #9
 8006358:	d106      	bne.n	8006368 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006366:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	ff33000f 	.word	0xff33000f

0800638c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006394:	f7fc fc84 	bl	8002ca0 <HAL_GetTick>
 8006398:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0db      	b.n	800655c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a6e      	ldr	r2, [pc, #440]	@ (8006564 <HAL_DMAEx_List_Init+0x1d8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	f000 809f 	beq.w	80064ee <HAL_DMAEx_List_Init+0x162>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a6c      	ldr	r2, [pc, #432]	@ (8006568 <HAL_DMAEx_List_Init+0x1dc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	f000 8099 	beq.w	80064ee <HAL_DMAEx_List_Init+0x162>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a6a      	ldr	r2, [pc, #424]	@ (800656c <HAL_DMAEx_List_Init+0x1e0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	f000 8093 	beq.w	80064ee <HAL_DMAEx_List_Init+0x162>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a68      	ldr	r2, [pc, #416]	@ (8006570 <HAL_DMAEx_List_Init+0x1e4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	f000 808d 	beq.w	80064ee <HAL_DMAEx_List_Init+0x162>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a66      	ldr	r2, [pc, #408]	@ (8006574 <HAL_DMAEx_List_Init+0x1e8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	f000 8087 	beq.w	80064ee <HAL_DMAEx_List_Init+0x162>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a64      	ldr	r2, [pc, #400]	@ (8006578 <HAL_DMAEx_List_Init+0x1ec>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	f000 8081 	beq.w	80064ee <HAL_DMAEx_List_Init+0x162>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a62      	ldr	r2, [pc, #392]	@ (800657c <HAL_DMAEx_List_Init+0x1f0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d07b      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a61      	ldr	r2, [pc, #388]	@ (8006580 <HAL_DMAEx_List_Init+0x1f4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d076      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5f      	ldr	r2, [pc, #380]	@ (8006584 <HAL_DMAEx_List_Init+0x1f8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d071      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a5e      	ldr	r2, [pc, #376]	@ (8006588 <HAL_DMAEx_List_Init+0x1fc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d06c      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5c      	ldr	r2, [pc, #368]	@ (800658c <HAL_DMAEx_List_Init+0x200>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d067      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a5b      	ldr	r2, [pc, #364]	@ (8006590 <HAL_DMAEx_List_Init+0x204>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d062      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a59      	ldr	r2, [pc, #356]	@ (8006594 <HAL_DMAEx_List_Init+0x208>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d05d      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a58      	ldr	r2, [pc, #352]	@ (8006598 <HAL_DMAEx_List_Init+0x20c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d058      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a56      	ldr	r2, [pc, #344]	@ (800659c <HAL_DMAEx_List_Init+0x210>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d053      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a55      	ldr	r2, [pc, #340]	@ (80065a0 <HAL_DMAEx_List_Init+0x214>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d04e      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a53      	ldr	r2, [pc, #332]	@ (80065a4 <HAL_DMAEx_List_Init+0x218>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d049      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a52      	ldr	r2, [pc, #328]	@ (80065a8 <HAL_DMAEx_List_Init+0x21c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d044      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a50      	ldr	r2, [pc, #320]	@ (80065ac <HAL_DMAEx_List_Init+0x220>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d03f      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a4f      	ldr	r2, [pc, #316]	@ (80065b0 <HAL_DMAEx_List_Init+0x224>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d03a      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a4d      	ldr	r2, [pc, #308]	@ (80065b4 <HAL_DMAEx_List_Init+0x228>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d035      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a4c      	ldr	r2, [pc, #304]	@ (80065b8 <HAL_DMAEx_List_Init+0x22c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d030      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a4a      	ldr	r2, [pc, #296]	@ (80065bc <HAL_DMAEx_List_Init+0x230>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d02b      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a49      	ldr	r2, [pc, #292]	@ (80065c0 <HAL_DMAEx_List_Init+0x234>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d026      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a47      	ldr	r2, [pc, #284]	@ (80065c4 <HAL_DMAEx_List_Init+0x238>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d021      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a46      	ldr	r2, [pc, #280]	@ (80065c8 <HAL_DMAEx_List_Init+0x23c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d01c      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a44      	ldr	r2, [pc, #272]	@ (80065cc <HAL_DMAEx_List_Init+0x240>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d017      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a43      	ldr	r2, [pc, #268]	@ (80065d0 <HAL_DMAEx_List_Init+0x244>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d012      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a41      	ldr	r2, [pc, #260]	@ (80065d4 <HAL_DMAEx_List_Init+0x248>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00d      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a40      	ldr	r2, [pc, #256]	@ (80065d8 <HAL_DMAEx_List_Init+0x24c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d008      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a3e      	ldr	r2, [pc, #248]	@ (80065dc <HAL_DMAEx_List_Init+0x250>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <HAL_DMAEx_List_Init+0x162>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a3d      	ldr	r2, [pc, #244]	@ (80065e0 <HAL_DMAEx_List_Init+0x254>)
 80064ec:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0206 	orr.w	r2, r2, #6
 800650c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800650e:	e00f      	b.n	8006530 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006510:	f7fc fbc6 	bl	8002ca0 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b05      	cmp	r3, #5
 800651c:	d908      	bls.n	8006530 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2210      	movs	r2, #16
 8006522:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2203      	movs	r2, #3
 8006528:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e015      	b.n	800655c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e8      	bne.n	8006510 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fae0 	bl	8006b04 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40020050 	.word	0x40020050
 8006568:	50020050 	.word	0x50020050
 800656c:	400200d0 	.word	0x400200d0
 8006570:	500200d0 	.word	0x500200d0
 8006574:	40020150 	.word	0x40020150
 8006578:	50020150 	.word	0x50020150
 800657c:	400201d0 	.word	0x400201d0
 8006580:	500201d0 	.word	0x500201d0
 8006584:	40020250 	.word	0x40020250
 8006588:	50020250 	.word	0x50020250
 800658c:	400202d0 	.word	0x400202d0
 8006590:	500202d0 	.word	0x500202d0
 8006594:	40020350 	.word	0x40020350
 8006598:	50020350 	.word	0x50020350
 800659c:	400203d0 	.word	0x400203d0
 80065a0:	500203d0 	.word	0x500203d0
 80065a4:	40020450 	.word	0x40020450
 80065a8:	50020450 	.word	0x50020450
 80065ac:	400204d0 	.word	0x400204d0
 80065b0:	500204d0 	.word	0x500204d0
 80065b4:	40020550 	.word	0x40020550
 80065b8:	50020550 	.word	0x50020550
 80065bc:	400205d0 	.word	0x400205d0
 80065c0:	500205d0 	.word	0x500205d0
 80065c4:	40020650 	.word	0x40020650
 80065c8:	50020650 	.word	0x50020650
 80065cc:	400206d0 	.word	0x400206d0
 80065d0:	500206d0 	.word	0x500206d0
 80065d4:	40020750 	.word	0x40020750
 80065d8:	50020750 	.word	0x50020750
 80065dc:	400207d0 	.word	0x400207d0
 80065e0:	500207d0 	.word	0x500207d0

080065e4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_DMAEx_List_Start_IT+0x16>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e082      	b.n	8006704 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006604:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006610:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006612:	7dfb      	ldrb	r3, [r7, #23]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d005      	beq.n	8006624 <HAL_DMAEx_List_Start_IT+0x40>
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d16a      	bne.n	80066f4 <HAL_DMAEx_List_Start_IT+0x110>
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d067      	beq.n	80066f4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d157      	bne.n	80066e0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_DMAEx_List_Start_IT+0x5a>
 800663a:	2302      	movs	r3, #2
 800663c:	e062      	b.n	8006704 <HAL_DMAEx_List_Start_IT+0x120>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006652:	2202      	movs	r2, #2
 8006654:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006660:	2200      	movs	r2, #0
 8006662:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006672:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800668a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695a      	ldr	r2, [r3, #20]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066a2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f107 010c 	add.w	r1, r7, #12
 80066ae:	2200      	movs	r2, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fe47 	bl	8007344 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4619      	mov	r1, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	0c0b      	lsrs	r3, r1, #16
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80066d4:	4013      	ands	r3, r2
 80066d6:	68f9      	ldr	r1, [r7, #12]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	430b      	orrs	r3, r1
 80066de:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e007      	b.n	8006704 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2240      	movs	r2, #64	@ 0x40
 80066f8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_DMAEx_List_BuildNode+0x16>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e004      	b.n	8006730 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fb43 	bl	8006db4 <DMA_List_BuildNode>

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e004      	b.n	800675c <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fc7f 	bl	8007058 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08c      	sub	sp, #48	@ 0x30
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_DMAEx_List_InsertNode+0x18>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0b6      	b.n	80068ee <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d104      	bne.n	8006792 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2204      	movs	r2, #4
 800678c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e0ad      	b.n	80068ee <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fd66 	bl	800726c <DMA_List_CheckNodesBaseAddresses>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2205      	movs	r2, #5
 80067aa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e09e      	b.n	80068ee <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fd87 	bl	80072cc <DMA_List_CheckNodesTypes>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d004      	beq.n	80067ce <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2204      	movs	r2, #4
 80067c8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e08f      	b.n	80068ee <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2202      	movs	r2, #2
 80067d2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80067da:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80067de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fdad 	bl	8007344 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d11a      	bne.n	8006828 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	e06c      	b.n	80068e0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006812:	4013      	ands	r3, r2
 8006814:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006818:	4319      	orrs	r1, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2202      	movs	r2, #2
 8006824:	609a      	str	r2, [r3, #8]
 8006826:	e05b      	b.n	80068e0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10f      	bne.n	800684e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006838:	4013      	ands	r3, r2
 800683a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800683c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800683e:	4319      	orrs	r1, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	e043      	b.n	80068d6 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006852:	f107 0314 	add.w	r3, r7, #20
 8006856:	461a      	mov	r2, r3
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fda2 	bl	80073a4 <DMA_List_FindNode>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d132      	bne.n	80068cc <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	d11a      	bne.n	80068a6 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	461a      	mov	r2, r3
 800687e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006882:	4013      	ands	r3, r2
 8006884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006888:	4319      	orrs	r1, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006896:	4013      	ands	r3, r2
 8006898:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800689a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800689c:	4319      	orrs	r1, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068a4:	e017      	b.n	80068d6 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80068a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80068bc:	4013      	ands	r3, r2
 80068be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c2:	4319      	orrs	r1, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068ca:	e004      	b.n	80068d6 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2206      	movs	r2, #6
 80068d0:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e00b      	b.n	80068ee <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3730      	adds	r7, #48	@ 0x30
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b08a      	sub	sp, #40	@ 0x28
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e052      	b.n	80069ae <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e049      	b.n	80069ae <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00c      	beq.n	800693c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d101      	bne.n	8006932 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e03d      	b.n	80069ae <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2204      	movs	r2, #4
 8006936:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e038      	b.n	80069ae <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d104      	bne.n	800694e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2204      	movs	r2, #4
 8006948:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e02f      	b.n	80069ae <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f107 0220 	add.w	r2, r7, #32
 8006962:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fcec 	bl	8007344 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006970:	f107 030c 	add.w	r3, r7, #12
 8006974:	461a      	mov	r2, r3
 8006976:	2100      	movs	r1, #0
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fd13 	bl	80073a4 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006988:	4013      	ands	r3, r2
 800698a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4610      	mov	r0, r2
 8006990:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006992:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006994:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	@ 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_DMAEx_List_LinkQ+0x16>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e072      	b.n	8006ab8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80069d8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d002      	beq.n	80069ec <HAL_DMAEx_List_LinkQ+0x34>
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	2b05      	cmp	r3, #5
 80069ea:	d108      	bne.n	80069fe <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2240      	movs	r2, #64	@ 0x40
 80069f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e05c      	b.n	8006ab8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	7b1b      	ldrb	r3, [r3, #12]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d104      	bne.n	8006a12 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e052      	b.n	8006ab8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2b      	ldr	r2, [pc, #172]	@ (8006ac4 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a29      	ldr	r2, [pc, #164]	@ (8006ac8 <HAL_DMAEx_List_LinkQ+0x110>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01d      	beq.n	8006a62 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a28      	ldr	r2, [pc, #160]	@ (8006acc <HAL_DMAEx_List_LinkQ+0x114>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d018      	beq.n	8006a62 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a26      	ldr	r2, [pc, #152]	@ (8006ad0 <HAL_DMAEx_List_LinkQ+0x118>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a25      	ldr	r2, [pc, #148]	@ (8006ad4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00e      	beq.n	8006a62 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a23      	ldr	r2, [pc, #140]	@ (8006ad8 <HAL_DMAEx_List_LinkQ+0x120>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d009      	beq.n	8006a62 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a22      	ldr	r2, [pc, #136]	@ (8006adc <HAL_DMAEx_List_LinkQ+0x124>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a20      	ldr	r2, [pc, #128]	@ (8006ae0 <HAL_DMAEx_List_LinkQ+0x128>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d101      	bne.n	8006a66 <HAL_DMAEx_List_LinkQ+0xae>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <HAL_DMAEx_List_LinkQ+0xb0>
 8006a66:	2300      	movs	r3, #0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10b      	bne.n	8006a84 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d004      	beq.n	8006a84 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e019      	b.n	8006ab8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a88:	2b81      	cmp	r3, #129	@ 0x81
 8006a8a:	d108      	bne.n	8006a9e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10d      	bne.n	8006ab0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2204      	movs	r2, #4
 8006a98:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e00c      	b.n	8006ab8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2204      	movs	r2, #4
 8006aaa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e003      	b.n	8006ab8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	40020650 	.word	0x40020650
 8006ac8:	50020650 	.word	0x50020650
 8006acc:	400206d0 	.word	0x400206d0
 8006ad0:	500206d0 	.word	0x500206d0
 8006ad4:	40020750 	.word	0x40020750
 8006ad8:	50020750 	.word	0x50020750
 8006adc:	400207d0 	.word	0x400207d0
 8006ae0:	500207d0 	.word	0x500207d0

08006ae4 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	0c1b      	lsrs	r3, r3, #16
 8006af4:	b2db      	uxtb	r3, r3
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
	...

08006b04 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a85      	ldr	r2, [pc, #532]	@ (8006d34 <DMA_List_Init+0x230>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	f000 80a0 	beq.w	8006c64 <DMA_List_Init+0x160>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a83      	ldr	r2, [pc, #524]	@ (8006d38 <DMA_List_Init+0x234>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	f000 809a 	beq.w	8006c64 <DMA_List_Init+0x160>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a81      	ldr	r2, [pc, #516]	@ (8006d3c <DMA_List_Init+0x238>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	f000 8094 	beq.w	8006c64 <DMA_List_Init+0x160>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a7f      	ldr	r2, [pc, #508]	@ (8006d40 <DMA_List_Init+0x23c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	f000 808e 	beq.w	8006c64 <DMA_List_Init+0x160>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a7d      	ldr	r2, [pc, #500]	@ (8006d44 <DMA_List_Init+0x240>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	f000 8088 	beq.w	8006c64 <DMA_List_Init+0x160>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a7b      	ldr	r2, [pc, #492]	@ (8006d48 <DMA_List_Init+0x244>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	f000 8082 	beq.w	8006c64 <DMA_List_Init+0x160>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a79      	ldr	r2, [pc, #484]	@ (8006d4c <DMA_List_Init+0x248>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d07c      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a78      	ldr	r2, [pc, #480]	@ (8006d50 <DMA_List_Init+0x24c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d077      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a76      	ldr	r2, [pc, #472]	@ (8006d54 <DMA_List_Init+0x250>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d072      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a75      	ldr	r2, [pc, #468]	@ (8006d58 <DMA_List_Init+0x254>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d06d      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a73      	ldr	r2, [pc, #460]	@ (8006d5c <DMA_List_Init+0x258>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d068      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a72      	ldr	r2, [pc, #456]	@ (8006d60 <DMA_List_Init+0x25c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d063      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a70      	ldr	r2, [pc, #448]	@ (8006d64 <DMA_List_Init+0x260>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d05e      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a6f      	ldr	r2, [pc, #444]	@ (8006d68 <DMA_List_Init+0x264>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d059      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a6d      	ldr	r2, [pc, #436]	@ (8006d6c <DMA_List_Init+0x268>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d054      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a6c      	ldr	r2, [pc, #432]	@ (8006d70 <DMA_List_Init+0x26c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d04f      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a6a      	ldr	r2, [pc, #424]	@ (8006d74 <DMA_List_Init+0x270>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d04a      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a69      	ldr	r2, [pc, #420]	@ (8006d78 <DMA_List_Init+0x274>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d045      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a67      	ldr	r2, [pc, #412]	@ (8006d7c <DMA_List_Init+0x278>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d040      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a66      	ldr	r2, [pc, #408]	@ (8006d80 <DMA_List_Init+0x27c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d03b      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a64      	ldr	r2, [pc, #400]	@ (8006d84 <DMA_List_Init+0x280>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d036      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a63      	ldr	r2, [pc, #396]	@ (8006d88 <DMA_List_Init+0x284>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d031      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a61      	ldr	r2, [pc, #388]	@ (8006d8c <DMA_List_Init+0x288>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d02c      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a60      	ldr	r2, [pc, #384]	@ (8006d90 <DMA_List_Init+0x28c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d027      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a5e      	ldr	r2, [pc, #376]	@ (8006d94 <DMA_List_Init+0x290>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d022      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a5d      	ldr	r2, [pc, #372]	@ (8006d98 <DMA_List_Init+0x294>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d01d      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a5b      	ldr	r2, [pc, #364]	@ (8006d9c <DMA_List_Init+0x298>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d018      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a5a      	ldr	r2, [pc, #360]	@ (8006da0 <DMA_List_Init+0x29c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d013      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a58      	ldr	r2, [pc, #352]	@ (8006da4 <DMA_List_Init+0x2a0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00e      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a57      	ldr	r2, [pc, #348]	@ (8006da8 <DMA_List_Init+0x2a4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a55      	ldr	r2, [pc, #340]	@ (8006dac <DMA_List_Init+0x2a8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <DMA_List_Init+0x160>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a54      	ldr	r2, [pc, #336]	@ (8006db0 <DMA_List_Init+0x2ac>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <DMA_List_Init+0x164>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e000      	b.n	8006c6a <DMA_List_Init+0x166>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d004      	beq.n	8006c78 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2200      	movs	r2, #0
 8006c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c9c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2200      	movs	r2, #0
 8006cac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a36      	ldr	r2, [pc, #216]	@ (8006d94 <DMA_List_Init+0x290>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <DMA_List_Init+0x202>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a34      	ldr	r2, [pc, #208]	@ (8006d98 <DMA_List_Init+0x294>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d01d      	beq.n	8006d06 <DMA_List_Init+0x202>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a33      	ldr	r2, [pc, #204]	@ (8006d9c <DMA_List_Init+0x298>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d018      	beq.n	8006d06 <DMA_List_Init+0x202>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a31      	ldr	r2, [pc, #196]	@ (8006da0 <DMA_List_Init+0x29c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <DMA_List_Init+0x202>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a30      	ldr	r2, [pc, #192]	@ (8006da4 <DMA_List_Init+0x2a0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <DMA_List_Init+0x202>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a2e      	ldr	r2, [pc, #184]	@ (8006da8 <DMA_List_Init+0x2a4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <DMA_List_Init+0x202>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8006dac <DMA_List_Init+0x2a8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <DMA_List_Init+0x202>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a2b      	ldr	r2, [pc, #172]	@ (8006db0 <DMA_List_Init+0x2ac>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d101      	bne.n	8006d0a <DMA_List_Init+0x206>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <DMA_List_Init+0x208>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2200      	movs	r2, #0
 8006d16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2200      	movs	r2, #0
 8006d26:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40020050 	.word	0x40020050
 8006d38:	50020050 	.word	0x50020050
 8006d3c:	400200d0 	.word	0x400200d0
 8006d40:	500200d0 	.word	0x500200d0
 8006d44:	40020150 	.word	0x40020150
 8006d48:	50020150 	.word	0x50020150
 8006d4c:	400201d0 	.word	0x400201d0
 8006d50:	500201d0 	.word	0x500201d0
 8006d54:	40020250 	.word	0x40020250
 8006d58:	50020250 	.word	0x50020250
 8006d5c:	400202d0 	.word	0x400202d0
 8006d60:	500202d0 	.word	0x500202d0
 8006d64:	40020350 	.word	0x40020350
 8006d68:	50020350 	.word	0x50020350
 8006d6c:	400203d0 	.word	0x400203d0
 8006d70:	500203d0 	.word	0x500203d0
 8006d74:	40020450 	.word	0x40020450
 8006d78:	50020450 	.word	0x50020450
 8006d7c:	400204d0 	.word	0x400204d0
 8006d80:	500204d0 	.word	0x500204d0
 8006d84:	40020550 	.word	0x40020550
 8006d88:	50020550 	.word	0x50020550
 8006d8c:	400205d0 	.word	0x400205d0
 8006d90:	500205d0 	.word	0x500205d0
 8006d94:	40020650 	.word	0x40020650
 8006d98:	50020650 	.word	0x50020650
 8006d9c:	400206d0 	.word	0x400206d0
 8006da0:	500206d0 	.word	0x500206d0
 8006da4:	40020750 	.word	0x40020750
 8006da8:	50020750 	.word	0x50020750
 8006dac:	400207d0 	.word	0x400207d0
 8006db0:	500207d0 	.word	0x500207d0

08006db4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006dc6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006dcc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006dd2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006dd8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d017      	beq.n	8006e1a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	051b      	lsls	r3, r3, #20
 8006e00:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006e04:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006e12:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006e14:	431a      	orrs	r2, r3
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6859      	ldr	r1, [r3, #4]
 8006e22:	f240 237f 	movw	r3, #639	@ 0x27f
 8006e26:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e36:	d10c      	bne.n	8006e52 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d011      	beq.n	8006e68 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	605a      	str	r2, [r3, #4]
 8006e50:	e00a      	b.n	8006e68 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e5a:	d105      	bne.n	8006e68 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00f      	beq.n	8006e90 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e82:	041b      	lsls	r3, r3, #16
 8006e84:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e88:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d04e      	beq.n	8006f44 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	0419      	lsls	r1, r3, #16
 8006eb2:	4b67      	ldr	r3, [pc, #412]	@ (8007050 <DMA_List_BuildNode+0x29c>)
 8006eb4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	da06      	bge.n	8006ed2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	609a      	str	r2, [r3, #8]
 8006ed0:	e005      	b.n	8006ede <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	da06      	bge.n	8006ef4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	609a      	str	r2, [r3, #8]
 8006ef2:	e005      	b.n	8006f00 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da06      	bge.n	8006f16 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	e005      	b.n	8006f22 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da06      	bge.n	8006f38 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	609a      	str	r2, [r3, #8]
 8006f36:	e005      	b.n	8006f44 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d059      	beq.n	8007014 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da09      	bge.n	8006f7c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f6c:	425b      	negs	r3, r3
 8006f6e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	615a      	str	r2, [r3, #20]
 8006f7a:	e005      	b.n	8006f88 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f80:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	da0d      	bge.n	8006fac <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f94:	425b      	negs	r3, r3
 8006f96:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	695a      	ldr	r2, [r3, #20]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	0419      	lsls	r1, r3, #16
 8006fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8007054 <DMA_List_BuildNode+0x2a0>)
 8006fa2:	400b      	ands	r3, r1
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	615a      	str	r2, [r3, #20]
 8006faa:	e009      	b.n	8006fc0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb4:	0419      	lsls	r1, r3, #16
 8006fb6:	4b27      	ldr	r3, [pc, #156]	@ (8007054 <DMA_List_BuildNode+0x2a0>)
 8006fb8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da08      	bge.n	8006fda <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fcc:	425b      	negs	r3, r3
 8006fce:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	619a      	str	r2, [r3, #24]
 8006fd8:	e004      	b.n	8006fe4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fde:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	da0b      	bge.n	8007004 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff0:	425b      	negs	r3, r3
 8006ff2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	619a      	str	r2, [r3, #24]
 8007002:	e007      	b.n	8007014 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800700c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800700e:	431a      	orrs	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007034:	e005      	b.n	8007042 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	07ff0000 	.word	0x07ff0000
 8007054:	1fff0000 	.word	0x1fff0000

08007058 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	b2da      	uxtb	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0208 	and.w	r2, r3, #8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0203 	and.w	r2, r3, #3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070a6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80070b0:	0d1b      	lsrs	r3, r3, #20
 80070b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070b6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	4b66      	ldr	r3, [pc, #408]	@ (8007268 <DMA_List_GetNodeConfig+0x210>)
 80070ce:	4013      	ands	r3, r2
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070f2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070fa:	60da      	str	r2, [r3, #12]
 80070fc:	e013      	b.n	8007126 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007112:	2b00      	cmp	r3, #0
 8007114:	d004      	beq.n	8007120 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800711c:	60da      	str	r2, [r3, #12]
 800711e:	e002      	b.n	8007126 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800714e:	0c1b      	lsrs	r3, r3, #16
 8007150:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d008      	beq.n	800718c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007184:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	64da      	str	r2, [r3, #76]	@ 0x4c
 800718a:	e002      	b.n	8007192 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	691a      	ldr	r2, [r3, #16]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d04a      	beq.n	8007244 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071b8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80071ba:	89fa      	ldrh	r2, [r7, #14]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	0c1b      	lsrs	r3, r3, #16
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071cc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80071ce:	89fa      	ldrh	r2, [r7, #14]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d004      	beq.n	80071ea <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e4:	425a      	negs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d004      	beq.n	8007200 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fa:	425a      	negs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007206:	89fa      	ldrh	r2, [r7, #14]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007214:	89fa      	ldrh	r2, [r7, #14]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722a:	425a      	negs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	da11      	bge.n	800725c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723c:	425a      	negs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007242:	e00b      	b.n	800725c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	0c002000 	.word	0x0c002000

0800726c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4313      	orrs	r3, r2
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	041b      	lsls	r3, r3, #16
 8007286:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	e00a      	b.n	80072ae <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	e004      	b.n	80072ae <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d001      	beq.n	80072be <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	e00e      	b.n	800730a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	e006      	b.n	800730a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	429a      	cmp	r2, r3
 800731a:	d001      	beq.n	8007320 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 800731c:	2302      	movs	r3, #2
 800731e:	e00b      	b.n	8007338 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	429a      	cmp	r2, r3
 8007330:	d001      	beq.n	8007336 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007332:	2303      	movs	r3, #3
 8007334:	e000      	b.n	8007338 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	4a0d      	ldr	r2, [pc, #52]	@ (800739c <DMA_List_GetCLLRNodeInfo+0x58>)
 8007366:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2207      	movs	r2, #7
 8007372:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007374:	e00b      	b.n	800738e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4a08      	ldr	r2, [pc, #32]	@ (80073a0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007380:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2205      	movs	r2, #5
 800738c:	601a      	str	r2, [r3, #0]
}
 800738e:	bf00      	nop
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	fe010000 	.word	0xfe010000
 80073a0:	f8010000 	.word	0xf8010000

080073a4 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b089      	sub	sp, #36	@ 0x24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d142      	bne.n	800744e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80073c8:	e01d      	b.n	8007406 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d107      	bne.n	80073e0 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073da:	4013      	ands	r3, r2
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	e00f      	b.n	8007400 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	0c1b      	lsrs	r3, r3, #16
 80073ea:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	4413      	add	r3, r2
 80073f0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073f8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073fc:	4013      	ands	r3, r2
 80073fe:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	3301      	adds	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	429a      	cmp	r2, r3
 800740e:	d3dc      	bcc.n	80073ca <DMA_List_FindNode+0x26>
 8007410:	e029      	b.n	8007466 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d107      	bne.n	8007428 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007422:	4013      	ands	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
 8007426:	e00f      	b.n	8007448 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	0c1b      	lsrs	r3, r3, #16
 8007432:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	4413      	add	r3, r2
 8007438:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007440:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007444:	4013      	ands	r3, r2
 8007446:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	3301      	adds	r3, #1
 800744c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	69fa      	ldr	r2, [r7, #28]
 8007454:	429a      	cmp	r2, r3
 8007456:	d206      	bcs.n	8007466 <DMA_List_FindNode+0xc2>
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800745e:	4013      	ands	r3, r2
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	429a      	cmp	r2, r3
 8007464:	d1d5      	bne.n	8007412 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007472:	4013      	ands	r3, r2
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	429a      	cmp	r2, r3
 8007478:	d001      	beq.n	800747e <DMA_List_FindNode+0xda>
    {
      return 1U;
 800747a:	2301      	movs	r3, #1
 800747c:	e02b      	b.n	80074d6 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	041b      	lsls	r3, r3, #16
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	0c1b      	lsrs	r3, r3, #16
 800749a:	041b      	lsls	r3, r3, #16
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	461a      	mov	r2, r3
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00f      	beq.n	80074d4 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	461a      	mov	r2, r3
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80074c4:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	0c1b      	lsrs	r3, r3, #16
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3724      	adds	r7, #36	@ 0x24
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b089      	sub	sp, #36	@ 0x24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80074f6:	e1ba      	b.n	800786e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	2101      	movs	r1, #1
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	fa01 f303 	lsl.w	r3, r1, r3
 8007504:	4013      	ands	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 81aa 	beq.w	8007868 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a55      	ldr	r2, [pc, #340]	@ (800766c <HAL_GPIO_Init+0x188>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d15d      	bne.n	80075d8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007522:	2201      	movs	r2, #1
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	fa02 f303 	lsl.w	r3, r2, r3
 800752a:	43db      	mvns	r3, r3
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	4013      	ands	r3, r2
 8007530:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f003 0201 	and.w	r2, r3, #1
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	fa02 f303 	lsl.w	r3, r2, r3
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	4313      	orrs	r3, r2
 8007544:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69fa      	ldr	r2, [r7, #28]
 800754a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800754c:	4a48      	ldr	r2, [pc, #288]	@ (8007670 <HAL_GPIO_Init+0x18c>)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007554:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007556:	4a46      	ldr	r2, [pc, #280]	@ (8007670 <HAL_GPIO_Init+0x18c>)
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	08da      	lsrs	r2, r3, #3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	3208      	adds	r2, #8
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	220f      	movs	r2, #15
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	43db      	mvns	r3, r3
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	4013      	ands	r3, r2
 8007584:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	220b      	movs	r2, #11
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	4313      	orrs	r3, r2
 8007598:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	08da      	lsrs	r2, r3, #3
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	3208      	adds	r2, #8
 80075a2:	69f9      	ldr	r1, [r7, #28]
 80075a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	2203      	movs	r2, #3
 80075b4:	fa02 f303 	lsl.w	r3, r2, r3
 80075b8:	43db      	mvns	r3, r3
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	4013      	ands	r3, r2
 80075be:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	2202      	movs	r2, #2
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	e067      	b.n	80076a8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d003      	beq.n	80075e8 <HAL_GPIO_Init+0x104>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b12      	cmp	r3, #18
 80075e6:	d145      	bne.n	8007674 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	08da      	lsrs	r2, r3, #3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3208      	adds	r2, #8
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	220f      	movs	r2, #15
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	43db      	mvns	r3, r3
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	4013      	ands	r3, r2
 800760a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f003 020f 	and.w	r2, r3, #15
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	4313      	orrs	r3, r2
 8007624:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	08da      	lsrs	r2, r3, #3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3208      	adds	r2, #8
 800762e:	69f9      	ldr	r1, [r7, #28]
 8007630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	2203      	movs	r2, #3
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	43db      	mvns	r3, r3
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	4013      	ands	r3, r2
 800764a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f003 0203 	and.w	r2, r3, #3
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	4313      	orrs	r3, r2
 8007660:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	e01e      	b.n	80076a8 <HAL_GPIO_Init+0x1c4>
 800766a:	bf00      	nop
 800766c:	46020000 	.word	0x46020000
 8007670:	0801197c 	.word	0x0801197c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	2203      	movs	r2, #3
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	43db      	mvns	r3, r3
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	4013      	ands	r3, r2
 800768a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f003 0203 	and.w	r2, r3, #3
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	4313      	orrs	r3, r2
 80076a0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d00b      	beq.n	80076c8 <HAL_GPIO_Init+0x1e4>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d007      	beq.n	80076c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076bc:	2b11      	cmp	r3, #17
 80076be:	d003      	beq.n	80076c8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b12      	cmp	r3, #18
 80076c6:	d130      	bne.n	800772a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	2203      	movs	r2, #3
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	43db      	mvns	r3, r3
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	4013      	ands	r3, r2
 80076de:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80076fe:	2201      	movs	r2, #1
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	43db      	mvns	r3, r3
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	4013      	ands	r3, r2
 800770c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	091b      	lsrs	r3, r3, #4
 8007714:	f003 0201 	and.w	r2, r3, #1
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	fa02 f303 	lsl.w	r3, r2, r3
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	4313      	orrs	r3, r2
 8007722:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b03      	cmp	r3, #3
 8007730:	d017      	beq.n	8007762 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	2203      	movs	r2, #3
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	43db      	mvns	r3, r3
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	4013      	ands	r3, r2
 8007748:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	fa02 f303 	lsl.w	r3, r2, r3
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	4313      	orrs	r3, r2
 800775a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d07c      	beq.n	8007868 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800776e:	4a47      	ldr	r2, [pc, #284]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	089b      	lsrs	r3, r3, #2
 8007774:	3318      	adds	r3, #24
 8007776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	220f      	movs	r2, #15
 8007786:	fa02 f303 	lsl.w	r3, r2, r3
 800778a:	43db      	mvns	r3, r3
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	4013      	ands	r3, r2
 8007790:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	0a9a      	lsrs	r2, r3, #10
 8007796:	4b3e      	ldr	r3, [pc, #248]	@ (8007890 <HAL_GPIO_Init+0x3ac>)
 8007798:	4013      	ands	r3, r2
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	f002 0203 	and.w	r2, r2, #3
 80077a0:	00d2      	lsls	r2, r2, #3
 80077a2:	4093      	lsls	r3, r2
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80077aa:	4938      	ldr	r1, [pc, #224]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	089b      	lsrs	r3, r3, #2
 80077b0:	3318      	adds	r3, #24
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80077b8:	4b34      	ldr	r3, [pc, #208]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	43db      	mvns	r3, r3
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	4013      	ands	r3, r2
 80077c6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80077d4:	69fa      	ldr	r2, [r7, #28]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4313      	orrs	r3, r2
 80077da:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80077dc:	4a2b      	ldr	r2, [pc, #172]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80077e2:	4b2a      	ldr	r3, [pc, #168]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	43db      	mvns	r3, r3
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	4013      	ands	r3, r2
 80077f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007806:	4a21      	ldr	r2, [pc, #132]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800780c:	4b1f      	ldr	r3, [pc, #124]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 800780e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007812:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	43db      	mvns	r3, r3
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	4013      	ands	r3, r2
 800781c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007832:	4a16      	ldr	r2, [pc, #88]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800783a:	4b14      	ldr	r3, [pc, #80]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 800783c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007840:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	43db      	mvns	r3, r3
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	4013      	ands	r3, r2
 800784a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4313      	orrs	r3, r2
 800785e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007860:	4a0a      	ldr	r2, [pc, #40]	@ (800788c <HAL_GPIO_Init+0x3a8>)
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	3301      	adds	r3, #1
 800786c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	fa22 f303 	lsr.w	r3, r2, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	f47f ae3d 	bne.w	80074f8 <HAL_GPIO_Init+0x14>
  }
}
 800787e:	bf00      	nop
 8007880:	bf00      	nop
 8007882:	3724      	adds	r7, #36	@ 0x24
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	46022000 	.word	0x46022000
 8007890:	002f7f7f 	.word	0x002f7f7f

08007894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	807b      	strh	r3, [r7, #2]
 80078a0:	4613      	mov	r3, r2
 80078a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078a4:	787b      	ldrb	r3, [r7, #1]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80078aa:	887a      	ldrh	r2, [r7, #2]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80078b0:	e002      	b.n	80078b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80078b2:	887a      	ldrh	r2, [r7, #2]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80078ce:	4b0f      	ldr	r3, [pc, #60]	@ (800790c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d006      	beq.n	80078e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80078da:	4a0c      	ldr	r2, [pc, #48]	@ (800790c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 f814 	bl	8007910 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80078e8:	4b08      	ldr	r3, [pc, #32]	@ (800790c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	4013      	ands	r3, r2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d006      	beq.n	8007902 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80078f4:	4a05      	ldr	r2, [pc, #20]	@ (800790c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f812 	bl	8007926 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007902:	bf00      	nop
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	46022000 	.word	0x46022000

08007910 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	4603      	mov	r3, r0
 8007918:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	4603      	mov	r3, r0
 800792e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e08d      	b.n	8007a6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fa fa06 	bl	8001d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2224      	movs	r2, #36	@ 0x24
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0201 	bic.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800798c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800799c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d107      	bne.n	80079b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079b2:	609a      	str	r2, [r3, #8]
 80079b4:	e006      	b.n	80079c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80079c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d108      	bne.n	80079de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079da:	605a      	str	r2, [r3, #4]
 80079dc:	e007      	b.n	80079ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	69d9      	ldr	r1, [r3, #28]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a1a      	ldr	r2, [r3, #32]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0201 	orr.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	607a      	str	r2, [r7, #4]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	460b      	mov	r3, r1
 8007a82:	817b      	strh	r3, [r7, #10]
 8007a84:	4613      	mov	r3, r2
 8007a86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	f040 80da 	bne.w	8007c4a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_I2C_Master_Transmit+0x30>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e0d3      	b.n	8007c4c <HAL_I2C_Master_Transmit+0x1d8>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007aac:	f7fb f8f8 	bl	8002ca0 <HAL_GetTick>
 8007ab0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	2319      	movs	r3, #25
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 fe7d 	bl	80087be <I2C_WaitOnFlagUntilTimeout>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e0be      	b.n	8007c4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2221      	movs	r2, #33	@ 0x21
 8007ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2210      	movs	r2, #16
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	893a      	ldrh	r2, [r7, #8]
 8007aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2bff      	cmp	r3, #255	@ 0xff
 8007afe:	d90e      	bls.n	8007b1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	22ff      	movs	r2, #255	@ 0xff
 8007b04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	8979      	ldrh	r1, [r7, #10]
 8007b0e:	4b51      	ldr	r3, [pc, #324]	@ (8007c54 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f001 f814 	bl	8008b44 <I2C_TransferConfig>
 8007b1c:	e06c      	b.n	8007bf8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	8979      	ldrh	r1, [r7, #10]
 8007b30:	4b48      	ldr	r3, [pc, #288]	@ (8007c54 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f001 f803 	bl	8008b44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b3e:	e05b      	b.n	8007bf8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	6a39      	ldr	r1, [r7, #32]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fe93 	bl	8008870 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e07b      	b.n	8007c4c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	781a      	ldrb	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d034      	beq.n	8007bf8 <HAL_I2C_Master_Transmit+0x184>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d130      	bne.n	8007bf8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2180      	movs	r1, #128	@ 0x80
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 fe0c 	bl	80087be <I2C_WaitOnFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e04d      	b.n	8007c4c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2bff      	cmp	r3, #255	@ 0xff
 8007bb8:	d90e      	bls.n	8007bd8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	22ff      	movs	r2, #255	@ 0xff
 8007bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	8979      	ldrh	r1, [r7, #10]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 ffb7 	bl	8008b44 <I2C_TransferConfig>
 8007bd6:	e00f      	b.n	8007bf8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	8979      	ldrh	r1, [r7, #10]
 8007bea:	2300      	movs	r3, #0
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 ffa6 	bl	8008b44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d19e      	bne.n	8007b40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	6a39      	ldr	r1, [r7, #32]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fe79 	bl	80088fe <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e01a      	b.n	8007c4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6859      	ldr	r1, [r3, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	4b0b      	ldr	r3, [pc, #44]	@ (8007c58 <HAL_I2C_Master_Transmit+0x1e4>)
 8007c2a:	400b      	ands	r3, r1
 8007c2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e000      	b.n	8007c4c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007c4a:	2302      	movs	r3, #2
  }
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	80002000 	.word	0x80002000
 8007c58:	fe00e800 	.word	0xfe00e800

08007c5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	68f9      	ldr	r1, [r7, #12]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	4798      	blx	r3
  }
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00f      	beq.n	8007cd2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00a      	beq.n	8007cd2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc0:	f043 0201 	orr.w	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cd0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00f      	beq.n	8007cfc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cea:	f043 0208 	orr.w	r2, r3, #8
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cfa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00f      	beq.n	8007d26 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d14:	f043 0202 	orr.w	r2, r3, #2
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d24:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f003 030b 	and.w	r3, r3, #11
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007d36:	68f9      	ldr	r1, [r7, #12]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fbe7 	bl	800850c <I2C_ITError>
  }
}
 8007d3e:	bf00      	nop
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <I2C_Slave_ISR_IT+0x24>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e0e2      	b.n	8007fb0 <I2C_Slave_ISR_IT+0x1ea>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d009      	beq.n	8007e10 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d004      	beq.n	8007e10 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007e06:	6939      	ldr	r1, [r7, #16]
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f9b5 	bl	8008178 <I2C_ITSlaveCplt>
 8007e0e:	e0ca      	b.n	8007fa6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f003 0310 	and.w	r3, r3, #16
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d04b      	beq.n	8007eb2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d046      	beq.n	8007eb2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d128      	bne.n	8007e80 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b28      	cmp	r3, #40	@ 0x28
 8007e38:	d108      	bne.n	8007e4c <I2C_Slave_ISR_IT+0x86>
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e40:	d104      	bne.n	8007e4c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e42:	6939      	ldr	r1, [r7, #16]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fb0d 	bl	8008464 <I2C_ITListenCplt>
 8007e4a:	e031      	b.n	8007eb0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b29      	cmp	r3, #41	@ 0x29
 8007e56:	d10e      	bne.n	8007e76 <I2C_Slave_ISR_IT+0xb0>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e5e:	d00a      	beq.n	8007e76 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2210      	movs	r2, #16
 8007e66:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fc66 	bl	800873a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f926 	bl	80080c0 <I2C_ITSlaveSeqCplt>
 8007e74:	e01c      	b.n	8007eb0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2210      	movs	r2, #16
 8007e7c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007e7e:	e08f      	b.n	8007fa0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2210      	movs	r2, #16
 8007e86:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8c:	f043 0204 	orr.w	r2, r3, #4
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <I2C_Slave_ISR_IT+0xdc>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ea0:	d17e      	bne.n	8007fa0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 fb2f 	bl	800850c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007eae:	e077      	b.n	8007fa0 <I2C_Slave_ISR_IT+0x1da>
 8007eb0:	e076      	b.n	8007fa0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d02f      	beq.n	8007f1c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d02a      	beq.n	8007f1c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d018      	beq.n	8007f02 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d14b      	bne.n	8007fa4 <I2C_Slave_ISR_IT+0x1de>
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f12:	d047      	beq.n	8007fa4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 f8d3 	bl	80080c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007f1a:	e043      	b.n	8007fa4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007f30:	6939      	ldr	r1, [r7, #16]
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f840 	bl	8007fb8 <I2C_ITAddrCplt>
 8007f38:	e035      	b.n	8007fa6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d030      	beq.n	8007fa6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d02b      	beq.n	8007fa6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d018      	beq.n	8007f8a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007f88:	e00d      	b.n	8007fa6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f90:	d002      	beq.n	8007f98 <I2C_Slave_ISR_IT+0x1d2>
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d106      	bne.n	8007fa6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 f891 	bl	80080c0 <I2C_ITSlaveSeqCplt>
 8007f9e:	e002      	b.n	8007fa6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007fa0:	bf00      	nop
 8007fa2:	e000      	b.n	8007fa6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007fa4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fce:	2b28      	cmp	r3, #40	@ 0x28
 8007fd0:	d16a      	bne.n	80080a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	0c1b      	lsrs	r3, r3, #16
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	0c1b      	lsrs	r3, r3, #16
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007ff0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ffe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800800c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	2b02      	cmp	r3, #2
 8008014:	d138      	bne.n	8008088 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008016:	897b      	ldrh	r3, [r7, #10]
 8008018:	09db      	lsrs	r3, r3, #7
 800801a:	b29a      	uxth	r2, r3
 800801c:	89bb      	ldrh	r3, [r7, #12]
 800801e:	4053      	eors	r3, r2
 8008020:	b29b      	uxth	r3, r3
 8008022:	f003 0306 	and.w	r3, r3, #6
 8008026:	2b00      	cmp	r3, #0
 8008028:	d11c      	bne.n	8008064 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800802a:	897b      	ldrh	r3, [r7, #10]
 800802c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803c:	2b02      	cmp	r3, #2
 800803e:	d13b      	bne.n	80080b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2208      	movs	r2, #8
 800804c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008056:	89ba      	ldrh	r2, [r7, #12]
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff fe86 	bl	8007d6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008062:	e029      	b.n	80080b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008064:	893b      	ldrh	r3, [r7, #8]
 8008066:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fd9b 	bl	8008ba8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800807a:	89ba      	ldrh	r2, [r7, #12]
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff fe74 	bl	8007d6e <HAL_I2C_AddrCallback>
}
 8008086:	e017      	b.n	80080b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008088:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fd8b 	bl	8008ba8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800809a:	89ba      	ldrh	r2, [r7, #12]
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fe64 	bl	8007d6e <HAL_I2C_AddrCallback>
}
 80080a6:	e007      	b.n	80080b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2208      	movs	r2, #8
 80080ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	e00c      	b.n	800810e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800810c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b29      	cmp	r3, #41	@ 0x29
 8008118:	d112      	bne.n	8008140 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2228      	movs	r2, #40	@ 0x28
 800811e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2221      	movs	r2, #33	@ 0x21
 8008126:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008128:	2101      	movs	r1, #1
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fd3c 	bl	8008ba8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff fe04 	bl	8007d46 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800813e:	e017      	b.n	8008170 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b2a      	cmp	r3, #42	@ 0x2a
 800814a:	d111      	bne.n	8008170 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2228      	movs	r2, #40	@ 0x28
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2222      	movs	r2, #34	@ 0x22
 8008158:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800815a:	2102      	movs	r1, #2
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fd23 	bl	8008ba8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff fdf5 	bl	8007d5a <HAL_I2C_SlaveRxCpltCallback>
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008178:	b590      	push	{r4, r7, lr}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008192:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800819a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2220      	movs	r2, #32
 80081a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80081a4:	7afb      	ldrb	r3, [r7, #11]
 80081a6:	2b21      	cmp	r3, #33	@ 0x21
 80081a8:	d002      	beq.n	80081b0 <I2C_ITSlaveCplt+0x38>
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	2b29      	cmp	r3, #41	@ 0x29
 80081ae:	d108      	bne.n	80081c2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80081b0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fcf7 	bl	8008ba8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2221      	movs	r2, #33	@ 0x21
 80081be:	631a      	str	r2, [r3, #48]	@ 0x30
 80081c0:	e019      	b.n	80081f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081c2:	7afb      	ldrb	r3, [r7, #11]
 80081c4:	2b22      	cmp	r3, #34	@ 0x22
 80081c6:	d002      	beq.n	80081ce <I2C_ITSlaveCplt+0x56>
 80081c8:	7afb      	ldrb	r3, [r7, #11]
 80081ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80081cc:	d108      	bne.n	80081e0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80081ce:	f248 0102 	movw	r1, #32770	@ 0x8002
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fce8 	bl	8008ba8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2222      	movs	r2, #34	@ 0x22
 80081dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80081de:	e00a      	b.n	80081f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80081e0:	7afb      	ldrb	r3, [r7, #11]
 80081e2:	2b28      	cmp	r3, #40	@ 0x28
 80081e4:	d107      	bne.n	80081f6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80081e6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fcdc 	bl	8008ba8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008204:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6859      	ldr	r1, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	4b92      	ldr	r3, [pc, #584]	@ (800845c <I2C_ITSlaveCplt+0x2e4>)
 8008212:	400b      	ands	r3, r1
 8008214:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa8f 	bl	800873a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d01c      	beq.n	8008260 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008234:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823a:	2b00      	cmp	r3, #0
 800823c:	d031      	beq.n	80082a2 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008246:	b29c      	uxth	r4, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fc49 	bl	8006ae4 <HAL_DMAEx_GetFifoLevel>
 8008252:	4603      	mov	r3, r0
 8008254:	b29b      	uxth	r3, r3
 8008256:	4423      	add	r3, r4
 8008258:	b29a      	uxth	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800825e:	e020      	b.n	80082a2 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d01b      	beq.n	80082a2 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008278:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00f      	beq.n	80082a2 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800828a:	b29c      	uxth	r4, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe fc27 	bl	8006ae4 <HAL_DMAEx_GetFifoLevel>
 8008296:	4603      	mov	r3, r0
 8008298:	b29b      	uxth	r3, r3
 800829a:	4423      	add	r3, r4
 800829c:	b29a      	uxth	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d020      	beq.n	80082ee <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f023 0304 	bic.w	r3, r3, #4
 80082b2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00c      	beq.n	80082ee <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082d8:	3b01      	subs	r3, #1
 80082da:	b29a      	uxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082fc:	f043 0204 	orr.w	r2, r3, #4
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f003 0310 	and.w	r3, r3, #16
 800830a:	2b00      	cmp	r3, #0
 800830c:	d049      	beq.n	80083a2 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008314:	2b00      	cmp	r3, #0
 8008316:	d044      	beq.n	80083a2 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800831c:	b29b      	uxth	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d128      	bne.n	8008374 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b28      	cmp	r3, #40	@ 0x28
 800832c:	d108      	bne.n	8008340 <I2C_ITSlaveCplt+0x1c8>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008334:	d104      	bne.n	8008340 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008336:	6979      	ldr	r1, [r7, #20]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f893 	bl	8008464 <I2C_ITListenCplt>
 800833e:	e030      	b.n	80083a2 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b29      	cmp	r3, #41	@ 0x29
 800834a:	d10e      	bne.n	800836a <I2C_ITSlaveCplt+0x1f2>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008352:	d00a      	beq.n	800836a <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2210      	movs	r2, #16
 800835a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f9ec 	bl	800873a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff feac 	bl	80080c0 <I2C_ITSlaveSeqCplt>
 8008368:	e01b      	b.n	80083a2 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2210      	movs	r2, #16
 8008370:	61da      	str	r2, [r3, #28]
 8008372:	e016      	b.n	80083a2 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2210      	movs	r2, #16
 800837a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008380:	f043 0204 	orr.w	r2, r3, #4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <I2C_ITSlaveCplt+0x21e>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008394:	d105      	bne.n	80083a2 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f8b5 	bl	800850c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d010      	beq.n	80083da <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f8a4 	bl	800850c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b28      	cmp	r3, #40	@ 0x28
 80083ce:	d141      	bne.n	8008454 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f846 	bl	8008464 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083d8:	e03c      	b.n	8008454 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083e2:	d014      	beq.n	800840e <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff fe6b 	bl	80080c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008460 <I2C_ITSlaveCplt+0x2e8>)
 80083ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff fcbf 	bl	8007d8a <HAL_I2C_ListenCpltCallback>
}
 800840c:	e022      	b.n	8008454 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b22      	cmp	r3, #34	@ 0x22
 8008418:	d10e      	bne.n	8008438 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2220      	movs	r2, #32
 800841e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff fc92 	bl	8007d5a <HAL_I2C_SlaveRxCpltCallback>
}
 8008436:	e00d      	b.n	8008454 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7ff fc79 	bl	8007d46 <HAL_I2C_SlaveTxCpltCallback>
}
 8008454:	bf00      	nop
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	bd90      	pop	{r4, r7, pc}
 800845c:	fe00e800 	.word	0xfe00e800
 8008460:	ffff0000 	.word	0xffff0000

08008464 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a25      	ldr	r2, [pc, #148]	@ (8008508 <I2C_ITListenCplt+0xa4>)
 8008472:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	f003 0304 	and.w	r3, r3, #4
 8008496:	2b00      	cmp	r3, #0
 8008498:	d022      	beq.n	80084e0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d012      	beq.n	80084e0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084be:	3b01      	subs	r3, #1
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d8:	f043 0204 	orr.w	r2, r3, #4
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80084e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fb5f 	bl	8008ba8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2210      	movs	r2, #16
 80084f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff fc45 	bl	8007d8a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	ffff0000 	.word	0xffff0000

0800850c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800851c:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a6d      	ldr	r2, [pc, #436]	@ (80086e0 <I2C_ITError+0x1d4>)
 800852a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	431a      	orrs	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2b28      	cmp	r3, #40	@ 0x28
 8008542:	d005      	beq.n	8008550 <I2C_ITError+0x44>
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	2b29      	cmp	r3, #41	@ 0x29
 8008548:	d002      	beq.n	8008550 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	2b2a      	cmp	r3, #42	@ 0x2a
 800854e:	d10b      	bne.n	8008568 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008550:	2103      	movs	r1, #3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fb28 	bl	8008ba8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2228      	movs	r2, #40	@ 0x28
 800855c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a60      	ldr	r2, [pc, #384]	@ (80086e4 <I2C_ITError+0x1d8>)
 8008564:	635a      	str	r2, [r3, #52]	@ 0x34
 8008566:	e030      	b.n	80085ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008568:	f248 0103 	movw	r1, #32771	@ 0x8003
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fb1b 	bl	8008ba8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f8e1 	bl	800873a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b60      	cmp	r3, #96	@ 0x60
 8008582:	d01f      	beq.n	80085c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2220      	movs	r2, #32
 8008588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b20      	cmp	r3, #32
 8008598:	d114      	bne.n	80085c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f003 0310 	and.w	r3, r3, #16
 80085a4:	2b10      	cmp	r3, #16
 80085a6:	d109      	bne.n	80085bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2210      	movs	r2, #16
 80085ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b4:	f043 0204 	orr.w	r2, r3, #4
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2220      	movs	r2, #32
 80085c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d039      	beq.n	800864c <I2C_ITError+0x140>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b11      	cmp	r3, #17
 80085dc:	d002      	beq.n	80085e4 <I2C_ITError+0xd8>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b21      	cmp	r3, #33	@ 0x21
 80085e2:	d133      	bne.n	800864c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085f2:	d107      	bne.n	8008604 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008602:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd fabf 	bl	8005b8c <HAL_DMA_GetState>
 800860e:	4603      	mov	r3, r0
 8008610:	2b01      	cmp	r3, #1
 8008612:	d017      	beq.n	8008644 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008618:	4a33      	ldr	r2, [pc, #204]	@ (80086e8 <I2C_ITError+0x1dc>)
 800861a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008628:	4618      	mov	r0, r3
 800862a:	f7fd f925 	bl	8005878 <HAL_DMA_Abort_IT>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d04d      	beq.n	80086d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800863e:	4610      	mov	r0, r2
 8008640:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008642:	e045      	b.n	80086d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f851 	bl	80086ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800864a:	e041      	b.n	80086d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d039      	beq.n	80086c8 <I2C_ITError+0x1bc>
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b12      	cmp	r3, #18
 8008658:	d002      	beq.n	8008660 <I2C_ITError+0x154>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b22      	cmp	r3, #34	@ 0x22
 800865e:	d133      	bne.n	80086c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800866a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800866e:	d107      	bne.n	8008680 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800867e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008684:	4618      	mov	r0, r3
 8008686:	f7fd fa81 	bl	8005b8c <HAL_DMA_GetState>
 800868a:	4603      	mov	r3, r0
 800868c:	2b01      	cmp	r3, #1
 800868e:	d017      	beq.n	80086c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008694:	4a14      	ldr	r2, [pc, #80]	@ (80086e8 <I2C_ITError+0x1dc>)
 8008696:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd f8e7 	bl	8005878 <HAL_DMA_Abort_IT>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d011      	beq.n	80086d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086ba:	4610      	mov	r0, r2
 80086bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086be:	e009      	b.n	80086d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f813 	bl	80086ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086c6:	e005      	b.n	80086d4 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f80f 	bl	80086ec <I2C_TreatErrorCallback>
  }
}
 80086ce:	e002      	b.n	80086d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086d0:	bf00      	nop
 80086d2:	e000      	b.n	80086d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086d4:	bf00      	nop
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	ffff0000 	.word	0xffff0000
 80086e4:	08007dc7 	.word	0x08007dc7
 80086e8:	08008783 	.word	0x08008783

080086ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b60      	cmp	r3, #96	@ 0x60
 80086fe:	d10e      	bne.n	800871e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff fb4b 	bl	8007db2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800871c:	e009      	b.n	8008732 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff fb36 	bl	8007d9e <HAL_I2C_ErrorCallback>
}
 8008732:	bf00      	nop
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b02      	cmp	r3, #2
 800874e:	d103      	bne.n	8008758 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2200      	movs	r2, #0
 8008756:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b01      	cmp	r3, #1
 8008764:	d007      	beq.n	8008776 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	699a      	ldr	r2, [r3, #24]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0201 	orr.w	r2, r2, #1
 8008774:	619a      	str	r2, [r3, #24]
  }
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800878e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800879c:	2200      	movs	r2, #0
 800879e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ac:	2200      	movs	r2, #0
 80087ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7ff ff9b 	bl	80086ec <I2C_TreatErrorCallback>
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	603b      	str	r3, [r7, #0]
 80087ca:	4613      	mov	r3, r2
 80087cc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087ce:	e03b      	b.n	8008848 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 f8d5 	bl	8008984 <I2C_IsErrorOccurred>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e041      	b.n	8008868 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ea:	d02d      	beq.n	8008848 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ec:	f7fa fa58 	bl	8002ca0 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d302      	bcc.n	8008802 <I2C_WaitOnFlagUntilTimeout+0x44>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d122      	bne.n	8008848 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4013      	ands	r3, r2
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	429a      	cmp	r2, r3
 8008810:	bf0c      	ite	eq
 8008812:	2301      	moveq	r3, #1
 8008814:	2300      	movne	r3, #0
 8008816:	b2db      	uxtb	r3, r3
 8008818:	461a      	mov	r2, r3
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	429a      	cmp	r2, r3
 800881e:	d113      	bne.n	8008848 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008824:	f043 0220 	orr.w	r2, r3, #32
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e00f      	b.n	8008868 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	4013      	ands	r3, r2
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	429a      	cmp	r2, r3
 8008856:	bf0c      	ite	eq
 8008858:	2301      	moveq	r3, #1
 800885a:	2300      	movne	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	461a      	mov	r2, r3
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	429a      	cmp	r2, r3
 8008864:	d0b4      	beq.n	80087d0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800887c:	e033      	b.n	80088e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	68b9      	ldr	r1, [r7, #8]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 f87e 	bl	8008984 <I2C_IsErrorOccurred>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e031      	b.n	80088f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008898:	d025      	beq.n	80088e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889a:	f7fa fa01 	bl	8002ca0 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d302      	bcc.n	80088b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d11a      	bne.n	80088e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d013      	beq.n	80088e6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c2:	f043 0220 	orr.w	r2, r3, #32
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e007      	b.n	80088f6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d1c4      	bne.n	800887e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800890a:	e02f      	b.n	800896c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f837 	bl	8008984 <I2C_IsErrorOccurred>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e02d      	b.n	800897c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008920:	f7fa f9be 	bl	8002ca0 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	429a      	cmp	r2, r3
 800892e:	d302      	bcc.n	8008936 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d11a      	bne.n	800896c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	2b20      	cmp	r3, #32
 8008942:	d013      	beq.n	800896c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008948:	f043 0220 	orr.w	r2, r3, #32
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2220      	movs	r2, #32
 8008954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e007      	b.n	800897c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b20      	cmp	r3, #32
 8008978:	d1c8      	bne.n	800890c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08a      	sub	sp, #40	@ 0x28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	f003 0310 	and.w	r3, r3, #16
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d068      	beq.n	8008a82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2210      	movs	r2, #16
 80089b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089b8:	e049      	b.n	8008a4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c0:	d045      	beq.n	8008a4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80089c2:	f7fa f96d 	bl	8002ca0 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d302      	bcc.n	80089d8 <I2C_IsErrorOccurred+0x54>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d13a      	bne.n	8008a4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089fa:	d121      	bne.n	8008a40 <I2C_IsErrorOccurred+0xbc>
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a02:	d01d      	beq.n	8008a40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008a04:	7cfb      	ldrb	r3, [r7, #19]
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d01a      	beq.n	8008a40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008a1a:	f7fa f941 	bl	8002ca0 <HAL_GetTick>
 8008a1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a20:	e00e      	b.n	8008a40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a22:	f7fa f93d 	bl	8002ca0 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	2b19      	cmp	r3, #25
 8008a2e:	d907      	bls.n	8008a40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	f043 0320 	orr.w	r3, r3, #32
 8008a36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008a3e:	e006      	b.n	8008a4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	d1e9      	bne.n	8008a22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	d003      	beq.n	8008a64 <I2C_IsErrorOccurred+0xe0>
 8008a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0aa      	beq.n	80089ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d103      	bne.n	8008a74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2220      	movs	r2, #32
 8008a72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	f043 0304 	orr.w	r3, r3, #4
 8008a7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008aa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	f043 0308 	orr.w	r3, r3, #8
 8008abc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008ac6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00b      	beq.n	8008af0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	f043 0302 	orr.w	r3, r3, #2
 8008ade:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ae8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008af0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01c      	beq.n	8008b32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff fe1e 	bl	800873a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6859      	ldr	r1, [r3, #4]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	4b0d      	ldr	r3, [pc, #52]	@ (8008b40 <I2C_IsErrorOccurred+0x1bc>)
 8008b0a:	400b      	ands	r3, r1
 8008b0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3728      	adds	r7, #40	@ 0x28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	fe00e800 	.word	0xfe00e800

08008b44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	607b      	str	r3, [r7, #4]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	817b      	strh	r3, [r7, #10]
 8008b52:	4613      	mov	r3, r2
 8008b54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b56:	897b      	ldrh	r3, [r7, #10]
 8008b58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b5c:	7a7b      	ldrb	r3, [r7, #9]
 8008b5e:	041b      	lsls	r3, r3, #16
 8008b60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	0d5b      	lsrs	r3, r3, #21
 8008b7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008b82:	4b08      	ldr	r3, [pc, #32]	@ (8008ba4 <I2C_TransferConfig+0x60>)
 8008b84:	430b      	orrs	r3, r1
 8008b86:	43db      	mvns	r3, r3
 8008b88:	ea02 0103 	and.w	r1, r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b96:	bf00      	nop
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	03ff63ff 	.word	0x03ff63ff

08008ba8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008bb8:	887b      	ldrh	r3, [r7, #2]
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00f      	beq.n	8008be2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008bc8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bd6:	2b28      	cmp	r3, #40	@ 0x28
 8008bd8:	d003      	beq.n	8008be2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008be0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008be2:	887b      	ldrh	r3, [r7, #2]
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00f      	beq.n	8008c0c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008bf2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c00:	2b28      	cmp	r3, #40	@ 0x28
 8008c02:	d003      	beq.n	8008c0c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008c0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008c0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	da03      	bge.n	8008c1c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008c1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c1c:	887b      	ldrh	r3, [r7, #2]
 8008c1e:	2b10      	cmp	r3, #16
 8008c20:	d103      	bne.n	8008c2a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008c28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c2a:	887b      	ldrh	r3, [r7, #2]
 8008c2c:	2b20      	cmp	r3, #32
 8008c2e:	d103      	bne.n	8008c38 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f043 0320 	orr.w	r3, r3, #32
 8008c36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008c38:	887b      	ldrh	r3, [r7, #2]
 8008c3a:	2b40      	cmp	r3, #64	@ 0x40
 8008c3c:	d103      	bne.n	8008c46 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6819      	ldr	r1, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	43da      	mvns	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	400a      	ands	r2, r1
 8008c56:	601a      	str	r2, [r3, #0]
}
 8008c58:	bf00      	nop
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d138      	bne.n	8008cec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e032      	b.n	8008cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2224      	movs	r2, #36	@ 0x24
 8008c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 0201 	bic.w	r2, r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6819      	ldr	r1, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0201 	orr.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e000      	b.n	8008cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cec:	2302      	movs	r3, #2
  }
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d139      	bne.n	8008d84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d101      	bne.n	8008d1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e033      	b.n	8008d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2224      	movs	r2, #36	@ 0x24
 8008d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0201 	bic.w	r2, r2, #1
 8008d3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0201 	orr.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	e000      	b.n	8008d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d84:	2302      	movs	r3, #2
  }
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008da0:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
 8008db0:	e007      	b.n	8008dc2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008db2:	4b07      	ldr	r3, [pc, #28]	@ (8008dd0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f023 0204 	bic.w	r2, r3, #4
 8008dba:	4905      	ldr	r1, [pc, #20]	@ (8008dd0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	40030400 	.word	0x40030400

08008dd4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008dd8:	4b05      	ldr	r3, [pc, #20]	@ (8008df0 <HAL_ICACHE_Enable+0x1c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a04      	ldr	r2, [pc, #16]	@ (8008df0 <HAL_ICACHE_Enable+0x1c>)
 8008dde:	f043 0301 	orr.w	r3, r3, #1
 8008de2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	40030400 	.word	0x40030400

08008df4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e0bf      	b.n	8008f86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d106      	bne.n	8008e20 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7f9 f898 	bl	8001f50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008e36:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6999      	ldr	r1, [r3, #24]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e4c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6899      	ldr	r1, [r3, #8]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	4b4a      	ldr	r3, [pc, #296]	@ (8008f90 <HAL_LTDC_Init+0x19c>)
 8008e68:	400b      	ands	r3, r1
 8008e6a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	041b      	lsls	r3, r3, #16
 8008e72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6899      	ldr	r1, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	431a      	orrs	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68d9      	ldr	r1, [r3, #12]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	4b3e      	ldr	r3, [pc, #248]	@ (8008f90 <HAL_LTDC_Init+0x19c>)
 8008e96:	400b      	ands	r3, r1
 8008e98:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68d9      	ldr	r1, [r3, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a1a      	ldr	r2, [r3, #32]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6919      	ldr	r1, [r3, #16]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b33      	ldr	r3, [pc, #204]	@ (8008f90 <HAL_LTDC_Init+0x19c>)
 8008ec4:	400b      	ands	r3, r1
 8008ec6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ecc:	041b      	lsls	r3, r3, #16
 8008ece:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6919      	ldr	r1, [r3, #16]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6959      	ldr	r1, [r3, #20]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	4b27      	ldr	r3, [pc, #156]	@ (8008f90 <HAL_LTDC_Init+0x19c>)
 8008ef2:	400b      	ands	r3, r1
 8008ef4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efa:	041b      	lsls	r3, r3, #16
 8008efc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6959      	ldr	r1, [r3, #20]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008f24:	041b      	lsls	r3, r3, #16
 8008f26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008f36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0206 	orr.w	r2, r2, #6
 8008f62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699a      	ldr	r2, [r3, #24]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0201 	orr.w	r2, r2, #1
 8008f72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	f000f800 	.word	0xf000f800

08008f94 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008faa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f003 0304 	and.w	r3, r3, #4
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d023      	beq.n	8008ffe <HAL_LTDC_IRQHandler+0x6a>
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f003 0304 	and.w	r3, r3, #4
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01e      	beq.n	8008ffe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0204 	bic.w	r2, r2, #4
 8008fce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2204      	movs	r2, #4
 8008fd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fde:	f043 0201 	orr.w	r2, r3, #1
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2204      	movs	r2, #4
 8008fec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f86f 	bl	80090dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d023      	beq.n	8009050 <HAL_LTDC_IRQHandler+0xbc>
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01e      	beq.n	8009050 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0202 	bic.w	r2, r2, #2
 8009020:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2202      	movs	r2, #2
 8009028:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009030:	f043 0202 	orr.w	r2, r3, #2
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2204      	movs	r2, #4
 800903e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f846 	bl	80090dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d01b      	beq.n	8009092 <HAL_LTDC_IRQHandler+0xfe>
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d016      	beq.n	8009092 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f022 0201 	bic.w	r2, r2, #1
 8009072:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2201      	movs	r2, #1
 800907a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f82f 	bl	80090f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f003 0308 	and.w	r3, r3, #8
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01b      	beq.n	80090d4 <HAL_LTDC_IRQHandler+0x140>
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d016      	beq.n	80090d4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0208 	bic.w	r2, r2, #8
 80090b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2208      	movs	r2, #8
 80090bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f818 	bl	8009104 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80090d4:	bf00      	nop
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009118:	b5b0      	push	{r4, r5, r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_LTDC_ConfigLayer+0x1a>
 800912e:	2302      	movs	r3, #2
 8009130:	e02c      	b.n	800918c <HAL_LTDC_ConfigLayer+0x74>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2202      	movs	r2, #2
 800913e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2134      	movs	r1, #52	@ 0x34
 8009148:	fb01 f303 	mul.w	r3, r1, r3
 800914c:	4413      	add	r3, r2
 800914e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4614      	mov	r4, r2
 8009156:	461d      	mov	r5, r3
 8009158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800915a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800915c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800915e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 f811 	bl	8009194 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2201      	movs	r2, #1
 8009178:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bdb0      	pop	{r4, r5, r7, pc}

08009194 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009194:	b480      	push	{r7}
 8009196:	b089      	sub	sp, #36	@ 0x24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	0c1b      	lsrs	r3, r3, #16
 80091ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091b0:	4413      	add	r3, r2
 80091b2:	041b      	lsls	r3, r3, #16
 80091b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	01db      	lsls	r3, r3, #7
 80091c0:	4413      	add	r3, r2
 80091c2:	3384      	adds	r3, #132	@ 0x84
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	6812      	ldr	r2, [r2, #0]
 80091ca:	4611      	mov	r1, r2
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	01d2      	lsls	r2, r2, #7
 80091d0:	440a      	add	r2, r1
 80091d2:	3284      	adds	r2, #132	@ 0x84
 80091d4:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80091d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	0c1b      	lsrs	r3, r3, #16
 80091e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091ea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80091ec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4619      	mov	r1, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	01db      	lsls	r3, r3, #7
 80091f8:	440b      	add	r3, r1
 80091fa:	3384      	adds	r3, #132	@ 0x84
 80091fc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009202:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009212:	4413      	add	r3, r2
 8009214:	041b      	lsls	r3, r3, #16
 8009216:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	01db      	lsls	r3, r3, #7
 8009222:	4413      	add	r3, r2
 8009224:	3384      	adds	r3, #132	@ 0x84
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	6812      	ldr	r2, [r2, #0]
 800922c:	4611      	mov	r1, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	01d2      	lsls	r2, r2, #7
 8009232:	440a      	add	r2, r1
 8009234:	3284      	adds	r2, #132	@ 0x84
 8009236:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800923a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800924a:	4413      	add	r3, r2
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4619      	mov	r1, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	01db      	lsls	r3, r3, #7
 8009258:	440b      	add	r3, r1
 800925a:	3384      	adds	r3, #132	@ 0x84
 800925c:	4619      	mov	r1, r3
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4313      	orrs	r3, r2
 8009262:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	461a      	mov	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	01db      	lsls	r3, r3, #7
 800926e:	4413      	add	r3, r2
 8009270:	3384      	adds	r3, #132	@ 0x84
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	6812      	ldr	r2, [r2, #0]
 8009278:	4611      	mov	r1, r2
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	01d2      	lsls	r2, r2, #7
 800927e:	440a      	add	r2, r1
 8009280:	3284      	adds	r2, #132	@ 0x84
 8009282:	f023 0307 	bic.w	r3, r3, #7
 8009286:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	461a      	mov	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	01db      	lsls	r3, r3, #7
 8009292:	4413      	add	r3, r2
 8009294:	3384      	adds	r3, #132	@ 0x84
 8009296:	461a      	mov	r2, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80092ae:	041b      	lsls	r3, r3, #16
 80092b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	061b      	lsls	r3, r3, #24
 80092b8:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092c0:	461a      	mov	r2, r3
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	431a      	orrs	r2, r3
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4619      	mov	r1, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	01db      	lsls	r3, r3, #7
 80092d4:	440b      	add	r3, r1
 80092d6:	3384      	adds	r3, #132	@ 0x84
 80092d8:	4619      	mov	r1, r3
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	4313      	orrs	r3, r2
 80092de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	01db      	lsls	r3, r3, #7
 80092ea:	4413      	add	r3, r2
 80092ec:	3384      	adds	r3, #132	@ 0x84
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	6812      	ldr	r2, [r2, #0]
 80092f4:	4611      	mov	r1, r2
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	01d2      	lsls	r2, r2, #7
 80092fa:	440a      	add	r2, r1
 80092fc:	3284      	adds	r2, #132	@ 0x84
 80092fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009302:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	01db      	lsls	r3, r3, #7
 800930e:	4413      	add	r3, r2
 8009310:	3384      	adds	r3, #132	@ 0x84
 8009312:	461a      	mov	r2, r3
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	01db      	lsls	r3, r3, #7
 8009324:	4413      	add	r3, r2
 8009326:	3384      	adds	r3, #132	@ 0x84
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	4611      	mov	r1, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	01d2      	lsls	r2, r2, #7
 8009334:	440a      	add	r2, r1
 8009336:	3284      	adds	r2, #132	@ 0x84
 8009338:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800933c:	f023 0307 	bic.w	r3, r3, #7
 8009340:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	69da      	ldr	r2, [r3, #28]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	68f9      	ldr	r1, [r7, #12]
 800934c:	6809      	ldr	r1, [r1, #0]
 800934e:	4608      	mov	r0, r1
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	01c9      	lsls	r1, r1, #7
 8009354:	4401      	add	r1, r0
 8009356:	3184      	adds	r1, #132	@ 0x84
 8009358:	4313      	orrs	r3, r2
 800935a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	01db      	lsls	r3, r3, #7
 8009366:	4413      	add	r3, r2
 8009368:	3384      	adds	r3, #132	@ 0x84
 800936a:	461a      	mov	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009370:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d102      	bne.n	8009380 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800937a:	2304      	movs	r3, #4
 800937c:	61fb      	str	r3, [r7, #28]
 800937e:	e01b      	b.n	80093b8 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d102      	bne.n	800938e <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8009388:	2303      	movs	r3, #3
 800938a:	61fb      	str	r3, [r7, #28]
 800938c:	e014      	b.n	80093b8 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b04      	cmp	r3, #4
 8009394:	d00b      	beq.n	80093ae <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800939a:	2b02      	cmp	r3, #2
 800939c:	d007      	beq.n	80093ae <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d003      	beq.n	80093ae <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80093aa:	2b07      	cmp	r3, #7
 80093ac:	d102      	bne.n	80093b4 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 80093ae:	2302      	movs	r3, #2
 80093b0:	61fb      	str	r3, [r7, #28]
 80093b2:	e001      	b.n	80093b8 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 80093b4:	2301      	movs	r3, #1
 80093b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	01db      	lsls	r3, r3, #7
 80093c2:	4413      	add	r3, r2
 80093c4:	3384      	adds	r3, #132	@ 0x84
 80093c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	6812      	ldr	r2, [r2, #0]
 80093cc:	4611      	mov	r1, r2
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	01d2      	lsls	r2, r2, #7
 80093d2:	440a      	add	r2, r1
 80093d4:	3284      	adds	r2, #132	@ 0x84
 80093d6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80093da:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e0:	69fa      	ldr	r2, [r7, #28]
 80093e2:	fb02 f303 	mul.w	r3, r2, r3
 80093e6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	6859      	ldr	r1, [r3, #4]
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	1acb      	subs	r3, r1, r3
 80093f2:	69f9      	ldr	r1, [r7, #28]
 80093f4:	fb01 f303 	mul.w	r3, r1, r3
 80093f8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80093fa:	68f9      	ldr	r1, [r7, #12]
 80093fc:	6809      	ldr	r1, [r1, #0]
 80093fe:	4608      	mov	r0, r1
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	01c9      	lsls	r1, r1, #7
 8009404:	4401      	add	r1, r0
 8009406:	3184      	adds	r1, #132	@ 0x84
 8009408:	4313      	orrs	r3, r2
 800940a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	01db      	lsls	r3, r3, #7
 8009416:	4413      	add	r3, r2
 8009418:	3384      	adds	r3, #132	@ 0x84
 800941a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	6812      	ldr	r2, [r2, #0]
 8009420:	4611      	mov	r1, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	01d2      	lsls	r2, r2, #7
 8009426:	440a      	add	r2, r1
 8009428:	3284      	adds	r2, #132	@ 0x84
 800942a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	01db      	lsls	r3, r3, #7
 800943e:	4413      	add	r3, r2
 8009440:	3384      	adds	r3, #132	@ 0x84
 8009442:	461a      	mov	r2, r3
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009448:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	01db      	lsls	r3, r3, #7
 8009454:	4413      	add	r3, r2
 8009456:	3384      	adds	r3, #132	@ 0x84
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	6812      	ldr	r2, [r2, #0]
 800945e:	4611      	mov	r1, r2
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	01d2      	lsls	r2, r2, #7
 8009464:	440a      	add	r2, r1
 8009466:	3284      	adds	r2, #132	@ 0x84
 8009468:	f043 0301 	orr.w	r3, r3, #1
 800946c:	6013      	str	r3, [r2, #0]
}
 800946e:	bf00      	nop
 8009470:	3724      	adds	r7, #36	@ 0x24
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b086      	sub	sp, #24
 800947e:	af02      	add	r7, sp, #8
 8009480:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e0fe      	b.n	800968a <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7f8 ffef 	bl	8002484 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2203      	movs	r2, #3
 80094aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f007 ff57 	bl	8011366 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	7c1a      	ldrb	r2, [r3, #16]
 80094c0:	f88d 2000 	strb.w	r2, [sp]
 80094c4:	3304      	adds	r3, #4
 80094c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094c8:	f007 ff1e 	bl	8011308 <USB_CoreInit>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d005      	beq.n	80094de <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2202      	movs	r2, #2
 80094d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e0d5      	b.n	800968a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2100      	movs	r1, #0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f007 ff4f 	bl	8011388 <USB_SetCurrentMode>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0c6      	b.n	800968a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094fc:	2300      	movs	r3, #0
 80094fe:	73fb      	strb	r3, [r7, #15]
 8009500:	e04a      	b.n	8009598 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009502:	7bfa      	ldrb	r2, [r7, #15]
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4613      	mov	r3, r2
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	3315      	adds	r3, #21
 8009512:	2201      	movs	r2, #1
 8009514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009516:	7bfa      	ldrb	r2, [r7, #15]
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	4613      	mov	r3, r2
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	440b      	add	r3, r1
 8009524:	3314      	adds	r3, #20
 8009526:	7bfa      	ldrb	r2, [r7, #15]
 8009528:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800952a:	7bfa      	ldrb	r2, [r7, #15]
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	b298      	uxth	r0, r3
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	4613      	mov	r3, r2
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	440b      	add	r3, r1
 800953c:	332e      	adds	r3, #46	@ 0x2e
 800953e:	4602      	mov	r2, r0
 8009540:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009542:	7bfa      	ldrb	r2, [r7, #15]
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	4613      	mov	r3, r2
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	4413      	add	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	440b      	add	r3, r1
 8009550:	3318      	adds	r3, #24
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009556:	7bfa      	ldrb	r2, [r7, #15]
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	4613      	mov	r3, r2
 800955c:	00db      	lsls	r3, r3, #3
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	331c      	adds	r3, #28
 8009566:	2200      	movs	r2, #0
 8009568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800956a:	7bfa      	ldrb	r2, [r7, #15]
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	440b      	add	r3, r1
 8009578:	3320      	adds	r3, #32
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800957e:	7bfa      	ldrb	r2, [r7, #15]
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	4613      	mov	r3, r2
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	3324      	adds	r3, #36	@ 0x24
 800958e:	2200      	movs	r2, #0
 8009590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	3301      	adds	r3, #1
 8009596:	73fb      	strb	r3, [r7, #15]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	791b      	ldrb	r3, [r3, #4]
 800959c:	7bfa      	ldrb	r2, [r7, #15]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d3af      	bcc.n	8009502 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095a2:	2300      	movs	r3, #0
 80095a4:	73fb      	strb	r3, [r7, #15]
 80095a6:	e044      	b.n	8009632 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80095a8:	7bfa      	ldrb	r2, [r7, #15]
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	4613      	mov	r3, r2
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	440b      	add	r3, r1
 80095b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80095ba:	2200      	movs	r2, #0
 80095bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80095be:	7bfa      	ldrb	r2, [r7, #15]
 80095c0:	6879      	ldr	r1, [r7, #4]
 80095c2:	4613      	mov	r3, r2
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	4413      	add	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	440b      	add	r3, r1
 80095cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80095d0:	7bfa      	ldrb	r2, [r7, #15]
 80095d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095d4:	7bfa      	ldrb	r2, [r7, #15]
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80095e6:	2200      	movs	r2, #0
 80095e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095ea:	7bfa      	ldrb	r2, [r7, #15]
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	4613      	mov	r3, r2
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	4413      	add	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	440b      	add	r3, r1
 80095f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80095fc:	2200      	movs	r2, #0
 80095fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009600:	7bfa      	ldrb	r2, [r7, #15]
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	4613      	mov	r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009616:	7bfa      	ldrb	r2, [r7, #15]
 8009618:	6879      	ldr	r1, [r7, #4]
 800961a:	4613      	mov	r3, r2
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	440b      	add	r3, r1
 8009624:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	3301      	adds	r3, #1
 8009630:	73fb      	strb	r3, [r7, #15]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	791b      	ldrb	r3, [r3, #4]
 8009636:	7bfa      	ldrb	r2, [r7, #15]
 8009638:	429a      	cmp	r2, r3
 800963a:	d3b5      	bcc.n	80095a8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	7c1a      	ldrb	r2, [r3, #16]
 8009644:	f88d 2000 	strb.w	r2, [sp]
 8009648:	3304      	adds	r3, #4
 800964a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800964c:	f007 fee8 	bl	8011420 <USB_DevInit>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2202      	movs	r2, #2
 800965a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e013      	b.n	800968a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7b1b      	ldrb	r3, [r3, #12]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d102      	bne.n	800967e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f80a 	bl	8009692 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f008 f8b5 	bl	80117f2 <USB_DevDisconnect>

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009692:	b480      	push	{r7}
 8009694:	b085      	sub	sp, #20
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096c4:	f043 0303 	orr.w	r3, r3, #3
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
	...

080096dc <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80096e0:	4b05      	ldr	r3, [pc, #20]	@ (80096f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80096e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e4:	4a04      	ldr	r2, [pc, #16]	@ (80096f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80096e6:	f043 0301 	orr.w	r3, r3, #1
 80096ea:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80096ec:	bf00      	nop
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	46020800 	.word	0x46020800

080096fc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009704:	4b39      	ldr	r3, [pc, #228]	@ (80097ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800970c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d10b      	bne.n	800972e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800971c:	d905      	bls.n	800972a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800971e:	4b33      	ldr	r3, [pc, #204]	@ (80097ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	4a32      	ldr	r2, [pc, #200]	@ (80097ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009728:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	e057      	b.n	80097de <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009734:	d90a      	bls.n	800974c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009736:	4b2d      	ldr	r3, [pc, #180]	@ (80097ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4313      	orrs	r3, r2
 8009742:	4a2a      	ldr	r2, [pc, #168]	@ (80097ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009748:	60d3      	str	r3, [r2, #12]
 800974a:	e007      	b.n	800975c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800974c:	4b27      	ldr	r3, [pc, #156]	@ (80097ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009754:	4925      	ldr	r1, [pc, #148]	@ (80097ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4313      	orrs	r3, r2
 800975a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800975c:	4b24      	ldr	r3, [pc, #144]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a24      	ldr	r2, [pc, #144]	@ (80097f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	099b      	lsrs	r3, r3, #6
 8009768:	2232      	movs	r2, #50	@ 0x32
 800976a:	fb02 f303 	mul.w	r3, r2, r3
 800976e:	4a21      	ldr	r2, [pc, #132]	@ (80097f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009770:	fba2 2303 	umull	r2, r3, r2, r3
 8009774:	099b      	lsrs	r3, r3, #6
 8009776:	3301      	adds	r3, #1
 8009778:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800977a:	e002      	b.n	8009782 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	3b01      	subs	r3, #1
 8009780:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009782:	4b1a      	ldr	r3, [pc, #104]	@ (80097ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d102      	bne.n	8009794 <HAL_PWREx_ControlVoltageScaling+0x98>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1f3      	bne.n	800977c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d01b      	beq.n	80097d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800979a:	4b15      	ldr	r3, [pc, #84]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a15      	ldr	r2, [pc, #84]	@ (80097f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80097a0:	fba2 2303 	umull	r2, r3, r2, r3
 80097a4:	099b      	lsrs	r3, r3, #6
 80097a6:	2232      	movs	r2, #50	@ 0x32
 80097a8:	fb02 f303 	mul.w	r3, r2, r3
 80097ac:	4a11      	ldr	r2, [pc, #68]	@ (80097f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80097ae:	fba2 2303 	umull	r2, r3, r2, r3
 80097b2:	099b      	lsrs	r3, r3, #6
 80097b4:	3301      	adds	r3, #1
 80097b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80097b8:	e002      	b.n	80097c0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3b01      	subs	r3, #1
 80097be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80097c0:	4b0a      	ldr	r3, [pc, #40]	@ (80097ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80097c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1f3      	bne.n	80097ba <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e000      	b.n	80097de <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	46020800 	.word	0x46020800
 80097f0:	20000018 	.word	0x20000018
 80097f4:	10624dd3 	.word	0x10624dd3

080097f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80097fc:	4b04      	ldr	r3, [pc, #16]	@ (8009810 <HAL_PWREx_GetVoltageRange+0x18>)
 80097fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009804:	4618      	mov	r0, r3
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	46020800 	.word	0x46020800

08009814 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800981c:	4b22      	ldr	r3, [pc, #136]	@ (80098a8 <HAL_PWREx_ConfigSupply+0x94>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a22      	ldr	r2, [pc, #136]	@ (80098ac <HAL_PWREx_ConfigSupply+0x98>)
 8009822:	fba2 2303 	umull	r2, r3, r2, r3
 8009826:	099b      	lsrs	r3, r3, #6
 8009828:	2232      	movs	r2, #50	@ 0x32
 800982a:	fb02 f303 	mul.w	r3, r2, r3
 800982e:	4a1f      	ldr	r2, [pc, #124]	@ (80098ac <HAL_PWREx_ConfigSupply+0x98>)
 8009830:	fba2 2303 	umull	r2, r3, r2, r3
 8009834:	099b      	lsrs	r3, r3, #6
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d113      	bne.n	8009868 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009840:	4b1b      	ldr	r3, [pc, #108]	@ (80098b0 <HAL_PWREx_ConfigSupply+0x9c>)
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	4a1a      	ldr	r2, [pc, #104]	@ (80098b0 <HAL_PWREx_ConfigSupply+0x9c>)
 8009846:	f023 0302 	bic.w	r3, r3, #2
 800984a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800984c:	e002      	b.n	8009854 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3b01      	subs	r3, #1
 8009852:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009854:	4b16      	ldr	r3, [pc, #88]	@ (80098b0 <HAL_PWREx_ConfigSupply+0x9c>)
 8009856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b02      	cmp	r3, #2
 800985e:	d116      	bne.n	800988e <HAL_PWREx_ConfigSupply+0x7a>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1f3      	bne.n	800984e <HAL_PWREx_ConfigSupply+0x3a>
 8009866:	e012      	b.n	800988e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009868:	4b11      	ldr	r3, [pc, #68]	@ (80098b0 <HAL_PWREx_ConfigSupply+0x9c>)
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	4a10      	ldr	r2, [pc, #64]	@ (80098b0 <HAL_PWREx_ConfigSupply+0x9c>)
 800986e:	f043 0302 	orr.w	r3, r3, #2
 8009872:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009874:	e002      	b.n	800987c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3b01      	subs	r3, #1
 800987a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800987c:	4b0c      	ldr	r3, [pc, #48]	@ (80098b0 <HAL_PWREx_ConfigSupply+0x9c>)
 800987e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <HAL_PWREx_ConfigSupply+0x7a>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1f3      	bne.n	8009876 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e000      	b.n	800989a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	20000018 	.word	0x20000018
 80098ac:	10624dd3 	.word	0x10624dd3
 80098b0:	46020800 	.word	0x46020800

080098b4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80098b4:	b480      	push	{r7}
 80098b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80098b8:	4b05      	ldr	r3, [pc, #20]	@ (80098d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	4a04      	ldr	r2, [pc, #16]	@ (80098d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c2:	6113      	str	r3, [r2, #16]
}
 80098c4:	bf00      	nop
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	46020800 	.word	0x46020800

080098d4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80098d4:	b480      	push	{r7}
 80098d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80098d8:	4b05      	ldr	r3, [pc, #20]	@ (80098f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	4a04      	ldr	r2, [pc, #16]	@ (80098f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80098de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80098e2:	6113      	str	r3, [r2, #16]
}
 80098e4:	bf00      	nop
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	46020800 	.word	0x46020800

080098f4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80098f4:	b480      	push	{r7}
 80098f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80098f8:	4b05      	ldr	r3, [pc, #20]	@ (8009910 <HAL_PWREx_EnableVddA+0x1c>)
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	4a04      	ldr	r2, [pc, #16]	@ (8009910 <HAL_PWREx_EnableVddA+0x1c>)
 80098fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009902:	6113      	str	r3, [r2, #16]
}
 8009904:	bf00      	nop
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	46020800 	.word	0x46020800

08009914 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800991a:	f7ff ff6d 	bl	80097f8 <HAL_PWREx_GetVoltageRange>
 800991e:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009926:	d003      	beq.n	8009930 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800992e:	d107      	bne.n	8009940 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009930:	4b06      	ldr	r3, [pc, #24]	@ (800994c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	4a05      	ldr	r2, [pc, #20]	@ (800994c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009936:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800993a:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	e000      	b.n	8009942 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
}
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	46020800 	.word	0x46020800

08009950 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08e      	sub	sp, #56	@ 0x38
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009958:	2300      	movs	r3, #0
 800995a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d102      	bne.n	800996a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f000 bec8 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800996a:	4b99      	ldr	r3, [pc, #612]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	f003 030c 	and.w	r3, r3, #12
 8009972:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009974:	4b96      	ldr	r3, [pc, #600]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009978:	f003 0303 	and.w	r3, r3, #3
 800997c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0310 	and.w	r3, r3, #16
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 816c 	beq.w	8009c64 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	2b00      	cmp	r3, #0
 8009990:	d007      	beq.n	80099a2 <HAL_RCC_OscConfig+0x52>
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	2b0c      	cmp	r3, #12
 8009996:	f040 80de 	bne.w	8009b56 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800999a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800999c:	2b01      	cmp	r3, #1
 800999e:	f040 80da 	bne.w	8009b56 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d102      	bne.n	80099b0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	f000 bea5 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099b4:	4b86      	ldr	r3, [pc, #536]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d004      	beq.n	80099ca <HAL_RCC_OscConfig+0x7a>
 80099c0:	4b83      	ldr	r3, [pc, #524]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80099c8:	e005      	b.n	80099d6 <HAL_RCC_OscConfig+0x86>
 80099ca:	4b81      	ldr	r3, [pc, #516]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099d0:	041b      	lsls	r3, r3, #16
 80099d2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d255      	bcs.n	8009a86 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 f9d9 	bl	800ad9c <RCC_SetFlashLatencyFromMSIRange>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	f000 be82 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80099f6:	4b76      	ldr	r3, [pc, #472]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	4a75      	ldr	r2, [pc, #468]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 80099fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a00:	6093      	str	r3, [r2, #8]
 8009a02:	4b73      	ldr	r3, [pc, #460]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0e:	4970      	ldr	r1, [pc, #448]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a18:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009a1c:	d309      	bcc.n	8009a32 <HAL_RCC_OscConfig+0xe2>
 8009a1e:	4b6c      	ldr	r3, [pc, #432]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f023 021f 	bic.w	r2, r3, #31
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	4969      	ldr	r1, [pc, #420]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60cb      	str	r3, [r1, #12]
 8009a30:	e07e      	b.n	8009b30 <HAL_RCC_OscConfig+0x1e0>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	da0a      	bge.n	8009a50 <HAL_RCC_OscConfig+0x100>
 8009a3a:	4b65      	ldr	r3, [pc, #404]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	015b      	lsls	r3, r3, #5
 8009a48:	4961      	ldr	r1, [pc, #388]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60cb      	str	r3, [r1, #12]
 8009a4e:	e06f      	b.n	8009b30 <HAL_RCC_OscConfig+0x1e0>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a58:	d30a      	bcc.n	8009a70 <HAL_RCC_OscConfig+0x120>
 8009a5a:	4b5d      	ldr	r3, [pc, #372]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	029b      	lsls	r3, r3, #10
 8009a68:	4959      	ldr	r1, [pc, #356]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60cb      	str	r3, [r1, #12]
 8009a6e:	e05f      	b.n	8009b30 <HAL_RCC_OscConfig+0x1e0>
 8009a70:	4b57      	ldr	r3, [pc, #348]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	03db      	lsls	r3, r3, #15
 8009a7e:	4954      	ldr	r1, [pc, #336]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60cb      	str	r3, [r1, #12]
 8009a84:	e054      	b.n	8009b30 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009a86:	4b52      	ldr	r3, [pc, #328]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	4a51      	ldr	r2, [pc, #324]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a90:	6093      	str	r3, [r2, #8]
 8009a92:	4b4f      	ldr	r3, [pc, #316]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9e:	494c      	ldr	r1, [pc, #304]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009aac:	d309      	bcc.n	8009ac2 <HAL_RCC_OscConfig+0x172>
 8009aae:	4b48      	ldr	r3, [pc, #288]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f023 021f 	bic.w	r2, r3, #31
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	4945      	ldr	r1, [pc, #276]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60cb      	str	r3, [r1, #12]
 8009ac0:	e028      	b.n	8009b14 <HAL_RCC_OscConfig+0x1c4>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	da0a      	bge.n	8009ae0 <HAL_RCC_OscConfig+0x190>
 8009aca:	4b41      	ldr	r3, [pc, #260]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	015b      	lsls	r3, r3, #5
 8009ad8:	493d      	ldr	r1, [pc, #244]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60cb      	str	r3, [r1, #12]
 8009ade:	e019      	b.n	8009b14 <HAL_RCC_OscConfig+0x1c4>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ae8:	d30a      	bcc.n	8009b00 <HAL_RCC_OscConfig+0x1b0>
 8009aea:	4b39      	ldr	r3, [pc, #228]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	029b      	lsls	r3, r3, #10
 8009af8:	4935      	ldr	r1, [pc, #212]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60cb      	str	r3, [r1, #12]
 8009afe:	e009      	b.n	8009b14 <HAL_RCC_OscConfig+0x1c4>
 8009b00:	4b33      	ldr	r3, [pc, #204]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	03db      	lsls	r3, r3, #15
 8009b0e:	4930      	ldr	r1, [pc, #192]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10a      	bne.n	8009b30 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f001 f93c 	bl	800ad9c <RCC_SetFlashLatencyFromMSIRange>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	f000 bde5 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009b30:	f001 f8de 	bl	800acf0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009b34:	4b27      	ldr	r3, [pc, #156]	@ (8009bd4 <HAL_RCC_OscConfig+0x284>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7f9 f827 	bl	8002b8c <HAL_InitTick>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 808a 	beq.w	8009c62 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b52:	f000 bdd2 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d066      	beq.n	8009c2c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a1b      	ldr	r2, [pc, #108]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b64:	f043 0301 	orr.w	r3, r3, #1
 8009b68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009b6a:	f7f9 f899 	bl	8002ca0 <HAL_GetTick>
 8009b6e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b70:	e009      	b.n	8009b86 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b72:	f7f9 f895 	bl	8002ca0 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d902      	bls.n	8009b86 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009b80:	2303      	movs	r3, #3
 8009b82:	f000 bdba 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b86:	4b12      	ldr	r3, [pc, #72]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0ef      	beq.n	8009b72 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009b92:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	4a0e      	ldr	r2, [pc, #56]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009b98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b9c:	6093      	str	r3, [r2, #8]
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009baa:	4909      	ldr	r1, [pc, #36]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009bb8:	d30e      	bcc.n	8009bd8 <HAL_RCC_OscConfig+0x288>
 8009bba:	4b05      	ldr	r3, [pc, #20]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f023 021f 	bic.w	r2, r3, #31
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	4902      	ldr	r1, [pc, #8]	@ (8009bd0 <HAL_RCC_OscConfig+0x280>)
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	60cb      	str	r3, [r1, #12]
 8009bcc:	e04a      	b.n	8009c64 <HAL_RCC_OscConfig+0x314>
 8009bce:	bf00      	nop
 8009bd0:	46020c00 	.word	0x46020c00
 8009bd4:	2000001c 	.word	0x2000001c
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	da0a      	bge.n	8009bf6 <HAL_RCC_OscConfig+0x2a6>
 8009be0:	4b98      	ldr	r3, [pc, #608]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	015b      	lsls	r3, r3, #5
 8009bee:	4995      	ldr	r1, [pc, #596]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	60cb      	str	r3, [r1, #12]
 8009bf4:	e036      	b.n	8009c64 <HAL_RCC_OscConfig+0x314>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bfe:	d30a      	bcc.n	8009c16 <HAL_RCC_OscConfig+0x2c6>
 8009c00:	4b90      	ldr	r3, [pc, #576]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	029b      	lsls	r3, r3, #10
 8009c0e:	498d      	ldr	r1, [pc, #564]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009c10:	4313      	orrs	r3, r2
 8009c12:	60cb      	str	r3, [r1, #12]
 8009c14:	e026      	b.n	8009c64 <HAL_RCC_OscConfig+0x314>
 8009c16:	4b8b      	ldr	r3, [pc, #556]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	03db      	lsls	r3, r3, #15
 8009c24:	4987      	ldr	r1, [pc, #540]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60cb      	str	r3, [r1, #12]
 8009c2a:	e01b      	b.n	8009c64 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009c2c:	4b85      	ldr	r3, [pc, #532]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a84      	ldr	r2, [pc, #528]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009c32:	f023 0301 	bic.w	r3, r3, #1
 8009c36:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009c38:	f7f9 f832 	bl	8002ca0 <HAL_GetTick>
 8009c3c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009c3e:	e009      	b.n	8009c54 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c40:	f7f9 f82e 	bl	8002ca0 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d902      	bls.n	8009c54 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	f000 bd53 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009c54:	4b7b      	ldr	r3, [pc, #492]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1ef      	bne.n	8009c40 <HAL_RCC_OscConfig+0x2f0>
 8009c60:	e000      	b.n	8009c64 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009c62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 808b 	beq.w	8009d88 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	2b08      	cmp	r3, #8
 8009c76:	d005      	beq.n	8009c84 <HAL_RCC_OscConfig+0x334>
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7a:	2b0c      	cmp	r3, #12
 8009c7c:	d109      	bne.n	8009c92 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d106      	bne.n	8009c92 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d17d      	bne.n	8009d88 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f000 bd34 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c9a:	d106      	bne.n	8009caa <HAL_RCC_OscConfig+0x35a>
 8009c9c:	4b69      	ldr	r3, [pc, #420]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a68      	ldr	r2, [pc, #416]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	e041      	b.n	8009d2e <HAL_RCC_OscConfig+0x3de>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009cb2:	d112      	bne.n	8009cda <HAL_RCC_OscConfig+0x38a>
 8009cb4:	4b63      	ldr	r3, [pc, #396]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a62      	ldr	r2, [pc, #392]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009cbe:	6013      	str	r3, [r2, #0]
 8009cc0:	4b60      	ldr	r3, [pc, #384]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a5f      	ldr	r2, [pc, #380]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cc6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	4b5d      	ldr	r3, [pc, #372]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a5c      	ldr	r2, [pc, #368]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	e029      	b.n	8009d2e <HAL_RCC_OscConfig+0x3de>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009ce2:	d112      	bne.n	8009d0a <HAL_RCC_OscConfig+0x3ba>
 8009ce4:	4b57      	ldr	r3, [pc, #348]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a56      	ldr	r2, [pc, #344]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	4b54      	ldr	r3, [pc, #336]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a53      	ldr	r2, [pc, #332]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	4b51      	ldr	r3, [pc, #324]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a50      	ldr	r2, [pc, #320]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	e011      	b.n	8009d2e <HAL_RCC_OscConfig+0x3de>
 8009d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a4d      	ldr	r2, [pc, #308]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	4b4b      	ldr	r3, [pc, #300]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a4a      	ldr	r2, [pc, #296]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	4b48      	ldr	r3, [pc, #288]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a47      	ldr	r2, [pc, #284]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009d28:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d014      	beq.n	8009d60 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009d36:	f7f8 ffb3 	bl	8002ca0 <HAL_GetTick>
 8009d3a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d3c:	e009      	b.n	8009d52 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d3e:	f7f8 ffaf 	bl	8002ca0 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b64      	cmp	r3, #100	@ 0x64
 8009d4a:	d902      	bls.n	8009d52 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	f000 bcd4 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d52:	4b3c      	ldr	r3, [pc, #240]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0ef      	beq.n	8009d3e <HAL_RCC_OscConfig+0x3ee>
 8009d5e:	e013      	b.n	8009d88 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009d60:	f7f8 ff9e 	bl	8002ca0 <HAL_GetTick>
 8009d64:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d66:	e009      	b.n	8009d7c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d68:	f7f8 ff9a 	bl	8002ca0 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	2b64      	cmp	r3, #100	@ 0x64
 8009d74:	d902      	bls.n	8009d7c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	f000 bcbf 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d7c:	4b31      	ldr	r3, [pc, #196]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1ef      	bne.n	8009d68 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0302 	and.w	r3, r3, #2
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d05f      	beq.n	8009e54 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d005      	beq.n	8009da6 <HAL_RCC_OscConfig+0x456>
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9c:	2b0c      	cmp	r3, #12
 8009d9e:	d114      	bne.n	8009dca <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d111      	bne.n	8009dca <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	f000 bca3 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009db4:	4b23      	ldr	r3, [pc, #140]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	041b      	lsls	r3, r3, #16
 8009dc2:	4920      	ldr	r1, [pc, #128]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009dc8:	e044      	b.n	8009e54 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d024      	beq.n	8009e1c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ddc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009dde:	f7f8 ff5f 	bl	8002ca0 <HAL_GetTick>
 8009de2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009de4:	e009      	b.n	8009dfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009de6:	f7f8 ff5b 	bl	8002ca0 <HAL_GetTick>
 8009dea:	4602      	mov	r2, r0
 8009dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d902      	bls.n	8009dfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009df4:	2303      	movs	r3, #3
 8009df6:	f000 bc80 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009dfa:	4b12      	ldr	r3, [pc, #72]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0ef      	beq.n	8009de6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009e06:	4b0f      	ldr	r3, [pc, #60]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	490b      	ldr	r1, [pc, #44]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	610b      	str	r3, [r1, #16]
 8009e1a:	e01b      	b.n	8009e54 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009e1c:	4b09      	ldr	r3, [pc, #36]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a08      	ldr	r2, [pc, #32]	@ (8009e44 <HAL_RCC_OscConfig+0x4f4>)
 8009e22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e26:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e28:	f7f8 ff3a 	bl	8002ca0 <HAL_GetTick>
 8009e2c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e2e:	e00b      	b.n	8009e48 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e30:	f7f8 ff36 	bl	8002ca0 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d904      	bls.n	8009e48 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	f000 bc5b 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
 8009e44:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e48:	4baf      	ldr	r3, [pc, #700]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1ed      	bne.n	8009e30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0308 	and.w	r3, r3, #8
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 80c8 	beq.w	8009ff2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009e62:	2300      	movs	r3, #0
 8009e64:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e68:	4ba7      	ldr	r3, [pc, #668]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e6e:	f003 0304 	and.w	r3, r3, #4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d111      	bne.n	8009e9a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e76:	4ba4      	ldr	r3, [pc, #656]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e7c:	4aa2      	ldr	r2, [pc, #648]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009e7e:	f043 0304 	orr.w	r3, r3, #4
 8009e82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009e86:	4ba0      	ldr	r3, [pc, #640]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	617b      	str	r3, [r7, #20]
 8009e92:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e9a:	4b9c      	ldr	r3, [pc, #624]	@ (800a10c <HAL_RCC_OscConfig+0x7bc>)
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d119      	bne.n	8009eda <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009ea6:	4b99      	ldr	r3, [pc, #612]	@ (800a10c <HAL_RCC_OscConfig+0x7bc>)
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eaa:	4a98      	ldr	r2, [pc, #608]	@ (800a10c <HAL_RCC_OscConfig+0x7bc>)
 8009eac:	f043 0301 	orr.w	r3, r3, #1
 8009eb0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009eb2:	f7f8 fef5 	bl	8002ca0 <HAL_GetTick>
 8009eb6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009eb8:	e009      	b.n	8009ece <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009eba:	f7f8 fef1 	bl	8002ca0 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d902      	bls.n	8009ece <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	f000 bc16 	b.w	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ece:	4b8f      	ldr	r3, [pc, #572]	@ (800a10c <HAL_RCC_OscConfig+0x7bc>)
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0ef      	beq.n	8009eba <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d05f      	beq.n	8009fa2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009ee2:	4b89      	ldr	r3, [pc, #548]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ee8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d037      	beq.n	8009f68 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d006      	beq.n	8009f10 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e3f4      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01b      	beq.n	8009f52 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009f1a:	4b7b      	ldr	r3, [pc, #492]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f20:	4a79      	ldr	r2, [pc, #484]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009f22:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009f26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009f2a:	f7f8 feb9 	bl	8002ca0 <HAL_GetTick>
 8009f2e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f30:	e008      	b.n	8009f44 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f32:	f7f8 feb5 	bl	8002ca0 <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	2b05      	cmp	r3, #5
 8009f3e:	d901      	bls.n	8009f44 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e3da      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f44:	4b70      	ldr	r3, [pc, #448]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1ef      	bne.n	8009f32 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009f52:	4b6d      	ldr	r3, [pc, #436]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f58:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	4969      	ldr	r1, [pc, #420]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009f68:	4b67      	ldr	r3, [pc, #412]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f6e:	4a66      	ldr	r2, [pc, #408]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009f70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009f78:	f7f8 fe92 	bl	8002ca0 <HAL_GetTick>
 8009f7c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f7e:	e008      	b.n	8009f92 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f80:	f7f8 fe8e 	bl	8002ca0 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	d901      	bls.n	8009f92 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e3b3      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f92:	4b5d      	ldr	r3, [pc, #372]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0ef      	beq.n	8009f80 <HAL_RCC_OscConfig+0x630>
 8009fa0:	e01b      	b.n	8009fda <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009fa2:	4b59      	ldr	r3, [pc, #356]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fa8:	4a57      	ldr	r2, [pc, #348]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009faa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009fae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009fb2:	f7f8 fe75 	bl	8002ca0 <HAL_GetTick>
 8009fb6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009fb8:	e008      	b.n	8009fcc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fba:	f7f8 fe71 	bl	8002ca0 <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	2b05      	cmp	r3, #5
 8009fc6:	d901      	bls.n	8009fcc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e396      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009fcc:	4b4e      	ldr	r3, [pc, #312]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1ef      	bne.n	8009fba <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009fda:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d107      	bne.n	8009ff2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fe2:	4b49      	ldr	r3, [pc, #292]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fe8:	4a47      	ldr	r2, [pc, #284]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 8009fea:	f023 0304 	bic.w	r3, r3, #4
 8009fee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 0304 	and.w	r3, r3, #4
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 8111 	beq.w	800a222 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a000:	2300      	movs	r3, #0
 800a002:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a006:	4b40      	ldr	r3, [pc, #256]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a00c:	f003 0304 	and.w	r3, r3, #4
 800a010:	2b00      	cmp	r3, #0
 800a012:	d111      	bne.n	800a038 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a014:	4b3c      	ldr	r3, [pc, #240]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a01a:	4a3b      	ldr	r2, [pc, #236]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a01c:	f043 0304 	orr.w	r3, r3, #4
 800a020:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a024:	4b38      	ldr	r3, [pc, #224]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	613b      	str	r3, [r7, #16]
 800a030:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a032:	2301      	movs	r3, #1
 800a034:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a038:	4b34      	ldr	r3, [pc, #208]	@ (800a10c <HAL_RCC_OscConfig+0x7bc>)
 800a03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d118      	bne.n	800a076 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a044:	4b31      	ldr	r3, [pc, #196]	@ (800a10c <HAL_RCC_OscConfig+0x7bc>)
 800a046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a048:	4a30      	ldr	r2, [pc, #192]	@ (800a10c <HAL_RCC_OscConfig+0x7bc>)
 800a04a:	f043 0301 	orr.w	r3, r3, #1
 800a04e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a050:	f7f8 fe26 	bl	8002ca0 <HAL_GetTick>
 800a054:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a056:	e008      	b.n	800a06a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a058:	f7f8 fe22 	bl	8002ca0 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	2b02      	cmp	r3, #2
 800a064:	d901      	bls.n	800a06a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e347      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a06a:	4b28      	ldr	r3, [pc, #160]	@ (800a10c <HAL_RCC_OscConfig+0x7bc>)
 800a06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0f0      	beq.n	800a058 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d01f      	beq.n	800a0c2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f003 0304 	and.w	r3, r3, #4
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d010      	beq.n	800a0b0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a08e:	4b1e      	ldr	r3, [pc, #120]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a094:	4a1c      	ldr	r2, [pc, #112]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a096:	f043 0304 	orr.w	r3, r3, #4
 800a09a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a09e:	4b1a      	ldr	r3, [pc, #104]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a0a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0a4:	4a18      	ldr	r2, [pc, #96]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a0a6:	f043 0301 	orr.w	r3, r3, #1
 800a0aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a0ae:	e018      	b.n	800a0e2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0b0:	4b15      	ldr	r3, [pc, #84]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a0b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0b6:	4a14      	ldr	r2, [pc, #80]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a0b8:	f043 0301 	orr.w	r3, r3, #1
 800a0bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a0c0:	e00f      	b.n	800a0e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0c2:	4b11      	ldr	r3, [pc, #68]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a0c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0c8:	4a0f      	ldr	r2, [pc, #60]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a0ca:	f023 0301 	bic.w	r3, r3, #1
 800a0ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a0d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0d8:	4a0b      	ldr	r2, [pc, #44]	@ (800a108 <HAL_RCC_OscConfig+0x7b8>)
 800a0da:	f023 0304 	bic.w	r3, r3, #4
 800a0de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d057      	beq.n	800a19a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a0ea:	f7f8 fdd9 	bl	8002ca0 <HAL_GetTick>
 800a0ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0f0:	e00e      	b.n	800a110 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0f2:	f7f8 fdd5 	bl	8002ca0 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a100:	4293      	cmp	r3, r2
 800a102:	d905      	bls.n	800a110 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e2f8      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
 800a108:	46020c00 	.word	0x46020c00
 800a10c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a110:	4b9c      	ldr	r3, [pc, #624]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0e9      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a126:	2b00      	cmp	r3, #0
 800a128:	d01b      	beq.n	800a162 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a12a:	4b96      	ldr	r3, [pc, #600]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a12c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a130:	4a94      	ldr	r2, [pc, #592]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a136:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a13a:	e00a      	b.n	800a152 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a13c:	f7f8 fdb0 	bl	8002ca0 <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d901      	bls.n	800a152 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e2d3      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a152:	4b8c      	ldr	r3, [pc, #560]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0ed      	beq.n	800a13c <HAL_RCC_OscConfig+0x7ec>
 800a160:	e053      	b.n	800a20a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a162:	4b88      	ldr	r3, [pc, #544]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a168:	4a86      	ldr	r2, [pc, #536]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a16a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a16e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a172:	e00a      	b.n	800a18a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a174:	f7f8 fd94 	bl	8002ca0 <HAL_GetTick>
 800a178:	4602      	mov	r2, r0
 800a17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a182:	4293      	cmp	r3, r2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e2b7      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a18a:	4b7e      	ldr	r3, [pc, #504]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a18c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1ed      	bne.n	800a174 <HAL_RCC_OscConfig+0x824>
 800a198:	e037      	b.n	800a20a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a19a:	f7f8 fd81 	bl	8002ca0 <HAL_GetTick>
 800a19e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1a0:	e00a      	b.n	800a1b8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1a2:	f7f8 fd7d 	bl	8002ca0 <HAL_GetTick>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e2a0      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1b8:	4b72      	ldr	r3, [pc, #456]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a1ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1ed      	bne.n	800a1a2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a1c6:	4b6f      	ldr	r3, [pc, #444]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a1c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d01a      	beq.n	800a20a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a1d4:	4b6b      	ldr	r3, [pc, #428]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a1d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1da:	4a6a      	ldr	r2, [pc, #424]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a1dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1e4:	e00a      	b.n	800a1fc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1e6:	f7f8 fd5b 	bl	8002ca0 <HAL_GetTick>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d901      	bls.n	800a1fc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e27e      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1fc:	4b61      	ldr	r3, [pc, #388]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a1fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1ed      	bne.n	800a1e6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a20a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d107      	bne.n	800a222 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a212:	4b5c      	ldr	r3, [pc, #368]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a218:	4a5a      	ldr	r2, [pc, #360]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a21a:	f023 0304 	bic.w	r3, r3, #4
 800a21e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d036      	beq.n	800a29c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d019      	beq.n	800a26a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a236:	4b53      	ldr	r3, [pc, #332]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a52      	ldr	r2, [pc, #328]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a23c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a240:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a242:	f7f8 fd2d 	bl	8002ca0 <HAL_GetTick>
 800a246:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a248:	e008      	b.n	800a25c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a24a:	f7f8 fd29 	bl	8002ca0 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	2b02      	cmp	r3, #2
 800a256:	d901      	bls.n	800a25c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e24e      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a25c:	4b49      	ldr	r3, [pc, #292]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d0f0      	beq.n	800a24a <HAL_RCC_OscConfig+0x8fa>
 800a268:	e018      	b.n	800a29c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a26a:	4b46      	ldr	r3, [pc, #280]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a45      	ldr	r2, [pc, #276]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a270:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a274:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a276:	f7f8 fd13 	bl	8002ca0 <HAL_GetTick>
 800a27a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a27c:	e008      	b.n	800a290 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a27e:	f7f8 fd0f 	bl	8002ca0 <HAL_GetTick>
 800a282:	4602      	mov	r2, r0
 800a284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d901      	bls.n	800a290 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e234      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a290:	4b3c      	ldr	r3, [pc, #240]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1f0      	bne.n	800a27e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d036      	beq.n	800a316 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d019      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a2b0:	4b34      	ldr	r3, [pc, #208]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a33      	ldr	r2, [pc, #204]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a2b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a2bc:	f7f8 fcf0 	bl	8002ca0 <HAL_GetTick>
 800a2c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a2c2:	e008      	b.n	800a2d6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a2c4:	f7f8 fcec 	bl	8002ca0 <HAL_GetTick>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d901      	bls.n	800a2d6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e211      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a2d6:	4b2b      	ldr	r3, [pc, #172]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0f0      	beq.n	800a2c4 <HAL_RCC_OscConfig+0x974>
 800a2e2:	e018      	b.n	800a316 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a2e4:	4b27      	ldr	r3, [pc, #156]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a26      	ldr	r2, [pc, #152]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a2ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a2f0:	f7f8 fcd6 	bl	8002ca0 <HAL_GetTick>
 800a2f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a2f6:	e008      	b.n	800a30a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a2f8:	f7f8 fcd2 	bl	8002ca0 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	2b02      	cmp	r3, #2
 800a304:	d901      	bls.n	800a30a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e1f7      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a30a:	4b1e      	ldr	r3, [pc, #120]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1f0      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d07f      	beq.n	800a422 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a326:	2b00      	cmp	r3, #0
 800a328:	d062      	beq.n	800a3f0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a32a:	4b16      	ldr	r3, [pc, #88]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	4a15      	ldr	r2, [pc, #84]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a330:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a334:	6093      	str	r3, [r2, #8]
 800a336:	4b13      	ldr	r3, [pc, #76]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a342:	4910      	ldr	r1, [pc, #64]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a344:	4313      	orrs	r3, r2
 800a346:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a350:	d309      	bcc.n	800a366 <HAL_RCC_OscConfig+0xa16>
 800a352:	4b0c      	ldr	r3, [pc, #48]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f023 021f 	bic.w	r2, r3, #31
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	4909      	ldr	r1, [pc, #36]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a360:	4313      	orrs	r3, r2
 800a362:	60cb      	str	r3, [r1, #12]
 800a364:	e02a      	b.n	800a3bc <HAL_RCC_OscConfig+0xa6c>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	da0c      	bge.n	800a388 <HAL_RCC_OscConfig+0xa38>
 800a36e:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	015b      	lsls	r3, r3, #5
 800a37c:	4901      	ldr	r1, [pc, #4]	@ (800a384 <HAL_RCC_OscConfig+0xa34>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	60cb      	str	r3, [r1, #12]
 800a382:	e01b      	b.n	800a3bc <HAL_RCC_OscConfig+0xa6c>
 800a384:	46020c00 	.word	0x46020c00
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a390:	d30a      	bcc.n	800a3a8 <HAL_RCC_OscConfig+0xa58>
 800a392:	4ba1      	ldr	r3, [pc, #644]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	029b      	lsls	r3, r3, #10
 800a3a0:	499d      	ldr	r1, [pc, #628]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	60cb      	str	r3, [r1, #12]
 800a3a6:	e009      	b.n	800a3bc <HAL_RCC_OscConfig+0xa6c>
 800a3a8:	4b9b      	ldr	r3, [pc, #620]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	03db      	lsls	r3, r3, #15
 800a3b6:	4998      	ldr	r1, [pc, #608]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a3bc:	4b96      	ldr	r3, [pc, #600]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a95      	ldr	r2, [pc, #596]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a3c2:	f043 0310 	orr.w	r3, r3, #16
 800a3c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3c8:	f7f8 fc6a 	bl	8002ca0 <HAL_GetTick>
 800a3cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a3ce:	e008      	b.n	800a3e2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a3d0:	f7f8 fc66 	bl	8002ca0 <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d901      	bls.n	800a3e2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e18b      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a3e2:	4b8d      	ldr	r3, [pc, #564]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0f0      	beq.n	800a3d0 <HAL_RCC_OscConfig+0xa80>
 800a3ee:	e018      	b.n	800a422 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a3f0:	4b89      	ldr	r3, [pc, #548]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a88      	ldr	r2, [pc, #544]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a3f6:	f023 0310 	bic.w	r3, r3, #16
 800a3fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3fc:	f7f8 fc50 	bl	8002ca0 <HAL_GetTick>
 800a400:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a402:	e008      	b.n	800a416 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a404:	f7f8 fc4c 	bl	8002ca0 <HAL_GetTick>
 800a408:	4602      	mov	r2, r0
 800a40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d901      	bls.n	800a416 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a412:	2303      	movs	r3, #3
 800a414:	e171      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a416:	4b80      	ldr	r3, [pc, #512]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 0320 	and.w	r3, r3, #32
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1f0      	bne.n	800a404 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 8166 	beq.w	800a6f8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a42c:	2300      	movs	r3, #0
 800a42e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a432:	4b79      	ldr	r3, [pc, #484]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	f003 030c 	and.w	r3, r3, #12
 800a43a:	2b0c      	cmp	r3, #12
 800a43c:	f000 80f2 	beq.w	800a624 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a444:	2b02      	cmp	r3, #2
 800a446:	f040 80c5 	bne.w	800a5d4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a44a:	4b73      	ldr	r3, [pc, #460]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a72      	ldr	r2, [pc, #456]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a450:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a454:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a456:	f7f8 fc23 	bl	8002ca0 <HAL_GetTick>
 800a45a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a45c:	e008      	b.n	800a470 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a45e:	f7f8 fc1f 	bl	8002ca0 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d901      	bls.n	800a470 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e144      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a470:	4b69      	ldr	r3, [pc, #420]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1f0      	bne.n	800a45e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a47c:	4b66      	ldr	r3, [pc, #408]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a47e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a482:	f003 0304 	and.w	r3, r3, #4
 800a486:	2b00      	cmp	r3, #0
 800a488:	d111      	bne.n	800a4ae <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a48a:	4b63      	ldr	r3, [pc, #396]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a48c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a490:	4a61      	ldr	r2, [pc, #388]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a492:	f043 0304 	orr.w	r3, r3, #4
 800a496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a49a:	4b5f      	ldr	r3, [pc, #380]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a49c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4a0:	f003 0304 	and.w	r3, r3, #4
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a4ae:	4b5b      	ldr	r3, [pc, #364]	@ (800a61c <HAL_RCC_OscConfig+0xccc>)
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4ba:	d102      	bne.n	800a4c2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a4c2:	4b56      	ldr	r3, [pc, #344]	@ (800a61c <HAL_RCC_OscConfig+0xccc>)
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	4a55      	ldr	r2, [pc, #340]	@ (800a61c <HAL_RCC_OscConfig+0xccc>)
 800a4c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4cc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a4ce:	4b52      	ldr	r3, [pc, #328]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4d6:	f023 0303 	bic.w	r3, r3, #3
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a4e2:	3a01      	subs	r2, #1
 800a4e4:	0212      	lsls	r2, r2, #8
 800a4e6:	4311      	orrs	r1, r2
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	494a      	ldr	r1, [pc, #296]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a4f4:	4b48      	ldr	r3, [pc, #288]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a4f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4f8:	4b49      	ldr	r3, [pc, #292]	@ (800a620 <HAL_RCC_OscConfig+0xcd0>)
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a500:	3a01      	subs	r2, #1
 800a502:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a50a:	3a01      	subs	r2, #1
 800a50c:	0252      	lsls	r2, r2, #9
 800a50e:	b292      	uxth	r2, r2
 800a510:	4311      	orrs	r1, r2
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a516:	3a01      	subs	r2, #1
 800a518:	0412      	lsls	r2, r2, #16
 800a51a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a51e:	4311      	orrs	r1, r2
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a524:	3a01      	subs	r2, #1
 800a526:	0612      	lsls	r2, r2, #24
 800a528:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a52c:	430a      	orrs	r2, r1
 800a52e:	493a      	ldr	r1, [pc, #232]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a530:	4313      	orrs	r3, r2
 800a532:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a534:	4b38      	ldr	r3, [pc, #224]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a538:	4a37      	ldr	r2, [pc, #220]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a53a:	f023 0310 	bic.w	r3, r3, #16
 800a53e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a544:	4a34      	ldr	r2, [pc, #208]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a546:	00db      	lsls	r3, r3, #3
 800a548:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a54a:	4b33      	ldr	r3, [pc, #204]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54e:	4a32      	ldr	r2, [pc, #200]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a550:	f043 0310 	orr.w	r3, r3, #16
 800a554:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a556:	4b30      	ldr	r3, [pc, #192]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55a:	f023 020c 	bic.w	r2, r3, #12
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a562:	492d      	ldr	r1, [pc, #180]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a564:	4313      	orrs	r3, r2
 800a566:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a568:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d105      	bne.n	800a57c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a570:	4b2a      	ldr	r3, [pc, #168]	@ (800a61c <HAL_RCC_OscConfig+0xccc>)
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	4a29      	ldr	r2, [pc, #164]	@ (800a61c <HAL_RCC_OscConfig+0xccc>)
 800a576:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a57a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a57c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a580:	2b01      	cmp	r3, #1
 800a582:	d107      	bne.n	800a594 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a584:	4b24      	ldr	r3, [pc, #144]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a58a:	4a23      	ldr	r2, [pc, #140]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a58c:	f023 0304 	bic.w	r3, r3, #4
 800a590:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a594:	4b20      	ldr	r3, [pc, #128]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a1f      	ldr	r2, [pc, #124]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a59a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a59e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a5a0:	f7f8 fb7e 	bl	8002ca0 <HAL_GetTick>
 800a5a4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a5a6:	e008      	b.n	800a5ba <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5a8:	f7f8 fb7a 	bl	8002ca0 <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d901      	bls.n	800a5ba <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e09f      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a5ba:	4b17      	ldr	r3, [pc, #92]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0f0      	beq.n	800a5a8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a5c6:	4b14      	ldr	r3, [pc, #80]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ca:	4a13      	ldr	r2, [pc, #76]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a5cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a5d0:	6293      	str	r3, [r2, #40]	@ 0x28
 800a5d2:	e091      	b.n	800a6f8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a5d4:	4b10      	ldr	r3, [pc, #64]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a0f      	ldr	r2, [pc, #60]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a5da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a5e0:	f7f8 fb5e 	bl	8002ca0 <HAL_GetTick>
 800a5e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a5e6:	e008      	b.n	800a5fa <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5e8:	f7f8 fb5a 	bl	8002ca0 <HAL_GetTick>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d901      	bls.n	800a5fa <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e07f      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a5fa:	4b07      	ldr	r3, [pc, #28]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1f0      	bne.n	800a5e8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a606:	4b04      	ldr	r3, [pc, #16]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60a:	4a03      	ldr	r2, [pc, #12]	@ (800a618 <HAL_RCC_OscConfig+0xcc8>)
 800a60c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a610:	f023 0303 	bic.w	r3, r3, #3
 800a614:	6293      	str	r3, [r2, #40]	@ 0x28
 800a616:	e06f      	b.n	800a6f8 <HAL_RCC_OscConfig+0xda8>
 800a618:	46020c00 	.word	0x46020c00
 800a61c:	46020800 	.word	0x46020800
 800a620:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a624:	4b37      	ldr	r3, [pc, #220]	@ (800a704 <HAL_RCC_OscConfig+0xdb4>)
 800a626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a628:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a62a:	4b36      	ldr	r3, [pc, #216]	@ (800a704 <HAL_RCC_OscConfig+0xdb4>)
 800a62c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a62e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a634:	2b01      	cmp	r3, #1
 800a636:	d039      	beq.n	800a6ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	f003 0203 	and.w	r2, r3, #3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a642:	429a      	cmp	r2, r3
 800a644:	d132      	bne.n	800a6ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	0a1b      	lsrs	r3, r3, #8
 800a64a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a652:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a654:	429a      	cmp	r2, r3
 800a656:	d129      	bne.n	800a6ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a662:	429a      	cmp	r2, r3
 800a664:	d122      	bne.n	800a6ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a670:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a672:	429a      	cmp	r2, r3
 800a674:	d11a      	bne.n	800a6ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	0a5b      	lsrs	r3, r3, #9
 800a67a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a682:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a684:	429a      	cmp	r2, r3
 800a686:	d111      	bne.n	800a6ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	0c1b      	lsrs	r3, r3, #16
 800a68c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a694:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a696:	429a      	cmp	r2, r3
 800a698:	d108      	bne.n	800a6ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	0e1b      	lsrs	r3, r3, #24
 800a69e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6a6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d001      	beq.n	800a6b0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e024      	b.n	800a6fa <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6b0:	4b14      	ldr	r3, [pc, #80]	@ (800a704 <HAL_RCC_OscConfig+0xdb4>)
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b4:	08db      	lsrs	r3, r3, #3
 800a6b6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d01a      	beq.n	800a6f8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a6c2:	4b10      	ldr	r3, [pc, #64]	@ (800a704 <HAL_RCC_OscConfig+0xdb4>)
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a704 <HAL_RCC_OscConfig+0xdb4>)
 800a6c8:	f023 0310 	bic.w	r3, r3, #16
 800a6cc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ce:	f7f8 fae7 	bl	8002ca0 <HAL_GetTick>
 800a6d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a6d4:	bf00      	nop
 800a6d6:	f7f8 fae3 	bl	8002ca0 <HAL_GetTick>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d0f9      	beq.n	800a6d6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6e6:	4a07      	ldr	r2, [pc, #28]	@ (800a704 <HAL_RCC_OscConfig+0xdb4>)
 800a6e8:	00db      	lsls	r3, r3, #3
 800a6ea:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a6ec:	4b05      	ldr	r3, [pc, #20]	@ (800a704 <HAL_RCC_OscConfig+0xdb4>)
 800a6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f0:	4a04      	ldr	r2, [pc, #16]	@ (800a704 <HAL_RCC_OscConfig+0xdb4>)
 800a6f2:	f043 0310 	orr.w	r3, r3, #16
 800a6f6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3738      	adds	r7, #56	@ 0x38
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	46020c00 	.word	0x46020c00

0800a708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e1d9      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a71c:	4b9b      	ldr	r3, [pc, #620]	@ (800a98c <HAL_RCC_ClockConfig+0x284>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 030f 	and.w	r3, r3, #15
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	429a      	cmp	r2, r3
 800a728:	d910      	bls.n	800a74c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a72a:	4b98      	ldr	r3, [pc, #608]	@ (800a98c <HAL_RCC_ClockConfig+0x284>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f023 020f 	bic.w	r2, r3, #15
 800a732:	4996      	ldr	r1, [pc, #600]	@ (800a98c <HAL_RCC_ClockConfig+0x284>)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	4313      	orrs	r3, r2
 800a738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a73a:	4b94      	ldr	r3, [pc, #592]	@ (800a98c <HAL_RCC_ClockConfig+0x284>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 030f 	and.w	r3, r3, #15
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	429a      	cmp	r2, r3
 800a746:	d001      	beq.n	800a74c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e1c1      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0310 	and.w	r3, r3, #16
 800a754:	2b00      	cmp	r3, #0
 800a756:	d010      	beq.n	800a77a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	695a      	ldr	r2, [r3, #20]
 800a75c:	4b8c      	ldr	r3, [pc, #560]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a760:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a764:	429a      	cmp	r2, r3
 800a766:	d908      	bls.n	800a77a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a768:	4b89      	ldr	r3, [pc, #548]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a76c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	4986      	ldr	r1, [pc, #536]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a776:	4313      	orrs	r3, r2
 800a778:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0308 	and.w	r3, r3, #8
 800a782:	2b00      	cmp	r3, #0
 800a784:	d012      	beq.n	800a7ac <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691a      	ldr	r2, [r3, #16]
 800a78a:	4b81      	ldr	r3, [pc, #516]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	091b      	lsrs	r3, r3, #4
 800a790:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a794:	429a      	cmp	r2, r3
 800a796:	d909      	bls.n	800a7ac <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a798:	4b7d      	ldr	r3, [pc, #500]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	011b      	lsls	r3, r3, #4
 800a7a6:	497a      	ldr	r1, [pc, #488]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d010      	beq.n	800a7da <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68da      	ldr	r2, [r3, #12]
 800a7bc:	4b74      	ldr	r3, [pc, #464]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d908      	bls.n	800a7da <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a7c8:	4b71      	ldr	r3, [pc, #452]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	496e      	ldr	r1, [pc, #440]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d010      	beq.n	800a808 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	4b69      	ldr	r3, [pc, #420]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	f003 030f 	and.w	r3, r3, #15
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d908      	bls.n	800a808 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a7f6:	4b66      	ldr	r3, [pc, #408]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	f023 020f 	bic.w	r2, r3, #15
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	4963      	ldr	r1, [pc, #396]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a804:	4313      	orrs	r3, r2
 800a806:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 80d2 	beq.w	800a9ba <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a816:	2300      	movs	r3, #0
 800a818:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d143      	bne.n	800a8aa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a822:	4b5b      	ldr	r3, [pc, #364]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d110      	bne.n	800a852 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a830:	4b57      	ldr	r3, [pc, #348]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a836:	4a56      	ldr	r2, [pc, #344]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a838:	f043 0304 	orr.w	r3, r3, #4
 800a83c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a840:	4b53      	ldr	r3, [pc, #332]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	60bb      	str	r3, [r7, #8]
 800a84c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a84e:	2301      	movs	r3, #1
 800a850:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a852:	f7f8 fa25 	bl	8002ca0 <HAL_GetTick>
 800a856:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a858:	4b4e      	ldr	r3, [pc, #312]	@ (800a994 <HAL_RCC_ClockConfig+0x28c>)
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00f      	beq.n	800a884 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a864:	e008      	b.n	800a878 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a866:	f7f8 fa1b 	bl	8002ca0 <HAL_GetTick>
 800a86a:	4602      	mov	r2, r0
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	2b02      	cmp	r3, #2
 800a872:	d901      	bls.n	800a878 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e12b      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a878:	4b46      	ldr	r3, [pc, #280]	@ (800a994 <HAL_RCC_ClockConfig+0x28c>)
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d0f0      	beq.n	800a866 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a884:	7dfb      	ldrb	r3, [r7, #23]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d107      	bne.n	800a89a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a88a:	4b41      	ldr	r3, [pc, #260]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a88c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a890:	4a3f      	ldr	r2, [pc, #252]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a892:	f023 0304 	bic.w	r3, r3, #4
 800a896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a89a:	4b3d      	ldr	r3, [pc, #244]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d121      	bne.n	800a8ea <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e112      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d107      	bne.n	800a8c2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8b2:	4b37      	ldr	r3, [pc, #220]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d115      	bne.n	800a8ea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e106      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d107      	bne.n	800a8da <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a8ca:	4b31      	ldr	r3, [pc, #196]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 0304 	and.w	r3, r3, #4
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d109      	bne.n	800a8ea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e0fa      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8da:	4b2d      	ldr	r3, [pc, #180]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e0f2      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a8ea:	4b29      	ldr	r3, [pc, #164]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	f023 0203 	bic.w	r2, r3, #3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	4926      	ldr	r1, [pc, #152]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a8fc:	f7f8 f9d0 	bl	8002ca0 <HAL_GetTick>
 800a900:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	2b03      	cmp	r3, #3
 800a908:	d112      	bne.n	800a930 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a90a:	e00a      	b.n	800a922 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a90c:	f7f8 f9c8 	bl	8002ca0 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d901      	bls.n	800a922 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e0d6      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a922:	4b1b      	ldr	r3, [pc, #108]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	f003 030c 	and.w	r3, r3, #12
 800a92a:	2b0c      	cmp	r3, #12
 800a92c:	d1ee      	bne.n	800a90c <HAL_RCC_ClockConfig+0x204>
 800a92e:	e044      	b.n	800a9ba <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	2b02      	cmp	r3, #2
 800a936:	d112      	bne.n	800a95e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a938:	e00a      	b.n	800a950 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a93a:	f7f8 f9b1 	bl	8002ca0 <HAL_GetTick>
 800a93e:	4602      	mov	r2, r0
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a948:	4293      	cmp	r3, r2
 800a94a:	d901      	bls.n	800a950 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e0bf      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a950:	4b0f      	ldr	r3, [pc, #60]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	f003 030c 	and.w	r3, r3, #12
 800a958:	2b08      	cmp	r3, #8
 800a95a:	d1ee      	bne.n	800a93a <HAL_RCC_ClockConfig+0x232>
 800a95c:	e02d      	b.n	800a9ba <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d123      	bne.n	800a9ae <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a966:	e00a      	b.n	800a97e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a968:	f7f8 f99a 	bl	8002ca0 <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a976:	4293      	cmp	r3, r2
 800a978:	d901      	bls.n	800a97e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e0a8      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a97e:	4b04      	ldr	r3, [pc, #16]	@ (800a990 <HAL_RCC_ClockConfig+0x288>)
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	f003 030c 	and.w	r3, r3, #12
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1ee      	bne.n	800a968 <HAL_RCC_ClockConfig+0x260>
 800a98a:	e016      	b.n	800a9ba <HAL_RCC_ClockConfig+0x2b2>
 800a98c:	40022000 	.word	0x40022000
 800a990:	46020c00 	.word	0x46020c00
 800a994:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a998:	f7f8 f982 	bl	8002ca0 <HAL_GetTick>
 800a99c:	4602      	mov	r2, r0
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d901      	bls.n	800a9ae <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e090      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9ae:	4b4a      	ldr	r3, [pc, #296]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	f003 030c 	and.w	r3, r3, #12
 800a9b6:	2b04      	cmp	r3, #4
 800a9b8:	d1ee      	bne.n	800a998 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0302 	and.w	r3, r3, #2
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d010      	beq.n	800a9e8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	689a      	ldr	r2, [r3, #8]
 800a9ca:	4b43      	ldr	r3, [pc, #268]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f003 030f 	and.w	r3, r3, #15
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d208      	bcs.n	800a9e8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a9d6:	4b40      	ldr	r3, [pc, #256]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	f023 020f 	bic.w	r2, r3, #15
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	493d      	ldr	r1, [pc, #244]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9e8:	4b3c      	ldr	r3, [pc, #240]	@ (800aadc <HAL_RCC_ClockConfig+0x3d4>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 030f 	and.w	r3, r3, #15
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d210      	bcs.n	800aa18 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9f6:	4b39      	ldr	r3, [pc, #228]	@ (800aadc <HAL_RCC_ClockConfig+0x3d4>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f023 020f 	bic.w	r2, r3, #15
 800a9fe:	4937      	ldr	r1, [pc, #220]	@ (800aadc <HAL_RCC_ClockConfig+0x3d4>)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa06:	4b35      	ldr	r3, [pc, #212]	@ (800aadc <HAL_RCC_ClockConfig+0x3d4>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 030f 	and.w	r3, r3, #15
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d001      	beq.n	800aa18 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e05b      	b.n	800aad0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0304 	and.w	r3, r3, #4
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d010      	beq.n	800aa46 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68da      	ldr	r2, [r3, #12]
 800aa28:	4b2b      	ldr	r3, [pc, #172]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d208      	bcs.n	800aa46 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800aa34:	4b28      	ldr	r3, [pc, #160]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	4925      	ldr	r1, [pc, #148]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0308 	and.w	r3, r3, #8
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d012      	beq.n	800aa78 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	691a      	ldr	r2, [r3, #16]
 800aa56:	4b20      	ldr	r3, [pc, #128]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	091b      	lsrs	r3, r3, #4
 800aa5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d209      	bcs.n	800aa78 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aa64:	4b1c      	ldr	r3, [pc, #112]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aa66:	6a1b      	ldr	r3, [r3, #32]
 800aa68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	4919      	ldr	r1, [pc, #100]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aa74:	4313      	orrs	r3, r2
 800aa76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0310 	and.w	r3, r3, #16
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d010      	beq.n	800aaa6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	695a      	ldr	r2, [r3, #20]
 800aa88:	4b13      	ldr	r3, [pc, #76]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d208      	bcs.n	800aaa6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800aa94:	4b10      	ldr	r3, [pc, #64]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aa96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	490d      	ldr	r1, [pc, #52]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800aaa6:	f000 f821 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	4b0a      	ldr	r3, [pc, #40]	@ (800aad8 <HAL_RCC_ClockConfig+0x3d0>)
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	f003 030f 	and.w	r3, r3, #15
 800aab4:	490a      	ldr	r1, [pc, #40]	@ (800aae0 <HAL_RCC_ClockConfig+0x3d8>)
 800aab6:	5ccb      	ldrb	r3, [r1, r3]
 800aab8:	fa22 f303 	lsr.w	r3, r2, r3
 800aabc:	4a09      	ldr	r2, [pc, #36]	@ (800aae4 <HAL_RCC_ClockConfig+0x3dc>)
 800aabe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aac0:	4b09      	ldr	r3, [pc, #36]	@ (800aae8 <HAL_RCC_ClockConfig+0x3e0>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7f8 f861 	bl	8002b8c <HAL_InitTick>
 800aaca:	4603      	mov	r3, r0
 800aacc:	73fb      	strb	r3, [r7, #15]

  return status;
 800aace:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	46020c00 	.word	0x46020c00
 800aadc:	40022000 	.word	0x40022000
 800aae0:	08011924 	.word	0x08011924
 800aae4:	20000018 	.word	0x20000018
 800aae8:	2000001c 	.word	0x2000001c

0800aaec <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b08b      	sub	sp, #44	@ 0x2c
 800aaf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aafa:	4b78      	ldr	r3, [pc, #480]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	f003 030c 	and.w	r3, r3, #12
 800ab02:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab04:	4b75      	ldr	r3, [pc, #468]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab08:	f003 0303 	and.w	r3, r3, #3
 800ab0c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d005      	beq.n	800ab20 <HAL_RCC_GetSysClockFreq+0x34>
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	2b0c      	cmp	r3, #12
 800ab18:	d121      	bne.n	800ab5e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d11e      	bne.n	800ab5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800ab20:	4b6e      	ldr	r3, [pc, #440]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d107      	bne.n	800ab3c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ab2c:	4b6b      	ldr	r3, [pc, #428]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab32:	0b1b      	lsrs	r3, r3, #12
 800ab34:	f003 030f 	and.w	r3, r3, #15
 800ab38:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab3a:	e005      	b.n	800ab48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800ab3c:	4b67      	ldr	r3, [pc, #412]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	0f1b      	lsrs	r3, r3, #28
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ab48:	4a65      	ldr	r2, [pc, #404]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab50:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d110      	bne.n	800ab7a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ab58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab5c:	e00d      	b.n	800ab7a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab5e:	4b5f      	ldr	r3, [pc, #380]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	f003 030c 	and.w	r3, r3, #12
 800ab66:	2b04      	cmp	r3, #4
 800ab68:	d102      	bne.n	800ab70 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ab6a:	4b5e      	ldr	r3, [pc, #376]	@ (800ace4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab6c:	623b      	str	r3, [r7, #32]
 800ab6e:	e004      	b.n	800ab7a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	2b08      	cmp	r3, #8
 800ab74:	d101      	bne.n	800ab7a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab76:	4b5b      	ldr	r3, [pc, #364]	@ (800ace4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab78:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b0c      	cmp	r3, #12
 800ab7e:	f040 80a5 	bne.w	800accc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ab82:	4b56      	ldr	r3, [pc, #344]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ab8c:	4b53      	ldr	r3, [pc, #332]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab90:	0a1b      	lsrs	r3, r3, #8
 800ab92:	f003 030f 	and.w	r3, r3, #15
 800ab96:	3301      	adds	r3, #1
 800ab98:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ab9a:	4b50      	ldr	r3, [pc, #320]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9e:	091b      	lsrs	r3, r3, #4
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800aba6:	4b4d      	ldr	r3, [pc, #308]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abaa:	08db      	lsrs	r3, r3, #3
 800abac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	fb02 f303 	mul.w	r3, r2, r3
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d003      	beq.n	800abd0 <HAL_RCC_GetSysClockFreq+0xe4>
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d022      	beq.n	800ac14 <HAL_RCC_GetSysClockFreq+0x128>
 800abce:	e043      	b.n	800ac58 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abda:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800ace8 <HAL_RCC_GetSysClockFreq+0x1fc>
 800abde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe2:	4b3e      	ldr	r3, [pc, #248]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abf2:	ed97 6a01 	vldr	s12, [r7, #4]
 800abf6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800acec <HAL_RCC_GetSysClockFreq+0x200>
 800abfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac12:	e046      	b.n	800aca2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800ace8 <HAL_RCC_GetSysClockFreq+0x1fc>
 800ac22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac26:	4b2d      	ldr	r3, [pc, #180]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2e:	ee07 3a90 	vmov	s15, r3
 800ac32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac36:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac3a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800acec <HAL_RCC_GetSysClockFreq+0x200>
 800ac3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac56:	e024      	b.n	800aca2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	ee07 3a90 	vmov	s15, r3
 800ac68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac70:	4b1a      	ldr	r3, [pc, #104]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac78:	ee07 3a90 	vmov	s15, r3
 800ac7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac80:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac84:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800acec <HAL_RCC_GetSysClockFreq+0x200>
 800ac88:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac94:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aca0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800aca2:	4b0e      	ldr	r3, [pc, #56]	@ (800acdc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca6:	0e1b      	lsrs	r3, r3, #24
 800aca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acac:	3301      	adds	r3, #1
 800acae:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acba:	edd7 6a07 	vldr	s13, [r7, #28]
 800acbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acc6:	ee17 3a90 	vmov	r3, s15
 800acca:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800accc:	6a3b      	ldr	r3, [r7, #32]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	372c      	adds	r7, #44	@ 0x2c
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	46020c00 	.word	0x46020c00
 800ace0:	0801193c 	.word	0x0801193c
 800ace4:	00f42400 	.word	0x00f42400
 800ace8:	4b742400 	.word	0x4b742400
 800acec:	46000000 	.word	0x46000000

0800acf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800acf4:	f7ff fefa 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800acf8:	4602      	mov	r2, r0
 800acfa:	4b07      	ldr	r3, [pc, #28]	@ (800ad18 <HAL_RCC_GetHCLKFreq+0x28>)
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	4906      	ldr	r1, [pc, #24]	@ (800ad1c <HAL_RCC_GetHCLKFreq+0x2c>)
 800ad04:	5ccb      	ldrb	r3, [r1, r3]
 800ad06:	fa22 f303 	lsr.w	r3, r2, r3
 800ad0a:	4a05      	ldr	r2, [pc, #20]	@ (800ad20 <HAL_RCC_GetHCLKFreq+0x30>)
 800ad0c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ad0e:	4b04      	ldr	r3, [pc, #16]	@ (800ad20 <HAL_RCC_GetHCLKFreq+0x30>)
 800ad10:	681b      	ldr	r3, [r3, #0]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	46020c00 	.word	0x46020c00
 800ad1c:	08011924 	.word	0x08011924
 800ad20:	20000018 	.word	0x20000018

0800ad24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ad28:	f7ff ffe2 	bl	800acf0 <HAL_RCC_GetHCLKFreq>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	4b05      	ldr	r3, [pc, #20]	@ (800ad44 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	091b      	lsrs	r3, r3, #4
 800ad34:	f003 0307 	and.w	r3, r3, #7
 800ad38:	4903      	ldr	r1, [pc, #12]	@ (800ad48 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad3a:	5ccb      	ldrb	r3, [r1, r3]
 800ad3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	46020c00 	.word	0x46020c00
 800ad48:	08011934 	.word	0x08011934

0800ad4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800ad50:	f7ff ffce 	bl	800acf0 <HAL_RCC_GetHCLKFreq>
 800ad54:	4602      	mov	r2, r0
 800ad56:	4b05      	ldr	r3, [pc, #20]	@ (800ad6c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	0a1b      	lsrs	r3, r3, #8
 800ad5c:	f003 0307 	and.w	r3, r3, #7
 800ad60:	4903      	ldr	r1, [pc, #12]	@ (800ad70 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad62:	5ccb      	ldrb	r3, [r1, r3]
 800ad64:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	46020c00 	.word	0x46020c00
 800ad70:	08011934 	.word	0x08011934

0800ad74 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ad78:	f7ff ffba 	bl	800acf0 <HAL_RCC_GetHCLKFreq>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	4b05      	ldr	r3, [pc, #20]	@ (800ad94 <HAL_RCC_GetPCLK3Freq+0x20>)
 800ad80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad82:	091b      	lsrs	r3, r3, #4
 800ad84:	f003 0307 	and.w	r3, r3, #7
 800ad88:	4903      	ldr	r1, [pc, #12]	@ (800ad98 <HAL_RCC_GetPCLK3Freq+0x24>)
 800ad8a:	5ccb      	ldrb	r3, [r1, r3]
 800ad8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	46020c00 	.word	0x46020c00
 800ad98:	08011934 	.word	0x08011934

0800ad9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ada4:	4b3e      	ldr	r3, [pc, #248]	@ (800aea0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ada6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adaa:	f003 0304 	and.w	r3, r3, #4
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800adb2:	f7fe fd21 	bl	80097f8 <HAL_PWREx_GetVoltageRange>
 800adb6:	6178      	str	r0, [r7, #20]
 800adb8:	e019      	b.n	800adee <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800adba:	4b39      	ldr	r3, [pc, #228]	@ (800aea0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adc0:	4a37      	ldr	r2, [pc, #220]	@ (800aea0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adc2:	f043 0304 	orr.w	r3, r3, #4
 800adc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800adca:	4b35      	ldr	r3, [pc, #212]	@ (800aea0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800add0:	f003 0304 	and.w	r3, r3, #4
 800add4:	60fb      	str	r3, [r7, #12]
 800add6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800add8:	f7fe fd0e 	bl	80097f8 <HAL_PWREx_GetVoltageRange>
 800addc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800adde:	4b30      	ldr	r3, [pc, #192]	@ (800aea0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ade0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ade4:	4a2e      	ldr	r2, [pc, #184]	@ (800aea0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ade6:	f023 0304 	bic.w	r3, r3, #4
 800adea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800adf4:	d003      	beq.n	800adfe <RCC_SetFlashLatencyFromMSIRange+0x62>
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adfc:	d109      	bne.n	800ae12 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae04:	d202      	bcs.n	800ae0c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800ae06:	2301      	movs	r3, #1
 800ae08:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ae0a:	e033      	b.n	800ae74 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ae10:	e030      	b.n	800ae74 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae18:	d208      	bcs.n	800ae2c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae20:	d102      	bne.n	800ae28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800ae22:	2303      	movs	r3, #3
 800ae24:	613b      	str	r3, [r7, #16]
 800ae26:	e025      	b.n	800ae74 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e035      	b.n	800ae98 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae32:	d90f      	bls.n	800ae54 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae40:	d902      	bls.n	800ae48 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800ae42:	2300      	movs	r3, #0
 800ae44:	613b      	str	r3, [r7, #16]
 800ae46:	e015      	b.n	800ae74 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800ae48:	2301      	movs	r3, #1
 800ae4a:	613b      	str	r3, [r7, #16]
 800ae4c:	e012      	b.n	800ae74 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800ae4e:	2300      	movs	r3, #0
 800ae50:	613b      	str	r3, [r7, #16]
 800ae52:	e00f      	b.n	800ae74 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae5a:	d109      	bne.n	800ae70 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae62:	d102      	bne.n	800ae6a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800ae64:	2301      	movs	r3, #1
 800ae66:	613b      	str	r3, [r7, #16]
 800ae68:	e004      	b.n	800ae74 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	613b      	str	r3, [r7, #16]
 800ae6e:	e001      	b.n	800ae74 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800ae70:	2301      	movs	r3, #1
 800ae72:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ae74:	4b0b      	ldr	r3, [pc, #44]	@ (800aea4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f023 020f 	bic.w	r2, r3, #15
 800ae7c:	4909      	ldr	r1, [pc, #36]	@ (800aea4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800ae84:	4b07      	ldr	r3, [pc, #28]	@ (800aea4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 030f 	and.w	r3, r3, #15
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d001      	beq.n	800ae96 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e000      	b.n	800ae98 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	46020c00 	.word	0x46020c00
 800aea4:	40022000 	.word	0x40022000

0800aea8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800aea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aeac:	b0c8      	sub	sp, #288	@ 0x120
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aeba:	2300      	movs	r3, #0
 800aebc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	f002 0401 	and.w	r4, r2, #1
 800aecc:	2500      	movs	r5, #0
 800aece:	ea54 0305 	orrs.w	r3, r4, r5
 800aed2:	d00b      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800aed4:	4bd5      	ldr	r3, [pc, #852]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aeda:	f023 0103 	bic.w	r1, r3, #3
 800aede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aee4:	4ad1      	ldr	r2, [pc, #836]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aee6:	430b      	orrs	r3, r1
 800aee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aeec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f002 0802 	and.w	r8, r2, #2
 800aef8:	f04f 0900 	mov.w	r9, #0
 800aefc:	ea58 0309 	orrs.w	r3, r8, r9
 800af00:	d00b      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800af02:	4bca      	ldr	r3, [pc, #808]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af08:	f023 010c 	bic.w	r1, r3, #12
 800af0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af12:	4ac6      	ldr	r2, [pc, #792]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af14:	430b      	orrs	r3, r1
 800af16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	f002 0a04 	and.w	sl, r2, #4
 800af26:	f04f 0b00 	mov.w	fp, #0
 800af2a:	ea5a 030b 	orrs.w	r3, sl, fp
 800af2e:	d00b      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800af30:	4bbe      	ldr	r3, [pc, #760]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af36:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800af3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af40:	4aba      	ldr	r2, [pc, #744]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af42:	430b      	orrs	r3, r1
 800af44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800af48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f002 0308 	and.w	r3, r2, #8
 800af54:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800af58:	2300      	movs	r3, #0
 800af5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800af5e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800af62:	460b      	mov	r3, r1
 800af64:	4313      	orrs	r3, r2
 800af66:	d00b      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800af68:	4bb0      	ldr	r3, [pc, #704]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800af72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af78:	4aac      	ldr	r2, [pc, #688]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af7a:	430b      	orrs	r3, r1
 800af7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f002 0310 	and.w	r3, r2, #16
 800af8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af90:	2300      	movs	r3, #0
 800af92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800af96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800af9a:	460b      	mov	r3, r1
 800af9c:	4313      	orrs	r3, r2
 800af9e:	d00b      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800afa0:	4ba2      	ldr	r3, [pc, #648]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afa6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800afaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afb0:	4a9e      	ldr	r2, [pc, #632]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afb2:	430b      	orrs	r3, r1
 800afb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800afb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800afc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800afc8:	2300      	movs	r3, #0
 800afca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800afce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800afd2:	460b      	mov	r3, r1
 800afd4:	4313      	orrs	r3, r2
 800afd6:	d00b      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800afd8:	4b94      	ldr	r3, [pc, #592]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afde:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800afe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afe8:	4a90      	ldr	r2, [pc, #576]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afea:	430b      	orrs	r3, r1
 800afec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	f002 0320 	and.w	r3, r2, #32
 800affc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b000:	2300      	movs	r3, #0
 800b002:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b006:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b00a:	460b      	mov	r3, r1
 800b00c:	4313      	orrs	r3, r2
 800b00e:	d00b      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b010:	4b86      	ldr	r3, [pc, #536]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b016:	f023 0107 	bic.w	r1, r3, #7
 800b01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b01e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b020:	4a82      	ldr	r2, [pc, #520]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b022:	430b      	orrs	r3, r1
 800b024:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b034:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b038:	2300      	movs	r3, #0
 800b03a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b03e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b042:	460b      	mov	r3, r1
 800b044:	4313      	orrs	r3, r2
 800b046:	d00b      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b048:	4b78      	ldr	r3, [pc, #480]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b04a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b04e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b058:	4a74      	ldr	r2, [pc, #464]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b05a:	430b      	orrs	r3, r1
 800b05c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b06c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b070:	2300      	movs	r3, #0
 800b072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b07a:	460b      	mov	r3, r1
 800b07c:	4313      	orrs	r3, r2
 800b07e:	d00b      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b080:	4b6a      	ldr	r3, [pc, #424]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b08e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b090:	4a66      	ldr	r2, [pc, #408]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b092:	430b      	orrs	r3, r1
 800b094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b0a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b0ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	d00b      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b0b8:	4b5c      	ldr	r3, [pc, #368]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b0be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b0c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0c8:	4a58      	ldr	r2, [pc, #352]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b0d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b0dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b0e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	d00b      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b0f0:	4b4e      	ldr	r3, [pc, #312]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0f6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b0fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b100:	4a4a      	ldr	r2, [pc, #296]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b102:	430b      	orrs	r3, r1
 800b104:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b114:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b118:	2300      	movs	r3, #0
 800b11a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b11e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b122:	460b      	mov	r3, r1
 800b124:	4313      	orrs	r3, r2
 800b126:	d00b      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b128:	4b40      	ldr	r3, [pc, #256]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b12a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b12e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b138:	4a3c      	ldr	r2, [pc, #240]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b13a:	430b      	orrs	r3, r1
 800b13c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b14c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b150:	2300      	movs	r3, #0
 800b152:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b156:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b15a:	460b      	mov	r3, r1
 800b15c:	4313      	orrs	r3, r2
 800b15e:	d00c      	beq.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b160:	4b32      	ldr	r3, [pc, #200]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b162:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b166:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b172:	4a2e      	ldr	r2, [pc, #184]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b174:	430b      	orrs	r3, r1
 800b176:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b17a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b18a:	2300      	movs	r3, #0
 800b18c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b190:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b194:	460b      	mov	r3, r1
 800b196:	4313      	orrs	r3, r2
 800b198:	d00c      	beq.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b19a:	4b24      	ldr	r3, [pc, #144]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b19c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1a0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b1a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1ac:	4a1f      	ldr	r2, [pc, #124]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1ae:	430b      	orrs	r3, r1
 800b1b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b1b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b1c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	d00c      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b1d4:	4b15      	ldr	r3, [pc, #84]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1da:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b1de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1e6:	4a11      	ldr	r2, [pc, #68]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1e8:	430b      	orrs	r3, r1
 800b1ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b1ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b1fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b1fe:	2300      	movs	r3, #0
 800b200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b204:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b208:	460b      	mov	r3, r1
 800b20a:	4313      	orrs	r3, r2
 800b20c:	d010      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b20e:	4b07      	ldr	r3, [pc, #28]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b214:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b220:	4a02      	ldr	r2, [pc, #8]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b222:	430b      	orrs	r3, r1
 800b224:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b228:	e002      	b.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b22a:	bf00      	nop
 800b22c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b23c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b240:	2300      	movs	r3, #0
 800b242:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b246:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b24a:	460b      	mov	r3, r1
 800b24c:	4313      	orrs	r3, r2
 800b24e:	d04c      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b254:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b258:	2b80      	cmp	r3, #128	@ 0x80
 800b25a:	d02d      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b25c:	2b80      	cmp	r3, #128	@ 0x80
 800b25e:	d827      	bhi.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b260:	2b60      	cmp	r3, #96	@ 0x60
 800b262:	d02b      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b264:	2b60      	cmp	r3, #96	@ 0x60
 800b266:	d823      	bhi.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b268:	2b40      	cmp	r3, #64	@ 0x40
 800b26a:	d006      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b26c:	2b40      	cmp	r3, #64	@ 0x40
 800b26e:	d81f      	bhi.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b270:	2b00      	cmp	r3, #0
 800b272:	d009      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b274:	2b20      	cmp	r3, #32
 800b276:	d011      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b278:	e01a      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b27a:	4bc0      	ldr	r3, [pc, #768]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b27e:	4abf      	ldr	r2, [pc, #764]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b284:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b286:	e01a      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b28c:	3308      	adds	r3, #8
 800b28e:	4618      	mov	r0, r3
 800b290:	f002 fcd6 	bl	800dc40 <RCCEx_PLL2_Config>
 800b294:	4603      	mov	r3, r0
 800b296:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b29a:	e010      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b29c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a0:	332c      	adds	r3, #44	@ 0x2c
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f002 fd64 	bl	800dd70 <RCCEx_PLL3_Config>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b2ae:	e006      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b2b6:	e002      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b2b8:	bf00      	nop
 800b2ba:	e000      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b2bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2be:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10d      	bne.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b2c6:	4bad      	ldr	r3, [pc, #692]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2cc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b2d8:	4aa8      	ldr	r2, [pc, #672]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2da:	430b      	orrs	r3, r1
 800b2dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b2e0:	e003      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2e6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b2ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b2f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b300:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b304:	460b      	mov	r3, r1
 800b306:	4313      	orrs	r3, r2
 800b308:	d053      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b30a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b30e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b316:	d033      	beq.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b31c:	d82c      	bhi.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b31e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b322:	d02f      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b328:	d826      	bhi.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b32a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b32e:	d008      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b334:	d820      	bhi.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b33a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b33e:	d011      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b340:	e01a      	b.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b342:	4b8e      	ldr	r3, [pc, #568]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b346:	4a8d      	ldr	r2, [pc, #564]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b34c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b34e:	e01a      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b354:	3308      	adds	r3, #8
 800b356:	4618      	mov	r0, r3
 800b358:	f002 fc72 	bl	800dc40 <RCCEx_PLL2_Config>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b362:	e010      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b368:	332c      	adds	r3, #44	@ 0x2c
 800b36a:	4618      	mov	r0, r3
 800b36c:	f002 fd00 	bl	800dd70 <RCCEx_PLL3_Config>
 800b370:	4603      	mov	r3, r0
 800b372:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b376:	e006      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b37e:	e002      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b380:	bf00      	nop
 800b382:	e000      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b384:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b386:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10d      	bne.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b38e:	4b7b      	ldr	r3, [pc, #492]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b394:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b39c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3a0:	4a76      	ldr	r2, [pc, #472]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3a2:	430b      	orrs	r3, r1
 800b3a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b3a8:	e003      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3aa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3ae:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b3be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b3c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	d046      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b3d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b3da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3de:	d028      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3e4:	d821      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3ea:	d022      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3f0:	d81b      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3f6:	d01c      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3fc:	d815      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b402:	d008      	beq.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b408:	d80f      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d011      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b40e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b412:	d00e      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b414:	e009      	b.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41a:	3308      	adds	r3, #8
 800b41c:	4618      	mov	r0, r3
 800b41e:	f002 fc0f 	bl	800dc40 <RCCEx_PLL2_Config>
 800b422:	4603      	mov	r3, r0
 800b424:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b428:	e004      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b430:	e000      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b432:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b434:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10d      	bne.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b43c:	4b4f      	ldr	r3, [pc, #316]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b43e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b442:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b44a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b44e:	4a4b      	ldr	r2, [pc, #300]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b450:	430b      	orrs	r3, r1
 800b452:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b456:	e003      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b458:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b45c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b468:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b46c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b470:	2300      	movs	r3, #0
 800b472:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b476:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b47a:	460b      	mov	r3, r1
 800b47c:	4313      	orrs	r3, r2
 800b47e:	d03f      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d81e      	bhi.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b48c:	a201      	add	r2, pc, #4	@ (adr r2, 800b494 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b492:	bf00      	nop
 800b494:	0800b4d3 	.word	0x0800b4d3
 800b498:	0800b4a9 	.word	0x0800b4a9
 800b49c:	0800b4b7 	.word	0x0800b4b7
 800b4a0:	0800b4d3 	.word	0x0800b4d3
 800b4a4:	0800b4d3 	.word	0x0800b4d3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4a8:	4b34      	ldr	r3, [pc, #208]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ac:	4a33      	ldr	r2, [pc, #204]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4b2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b4b4:	e00e      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ba:	332c      	adds	r3, #44	@ 0x2c
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f002 fc57 	bl	800dd70 <RCCEx_PLL3_Config>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4c8:	e004      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4d0:	e000      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b4d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b4d4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10d      	bne.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b4dc:	4b27      	ldr	r3, [pc, #156]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4e2:	f023 0107 	bic.w	r1, r3, #7
 800b4e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4ee:	4a23      	ldr	r2, [pc, #140]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b4f6:	e003      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4fc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b50c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b50e:	2300      	movs	r3, #0
 800b510:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b512:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b516:	460b      	mov	r3, r1
 800b518:	4313      	orrs	r3, r2
 800b51a:	d04c      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b520:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b524:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b528:	d02a      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b52a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b52e:	d821      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b530:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b534:	d026      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b536:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b53a:	d81b      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b53c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b540:	d00e      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b546:	d815      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d01d      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b54c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b550:	d110      	bne.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b552:	4b0a      	ldr	r3, [pc, #40]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b556:	4a09      	ldr	r2, [pc, #36]	@ (800b57c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b55c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b55e:	e014      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b564:	332c      	adds	r3, #44	@ 0x2c
 800b566:	4618      	mov	r0, r3
 800b568:	f002 fc02 	bl	800dd70 <RCCEx_PLL3_Config>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b572:	e00a      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b57a:	e006      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b57c:	46020c00 	.word	0x46020c00
        break;
 800b580:	bf00      	nop
 800b582:	e002      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b584:	bf00      	nop
 800b586:	e000      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b588:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b58a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10d      	bne.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b592:	4baf      	ldr	r3, [pc, #700]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b598:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5a4:	4aaa      	ldr	r2, [pc, #680]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5a6:	430b      	orrs	r3, r1
 800b5a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b5ac:	e003      	b.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5b2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b5c2:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	677b      	str	r3, [r7, #116]	@ 0x74
 800b5c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	f000 80b5 	beq.w	800b73e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5da:	4b9d      	ldr	r3, [pc, #628]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5e0:	f003 0304 	and.w	r3, r3, #4
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d113      	bne.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5e8:	4b99      	ldr	r3, [pc, #612]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5ee:	4a98      	ldr	r2, [pc, #608]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5f0:	f043 0304 	orr.w	r3, r3, #4
 800b5f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b5f8:	4b95      	ldr	r3, [pc, #596]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5fe:	f003 0304 	and.w	r3, r3, #4
 800b602:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b606:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b60a:	2301      	movs	r3, #1
 800b60c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b610:	4b90      	ldr	r3, [pc, #576]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b614:	4a8f      	ldr	r2, [pc, #572]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b616:	f043 0301 	orr.w	r3, r3, #1
 800b61a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b61c:	f7f7 fb40 	bl	8002ca0 <HAL_GetTick>
 800b620:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b624:	e00b      	b.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b626:	f7f7 fb3b 	bl	8002ca0 <HAL_GetTick>
 800b62a:	4602      	mov	r2, r0
 800b62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	2b02      	cmp	r3, #2
 800b634:	d903      	bls.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b63c:	e005      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b63e:	4b85      	ldr	r3, [pc, #532]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d0ed      	beq.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b64a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d165      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b652:	4b7f      	ldr	r3, [pc, #508]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b65c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b664:	2b00      	cmp	r3, #0
 800b666:	d023      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b66c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b670:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b674:	4293      	cmp	r3, r2
 800b676:	d01b      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b678:	4b75      	ldr	r3, [pc, #468]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b67a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b67e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b682:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b686:	4b72      	ldr	r3, [pc, #456]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b68c:	4a70      	ldr	r2, [pc, #448]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b68e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b692:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b696:	4b6e      	ldr	r3, [pc, #440]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b69c:	4a6c      	ldr	r2, [pc, #432]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b69e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b6a6:	4a6a      	ldr	r2, [pc, #424]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b6b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d019      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6bc:	f7f7 faf0 	bl	8002ca0 <HAL_GetTick>
 800b6c0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6c4:	e00d      	b.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6c6:	f7f7 faeb 	bl	8002ca0 <HAL_GetTick>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6d0:	1ad2      	subs	r2, r2, r3
 800b6d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d903      	bls.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b6e0:	e006      	b.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6e2:	4b5b      	ldr	r3, [pc, #364]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6e8:	f003 0302 	and.w	r3, r3, #2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0ea      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b6f0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10d      	bne.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b6f8:	4b55      	ldr	r3, [pc, #340]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b706:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b70a:	4a51      	ldr	r2, [pc, #324]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b70c:	430b      	orrs	r3, r1
 800b70e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b712:	e008      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b714:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b718:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b71c:	e003      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b71e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b722:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b726:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d107      	bne.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b72e:	4b48      	ldr	r3, [pc, #288]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b734:	4a46      	ldr	r2, [pc, #280]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b736:	f023 0304 	bic.w	r3, r3, #4
 800b73a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b73e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b74a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b74c:	2300      	movs	r3, #0
 800b74e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b750:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b754:	460b      	mov	r3, r1
 800b756:	4313      	orrs	r3, r2
 800b758:	d042      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b75a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b75e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b762:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b766:	d022      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b768:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b76c:	d81b      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b76e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b772:	d011      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b778:	d815      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d019      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b77e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b782:	d110      	bne.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b788:	3308      	adds	r3, #8
 800b78a:	4618      	mov	r0, r3
 800b78c:	f002 fa58 	bl	800dc40 <RCCEx_PLL2_Config>
 800b790:	4603      	mov	r3, r0
 800b792:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b796:	e00d      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b798:	4b2d      	ldr	r3, [pc, #180]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b79a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b79c:	4a2c      	ldr	r2, [pc, #176]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b79e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7a2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b7a4:	e006      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7ac:	e002      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b7ae:	bf00      	nop
 800b7b0:	e000      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b7b2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b7b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10d      	bne.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b7bc:	4b24      	ldr	r3, [pc, #144]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b7c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b7ce:	4a20      	ldr	r2, [pc, #128]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7d0:	430b      	orrs	r3, r1
 800b7d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b7d6:	e003      	b.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7dc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b7e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b7ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b7f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	d031      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b7fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b808:	d00b      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b80a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b80e:	d804      	bhi.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b810:	2b00      	cmp	r3, #0
 800b812:	d008      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b818:	d007      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b820:	e004      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b822:	bf00      	nop
 800b824:	e002      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b826:	bf00      	nop
 800b828:	e000      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b82a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b82c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b830:	2b00      	cmp	r3, #0
 800b832:	d111      	bne.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b834:	4b06      	ldr	r3, [pc, #24]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b836:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b83a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b83e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b842:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b846:	4a02      	ldr	r2, [pc, #8]	@ (800b850 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b848:	430b      	orrs	r3, r1
 800b84a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b84e:	e007      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b850:	46020c00 	.word	0x46020c00
 800b854:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b858:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b85c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b86c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b86e:	2300      	movs	r3, #0
 800b870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b872:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b876:	460b      	mov	r3, r1
 800b878:	4313      	orrs	r3, r2
 800b87a:	d00c      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b87c:	4bb2      	ldr	r3, [pc, #712]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b87e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b882:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b88a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b88e:	4aae      	ldr	r2, [pc, #696]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b890:	430b      	orrs	r3, r1
 800b892:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b8a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8a8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	d019      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b8b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b8ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8be:	d105      	bne.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b8c0:	4ba1      	ldr	r3, [pc, #644]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c4:	4aa0      	ldr	r2, [pc, #640]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8ca:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b8cc:	4b9e      	ldr	r3, [pc, #632]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b8d2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b8d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b8de:	4a9a      	ldr	r2, [pc, #616]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8e0:	430b      	orrs	r3, r1
 800b8e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b8e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b8f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4313      	orrs	r3, r2
 800b900:	d00c      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b902:	4b91      	ldr	r3, [pc, #580]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b908:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b90c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b910:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b914:	4a8c      	ldr	r2, [pc, #560]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b916:	430b      	orrs	r3, r1
 800b918:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b928:	643b      	str	r3, [r7, #64]	@ 0x40
 800b92a:	2300      	movs	r3, #0
 800b92c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b92e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b932:	460b      	mov	r3, r1
 800b934:	4313      	orrs	r3, r2
 800b936:	d00c      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b938:	4b83      	ldr	r3, [pc, #524]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b93a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b93e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b946:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b94a:	4a7f      	ldr	r2, [pc, #508]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b94c:	430b      	orrs	r3, r1
 800b94e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b95e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b960:	2300      	movs	r3, #0
 800b962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b964:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b968:	460b      	mov	r3, r1
 800b96a:	4313      	orrs	r3, r2
 800b96c:	d00c      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b96e:	4b76      	ldr	r3, [pc, #472]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b974:	f023 0118 	bic.w	r1, r3, #24
 800b978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b97c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b980:	4a71      	ldr	r2, [pc, #452]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b982:	430b      	orrs	r3, r1
 800b984:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b994:	633b      	str	r3, [r7, #48]	@ 0x30
 800b996:	2300      	movs	r3, #0
 800b998:	637b      	str	r3, [r7, #52]	@ 0x34
 800b99a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	d032      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b9a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9b0:	d105      	bne.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b2:	4b65      	ldr	r3, [pc, #404]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b6:	4a64      	ldr	r2, [pc, #400]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9bc:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9ca:	d108      	bne.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b9cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f002 f934 	bl	800dc40 <RCCEx_PLL2_Config>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b9de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10d      	bne.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b9e6:	4b58      	ldr	r3, [pc, #352]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b9ec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b9f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9f8:	4a53      	ldr	r2, [pc, #332]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9fa:	430b      	orrs	r3, r1
 800b9fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ba00:	e003      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba02:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba06:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800ba0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	2100      	movs	r1, #0
 800ba14:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ba20:	460b      	mov	r3, r1
 800ba22:	4313      	orrs	r3, r2
 800ba24:	d04a      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800ba26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba32:	d01e      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800ba34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba38:	d825      	bhi.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ba3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba3e:	d00e      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800ba40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba44:	d81f      	bhi.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d021      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800ba4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba4e:	d11a      	bne.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba50:	4b3d      	ldr	r3, [pc, #244]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba54:	4a3c      	ldr	r2, [pc, #240]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba5a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba5c:	e018      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba62:	3308      	adds	r3, #8
 800ba64:	4618      	mov	r0, r3
 800ba66:	f002 f8eb 	bl	800dc40 <RCCEx_PLL2_Config>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba70:	e00e      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba76:	332c      	adds	r3, #44	@ 0x2c
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f002 f979 	bl	800dd70 <RCCEx_PLL3_Config>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba84:	e004      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ba8c:	e000      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800ba8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba90:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10d      	bne.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800ba98:	4b2b      	ldr	r3, [pc, #172]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800baa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800baaa:	4927      	ldr	r1, [pc, #156]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baac:	4313      	orrs	r3, r2
 800baae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bab2:	e003      	b.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bab8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800babc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800bac8:	623b      	str	r3, [r7, #32]
 800baca:	2300      	movs	r3, #0
 800bacc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bace:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bad2:	460b      	mov	r3, r1
 800bad4:	4313      	orrs	r3, r2
 800bad6:	d03d      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800bad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800badc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bae4:	d00e      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800bae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800baea:	d815      	bhi.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800baec:	2b00      	cmp	r3, #0
 800baee:	d017      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800baf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800baf4:	d110      	bne.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baf6:	4b14      	ldr	r3, [pc, #80]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800baf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafa:	4a13      	ldr	r2, [pc, #76]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bafc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb00:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bb02:	e00e      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb08:	3308      	adds	r3, #8
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f002 f898 	bl	800dc40 <RCCEx_PLL2_Config>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bb16:	e004      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb1e:	e000      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bb20:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bb22:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d110      	bne.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bb2a:	4b07      	ldr	r3, [pc, #28]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bb34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb3c:	4902      	ldr	r1, [pc, #8]	@ (800bb48 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bb44:	e006      	b.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bb46:	bf00      	nop
 800bb48:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb4c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb50:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bb54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bb60:	61bb      	str	r3, [r7, #24]
 800bb62:	2300      	movs	r3, #0
 800bb64:	61fb      	str	r3, [r7, #28]
 800bb66:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	d00c      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bb70:	4b68      	ldr	r3, [pc, #416]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb76:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bb7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bb82:	4964      	ldr	r1, [pc, #400]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb84:	4313      	orrs	r3, r2
 800bb86:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	2100      	movs	r1, #0
 800bb94:	6139      	str	r1, [r7, #16]
 800bb96:	f003 0302 	and.w	r3, r3, #2
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bba0:	460b      	mov	r3, r1
 800bba2:	4313      	orrs	r3, r2
 800bba4:	d036      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00c      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bbb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bbb6:	d113      	bne.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bbb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f002 f83e 	bl	800dc40 <RCCEx_PLL2_Config>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bbca:	e00d      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd0:	332c      	adds	r3, #44	@ 0x2c
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f002 f8cc 	bl	800dd70 <RCCEx_PLL3_Config>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bbde:	e003      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bbe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbe8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10d      	bne.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bbf0:	4b48      	ldr	r3, [pc, #288]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbf6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bbfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bc02:	4944      	ldr	r1, [pc, #272]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc0a:	e003      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc10:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bc14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	60b9      	str	r1, [r7, #8]
 800bc20:	f003 0304 	and.w	r3, r3, #4
 800bc24:	60fb      	str	r3, [r7, #12]
 800bc26:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	d024      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bc30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d108      	bne.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc40:	332c      	adds	r3, #44	@ 0x2c
 800bc42:	4618      	mov	r0, r3
 800bc44:	f002 f894 	bl	800dd70 <RCCEx_PLL3_Config>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bc4e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10d      	bne.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800bc56:	4b2f      	ldr	r3, [pc, #188]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc5c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bc60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc68:	492a      	ldr	r1, [pc, #168]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc70:	e003      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc72:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc76:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bc7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc82:	2100      	movs	r1, #0
 800bc84:	6039      	str	r1, [r7, #0]
 800bc86:	f003 0308 	and.w	r3, r3, #8
 800bc8a:	607b      	str	r3, [r7, #4]
 800bc8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc90:	460b      	mov	r3, r1
 800bc92:	4313      	orrs	r3, r2
 800bc94:	d036      	beq.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800bc96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bc9e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bca2:	d00d      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800bca4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bca8:	d811      	bhi.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bcaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcae:	d012      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bcb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcb4:	d80b      	bhi.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00d      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bcba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcbe:	d106      	bne.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bcc0:	4b14      	ldr	r3, [pc, #80]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc4:	4a13      	ldr	r2, [pc, #76]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bcca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800bccc:	e004      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bcd4:	e000      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800bcd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcd8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10d      	bne.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800bce0:	4b0c      	ldr	r3, [pc, #48]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bce2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bce6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bcea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bcf2:	4908      	ldr	r1, [pc, #32]	@ (800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bcfa:	e003      	b.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcfc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd00:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bd04:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd14:	46020c00 	.word	0x46020c00

0800bd18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b089      	sub	sp, #36	@ 0x24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bd20:	4ba6      	ldr	r3, [pc, #664]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd28:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bd2a:	4ba4      	ldr	r3, [pc, #656]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd2e:	f003 0303 	and.w	r3, r3, #3
 800bd32:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bd34:	4ba1      	ldr	r3, [pc, #644]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd38:	0a1b      	lsrs	r3, r3, #8
 800bd3a:	f003 030f 	and.w	r3, r3, #15
 800bd3e:	3301      	adds	r3, #1
 800bd40:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bd42:	4b9e      	ldr	r3, [pc, #632]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd46:	091b      	lsrs	r3, r3, #4
 800bd48:	f003 0301 	and.w	r3, r3, #1
 800bd4c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bd4e:	4b9b      	ldr	r3, [pc, #620]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd52:	08db      	lsrs	r3, r3, #3
 800bd54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	fb02 f303 	mul.w	r3, r2, r3
 800bd5e:	ee07 3a90 	vmov	s15, r3
 800bd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd66:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d062      	beq.n	800be36 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	f200 8081 	bhi.w	800be7a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d024      	beq.n	800bdc8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	d17a      	bne.n	800be7a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bd92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd96:	4b89      	ldr	r3, [pc, #548]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9e:	ee07 3a90 	vmov	s15, r3
 800bda2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bda6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdaa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bfc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bdae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdc6:	e08f      	b.n	800bee8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bdc8:	4b7c      	ldr	r3, [pc, #496]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d005      	beq.n	800bde0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800bdd4:	4b79      	ldr	r3, [pc, #484]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	0f1b      	lsrs	r3, r3, #28
 800bdda:	f003 030f 	and.w	r3, r3, #15
 800bdde:	e006      	b.n	800bdee <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800bde0:	4b76      	ldr	r3, [pc, #472]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bde2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bde6:	041b      	lsls	r3, r3, #16
 800bde8:	0f1b      	lsrs	r3, r3, #28
 800bdea:	f003 030f 	and.w	r3, r3, #15
 800bdee:	4a76      	ldr	r2, [pc, #472]	@ (800bfc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf4:	ee07 3a90 	vmov	s15, r3
 800bdf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	ee07 3a90 	vmov	s15, r3
 800be02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	ee07 3a90 	vmov	s15, r3
 800be10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be14:	ed97 6a02 	vldr	s12, [r7, #8]
 800be18:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bfc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be28:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be34:	e058      	b.n	800bee8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	ee07 3a90 	vmov	s15, r3
 800be3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be40:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800be44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be48:	4b5c      	ldr	r3, [pc, #368]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be50:	ee07 3a90 	vmov	s15, r3
 800be54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be58:	ed97 6a02 	vldr	s12, [r7, #8]
 800be5c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bfc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be60:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be78:	e036      	b.n	800bee8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be7a:	4b50      	ldr	r3, [pc, #320]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be82:	2b00      	cmp	r3, #0
 800be84:	d005      	beq.n	800be92 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800be86:	4b4d      	ldr	r3, [pc, #308]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	0f1b      	lsrs	r3, r3, #28
 800be8c:	f003 030f 	and.w	r3, r3, #15
 800be90:	e006      	b.n	800bea0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800be92:	4b4a      	ldr	r3, [pc, #296]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be98:	041b      	lsls	r3, r3, #16
 800be9a:	0f1b      	lsrs	r3, r3, #28
 800be9c:	f003 030f 	and.w	r3, r3, #15
 800bea0:	4a49      	ldr	r2, [pc, #292]	@ (800bfc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea6:	ee07 3a90 	vmov	s15, r3
 800beaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	ee07 3a90 	vmov	s15, r3
 800beb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	ee07 3a90 	vmov	s15, r3
 800bec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec6:	ed97 6a02 	vldr	s12, [r7, #8]
 800beca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bfc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800beda:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bee6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800bee8:	4b34      	ldr	r3, [pc, #208]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800beea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d017      	beq.n	800bf24 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bef4:	4b31      	ldr	r3, [pc, #196]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bef8:	0a5b      	lsrs	r3, r3, #9
 800befa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800befe:	ee07 3a90 	vmov	s15, r3
 800bf02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800bf06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf0a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf1a:	ee17 2a90 	vmov	r2, s15
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	e002      	b.n	800bf2a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800bf2a:	4b24      	ldr	r3, [pc, #144]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d017      	beq.n	800bf66 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf36:	4b21      	ldr	r3, [pc, #132]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf3a:	0c1b      	lsrs	r3, r3, #16
 800bf3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf40:	ee07 3a90 	vmov	s15, r3
 800bf44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800bf48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf4c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf50:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf5c:	ee17 2a90 	vmov	r2, s15
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	605a      	str	r2, [r3, #4]
 800bf64:	e002      	b.n	800bf6c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bf6c:	4b13      	ldr	r3, [pc, #76]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d017      	beq.n	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf78:	4b10      	ldr	r3, [pc, #64]	@ (800bfbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf7c:	0e1b      	lsrs	r3, r3, #24
 800bf7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf82:	ee07 3a90 	vmov	s15, r3
 800bf86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800bf8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf8e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf92:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf9e:	ee17 2a90 	vmov	r2, s15
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bfa6:	e002      	b.n	800bfae <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	609a      	str	r2, [r3, #8]
}
 800bfae:	bf00      	nop
 800bfb0:	3724      	adds	r7, #36	@ 0x24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	46020c00 	.word	0x46020c00
 800bfc0:	4b742400 	.word	0x4b742400
 800bfc4:	46000000 	.word	0x46000000
 800bfc8:	0801193c 	.word	0x0801193c

0800bfcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b089      	sub	sp, #36	@ 0x24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800bfd4:	4ba6      	ldr	r3, [pc, #664]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfdc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800bfde:	4ba4      	ldr	r3, [pc, #656]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe2:	f003 0303 	and.w	r3, r3, #3
 800bfe6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800bfe8:	4ba1      	ldr	r3, [pc, #644]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfec:	0a1b      	lsrs	r3, r3, #8
 800bfee:	f003 030f 	and.w	r3, r3, #15
 800bff2:	3301      	adds	r3, #1
 800bff4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800bff6:	4b9e      	ldr	r3, [pc, #632]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bffa:	091b      	lsrs	r3, r3, #4
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c002:	4b9b      	ldr	r3, [pc, #620]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c006:	08db      	lsrs	r3, r3, #3
 800c008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
 800c012:	ee07 3a90 	vmov	s15, r3
 800c016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c01a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2b03      	cmp	r3, #3
 800c022:	d062      	beq.n	800c0ea <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	2b03      	cmp	r3, #3
 800c028:	f200 8081 	bhi.w	800c12e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d024      	beq.n	800c07c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	2b02      	cmp	r3, #2
 800c036:	d17a      	bne.n	800c12e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c042:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c04a:	4b89      	ldr	r3, [pc, #548]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c04c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c05a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c05e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c278 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c062:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c066:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c06a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c07a:	e08f      	b.n	800c19c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c07c:	4b7c      	ldr	r3, [pc, #496]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d005      	beq.n	800c094 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c088:	4b79      	ldr	r3, [pc, #484]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	0f1b      	lsrs	r3, r3, #28
 800c08e:	f003 030f 	and.w	r3, r3, #15
 800c092:	e006      	b.n	800c0a2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c094:	4b76      	ldr	r3, [pc, #472]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c09a:	041b      	lsls	r3, r3, #16
 800c09c:	0f1b      	lsrs	r3, r3, #28
 800c09e:	f003 030f 	and.w	r3, r3, #15
 800c0a2:	4a76      	ldr	r2, [pc, #472]	@ (800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	ee07 3a90 	vmov	s15, r3
 800c0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c8:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0cc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c278 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c0d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c0e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0e8:	e058      	b.n	800c19c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	ee07 3a90 	vmov	s15, r3
 800c0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c0f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c104:	ee07 3a90 	vmov	s15, r3
 800c108:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c10c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c110:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c278 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c114:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c118:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c11c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c120:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c124:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c128:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c12c:	e036      	b.n	800c19c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c12e:	4b50      	ldr	r3, [pc, #320]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c13a:	4b4d      	ldr	r3, [pc, #308]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	0f1b      	lsrs	r3, r3, #28
 800c140:	f003 030f 	and.w	r3, r3, #15
 800c144:	e006      	b.n	800c154 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c146:	4b4a      	ldr	r3, [pc, #296]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c14c:	041b      	lsls	r3, r3, #16
 800c14e:	0f1b      	lsrs	r3, r3, #28
 800c150:	f003 030f 	and.w	r3, r3, #15
 800c154:	4a49      	ldr	r2, [pc, #292]	@ (800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c15a:	ee07 3a90 	vmov	s15, r3
 800c15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	ee07 3a90 	vmov	s15, r3
 800c168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c16c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	ee07 3a90 	vmov	s15, r3
 800c176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c17a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c17e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c278 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c18a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c19a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c19c:	4b34      	ldr	r3, [pc, #208]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d017      	beq.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1a8:	4b31      	ldr	r3, [pc, #196]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ac:	0a5b      	lsrs	r3, r3, #9
 800c1ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1b2:	ee07 3a90 	vmov	s15, r3
 800c1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c1ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1be:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ce:	ee17 2a90 	vmov	r2, s15
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	e002      	b.n	800c1de <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c1de:	4b24      	ldr	r3, [pc, #144]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d017      	beq.n	800c21a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1ea:	4b21      	ldr	r3, [pc, #132]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ee:	0c1b      	lsrs	r3, r3, #16
 800c1f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1f4:	ee07 3a90 	vmov	s15, r3
 800c1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c1fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c200:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c204:	edd7 6a07 	vldr	s13, [r7, #28]
 800c208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c20c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c210:	ee17 2a90 	vmov	r2, s15
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	605a      	str	r2, [r3, #4]
 800c218:	e002      	b.n	800c220 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c220:	4b13      	ldr	r3, [pc, #76]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c224:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d017      	beq.n	800c25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c22c:	4b10      	ldr	r3, [pc, #64]	@ (800c270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c22e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c230:	0e1b      	lsrs	r3, r3, #24
 800c232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c236:	ee07 3a90 	vmov	s15, r3
 800c23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c23e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c242:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c246:	edd7 6a07 	vldr	s13, [r7, #28]
 800c24a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c24e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c252:	ee17 2a90 	vmov	r2, s15
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c25a:	e002      	b.n	800c262 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	609a      	str	r2, [r3, #8]
}
 800c262:	bf00      	nop
 800c264:	3724      	adds	r7, #36	@ 0x24
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	46020c00 	.word	0x46020c00
 800c274:	4b742400 	.word	0x4b742400
 800c278:	46000000 	.word	0x46000000
 800c27c:	0801193c 	.word	0x0801193c

0800c280 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c280:	b480      	push	{r7}
 800c282:	b089      	sub	sp, #36	@ 0x24
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c288:	4ba6      	ldr	r3, [pc, #664]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c28a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c28c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c290:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c292:	4ba4      	ldr	r3, [pc, #656]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c296:	f003 0303 	and.w	r3, r3, #3
 800c29a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c29c:	4ba1      	ldr	r3, [pc, #644]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a0:	0a1b      	lsrs	r3, r3, #8
 800c2a2:	f003 030f 	and.w	r3, r3, #15
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c2aa:	4b9e      	ldr	r3, [pc, #632]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ae:	091b      	lsrs	r3, r3, #4
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c2b6:	4b9b      	ldr	r3, [pc, #620]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2ba:	08db      	lsrs	r3, r3, #3
 800c2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	fb02 f303 	mul.w	r3, r2, r3
 800c2c6:	ee07 3a90 	vmov	s15, r3
 800c2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	d062      	beq.n	800c39e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	2b03      	cmp	r3, #3
 800c2dc:	f200 8081 	bhi.w	800c3e2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d024      	beq.n	800c330 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2b02      	cmp	r3, #2
 800c2ea:	d17a      	bne.n	800c3e2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	ee07 3a90 	vmov	s15, r3
 800c2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2f6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2fe:	4b89      	ldr	r3, [pc, #548]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c306:	ee07 3a90 	vmov	s15, r3
 800c30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c30e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c312:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c316:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c31e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c322:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c32a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c32e:	e08f      	b.n	800c450 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c330:	4b7c      	ldr	r3, [pc, #496]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d005      	beq.n	800c348 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c33c:	4b79      	ldr	r3, [pc, #484]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	0f1b      	lsrs	r3, r3, #28
 800c342:	f003 030f 	and.w	r3, r3, #15
 800c346:	e006      	b.n	800c356 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c348:	4b76      	ldr	r3, [pc, #472]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c34a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c34e:	041b      	lsls	r3, r3, #16
 800c350:	0f1b      	lsrs	r3, r3, #28
 800c352:	f003 030f 	and.w	r3, r3, #15
 800c356:	4a76      	ldr	r2, [pc, #472]	@ (800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c35c:	ee07 3a90 	vmov	s15, r3
 800c360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	ee07 3a90 	vmov	s15, r3
 800c36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	ee07 3a90 	vmov	s15, r3
 800c378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c37c:	ed97 6a02 	vldr	s12, [r7, #8]
 800c380:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c38c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c390:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c394:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c398:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c39c:	e058      	b.n	800c450 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	ee07 3a90 	vmov	s15, r3
 800c3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3a8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c3ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3b0:	4b5c      	ldr	r3, [pc, #368]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b8:	ee07 3a90 	vmov	s15, r3
 800c3bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3c0:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3c4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c3c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c3cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c3d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3e0:	e036      	b.n	800c450 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c3e2:	4b50      	ldr	r3, [pc, #320]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d005      	beq.n	800c3fa <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c3ee:	4b4d      	ldr	r3, [pc, #308]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	0f1b      	lsrs	r3, r3, #28
 800c3f4:	f003 030f 	and.w	r3, r3, #15
 800c3f8:	e006      	b.n	800c408 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c3fa:	4b4a      	ldr	r3, [pc, #296]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c400:	041b      	lsls	r3, r3, #16
 800c402:	0f1b      	lsrs	r3, r3, #28
 800c404:	f003 030f 	and.w	r3, r3, #15
 800c408:	4a49      	ldr	r2, [pc, #292]	@ (800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c40a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c40e:	ee07 3a90 	vmov	s15, r3
 800c412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	ee07 3a90 	vmov	s15, r3
 800c41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	ee07 3a90 	vmov	s15, r3
 800c42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c42e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c432:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c43e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c442:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c44a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c44e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c450:	4b34      	ldr	r3, [pc, #208]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d017      	beq.n	800c48c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c45c:	4b31      	ldr	r3, [pc, #196]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c45e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c460:	0a5b      	lsrs	r3, r3, #9
 800c462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c466:	ee07 3a90 	vmov	s15, r3
 800c46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c46e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c472:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c476:	edd7 6a07 	vldr	s13, [r7, #28]
 800c47a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c47e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c482:	ee17 2a90 	vmov	r2, s15
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	e002      	b.n	800c492 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c492:	4b24      	ldr	r3, [pc, #144]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d017      	beq.n	800c4ce <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c49e:	4b21      	ldr	r3, [pc, #132]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4a2:	0c1b      	lsrs	r3, r3, #16
 800c4a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4a8:	ee07 3a90 	vmov	s15, r3
 800c4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c4b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4c4:	ee17 2a90 	vmov	r2, s15
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	605a      	str	r2, [r3, #4]
 800c4cc:	e002      	b.n	800c4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c4d4:	4b13      	ldr	r3, [pc, #76]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d017      	beq.n	800c510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4e0:	4b10      	ldr	r3, [pc, #64]	@ (800c524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4e4:	0e1b      	lsrs	r3, r3, #24
 800c4e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4ea:	ee07 3a90 	vmov	s15, r3
 800c4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c4f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c506:	ee17 2a90 	vmov	r2, s15
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c50e:	e002      	b.n	800c516 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	609a      	str	r2, [r3, #8]
}
 800c516:	bf00      	nop
 800c518:	3724      	adds	r7, #36	@ 0x24
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	46020c00 	.word	0x46020c00
 800c528:	4b742400 	.word	0x4b742400
 800c52c:	46000000 	.word	0x46000000
 800c530:	0801193c 	.word	0x0801193c

0800c534 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08e      	sub	sp, #56	@ 0x38
 800c538:	af00      	add	r7, sp, #0
 800c53a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c53e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c542:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c546:	430b      	orrs	r3, r1
 800c548:	d145      	bne.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c54a:	4ba7      	ldr	r3, [pc, #668]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c54c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c554:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c556:	4ba4      	ldr	r3, [pc, #656]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c55c:	f003 0302 	and.w	r3, r3, #2
 800c560:	2b02      	cmp	r3, #2
 800c562:	d108      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c56a:	d104      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c56c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c570:	637b      	str	r3, [r7, #52]	@ 0x34
 800c572:	f001 bb5a 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c576:	4b9c      	ldr	r3, [pc, #624]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c57c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c580:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c584:	d114      	bne.n	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c58c:	d110      	bne.n	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c58e:	4b96      	ldr	r3, [pc, #600]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c59c:	d103      	bne.n	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c59e:	23fa      	movs	r3, #250	@ 0xfa
 800c5a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5a2:	f001 bb42 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c5a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c5aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5ac:	f001 bb3d 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c5b0:	4b8d      	ldr	r3, [pc, #564]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5bc:	d107      	bne.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5c4:	d103      	bne.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c5c6:	4b89      	ldr	r3, [pc, #548]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c5c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ca:	f001 bb2e 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5d2:	f001 bb2a 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c5d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5da:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c5de:	430b      	orrs	r3, r1
 800c5e0:	d151      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c5e2:	4b81      	ldr	r3, [pc, #516]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c5e8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c5ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f0:	2b80      	cmp	r3, #128	@ 0x80
 800c5f2:	d035      	beq.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f6:	2b80      	cmp	r3, #128	@ 0x80
 800c5f8:	d841      	bhi.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fc:	2b60      	cmp	r3, #96	@ 0x60
 800c5fe:	d02a      	beq.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c602:	2b60      	cmp	r3, #96	@ 0x60
 800c604:	d83b      	bhi.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c608:	2b40      	cmp	r3, #64	@ 0x40
 800c60a:	d009      	beq.n	800c620 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60e:	2b40      	cmp	r3, #64	@ 0x40
 800c610:	d835      	bhi.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00c      	beq.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d012      	beq.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c61e:	e02e      	b.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c624:	4618      	mov	r0, r3
 800c626:	f7ff fb77 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c62e:	f001 bafc 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c632:	f107 0318 	add.w	r3, r7, #24
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff fcc8 	bl	800bfcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c640:	f001 baf3 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c644:	f107 030c 	add.w	r3, r7, #12
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff fe19 	bl	800c280 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c652:	f001 baea 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c656:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c65a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c65c:	f001 bae5 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c660:	4b61      	ldr	r3, [pc, #388]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c66c:	d103      	bne.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c66e:	4b60      	ldr	r3, [pc, #384]	@ (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c670:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c672:	f001 bada 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c676:	2300      	movs	r3, #0
 800c678:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c67a:	f001 bad6 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c682:	f001 bad2 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c68a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c68e:	430b      	orrs	r3, r1
 800c690:	d158      	bne.n	800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c692:	4b55      	ldr	r3, [pc, #340]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c694:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c698:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c69c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6a4:	d03b      	beq.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6ac:	d846      	bhi.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6b4:	d02e      	beq.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6bc:	d83e      	bhi.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6c4:	d00b      	beq.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6cc:	d836      	bhi.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00d      	beq.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6da:	d012      	beq.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c6dc:	e02e      	b.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff fb18 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6ec:	f001 ba9d 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f0:	f107 0318 	add.w	r3, r7, #24
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7ff fc69 	bl	800bfcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6fe:	f001 ba94 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c702:	f107 030c 	add.w	r3, r7, #12
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff fdba 	bl	800c280 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c710:	f001 ba8b 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c714:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c718:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c71a:	f001 ba86 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c71e:	4b32      	ldr	r3, [pc, #200]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c72a:	d103      	bne.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c72c:	4b30      	ldr	r3, [pc, #192]	@ (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c72e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c730:	f001 ba7b 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c734:	2300      	movs	r3, #0
 800c736:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c738:	f001 ba77 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c73c:	2300      	movs	r3, #0
 800c73e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c740:	f001 ba73 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c744:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c748:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c74c:	430b      	orrs	r3, r1
 800c74e:	d126      	bne.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c750:	4b25      	ldr	r3, [pc, #148]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c752:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c75a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c75c:	4b22      	ldr	r3, [pc, #136]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c768:	d106      	bne.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d103      	bne.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c770:	4b1f      	ldr	r3, [pc, #124]	@ (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c772:	637b      	str	r3, [r7, #52]	@ 0x34
 800c774:	f001 ba59 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c778:	4b1b      	ldr	r3, [pc, #108]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c784:	d107      	bne.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c78c:	d103      	bne.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c78e:	4b19      	ldr	r3, [pc, #100]	@ (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c790:	637b      	str	r3, [r7, #52]	@ 0x34
 800c792:	f001 ba4a 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	637b      	str	r3, [r7, #52]	@ 0x34
 800c79a:	f001 ba46 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c79e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7a2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c7a6:	430b      	orrs	r3, r1
 800c7a8:	d16e      	bne.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c7aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c7ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7b0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c7b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c7bc:	d03d      	beq.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c7c4:	d85c      	bhi.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7cc:	d014      	beq.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7d4:	d854      	bhi.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d01f      	beq.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7e2:	d012      	beq.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c7e4:	e04c      	b.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c7e6:	bf00      	nop
 800c7e8:	46020c00 	.word	0x46020c00
 800c7ec:	0007a120 	.word	0x0007a120
 800c7f0:	00f42400 	.word	0x00f42400
 800c7f4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7ff fa8b 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c804:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c806:	f001 ba10 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c80a:	f107 0318 	add.w	r3, r7, #24
 800c80e:	4618      	mov	r0, r3
 800c810:	f7ff fbdc 	bl	800bfcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c818:	f001 ba07 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c81c:	4ba7      	ldr	r3, [pc, #668]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c828:	d103      	bne.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c82a:	4ba5      	ldr	r3, [pc, #660]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c82c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c82e:	f001 b9fc 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c832:	2300      	movs	r3, #0
 800c834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c836:	f001 b9f8 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c83a:	4ba0      	ldr	r3, [pc, #640]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f003 0320 	and.w	r3, r3, #32
 800c842:	2b20      	cmp	r3, #32
 800c844:	d118      	bne.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c846:	4b9d      	ldr	r3, [pc, #628]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d005      	beq.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c852:	4b9a      	ldr	r3, [pc, #616]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	0e1b      	lsrs	r3, r3, #24
 800c858:	f003 030f 	and.w	r3, r3, #15
 800c85c:	e006      	b.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c85e:	4b97      	ldr	r3, [pc, #604]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c864:	041b      	lsls	r3, r3, #16
 800c866:	0e1b      	lsrs	r3, r3, #24
 800c868:	f003 030f 	and.w	r3, r3, #15
 800c86c:	4a95      	ldr	r2, [pc, #596]	@ (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c872:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c874:	f001 b9d9 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c878:	2300      	movs	r3, #0
 800c87a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c87c:	f001 b9d5 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c880:	2300      	movs	r3, #0
 800c882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c884:	f001 b9d1 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c88c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c890:	430b      	orrs	r3, r1
 800c892:	d17f      	bne.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c894:	4b89      	ldr	r3, [pc, #548]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c896:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c89a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c89e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d165      	bne.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c8a6:	4b85      	ldr	r3, [pc, #532]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c8ac:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c8b0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8b8:	d034      	beq.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8c0:	d853      	bhi.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8c8:	d00b      	beq.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8d0:	d84b      	bhi.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d016      	beq.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8de:	d009      	beq.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c8e0:	e043      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff fa16 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c8f0:	f001 b99b 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8f4:	f107 0318 	add.w	r3, r7, #24
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7ff fb67 	bl	800bfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c902:	f001 b992 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c906:	4b6d      	ldr	r3, [pc, #436]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c90e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c912:	d103      	bne.n	800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c914:	4b6a      	ldr	r3, [pc, #424]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c916:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c918:	f001 b987 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c91c:	2300      	movs	r3, #0
 800c91e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c920:	f001 b983 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c924:	4b65      	ldr	r3, [pc, #404]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f003 0320 	and.w	r3, r3, #32
 800c92c:	2b20      	cmp	r3, #32
 800c92e:	d118      	bne.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c930:	4b62      	ldr	r3, [pc, #392]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d005      	beq.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c93c:	4b5f      	ldr	r3, [pc, #380]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	0e1b      	lsrs	r3, r3, #24
 800c942:	f003 030f 	and.w	r3, r3, #15
 800c946:	e006      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c948:	4b5c      	ldr	r3, [pc, #368]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c94a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c94e:	041b      	lsls	r3, r3, #16
 800c950:	0e1b      	lsrs	r3, r3, #24
 800c952:	f003 030f 	and.w	r3, r3, #15
 800c956:	4a5b      	ldr	r2, [pc, #364]	@ (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c95c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c95e:	f001 b964 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c962:	2300      	movs	r3, #0
 800c964:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c966:	f001 b960 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c96e:	f001 b95c 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c978:	d108      	bne.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c97a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff f9ca 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c986:	637b      	str	r3, [r7, #52]	@ 0x34
 800c988:	f001 b94f 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c98c:	2300      	movs	r3, #0
 800c98e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c990:	f001 b94b 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c994:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c998:	1e51      	subs	r1, r2, #1
 800c99a:	430b      	orrs	r3, r1
 800c99c:	d136      	bne.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c99e:	4b47      	ldr	r3, [pc, #284]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9a4:	f003 0303 	and.w	r3, r3, #3
 800c9a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d104      	bne.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c9b0:	f7fe f9cc 	bl	800ad4c <HAL_RCC_GetPCLK2Freq>
 800c9b4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9b6:	f001 b938 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d104      	bne.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c9c0:	f7fe f894 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800c9c4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9c6:	f001 b930 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c9ca:	4b3c      	ldr	r3, [pc, #240]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9d6:	d106      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d103      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c9de:	4b3a      	ldr	r3, [pc, #232]	@ (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c9e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9e2:	f001 b922 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c9e6:	4b35      	ldr	r3, [pc, #212]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c9ec:	f003 0302 	and.w	r3, r3, #2
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d107      	bne.n	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f6:	2b03      	cmp	r3, #3
 800c9f8:	d104      	bne.n	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c9fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca00:	f001 b913 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ca04:	2300      	movs	r3, #0
 800ca06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca08:	f001 b90f 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ca0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca10:	1e91      	subs	r1, r2, #2
 800ca12:	430b      	orrs	r3, r1
 800ca14:	d136      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ca16:	4b29      	ldr	r3, [pc, #164]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca1c:	f003 030c 	and.w	r3, r3, #12
 800ca20:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d104      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca28:	f7fe f97c 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800ca2c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca2e:	f001 b8fc 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ca32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca34:	2b04      	cmp	r3, #4
 800ca36:	d104      	bne.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca38:	f7fe f858 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800ca3c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca3e:	f001 b8f4 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ca42:	4b1e      	ldr	r3, [pc, #120]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca4e:	d106      	bne.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ca50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca52:	2b08      	cmp	r3, #8
 800ca54:	d103      	bne.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ca56:	4b1c      	ldr	r3, [pc, #112]	@ (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ca58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca5a:	f001 b8e6 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ca5e:	4b17      	ldr	r3, [pc, #92]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca64:	f003 0302 	and.w	r3, r3, #2
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d107      	bne.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6e:	2b0c      	cmp	r3, #12
 800ca70:	d104      	bne.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ca72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca78:	f001 b8d7 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca80:	f001 b8d3 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ca84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca88:	1f11      	subs	r1, r2, #4
 800ca8a:	430b      	orrs	r3, r1
 800ca8c:	d13f      	bne.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ca8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ca98:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d104      	bne.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800caa0:	f7fe f940 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800caa4:	6378      	str	r0, [r7, #52]	@ 0x34
 800caa6:	f001 b8c0 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800caaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caac:	2b10      	cmp	r3, #16
 800caae:	d10d      	bne.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cab0:	f7fe f81c 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800cab4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cab6:	f001 b8b8 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800caba:	bf00      	nop
 800cabc:	46020c00 	.word	0x46020c00
 800cac0:	02dc6c00 	.word	0x02dc6c00
 800cac4:	0801193c 	.word	0x0801193c
 800cac8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800cacc:	4ba8      	ldr	r3, [pc, #672]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cad8:	d106      	bne.n	800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800cada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cadc:	2b20      	cmp	r3, #32
 800cade:	d103      	bne.n	800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800cae0:	4ba4      	ldr	r3, [pc, #656]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cae2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cae4:	f001 b8a1 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800cae8:	4ba1      	ldr	r3, [pc, #644]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800caea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800caee:	f003 0302 	and.w	r3, r3, #2
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	d107      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800caf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf8:	2b30      	cmp	r3, #48	@ 0x30
 800cafa:	d104      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800cafc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb02:	f001 b892 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb0a:	f001 b88e 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800cb0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb12:	f1a2 0108 	sub.w	r1, r2, #8
 800cb16:	430b      	orrs	r3, r1
 800cb18:	d136      	bne.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800cb1a:	4b95      	ldr	r3, [pc, #596]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb20:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cb24:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d104      	bne.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb2c:	f7fe f8fa 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800cb30:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb32:	f001 b87a 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800cb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb38:	2b40      	cmp	r3, #64	@ 0x40
 800cb3a:	d104      	bne.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb3c:	f7fd ffd6 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800cb40:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb42:	f001 b872 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800cb46:	4b8a      	ldr	r3, [pc, #552]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb52:	d106      	bne.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800cb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb56:	2b80      	cmp	r3, #128	@ 0x80
 800cb58:	d103      	bne.n	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800cb5a:	4b86      	ldr	r3, [pc, #536]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb5e:	f001 b864 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cb62:	4b83      	ldr	r3, [pc, #524]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d107      	bne.n	800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb72:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb74:	d104      	bne.n	800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cb76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb7c:	f001 b855 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cb80:	2300      	movs	r3, #0
 800cb82:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb84:	f001 b851 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cb88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb8c:	f1a2 0110 	sub.w	r1, r2, #16
 800cb90:	430b      	orrs	r3, r1
 800cb92:	d139      	bne.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cb94:	4b76      	ldr	r3, [pc, #472]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d104      	bne.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cba6:	f7fe f8bd 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800cbaa:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbac:	f001 b83d 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbb6:	d104      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbb8:	f7fd ff98 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800cbbc:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbbe:	f001 b834 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cbc2:	4b6b      	ldr	r3, [pc, #428]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbce:	d107      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbd6:	d103      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cbd8:	4b66      	ldr	r3, [pc, #408]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbda:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbdc:	f001 b825 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cbe0:	4b63      	ldr	r3, [pc, #396]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cbe6:	f003 0302 	and.w	r3, r3, #2
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d108      	bne.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cbf4:	d104      	bne.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800cbf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbfc:	f001 b815 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cc00:	2300      	movs	r3, #0
 800cc02:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc04:	f001 b811 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cc08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc0c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cc10:	430b      	orrs	r3, r1
 800cc12:	d139      	bne.n	800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cc14:	4b56      	ldr	r3, [pc, #344]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cc1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cc1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d104      	bne.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc26:	f7fe f87d 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800cc2a:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc2c:	f000 bffd 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc36:	d104      	bne.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc38:	f7fd ff58 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800cc3c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc3e:	f000 bff4 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cc42:	4b4b      	ldr	r3, [pc, #300]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc4e:	d107      	bne.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc56:	d103      	bne.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cc58:	4b46      	ldr	r3, [pc, #280]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc5c:	f000 bfe5 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cc60:	4b43      	ldr	r3, [pc, #268]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc66:	f003 0302 	and.w	r3, r3, #2
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	d108      	bne.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800cc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cc74:	d104      	bne.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800cc76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc7c:	f000 bfd5 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cc80:	2300      	movs	r3, #0
 800cc82:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc84:	f000 bfd1 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cc88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc8c:	f1a2 0120 	sub.w	r1, r2, #32
 800cc90:	430b      	orrs	r3, r1
 800cc92:	d158      	bne.n	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800cc94:	4b36      	ldr	r3, [pc, #216]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc9a:	f003 0307 	and.w	r3, r3, #7
 800cc9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800cca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d104      	bne.n	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800cca6:	f7fe f865 	bl	800ad74 <HAL_RCC_GetPCLK3Freq>
 800ccaa:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccac:	f000 bfbd 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d104      	bne.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccb6:	f7fd ff19 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800ccba:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccbc:	f000 bfb5 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ccc0:	4b2b      	ldr	r3, [pc, #172]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cccc:	d106      	bne.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800ccce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d103      	bne.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800ccd4:	4b27      	ldr	r3, [pc, #156]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ccd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccd8:	f000 bfa7 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ccdc:	4b24      	ldr	r3, [pc, #144]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cce2:	f003 0302 	and.w	r3, r3, #2
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d107      	bne.n	800ccfa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800ccea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d104      	bne.n	800ccfa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800ccf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccf6:	f000 bf98 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ccfa:	4b1d      	ldr	r3, [pc, #116]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f003 0320 	and.w	r3, r3, #32
 800cd02:	2b20      	cmp	r3, #32
 800cd04:	d11b      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800cd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd08:	2b04      	cmp	r3, #4
 800cd0a:	d118      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd0c:	4b18      	ldr	r3, [pc, #96]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d005      	beq.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800cd18:	4b15      	ldr	r3, [pc, #84]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	0e1b      	lsrs	r3, r3, #24
 800cd1e:	f003 030f 	and.w	r3, r3, #15
 800cd22:	e006      	b.n	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800cd24:	4b12      	ldr	r3, [pc, #72]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd2a:	041b      	lsls	r3, r3, #16
 800cd2c:	0e1b      	lsrs	r3, r3, #24
 800cd2e:	f003 030f 	and.w	r3, r3, #15
 800cd32:	4a11      	ldr	r2, [pc, #68]	@ (800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd38:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd3a:	f000 bf76 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd42:	f000 bf72 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800cd46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd4a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800cd4e:	430b      	orrs	r3, r1
 800cd50:	d172      	bne.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800cd52:	4b07      	ldr	r3, [pc, #28]	@ (800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cd58:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cd5c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd64:	d10a      	bne.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd66:	f7fd fec1 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800cd6a:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd6c:	f000 bf5d 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd70:	46020c00 	.word	0x46020c00
 800cd74:	00f42400 	.word	0x00f42400
 800cd78:	0801193c 	.word	0x0801193c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd82:	d108      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd84:	f107 0318 	add.w	r3, r7, #24
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7ff f91f 	bl	800bfcc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800cd8e:	6a3b      	ldr	r3, [r7, #32]
 800cd90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd92:	f000 bf4a 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800cd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d104      	bne.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800cd9c:	f7fd ffa8 	bl	800acf0 <HAL_RCC_GetHCLKFreq>
 800cda0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cda2:	f000 bf42 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800cda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cdac:	d122      	bne.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cdae:	4bb0      	ldr	r3, [pc, #704]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 0320 	and.w	r3, r3, #32
 800cdb6:	2b20      	cmp	r3, #32
 800cdb8:	d118      	bne.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cdba:	4bad      	ldr	r3, [pc, #692]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d005      	beq.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800cdc6:	4baa      	ldr	r3, [pc, #680]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	0e1b      	lsrs	r3, r3, #24
 800cdcc:	f003 030f 	and.w	r3, r3, #15
 800cdd0:	e006      	b.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800cdd2:	4ba7      	ldr	r3, [pc, #668]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cdd8:	041b      	lsls	r3, r3, #16
 800cdda:	0e1b      	lsrs	r3, r3, #24
 800cddc:	f003 030f 	and.w	r3, r3, #15
 800cde0:	4aa4      	ldr	r2, [pc, #656]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cde2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cde8:	f000 bf1f 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cdec:	2300      	movs	r3, #0
 800cdee:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdf0:	f000 bf1b 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cdf4:	4b9e      	ldr	r3, [pc, #632]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce00:	d107      	bne.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ce02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ce08:	d103      	bne.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800ce0a:	4b9b      	ldr	r3, [pc, #620]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ce0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce0e:	f000 bf0c 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ce12:	4b97      	ldr	r3, [pc, #604]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce1e:	d107      	bne.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ce20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce26:	d103      	bne.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ce28:	4b93      	ldr	r3, [pc, #588]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ce2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce2c:	f000 befd 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ce30:	2300      	movs	r3, #0
 800ce32:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce34:	f000 bef9 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ce38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce3c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ce40:	430b      	orrs	r3, r1
 800ce42:	d158      	bne.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ce44:	4b8a      	ldr	r3, [pc, #552]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ce4a:	f003 0307 	and.w	r3, r3, #7
 800ce4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ce50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce52:	2b04      	cmp	r3, #4
 800ce54:	d84b      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ce56:	a201      	add	r2, pc, #4	@ (adr r2, 800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ce58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5c:	0800ce95 	.word	0x0800ce95
 800ce60:	0800ce71 	.word	0x0800ce71
 800ce64:	0800ce83 	.word	0x0800ce83
 800ce68:	0800ce9f 	.word	0x0800ce9f
 800ce6c:	0800cea9 	.word	0x0800cea9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fe ff4f 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce7e:	f000 bed4 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce82:	f107 030c 	add.w	r3, r7, #12
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7ff f9fa 	bl	800c280 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce90:	f000 becb 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ce94:	f7fd ff2c 	bl	800acf0 <HAL_RCC_GetHCLKFreq>
 800ce98:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce9a:	f000 bec6 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ce9e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cea2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cea4:	f000 bec1 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cea8:	4b71      	ldr	r3, [pc, #452]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f003 0320 	and.w	r3, r3, #32
 800ceb0:	2b20      	cmp	r3, #32
 800ceb2:	d118      	bne.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ceb4:	4b6e      	ldr	r3, [pc, #440]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d005      	beq.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800cec0:	4b6b      	ldr	r3, [pc, #428]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	0e1b      	lsrs	r3, r3, #24
 800cec6:	f003 030f 	and.w	r3, r3, #15
 800ceca:	e006      	b.n	800ceda <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800cecc:	4b68      	ldr	r3, [pc, #416]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cece:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ced2:	041b      	lsls	r3, r3, #16
 800ced4:	0e1b      	lsrs	r3, r3, #24
 800ced6:	f003 030f 	and.w	r3, r3, #15
 800ceda:	4a66      	ldr	r2, [pc, #408]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cedc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cee0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cee2:	f000 bea2 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cee6:	2300      	movs	r3, #0
 800cee8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ceea:	f000 be9e 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ceee:	2300      	movs	r3, #0
 800cef0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cef2:	f000 be9a 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800cef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cefa:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800cefe:	430b      	orrs	r3, r1
 800cf00:	d167      	bne.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800cf02:	4b5b      	ldr	r3, [pc, #364]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cf08:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cf0c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf14:	d036      	beq.n	800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800cf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf1c:	d855      	bhi.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf24:	d029      	beq.n	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800cf26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf2c:	d84d      	bhi.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf34:	d013      	beq.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf3c:	d845      	bhi.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d015      	beq.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800cf44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf4a:	d13e      	bne.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fe fee1 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf5a:	f000 be66 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf5e:	f107 030c 	add.w	r3, r7, #12
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7ff f98c 	bl	800c280 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf6c:	f000 be5d 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cf70:	f7fd febe 	bl	800acf0 <HAL_RCC_GetHCLKFreq>
 800cf74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cf76:	f000 be58 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf7a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cf7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf80:	f000 be53 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cf84:	4b3a      	ldr	r3, [pc, #232]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f003 0320 	and.w	r3, r3, #32
 800cf8c:	2b20      	cmp	r3, #32
 800cf8e:	d118      	bne.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf90:	4b37      	ldr	r3, [pc, #220]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d005      	beq.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800cf9c:	4b34      	ldr	r3, [pc, #208]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	0e1b      	lsrs	r3, r3, #24
 800cfa2:	f003 030f 	and.w	r3, r3, #15
 800cfa6:	e006      	b.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cfa8:	4b31      	ldr	r3, [pc, #196]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfae:	041b      	lsls	r3, r3, #16
 800cfb0:	0e1b      	lsrs	r3, r3, #24
 800cfb2:	f003 030f 	and.w	r3, r3, #15
 800cfb6:	4a2f      	ldr	r2, [pc, #188]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfbc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cfbe:	f000 be34 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfc6:	f000 be30 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfce:	f000 be2c 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800cfd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfd6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cfda:	430b      	orrs	r3, r1
 800cfdc:	d152      	bne.n	800d084 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cfde:	4b24      	ldr	r3, [pc, #144]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cfe4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cfe8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800cfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d104      	bne.n	800cffa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cff0:	f7fd fe98 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800cff4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cff6:	f000 be18 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800cffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d000:	d104      	bne.n	800d00c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d002:	f7fd fd73 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d006:	6378      	str	r0, [r7, #52]	@ 0x34
 800d008:	f000 be0f 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d00c:	4b18      	ldr	r3, [pc, #96]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d018:	d107      	bne.n	800d02a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d01c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d020:	d103      	bne.n	800d02a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d022:	4b15      	ldr	r3, [pc, #84]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d024:	637b      	str	r3, [r7, #52]	@ 0x34
 800d026:	f000 be00 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d02a:	4b11      	ldr	r3, [pc, #68]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f003 0320 	and.w	r3, r3, #32
 800d032:	2b20      	cmp	r3, #32
 800d034:	d122      	bne.n	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d038:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d03c:	d11e      	bne.n	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d03e:	4b0c      	ldr	r3, [pc, #48]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d046:	2b00      	cmp	r3, #0
 800d048:	d005      	beq.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d04a:	4b09      	ldr	r3, [pc, #36]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	0e1b      	lsrs	r3, r3, #24
 800d050:	f003 030f 	and.w	r3, r3, #15
 800d054:	e006      	b.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d056:	4b06      	ldr	r3, [pc, #24]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d05c:	041b      	lsls	r3, r3, #16
 800d05e:	0e1b      	lsrs	r3, r3, #24
 800d060:	f003 030f 	and.w	r3, r3, #15
 800d064:	4a03      	ldr	r2, [pc, #12]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d06a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d06c:	f000 bddd 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d070:	46020c00 	.word	0x46020c00
 800d074:	0801193c 	.word	0x0801193c
 800d078:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d07c:	2300      	movs	r3, #0
 800d07e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d080:	f000 bdd3 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d084:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d088:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d08c:	430b      	orrs	r3, r1
 800d08e:	d14c      	bne.n	800d12a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d090:	4ba8      	ldr	r3, [pc, #672]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d096:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d09a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d104      	bne.n	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d0a2:	f7fd fe3f 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800d0a6:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0a8:	f000 bdbf 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0b2:	d104      	bne.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d0b4:	f7fd fd1a 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d0b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0ba:	f000 bdb6 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d0be:	4b9d      	ldr	r3, [pc, #628]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0ca:	d107      	bne.n	800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0d2:	d103      	bne.n	800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d0d4:	4b98      	ldr	r3, [pc, #608]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d0d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0d8:	f000 bda7 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d0dc:	4b95      	ldr	r3, [pc, #596]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 0320 	and.w	r3, r3, #32
 800d0e4:	2b20      	cmp	r3, #32
 800d0e6:	d11c      	bne.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d0ee:	d118      	bne.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d0f0:	4b90      	ldr	r3, [pc, #576]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d005      	beq.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d0fc:	4b8d      	ldr	r3, [pc, #564]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	0e1b      	lsrs	r3, r3, #24
 800d102:	f003 030f 	and.w	r3, r3, #15
 800d106:	e006      	b.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d108:	4b8a      	ldr	r3, [pc, #552]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d10a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d10e:	041b      	lsls	r3, r3, #16
 800d110:	0e1b      	lsrs	r3, r3, #24
 800d112:	f003 030f 	and.w	r3, r3, #15
 800d116:	4a89      	ldr	r2, [pc, #548]	@ (800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d11e:	f000 bd84 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d122:	2300      	movs	r3, #0
 800d124:	637b      	str	r3, [r7, #52]	@ 0x34
 800d126:	f000 bd80 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d12a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d12e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d132:	430b      	orrs	r3, r1
 800d134:	d158      	bne.n	800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d136:	4b7f      	ldr	r3, [pc, #508]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d13c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d140:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d144:	2bc0      	cmp	r3, #192	@ 0xc0
 800d146:	d028      	beq.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d14c:	d848      	bhi.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d150:	2b80      	cmp	r3, #128	@ 0x80
 800d152:	d00e      	beq.n	800d172 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d156:	2b80      	cmp	r3, #128	@ 0x80
 800d158:	d842      	bhi.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d003      	beq.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d162:	2b40      	cmp	r3, #64	@ 0x40
 800d164:	d014      	beq.n	800d190 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d166:	e03b      	b.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d168:	f7fd fe04 	bl	800ad74 <HAL_RCC_GetPCLK3Freq>
 800d16c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d16e:	f000 bd5c 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d172:	4b70      	ldr	r3, [pc, #448]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d17a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d17e:	d103      	bne.n	800d188 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d180:	4b6d      	ldr	r3, [pc, #436]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d182:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d184:	f000 bd51 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d188:	2300      	movs	r3, #0
 800d18a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d18c:	f000 bd4d 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d190:	f7fd fcac 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d194:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d196:	f000 bd48 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d19a:	4b66      	ldr	r3, [pc, #408]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f003 0320 	and.w	r3, r3, #32
 800d1a2:	2b20      	cmp	r3, #32
 800d1a4:	d118      	bne.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1a6:	4b63      	ldr	r3, [pc, #396]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d005      	beq.n	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d1b2:	4b60      	ldr	r3, [pc, #384]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	0e1b      	lsrs	r3, r3, #24
 800d1b8:	f003 030f 	and.w	r3, r3, #15
 800d1bc:	e006      	b.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d1be:	4b5d      	ldr	r3, [pc, #372]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d1c4:	041b      	lsls	r3, r3, #16
 800d1c6:	0e1b      	lsrs	r3, r3, #24
 800d1c8:	f003 030f 	and.w	r3, r3, #15
 800d1cc:	4a5b      	ldr	r2, [pc, #364]	@ (800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1d4:	f000 bd29 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1dc:	f000 bd25 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1e4:	f000 bd21 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d1e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ec:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d1f0:	430b      	orrs	r3, r1
 800d1f2:	d14c      	bne.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d1f4:	4b4f      	ldr	r3, [pc, #316]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d1fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d202:	2b00      	cmp	r3, #0
 800d204:	d104      	bne.n	800d210 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d206:	f7fd fd8d 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800d20a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d20c:	f000 bd0d 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d216:	d104      	bne.n	800d222 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d218:	f7fd fc68 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d21c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d21e:	f000 bd04 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d222:	4b44      	ldr	r3, [pc, #272]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d22a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d22e:	d107      	bne.n	800d240 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d236:	d103      	bne.n	800d240 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d238:	4b3f      	ldr	r3, [pc, #252]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d23a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d23c:	f000 bcf5 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d240:	4b3c      	ldr	r3, [pc, #240]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 0320 	and.w	r3, r3, #32
 800d248:	2b20      	cmp	r3, #32
 800d24a:	d11c      	bne.n	800d286 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d252:	d118      	bne.n	800d286 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d254:	4b37      	ldr	r3, [pc, #220]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d005      	beq.n	800d26c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d260:	4b34      	ldr	r3, [pc, #208]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	0e1b      	lsrs	r3, r3, #24
 800d266:	f003 030f 	and.w	r3, r3, #15
 800d26a:	e006      	b.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d26c:	4b31      	ldr	r3, [pc, #196]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d26e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d272:	041b      	lsls	r3, r3, #16
 800d274:	0e1b      	lsrs	r3, r3, #24
 800d276:	f003 030f 	and.w	r3, r3, #15
 800d27a:	4a30      	ldr	r2, [pc, #192]	@ (800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d280:	637b      	str	r3, [r7, #52]	@ 0x34
 800d282:	f000 bcd2 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d286:	2300      	movs	r3, #0
 800d288:	637b      	str	r3, [r7, #52]	@ 0x34
 800d28a:	f000 bcce 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d28e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d292:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d296:	430b      	orrs	r3, r1
 800d298:	d152      	bne.n	800d340 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d29a:	4b26      	ldr	r3, [pc, #152]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d29c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2a0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d2a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d104      	bne.n	800d2b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d2ac:	f7fd fd3a 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800d2b0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2b2:	f000 bcba 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2bc:	d104      	bne.n	800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d2be:	f7fd fc15 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d2c2:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2c4:	f000 bcb1 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2d4:	d107      	bne.n	800d2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d2dc:	d103      	bne.n	800d2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d2de:	4b16      	ldr	r3, [pc, #88]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2e2:	f000 bca2 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d2e6:	4b13      	ldr	r3, [pc, #76]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f003 0320 	and.w	r3, r3, #32
 800d2ee:	2b20      	cmp	r3, #32
 800d2f0:	d11c      	bne.n	800d32c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d2f8:	d118      	bne.n	800d32c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d306:	4b0b      	ldr	r3, [pc, #44]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	0e1b      	lsrs	r3, r3, #24
 800d30c:	f003 030f 	and.w	r3, r3, #15
 800d310:	e006      	b.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d312:	4b08      	ldr	r3, [pc, #32]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d314:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d318:	041b      	lsls	r3, r3, #16
 800d31a:	0e1b      	lsrs	r3, r3, #24
 800d31c:	f003 030f 	and.w	r3, r3, #15
 800d320:	4a06      	ldr	r2, [pc, #24]	@ (800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d326:	637b      	str	r3, [r7, #52]	@ 0x34
 800d328:	f000 bc7f 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d32c:	2300      	movs	r3, #0
 800d32e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d330:	f000 bc7b 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d334:	46020c00 	.word	0x46020c00
 800d338:	00f42400 	.word	0x00f42400
 800d33c:	0801193c 	.word	0x0801193c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d340:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d344:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d348:	430b      	orrs	r3, r1
 800d34a:	d14c      	bne.n	800d3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d34c:	4ba6      	ldr	r3, [pc, #664]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d34e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d352:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d356:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d104      	bne.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d35e:	f7fd fce1 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800d362:	6378      	str	r0, [r7, #52]	@ 0x34
 800d364:	f000 bc61 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d36e:	d104      	bne.n	800d37a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d370:	f7fd fbbc 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d374:	6378      	str	r0, [r7, #52]	@ 0x34
 800d376:	f000 bc58 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d37a:	4b9b      	ldr	r3, [pc, #620]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d386:	d107      	bne.n	800d398 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d38a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d38e:	d103      	bne.n	800d398 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d390:	4b96      	ldr	r3, [pc, #600]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d392:	637b      	str	r3, [r7, #52]	@ 0x34
 800d394:	f000 bc49 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d398:	4b93      	ldr	r3, [pc, #588]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 0320 	and.w	r3, r3, #32
 800d3a0:	2b20      	cmp	r3, #32
 800d3a2:	d11c      	bne.n	800d3de <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d3aa:	d118      	bne.n	800d3de <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3ac:	4b8e      	ldr	r3, [pc, #568]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d005      	beq.n	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d3b8:	4b8b      	ldr	r3, [pc, #556]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	0e1b      	lsrs	r3, r3, #24
 800d3be:	f003 030f 	and.w	r3, r3, #15
 800d3c2:	e006      	b.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d3c4:	4b88      	ldr	r3, [pc, #544]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3ca:	041b      	lsls	r3, r3, #16
 800d3cc:	0e1b      	lsrs	r3, r3, #24
 800d3ce:	f003 030f 	and.w	r3, r3, #15
 800d3d2:	4a87      	ldr	r2, [pc, #540]	@ (800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3da:	f000 bc26 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3e2:	f000 bc22 	b.w	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d3e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3ea:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d3ee:	430b      	orrs	r3, r1
 800d3f0:	d164      	bne.n	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d3f2:	4b7d      	ldr	r3, [pc, #500]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d3f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d400:	2b00      	cmp	r3, #0
 800d402:	d120      	bne.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d404:	4b78      	ldr	r3, [pc, #480]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 0320 	and.w	r3, r3, #32
 800d40c:	2b20      	cmp	r3, #32
 800d40e:	d117      	bne.n	800d440 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d410:	4b75      	ldr	r3, [pc, #468]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d005      	beq.n	800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d41c:	4b72      	ldr	r3, [pc, #456]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	0e1b      	lsrs	r3, r3, #24
 800d422:	f003 030f 	and.w	r3, r3, #15
 800d426:	e006      	b.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d428:	4b6f      	ldr	r3, [pc, #444]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d42a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d42e:	041b      	lsls	r3, r3, #16
 800d430:	0e1b      	lsrs	r3, r3, #24
 800d432:	f003 030f 	and.w	r3, r3, #15
 800d436:	4a6e      	ldr	r2, [pc, #440]	@ (800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d43c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d43e:	e3f4      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d440:	2300      	movs	r3, #0
 800d442:	637b      	str	r3, [r7, #52]	@ 0x34
 800d444:	e3f1      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d446:	4b68      	ldr	r3, [pc, #416]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d44c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d454:	d112      	bne.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d45c:	d10e      	bne.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d45e:	4b62      	ldr	r3, [pc, #392]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d46c:	d102      	bne.n	800d474 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d46e:	23fa      	movs	r3, #250	@ 0xfa
 800d470:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d472:	e3da      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d474:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d478:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d47a:	e3d6      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d47c:	4b5a      	ldr	r3, [pc, #360]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d488:	d106      	bne.n	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d490:	d102      	bne.n	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d492:	4b56      	ldr	r3, [pc, #344]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d494:	637b      	str	r3, [r7, #52]	@ 0x34
 800d496:	e3c8      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d498:	4b53      	ldr	r3, [pc, #332]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d49a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d49e:	f003 0302 	and.w	r3, r3, #2
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d107      	bne.n	800d4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4ac:	d103      	bne.n	800d4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d4ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b4:	e3b9      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4ba:	e3b6      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4c0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d4c4:	430b      	orrs	r3, r1
 800d4c6:	d164      	bne.n	800d592 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d4c8:	4b47      	ldr	r3, [pc, #284]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d4ce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d4d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d120      	bne.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d4da:	4b43      	ldr	r3, [pc, #268]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f003 0320 	and.w	r3, r3, #32
 800d4e2:	2b20      	cmp	r3, #32
 800d4e4:	d117      	bne.n	800d516 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d4e6:	4b40      	ldr	r3, [pc, #256]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d4f2:	4b3d      	ldr	r3, [pc, #244]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	0e1b      	lsrs	r3, r3, #24
 800d4f8:	f003 030f 	and.w	r3, r3, #15
 800d4fc:	e006      	b.n	800d50c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d4fe:	4b3a      	ldr	r3, [pc, #232]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d504:	041b      	lsls	r3, r3, #16
 800d506:	0e1b      	lsrs	r3, r3, #24
 800d508:	f003 030f 	and.w	r3, r3, #15
 800d50c:	4a38      	ldr	r2, [pc, #224]	@ (800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d512:	637b      	str	r3, [r7, #52]	@ 0x34
 800d514:	e389      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d516:	2300      	movs	r3, #0
 800d518:	637b      	str	r3, [r7, #52]	@ 0x34
 800d51a:	e386      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d51c:	4b32      	ldr	r3, [pc, #200]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d51e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d522:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d52a:	d112      	bne.n	800d552 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d52e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d532:	d10e      	bne.n	800d552 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d534:	4b2c      	ldr	r3, [pc, #176]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d53a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d53e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d542:	d102      	bne.n	800d54a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d544:	23fa      	movs	r3, #250	@ 0xfa
 800d546:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d548:	e36f      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d54a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d54e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d550:	e36b      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d552:	4b25      	ldr	r3, [pc, #148]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d55a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d55e:	d106      	bne.n	800d56e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d566:	d102      	bne.n	800d56e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d568:	4b20      	ldr	r3, [pc, #128]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d56a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d56c:	e35d      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d56e:	4b1e      	ldr	r3, [pc, #120]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d574:	f003 0302 	and.w	r3, r3, #2
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d107      	bne.n	800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d57e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d582:	d103      	bne.n	800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d584:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d588:	637b      	str	r3, [r7, #52]	@ 0x34
 800d58a:	e34e      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d58c:	2300      	movs	r3, #0
 800d58e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d590:	e34b      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d592:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d596:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d59a:	430b      	orrs	r3, r1
 800d59c:	d14e      	bne.n	800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d59e:	4b12      	ldr	r3, [pc, #72]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5a4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d5a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d103      	bne.n	800d5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d5b0:	f7fd fbb8 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800d5b4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d5b6:	e338      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d5b8:	4b0b      	ldr	r3, [pc, #44]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5c6:	d119      	bne.n	800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d5ce:	d115      	bne.n	800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d5d0:	4b05      	ldr	r3, [pc, #20]	@ (800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d5da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5de:	d109      	bne.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d5e0:	23fa      	movs	r3, #250	@ 0xfa
 800d5e2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d5e4:	e321      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d5e6:	bf00      	nop
 800d5e8:	46020c00 	.word	0x46020c00
 800d5ec:	00f42400 	.word	0x00f42400
 800d5f0:	0801193c 	.word	0x0801193c
      }
      else
      {
        frequency = LSI_VALUE;
 800d5f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d5f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d5fa:	e316      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d5fc:	4ba8      	ldr	r3, [pc, #672]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d608:	d106      	bne.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d610:	d102      	bne.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d612:	4ba4      	ldr	r3, [pc, #656]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d614:	637b      	str	r3, [r7, #52]	@ 0x34
 800d616:	e308      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d618:	4ba1      	ldr	r3, [pc, #644]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d61a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d61e:	f003 0302 	and.w	r3, r3, #2
 800d622:	2b02      	cmp	r3, #2
 800d624:	d107      	bne.n	800d636 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d628:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d62c:	d103      	bne.n	800d636 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d62e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d632:	637b      	str	r3, [r7, #52]	@ 0x34
 800d634:	e2f9      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d636:	2300      	movs	r3, #0
 800d638:	637b      	str	r3, [r7, #52]	@ 0x34
 800d63a:	e2f6      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d63c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d640:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d644:	430b      	orrs	r3, r1
 800d646:	d12d      	bne.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d648:	4b95      	ldr	r3, [pc, #596]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d64a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d64e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d652:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d654:	4b92      	ldr	r3, [pc, #584]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d65c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d660:	d105      	bne.n	800d66e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d668:	4b8e      	ldr	r3, [pc, #568]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d66a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d66c:	e2dd      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d674:	d107      	bne.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe fb4c 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d682:	637b      	str	r3, [r7, #52]	@ 0x34
 800d684:	e2d1      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d68c:	d107      	bne.n	800d69e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d68e:	f107 0318 	add.w	r3, r7, #24
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe fc9a 	bl	800bfcc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d69c:	e2c5      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a2:	e2c2      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6a8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d6ac:	430b      	orrs	r3, r1
 800d6ae:	d156      	bne.n	800d75e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d6b0:	4b7b      	ldr	r3, [pc, #492]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6b6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d6ba:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d6c2:	d028      	beq.n	800d716 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d6ca:	d845      	bhi.n	800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d6d2:	d013      	beq.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d6da:	d83d      	bhi.n	800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d004      	beq.n	800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6e8:	d004      	beq.n	800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d6ea:	e035      	b.n	800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d6ec:	f7fd fb2e 	bl	800ad4c <HAL_RCC_GetPCLK2Freq>
 800d6f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d6f2:	e29a      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d6f4:	f7fd f9fa 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d6f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d6fa:	e296      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d6fc:	4b68      	ldr	r3, [pc, #416]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d708:	d102      	bne.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d70a:	4b66      	ldr	r3, [pc, #408]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d70c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d70e:	e28c      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d710:	2300      	movs	r3, #0
 800d712:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d714:	e289      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d716:	4b62      	ldr	r3, [pc, #392]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f003 0320 	and.w	r3, r3, #32
 800d71e:	2b20      	cmp	r3, #32
 800d720:	d117      	bne.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d722:	4b5f      	ldr	r3, [pc, #380]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d005      	beq.n	800d73a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d72e:	4b5c      	ldr	r3, [pc, #368]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	0e1b      	lsrs	r3, r3, #24
 800d734:	f003 030f 	and.w	r3, r3, #15
 800d738:	e006      	b.n	800d748 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d73a:	4b59      	ldr	r3, [pc, #356]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d73c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d740:	041b      	lsls	r3, r3, #16
 800d742:	0e1b      	lsrs	r3, r3, #24
 800d744:	f003 030f 	and.w	r3, r3, #15
 800d748:	4a57      	ldr	r2, [pc, #348]	@ (800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d74a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d74e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d750:	e26b      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d752:	2300      	movs	r3, #0
 800d754:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d756:	e268      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d758:	2300      	movs	r3, #0
 800d75a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d75c:	e265      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d75e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d762:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d766:	430b      	orrs	r3, r1
 800d768:	d156      	bne.n	800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d76a:	4b4d      	ldr	r3, [pc, #308]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d76c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d774:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d778:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d77c:	d028      	beq.n	800d7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d780:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d784:	d845      	bhi.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d78c:	d013      	beq.n	800d7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d794:	d83d      	bhi.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d004      	beq.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7a2:	d004      	beq.n	800d7ae <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d7a4:	e035      	b.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d7a6:	f7fd fabd 	bl	800ad24 <HAL_RCC_GetPCLK1Freq>
 800d7aa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7ac:	e23d      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d7ae:	f7fd f99d 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d7b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7b4:	e239      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7b6:	4b3a      	ldr	r3, [pc, #232]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7c2:	d102      	bne.n	800d7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d7c4:	4b37      	ldr	r3, [pc, #220]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d7c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d7c8:	e22f      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7ce:	e22c      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d7d0:	4b33      	ldr	r3, [pc, #204]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f003 0320 	and.w	r3, r3, #32
 800d7d8:	2b20      	cmp	r3, #32
 800d7da:	d117      	bne.n	800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d7dc:	4b30      	ldr	r3, [pc, #192]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d005      	beq.n	800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d7e8:	4b2d      	ldr	r3, [pc, #180]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	0e1b      	lsrs	r3, r3, #24
 800d7ee:	f003 030f 	and.w	r3, r3, #15
 800d7f2:	e006      	b.n	800d802 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d7f4:	4b2a      	ldr	r3, [pc, #168]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d7fa:	041b      	lsls	r3, r3, #16
 800d7fc:	0e1b      	lsrs	r3, r3, #24
 800d7fe:	f003 030f 	and.w	r3, r3, #15
 800d802:	4a29      	ldr	r2, [pc, #164]	@ (800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d808:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d80a:	e20e      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d810:	e20b      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d812:	2300      	movs	r3, #0
 800d814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d816:	e208      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d81c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d820:	430b      	orrs	r3, r1
 800d822:	d17c      	bne.n	800d91e <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d824:	4b1e      	ldr	r3, [pc, #120]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d82a:	f003 0318 	and.w	r3, r3, #24
 800d82e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d832:	2b18      	cmp	r3, #24
 800d834:	d870      	bhi.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d836:	a201      	add	r2, pc, #4	@ (adr r2, 800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d83c:	0800d8ad 	.word	0x0800d8ad
 800d840:	0800d919 	.word	0x0800d919
 800d844:	0800d919 	.word	0x0800d919
 800d848:	0800d919 	.word	0x0800d919
 800d84c:	0800d919 	.word	0x0800d919
 800d850:	0800d919 	.word	0x0800d919
 800d854:	0800d919 	.word	0x0800d919
 800d858:	0800d919 	.word	0x0800d919
 800d85c:	0800d8b5 	.word	0x0800d8b5
 800d860:	0800d919 	.word	0x0800d919
 800d864:	0800d919 	.word	0x0800d919
 800d868:	0800d919 	.word	0x0800d919
 800d86c:	0800d919 	.word	0x0800d919
 800d870:	0800d919 	.word	0x0800d919
 800d874:	0800d919 	.word	0x0800d919
 800d878:	0800d919 	.word	0x0800d919
 800d87c:	0800d8bd 	.word	0x0800d8bd
 800d880:	0800d919 	.word	0x0800d919
 800d884:	0800d919 	.word	0x0800d919
 800d888:	0800d919 	.word	0x0800d919
 800d88c:	0800d919 	.word	0x0800d919
 800d890:	0800d919 	.word	0x0800d919
 800d894:	0800d919 	.word	0x0800d919
 800d898:	0800d919 	.word	0x0800d919
 800d89c:	0800d8d7 	.word	0x0800d8d7
 800d8a0:	46020c00 	.word	0x46020c00
 800d8a4:	00f42400 	.word	0x00f42400
 800d8a8:	0801193c 	.word	0x0801193c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d8ac:	f7fd fa62 	bl	800ad74 <HAL_RCC_GetPCLK3Freq>
 800d8b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8b2:	e1ba      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d8b4:	f7fd f91a 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d8b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8ba:	e1b6      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8bc:	4b9f      	ldr	r3, [pc, #636]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8c8:	d102      	bne.n	800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d8ca:	4b9d      	ldr	r3, [pc, #628]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d8cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8ce:	e1ac      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8d4:	e1a9      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d8d6:	4b99      	ldr	r3, [pc, #612]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f003 0320 	and.w	r3, r3, #32
 800d8de:	2b20      	cmp	r3, #32
 800d8e0:	d117      	bne.n	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d8e2:	4b96      	ldr	r3, [pc, #600]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d005      	beq.n	800d8fa <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d8ee:	4b93      	ldr	r3, [pc, #588]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	0e1b      	lsrs	r3, r3, #24
 800d8f4:	f003 030f 	and.w	r3, r3, #15
 800d8f8:	e006      	b.n	800d908 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d8fa:	4b90      	ldr	r3, [pc, #576]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d900:	041b      	lsls	r3, r3, #16
 800d902:	0e1b      	lsrs	r3, r3, #24
 800d904:	f003 030f 	and.w	r3, r3, #15
 800d908:	4a8e      	ldr	r2, [pc, #568]	@ (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d90e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d910:	e18b      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d912:	2300      	movs	r3, #0
 800d914:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d916:	e188      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d918:	2300      	movs	r3, #0
 800d91a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d91c:	e185      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d922:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d926:	430b      	orrs	r3, r1
 800d928:	d155      	bne.n	800d9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d92a:	4b84      	ldr	r3, [pc, #528]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d92c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d930:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d934:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d938:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d93c:	d013      	beq.n	800d966 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d940:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d944:	d844      	bhi.n	800d9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d948:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d94c:	d013      	beq.n	800d976 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d954:	d83c      	bhi.n	800d9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d014      	beq.n	800d986 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d962:	d014      	beq.n	800d98e <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d964:	e034      	b.n	800d9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d966:	f107 0318 	add.w	r3, r7, #24
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7fe fb2e 	bl	800bfcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d974:	e159      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fe f9cc 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d984:	e151      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d986:	f7fd f8b1 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800d98a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d98c:	e14d      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d98e:	4b6b      	ldr	r3, [pc, #428]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f003 0320 	and.w	r3, r3, #32
 800d996:	2b20      	cmp	r3, #32
 800d998:	d117      	bne.n	800d9ca <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d99a:	4b68      	ldr	r3, [pc, #416]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d005      	beq.n	800d9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d9a6:	4b65      	ldr	r3, [pc, #404]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	0e1b      	lsrs	r3, r3, #24
 800d9ac:	f003 030f 	and.w	r3, r3, #15
 800d9b0:	e006      	b.n	800d9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d9b2:	4b62      	ldr	r3, [pc, #392]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9b8:	041b      	lsls	r3, r3, #16
 800d9ba:	0e1b      	lsrs	r3, r3, #24
 800d9bc:	f003 030f 	and.w	r3, r3, #15
 800d9c0:	4a60      	ldr	r2, [pc, #384]	@ (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d9c8:	e12f      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9ce:	e12c      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9d4:	e129      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d9d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9da:	1e59      	subs	r1, r3, #1
 800d9dc:	ea52 0301 	orrs.w	r3, r2, r1
 800d9e0:	d13c      	bne.n	800da5c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d9e2:	4b56      	ldr	r3, [pc, #344]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d9e8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d9ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d9f4:	d027      	beq.n	800da46 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d9fc:	d82b      	bhi.n	800da56 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da04:	d017      	beq.n	800da36 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800da06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da0c:	d823      	bhi.n	800da56 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da10:	2b00      	cmp	r3, #0
 800da12:	d004      	beq.n	800da1e <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800da14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da1a:	d004      	beq.n	800da26 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800da1c:	e01b      	b.n	800da56 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800da1e:	f7fd f865 	bl	800aaec <HAL_RCC_GetSysClockFreq>
 800da22:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da24:	e101      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fe f974 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800da30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da34:	e0f9      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da36:	f107 0318 	add.w	r3, r7, #24
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fe fac6 	bl	800bfcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da44:	e0f1      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da46:	f107 030c 	add.w	r3, r7, #12
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe fc18 	bl	800c280 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da54:	e0e9      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800da56:	2300      	movs	r3, #0
 800da58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da5a:	e0e6      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800da5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da60:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800da64:	430b      	orrs	r3, r1
 800da66:	d131      	bne.n	800dacc <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800da68:	4b34      	ldr	r3, [pc, #208]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da72:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800da74:	4b31      	ldr	r3, [pc, #196]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da7a:	f003 0302 	and.w	r3, r3, #2
 800da7e:	2b02      	cmp	r3, #2
 800da80:	d106      	bne.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800da82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da84:	2b00      	cmp	r3, #0
 800da86:	d103      	bne.n	800da90 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800da88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800da8e:	e0cc      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800da90:	4b2a      	ldr	r3, [pc, #168]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da9e:	d112      	bne.n	800dac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800daa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800daa6:	d10e      	bne.n	800dac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800daa8:	4b24      	ldr	r3, [pc, #144]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800daaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800daae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dab6:	d102      	bne.n	800dabe <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800dab8:	23fa      	movs	r3, #250	@ 0xfa
 800daba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dabc:	e0b5      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dabe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dac2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dac4:	e0b1      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800dac6:	2300      	movs	r3, #0
 800dac8:	637b      	str	r3, [r7, #52]	@ 0x34
 800daca:	e0ae      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800dacc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dad0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800dad4:	430b      	orrs	r3, r1
 800dad6:	d13b      	bne.n	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800dad8:	4b18      	ldr	r3, [pc, #96]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dada:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dade:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800dae2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800dae4:	4b15      	ldr	r3, [pc, #84]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800daec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800daf0:	d105      	bne.n	800dafe <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800daf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d102      	bne.n	800dafe <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800daf8:	4b13      	ldr	r3, [pc, #76]	@ (800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800dafa:	637b      	str	r3, [r7, #52]	@ 0x34
 800dafc:	e095      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800dafe:	4b0f      	ldr	r3, [pc, #60]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db0a:	d106      	bne.n	800db1a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800db0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db12:	d102      	bne.n	800db1a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800db14:	4b0d      	ldr	r3, [pc, #52]	@ (800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800db16:	637b      	str	r3, [r7, #52]	@ 0x34
 800db18:	e087      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800db1a:	4b08      	ldr	r3, [pc, #32]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db26:	d106      	bne.n	800db36 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800db28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db2e:	d102      	bne.n	800db36 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800db30:	4b03      	ldr	r3, [pc, #12]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800db32:	637b      	str	r3, [r7, #52]	@ 0x34
 800db34:	e079      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800db36:	2300      	movs	r3, #0
 800db38:	637b      	str	r3, [r7, #52]	@ 0x34
 800db3a:	e076      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800db3c:	46020c00 	.word	0x46020c00
 800db40:	00f42400 	.word	0x00f42400
 800db44:	0801193c 	.word	0x0801193c
 800db48:	02dc6c00 	.word	0x02dc6c00
 800db4c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800db50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db54:	1e99      	subs	r1, r3, #2
 800db56:	ea52 0301 	orrs.w	r3, r2, r1
 800db5a:	d120      	bne.n	800db9e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800db5c:	4b35      	ldr	r3, [pc, #212]	@ (800dc34 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800db66:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800db68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d004      	beq.n	800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800db6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db74:	d008      	beq.n	800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800db76:	e00f      	b.n	800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db78:	f107 030c 	add.w	r3, r7, #12
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7fe fb7f 	bl	800c280 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db86:	e050      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db88:	f107 0318 	add.w	r3, r7, #24
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fe fa1d 	bl	800bfcc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db96:	e048      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db98:	2300      	movs	r3, #0
 800db9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db9c:	e045      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800db9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dba2:	f1a3 0108 	sub.w	r1, r3, #8
 800dba6:	ea52 0301 	orrs.w	r3, r2, r1
 800dbaa:	d13c      	bne.n	800dc26 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800dbac:	4b21      	ldr	r3, [pc, #132]	@ (800dc34 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dbb2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800dbb6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800dbb8:	4b1e      	ldr	r3, [pc, #120]	@ (800dc34 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbc4:	d105      	bne.n	800dbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d102      	bne.n	800dbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800dbcc:	4b1a      	ldr	r3, [pc, #104]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800dbce:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbd0:	e02b      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800dbd2:	4b18      	ldr	r3, [pc, #96]	@ (800dc34 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbde:	d106      	bne.n	800dbee <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dbe6:	d102      	bne.n	800dbee <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800dbe8:	4b14      	ldr	r3, [pc, #80]	@ (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800dbea:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbec:	e01d      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800dbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbf4:	d107      	bne.n	800dc06 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fe f88c 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800dc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc02:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc04:	e011      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800dc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc08:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800dc0c:	d108      	bne.n	800dc20 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fe f880 	bl	800bd18 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800dc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc1a:	085b      	lsrs	r3, r3, #1
 800dc1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc1e:	e004      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800dc20:	2300      	movs	r3, #0
 800dc22:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc24:	e001      	b.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800dc26:	2300      	movs	r3, #0
 800dc28:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800dc2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3738      	adds	r7, #56	@ 0x38
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	46020c00 	.word	0x46020c00
 800dc38:	00f42400 	.word	0x00f42400
 800dc3c:	007a1200 	.word	0x007a1200

0800dc40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dc48:	4b47      	ldr	r3, [pc, #284]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a46      	ldr	r2, [pc, #280]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dc4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dc52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dc54:	f7f5 f824 	bl	8002ca0 <HAL_GetTick>
 800dc58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc5a:	e008      	b.n	800dc6e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc5c:	f7f5 f820 	bl	8002ca0 <HAL_GetTick>
 800dc60:	4602      	mov	r2, r0
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	d901      	bls.n	800dc6e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dc6a:	2303      	movs	r3, #3
 800dc6c:	e077      	b.n	800dd5e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc6e:	4b3e      	ldr	r3, [pc, #248]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1f0      	bne.n	800dc5c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dc7a:	4b3b      	ldr	r3, [pc, #236]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dc82:	f023 0303 	bic.w	r3, r3, #3
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	6811      	ldr	r1, [r2, #0]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	6852      	ldr	r2, [r2, #4]
 800dc8e:	3a01      	subs	r2, #1
 800dc90:	0212      	lsls	r2, r2, #8
 800dc92:	430a      	orrs	r2, r1
 800dc94:	4934      	ldr	r1, [pc, #208]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dc96:	4313      	orrs	r3, r2
 800dc98:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800dc9a:	4b33      	ldr	r3, [pc, #204]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dc9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc9e:	4b33      	ldr	r3, [pc, #204]	@ (800dd6c <RCCEx_PLL2_Config+0x12c>)
 800dca0:	4013      	ands	r3, r2
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	6892      	ldr	r2, [r2, #8]
 800dca6:	3a01      	subs	r2, #1
 800dca8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	68d2      	ldr	r2, [r2, #12]
 800dcb0:	3a01      	subs	r2, #1
 800dcb2:	0252      	lsls	r2, r2, #9
 800dcb4:	b292      	uxth	r2, r2
 800dcb6:	4311      	orrs	r1, r2
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	6912      	ldr	r2, [r2, #16]
 800dcbc:	3a01      	subs	r2, #1
 800dcbe:	0412      	lsls	r2, r2, #16
 800dcc0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dcc4:	4311      	orrs	r1, r2
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	6952      	ldr	r2, [r2, #20]
 800dcca:	3a01      	subs	r2, #1
 800dccc:	0612      	lsls	r2, r2, #24
 800dcce:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dcd2:	430a      	orrs	r2, r1
 800dcd4:	4924      	ldr	r1, [pc, #144]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800dcda:	4b23      	ldr	r3, [pc, #140]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcde:	f023 020c 	bic.w	r2, r3, #12
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	699b      	ldr	r3, [r3, #24]
 800dce6:	4920      	ldr	r1, [pc, #128]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dce8:	4313      	orrs	r3, r2
 800dcea:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800dcec:	4b1e      	ldr	r3, [pc, #120]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dcee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6a1b      	ldr	r3, [r3, #32]
 800dcf4:	491c      	ldr	r1, [pc, #112]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800dcfa:	4b1b      	ldr	r3, [pc, #108]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcfe:	4a1a      	ldr	r2, [pc, #104]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dd00:	f023 0310 	bic.w	r3, r3, #16
 800dd04:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dd06:	4b18      	ldr	r3, [pc, #96]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dd08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd0e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	69d2      	ldr	r2, [r2, #28]
 800dd16:	00d2      	lsls	r2, r2, #3
 800dd18:	4913      	ldr	r1, [pc, #76]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800dd1e:	4b12      	ldr	r3, [pc, #72]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dd20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd22:	4a11      	ldr	r2, [pc, #68]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dd24:	f043 0310 	orr.w	r3, r3, #16
 800dd28:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dd2a:	4b0f      	ldr	r3, [pc, #60]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a0e      	ldr	r2, [pc, #56]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dd30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd34:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd36:	f7f4 ffb3 	bl	8002ca0 <HAL_GetTick>
 800dd3a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd3c:	e008      	b.n	800dd50 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd3e:	f7f4 ffaf 	bl	8002ca0 <HAL_GetTick>
 800dd42:	4602      	mov	r2, r0
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	1ad3      	subs	r3, r2, r3
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d901      	bls.n	800dd50 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dd4c:	2303      	movs	r3, #3
 800dd4e:	e006      	b.n	800dd5e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd50:	4b05      	ldr	r3, [pc, #20]	@ (800dd68 <RCCEx_PLL2_Config+0x128>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d0f0      	beq.n	800dd3e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800dd5c:	2300      	movs	r3, #0

}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	46020c00 	.word	0x46020c00
 800dd6c:	80800000 	.word	0x80800000

0800dd70 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800dd78:	4b47      	ldr	r3, [pc, #284]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a46      	ldr	r2, [pc, #280]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800dd7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd82:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd84:	f7f4 ff8c 	bl	8002ca0 <HAL_GetTick>
 800dd88:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd8a:	e008      	b.n	800dd9e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd8c:	f7f4 ff88 	bl	8002ca0 <HAL_GetTick>
 800dd90:	4602      	mov	r2, r0
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d901      	bls.n	800dd9e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	e077      	b.n	800de8e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd9e:	4b3e      	ldr	r3, [pc, #248]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1f0      	bne.n	800dd8c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ddaa:	4b3b      	ldr	r3, [pc, #236]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800ddac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ddb2:	f023 0303 	bic.w	r3, r3, #3
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	6811      	ldr	r1, [r2, #0]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	6852      	ldr	r2, [r2, #4]
 800ddbe:	3a01      	subs	r2, #1
 800ddc0:	0212      	lsls	r2, r2, #8
 800ddc2:	430a      	orrs	r2, r1
 800ddc4:	4934      	ldr	r1, [pc, #208]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	630b      	str	r3, [r1, #48]	@ 0x30
 800ddca:	4b33      	ldr	r3, [pc, #204]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800ddcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ddce:	4b33      	ldr	r3, [pc, #204]	@ (800de9c <RCCEx_PLL3_Config+0x12c>)
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	6892      	ldr	r2, [r2, #8]
 800ddd6:	3a01      	subs	r2, #1
 800ddd8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	68d2      	ldr	r2, [r2, #12]
 800dde0:	3a01      	subs	r2, #1
 800dde2:	0252      	lsls	r2, r2, #9
 800dde4:	b292      	uxth	r2, r2
 800dde6:	4311      	orrs	r1, r2
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	6912      	ldr	r2, [r2, #16]
 800ddec:	3a01      	subs	r2, #1
 800ddee:	0412      	lsls	r2, r2, #16
 800ddf0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ddf4:	4311      	orrs	r1, r2
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	6952      	ldr	r2, [r2, #20]
 800ddfa:	3a01      	subs	r2, #1
 800ddfc:	0612      	lsls	r2, r2, #24
 800ddfe:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800de02:	430a      	orrs	r2, r1
 800de04:	4924      	ldr	r1, [pc, #144]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de06:	4313      	orrs	r3, r2
 800de08:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800de0a:	4b23      	ldr	r3, [pc, #140]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de0e:	f023 020c 	bic.w	r2, r3, #12
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	699b      	ldr	r3, [r3, #24]
 800de16:	4920      	ldr	r1, [pc, #128]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de18:	4313      	orrs	r3, r2
 800de1a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800de1c:	4b1e      	ldr	r3, [pc, #120]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	491c      	ldr	r1, [pc, #112]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de26:	4313      	orrs	r3, r2
 800de28:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800de2a:	4b1b      	ldr	r3, [pc, #108]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de2e:	4a1a      	ldr	r2, [pc, #104]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de30:	f023 0310 	bic.w	r3, r3, #16
 800de34:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800de36:	4b18      	ldr	r3, [pc, #96]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de3e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	69d2      	ldr	r2, [r2, #28]
 800de46:	00d2      	lsls	r2, r2, #3
 800de48:	4913      	ldr	r1, [pc, #76]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de4a:	4313      	orrs	r3, r2
 800de4c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800de4e:	4b12      	ldr	r3, [pc, #72]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de52:	4a11      	ldr	r2, [pc, #68]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de54:	f043 0310 	orr.w	r3, r3, #16
 800de58:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800de5a:	4b0f      	ldr	r3, [pc, #60]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a0e      	ldr	r2, [pc, #56]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de64:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de66:	f7f4 ff1b 	bl	8002ca0 <HAL_GetTick>
 800de6a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de6c:	e008      	b.n	800de80 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de6e:	f7f4 ff17 	bl	8002ca0 <HAL_GetTick>
 800de72:	4602      	mov	r2, r0
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	2b02      	cmp	r3, #2
 800de7a:	d901      	bls.n	800de80 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800de7c:	2303      	movs	r3, #3
 800de7e:	e006      	b.n	800de8e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de80:	4b05      	ldr	r3, [pc, #20]	@ (800de98 <RCCEx_PLL3_Config+0x128>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d0f0      	beq.n	800de6e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800de8c:	2300      	movs	r3, #0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3710      	adds	r7, #16
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	46020c00 	.word	0x46020c00
 800de9c:	80800000 	.word	0x80800000

0800dea0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d071      	beq.n	800df96 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7f4 f990 	bl	80021ec <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ded4:	4b32      	ldr	r3, [pc, #200]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	f003 0310 	and.w	r3, r3, #16
 800dedc:	2b10      	cmp	r3, #16
 800dede:	d051      	beq.n	800df84 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dee0:	4b2f      	ldr	r3, [pc, #188]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800dee2:	22ca      	movs	r2, #202	@ 0xca
 800dee4:	625a      	str	r2, [r3, #36]	@ 0x24
 800dee6:	4b2e      	ldr	r3, [pc, #184]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800dee8:	2253      	movs	r2, #83	@ 0x53
 800deea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f88b 	bl	800e008 <RTC_EnterInitMode>
 800def2:	4603      	mov	r3, r0
 800def4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800def6:	7bfb      	ldrb	r3, [r7, #15]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d13f      	bne.n	800df7c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800defc:	4b28      	ldr	r3, [pc, #160]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	4a27      	ldr	r2, [pc, #156]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800df02:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800df06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df0a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800df0c:	4b24      	ldr	r3, [pc, #144]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800df0e:	699a      	ldr	r2, [r3, #24]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6859      	ldr	r1, [r3, #4]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	691b      	ldr	r3, [r3, #16]
 800df18:	4319      	orrs	r1, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	699b      	ldr	r3, [r3, #24]
 800df1e:	430b      	orrs	r3, r1
 800df20:	491f      	ldr	r1, [pc, #124]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800df22:	4313      	orrs	r3, r2
 800df24:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68da      	ldr	r2, [r3, #12]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	041b      	lsls	r3, r3, #16
 800df30:	491b      	ldr	r1, [pc, #108]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800df32:	4313      	orrs	r3, r2
 800df34:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800df36:	4b1a      	ldr	r3, [pc, #104]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df46:	430b      	orrs	r3, r1
 800df48:	4915      	ldr	r1, [pc, #84]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800df4a:	4313      	orrs	r3, r2
 800df4c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 f896 	bl	800e080 <RTC_ExitInitMode>
 800df54:	4603      	mov	r3, r0
 800df56:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800df58:	7bfb      	ldrb	r3, [r7, #15]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10e      	bne.n	800df7c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800df5e:	4b10      	ldr	r3, [pc, #64]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a19      	ldr	r1, [r3, #32]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	69db      	ldr	r3, [r3, #28]
 800df6e:	4319      	orrs	r1, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	695b      	ldr	r3, [r3, #20]
 800df74:	430b      	orrs	r3, r1
 800df76:	490a      	ldr	r1, [pc, #40]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800df78:	4313      	orrs	r3, r2
 800df7a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df7c:	4b08      	ldr	r3, [pc, #32]	@ (800dfa0 <HAL_RTC_Init+0x100>)
 800df7e:	22ff      	movs	r2, #255	@ 0xff
 800df80:	625a      	str	r2, [r3, #36]	@ 0x24
 800df82:	e001      	b.n	800df88 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800df84:	2300      	movs	r3, #0
 800df86:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800df88:	7bfb      	ldrb	r3, [r7, #15]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d103      	bne.n	800df96 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2201      	movs	r2, #1
 800df92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800df96:	7bfb      	ldrb	r3, [r7, #15]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	46007800 	.word	0x46007800

0800dfa4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800dfac:	4b15      	ldr	r3, [pc, #84]	@ (800e004 <HAL_RTC_WaitForSynchro+0x60>)
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	4a14      	ldr	r2, [pc, #80]	@ (800e004 <HAL_RTC_WaitForSynchro+0x60>)
 800dfb2:	f023 0320 	bic.w	r3, r3, #32
 800dfb6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800dfb8:	f7f4 fe72 	bl	8002ca0 <HAL_GetTick>
 800dfbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dfbe:	e013      	b.n	800dfe8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dfc0:	f7f4 fe6e 	bl	8002ca0 <HAL_GetTick>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dfce:	d90b      	bls.n	800dfe8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dfd0:	4b0c      	ldr	r3, [pc, #48]	@ (800e004 <HAL_RTC_WaitForSynchro+0x60>)
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	f003 0320 	and.w	r3, r3, #32
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d10c      	bne.n	800dff6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2203      	movs	r2, #3
 800dfe0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	e008      	b.n	800dffa <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dfe8:	4b06      	ldr	r3, [pc, #24]	@ (800e004 <HAL_RTC_WaitForSynchro+0x60>)
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	f003 0320 	and.w	r3, r3, #32
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d0e5      	beq.n	800dfc0 <HAL_RTC_WaitForSynchro+0x1c>
 800dff4:	e000      	b.n	800dff8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800dff6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	46007800 	.word	0x46007800

0800e008 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e010:	2300      	movs	r3, #0
 800e012:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e014:	4b19      	ldr	r3, [pc, #100]	@ (800e07c <RTC_EnterInitMode+0x74>)
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d128      	bne.n	800e072 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e020:	4b16      	ldr	r3, [pc, #88]	@ (800e07c <RTC_EnterInitMode+0x74>)
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	4a15      	ldr	r2, [pc, #84]	@ (800e07c <RTC_EnterInitMode+0x74>)
 800e026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e02a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e02c:	f7f4 fe38 	bl	8002ca0 <HAL_GetTick>
 800e030:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e032:	e013      	b.n	800e05c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e034:	f7f4 fe34 	bl	8002ca0 <HAL_GetTick>
 800e038:	4602      	mov	r2, r0
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e042:	d90b      	bls.n	800e05c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e044:	4b0d      	ldr	r3, [pc, #52]	@ (800e07c <RTC_EnterInitMode+0x74>)
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d10f      	bne.n	800e070 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e050:	2303      	movs	r3, #3
 800e052:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2203      	movs	r2, #3
 800e058:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e05c:	4b07      	ldr	r3, [pc, #28]	@ (800e07c <RTC_EnterInitMode+0x74>)
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e064:	2b00      	cmp	r3, #0
 800e066:	d104      	bne.n	800e072 <RTC_EnterInitMode+0x6a>
 800e068:	7bfb      	ldrb	r3, [r7, #15]
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d1e2      	bne.n	800e034 <RTC_EnterInitMode+0x2c>
 800e06e:	e000      	b.n	800e072 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e070:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e072:	7bfb      	ldrb	r3, [r7, #15]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	46007800 	.word	0x46007800

0800e080 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e08c:	4b1a      	ldr	r3, [pc, #104]	@ (800e0f8 <RTC_ExitInitMode+0x78>)
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	4a19      	ldr	r2, [pc, #100]	@ (800e0f8 <RTC_ExitInitMode+0x78>)
 800e092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e096:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e098:	4b17      	ldr	r3, [pc, #92]	@ (800e0f8 <RTC_ExitInitMode+0x78>)
 800e09a:	699b      	ldr	r3, [r3, #24]
 800e09c:	f003 0320 	and.w	r3, r3, #32
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10c      	bne.n	800e0be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff ff7d 	bl	800dfa4 <HAL_RTC_WaitForSynchro>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d01e      	beq.n	800e0ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2203      	movs	r2, #3
 800e0b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	73fb      	strb	r3, [r7, #15]
 800e0bc:	e017      	b.n	800e0ee <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0be:	4b0e      	ldr	r3, [pc, #56]	@ (800e0f8 <RTC_ExitInitMode+0x78>)
 800e0c0:	699b      	ldr	r3, [r3, #24]
 800e0c2:	4a0d      	ldr	r2, [pc, #52]	@ (800e0f8 <RTC_ExitInitMode+0x78>)
 800e0c4:	f023 0320 	bic.w	r3, r3, #32
 800e0c8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7ff ff6a 	bl	800dfa4 <HAL_RTC_WaitForSynchro>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d005      	beq.n	800e0e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2203      	movs	r2, #3
 800e0da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e0de:	2303      	movs	r3, #3
 800e0e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0e2:	4b05      	ldr	r3, [pc, #20]	@ (800e0f8 <RTC_ExitInitMode+0x78>)
 800e0e4:	699b      	ldr	r3, [r3, #24]
 800e0e6:	4a04      	ldr	r2, [pc, #16]	@ (800e0f8 <RTC_ExitInitMode+0x78>)
 800e0e8:	f043 0320 	orr.w	r3, r3, #32
 800e0ec:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	46007800 	.word	0x46007800

0800e0fc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	4910      	ldr	r1, [pc, #64]	@ (800e150 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e110:	4313      	orrs	r3, r2
 800e112:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	689a      	ldr	r2, [r3, #8]
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	431a      	orrs	r2, r3
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	699b      	ldr	r3, [r3, #24]
 800e122:	490c      	ldr	r1, [pc, #48]	@ (800e154 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e124:	4313      	orrs	r3, r2
 800e126:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e128:	4b0a      	ldr	r3, [pc, #40]	@ (800e154 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e12a:	6a1b      	ldr	r3, [r3, #32]
 800e12c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	6919      	ldr	r1, [r3, #16]
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	695b      	ldr	r3, [r3, #20]
 800e138:	041b      	lsls	r3, r3, #16
 800e13a:	430b      	orrs	r3, r1
 800e13c:	4905      	ldr	r1, [pc, #20]	@ (800e154 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e13e:	4313      	orrs	r3, r2
 800e140:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e142:	2300      	movs	r3, #0
}
 800e144:	4618      	mov	r0, r3
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	46007800 	.word	0x46007800
 800e154:	46007c00 	.word	0x46007c00

0800e158 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]
 800e164:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b02      	cmp	r3, #2
 800e16a:	d904      	bls.n	800e176 <HAL_SAI_InitProtocol+0x1e>
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	3b03      	subs	r3, #3
 800e170:	2b01      	cmp	r3, #1
 800e172:	d812      	bhi.n	800e19a <HAL_SAI_InitProtocol+0x42>
 800e174:	e008      	b.n	800e188 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f000 faeb 	bl	800e758 <SAI_InitI2S>
 800e182:	4603      	mov	r3, r0
 800e184:	75fb      	strb	r3, [r7, #23]
      break;
 800e186:	e00b      	b.n	800e1a0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	68b9      	ldr	r1, [r7, #8]
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f000 fb94 	bl	800e8bc <SAI_InitPCM>
 800e194:	4603      	mov	r3, r0
 800e196:	75fb      	strb	r3, [r7, #23]
      break;
 800e198:	e002      	b.n	800e1a0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	75fb      	strb	r3, [r7, #23]
      break;
 800e19e:	bf00      	nop
  }

  if (status == HAL_OK)
 800e1a0:	7dfb      	ldrb	r3, [r7, #23]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d104      	bne.n	800e1b0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f000 f808 	bl	800e1bc <HAL_SAI_Init>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3718      	adds	r7, #24
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
	...

0800e1bc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08a      	sub	sp, #40	@ 0x28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e1ce      	b.n	800e56c <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d10e      	bne.n	800e1f6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a83      	ldr	r2, [pc, #524]	@ (800e3ec <HAL_SAI_Init+0x230>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d107      	bne.n	800e1f2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d103      	bne.n	800e1f2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d001      	beq.n	800e1f6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e1ba      	b.n	800e56c <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d106      	bne.n	800e210 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7f4 f9c0 	bl	8002590 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fc0d 	bl	800ea30 <SAI_Disable>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d001      	beq.n	800e220 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e21c:	2301      	movs	r3, #1
 800e21e:	e1a5      	b.n	800e56c <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2202      	movs	r2, #2
 800e224:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	2b02      	cmp	r3, #2
 800e22e:	d00c      	beq.n	800e24a <HAL_SAI_Init+0x8e>
 800e230:	2b02      	cmp	r3, #2
 800e232:	d80d      	bhi.n	800e250 <HAL_SAI_Init+0x94>
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <HAL_SAI_Init+0x82>
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d003      	beq.n	800e244 <HAL_SAI_Init+0x88>
 800e23c:	e008      	b.n	800e250 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e242:	e008      	b.n	800e256 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e244:	2310      	movs	r3, #16
 800e246:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e248:	e005      	b.n	800e256 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e24a:	2320      	movs	r3, #32
 800e24c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e24e:	e002      	b.n	800e256 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e254:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	2b03      	cmp	r3, #3
 800e25c:	d81d      	bhi.n	800e29a <HAL_SAI_Init+0xde>
 800e25e:	a201      	add	r2, pc, #4	@ (adr r2, 800e264 <HAL_SAI_Init+0xa8>)
 800e260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e264:	0800e275 	.word	0x0800e275
 800e268:	0800e27b 	.word	0x0800e27b
 800e26c:	0800e283 	.word	0x0800e283
 800e270:	0800e28b 	.word	0x0800e28b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e274:	2300      	movs	r3, #0
 800e276:	61fb      	str	r3, [r7, #28]
      break;
 800e278:	e012      	b.n	800e2a0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e27a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e27e:	61fb      	str	r3, [r7, #28]
      break;
 800e280:	e00e      	b.n	800e2a0 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e282:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e286:	61fb      	str	r3, [r7, #28]
      break;
 800e288:	e00a      	b.n	800e2a0 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e28a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e28e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e292:	f043 0301 	orr.w	r3, r3, #1
 800e296:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e298:	e002      	b.n	800e2a0 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e29a:	2300      	movs	r3, #0
 800e29c:	61fb      	str	r3, [r7, #28]
      break;
 800e29e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a51      	ldr	r2, [pc, #324]	@ (800e3ec <HAL_SAI_Init+0x230>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d004      	beq.n	800e2b4 <HAL_SAI_Init+0xf8>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a50      	ldr	r2, [pc, #320]	@ (800e3f0 <HAL_SAI_Init+0x234>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d103      	bne.n	800e2bc <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e2b4:	4a4f      	ldr	r2, [pc, #316]	@ (800e3f4 <HAL_SAI_Init+0x238>)
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b8:	6013      	str	r3, [r2, #0]
 800e2ba:	e002      	b.n	800e2c2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e2bc:	4a4e      	ldr	r2, [pc, #312]	@ (800e3f8 <HAL_SAI_Init+0x23c>)
 800e2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c0:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d077      	beq.n	800e3ba <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a47      	ldr	r2, [pc, #284]	@ (800e3ec <HAL_SAI_Init+0x230>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d004      	beq.n	800e2de <HAL_SAI_Init+0x122>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a45      	ldr	r2, [pc, #276]	@ (800e3f0 <HAL_SAI_Init+0x234>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d107      	bne.n	800e2ee <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e2de:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e2e2:	f04f 0100 	mov.w	r1, #0
 800e2e6:	f7fe f925 	bl	800c534 <HAL_RCCEx_GetPeriphCLKFreq>
 800e2ea:	61b8      	str	r0, [r7, #24]
 800e2ec:	e006      	b.n	800e2fc <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e2ee:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e2f2:	f04f 0100 	mov.w	r1, #0
 800e2f6:	f7fe f91d 	bl	800c534 <HAL_RCCEx_GetPeriphCLKFreq>
 800e2fa:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	699b      	ldr	r3, [r3, #24]
 800e300:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e304:	d120      	bne.n	800e348 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e30a:	2b04      	cmp	r3, #4
 800e30c:	d102      	bne.n	800e314 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e30e:	2340      	movs	r3, #64	@ 0x40
 800e310:	613b      	str	r3, [r7, #16]
 800e312:	e00a      	b.n	800e32a <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e318:	2b08      	cmp	r3, #8
 800e31a:	d103      	bne.n	800e324 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e31c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e320:	613b      	str	r3, [r7, #16]
 800e322:	e002      	b.n	800e32a <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e328:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e32a:	69ba      	ldr	r2, [r7, #24]
 800e32c:	4613      	mov	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	4619      	mov	r1, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	693a      	ldr	r2, [r7, #16]
 800e33c:	fb02 f303 	mul.w	r3, r2, r3
 800e340:	fbb1 f3f3 	udiv	r3, r1, r3
 800e344:	617b      	str	r3, [r7, #20]
 800e346:	e017      	b.n	800e378 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e34c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e350:	d101      	bne.n	800e356 <HAL_SAI_Init+0x19a>
 800e352:	2302      	movs	r3, #2
 800e354:	e000      	b.n	800e358 <HAL_SAI_Init+0x19c>
 800e356:	2301      	movs	r3, #1
 800e358:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e35a:	69ba      	ldr	r2, [r7, #24]
 800e35c:	4613      	mov	r3, r2
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4413      	add	r3, r2
 800e362:	005b      	lsls	r3, r3, #1
 800e364:	4619      	mov	r1, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6a1b      	ldr	r3, [r3, #32]
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	fb02 f303 	mul.w	r3, r2, r3
 800e370:	021b      	lsls	r3, r3, #8
 800e372:	fbb1 f3f3 	udiv	r3, r1, r3
 800e376:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	4a20      	ldr	r2, [pc, #128]	@ (800e3fc <HAL_SAI_Init+0x240>)
 800e37c:	fba2 2303 	umull	r2, r3, r2, r3
 800e380:	08da      	lsrs	r2, r3, #3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e386:	6979      	ldr	r1, [r7, #20]
 800e388:	4b1c      	ldr	r3, [pc, #112]	@ (800e3fc <HAL_SAI_Init+0x240>)
 800e38a:	fba3 2301 	umull	r2, r3, r3, r1
 800e38e:	08da      	lsrs	r2, r3, #3
 800e390:	4613      	mov	r3, r2
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	1aca      	subs	r2, r1, r3
 800e39a:	2a08      	cmp	r2, #8
 800e39c:	d904      	bls.n	800e3a8 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3a2:	1c5a      	adds	r2, r3, #1
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3ac:	2b04      	cmp	r3, #4
 800e3ae:	d104      	bne.n	800e3ba <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3b4:	085a      	lsrs	r2, r3, #1
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d003      	beq.n	800e3ca <HAL_SAI_Init+0x20e>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	2b02      	cmp	r3, #2
 800e3c8:	d109      	bne.n	800e3de <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d101      	bne.n	800e3d6 <HAL_SAI_Init+0x21a>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	e001      	b.n	800e3da <HAL_SAI_Init+0x21e>
 800e3d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3da:	623b      	str	r3, [r7, #32]
 800e3dc:	e012      	b.n	800e404 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d10c      	bne.n	800e400 <HAL_SAI_Init+0x244>
 800e3e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3ea:	e00a      	b.n	800e402 <HAL_SAI_Init+0x246>
 800e3ec:	40015404 	.word	0x40015404
 800e3f0:	40015424 	.word	0x40015424
 800e3f4:	40015400 	.word	0x40015400
 800e3f8:	40015800 	.word	0x40015800
 800e3fc:	cccccccd 	.word	0xcccccccd
 800e400:	2300      	movs	r3, #0
 800e402:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	6819      	ldr	r1, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	4b59      	ldr	r3, [pc, #356]	@ (800e574 <HAL_SAI_Init+0x3b8>)
 800e410:	400b      	ands	r3, r1
 800e412:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	6819      	ldr	r1, [r3, #0]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e422:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e428:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e42e:	431a      	orrs	r2, r3
 800e430:	6a3b      	ldr	r3, [r7, #32]
 800e432:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e43c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	695b      	ldr	r3, [r3, #20]
 800e442:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e448:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e44e:	051b      	lsls	r3, r3, #20
 800e450:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e456:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	430a      	orrs	r2, r1
 800e464:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	6812      	ldr	r2, [r2, #0]
 800e470:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e474:	f023 030f 	bic.w	r3, r3, #15
 800e478:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	6859      	ldr	r1, [r3, #4]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	69da      	ldr	r2, [r3, #28]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e488:	431a      	orrs	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e48e:	431a      	orrs	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	430a      	orrs	r2, r1
 800e496:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6899      	ldr	r1, [r3, #8]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	4b35      	ldr	r3, [pc, #212]	@ (800e578 <HAL_SAI_Init+0x3bc>)
 800e4a4:	400b      	ands	r3, r1
 800e4a6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6899      	ldr	r1, [r3, #8]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4b2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e4be:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e4c4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e4ce:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	430a      	orrs	r2, r1
 800e4d6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	68d9      	ldr	r1, [r3, #12]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e4e6:	400b      	ands	r3, r1
 800e4e8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	68d9      	ldr	r1, [r3, #12]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4f8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4fe:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e500:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e506:	3b01      	subs	r3, #1
 800e508:	021b      	lsls	r3, r3, #8
 800e50a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	430a      	orrs	r2, r1
 800e512:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4a18      	ldr	r2, [pc, #96]	@ (800e57c <HAL_SAI_Init+0x3c0>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d119      	bne.n	800e552 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e51e:	4b18      	ldr	r3, [pc, #96]	@ (800e580 <HAL_SAI_Init+0x3c4>)
 800e520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e522:	4a17      	ldr	r2, [pc, #92]	@ (800e580 <HAL_SAI_Init+0x3c4>)
 800e524:	f023 0301 	bic.w	r3, r3, #1
 800e528:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e530:	2b01      	cmp	r3, #1
 800e532:	d10e      	bne.n	800e552 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e53c:	3b01      	subs	r3, #1
 800e53e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e540:	490f      	ldr	r1, [pc, #60]	@ (800e580 <HAL_SAI_Init+0x3c4>)
 800e542:	4313      	orrs	r3, r2
 800e544:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e546:	4b0e      	ldr	r3, [pc, #56]	@ (800e580 <HAL_SAI_Init+0x3c4>)
 800e548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e54a:	4a0d      	ldr	r2, [pc, #52]	@ (800e580 <HAL_SAI_Init+0x3c4>)
 800e54c:	f043 0301 	orr.w	r3, r3, #1
 800e550:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2200      	movs	r2, #0
 800e556:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2201      	movs	r2, #1
 800e55e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3728      	adds	r7, #40	@ 0x28
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	f005c010 	.word	0xf005c010
 800e578:	fff88000 	.word	0xfff88000
 800e57c:	40015404 	.word	0x40015404
 800e580:	40015400 	.word	0x40015400

0800e584 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	4613      	mov	r3, r2
 800e590:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <HAL_SAI_Receive_DMA+0x1a>
 800e598:	88fb      	ldrh	r3, [r7, #6]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d101      	bne.n	800e5a2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e0c6      	b.n	800e730 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	f040 80bf 	bne.w	800e72e <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d101      	bne.n	800e5be <HAL_SAI_Receive_DMA+0x3a>
 800e5ba:	2302      	movs	r3, #2
 800e5bc:	e0b8      	b.n	800e730 <HAL_SAI_Receive_DMA+0x1ac>
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	68ba      	ldr	r2, [r7, #8]
 800e5ca:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	88fa      	ldrh	r2, [r7, #6]
 800e5d0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	88fa      	ldrh	r2, [r7, #6]
 800e5d8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2222      	movs	r2, #34	@ 0x22
 800e5e8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5f2:	4a51      	ldr	r2, [pc, #324]	@ (800e738 <HAL_SAI_Receive_DMA+0x1b4>)
 800e5f4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5fc:	4a4f      	ldr	r2, [pc, #316]	@ (800e73c <HAL_SAI_Receive_DMA+0x1b8>)
 800e5fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e606:	4a4e      	ldr	r2, [pc, #312]	@ (800e740 <HAL_SAI_Receive_DMA+0x1bc>)
 800e608:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e610:	2200      	movs	r2, #0
 800e612:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e618:	2b40      	cmp	r3, #64	@ 0x40
 800e61a:	d106      	bne.n	800e62a <HAL_SAI_Receive_DMA+0xa6>
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e620:	2b00      	cmp	r3, #0
 800e622:	d102      	bne.n	800e62a <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e624:	88fb      	ldrh	r3, [r7, #6]
 800e626:	613b      	str	r3, [r7, #16]
 800e628:	e00a      	b.n	800e640 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e62e:	2b80      	cmp	r3, #128	@ 0x80
 800e630:	d803      	bhi.n	800e63a <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e632:	88fb      	ldrh	r3, [r7, #6]
 800e634:	005b      	lsls	r3, r3, #1
 800e636:	613b      	str	r3, [r7, #16]
 800e638:	e002      	b.n	800e640 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e63a:	88fb      	ldrh	r3, [r7, #6]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d02d      	beq.n	800e6ac <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d021      	beq.n	800e6a0 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	693a      	ldr	r2, [r7, #16]
 800e668:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f103 021c 	add.w	r2, r3, #28
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e694:	4618      	mov	r0, r3
 800e696:	f7f7 ffa5 	bl	80065e4 <HAL_DMAEx_List_Start_IT>
 800e69a:	4603      	mov	r3, r0
 800e69c:	75fb      	strb	r3, [r7, #23]
 800e69e:	e014      	b.n	800e6ca <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	e041      	b.n	800e730 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	331c      	adds	r3, #28
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6be:	461a      	mov	r2, r3
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	f7f6 fffd 	bl	80056c0 <HAL_DMA_Start_IT>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d005      	beq.n	800e6dc <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e029      	b.n	800e730 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e6dc:	2100      	movs	r1, #0
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f000 f96e 	bl	800e9c0 <SAI_InterruptFlag>
 800e6e4:	4601      	mov	r1, r0
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	691a      	ldr	r2, [r3, #16]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	430a      	orrs	r2, r1
 800e6f2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e702:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d107      	bne.n	800e722 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e720:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2200      	movs	r2, #0
 800e726:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e72a:	2300      	movs	r3, #0
 800e72c:	e000      	b.n	800e730 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e72e:	2302      	movs	r3, #2
  }
}
 800e730:	4618      	mov	r0, r3
 800e732:	3718      	adds	r7, #24
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	0800eb03 	.word	0x0800eb03
 800e73c:	0800eaa5 	.word	0x0800eaa5
 800e740:	0800eb1f 	.word	0x0800eb1f

0800e744 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e74c:	bf00      	nop
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e758:	b480      	push	{r7}
 800e75a:	b087      	sub	sp, #28
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
 800e764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e766:	2300      	movs	r3, #0
 800e768:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2200      	movs	r2, #0
 800e76e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <SAI_InitI2S+0x2e>
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	2b02      	cmp	r3, #2
 800e784:	d103      	bne.n	800e78e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	651a      	str	r2, [r3, #80]	@ 0x50
 800e78c:	e002      	b.n	800e794 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2201      	movs	r2, #1
 800e792:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e79a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e7a2:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	683a      	ldr	r2, [r7, #0]
 800e7ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	f003 0301 	and.w	r3, r3, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d001      	beq.n	800e7be <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e077      	b.n	800e8ae <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d107      	bne.n	800e7d4 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e7d0:	665a      	str	r2, [r3, #100]	@ 0x64
 800e7d2:	e006      	b.n	800e7e2 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e7da:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2b03      	cmp	r3, #3
 800e7e6:	d84f      	bhi.n	800e888 <SAI_InitI2S+0x130>
 800e7e8:	a201      	add	r2, pc, #4	@ (adr r2, 800e7f0 <SAI_InitI2S+0x98>)
 800e7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ee:	bf00      	nop
 800e7f0:	0800e801 	.word	0x0800e801
 800e7f4:	0800e823 	.word	0x0800e823
 800e7f8:	0800e845 	.word	0x0800e845
 800e7fc:	0800e867 	.word	0x0800e867
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2280      	movs	r2, #128	@ 0x80
 800e804:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	085b      	lsrs	r3, r3, #1
 800e80a:	015a      	lsls	r2, r3, #5
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	085b      	lsrs	r3, r3, #1
 800e814:	011a      	lsls	r2, r3, #4
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2240      	movs	r2, #64	@ 0x40
 800e81e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e820:	e035      	b.n	800e88e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2280      	movs	r2, #128	@ 0x80
 800e826:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	085b      	lsrs	r3, r3, #1
 800e82c:	019a      	lsls	r2, r3, #6
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	085b      	lsrs	r3, r3, #1
 800e836:	015a      	lsls	r2, r3, #5
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2280      	movs	r2, #128	@ 0x80
 800e840:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e842:	e024      	b.n	800e88e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	22c0      	movs	r2, #192	@ 0xc0
 800e848:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	085b      	lsrs	r3, r3, #1
 800e84e:	019a      	lsls	r2, r3, #6
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	085b      	lsrs	r3, r3, #1
 800e858:	015a      	lsls	r2, r3, #5
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2280      	movs	r2, #128	@ 0x80
 800e862:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e864:	e013      	b.n	800e88e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	22e0      	movs	r2, #224	@ 0xe0
 800e86a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	085b      	lsrs	r3, r3, #1
 800e870:	019a      	lsls	r2, r3, #6
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	085b      	lsrs	r3, r3, #1
 800e87a:	015a      	lsls	r2, r3, #5
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2280      	movs	r2, #128	@ 0x80
 800e884:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e886:	e002      	b.n	800e88e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e888:	2301      	movs	r3, #1
 800e88a:	75fb      	strb	r3, [r7, #23]
      break;
 800e88c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	2b02      	cmp	r3, #2
 800e892:	d10b      	bne.n	800e8ac <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d102      	bne.n	800e8a0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2210      	movs	r2, #16
 800e89e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b02      	cmp	r3, #2
 800e8a4:	d102      	bne.n	800e8ac <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2208      	movs	r2, #8
 800e8aa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	371c      	adds	r7, #28
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop

0800e8bc <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b087      	sub	sp, #28
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
 800e8c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d003      	beq.n	800e8ea <SAI_InitPCM+0x2e>
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d103      	bne.n	800e8f2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	651a      	str	r2, [r3, #80]	@ 0x50
 800e8f0:	e002      	b.n	800e8f8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e904:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e90c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	683a      	ldr	r2, [r7, #0]
 800e918:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e920:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	2b04      	cmp	r3, #4
 800e926:	d103      	bne.n	800e930 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2201      	movs	r2, #1
 800e92c:	659a      	str	r2, [r3, #88]	@ 0x58
 800e92e:	e002      	b.n	800e936 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	220d      	movs	r2, #13
 800e934:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b03      	cmp	r3, #3
 800e93a:	d837      	bhi.n	800e9ac <SAI_InitPCM+0xf0>
 800e93c:	a201      	add	r2, pc, #4	@ (adr r2, 800e944 <SAI_InitPCM+0x88>)
 800e93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e942:	bf00      	nop
 800e944:	0800e955 	.word	0x0800e955
 800e948:	0800e96b 	.word	0x0800e96b
 800e94c:	0800e981 	.word	0x0800e981
 800e950:	0800e997 	.word	0x0800e997
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2280      	movs	r2, #128	@ 0x80
 800e958:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	011a      	lsls	r2, r3, #4
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2240      	movs	r2, #64	@ 0x40
 800e966:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e968:	e023      	b.n	800e9b2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2280      	movs	r2, #128	@ 0x80
 800e96e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	015a      	lsls	r2, r3, #5
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2280      	movs	r2, #128	@ 0x80
 800e97c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e97e:	e018      	b.n	800e9b2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	22c0      	movs	r2, #192	@ 0xc0
 800e984:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	015a      	lsls	r2, r3, #5
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2280      	movs	r2, #128	@ 0x80
 800e992:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e994:	e00d      	b.n	800e9b2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	22e0      	movs	r2, #224	@ 0xe0
 800e99a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2280      	movs	r2, #128	@ 0x80
 800e9a8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e9aa:	e002      	b.n	800e9b2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	75fb      	strb	r3, [r7, #23]
      break;
 800e9b0:	bf00      	nop
  }

  return status;
 800e9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	371c      	adds	r7, #28
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e9d0:	78fb      	ldrb	r3, [r7, #3]
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d103      	bne.n	800e9de <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f043 0308 	orr.w	r3, r3, #8
 800e9dc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9e2:	2b08      	cmp	r3, #8
 800e9e4:	d10b      	bne.n	800e9fe <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e9ea:	2b03      	cmp	r3, #3
 800e9ec:	d003      	beq.n	800e9f6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d103      	bne.n	800e9fe <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f043 0310 	orr.w	r3, r3, #16
 800e9fc:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	2b03      	cmp	r3, #3
 800ea04:	d003      	beq.n	800ea0e <SAI_InterruptFlag+0x4e>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	2b02      	cmp	r3, #2
 800ea0c:	d104      	bne.n	800ea18 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	e003      	b.n	800ea20 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f043 0304 	orr.w	r3, r3, #4
 800ea1e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ea20:	68fb      	ldr	r3, [r7, #12]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3714      	adds	r7, #20
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
	...

0800ea30 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ea38:	4b18      	ldr	r3, [pc, #96]	@ (800ea9c <SAI_Disable+0x6c>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a18      	ldr	r2, [pc, #96]	@ (800eaa0 <SAI_Disable+0x70>)
 800ea3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ea42:	0b1b      	lsrs	r3, r3, #12
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ea5a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10a      	bne.n	800ea78 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ea68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ea72:	2303      	movs	r3, #3
 800ea74:	72fb      	strb	r3, [r7, #11]
      break;
 800ea76:	e009      	b.n	800ea8c <SAI_Disable+0x5c>
    }
    count--;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	3b01      	subs	r3, #1
 800ea7c:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1e7      	bne.n	800ea5c <SAI_Disable+0x2c>

  return status;
 800ea8c:	7afb      	ldrb	r3, [r7, #11]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3714      	adds	r7, #20
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	20000018 	.word	0x20000018
 800eaa0:	95cbec1b 	.word	0x95cbec1b

0800eaa4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eab0:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eab6:	2b81      	cmp	r3, #129	@ 0x81
 800eab8:	d01c      	beq.n	800eaf4 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800eac8:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ead2:	2100      	movs	r1, #0
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f7ff ff73 	bl	800e9c0 <SAI_InterruptFlag>
 800eada:	4603      	mov	r3, r0
 800eadc:	43d9      	mvns	r1, r3
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	691a      	ldr	r2, [r3, #16]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	400a      	ands	r2, r1
 800eaea:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	f7f2 fe0b 	bl	8001710 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eafa:	bf00      	nop
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb0e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f7f2 fdad 	bl	8001670 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eb16:	bf00      	nop
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b084      	sub	sp, #16
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb2a:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eb32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800eb4a:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f7ff ff6f 	bl	800ea30 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800eb62:	68f8      	ldr	r0, [r7, #12]
 800eb64:	f7ff fdee 	bl	800e744 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eb68:	bf00      	nop
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d101      	bne.n	800eb82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e049      	b.n	800ec16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d106      	bne.n	800eb9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7f3 fb96 	bl	80022c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2202      	movs	r2, #2
 800eba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	3304      	adds	r3, #4
 800ebac:	4619      	mov	r1, r3
 800ebae:	4610      	mov	r0, r2
 800ebb0:	f000 fb3c 	bl	800f22c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2201      	movs	r2, #1
 800ec00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3708      	adds	r7, #8
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d001      	beq.n	800ec38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ec34:	2301      	movs	r3, #1
 800ec36:	e06a      	b.n	800ed0e <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2202      	movs	r2, #2
 800ec3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a35      	ldr	r2, [pc, #212]	@ (800ed1c <HAL_TIM_Base_Start+0xfc>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d040      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	4a34      	ldr	r2, [pc, #208]	@ (800ed20 <HAL_TIM_Base_Start+0x100>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d03b      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec5c:	d036      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec66:	d031      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a2d      	ldr	r2, [pc, #180]	@ (800ed24 <HAL_TIM_Base_Start+0x104>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d02c      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a2c      	ldr	r2, [pc, #176]	@ (800ed28 <HAL_TIM_Base_Start+0x108>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d027      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a2a      	ldr	r2, [pc, #168]	@ (800ed2c <HAL_TIM_Base_Start+0x10c>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d022      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a29      	ldr	r2, [pc, #164]	@ (800ed30 <HAL_TIM_Base_Start+0x110>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d01d      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a27      	ldr	r2, [pc, #156]	@ (800ed34 <HAL_TIM_Base_Start+0x114>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d018      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a26      	ldr	r2, [pc, #152]	@ (800ed38 <HAL_TIM_Base_Start+0x118>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d013      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a24      	ldr	r2, [pc, #144]	@ (800ed3c <HAL_TIM_Base_Start+0x11c>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d00e      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a23      	ldr	r2, [pc, #140]	@ (800ed40 <HAL_TIM_Base_Start+0x120>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d009      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a21      	ldr	r2, [pc, #132]	@ (800ed44 <HAL_TIM_Base_Start+0x124>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d004      	beq.n	800eccc <HAL_TIM_Base_Start+0xac>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4a20      	ldr	r2, [pc, #128]	@ (800ed48 <HAL_TIM_Base_Start+0x128>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d115      	bne.n	800ecf8 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	689a      	ldr	r2, [r3, #8]
 800ecd2:	4b1e      	ldr	r3, [pc, #120]	@ (800ed4c <HAL_TIM_Base_Start+0x12c>)
 800ecd4:	4013      	ands	r3, r2
 800ecd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b06      	cmp	r3, #6
 800ecdc:	d015      	beq.n	800ed0a <HAL_TIM_Base_Start+0xea>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ece4:	d011      	beq.n	800ed0a <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f042 0201 	orr.w	r2, r2, #1
 800ecf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecf6:	e008      	b.n	800ed0a <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f042 0201 	orr.w	r2, r2, #1
 800ed06:	601a      	str	r2, [r3, #0]
 800ed08:	e000      	b.n	800ed0c <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	40012c00 	.word	0x40012c00
 800ed20:	50012c00 	.word	0x50012c00
 800ed24:	40000400 	.word	0x40000400
 800ed28:	50000400 	.word	0x50000400
 800ed2c:	40000800 	.word	0x40000800
 800ed30:	50000800 	.word	0x50000800
 800ed34:	40000c00 	.word	0x40000c00
 800ed38:	50000c00 	.word	0x50000c00
 800ed3c:	40013400 	.word	0x40013400
 800ed40:	50013400 	.word	0x50013400
 800ed44:	40014000 	.word	0x40014000
 800ed48:	50014000 	.word	0x50014000
 800ed4c:	00010007 	.word	0x00010007

0800ed50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e049      	b.n	800edf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d106      	bne.n	800ed7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7f3 fa84 	bl	8002284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2202      	movs	r2, #2
 800ed80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	3304      	adds	r3, #4
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	4610      	mov	r0, r2
 800ed90:	f000 fa4c 	bl	800f22c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2201      	movs	r2, #1
 800ed98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2201      	movs	r2, #1
 800edd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2201      	movs	r2, #1
 800edd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2201      	movs	r2, #1
 800ede0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2201      	movs	r2, #1
 800edf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
	...

0800ee00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d101      	bne.n	800ee1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ee1a:	2302      	movs	r3, #2
 800ee1c:	e0ff      	b.n	800f01e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2201      	movs	r2, #1
 800ee22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2b14      	cmp	r3, #20
 800ee2a:	f200 80f0 	bhi.w	800f00e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ee2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ee30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee34:	0800ee89 	.word	0x0800ee89
 800ee38:	0800f00f 	.word	0x0800f00f
 800ee3c:	0800f00f 	.word	0x0800f00f
 800ee40:	0800f00f 	.word	0x0800f00f
 800ee44:	0800eec9 	.word	0x0800eec9
 800ee48:	0800f00f 	.word	0x0800f00f
 800ee4c:	0800f00f 	.word	0x0800f00f
 800ee50:	0800f00f 	.word	0x0800f00f
 800ee54:	0800ef0b 	.word	0x0800ef0b
 800ee58:	0800f00f 	.word	0x0800f00f
 800ee5c:	0800f00f 	.word	0x0800f00f
 800ee60:	0800f00f 	.word	0x0800f00f
 800ee64:	0800ef4b 	.word	0x0800ef4b
 800ee68:	0800f00f 	.word	0x0800f00f
 800ee6c:	0800f00f 	.word	0x0800f00f
 800ee70:	0800f00f 	.word	0x0800f00f
 800ee74:	0800ef8d 	.word	0x0800ef8d
 800ee78:	0800f00f 	.word	0x0800f00f
 800ee7c:	0800f00f 	.word	0x0800f00f
 800ee80:	0800f00f 	.word	0x0800f00f
 800ee84:	0800efcd 	.word	0x0800efcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68b9      	ldr	r1, [r7, #8]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f000 fad2 	bl	800f438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	699a      	ldr	r2, [r3, #24]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f042 0208 	orr.w	r2, r2, #8
 800eea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	699a      	ldr	r2, [r3, #24]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f022 0204 	bic.w	r2, r2, #4
 800eeb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	6999      	ldr	r1, [r3, #24]
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	691a      	ldr	r2, [r3, #16]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	430a      	orrs	r2, r1
 800eec4:	619a      	str	r2, [r3, #24]
      break;
 800eec6:	e0a5      	b.n	800f014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68b9      	ldr	r1, [r7, #8]
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 fb74 	bl	800f5bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	699a      	ldr	r2, [r3, #24]
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	699a      	ldr	r2, [r3, #24]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	6999      	ldr	r1, [r3, #24]
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	691b      	ldr	r3, [r3, #16]
 800eefe:	021a      	lsls	r2, r3, #8
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	430a      	orrs	r2, r1
 800ef06:	619a      	str	r2, [r3, #24]
      break;
 800ef08:	e084      	b.n	800f014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68b9      	ldr	r1, [r7, #8]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f000 fc03 	bl	800f71c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	69da      	ldr	r2, [r3, #28]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f042 0208 	orr.w	r2, r2, #8
 800ef24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	69da      	ldr	r2, [r3, #28]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f022 0204 	bic.w	r2, r2, #4
 800ef34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	69d9      	ldr	r1, [r3, #28]
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	691a      	ldr	r2, [r3, #16]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	430a      	orrs	r2, r1
 800ef46:	61da      	str	r2, [r3, #28]
      break;
 800ef48:	e064      	b.n	800f014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	68b9      	ldr	r1, [r7, #8]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f000 fc91 	bl	800f878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	69da      	ldr	r2, [r3, #28]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ef64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	69da      	ldr	r2, [r3, #28]
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ef74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	69d9      	ldr	r1, [r3, #28]
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	691b      	ldr	r3, [r3, #16]
 800ef80:	021a      	lsls	r2, r3, #8
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	430a      	orrs	r2, r1
 800ef88:	61da      	str	r2, [r3, #28]
      break;
 800ef8a:	e043      	b.n	800f014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68b9      	ldr	r1, [r7, #8]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f000 fd20 	bl	800f9d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f042 0208 	orr.w	r2, r2, #8
 800efa6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f022 0204 	bic.w	r2, r2, #4
 800efb6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	691a      	ldr	r2, [r3, #16]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	430a      	orrs	r2, r1
 800efc8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800efca:	e023      	b.n	800f014 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	68b9      	ldr	r1, [r7, #8]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f000 fd82 	bl	800fadc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800efe6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eff6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	021a      	lsls	r2, r3, #8
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	430a      	orrs	r2, r1
 800f00a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f00c:	e002      	b.n	800f014 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f00e:	2301      	movs	r3, #1
 800f010:	75fb      	strb	r3, [r7, #23]
      break;
 800f012:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3718      	adds	r7, #24
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop

0800f028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d101      	bne.n	800f044 <HAL_TIM_ConfigClockSource+0x1c>
 800f040:	2302      	movs	r3, #2
 800f042:	e0e6      	b.n	800f212 <HAL_TIM_ConfigClockSource+0x1ea>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2202      	movs	r2, #2
 800f050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f062:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f06e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68ba      	ldr	r2, [r7, #8]
 800f076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a67      	ldr	r2, [pc, #412]	@ (800f21c <HAL_TIM_ConfigClockSource+0x1f4>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	f000 80b1 	beq.w	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f084:	4a65      	ldr	r2, [pc, #404]	@ (800f21c <HAL_TIM_ConfigClockSource+0x1f4>)
 800f086:	4293      	cmp	r3, r2
 800f088:	f200 80b6 	bhi.w	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f08c:	4a64      	ldr	r2, [pc, #400]	@ (800f220 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	f000 80a9 	beq.w	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f094:	4a62      	ldr	r2, [pc, #392]	@ (800f220 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f096:	4293      	cmp	r3, r2
 800f098:	f200 80ae 	bhi.w	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f09c:	4a61      	ldr	r2, [pc, #388]	@ (800f224 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	f000 80a1 	beq.w	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f0a4:	4a5f      	ldr	r2, [pc, #380]	@ (800f224 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	f200 80a6 	bhi.w	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f0ac:	4a5e      	ldr	r2, [pc, #376]	@ (800f228 <HAL_TIM_ConfigClockSource+0x200>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	f000 8099 	beq.w	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f0b4:	4a5c      	ldr	r2, [pc, #368]	@ (800f228 <HAL_TIM_ConfigClockSource+0x200>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	f200 809e 	bhi.w	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f0bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f0c0:	f000 8091 	beq.w	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f0c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f0c8:	f200 8096 	bhi.w	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f0cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0d0:	f000 8089 	beq.w	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f0d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0d8:	f200 808e 	bhi.w	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f0dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0e0:	d03e      	beq.n	800f160 <HAL_TIM_ConfigClockSource+0x138>
 800f0e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0e6:	f200 8087 	bhi.w	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f0ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0ee:	f000 8086 	beq.w	800f1fe <HAL_TIM_ConfigClockSource+0x1d6>
 800f0f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0f6:	d87f      	bhi.n	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f0f8:	2b70      	cmp	r3, #112	@ 0x70
 800f0fa:	d01a      	beq.n	800f132 <HAL_TIM_ConfigClockSource+0x10a>
 800f0fc:	2b70      	cmp	r3, #112	@ 0x70
 800f0fe:	d87b      	bhi.n	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f100:	2b60      	cmp	r3, #96	@ 0x60
 800f102:	d050      	beq.n	800f1a6 <HAL_TIM_ConfigClockSource+0x17e>
 800f104:	2b60      	cmp	r3, #96	@ 0x60
 800f106:	d877      	bhi.n	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f108:	2b50      	cmp	r3, #80	@ 0x50
 800f10a:	d03c      	beq.n	800f186 <HAL_TIM_ConfigClockSource+0x15e>
 800f10c:	2b50      	cmp	r3, #80	@ 0x50
 800f10e:	d873      	bhi.n	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f110:	2b40      	cmp	r3, #64	@ 0x40
 800f112:	d058      	beq.n	800f1c6 <HAL_TIM_ConfigClockSource+0x19e>
 800f114:	2b40      	cmp	r3, #64	@ 0x40
 800f116:	d86f      	bhi.n	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f118:	2b30      	cmp	r3, #48	@ 0x30
 800f11a:	d064      	beq.n	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f11c:	2b30      	cmp	r3, #48	@ 0x30
 800f11e:	d86b      	bhi.n	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f120:	2b20      	cmp	r3, #32
 800f122:	d060      	beq.n	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f124:	2b20      	cmp	r3, #32
 800f126:	d867      	bhi.n	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d05c      	beq.n	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f12c:	2b10      	cmp	r3, #16
 800f12e:	d05a      	beq.n	800f1e6 <HAL_TIM_ConfigClockSource+0x1be>
 800f130:	e062      	b.n	800f1f8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f142:	f000 fdcb 	bl	800fcdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	609a      	str	r2, [r3, #8]
      break;
 800f15e:	e04f      	b.n	800f200 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f170:	f000 fdb4 	bl	800fcdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	689a      	ldr	r2, [r3, #8]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f182:	609a      	str	r2, [r3, #8]
      break;
 800f184:	e03c      	b.n	800f200 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f192:	461a      	mov	r2, r3
 800f194:	f000 fd26 	bl	800fbe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2150      	movs	r1, #80	@ 0x50
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f000 fd7f 	bl	800fca2 <TIM_ITRx_SetConfig>
      break;
 800f1a4:	e02c      	b.n	800f200 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	f000 fd45 	bl	800fc42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2160      	movs	r1, #96	@ 0x60
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f000 fd6f 	bl	800fca2 <TIM_ITRx_SetConfig>
      break;
 800f1c4:	e01c      	b.n	800f200 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f000 fd06 	bl	800fbe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2140      	movs	r1, #64	@ 0x40
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 fd5f 	bl	800fca2 <TIM_ITRx_SetConfig>
      break;
 800f1e4:	e00c      	b.n	800f200 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	f000 fd56 	bl	800fca2 <TIM_ITRx_SetConfig>
      break;
 800f1f6:	e003      	b.n	800f200 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f1fc:	e000      	b.n	800f200 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800f1fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2201      	movs	r2, #1
 800f204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f210:	7bfb      	ldrb	r3, [r7, #15]
}
 800f212:	4618      	mov	r0, r3
 800f214:	3710      	adds	r7, #16
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	00100070 	.word	0x00100070
 800f220:	00100040 	.word	0x00100040
 800f224:	00100030 	.word	0x00100030
 800f228:	00100020 	.word	0x00100020

0800f22c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b085      	sub	sp, #20
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4a6e      	ldr	r2, [pc, #440]	@ (800f3f8 <TIM_Base_SetConfig+0x1cc>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d02b      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	4a6d      	ldr	r2, [pc, #436]	@ (800f3fc <TIM_Base_SetConfig+0x1d0>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d027      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f252:	d023      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f25a:	d01f      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4a68      	ldr	r2, [pc, #416]	@ (800f400 <TIM_Base_SetConfig+0x1d4>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d01b      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a67      	ldr	r2, [pc, #412]	@ (800f404 <TIM_Base_SetConfig+0x1d8>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d017      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a66      	ldr	r2, [pc, #408]	@ (800f408 <TIM_Base_SetConfig+0x1dc>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d013      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a65      	ldr	r2, [pc, #404]	@ (800f40c <TIM_Base_SetConfig+0x1e0>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d00f      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a64      	ldr	r2, [pc, #400]	@ (800f410 <TIM_Base_SetConfig+0x1e4>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d00b      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a63      	ldr	r2, [pc, #396]	@ (800f414 <TIM_Base_SetConfig+0x1e8>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d007      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4a62      	ldr	r2, [pc, #392]	@ (800f418 <TIM_Base_SetConfig+0x1ec>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d003      	beq.n	800f29c <TIM_Base_SetConfig+0x70>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a61      	ldr	r2, [pc, #388]	@ (800f41c <TIM_Base_SetConfig+0x1f0>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d108      	bne.n	800f2ae <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	68fa      	ldr	r2, [r7, #12]
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a51      	ldr	r2, [pc, #324]	@ (800f3f8 <TIM_Base_SetConfig+0x1cc>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d043      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4a50      	ldr	r2, [pc, #320]	@ (800f3fc <TIM_Base_SetConfig+0x1d0>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d03f      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2c4:	d03b      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f2cc:	d037      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4a4b      	ldr	r2, [pc, #300]	@ (800f400 <TIM_Base_SetConfig+0x1d4>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d033      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4a4a      	ldr	r2, [pc, #296]	@ (800f404 <TIM_Base_SetConfig+0x1d8>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d02f      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4a49      	ldr	r2, [pc, #292]	@ (800f408 <TIM_Base_SetConfig+0x1dc>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d02b      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4a48      	ldr	r2, [pc, #288]	@ (800f40c <TIM_Base_SetConfig+0x1e0>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d027      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4a47      	ldr	r2, [pc, #284]	@ (800f410 <TIM_Base_SetConfig+0x1e4>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d023      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4a46      	ldr	r2, [pc, #280]	@ (800f414 <TIM_Base_SetConfig+0x1e8>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d01f      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4a45      	ldr	r2, [pc, #276]	@ (800f418 <TIM_Base_SetConfig+0x1ec>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d01b      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a44      	ldr	r2, [pc, #272]	@ (800f41c <TIM_Base_SetConfig+0x1f0>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d017      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a43      	ldr	r2, [pc, #268]	@ (800f420 <TIM_Base_SetConfig+0x1f4>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d013      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a42      	ldr	r2, [pc, #264]	@ (800f424 <TIM_Base_SetConfig+0x1f8>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d00f      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a41      	ldr	r2, [pc, #260]	@ (800f428 <TIM_Base_SetConfig+0x1fc>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d00b      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a40      	ldr	r2, [pc, #256]	@ (800f42c <TIM_Base_SetConfig+0x200>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d007      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a3f      	ldr	r2, [pc, #252]	@ (800f430 <TIM_Base_SetConfig+0x204>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d003      	beq.n	800f33e <TIM_Base_SetConfig+0x112>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a3e      	ldr	r2, [pc, #248]	@ (800f434 <TIM_Base_SetConfig+0x208>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d108      	bne.n	800f350 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	4313      	orrs	r3, r2
 800f34e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	689a      	ldr	r2, [r3, #8]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4a20      	ldr	r2, [pc, #128]	@ (800f3f8 <TIM_Base_SetConfig+0x1cc>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d023      	beq.n	800f3c4 <TIM_Base_SetConfig+0x198>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4a1f      	ldr	r2, [pc, #124]	@ (800f3fc <TIM_Base_SetConfig+0x1d0>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d01f      	beq.n	800f3c4 <TIM_Base_SetConfig+0x198>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4a24      	ldr	r2, [pc, #144]	@ (800f418 <TIM_Base_SetConfig+0x1ec>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d01b      	beq.n	800f3c4 <TIM_Base_SetConfig+0x198>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a23      	ldr	r2, [pc, #140]	@ (800f41c <TIM_Base_SetConfig+0x1f0>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d017      	beq.n	800f3c4 <TIM_Base_SetConfig+0x198>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4a22      	ldr	r2, [pc, #136]	@ (800f420 <TIM_Base_SetConfig+0x1f4>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d013      	beq.n	800f3c4 <TIM_Base_SetConfig+0x198>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a21      	ldr	r2, [pc, #132]	@ (800f424 <TIM_Base_SetConfig+0x1f8>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d00f      	beq.n	800f3c4 <TIM_Base_SetConfig+0x198>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a20      	ldr	r2, [pc, #128]	@ (800f428 <TIM_Base_SetConfig+0x1fc>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d00b      	beq.n	800f3c4 <TIM_Base_SetConfig+0x198>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4a1f      	ldr	r2, [pc, #124]	@ (800f42c <TIM_Base_SetConfig+0x200>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d007      	beq.n	800f3c4 <TIM_Base_SetConfig+0x198>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4a1e      	ldr	r2, [pc, #120]	@ (800f430 <TIM_Base_SetConfig+0x204>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d003      	beq.n	800f3c4 <TIM_Base_SetConfig+0x198>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4a1d      	ldr	r2, [pc, #116]	@ (800f434 <TIM_Base_SetConfig+0x208>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d103      	bne.n	800f3cc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	691a      	ldr	r2, [r3, #16]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	691b      	ldr	r3, [r3, #16]
 800f3d6:	f003 0301 	and.w	r3, r3, #1
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d105      	bne.n	800f3ea <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	f023 0201 	bic.w	r2, r3, #1
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	611a      	str	r2, [r3, #16]
  }
}
 800f3ea:	bf00      	nop
 800f3ec:	3714      	adds	r7, #20
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	40012c00 	.word	0x40012c00
 800f3fc:	50012c00 	.word	0x50012c00
 800f400:	40000400 	.word	0x40000400
 800f404:	50000400 	.word	0x50000400
 800f408:	40000800 	.word	0x40000800
 800f40c:	50000800 	.word	0x50000800
 800f410:	40000c00 	.word	0x40000c00
 800f414:	50000c00 	.word	0x50000c00
 800f418:	40013400 	.word	0x40013400
 800f41c:	50013400 	.word	0x50013400
 800f420:	40014000 	.word	0x40014000
 800f424:	50014000 	.word	0x50014000
 800f428:	40014400 	.word	0x40014400
 800f42c:	50014400 	.word	0x50014400
 800f430:	40014800 	.word	0x40014800
 800f434:	50014800 	.word	0x50014800

0800f438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f438:	b480      	push	{r7}
 800f43a:	b087      	sub	sp, #28
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6a1b      	ldr	r3, [r3, #32]
 800f44c:	f023 0201 	bic.w	r2, r3, #1
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	699b      	ldr	r3, [r3, #24]
 800f45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f023 0303 	bic.w	r3, r3, #3
 800f472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	4313      	orrs	r3, r2
 800f47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	f023 0302 	bic.w	r3, r3, #2
 800f484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	4313      	orrs	r3, r2
 800f48e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a40      	ldr	r2, [pc, #256]	@ (800f594 <TIM_OC1_SetConfig+0x15c>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d023      	beq.n	800f4e0 <TIM_OC1_SetConfig+0xa8>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a3f      	ldr	r2, [pc, #252]	@ (800f598 <TIM_OC1_SetConfig+0x160>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d01f      	beq.n	800f4e0 <TIM_OC1_SetConfig+0xa8>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a3e      	ldr	r2, [pc, #248]	@ (800f59c <TIM_OC1_SetConfig+0x164>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d01b      	beq.n	800f4e0 <TIM_OC1_SetConfig+0xa8>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a3d      	ldr	r2, [pc, #244]	@ (800f5a0 <TIM_OC1_SetConfig+0x168>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d017      	beq.n	800f4e0 <TIM_OC1_SetConfig+0xa8>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4a3c      	ldr	r2, [pc, #240]	@ (800f5a4 <TIM_OC1_SetConfig+0x16c>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d013      	beq.n	800f4e0 <TIM_OC1_SetConfig+0xa8>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a3b      	ldr	r2, [pc, #236]	@ (800f5a8 <TIM_OC1_SetConfig+0x170>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d00f      	beq.n	800f4e0 <TIM_OC1_SetConfig+0xa8>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a3a      	ldr	r2, [pc, #232]	@ (800f5ac <TIM_OC1_SetConfig+0x174>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d00b      	beq.n	800f4e0 <TIM_OC1_SetConfig+0xa8>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4a39      	ldr	r2, [pc, #228]	@ (800f5b0 <TIM_OC1_SetConfig+0x178>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d007      	beq.n	800f4e0 <TIM_OC1_SetConfig+0xa8>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	4a38      	ldr	r2, [pc, #224]	@ (800f5b4 <TIM_OC1_SetConfig+0x17c>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d003      	beq.n	800f4e0 <TIM_OC1_SetConfig+0xa8>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a37      	ldr	r2, [pc, #220]	@ (800f5b8 <TIM_OC1_SetConfig+0x180>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d10c      	bne.n	800f4fa <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	f023 0308 	bic.w	r3, r3, #8
 800f4e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	697a      	ldr	r2, [r7, #20]
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	f023 0304 	bic.w	r3, r3, #4
 800f4f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a25      	ldr	r2, [pc, #148]	@ (800f594 <TIM_OC1_SetConfig+0x15c>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d023      	beq.n	800f54a <TIM_OC1_SetConfig+0x112>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a24      	ldr	r2, [pc, #144]	@ (800f598 <TIM_OC1_SetConfig+0x160>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d01f      	beq.n	800f54a <TIM_OC1_SetConfig+0x112>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4a23      	ldr	r2, [pc, #140]	@ (800f59c <TIM_OC1_SetConfig+0x164>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d01b      	beq.n	800f54a <TIM_OC1_SetConfig+0x112>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4a22      	ldr	r2, [pc, #136]	@ (800f5a0 <TIM_OC1_SetConfig+0x168>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d017      	beq.n	800f54a <TIM_OC1_SetConfig+0x112>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4a21      	ldr	r2, [pc, #132]	@ (800f5a4 <TIM_OC1_SetConfig+0x16c>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d013      	beq.n	800f54a <TIM_OC1_SetConfig+0x112>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4a20      	ldr	r2, [pc, #128]	@ (800f5a8 <TIM_OC1_SetConfig+0x170>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d00f      	beq.n	800f54a <TIM_OC1_SetConfig+0x112>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4a1f      	ldr	r2, [pc, #124]	@ (800f5ac <TIM_OC1_SetConfig+0x174>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d00b      	beq.n	800f54a <TIM_OC1_SetConfig+0x112>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4a1e      	ldr	r2, [pc, #120]	@ (800f5b0 <TIM_OC1_SetConfig+0x178>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d007      	beq.n	800f54a <TIM_OC1_SetConfig+0x112>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4a1d      	ldr	r2, [pc, #116]	@ (800f5b4 <TIM_OC1_SetConfig+0x17c>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d003      	beq.n	800f54a <TIM_OC1_SetConfig+0x112>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4a1c      	ldr	r2, [pc, #112]	@ (800f5b8 <TIM_OC1_SetConfig+0x180>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d111      	bne.n	800f56e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	695b      	ldr	r3, [r3, #20]
 800f55e:	693a      	ldr	r2, [r7, #16]
 800f560:	4313      	orrs	r3, r2
 800f562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	699b      	ldr	r3, [r3, #24]
 800f568:	693a      	ldr	r2, [r7, #16]
 800f56a:	4313      	orrs	r3, r2
 800f56c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	693a      	ldr	r2, [r7, #16]
 800f572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	697a      	ldr	r2, [r7, #20]
 800f586:	621a      	str	r2, [r3, #32]
}
 800f588:	bf00      	nop
 800f58a:	371c      	adds	r7, #28
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr
 800f594:	40012c00 	.word	0x40012c00
 800f598:	50012c00 	.word	0x50012c00
 800f59c:	40013400 	.word	0x40013400
 800f5a0:	50013400 	.word	0x50013400
 800f5a4:	40014000 	.word	0x40014000
 800f5a8:	50014000 	.word	0x50014000
 800f5ac:	40014400 	.word	0x40014400
 800f5b0:	50014400 	.word	0x50014400
 800f5b4:	40014800 	.word	0x40014800
 800f5b8:	50014800 	.word	0x50014800

0800f5bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b087      	sub	sp, #28
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6a1b      	ldr	r3, [r3, #32]
 800f5ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6a1b      	ldr	r3, [r3, #32]
 800f5d0:	f023 0210 	bic.w	r2, r3, #16
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	699b      	ldr	r3, [r3, #24]
 800f5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f5ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f5f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	021b      	lsls	r3, r3, #8
 800f5fe:	68fa      	ldr	r2, [r7, #12]
 800f600:	4313      	orrs	r3, r2
 800f602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	f023 0320 	bic.w	r3, r3, #32
 800f60a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	689b      	ldr	r3, [r3, #8]
 800f610:	011b      	lsls	r3, r3, #4
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	4313      	orrs	r3, r2
 800f616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a36      	ldr	r2, [pc, #216]	@ (800f6f4 <TIM_OC2_SetConfig+0x138>)
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d00b      	beq.n	800f638 <TIM_OC2_SetConfig+0x7c>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4a35      	ldr	r2, [pc, #212]	@ (800f6f8 <TIM_OC2_SetConfig+0x13c>)
 800f624:	4293      	cmp	r3, r2
 800f626:	d007      	beq.n	800f638 <TIM_OC2_SetConfig+0x7c>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a34      	ldr	r2, [pc, #208]	@ (800f6fc <TIM_OC2_SetConfig+0x140>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d003      	beq.n	800f638 <TIM_OC2_SetConfig+0x7c>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a33      	ldr	r2, [pc, #204]	@ (800f700 <TIM_OC2_SetConfig+0x144>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d10d      	bne.n	800f654 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f63e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	011b      	lsls	r3, r3, #4
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	4313      	orrs	r3, r2
 800f64a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a27      	ldr	r2, [pc, #156]	@ (800f6f4 <TIM_OC2_SetConfig+0x138>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d023      	beq.n	800f6a4 <TIM_OC2_SetConfig+0xe8>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a26      	ldr	r2, [pc, #152]	@ (800f6f8 <TIM_OC2_SetConfig+0x13c>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d01f      	beq.n	800f6a4 <TIM_OC2_SetConfig+0xe8>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4a25      	ldr	r2, [pc, #148]	@ (800f6fc <TIM_OC2_SetConfig+0x140>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d01b      	beq.n	800f6a4 <TIM_OC2_SetConfig+0xe8>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4a24      	ldr	r2, [pc, #144]	@ (800f700 <TIM_OC2_SetConfig+0x144>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d017      	beq.n	800f6a4 <TIM_OC2_SetConfig+0xe8>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4a23      	ldr	r2, [pc, #140]	@ (800f704 <TIM_OC2_SetConfig+0x148>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d013      	beq.n	800f6a4 <TIM_OC2_SetConfig+0xe8>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4a22      	ldr	r2, [pc, #136]	@ (800f708 <TIM_OC2_SetConfig+0x14c>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d00f      	beq.n	800f6a4 <TIM_OC2_SetConfig+0xe8>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a21      	ldr	r2, [pc, #132]	@ (800f70c <TIM_OC2_SetConfig+0x150>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d00b      	beq.n	800f6a4 <TIM_OC2_SetConfig+0xe8>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	4a20      	ldr	r2, [pc, #128]	@ (800f710 <TIM_OC2_SetConfig+0x154>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d007      	beq.n	800f6a4 <TIM_OC2_SetConfig+0xe8>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4a1f      	ldr	r2, [pc, #124]	@ (800f714 <TIM_OC2_SetConfig+0x158>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d003      	beq.n	800f6a4 <TIM_OC2_SetConfig+0xe8>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4a1e      	ldr	r2, [pc, #120]	@ (800f718 <TIM_OC2_SetConfig+0x15c>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d113      	bne.n	800f6cc <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f6aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f6b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	695b      	ldr	r3, [r3, #20]
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	693a      	ldr	r2, [r7, #16]
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	699b      	ldr	r3, [r3, #24]
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	693a      	ldr	r2, [r7, #16]
 800f6c8:	4313      	orrs	r3, r2
 800f6ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	685a      	ldr	r2, [r3, #4]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	697a      	ldr	r2, [r7, #20]
 800f6e4:	621a      	str	r2, [r3, #32]
}
 800f6e6:	bf00      	nop
 800f6e8:	371c      	adds	r7, #28
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr
 800f6f2:	bf00      	nop
 800f6f4:	40012c00 	.word	0x40012c00
 800f6f8:	50012c00 	.word	0x50012c00
 800f6fc:	40013400 	.word	0x40013400
 800f700:	50013400 	.word	0x50013400
 800f704:	40014000 	.word	0x40014000
 800f708:	50014000 	.word	0x50014000
 800f70c:	40014400 	.word	0x40014400
 800f710:	50014400 	.word	0x50014400
 800f714:	40014800 	.word	0x40014800
 800f718:	50014800 	.word	0x50014800

0800f71c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b087      	sub	sp, #28
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6a1b      	ldr	r3, [r3, #32]
 800f730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	69db      	ldr	r3, [r3, #28]
 800f742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f74a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f023 0303 	bic.w	r3, r3, #3
 800f756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	4313      	orrs	r3, r2
 800f760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	689b      	ldr	r3, [r3, #8]
 800f76e:	021b      	lsls	r3, r3, #8
 800f770:	697a      	ldr	r2, [r7, #20]
 800f772:	4313      	orrs	r3, r2
 800f774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4a35      	ldr	r2, [pc, #212]	@ (800f850 <TIM_OC3_SetConfig+0x134>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d00b      	beq.n	800f796 <TIM_OC3_SetConfig+0x7a>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4a34      	ldr	r2, [pc, #208]	@ (800f854 <TIM_OC3_SetConfig+0x138>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d007      	beq.n	800f796 <TIM_OC3_SetConfig+0x7a>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4a33      	ldr	r2, [pc, #204]	@ (800f858 <TIM_OC3_SetConfig+0x13c>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d003      	beq.n	800f796 <TIM_OC3_SetConfig+0x7a>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	4a32      	ldr	r2, [pc, #200]	@ (800f85c <TIM_OC3_SetConfig+0x140>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d10d      	bne.n	800f7b2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f79c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	021b      	lsls	r3, r3, #8
 800f7a4:	697a      	ldr	r2, [r7, #20]
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f7b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	4a26      	ldr	r2, [pc, #152]	@ (800f850 <TIM_OC3_SetConfig+0x134>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d023      	beq.n	800f802 <TIM_OC3_SetConfig+0xe6>
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4a25      	ldr	r2, [pc, #148]	@ (800f854 <TIM_OC3_SetConfig+0x138>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d01f      	beq.n	800f802 <TIM_OC3_SetConfig+0xe6>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	4a24      	ldr	r2, [pc, #144]	@ (800f858 <TIM_OC3_SetConfig+0x13c>)
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d01b      	beq.n	800f802 <TIM_OC3_SetConfig+0xe6>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	4a23      	ldr	r2, [pc, #140]	@ (800f85c <TIM_OC3_SetConfig+0x140>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d017      	beq.n	800f802 <TIM_OC3_SetConfig+0xe6>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	4a22      	ldr	r2, [pc, #136]	@ (800f860 <TIM_OC3_SetConfig+0x144>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d013      	beq.n	800f802 <TIM_OC3_SetConfig+0xe6>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4a21      	ldr	r2, [pc, #132]	@ (800f864 <TIM_OC3_SetConfig+0x148>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d00f      	beq.n	800f802 <TIM_OC3_SetConfig+0xe6>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4a20      	ldr	r2, [pc, #128]	@ (800f868 <TIM_OC3_SetConfig+0x14c>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d00b      	beq.n	800f802 <TIM_OC3_SetConfig+0xe6>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4a1f      	ldr	r2, [pc, #124]	@ (800f86c <TIM_OC3_SetConfig+0x150>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d007      	beq.n	800f802 <TIM_OC3_SetConfig+0xe6>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4a1e      	ldr	r2, [pc, #120]	@ (800f870 <TIM_OC3_SetConfig+0x154>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d003      	beq.n	800f802 <TIM_OC3_SetConfig+0xe6>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4a1d      	ldr	r2, [pc, #116]	@ (800f874 <TIM_OC3_SetConfig+0x158>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d113      	bne.n	800f82a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	695b      	ldr	r3, [r3, #20]
 800f816:	011b      	lsls	r3, r3, #4
 800f818:	693a      	ldr	r2, [r7, #16]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	699b      	ldr	r3, [r3, #24]
 800f822:	011b      	lsls	r3, r3, #4
 800f824:	693a      	ldr	r2, [r7, #16]
 800f826:	4313      	orrs	r3, r2
 800f828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	693a      	ldr	r2, [r7, #16]
 800f82e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	685a      	ldr	r2, [r3, #4]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	621a      	str	r2, [r3, #32]
}
 800f844:	bf00      	nop
 800f846:	371c      	adds	r7, #28
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr
 800f850:	40012c00 	.word	0x40012c00
 800f854:	50012c00 	.word	0x50012c00
 800f858:	40013400 	.word	0x40013400
 800f85c:	50013400 	.word	0x50013400
 800f860:	40014000 	.word	0x40014000
 800f864:	50014000 	.word	0x50014000
 800f868:	40014400 	.word	0x40014400
 800f86c:	50014400 	.word	0x50014400
 800f870:	40014800 	.word	0x40014800
 800f874:	50014800 	.word	0x50014800

0800f878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f878:	b480      	push	{r7}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a1b      	ldr	r3, [r3, #32]
 800f886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a1b      	ldr	r3, [r3, #32]
 800f88c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	69db      	ldr	r3, [r3, #28]
 800f89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f8a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	021b      	lsls	r3, r3, #8
 800f8ba:	68fa      	ldr	r2, [r7, #12]
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f8c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	689b      	ldr	r3, [r3, #8]
 800f8cc:	031b      	lsls	r3, r3, #12
 800f8ce:	697a      	ldr	r2, [r7, #20]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a36      	ldr	r2, [pc, #216]	@ (800f9b0 <TIM_OC4_SetConfig+0x138>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d00b      	beq.n	800f8f4 <TIM_OC4_SetConfig+0x7c>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4a35      	ldr	r2, [pc, #212]	@ (800f9b4 <TIM_OC4_SetConfig+0x13c>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d007      	beq.n	800f8f4 <TIM_OC4_SetConfig+0x7c>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4a34      	ldr	r2, [pc, #208]	@ (800f9b8 <TIM_OC4_SetConfig+0x140>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d003      	beq.n	800f8f4 <TIM_OC4_SetConfig+0x7c>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	4a33      	ldr	r2, [pc, #204]	@ (800f9bc <TIM_OC4_SetConfig+0x144>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d10d      	bne.n	800f910 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f8fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	031b      	lsls	r3, r3, #12
 800f902:	697a      	ldr	r2, [r7, #20]
 800f904:	4313      	orrs	r3, r2
 800f906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f90e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4a27      	ldr	r2, [pc, #156]	@ (800f9b0 <TIM_OC4_SetConfig+0x138>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d023      	beq.n	800f960 <TIM_OC4_SetConfig+0xe8>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a26      	ldr	r2, [pc, #152]	@ (800f9b4 <TIM_OC4_SetConfig+0x13c>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d01f      	beq.n	800f960 <TIM_OC4_SetConfig+0xe8>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4a25      	ldr	r2, [pc, #148]	@ (800f9b8 <TIM_OC4_SetConfig+0x140>)
 800f924:	4293      	cmp	r3, r2
 800f926:	d01b      	beq.n	800f960 <TIM_OC4_SetConfig+0xe8>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4a24      	ldr	r2, [pc, #144]	@ (800f9bc <TIM_OC4_SetConfig+0x144>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d017      	beq.n	800f960 <TIM_OC4_SetConfig+0xe8>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4a23      	ldr	r2, [pc, #140]	@ (800f9c0 <TIM_OC4_SetConfig+0x148>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d013      	beq.n	800f960 <TIM_OC4_SetConfig+0xe8>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	4a22      	ldr	r2, [pc, #136]	@ (800f9c4 <TIM_OC4_SetConfig+0x14c>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d00f      	beq.n	800f960 <TIM_OC4_SetConfig+0xe8>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4a21      	ldr	r2, [pc, #132]	@ (800f9c8 <TIM_OC4_SetConfig+0x150>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d00b      	beq.n	800f960 <TIM_OC4_SetConfig+0xe8>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	4a20      	ldr	r2, [pc, #128]	@ (800f9cc <TIM_OC4_SetConfig+0x154>)
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d007      	beq.n	800f960 <TIM_OC4_SetConfig+0xe8>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a1f      	ldr	r2, [pc, #124]	@ (800f9d0 <TIM_OC4_SetConfig+0x158>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d003      	beq.n	800f960 <TIM_OC4_SetConfig+0xe8>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a1e      	ldr	r2, [pc, #120]	@ (800f9d4 <TIM_OC4_SetConfig+0x15c>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d113      	bne.n	800f988 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f966:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f96e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	019b      	lsls	r3, r3, #6
 800f976:	693a      	ldr	r2, [r7, #16]
 800f978:	4313      	orrs	r3, r2
 800f97a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	019b      	lsls	r3, r3, #6
 800f982:	693a      	ldr	r2, [r7, #16]
 800f984:	4313      	orrs	r3, r2
 800f986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	693a      	ldr	r2, [r7, #16]
 800f98c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	685a      	ldr	r2, [r3, #4]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	697a      	ldr	r2, [r7, #20]
 800f9a0:	621a      	str	r2, [r3, #32]
}
 800f9a2:	bf00      	nop
 800f9a4:	371c      	adds	r7, #28
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	40012c00 	.word	0x40012c00
 800f9b4:	50012c00 	.word	0x50012c00
 800f9b8:	40013400 	.word	0x40013400
 800f9bc:	50013400 	.word	0x50013400
 800f9c0:	40014000 	.word	0x40014000
 800f9c4:	50014000 	.word	0x50014000
 800f9c8:	40014400 	.word	0x40014400
 800f9cc:	50014400 	.word	0x50014400
 800f9d0:	40014800 	.word	0x40014800
 800f9d4:	50014800 	.word	0x50014800

0800f9d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b087      	sub	sp, #28
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6a1b      	ldr	r3, [r3, #32]
 800f9e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6a1b      	ldr	r3, [r3, #32]
 800f9ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	4313      	orrs	r3, r2
 800fa14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fa1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	689b      	ldr	r3, [r3, #8]
 800fa22:	041b      	lsls	r3, r3, #16
 800fa24:	693a      	ldr	r2, [r7, #16]
 800fa26:	4313      	orrs	r3, r2
 800fa28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4a21      	ldr	r2, [pc, #132]	@ (800fab4 <TIM_OC5_SetConfig+0xdc>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d023      	beq.n	800fa7a <TIM_OC5_SetConfig+0xa2>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4a20      	ldr	r2, [pc, #128]	@ (800fab8 <TIM_OC5_SetConfig+0xe0>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d01f      	beq.n	800fa7a <TIM_OC5_SetConfig+0xa2>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a1f      	ldr	r2, [pc, #124]	@ (800fabc <TIM_OC5_SetConfig+0xe4>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d01b      	beq.n	800fa7a <TIM_OC5_SetConfig+0xa2>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4a1e      	ldr	r2, [pc, #120]	@ (800fac0 <TIM_OC5_SetConfig+0xe8>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d017      	beq.n	800fa7a <TIM_OC5_SetConfig+0xa2>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4a1d      	ldr	r2, [pc, #116]	@ (800fac4 <TIM_OC5_SetConfig+0xec>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d013      	beq.n	800fa7a <TIM_OC5_SetConfig+0xa2>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4a1c      	ldr	r2, [pc, #112]	@ (800fac8 <TIM_OC5_SetConfig+0xf0>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d00f      	beq.n	800fa7a <TIM_OC5_SetConfig+0xa2>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a1b      	ldr	r2, [pc, #108]	@ (800facc <TIM_OC5_SetConfig+0xf4>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d00b      	beq.n	800fa7a <TIM_OC5_SetConfig+0xa2>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a1a      	ldr	r2, [pc, #104]	@ (800fad0 <TIM_OC5_SetConfig+0xf8>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d007      	beq.n	800fa7a <TIM_OC5_SetConfig+0xa2>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4a19      	ldr	r2, [pc, #100]	@ (800fad4 <TIM_OC5_SetConfig+0xfc>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d003      	beq.n	800fa7a <TIM_OC5_SetConfig+0xa2>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4a18      	ldr	r2, [pc, #96]	@ (800fad8 <TIM_OC5_SetConfig+0x100>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d109      	bne.n	800fa8e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	021b      	lsls	r3, r3, #8
 800fa88:	697a      	ldr	r2, [r7, #20]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	697a      	ldr	r2, [r7, #20]
 800fa92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	693a      	ldr	r2, [r7, #16]
 800faa6:	621a      	str	r2, [r3, #32]
}
 800faa8:	bf00      	nop
 800faaa:	371c      	adds	r7, #28
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr
 800fab4:	40012c00 	.word	0x40012c00
 800fab8:	50012c00 	.word	0x50012c00
 800fabc:	40013400 	.word	0x40013400
 800fac0:	50013400 	.word	0x50013400
 800fac4:	40014000 	.word	0x40014000
 800fac8:	50014000 	.word	0x50014000
 800facc:	40014400 	.word	0x40014400
 800fad0:	50014400 	.word	0x50014400
 800fad4:	40014800 	.word	0x40014800
 800fad8:	50014800 	.word	0x50014800

0800fadc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fadc:	b480      	push	{r7}
 800fade:	b087      	sub	sp, #28
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6a1b      	ldr	r3, [r3, #32]
 800faea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6a1b      	ldr	r3, [r3, #32]
 800faf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	021b      	lsls	r3, r3, #8
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fb22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	051b      	lsls	r3, r3, #20
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a22      	ldr	r2, [pc, #136]	@ (800fbbc <TIM_OC6_SetConfig+0xe0>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d023      	beq.n	800fb80 <TIM_OC6_SetConfig+0xa4>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a21      	ldr	r2, [pc, #132]	@ (800fbc0 <TIM_OC6_SetConfig+0xe4>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d01f      	beq.n	800fb80 <TIM_OC6_SetConfig+0xa4>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4a20      	ldr	r2, [pc, #128]	@ (800fbc4 <TIM_OC6_SetConfig+0xe8>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d01b      	beq.n	800fb80 <TIM_OC6_SetConfig+0xa4>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4a1f      	ldr	r2, [pc, #124]	@ (800fbc8 <TIM_OC6_SetConfig+0xec>)
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d017      	beq.n	800fb80 <TIM_OC6_SetConfig+0xa4>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	4a1e      	ldr	r2, [pc, #120]	@ (800fbcc <TIM_OC6_SetConfig+0xf0>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d013      	beq.n	800fb80 <TIM_OC6_SetConfig+0xa4>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a1d      	ldr	r2, [pc, #116]	@ (800fbd0 <TIM_OC6_SetConfig+0xf4>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d00f      	beq.n	800fb80 <TIM_OC6_SetConfig+0xa4>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4a1c      	ldr	r2, [pc, #112]	@ (800fbd4 <TIM_OC6_SetConfig+0xf8>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d00b      	beq.n	800fb80 <TIM_OC6_SetConfig+0xa4>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4a1b      	ldr	r2, [pc, #108]	@ (800fbd8 <TIM_OC6_SetConfig+0xfc>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d007      	beq.n	800fb80 <TIM_OC6_SetConfig+0xa4>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4a1a      	ldr	r2, [pc, #104]	@ (800fbdc <TIM_OC6_SetConfig+0x100>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d003      	beq.n	800fb80 <TIM_OC6_SetConfig+0xa4>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4a19      	ldr	r2, [pc, #100]	@ (800fbe0 <TIM_OC6_SetConfig+0x104>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d109      	bne.n	800fb94 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fb86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	695b      	ldr	r3, [r3, #20]
 800fb8c:	029b      	lsls	r3, r3, #10
 800fb8e:	697a      	ldr	r2, [r7, #20]
 800fb90:	4313      	orrs	r3, r2
 800fb92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	697a      	ldr	r2, [r7, #20]
 800fb98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	685a      	ldr	r2, [r3, #4]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	693a      	ldr	r2, [r7, #16]
 800fbac:	621a      	str	r2, [r3, #32]
}
 800fbae:	bf00      	nop
 800fbb0:	371c      	adds	r7, #28
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop
 800fbbc:	40012c00 	.word	0x40012c00
 800fbc0:	50012c00 	.word	0x50012c00
 800fbc4:	40013400 	.word	0x40013400
 800fbc8:	50013400 	.word	0x50013400
 800fbcc:	40014000 	.word	0x40014000
 800fbd0:	50014000 	.word	0x50014000
 800fbd4:	40014400 	.word	0x40014400
 800fbd8:	50014400 	.word	0x50014400
 800fbdc:	40014800 	.word	0x40014800
 800fbe0:	50014800 	.word	0x50014800

0800fbe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b087      	sub	sp, #28
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6a1b      	ldr	r3, [r3, #32]
 800fbf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6a1b      	ldr	r3, [r3, #32]
 800fbfa:	f023 0201 	bic.w	r2, r3, #1
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	699b      	ldr	r3, [r3, #24]
 800fc06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fc0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	011b      	lsls	r3, r3, #4
 800fc14:	693a      	ldr	r2, [r7, #16]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	f023 030a 	bic.w	r3, r3, #10
 800fc20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fc22:	697a      	ldr	r2, [r7, #20]
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	4313      	orrs	r3, r2
 800fc28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	697a      	ldr	r2, [r7, #20]
 800fc34:	621a      	str	r2, [r3, #32]
}
 800fc36:	bf00      	nop
 800fc38:	371c      	adds	r7, #28
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr

0800fc42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc42:	b480      	push	{r7}
 800fc44:	b087      	sub	sp, #28
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	60f8      	str	r0, [r7, #12]
 800fc4a:	60b9      	str	r1, [r7, #8]
 800fc4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6a1b      	ldr	r3, [r3, #32]
 800fc52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6a1b      	ldr	r3, [r3, #32]
 800fc58:	f023 0210 	bic.w	r2, r3, #16
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	699b      	ldr	r3, [r3, #24]
 800fc64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fc6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	031b      	lsls	r3, r3, #12
 800fc72:	693a      	ldr	r2, [r7, #16]
 800fc74:	4313      	orrs	r3, r2
 800fc76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fc7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	011b      	lsls	r3, r3, #4
 800fc84:	697a      	ldr	r2, [r7, #20]
 800fc86:	4313      	orrs	r3, r2
 800fc88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	693a      	ldr	r2, [r7, #16]
 800fc8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	697a      	ldr	r2, [r7, #20]
 800fc94:	621a      	str	r2, [r3, #32]
}
 800fc96:	bf00      	nop
 800fc98:	371c      	adds	r7, #28
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr

0800fca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fca2:	b480      	push	{r7}
 800fca4:	b085      	sub	sp, #20
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
 800fcaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800fcb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fcbe:	683a      	ldr	r2, [r7, #0]
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	f043 0307 	orr.w	r3, r3, #7
 800fcc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	609a      	str	r2, [r3, #8]
}
 800fcd0:	bf00      	nop
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b087      	sub	sp, #28
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]
 800fce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fcf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	021a      	lsls	r2, r3, #8
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	431a      	orrs	r2, r3
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	4313      	orrs	r3, r2
 800fd04:	697a      	ldr	r2, [r7, #20]
 800fd06:	4313      	orrs	r3, r2
 800fd08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	609a      	str	r2, [r3, #8]
}
 800fd10:	bf00      	nop
 800fd12:	371c      	adds	r7, #28
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr

0800fd1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b085      	sub	sp, #20
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d101      	bne.n	800fd34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd30:	2302      	movs	r3, #2
 800fd32:	e097      	b.n	800fe64 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2201      	movs	r2, #1
 800fd38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2202      	movs	r2, #2
 800fd40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4a45      	ldr	r2, [pc, #276]	@ (800fe70 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d00e      	beq.n	800fd7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4a44      	ldr	r2, [pc, #272]	@ (800fe74 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d009      	beq.n	800fd7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	4a42      	ldr	r2, [pc, #264]	@ (800fe78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d004      	beq.n	800fd7c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	4a41      	ldr	r2, [pc, #260]	@ (800fe7c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d108      	bne.n	800fd8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fd82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fd94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	4313      	orrs	r3, r2
 800fda2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a2f      	ldr	r2, [pc, #188]	@ (800fe70 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d040      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a2e      	ldr	r2, [pc, #184]	@ (800fe74 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d03b      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fdc8:	d036      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fdd2:	d031      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a29      	ldr	r2, [pc, #164]	@ (800fe80 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d02c      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a28      	ldr	r2, [pc, #160]	@ (800fe84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d027      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a26      	ldr	r2, [pc, #152]	@ (800fe88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d022      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4a25      	ldr	r2, [pc, #148]	@ (800fe8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d01d      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4a23      	ldr	r2, [pc, #140]	@ (800fe90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d018      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4a22      	ldr	r2, [pc, #136]	@ (800fe94 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d013      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4a18      	ldr	r2, [pc, #96]	@ (800fe78 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d00e      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	4a17      	ldr	r2, [pc, #92]	@ (800fe7c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d009      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4a1b      	ldr	r2, [pc, #108]	@ (800fe98 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d004      	beq.n	800fe38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a1a      	ldr	r2, [pc, #104]	@ (800fe9c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d10c      	bne.n	800fe52 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	68ba      	ldr	r2, [r7, #8]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2201      	movs	r2, #1
 800fe56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fe62:	2300      	movs	r3, #0
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3714      	adds	r7, #20
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr
 800fe70:	40012c00 	.word	0x40012c00
 800fe74:	50012c00 	.word	0x50012c00
 800fe78:	40013400 	.word	0x40013400
 800fe7c:	50013400 	.word	0x50013400
 800fe80:	40000400 	.word	0x40000400
 800fe84:	50000400 	.word	0x50000400
 800fe88:	40000800 	.word	0x40000800
 800fe8c:	50000800 	.word	0x50000800
 800fe90:	40000c00 	.word	0x40000c00
 800fe94:	50000c00 	.word	0x50000c00
 800fe98:	40014000 	.word	0x40014000
 800fe9c:	50014000 	.word	0x50014000

0800fea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d101      	bne.n	800feb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800feae:	2301      	movs	r3, #1
 800feb0:	e042      	b.n	800ff38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d106      	bne.n	800feca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f7f2 fa5b 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2224      	movs	r2, #36	@ 0x24
 800fece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f022 0201 	bic.w	r2, r2, #1
 800fee0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d002      	beq.n	800fef0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 fd02 	bl	80108f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 fb51 	bl	8010598 <UART_SetConfig>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d101      	bne.n	800ff00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fefc:	2301      	movs	r3, #1
 800fefe:	e01b      	b.n	800ff38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	685a      	ldr	r2, [r3, #4]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ff0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	689a      	ldr	r2, [r3, #8]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ff1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f042 0201 	orr.w	r2, r2, #1
 800ff2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 fd81 	bl	8010a38 <UART_CheckIdleState>
 800ff36:	4603      	mov	r3, r0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b0ba      	sub	sp, #232	@ 0xe8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	69db      	ldr	r3, [r3, #28]
 800ff4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ff6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ff6e:	4013      	ands	r3, r2
 800ff70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ff74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d11b      	bne.n	800ffb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ff7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff80:	f003 0320 	and.w	r3, r3, #32
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d015      	beq.n	800ffb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ff88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff8c:	f003 0320 	and.w	r3, r3, #32
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d105      	bne.n	800ffa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d009      	beq.n	800ffb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	f000 82cb 	beq.w	8010540 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	4798      	blx	r3
      }
      return;
 800ffb2:	e2c5      	b.n	8010540 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ffb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f000 8123 	beq.w	8010204 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ffbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ffc2:	4b8d      	ldr	r3, [pc, #564]	@ (80101f8 <HAL_UART_IRQHandler+0x2b8>)
 800ffc4:	4013      	ands	r3, r2
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d106      	bne.n	800ffd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ffca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ffce:	4b8b      	ldr	r3, [pc, #556]	@ (80101fc <HAL_UART_IRQHandler+0x2bc>)
 800ffd0:	4013      	ands	r3, r2
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	f000 8116 	beq.w	8010204 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffdc:	f003 0301 	and.w	r3, r3, #1
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d011      	beq.n	8010008 <HAL_UART_IRQHandler+0xc8>
 800ffe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00b      	beq.n	8010008 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2201      	movs	r2, #1
 800fff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fffe:	f043 0201 	orr.w	r2, r3, #1
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801000c:	f003 0302 	and.w	r3, r3, #2
 8010010:	2b00      	cmp	r3, #0
 8010012:	d011      	beq.n	8010038 <HAL_UART_IRQHandler+0xf8>
 8010014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010018:	f003 0301 	and.w	r3, r3, #1
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00b      	beq.n	8010038 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2202      	movs	r2, #2
 8010026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801002e:	f043 0204 	orr.w	r2, r3, #4
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801003c:	f003 0304 	and.w	r3, r3, #4
 8010040:	2b00      	cmp	r3, #0
 8010042:	d011      	beq.n	8010068 <HAL_UART_IRQHandler+0x128>
 8010044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010048:	f003 0301 	and.w	r3, r3, #1
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00b      	beq.n	8010068 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2204      	movs	r2, #4
 8010056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801005e:	f043 0202 	orr.w	r2, r3, #2
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801006c:	f003 0308 	and.w	r3, r3, #8
 8010070:	2b00      	cmp	r3, #0
 8010072:	d017      	beq.n	80100a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010078:	f003 0320 	and.w	r3, r3, #32
 801007c:	2b00      	cmp	r3, #0
 801007e:	d105      	bne.n	801008c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010080:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010084:	4b5c      	ldr	r3, [pc, #368]	@ (80101f8 <HAL_UART_IRQHandler+0x2b8>)
 8010086:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010088:	2b00      	cmp	r3, #0
 801008a:	d00b      	beq.n	80100a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2208      	movs	r2, #8
 8010092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801009a:	f043 0208 	orr.w	r2, r3, #8
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80100a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d012      	beq.n	80100d6 <HAL_UART_IRQHandler+0x196>
 80100b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00c      	beq.n	80100d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80100c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100cc:	f043 0220 	orr.w	r2, r3, #32
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f000 8231 	beq.w	8010544 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80100e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100e6:	f003 0320 	and.w	r3, r3, #32
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d013      	beq.n	8010116 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80100ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100f2:	f003 0320 	and.w	r3, r3, #32
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d105      	bne.n	8010106 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80100fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010102:	2b00      	cmp	r3, #0
 8010104:	d007      	beq.n	8010116 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801010a:	2b00      	cmp	r3, #0
 801010c:	d003      	beq.n	8010116 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801011c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801012a:	2b40      	cmp	r3, #64	@ 0x40
 801012c:	d005      	beq.n	801013a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801012e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010132:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010136:	2b00      	cmp	r3, #0
 8010138:	d054      	beq.n	80101e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 fd93 	bl	8010c66 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	689b      	ldr	r3, [r3, #8]
 8010146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801014a:	2b40      	cmp	r3, #64	@ 0x40
 801014c:	d146      	bne.n	80101dc <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	3308      	adds	r3, #8
 8010154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010158:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801015c:	e853 3f00 	ldrex	r3, [r3]
 8010160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801016c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	3308      	adds	r3, #8
 8010176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801017a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801017e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801018a:	e841 2300 	strex	r3, r2, [r1]
 801018e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d1d9      	bne.n	801014e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d017      	beq.n	80101d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101aa:	4a15      	ldr	r2, [pc, #84]	@ (8010200 <HAL_UART_IRQHandler+0x2c0>)
 80101ac:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7f5 fb5f 	bl	8005878 <HAL_DMA_Abort_IT>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d019      	beq.n	80101f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80101ce:	4610      	mov	r0, r2
 80101d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101d2:	e00f      	b.n	80101f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f000 f9c9 	bl	801056c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101da:	e00b      	b.n	80101f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f000 f9c5 	bl	801056c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101e2:	e007      	b.n	80101f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 f9c1 	bl	801056c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2200      	movs	r2, #0
 80101ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80101f2:	e1a7      	b.n	8010544 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101f4:	bf00      	nop
    return;
 80101f6:	e1a5      	b.n	8010544 <HAL_UART_IRQHandler+0x604>
 80101f8:	10000001 	.word	0x10000001
 80101fc:	04000120 	.word	0x04000120
 8010200:	08010d33 	.word	0x08010d33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010208:	2b01      	cmp	r3, #1
 801020a:	f040 8150 	bne.w	80104ae <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801020e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010212:	f003 0310 	and.w	r3, r3, #16
 8010216:	2b00      	cmp	r3, #0
 8010218:	f000 8149 	beq.w	80104ae <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801021c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010220:	f003 0310 	and.w	r3, r3, #16
 8010224:	2b00      	cmp	r3, #0
 8010226:	f000 8142 	beq.w	80104ae <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	2210      	movs	r2, #16
 8010230:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	689b      	ldr	r3, [r3, #8]
 8010238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801023c:	2b40      	cmp	r3, #64	@ 0x40
 801023e:	f040 80b8 	bne.w	80103b2 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801024c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 8177 	beq.w	8010548 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010260:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010264:	429a      	cmp	r2, r3
 8010266:	f080 816f 	bcs.w	8010548 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010270:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801027a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801027c:	2b81      	cmp	r3, #129	@ 0x81
 801027e:	f000 8087 	beq.w	8010390 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801028a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801028e:	e853 3f00 	ldrex	r3, [r3]
 8010292:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010296:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801029a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801029e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	461a      	mov	r2, r3
 80102a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80102ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80102b0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80102b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80102bc:	e841 2300 	strex	r3, r2, [r1]
 80102c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80102c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d1da      	bne.n	8010282 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	3308      	adds	r3, #8
 80102d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80102d6:	e853 3f00 	ldrex	r3, [r3]
 80102da:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80102dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80102de:	f023 0301 	bic.w	r3, r3, #1
 80102e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	3308      	adds	r3, #8
 80102ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80102f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80102f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80102f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80102fc:	e841 2300 	strex	r3, r2, [r1]
 8010300:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010302:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010304:	2b00      	cmp	r3, #0
 8010306:	d1e1      	bne.n	80102cc <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3308      	adds	r3, #8
 801030e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010310:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010312:	e853 3f00 	ldrex	r3, [r3]
 8010316:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010318:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801031a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801031e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	3308      	adds	r3, #8
 8010328:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801032c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801032e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010330:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010332:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010334:	e841 2300 	strex	r3, r2, [r1]
 8010338:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801033a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801033c:	2b00      	cmp	r3, #0
 801033e:	d1e3      	bne.n	8010308 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2220      	movs	r2, #32
 8010344:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010356:	e853 3f00 	ldrex	r3, [r3]
 801035a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801035c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801035e:	f023 0310 	bic.w	r3, r3, #16
 8010362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	461a      	mov	r2, r3
 801036c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010372:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010374:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010376:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010378:	e841 2300 	strex	r3, r2, [r1]
 801037c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801037e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1e4      	bne.n	801034e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801038a:	4618      	mov	r0, r3
 801038c:	f7f5 f9f8 	bl	8005780 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2202      	movs	r2, #2
 8010394:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	1ad3      	subs	r3, r2, r3
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	4619      	mov	r1, r3
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 f8e8 	bl	8010580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80103b0:	e0ca      	b.n	8010548 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103be:	b29b      	uxth	r3, r3
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	f000 80bc 	beq.w	801054c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80103d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f000 80b7 	beq.w	801054c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e6:	e853 3f00 	ldrex	r3, [r3]
 80103ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80103ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	461a      	mov	r2, r3
 80103fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010400:	647b      	str	r3, [r7, #68]	@ 0x44
 8010402:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010408:	e841 2300 	strex	r3, r2, [r1]
 801040c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801040e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1e4      	bne.n	80103de <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	3308      	adds	r3, #8
 801041a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801041c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801041e:	e853 3f00 	ldrex	r3, [r3]
 8010422:	623b      	str	r3, [r7, #32]
   return(result);
 8010424:	6a3b      	ldr	r3, [r7, #32]
 8010426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801042a:	f023 0301 	bic.w	r3, r3, #1
 801042e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	3308      	adds	r3, #8
 8010438:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801043c:	633a      	str	r2, [r7, #48]	@ 0x30
 801043e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010440:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010444:	e841 2300 	strex	r3, r2, [r1]
 8010448:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801044a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801044c:	2b00      	cmp	r3, #0
 801044e:	d1e1      	bne.n	8010414 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2220      	movs	r2, #32
 8010454:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2200      	movs	r2, #0
 8010462:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	e853 3f00 	ldrex	r3, [r3]
 8010470:	60fb      	str	r3, [r7, #12]
   return(result);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f023 0310 	bic.w	r3, r3, #16
 8010478:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	461a      	mov	r2, r3
 8010482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010486:	61fb      	str	r3, [r7, #28]
 8010488:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801048a:	69b9      	ldr	r1, [r7, #24]
 801048c:	69fa      	ldr	r2, [r7, #28]
 801048e:	e841 2300 	strex	r3, r2, [r1]
 8010492:	617b      	str	r3, [r7, #20]
   return(result);
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d1e4      	bne.n	8010464 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2202      	movs	r2, #2
 801049e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80104a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80104a4:	4619      	mov	r1, r3
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 f86a 	bl	8010580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80104ac:	e04e      	b.n	801054c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80104ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d014      	beq.n	80104e4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80104ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80104be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d105      	bne.n	80104d2 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80104c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80104ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d008      	beq.n	80104e4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d03a      	beq.n	8010550 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	4798      	blx	r3
    }
    return;
 80104e2:	e035      	b.n	8010550 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80104e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d009      	beq.n	8010504 <HAL_UART_IRQHandler+0x5c4>
 80104f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80104f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d003      	beq.n	8010504 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f000 fc2e 	bl	8010d5e <UART_EndTransmit_IT>
    return;
 8010502:	e026      	b.n	8010552 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801050c:	2b00      	cmp	r3, #0
 801050e:	d009      	beq.n	8010524 <HAL_UART_IRQHandler+0x5e4>
 8010510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010514:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010518:	2b00      	cmp	r3, #0
 801051a:	d003      	beq.n	8010524 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f000 fc53 	bl	8010dc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010522:	e016      	b.n	8010552 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801052c:	2b00      	cmp	r3, #0
 801052e:	d010      	beq.n	8010552 <HAL_UART_IRQHandler+0x612>
 8010530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010534:	2b00      	cmp	r3, #0
 8010536:	da0c      	bge.n	8010552 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 fc3b 	bl	8010db4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801053e:	e008      	b.n	8010552 <HAL_UART_IRQHandler+0x612>
      return;
 8010540:	bf00      	nop
 8010542:	e006      	b.n	8010552 <HAL_UART_IRQHandler+0x612>
    return;
 8010544:	bf00      	nop
 8010546:	e004      	b.n	8010552 <HAL_UART_IRQHandler+0x612>
      return;
 8010548:	bf00      	nop
 801054a:	e002      	b.n	8010552 <HAL_UART_IRQHandler+0x612>
      return;
 801054c:	bf00      	nop
 801054e:	e000      	b.n	8010552 <HAL_UART_IRQHandler+0x612>
    return;
 8010550:	bf00      	nop
  }
}
 8010552:	37e8      	adds	r7, #232	@ 0xe8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010560:	bf00      	nop
 8010562:	370c      	adds	r7, #12
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr

0801056c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010574:	bf00      	nop
 8010576:	370c      	adds	r7, #12
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	460b      	mov	r3, r1
 801058a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801058c:	bf00      	nop
 801058e:	370c      	adds	r7, #12
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801059c:	b094      	sub	sp, #80	@ 0x50
 801059e:	af00      	add	r7, sp, #0
 80105a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80105a2:	2300      	movs	r3, #0
 80105a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80105a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	4b83      	ldr	r3, [pc, #524]	@ (80107bc <UART_SetConfig+0x224>)
 80105ae:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80105b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b2:	689a      	ldr	r2, [r3, #8]
 80105b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b6:	691b      	ldr	r3, [r3, #16]
 80105b8:	431a      	orrs	r2, r3
 80105ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105bc:	695b      	ldr	r3, [r3, #20]
 80105be:	431a      	orrs	r2, r3
 80105c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c2:	69db      	ldr	r3, [r3, #28]
 80105c4:	4313      	orrs	r3, r2
 80105c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80105c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	497c      	ldr	r1, [pc, #496]	@ (80107c0 <UART_SetConfig+0x228>)
 80105d0:	4019      	ands	r1, r3
 80105d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105d8:	430b      	orrs	r3, r1
 80105da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80105dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80105e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e8:	68d9      	ldr	r1, [r3, #12]
 80105ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	ea40 0301 	orr.w	r3, r0, r1
 80105f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80105f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f6:	699b      	ldr	r3, [r3, #24]
 80105f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80105fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	4b6f      	ldr	r3, [pc, #444]	@ (80107bc <UART_SetConfig+0x224>)
 8010600:	429a      	cmp	r2, r3
 8010602:	d009      	beq.n	8010618 <UART_SetConfig+0x80>
 8010604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	4b6e      	ldr	r3, [pc, #440]	@ (80107c4 <UART_SetConfig+0x22c>)
 801060a:	429a      	cmp	r2, r3
 801060c:	d004      	beq.n	8010618 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801060e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010610:	6a1a      	ldr	r2, [r3, #32]
 8010612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010614:	4313      	orrs	r3, r2
 8010616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8010622:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8010626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801062c:	430b      	orrs	r3, r1
 801062e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010636:	f023 000f 	bic.w	r0, r3, #15
 801063a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801063c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801063e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	ea40 0301 	orr.w	r3, r0, r1
 8010646:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801064a:	681a      	ldr	r2, [r3, #0]
 801064c:	4b5e      	ldr	r3, [pc, #376]	@ (80107c8 <UART_SetConfig+0x230>)
 801064e:	429a      	cmp	r2, r3
 8010650:	d102      	bne.n	8010658 <UART_SetConfig+0xc0>
 8010652:	2301      	movs	r3, #1
 8010654:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010656:	e032      	b.n	80106be <UART_SetConfig+0x126>
 8010658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	4b5b      	ldr	r3, [pc, #364]	@ (80107cc <UART_SetConfig+0x234>)
 801065e:	429a      	cmp	r2, r3
 8010660:	d102      	bne.n	8010668 <UART_SetConfig+0xd0>
 8010662:	2302      	movs	r3, #2
 8010664:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010666:	e02a      	b.n	80106be <UART_SetConfig+0x126>
 8010668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	4b58      	ldr	r3, [pc, #352]	@ (80107d0 <UART_SetConfig+0x238>)
 801066e:	429a      	cmp	r2, r3
 8010670:	d102      	bne.n	8010678 <UART_SetConfig+0xe0>
 8010672:	2304      	movs	r3, #4
 8010674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010676:	e022      	b.n	80106be <UART_SetConfig+0x126>
 8010678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	4b55      	ldr	r3, [pc, #340]	@ (80107d4 <UART_SetConfig+0x23c>)
 801067e:	429a      	cmp	r2, r3
 8010680:	d102      	bne.n	8010688 <UART_SetConfig+0xf0>
 8010682:	2308      	movs	r3, #8
 8010684:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010686:	e01a      	b.n	80106be <UART_SetConfig+0x126>
 8010688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	4b52      	ldr	r3, [pc, #328]	@ (80107d8 <UART_SetConfig+0x240>)
 801068e:	429a      	cmp	r2, r3
 8010690:	d102      	bne.n	8010698 <UART_SetConfig+0x100>
 8010692:	2310      	movs	r3, #16
 8010694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010696:	e012      	b.n	80106be <UART_SetConfig+0x126>
 8010698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	4b4f      	ldr	r3, [pc, #316]	@ (80107dc <UART_SetConfig+0x244>)
 801069e:	429a      	cmp	r2, r3
 80106a0:	d103      	bne.n	80106aa <UART_SetConfig+0x112>
 80106a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80106a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106a8:	e009      	b.n	80106be <UART_SetConfig+0x126>
 80106aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	4b43      	ldr	r3, [pc, #268]	@ (80107bc <UART_SetConfig+0x224>)
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d102      	bne.n	80106ba <UART_SetConfig+0x122>
 80106b4:	2320      	movs	r3, #32
 80106b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106b8:	e001      	b.n	80106be <UART_SetConfig+0x126>
 80106ba:	2300      	movs	r3, #0
 80106bc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80106be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	4b3e      	ldr	r3, [pc, #248]	@ (80107bc <UART_SetConfig+0x224>)
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d005      	beq.n	80106d4 <UART_SetConfig+0x13c>
 80106c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	4b3d      	ldr	r3, [pc, #244]	@ (80107c4 <UART_SetConfig+0x22c>)
 80106ce:	429a      	cmp	r2, r3
 80106d0:	f040 8088 	bne.w	80107e4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80106d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106d6:	2200      	movs	r2, #0
 80106d8:	623b      	str	r3, [r7, #32]
 80106da:	627a      	str	r2, [r7, #36]	@ 0x24
 80106dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80106e0:	f7fb ff28 	bl	800c534 <HAL_RCCEx_GetPeriphCLKFreq>
 80106e4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80106e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	f000 80eb 	beq.w	80108c4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80106ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106f2:	4a3b      	ldr	r2, [pc, #236]	@ (80107e0 <UART_SetConfig+0x248>)
 80106f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106f8:	461a      	mov	r2, r3
 80106fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010700:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010704:	685a      	ldr	r2, [r3, #4]
 8010706:	4613      	mov	r3, r2
 8010708:	005b      	lsls	r3, r3, #1
 801070a:	4413      	add	r3, r2
 801070c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801070e:	429a      	cmp	r2, r3
 8010710:	d305      	bcc.n	801071e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801071a:	429a      	cmp	r2, r3
 801071c:	d903      	bls.n	8010726 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 801071e:	2301      	movs	r3, #1
 8010720:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010724:	e048      	b.n	80107b8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010728:	2200      	movs	r2, #0
 801072a:	61bb      	str	r3, [r7, #24]
 801072c:	61fa      	str	r2, [r7, #28]
 801072e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010732:	4a2b      	ldr	r2, [pc, #172]	@ (80107e0 <UART_SetConfig+0x248>)
 8010734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010738:	b29b      	uxth	r3, r3
 801073a:	2200      	movs	r2, #0
 801073c:	613b      	str	r3, [r7, #16]
 801073e:	617a      	str	r2, [r7, #20]
 8010740:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010744:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010748:	f7ef fdb4 	bl	80002b4 <__aeabi_uldivmod>
 801074c:	4602      	mov	r2, r0
 801074e:	460b      	mov	r3, r1
 8010750:	4610      	mov	r0, r2
 8010752:	4619      	mov	r1, r3
 8010754:	f04f 0200 	mov.w	r2, #0
 8010758:	f04f 0300 	mov.w	r3, #0
 801075c:	020b      	lsls	r3, r1, #8
 801075e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010762:	0202      	lsls	r2, r0, #8
 8010764:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010766:	6849      	ldr	r1, [r1, #4]
 8010768:	0849      	lsrs	r1, r1, #1
 801076a:	2000      	movs	r0, #0
 801076c:	460c      	mov	r4, r1
 801076e:	4605      	mov	r5, r0
 8010770:	eb12 0804 	adds.w	r8, r2, r4
 8010774:	eb43 0905 	adc.w	r9, r3, r5
 8010778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	2200      	movs	r2, #0
 801077e:	60bb      	str	r3, [r7, #8]
 8010780:	60fa      	str	r2, [r7, #12]
 8010782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010786:	4640      	mov	r0, r8
 8010788:	4649      	mov	r1, r9
 801078a:	f7ef fd93 	bl	80002b4 <__aeabi_uldivmod>
 801078e:	4602      	mov	r2, r0
 8010790:	460b      	mov	r3, r1
 8010792:	4613      	mov	r3, r2
 8010794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801079c:	d308      	bcc.n	80107b0 <UART_SetConfig+0x218>
 801079e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80107a4:	d204      	bcs.n	80107b0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80107a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80107ac:	60da      	str	r2, [r3, #12]
 80107ae:	e003      	b.n	80107b8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80107b0:	2301      	movs	r3, #1
 80107b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80107b6:	e085      	b.n	80108c4 <UART_SetConfig+0x32c>
 80107b8:	e084      	b.n	80108c4 <UART_SetConfig+0x32c>
 80107ba:	bf00      	nop
 80107bc:	46002400 	.word	0x46002400
 80107c0:	cfff69f3 	.word	0xcfff69f3
 80107c4:	56002400 	.word	0x56002400
 80107c8:	40013800 	.word	0x40013800
 80107cc:	40004400 	.word	0x40004400
 80107d0:	40004800 	.word	0x40004800
 80107d4:	40004c00 	.word	0x40004c00
 80107d8:	40005000 	.word	0x40005000
 80107dc:	40006400 	.word	0x40006400
 80107e0:	080119fc 	.word	0x080119fc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80107e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e6:	69db      	ldr	r3, [r3, #28]
 80107e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80107ec:	d13c      	bne.n	8010868 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80107ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107f0:	2200      	movs	r2, #0
 80107f2:	603b      	str	r3, [r7, #0]
 80107f4:	607a      	str	r2, [r7, #4]
 80107f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80107fa:	f7fb fe9b 	bl	800c534 <HAL_RCCEx_GetPeriphCLKFreq>
 80107fe:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010802:	2b00      	cmp	r3, #0
 8010804:	d05e      	beq.n	80108c4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801080a:	4a39      	ldr	r2, [pc, #228]	@ (80108f0 <UART_SetConfig+0x358>)
 801080c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010810:	461a      	mov	r2, r3
 8010812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010814:	fbb3 f3f2 	udiv	r3, r3, r2
 8010818:	005a      	lsls	r2, r3, #1
 801081a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	085b      	lsrs	r3, r3, #1
 8010820:	441a      	add	r2, r3
 8010822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	fbb2 f3f3 	udiv	r3, r2, r3
 801082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801082c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801082e:	2b0f      	cmp	r3, #15
 8010830:	d916      	bls.n	8010860 <UART_SetConfig+0x2c8>
 8010832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010838:	d212      	bcs.n	8010860 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801083a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801083c:	b29b      	uxth	r3, r3
 801083e:	f023 030f 	bic.w	r3, r3, #15
 8010842:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010846:	085b      	lsrs	r3, r3, #1
 8010848:	b29b      	uxth	r3, r3
 801084a:	f003 0307 	and.w	r3, r3, #7
 801084e:	b29a      	uxth	r2, r3
 8010850:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010852:	4313      	orrs	r3, r2
 8010854:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801085c:	60da      	str	r2, [r3, #12]
 801085e:	e031      	b.n	80108c4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010860:	2301      	movs	r3, #1
 8010862:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010866:	e02d      	b.n	80108c4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801086a:	2200      	movs	r2, #0
 801086c:	469a      	mov	sl, r3
 801086e:	4693      	mov	fp, r2
 8010870:	4650      	mov	r0, sl
 8010872:	4659      	mov	r1, fp
 8010874:	f7fb fe5e 	bl	800c534 <HAL_RCCEx_GetPeriphCLKFreq>
 8010878:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801087a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801087c:	2b00      	cmp	r3, #0
 801087e:	d021      	beq.n	80108c4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010884:	4a1a      	ldr	r2, [pc, #104]	@ (80108f0 <UART_SetConfig+0x358>)
 8010886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801088a:	461a      	mov	r2, r3
 801088c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801088e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	085b      	lsrs	r3, r3, #1
 8010898:	441a      	add	r2, r3
 801089a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80108a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108a6:	2b0f      	cmp	r3, #15
 80108a8:	d909      	bls.n	80108be <UART_SetConfig+0x326>
 80108aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80108b0:	d205      	bcs.n	80108be <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80108b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	60da      	str	r2, [r3, #12]
 80108bc:	e002      	b.n	80108c4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80108be:	2301      	movs	r3, #1
 80108c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80108c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c6:	2201      	movs	r2, #1
 80108c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80108cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ce:	2201      	movs	r2, #1
 80108d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80108d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d6:	2200      	movs	r2, #0
 80108d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80108da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108dc:	2200      	movs	r2, #0
 80108de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80108e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3750      	adds	r7, #80	@ 0x50
 80108e8:	46bd      	mov	sp, r7
 80108ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108ee:	bf00      	nop
 80108f0:	080119fc 	.word	0x080119fc

080108f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010900:	f003 0308 	and.w	r3, r3, #8
 8010904:	2b00      	cmp	r3, #0
 8010906:	d00a      	beq.n	801091e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	430a      	orrs	r2, r1
 801091c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010922:	f003 0301 	and.w	r3, r3, #1
 8010926:	2b00      	cmp	r3, #0
 8010928:	d00a      	beq.n	8010940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	430a      	orrs	r2, r1
 801093e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010944:	f003 0302 	and.w	r3, r3, #2
 8010948:	2b00      	cmp	r3, #0
 801094a:	d00a      	beq.n	8010962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	430a      	orrs	r2, r1
 8010960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010966:	f003 0304 	and.w	r3, r3, #4
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00a      	beq.n	8010984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	430a      	orrs	r2, r1
 8010982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010988:	f003 0310 	and.w	r3, r3, #16
 801098c:	2b00      	cmp	r3, #0
 801098e:	d00a      	beq.n	80109a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	430a      	orrs	r2, r1
 80109a4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109aa:	f003 0320 	and.w	r3, r3, #32
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00a      	beq.n	80109c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	430a      	orrs	r2, r1
 80109c6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d01a      	beq.n	8010a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	430a      	orrs	r2, r1
 80109e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109f2:	d10a      	bne.n	8010a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	430a      	orrs	r2, r1
 8010a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00a      	beq.n	8010a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	430a      	orrs	r2, r1
 8010a2a:	605a      	str	r2, [r3, #4]
  }
}
 8010a2c:	bf00      	nop
 8010a2e:	370c      	adds	r7, #12
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b098      	sub	sp, #96	@ 0x60
 8010a3c:	af02      	add	r7, sp, #8
 8010a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010a48:	f7f2 f92a 	bl	8002ca0 <HAL_GetTick>
 8010a4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f003 0308 	and.w	r3, r3, #8
 8010a58:	2b08      	cmp	r3, #8
 8010a5a:	d12f      	bne.n	8010abc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a64:	2200      	movs	r2, #0
 8010a66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f000 f88e 	bl	8010b8c <UART_WaitOnFlagUntilTimeout>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d022      	beq.n	8010abc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a7e:	e853 3f00 	ldrex	r3, [r3]
 8010a82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	461a      	mov	r2, r3
 8010a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a9c:	e841 2300 	strex	r3, r2, [r1]
 8010aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d1e6      	bne.n	8010a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2220      	movs	r2, #32
 8010aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ab8:	2303      	movs	r3, #3
 8010aba:	e063      	b.n	8010b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f003 0304 	and.w	r3, r3, #4
 8010ac6:	2b04      	cmp	r3, #4
 8010ac8:	d149      	bne.n	8010b5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010aca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ace:	9300      	str	r3, [sp, #0]
 8010ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 f857 	bl	8010b8c <UART_WaitOnFlagUntilTimeout>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d03c      	beq.n	8010b5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aec:	e853 3f00 	ldrex	r3, [r3]
 8010af0:	623b      	str	r3, [r7, #32]
   return(result);
 8010af2:	6a3b      	ldr	r3, [r7, #32]
 8010af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	461a      	mov	r2, r3
 8010b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b0a:	e841 2300 	strex	r3, r2, [r1]
 8010b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1e6      	bne.n	8010ae4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	3308      	adds	r3, #8
 8010b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	e853 3f00 	ldrex	r3, [r3]
 8010b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f023 0301 	bic.w	r3, r3, #1
 8010b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	3308      	adds	r3, #8
 8010b34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b36:	61fa      	str	r2, [r7, #28]
 8010b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b3a:	69b9      	ldr	r1, [r7, #24]
 8010b3c:	69fa      	ldr	r2, [r7, #28]
 8010b3e:	e841 2300 	strex	r3, r2, [r1]
 8010b42:	617b      	str	r3, [r7, #20]
   return(result);
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d1e5      	bne.n	8010b16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2220      	movs	r2, #32
 8010b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2200      	movs	r2, #0
 8010b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b5a:	2303      	movs	r3, #3
 8010b5c:	e012      	b.n	8010b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2220      	movs	r2, #32
 8010b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2220      	movs	r2, #32
 8010b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2200      	movs	r2, #0
 8010b78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b82:	2300      	movs	r3, #0
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3758      	adds	r7, #88	@ 0x58
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b084      	sub	sp, #16
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	60b9      	str	r1, [r7, #8]
 8010b96:	603b      	str	r3, [r7, #0]
 8010b98:	4613      	mov	r3, r2
 8010b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b9c:	e04f      	b.n	8010c3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b9e:	69bb      	ldr	r3, [r7, #24]
 8010ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba4:	d04b      	beq.n	8010c3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ba6:	f7f2 f87b 	bl	8002ca0 <HAL_GetTick>
 8010baa:	4602      	mov	r2, r0
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	1ad3      	subs	r3, r2, r3
 8010bb0:	69ba      	ldr	r2, [r7, #24]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d302      	bcc.n	8010bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d101      	bne.n	8010bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010bbc:	2303      	movs	r3, #3
 8010bbe:	e04e      	b.n	8010c5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f003 0304 	and.w	r3, r3, #4
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d037      	beq.n	8010c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	2b80      	cmp	r3, #128	@ 0x80
 8010bd2:	d034      	beq.n	8010c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	2b40      	cmp	r3, #64	@ 0x40
 8010bd8:	d031      	beq.n	8010c3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	69db      	ldr	r3, [r3, #28]
 8010be0:	f003 0308 	and.w	r3, r3, #8
 8010be4:	2b08      	cmp	r3, #8
 8010be6:	d110      	bne.n	8010c0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2208      	movs	r2, #8
 8010bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f000 f838 	bl	8010c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	2208      	movs	r2, #8
 8010bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2200      	movs	r2, #0
 8010c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010c06:	2301      	movs	r3, #1
 8010c08:	e029      	b.n	8010c5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	69db      	ldr	r3, [r3, #28]
 8010c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010c18:	d111      	bne.n	8010c3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	f000 f81e 	bl	8010c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2220      	movs	r2, #32
 8010c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2200      	movs	r2, #0
 8010c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010c3a:	2303      	movs	r3, #3
 8010c3c:	e00f      	b.n	8010c5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	69da      	ldr	r2, [r3, #28]
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	4013      	ands	r3, r2
 8010c48:	68ba      	ldr	r2, [r7, #8]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	bf0c      	ite	eq
 8010c4e:	2301      	moveq	r3, #1
 8010c50:	2300      	movne	r3, #0
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	461a      	mov	r2, r3
 8010c56:	79fb      	ldrb	r3, [r7, #7]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d0a0      	beq.n	8010b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c5c:	2300      	movs	r3, #0
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3710      	adds	r7, #16
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}

08010c66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c66:	b480      	push	{r7}
 8010c68:	b095      	sub	sp, #84	@ 0x54
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c76:	e853 3f00 	ldrex	r3, [r3]
 8010c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	461a      	mov	r2, r3
 8010c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010c94:	e841 2300 	strex	r3, r2, [r1]
 8010c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d1e6      	bne.n	8010c6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	3308      	adds	r3, #8
 8010ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
 8010caa:	e853 3f00 	ldrex	r3, [r3]
 8010cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010cb6:	f023 0301 	bic.w	r3, r3, #1
 8010cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	3308      	adds	r3, #8
 8010cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010cc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ccc:	e841 2300 	strex	r3, r2, [r1]
 8010cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d1e3      	bne.n	8010ca0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d118      	bne.n	8010d12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	e853 3f00 	ldrex	r3, [r3]
 8010cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	f023 0310 	bic.w	r3, r3, #16
 8010cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cfe:	61bb      	str	r3, [r7, #24]
 8010d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d02:	6979      	ldr	r1, [r7, #20]
 8010d04:	69ba      	ldr	r2, [r7, #24]
 8010d06:	e841 2300 	strex	r3, r2, [r1]
 8010d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d1e6      	bne.n	8010ce0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2220      	movs	r2, #32
 8010d16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2200      	movs	r2, #0
 8010d24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010d26:	bf00      	nop
 8010d28:	3754      	adds	r7, #84	@ 0x54
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr

08010d32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010d32:	b580      	push	{r7, lr}
 8010d34:	b084      	sub	sp, #16
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2200      	movs	r2, #0
 8010d44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d50:	68f8      	ldr	r0, [r7, #12]
 8010d52:	f7ff fc0b 	bl	801056c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d56:	bf00      	nop
 8010d58:	3710      	adds	r7, #16
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b088      	sub	sp, #32
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	e853 3f00 	ldrex	r3, [r3]
 8010d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d7a:	61fb      	str	r3, [r7, #28]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	461a      	mov	r2, r3
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	61bb      	str	r3, [r7, #24]
 8010d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d88:	6979      	ldr	r1, [r7, #20]
 8010d8a:	69ba      	ldr	r2, [r7, #24]
 8010d8c:	e841 2300 	strex	r3, r2, [r1]
 8010d90:	613b      	str	r3, [r7, #16]
   return(result);
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d1e6      	bne.n	8010d66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2220      	movs	r2, #32
 8010d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7ff fbd6 	bl	8010558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010dac:	bf00      	nop
 8010dae:	3720      	adds	r7, #32
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}

08010db4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010dbc:	bf00      	nop
 8010dbe:	370c      	adds	r7, #12
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr

08010dc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b083      	sub	sp, #12
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010dd0:	bf00      	nop
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b085      	sub	sp, #20
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d101      	bne.n	8010df2 <HAL_UARTEx_DisableFifoMode+0x16>
 8010dee:	2302      	movs	r3, #2
 8010df0:	e027      	b.n	8010e42 <HAL_UARTEx_DisableFifoMode+0x66>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2201      	movs	r2, #1
 8010df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2224      	movs	r2, #36	@ 0x24
 8010dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f022 0201 	bic.w	r2, r2, #1
 8010e18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010e20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2200      	movs	r2, #0
 8010e26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	68fa      	ldr	r2, [r7, #12]
 8010e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2220      	movs	r2, #32
 8010e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e40:	2300      	movs	r3, #0
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3714      	adds	r7, #20
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr

08010e4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b084      	sub	sp, #16
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	6078      	str	r0, [r7, #4]
 8010e56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d101      	bne.n	8010e66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e62:	2302      	movs	r3, #2
 8010e64:	e02d      	b.n	8010ec2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2201      	movs	r2, #1
 8010e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2224      	movs	r2, #36	@ 0x24
 8010e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f022 0201 	bic.w	r2, r2, #1
 8010e8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	689b      	ldr	r3, [r3, #8]
 8010e94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	430a      	orrs	r2, r1
 8010ea0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 f850 	bl	8010f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2220      	movs	r2, #32
 8010eb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ec0:	2300      	movs	r3, #0
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3710      	adds	r7, #16
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b084      	sub	sp, #16
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d101      	bne.n	8010ee2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ede:	2302      	movs	r3, #2
 8010ee0:	e02d      	b.n	8010f3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2224      	movs	r2, #36	@ 0x24
 8010eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f022 0201 	bic.w	r2, r2, #1
 8010f08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	689b      	ldr	r3, [r3, #8]
 8010f10:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	683a      	ldr	r2, [r7, #0]
 8010f1a:	430a      	orrs	r2, r1
 8010f1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f000 f812 	bl	8010f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2220      	movs	r2, #32
 8010f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2200      	movs	r2, #0
 8010f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f3c:	2300      	movs	r3, #0
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
	...

08010f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d108      	bne.n	8010f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2201      	movs	r2, #1
 8010f64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f68:	e031      	b.n	8010fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f6a:	2308      	movs	r3, #8
 8010f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f6e:	2308      	movs	r3, #8
 8010f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	689b      	ldr	r3, [r3, #8]
 8010f78:	0e5b      	lsrs	r3, r3, #25
 8010f7a:	b2db      	uxtb	r3, r3
 8010f7c:	f003 0307 	and.w	r3, r3, #7
 8010f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	689b      	ldr	r3, [r3, #8]
 8010f88:	0f5b      	lsrs	r3, r3, #29
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	f003 0307 	and.w	r3, r3, #7
 8010f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f92:	7bbb      	ldrb	r3, [r7, #14]
 8010f94:	7b3a      	ldrb	r2, [r7, #12]
 8010f96:	4911      	ldr	r1, [pc, #68]	@ (8010fdc <UARTEx_SetNbDataToProcess+0x94>)
 8010f98:	5c8a      	ldrb	r2, [r1, r2]
 8010f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010f9e:	7b3a      	ldrb	r2, [r7, #12]
 8010fa0:	490f      	ldr	r1, [pc, #60]	@ (8010fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8010fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010fb0:	7bfb      	ldrb	r3, [r7, #15]
 8010fb2:	7b7a      	ldrb	r2, [r7, #13]
 8010fb4:	4909      	ldr	r1, [pc, #36]	@ (8010fdc <UARTEx_SetNbDataToProcess+0x94>)
 8010fb6:	5c8a      	ldrb	r2, [r1, r2]
 8010fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010fbc:	7b7a      	ldrb	r2, [r7, #13]
 8010fbe:	4908      	ldr	r1, [pc, #32]	@ (8010fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8010fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fc6:	b29a      	uxth	r2, r3
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010fce:	bf00      	nop
 8010fd0:	3714      	adds	r7, #20
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop
 8010fdc:	08011a14 	.word	0x08011a14
 8010fe0:	08011a1c 	.word	0x08011a1c

08010fe4 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b086      	sub	sp, #24
 8010fe8:	af02      	add	r7, sp, #8
 8010fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010fec:	2300      	movs	r3, #0
 8010fee:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010ff0:	f7f1 fe56 	bl	8002ca0 <HAL_GetTick>
 8010ff4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d102      	bne.n	8011002 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	73fb      	strb	r3, [r7, #15]
 8011000:	e137      	b.n	8011272 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	4a76      	ldr	r2, [pc, #472]	@ (80111e0 <HAL_XSPI_Init+0x1fc>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d008      	beq.n	801101e <HAL_XSPI_Init+0x3a>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4a74      	ldr	r2, [pc, #464]	@ (80111e4 <HAL_XSPI_Init+0x200>)
 8011012:	4293      	cmp	r3, r2
 8011014:	d003      	beq.n	801101e <HAL_XSPI_Init+0x3a>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4a73      	ldr	r2, [pc, #460]	@ (80111e8 <HAL_XSPI_Init+0x204>)
 801101c:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4a72      	ldr	r2, [pc, #456]	@ (80111ec <HAL_XSPI_Init+0x208>)
 8011024:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4a6d      	ldr	r2, [pc, #436]	@ (80111e0 <HAL_XSPI_Init+0x1fc>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d008      	beq.n	8011042 <HAL_XSPI_Init+0x5e>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4a6b      	ldr	r2, [pc, #428]	@ (80111e4 <HAL_XSPI_Init+0x200>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d003      	beq.n	8011042 <HAL_XSPI_Init+0x5e>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	4a6a      	ldr	r2, [pc, #424]	@ (80111e8 <HAL_XSPI_Init+0x204>)
 8011040:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4a66      	ldr	r2, [pc, #408]	@ (80111e0 <HAL_XSPI_Init+0x1fc>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d008      	beq.n	801105e <HAL_XSPI_Init+0x7a>
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	4a64      	ldr	r2, [pc, #400]	@ (80111e4 <HAL_XSPI_Init+0x200>)
 8011052:	4293      	cmp	r3, r2
 8011054:	d003      	beq.n	801105e <HAL_XSPI_Init+0x7a>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	4a63      	ldr	r2, [pc, #396]	@ (80111e8 <HAL_XSPI_Init+0x204>)
 801105c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011068:	2b00      	cmp	r3, #0
 801106a:	f040 8102 	bne.w	8011272 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f7f0 fe14 	bl	8001c9c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011074:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 f8ff 	bl	801127c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	689a      	ldr	r2, [r3, #8]
 8011084:	4b5a      	ldr	r3, [pc, #360]	@ (80111f0 <HAL_XSPI_Init+0x20c>)
 8011086:	4013      	ands	r3, r2
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	68d1      	ldr	r1, [r2, #12]
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	6912      	ldr	r2, [r2, #16]
 8011090:	0412      	lsls	r2, r2, #16
 8011092:	4311      	orrs	r1, r2
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	6952      	ldr	r2, [r2, #20]
 8011098:	3a01      	subs	r2, #1
 801109a:	0212      	lsls	r2, r2, #8
 801109c:	4311      	orrs	r1, r2
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	69d2      	ldr	r2, [r2, #28]
 80110a2:	4311      	orrs	r1, r2
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	6812      	ldr	r2, [r2, #0]
 80110a8:	430b      	orrs	r3, r1
 80110aa:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	4a4b      	ldr	r2, [pc, #300]	@ (80111e0 <HAL_XSPI_Init+0x1fc>)
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d00e      	beq.n	80110d4 <HAL_XSPI_Init+0xf0>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	4a4a      	ldr	r2, [pc, #296]	@ (80111e4 <HAL_XSPI_Init+0x200>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d009      	beq.n	80110d4 <HAL_XSPI_Init+0xf0>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4a48      	ldr	r2, [pc, #288]	@ (80111e8 <HAL_XSPI_Init+0x204>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d004      	beq.n	80110d4 <HAL_XSPI_Init+0xf0>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	4a49      	ldr	r2, [pc, #292]	@ (80111f4 <HAL_XSPI_Init+0x210>)
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d10a      	bne.n	80110ea <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	689b      	ldr	r3, [r3, #8]
 80110da:	f023 0108 	bic.w	r1, r3, #8
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	430a      	orrs	r2, r1
 80110e8:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a1a      	ldr	r2, [r3, #32]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	430a      	orrs	r2, r1
 80110fe:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	691b      	ldr	r3, [r3, #16]
 8011106:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801110e:	041a      	lsls	r2, r3, #16
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	430a      	orrs	r2, r1
 8011116:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4a30      	ldr	r2, [pc, #192]	@ (80111e0 <HAL_XSPI_Init+0x1fc>)
 801111e:	4293      	cmp	r3, r2
 8011120:	d00e      	beq.n	8011140 <HAL_XSPI_Init+0x15c>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	4a2f      	ldr	r2, [pc, #188]	@ (80111e4 <HAL_XSPI_Init+0x200>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d009      	beq.n	8011140 <HAL_XSPI_Init+0x15c>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a2d      	ldr	r2, [pc, #180]	@ (80111e8 <HAL_XSPI_Init+0x204>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d004      	beq.n	8011140 <HAL_XSPI_Init+0x15c>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	4a2e      	ldr	r2, [pc, #184]	@ (80111f4 <HAL_XSPI_Init+0x210>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d10a      	bne.n	8011156 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	691b      	ldr	r3, [r3, #16]
 8011146:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	430a      	orrs	r2, r1
 8011154:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801115e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	3b01      	subs	r3, #1
 8011170:	021a      	lsls	r2, r3, #8
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	430a      	orrs	r2, r1
 8011178:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	2200      	movs	r2, #0
 8011184:	2120      	movs	r1, #32
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f887 	bl	801129a <XSPI_WaitFlagStateUntilTimeout>
 801118c:	4603      	mov	r3, r0
 801118e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011190:	7bfb      	ldrb	r3, [r7, #15]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d16d      	bne.n	8011272 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	430a      	orrs	r2, r1
 80111aa:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	4a0e      	ldr	r2, [pc, #56]	@ (80111ec <HAL_XSPI_Init+0x208>)
 80111b2:	4293      	cmp	r3, r2
 80111b4:	d004      	beq.n	80111c0 <HAL_XSPI_Init+0x1dc>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	4a0f      	ldr	r2, [pc, #60]	@ (80111f8 <HAL_XSPI_Init+0x214>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d11d      	bne.n	80111fc <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111c4:	9300      	str	r3, [sp, #0]
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	2200      	movs	r2, #0
 80111ca:	2120      	movs	r1, #32
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f000 f864 	bl	801129a <XSPI_WaitFlagStateUntilTimeout>
 80111d2:	4603      	mov	r3, r0
 80111d4:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80111d6:	7bfb      	ldrb	r3, [r7, #15]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d00f      	beq.n	80111fc <HAL_XSPI_Init+0x218>
          {
            return status;
 80111dc:	7bfb      	ldrb	r3, [r7, #15]
 80111de:	e049      	b.n	8011274 <HAL_XSPI_Init+0x290>
 80111e0:	420d1400 	.word	0x420d1400
 80111e4:	520d1400 	.word	0x520d1400
 80111e8:	420d2400 	.word	0x420d2400
 80111ec:	420d3400 	.word	0x420d3400
 80111f0:	f8e0c0fc 	.word	0xf8e0c0fc
 80111f4:	520d2400 	.word	0x520d2400
 80111f8:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	689a      	ldr	r2, [r3, #8]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	430a      	orrs	r2, r1
 8011210:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801121a:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011226:	431a      	orrs	r2, r3
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	430a      	orrs	r2, r1
 801122e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f042 0201 	orr.w	r2, r2, #1
 8011240:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	2b02      	cmp	r3, #2
 8011248:	d107      	bne.n	801125a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	689a      	ldr	r2, [r3, #8]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f042 0202 	orr.w	r2, r2, #2
 8011258:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011262:	d103      	bne.n	801126c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2201      	movs	r2, #1
 8011268:	655a      	str	r2, [r3, #84]	@ 0x54
 801126a:	e002      	b.n	8011272 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2202      	movs	r2, #2
 8011270:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011272:	7bfb      	ldrb	r3, [r7, #15]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 801127c:	b480      	push	{r7}
 801127e:	b083      	sub	sp, #12
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	683a      	ldr	r2, [r7, #0]
 801128a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 801128c:	2300      	movs	r3, #0
}
 801128e:	4618      	mov	r0, r3
 8011290:	370c      	adds	r7, #12
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr

0801129a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b084      	sub	sp, #16
 801129e:	af00      	add	r7, sp, #0
 80112a0:	60f8      	str	r0, [r7, #12]
 80112a2:	60b9      	str	r1, [r7, #8]
 80112a4:	603b      	str	r3, [r7, #0]
 80112a6:	4613      	mov	r3, r2
 80112a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80112aa:	e01a      	b.n	80112e2 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112b2:	d016      	beq.n	80112e2 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80112b4:	f7f1 fcf4 	bl	8002ca0 <HAL_GetTick>
 80112b8:	4602      	mov	r2, r0
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	69ba      	ldr	r2, [r7, #24]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d302      	bcc.n	80112ca <XSPI_WaitFlagStateUntilTimeout+0x30>
 80112c4:	69bb      	ldr	r3, [r7, #24]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d10b      	bne.n	80112e2 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112d0:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112d6:	f043 0201 	orr.w	r2, r3, #1
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80112de:	2303      	movs	r3, #3
 80112e0:	e00e      	b.n	8011300 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	6a1a      	ldr	r2, [r3, #32]
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	4013      	ands	r3, r2
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	bf14      	ite	ne
 80112f0:	2301      	movne	r3, #1
 80112f2:	2300      	moveq	r3, #0
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	461a      	mov	r2, r3
 80112f8:	79fb      	ldrb	r3, [r7, #7]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d1d6      	bne.n	80112ac <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011308:	b084      	sub	sp, #16
 801130a:	b580      	push	{r7, lr}
 801130c:	b084      	sub	sp, #16
 801130e:	af00      	add	r7, sp, #0
 8011310:	6078      	str	r0, [r7, #4]
 8011312:	f107 001c 	add.w	r0, r7, #28
 8011316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801131a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801131e:	2b03      	cmp	r3, #3
 8011320:	d105      	bne.n	801132e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 fa8e 	bl	8011850 <USB_CoreReset>
 8011334:	4603      	mov	r3, r0
 8011336:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8011338:	7fbb      	ldrb	r3, [r7, #30]
 801133a:	2b01      	cmp	r3, #1
 801133c:	d10b      	bne.n	8011356 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	689b      	ldr	r3, [r3, #8]
 8011342:	f043 0208 	orr.w	r2, r3, #8
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	689b      	ldr	r3, [r3, #8]
 801134e:	f043 0220 	orr.w	r2, r3, #32
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8011356:	7bfb      	ldrb	r3, [r7, #15]
}
 8011358:	4618      	mov	r0, r3
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011362:	b004      	add	sp, #16
 8011364:	4770      	bx	lr

08011366 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011366:	b480      	push	{r7}
 8011368:	b083      	sub	sp, #12
 801136a:	af00      	add	r7, sp, #0
 801136c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	f023 0201 	bic.w	r2, r3, #1
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801137a:	2300      	movs	r3, #0
}
 801137c:	4618      	mov	r0, r3
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	460b      	mov	r3, r1
 8011392:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011394:	2300      	movs	r3, #0
 8011396:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80113a4:	78fb      	ldrb	r3, [r7, #3]
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d115      	bne.n	80113d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80113b6:	200a      	movs	r0, #10
 80113b8:	f7f1 fc7e 	bl	8002cb8 <HAL_Delay>
      ms += 10U;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	330a      	adds	r3, #10
 80113c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 fa36 	bl	8011834 <USB_GetMode>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d01e      	beq.n	801140c <USB_SetCurrentMode+0x84>
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80113d2:	d9f0      	bls.n	80113b6 <USB_SetCurrentMode+0x2e>
 80113d4:	e01a      	b.n	801140c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80113d6:	78fb      	ldrb	r3, [r7, #3]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d115      	bne.n	8011408 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80113e8:	200a      	movs	r0, #10
 80113ea:	f7f1 fc65 	bl	8002cb8 <HAL_Delay>
      ms += 10U;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	330a      	adds	r3, #10
 80113f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f000 fa1d 	bl	8011834 <USB_GetMode>
 80113fa:	4603      	mov	r3, r0
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d005      	beq.n	801140c <USB_SetCurrentMode+0x84>
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2bc7      	cmp	r3, #199	@ 0xc7
 8011404:	d9f0      	bls.n	80113e8 <USB_SetCurrentMode+0x60>
 8011406:	e001      	b.n	801140c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011408:	2301      	movs	r3, #1
 801140a:	e005      	b.n	8011418 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2bc8      	cmp	r3, #200	@ 0xc8
 8011410:	d101      	bne.n	8011416 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011412:	2301      	movs	r3, #1
 8011414:	e000      	b.n	8011418 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011416:	2300      	movs	r3, #0
}
 8011418:	4618      	mov	r0, r3
 801141a:	3710      	adds	r7, #16
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011420:	b084      	sub	sp, #16
 8011422:	b580      	push	{r7, lr}
 8011424:	b086      	sub	sp, #24
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
 801142a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801142e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011432:	2300      	movs	r3, #0
 8011434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801143a:	2300      	movs	r3, #0
 801143c:	613b      	str	r3, [r7, #16]
 801143e:	e009      	b.n	8011454 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	3340      	adds	r3, #64	@ 0x40
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	4413      	add	r3, r2
 801144a:	2200      	movs	r2, #0
 801144c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	3301      	adds	r3, #1
 8011452:	613b      	str	r3, [r7, #16]
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	2b0e      	cmp	r3, #14
 8011458:	d9f2      	bls.n	8011440 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801145e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011466:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801146a:	2b00      	cmp	r3, #0
 801146c:	d11c      	bne.n	80114a8 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	68fa      	ldr	r2, [r7, #12]
 8011478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801147c:	f043 0302 	orr.w	r3, r3, #2
 8011480:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011486:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011492:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801149e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80114a6:	e011      	b.n	80114cc <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80114d2:	461a      	mov	r2, r3
 80114d4:	2300      	movs	r3, #0
 80114d6:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80114d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80114dc:	2b03      	cmp	r3, #3
 80114de:	d10d      	bne.n	80114fc <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80114e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d104      	bne.n	80114f2 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80114e8:	2100      	movs	r1, #0
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f000 f968 	bl	80117c0 <USB_SetDevSpeed>
 80114f0:	e008      	b.n	8011504 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80114f2:	2101      	movs	r1, #1
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f000 f963 	bl	80117c0 <USB_SetDevSpeed>
 80114fa:	e003      	b.n	8011504 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80114fc:	2103      	movs	r1, #3
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 f95e 	bl	80117c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011504:	2110      	movs	r1, #16
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f000 f8fa 	bl	8011700 <USB_FlushTxFifo>
 801150c:	4603      	mov	r3, r0
 801150e:	2b00      	cmp	r3, #0
 8011510:	d001      	beq.n	8011516 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8011512:	2301      	movs	r3, #1
 8011514:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 f924 	bl	8011764 <USB_FlushRxFifo>
 801151c:	4603      	mov	r3, r0
 801151e:	2b00      	cmp	r3, #0
 8011520:	d001      	beq.n	8011526 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8011522:	2301      	movs	r3, #1
 8011524:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801152c:	461a      	mov	r2, r3
 801152e:	2300      	movs	r3, #0
 8011530:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011538:	461a      	mov	r2, r3
 801153a:	2300      	movs	r3, #0
 801153c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011544:	461a      	mov	r2, r3
 8011546:	2300      	movs	r3, #0
 8011548:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801154a:	2300      	movs	r3, #0
 801154c:	613b      	str	r3, [r7, #16]
 801154e:	e043      	b.n	80115d8 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	015a      	lsls	r2, r3, #5
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	4413      	add	r3, r2
 8011558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011566:	d118      	bne.n	801159a <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d10a      	bne.n	8011584 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	015a      	lsls	r2, r3, #5
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	4413      	add	r3, r2
 8011576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801157a:	461a      	mov	r2, r3
 801157c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011580:	6013      	str	r3, [r2, #0]
 8011582:	e013      	b.n	80115ac <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	015a      	lsls	r2, r3, #5
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	4413      	add	r3, r2
 801158c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011590:	461a      	mov	r2, r3
 8011592:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011596:	6013      	str	r3, [r2, #0]
 8011598:	e008      	b.n	80115ac <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	015a      	lsls	r2, r3, #5
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	4413      	add	r3, r2
 80115a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115a6:	461a      	mov	r2, r3
 80115a8:	2300      	movs	r3, #0
 80115aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	015a      	lsls	r2, r3, #5
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	4413      	add	r3, r2
 80115b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115b8:	461a      	mov	r2, r3
 80115ba:	2300      	movs	r3, #0
 80115bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	015a      	lsls	r2, r3, #5
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	4413      	add	r3, r2
 80115c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115ca:	461a      	mov	r2, r3
 80115cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80115d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	3301      	adds	r3, #1
 80115d6:	613b      	str	r3, [r7, #16]
 80115d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80115dc:	461a      	mov	r2, r3
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d3b5      	bcc.n	8011550 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80115e4:	2300      	movs	r3, #0
 80115e6:	613b      	str	r3, [r7, #16]
 80115e8:	e043      	b.n	8011672 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	015a      	lsls	r2, r3, #5
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	4413      	add	r3, r2
 80115f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80115fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011600:	d118      	bne.n	8011634 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10a      	bne.n	801161e <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	015a      	lsls	r2, r3, #5
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	4413      	add	r3, r2
 8011610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011614:	461a      	mov	r2, r3
 8011616:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801161a:	6013      	str	r3, [r2, #0]
 801161c:	e013      	b.n	8011646 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	015a      	lsls	r2, r3, #5
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	4413      	add	r3, r2
 8011626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801162a:	461a      	mov	r2, r3
 801162c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011630:	6013      	str	r3, [r2, #0]
 8011632:	e008      	b.n	8011646 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	015a      	lsls	r2, r3, #5
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	4413      	add	r3, r2
 801163c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011640:	461a      	mov	r2, r3
 8011642:	2300      	movs	r3, #0
 8011644:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	015a      	lsls	r2, r3, #5
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	4413      	add	r3, r2
 801164e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011652:	461a      	mov	r2, r3
 8011654:	2300      	movs	r3, #0
 8011656:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	015a      	lsls	r2, r3, #5
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	4413      	add	r3, r2
 8011660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011664:	461a      	mov	r2, r3
 8011666:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801166a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	3301      	adds	r3, #1
 8011670:	613b      	str	r3, [r7, #16]
 8011672:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011676:	461a      	mov	r2, r3
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	4293      	cmp	r3, r2
 801167c:	d3b5      	bcc.n	80115ea <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011684:	691b      	ldr	r3, [r3, #16]
 8011686:	68fa      	ldr	r2, [r7, #12]
 8011688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801168c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011690:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801169e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80116a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d105      	bne.n	80116b4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	699b      	ldr	r3, [r3, #24]
 80116ac:	f043 0210 	orr.w	r2, r3, #16
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	699a      	ldr	r2, [r3, #24]
 80116b8:	4b10      	ldr	r3, [pc, #64]	@ (80116fc <USB_DevInit+0x2dc>)
 80116ba:	4313      	orrs	r3, r2
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80116c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d005      	beq.n	80116d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	699b      	ldr	r3, [r3, #24]
 80116cc:	f043 0208 	orr.w	r2, r3, #8
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80116d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d107      	bne.n	80116ec <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	699b      	ldr	r3, [r3, #24]
 80116e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80116e4:	f043 0304 	orr.w	r3, r3, #4
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80116ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3718      	adds	r7, #24
 80116f2:	46bd      	mov	sp, r7
 80116f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80116f8:	b004      	add	sp, #16
 80116fa:	4770      	bx	lr
 80116fc:	803c3800 	.word	0x803c3800

08011700 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011700:	b480      	push	{r7}
 8011702:	b085      	sub	sp, #20
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801170a:	2300      	movs	r3, #0
 801170c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3301      	adds	r3, #1
 8011712:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801171a:	d901      	bls.n	8011720 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801171c:	2303      	movs	r3, #3
 801171e:	e01b      	b.n	8011758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	2b00      	cmp	r3, #0
 8011726:	daf2      	bge.n	801170e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011728:	2300      	movs	r3, #0
 801172a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	019b      	lsls	r3, r3, #6
 8011730:	f043 0220 	orr.w	r2, r3, #32
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	3301      	adds	r3, #1
 801173c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011744:	d901      	bls.n	801174a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011746:	2303      	movs	r3, #3
 8011748:	e006      	b.n	8011758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	f003 0320 	and.w	r3, r3, #32
 8011752:	2b20      	cmp	r3, #32
 8011754:	d0f0      	beq.n	8011738 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011756:	2300      	movs	r3, #0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3714      	adds	r7, #20
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801176c:	2300      	movs	r3, #0
 801176e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	3301      	adds	r3, #1
 8011774:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801177c:	d901      	bls.n	8011782 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801177e:	2303      	movs	r3, #3
 8011780:	e018      	b.n	80117b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	691b      	ldr	r3, [r3, #16]
 8011786:	2b00      	cmp	r3, #0
 8011788:	daf2      	bge.n	8011770 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801178a:	2300      	movs	r3, #0
 801178c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2210      	movs	r2, #16
 8011792:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	3301      	adds	r3, #1
 8011798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80117a0:	d901      	bls.n	80117a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80117a2:	2303      	movs	r3, #3
 80117a4:	e006      	b.n	80117b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	691b      	ldr	r3, [r3, #16]
 80117aa:	f003 0310 	and.w	r3, r3, #16
 80117ae:	2b10      	cmp	r3, #16
 80117b0:	d0f0      	beq.n	8011794 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80117b2:	2300      	movs	r3, #0
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3714      	adds	r7, #20
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b085      	sub	sp, #20
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	460b      	mov	r3, r1
 80117ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	78fb      	ldrb	r3, [r7, #3]
 80117da:	68f9      	ldr	r1, [r7, #12]
 80117dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80117e0:	4313      	orrs	r3, r2
 80117e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80117e4:	2300      	movs	r3, #0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr

080117f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80117f2:	b480      	push	{r7}
 80117f4:	b085      	sub	sp, #20
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	68fa      	ldr	r2, [r7, #12]
 8011808:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801180c:	f023 0303 	bic.w	r3, r3, #3
 8011810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	68fa      	ldr	r2, [r7, #12]
 801181c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011820:	f043 0302 	orr.w	r3, r3, #2
 8011824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011826:	2300      	movs	r3, #0
}
 8011828:	4618      	mov	r0, r3
 801182a:	3714      	adds	r7, #20
 801182c:	46bd      	mov	sp, r7
 801182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011832:	4770      	bx	lr

08011834 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	695b      	ldr	r3, [r3, #20]
 8011840:	f003 0301 	and.w	r3, r3, #1
}
 8011844:	4618      	mov	r0, r3
 8011846:	370c      	adds	r7, #12
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr

08011850 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011850:	b480      	push	{r7}
 8011852:	b085      	sub	sp, #20
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011858:	2300      	movs	r3, #0
 801185a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	3301      	adds	r3, #1
 8011860:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011868:	d901      	bls.n	801186e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801186a:	2303      	movs	r3, #3
 801186c:	e01b      	b.n	80118a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	691b      	ldr	r3, [r3, #16]
 8011872:	2b00      	cmp	r3, #0
 8011874:	daf2      	bge.n	801185c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011876:	2300      	movs	r3, #0
 8011878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	691b      	ldr	r3, [r3, #16]
 801187e:	f043 0201 	orr.w	r2, r3, #1
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	3301      	adds	r3, #1
 801188a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011892:	d901      	bls.n	8011898 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011894:	2303      	movs	r3, #3
 8011896:	e006      	b.n	80118a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	f003 0301 	and.w	r3, r3, #1
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d0f0      	beq.n	8011886 <USB_CoreReset+0x36>

  return HAL_OK;
 80118a4:	2300      	movs	r3, #0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3714      	adds	r7, #20
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr

080118b2 <memset>:
 80118b2:	4402      	add	r2, r0
 80118b4:	4603      	mov	r3, r0
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d100      	bne.n	80118bc <memset+0xa>
 80118ba:	4770      	bx	lr
 80118bc:	f803 1b01 	strb.w	r1, [r3], #1
 80118c0:	e7f9      	b.n	80118b6 <memset+0x4>
	...

080118c4 <__libc_init_array>:
 80118c4:	b570      	push	{r4, r5, r6, lr}
 80118c6:	4d0d      	ldr	r5, [pc, #52]	@ (80118fc <__libc_init_array+0x38>)
 80118c8:	2600      	movs	r6, #0
 80118ca:	4c0d      	ldr	r4, [pc, #52]	@ (8011900 <__libc_init_array+0x3c>)
 80118cc:	1b64      	subs	r4, r4, r5
 80118ce:	10a4      	asrs	r4, r4, #2
 80118d0:	42a6      	cmp	r6, r4
 80118d2:	d109      	bne.n	80118e8 <__libc_init_array+0x24>
 80118d4:	4d0b      	ldr	r5, [pc, #44]	@ (8011904 <__libc_init_array+0x40>)
 80118d6:	2600      	movs	r6, #0
 80118d8:	4c0b      	ldr	r4, [pc, #44]	@ (8011908 <__libc_init_array+0x44>)
 80118da:	f000 f817 	bl	801190c <_init>
 80118de:	1b64      	subs	r4, r4, r5
 80118e0:	10a4      	asrs	r4, r4, #2
 80118e2:	42a6      	cmp	r6, r4
 80118e4:	d105      	bne.n	80118f2 <__libc_init_array+0x2e>
 80118e6:	bd70      	pop	{r4, r5, r6, pc}
 80118e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80118ec:	3601      	adds	r6, #1
 80118ee:	4798      	blx	r3
 80118f0:	e7ee      	b.n	80118d0 <__libc_init_array+0xc>
 80118f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80118f6:	3601      	adds	r6, #1
 80118f8:	4798      	blx	r3
 80118fa:	e7f2      	b.n	80118e2 <__libc_init_array+0x1e>
 80118fc:	08011a2c 	.word	0x08011a2c
 8011900:	08011a2c 	.word	0x08011a2c
 8011904:	08011a2c 	.word	0x08011a2c
 8011908:	08011a30 	.word	0x08011a30

0801190c <_init>:
 801190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801190e:	bf00      	nop
 8011910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011912:	bc08      	pop	{r3}
 8011914:	469e      	mov	lr, r3
 8011916:	4770      	bx	lr

08011918 <_fini>:
 8011918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801191a:	bf00      	nop
 801191c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801191e:	bc08      	pop	{r3}
 8011920:	469e      	mov	lr, r3
 8011922:	4770      	bx	lr
