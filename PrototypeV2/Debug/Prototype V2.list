
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119b0  08000278  08000278  00001278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011c28  08011c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d28  08011d28  0001300c  2**0
                  CONTENTS
  4 .ARM          00000008  08011d28  08011d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d30  08011d30  0001300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d30  08011d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011d34  08011d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08011d38  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e664  2000000c  08011d44  0001300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2000e670  08011d44  00013670  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031ba4  00000000  00000000  00013042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d23  00000000  00000000  00044be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  00049910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002171  00000000  00000000  0004c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004731a  00000000  00000000  0004e521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b76  00000000  00000000  0009583b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9d6  00000000  00000000  000cb3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287d87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be7c  00000000  00000000  00287dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00293c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000278 <__do_global_dtors_aux>:
 8000278:	b510      	push	{r4, lr}
 800027a:	4c05      	ldr	r4, [pc, #20]	@ (8000290 <__do_global_dtors_aux+0x18>)
 800027c:	7823      	ldrb	r3, [r4, #0]
 800027e:	b933      	cbnz	r3, 800028e <__do_global_dtors_aux+0x16>
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x1c>)
 8000282:	b113      	cbz	r3, 800028a <__do_global_dtors_aux+0x12>
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <__do_global_dtors_aux+0x20>)
 8000286:	f3af 8000 	nop.w
 800028a:	2301      	movs	r3, #1
 800028c:	7023      	strb	r3, [r4, #0]
 800028e:	bd10      	pop	{r4, pc}
 8000290:	2000000c 	.word	0x2000000c
 8000294:	00000000 	.word	0x00000000
 8000298:	08011c10 	.word	0x08011c10

0800029c <frame_dummy>:
 800029c:	b508      	push	{r3, lr}
 800029e:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <frame_dummy+0x10>)
 80002a0:	b11b      	cbz	r3, 80002aa <frame_dummy+0xe>
 80002a2:	4903      	ldr	r1, [pc, #12]	@ (80002b0 <frame_dummy+0x14>)
 80002a4:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <frame_dummy+0x18>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	bd08      	pop	{r3, pc}
 80002ac:	00000000 	.word	0x00000000
 80002b0:	20000010 	.word	0x20000010
 80002b4:	08011c10 	.word	0x08011c10

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_uldivmod>:
 8000af4:	b953      	cbnz	r3, 8000b0c <__aeabi_uldivmod+0x18>
 8000af6:	b94a      	cbnz	r2, 8000b0c <__aeabi_uldivmod+0x18>
 8000af8:	2900      	cmp	r1, #0
 8000afa:	bf08      	it	eq
 8000afc:	2800      	cmpeq	r0, #0
 8000afe:	bf1c      	itt	ne
 8000b00:	f04f 31ff 	movne.w	r1, #4294967295
 8000b04:	f04f 30ff 	movne.w	r0, #4294967295
 8000b08:	f000 b97e 	b.w	8000e08 <__aeabi_idiv0>
 8000b0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b14:	f000 f806 	bl	8000b24 <__udivmoddi4>
 8000b18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b20:	b004      	add	sp, #16
 8000b22:	4770      	bx	lr

08000b24 <__udivmoddi4>:
 8000b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b28:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b2a:	460c      	mov	r4, r1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d14d      	bne.n	8000bcc <__udivmoddi4+0xa8>
 8000b30:	428a      	cmp	r2, r1
 8000b32:	460f      	mov	r7, r1
 8000b34:	4684      	mov	ip, r0
 8000b36:	4696      	mov	lr, r2
 8000b38:	fab2 f382 	clz	r3, r2
 8000b3c:	d960      	bls.n	8000c00 <__udivmoddi4+0xdc>
 8000b3e:	b14b      	cbz	r3, 8000b54 <__udivmoddi4+0x30>
 8000b40:	fa02 fe03 	lsl.w	lr, r2, r3
 8000b44:	f1c3 0220 	rsb	r2, r3, #32
 8000b48:	409f      	lsls	r7, r3
 8000b4a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b52:	4317      	orrs	r7, r2
 8000b54:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000b58:	fa1f f48e 	uxth.w	r4, lr
 8000b5c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000b60:	fbb7 f1f6 	udiv	r1, r7, r6
 8000b64:	fb06 7711 	mls	r7, r6, r1, r7
 8000b68:	fb01 f004 	mul.w	r0, r1, r4
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	4290      	cmp	r0, r2
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x62>
 8000b74:	eb1e 0202 	adds.w	r2, lr, r2
 8000b78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b7c:	d202      	bcs.n	8000b84 <__udivmoddi4+0x60>
 8000b7e:	4290      	cmp	r0, r2
 8000b80:	f200 812d 	bhi.w	8000dde <__udivmoddi4+0x2ba>
 8000b84:	4639      	mov	r1, r7
 8000b86:	1a12      	subs	r2, r2, r0
 8000b88:	fa1f fc8c 	uxth.w	ip, ip
 8000b8c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000b90:	fb06 2210 	mls	r2, r6, r0, r2
 8000b94:	fb00 f404 	mul.w	r4, r0, r4
 8000b98:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000b9c:	4564      	cmp	r4, ip
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x8e>
 8000ba0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ba4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba8:	d202      	bcs.n	8000bb0 <__udivmoddi4+0x8c>
 8000baa:	4564      	cmp	r4, ip
 8000bac:	f200 811a 	bhi.w	8000de4 <__udivmoddi4+0x2c0>
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb6:	ebac 0c04 	sub.w	ip, ip, r4
 8000bba:	2100      	movs	r1, #0
 8000bbc:	b125      	cbz	r5, 8000bc8 <__udivmoddi4+0xa4>
 8000bbe:	fa2c f303 	lsr.w	r3, ip, r3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d905      	bls.n	8000bdc <__udivmoddi4+0xb8>
 8000bd0:	b10d      	cbz	r5, 8000bd6 <__udivmoddi4+0xb2>
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4608      	mov	r0, r1
 8000bda:	e7f5      	b.n	8000bc8 <__udivmoddi4+0xa4>
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d14d      	bne.n	8000c80 <__udivmoddi4+0x15c>
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	f0c0 80f2 	bcc.w	8000dce <__udivmoddi4+0x2aa>
 8000bea:	4290      	cmp	r0, r2
 8000bec:	f080 80ef 	bcs.w	8000dce <__udivmoddi4+0x2aa>
 8000bf0:	4606      	mov	r6, r0
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0e6      	beq.n	8000bc8 <__udivmoddi4+0xa4>
 8000bfa:	e9c5 6300 	strd	r6, r3, [r5]
 8000bfe:	e7e3      	b.n	8000bc8 <__udivmoddi4+0xa4>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f040 80a2 	bne.w	8000d4a <__udivmoddi4+0x226>
 8000c06:	1a8a      	subs	r2, r1, r2
 8000c08:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000c0c:	fa1f f68e 	uxth.w	r6, lr
 8000c10:	2101      	movs	r1, #1
 8000c12:	fbb2 f4f7 	udiv	r4, r2, r7
 8000c16:	fb07 2014 	mls	r0, r7, r4, r2
 8000c1a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c22:	fb06 f004 	mul.w	r0, r6, r4
 8000c26:	4290      	cmp	r0, r2
 8000c28:	d90f      	bls.n	8000c4a <__udivmoddi4+0x126>
 8000c2a:	eb1e 0202 	adds.w	r2, lr, r2
 8000c2e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000c32:	bf2c      	ite	cs
 8000c34:	f04f 0901 	movcs.w	r9, #1
 8000c38:	f04f 0900 	movcc.w	r9, #0
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	d903      	bls.n	8000c48 <__udivmoddi4+0x124>
 8000c40:	f1b9 0f00 	cmp.w	r9, #0
 8000c44:	f000 80c8 	beq.w	8000dd8 <__udivmoddi4+0x2b4>
 8000c48:	4644      	mov	r4, r8
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	fa1f fc8c 	uxth.w	ip, ip
 8000c50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c54:	fb07 2210 	mls	r2, r7, r0, r2
 8000c58:	fb00 f606 	mul.w	r6, r0, r6
 8000c5c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c60:	4566      	cmp	r6, ip
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x152>
 8000c64:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x150>
 8000c6e:	4566      	cmp	r6, ip
 8000c70:	f200 80bb 	bhi.w	8000dea <__udivmoddi4+0x2c6>
 8000c74:	4610      	mov	r0, r2
 8000c76:	ebac 0c06 	sub.w	ip, ip, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	e79d      	b.n	8000bbc <__udivmoddi4+0x98>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa04 fe01 	lsl.w	lr, r4, r1
 8000c8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c92:	40f4      	lsrs	r4, r6
 8000c94:	408a      	lsls	r2, r1
 8000c96:	431f      	orrs	r7, r3
 8000c98:	ea4e 030c 	orr.w	r3, lr, ip
 8000c9c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ca0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ca4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca8:	fa1f fc87 	uxth.w	ip, r7
 8000cac:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cb0:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb8:	fb00 f90c 	mul.w	r9, r0, ip
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	d90e      	bls.n	8000cde <__udivmoddi4+0x1ba>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cc6:	bf2c      	ite	cs
 8000cc8:	f04f 0b01 	movcs.w	fp, #1
 8000ccc:	f04f 0b00 	movcc.w	fp, #0
 8000cd0:	45a1      	cmp	r9, r4
 8000cd2:	d903      	bls.n	8000cdc <__udivmoddi4+0x1b8>
 8000cd4:	f1bb 0f00 	cmp.w	fp, #0
 8000cd8:	f000 8093 	beq.w	8000e02 <__udivmoddi4+0x2de>
 8000cdc:	4650      	mov	r0, sl
 8000cde:	eba4 0409 	sub.w	r4, r4, r9
 8000ce2:	fa1f f983 	uxth.w	r9, r3
 8000ce6:	fbb4 f3f8 	udiv	r3, r4, r8
 8000cea:	fb08 4413 	mls	r4, r8, r3, r4
 8000cee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d906      	bls.n	8000d08 <__udivmoddi4+0x1e4>
 8000cfa:	193c      	adds	r4, r7, r4
 8000cfc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d00:	d201      	bcs.n	8000d06 <__udivmoddi4+0x1e2>
 8000d02:	45a4      	cmp	ip, r4
 8000d04:	d87a      	bhi.n	8000dfc <__udivmoddi4+0x2d8>
 8000d06:	4643      	mov	r3, r8
 8000d08:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d0c:	eba4 040c 	sub.w	r4, r4, ip
 8000d10:	fba0 9802 	umull	r9, r8, r0, r2
 8000d14:	4544      	cmp	r4, r8
 8000d16:	46cc      	mov	ip, r9
 8000d18:	4643      	mov	r3, r8
 8000d1a:	d302      	bcc.n	8000d22 <__udivmoddi4+0x1fe>
 8000d1c:	d106      	bne.n	8000d2c <__udivmoddi4+0x208>
 8000d1e:	45ce      	cmp	lr, r9
 8000d20:	d204      	bcs.n	8000d2c <__udivmoddi4+0x208>
 8000d22:	3801      	subs	r0, #1
 8000d24:	ebb9 0c02 	subs.w	ip, r9, r2
 8000d28:	eb68 0307 	sbc.w	r3, r8, r7
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x222>
 8000d2e:	ebbe 020c 	subs.w	r2, lr, ip
 8000d32:	eb64 0403 	sbc.w	r4, r4, r3
 8000d36:	fa04 f606 	lsl.w	r6, r4, r6
 8000d3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d3e:	40cc      	lsrs	r4, r1
 8000d40:	431e      	orrs	r6, r3
 8000d42:	e9c5 6400 	strd	r6, r4, [r5]
 8000d46:	2100      	movs	r1, #0
 8000d48:	e73e      	b.n	8000bc8 <__udivmoddi4+0xa4>
 8000d4a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d4e:	f1c3 0120 	rsb	r1, r3, #32
 8000d52:	fa04 f203 	lsl.w	r2, r4, r3
 8000d56:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d5a:	40cc      	lsrs	r4, r1
 8000d5c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d60:	fa20 f101 	lsr.w	r1, r0, r1
 8000d64:	fa1f f68e 	uxth.w	r6, lr
 8000d68:	fbb4 f0f7 	udiv	r0, r4, r7
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	fb07 4410 	mls	r4, r7, r0, r4
 8000d72:	0c11      	lsrs	r1, r2, #16
 8000d74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000d78:	fb00 f406 	mul.w	r4, r0, r6
 8000d7c:	428c      	cmp	r4, r1
 8000d7e:	d90e      	bls.n	8000d9e <__udivmoddi4+0x27a>
 8000d80:	eb1e 0101 	adds.w	r1, lr, r1
 8000d84:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d88:	bf2c      	ite	cs
 8000d8a:	f04f 0901 	movcs.w	r9, #1
 8000d8e:	f04f 0900 	movcc.w	r9, #0
 8000d92:	428c      	cmp	r4, r1
 8000d94:	d902      	bls.n	8000d9c <__udivmoddi4+0x278>
 8000d96:	f1b9 0f00 	cmp.w	r9, #0
 8000d9a:	d02c      	beq.n	8000df6 <__udivmoddi4+0x2d2>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	1b09      	subs	r1, r1, r4
 8000da0:	b292      	uxth	r2, r2
 8000da2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000da6:	fb07 1114 	mls	r1, r7, r4, r1
 8000daa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dae:	fb04 f106 	mul.w	r1, r4, r6
 8000db2:	4291      	cmp	r1, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x2a2>
 8000db6:	eb1e 0202 	adds.w	r2, lr, r2
 8000dba:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dbe:	d201      	bcs.n	8000dc4 <__udivmoddi4+0x2a0>
 8000dc0:	4291      	cmp	r1, r2
 8000dc2:	d815      	bhi.n	8000df0 <__udivmoddi4+0x2cc>
 8000dc4:	4644      	mov	r4, r8
 8000dc6:	1a52      	subs	r2, r2, r1
 8000dc8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000dcc:	e721      	b.n	8000c12 <__udivmoddi4+0xee>
 8000dce:	1a86      	subs	r6, r0, r2
 8000dd0:	eb64 0303 	sbc.w	r3, r4, r3
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	e70e      	b.n	8000bf6 <__udivmoddi4+0xd2>
 8000dd8:	3c02      	subs	r4, #2
 8000dda:	4472      	add	r2, lr
 8000ddc:	e735      	b.n	8000c4a <__udivmoddi4+0x126>
 8000dde:	3902      	subs	r1, #2
 8000de0:	4472      	add	r2, lr
 8000de2:	e6d0      	b.n	8000b86 <__udivmoddi4+0x62>
 8000de4:	44f4      	add	ip, lr
 8000de6:	3802      	subs	r0, #2
 8000de8:	e6e3      	b.n	8000bb2 <__udivmoddi4+0x8e>
 8000dea:	44f4      	add	ip, lr
 8000dec:	3802      	subs	r0, #2
 8000dee:	e742      	b.n	8000c76 <__udivmoddi4+0x152>
 8000df0:	3c02      	subs	r4, #2
 8000df2:	4472      	add	r2, lr
 8000df4:	e7e7      	b.n	8000dc6 <__udivmoddi4+0x2a2>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4471      	add	r1, lr
 8000dfa:	e7d0      	b.n	8000d9e <__udivmoddi4+0x27a>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	e782      	b.n	8000d08 <__udivmoddi4+0x1e4>
 8000e02:	3802      	subs	r0, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	e76a      	b.n	8000cde <__udivmoddi4+0x1ba>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f002 fad9 	bl	80033c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f8e9 	bl	8000fec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e1a:	f000 f953 	bl	80010c4 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000e1e:	f000 f988 	bl	8001132 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e22:	f000 fef7 	bl	8001c14 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000e26:	f000 fb85 	bl	8001534 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 8000e2a:	f000 fb45 	bl	80014b8 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 8000e2e:	f000 fbb9 	bl	80015a4 <MX_HSPI1_Init>
  MX_I2C2_Init();
 8000e32:	f000 fc35 	bl	80016a0 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8000e36:	f000 fc73 	bl	8001720 <MX_ICACHE_Init>
  MX_LTDC_Init();
 8000e3a:	f000 fc85 	bl	8001748 <MX_LTDC_Init>
  MX_RTC_Init();
 8000e3e:	f000 fd03 	bl	8001848 <MX_RTC_Init>
  MX_TIM3_Init();
 8000e42:	f000 fdbb 	bl	80019bc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e46:	f000 f983 	bl	8001150 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000e4a:	f000 fe69 	bl	8001b20 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000e4e:	f000 fd49 	bl	80018e4 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000e52:	f000 fab7 	bl	80013c4 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000e56:	f000 fbe3 	bl	8001620 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000e5a:	f000 fead 	bl	8001bb8 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 8000e5e:	f000 fe0f 	bl	8001a80 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 8000e62:	f44f 5250 	mov.w	r2, #13312	@ 0x3400
 8000e66:	4959      	ldr	r1, [pc, #356]	@ (8000fcc <main+0x1c0>)
 8000e68:	4859      	ldr	r0, [pc, #356]	@ (8000fd0 <main+0x1c4>)
 8000e6a:	f003 f9f9 	bl	8004260 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4958      	ldr	r1, [pc, #352]	@ (8000fd4 <main+0x1c8>)
 8000e72:	4859      	ldr	r0, [pc, #356]	@ (8000fd8 <main+0x1cc>)
 8000e74:	f003 f9f4 	bl	8004260 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000e78:	4858      	ldr	r0, [pc, #352]	@ (8000fdc <main+0x1d0>)
 8000e7a:	f00e f853 	bl	800ef24 <HAL_TIM_Base_Start>
  }

  HAL_Delay(10);
  */
  //HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacData, DIM(dacData));
 8000e7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e82:	4957      	ldr	r1, [pc, #348]	@ (8000fe0 <main+0x1d4>)
 8000e84:	4857      	ldr	r0, [pc, #348]	@ (8000fe4 <main+0x1d8>)
 8000e86:	f00d fcc9 	bl	800e81c <HAL_SAI_Transmit_DMA>

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	e095      	b.n	8000fbc <main+0x1b0>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	e00d      	b.n	8000eb2 <main+0xa6>
	  {
		  channels[i].channelData[s] = 0;
 8000e96:	4954      	ldr	r1, [pc, #336]	@ (8000fe8 <main+0x1dc>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8000e9e:	fb03 f202 	mul.w	r2, r3, r2
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000eb8:	d3ed      	bcc.n	8000e96 <main+0x8a>
	  }
	  channels[i].channelNum = i;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	b2d8      	uxtb	r0, r3
 8000ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8000fe8 <main+0x1dc>)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000ec6:	fb01 f303 	mul.w	r3, r1, r3
 8000eca:	4413      	add	r3, r2
 8000ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 8000ed4:	4a44      	ldr	r2, [pc, #272]	@ (8000fe8 <main+0x1dc>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000edc:	fb01 f303 	mul.w	r3, r1, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 8000eee:	4a3e      	ldr	r2, [pc, #248]	@ (8000fe8 <main+0x1dc>)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000ef6:	fb01 f303 	mul.w	r3, r1, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f00:	3308      	adds	r3, #8
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 8000f08:	4a37      	ldr	r2, [pc, #220]	@ (8000fe8 <main+0x1dc>)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000f10:	fb01 f303 	mul.w	r3, r1, r3
 8000f14:	4413      	add	r3, r2
 8000f16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f1a:	330c      	adds	r3, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 8000f20:	4a31      	ldr	r2, [pc, #196]	@ (8000fe8 <main+0x1dc>)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000f28:	fb01 f303 	mul.w	r3, r1, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f32:	330d      	adds	r3, #13
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 8000f38:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe8 <main+0x1dc>)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000f40:	fb01 f303 	mul.w	r3, r1, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f4a:	330e      	adds	r3, #14
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 8000f50:	4a25      	ldr	r2, [pc, #148]	@ (8000fe8 <main+0x1dc>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000f58:	fb01 f303 	mul.w	r3, r1, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f62:	3310      	adds	r3, #16
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	e012      	b.n	8000f96 <main+0x18a>
	  {
		  channels[i].eqLevels[r] = 0.0;
 8000f70:	491d      	ldr	r1, [pc, #116]	@ (8000fe8 <main+0x1dc>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f240 420b 	movw	r2, #1035	@ 0x40b
 8000f78:	fb03 f202 	mul.w	r2, r3, r2
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	3304      	adds	r3, #4
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3301      	adds	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b13      	cmp	r3, #19
 8000f9a:	d9e9      	bls.n	8000f70 <main+0x164>
	  }
	  channels[i].distortionStrength = 0.0;
 8000f9c:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <main+0x1dc>)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000fa4:	fb01 f303 	mul.w	r3, r1, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8000fae:	3308      	adds	r3, #8
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f246 1207 	movw	r2, #24839	@ 0x6107
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	f67f af64 	bls.w	8000e90 <main+0x84>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <main+0x1bc>
 8000fcc:	20000d5c 	.word	0x20000d5c
 8000fd0:	20000028 	.word	0x20000028
 8000fd4:	2000755c 	.word	0x2000755c
 8000fd8:	200000b4 	.word	0x200000b4
 8000fdc:	20000798 	.word	0x20000798
 8000fe0:	20007560 	.word	0x20007560
 8000fe4:	200004b4 	.word	0x200004b4
 8000fe8:	20008560 	.word	0x20008560

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b09e      	sub	sp, #120	@ 0x78
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	2260      	movs	r2, #96	@ 0x60
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f010 fddb 	bl	8011bb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
 800100e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001010:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001014:	f008 fcbe 	bl	8009994 <HAL_PWREx_ControlVoltageScaling>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800101e:	f001 f815 	bl	800204c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001022:	f008 fca7 	bl	8009974 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001026:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <SystemClock_Config+0xd4>)
 8001028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800102c:	4a24      	ldr	r2, [pc, #144]	@ (80010c0 <SystemClock_Config+0xd4>)
 800102e:	f023 0318 	bic.w	r3, r3, #24
 8001032:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001036:	2307      	movs	r3, #7
 8001038:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800103e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001040:	2381      	movs	r3, #129	@ 0x81
 8001042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2310      	movs	r3, #16
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	2303      	movs	r3, #3
 8001054:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800105e:	2308      	movs	r3, #8
 8001060:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8001062:	2308      	movs	r3, #8
 8001064:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001066:	2302      	movs	r3, #2
 8001068:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800106e:	230c      	movs	r3, #12
 8001070:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4618      	mov	r0, r3
 800107c:	f008 fdb4 	bl	8009be8 <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001086:	f000 ffe1 	bl	800204c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	231f      	movs	r3, #31
 800108c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2303      	movs	r3, #3
 8001090:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	2103      	movs	r1, #3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f009 fc7a 	bl	800a9a0 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010b2:	f000 ffcb 	bl	800204c <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3778      	adds	r7, #120	@ 0x78
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	46020c00 	.word	0x46020c00

080010c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0b8      	sub	sp, #224	@ 0xe0
 80010c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	22e0      	movs	r2, #224	@ 0xe0
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f010 fd70 	bl	8011bb6 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80010d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010da:	f04f 0301 	mov.w	r3, #1
 80010de:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80010e8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80010ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80010f0:	2303      	movs	r3, #3
 80010f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80010f8:	230c      	movs	r3, #12
 80010fa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8001100:	2303      	movs	r3, #3
 8001102:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8001104:	2304      	movs	r3, #4
 8001106:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001108:	230c      	movs	r3, #12
 800110a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 800110c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8001112:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	4618      	mov	r0, r3
 800111c:	f00a f810 	bl	800b140 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8001126:	f000 ff91 	bl	800204c <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	37e0      	adds	r7, #224	@ 0xe0
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001136:	f008 fd19 	bl	8009b6c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800113a:	2002      	movs	r0, #2
 800113c:	f008 fcb6 	bl	8009aac <HAL_PWREx_ConfigSupply>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001146:	f000 ff81 	bl	800204c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2220      	movs	r2, #32
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f010 fd2a 	bl	8011bb6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001162:	4b89      	ldr	r3, [pc, #548]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001164:	4a89      	ldr	r2, [pc, #548]	@ (800138c <MX_ADC1_Init+0x23c>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001168:	4b87      	ldr	r3, [pc, #540]	@ (8001388 <MX_ADC1_Init+0x238>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800116e:	4b86      	ldr	r3, [pc, #536]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001174:	4b84      	ldr	r3, [pc, #528]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117a:	4b83      	ldr	r3, [pc, #524]	@ (8001388 <MX_ADC1_Init+0x238>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001180:	4b81      	ldr	r3, [pc, #516]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001182:	2201      	movs	r2, #1
 8001184:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001186:	4b80      	ldr	r3, [pc, #512]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001188:	2204      	movs	r2, #4
 800118a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800118c:	4b7e      	ldr	r3, [pc, #504]	@ (8001388 <MX_ADC1_Init+0x238>)
 800118e:	2201      	movs	r2, #1
 8001190:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001192:	4b7d      	ldr	r3, [pc, #500]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 800119a:	4b7b      	ldr	r3, [pc, #492]	@ (8001388 <MX_ADC1_Init+0x238>)
 800119c:	220d      	movs	r2, #13
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a0:	4b79      	ldr	r3, [pc, #484]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80011a8:	4b77      	ldr	r3, [pc, #476]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011aa:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80011ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011b0:	4b75      	ldr	r3, [pc, #468]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b8:	4b73      	ldr	r3, [pc, #460]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80011c0:	4b71      	ldr	r3, [pc, #452]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c6:	4b70      	ldr	r3, [pc, #448]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011d4:	2203      	movs	r2, #3
 80011d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e0:	4869      	ldr	r0, [pc, #420]	@ (8001388 <MX_ADC1_Init+0x238>)
 80011e2:	f002 fd55 	bl	8003c90 <HAL_ADC_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80011ec:	f000 ff2e 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011f0:	4b67      	ldr	r3, [pc, #412]	@ (8001390 <MX_ADC1_Init+0x240>)
 80011f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f4:	2306      	movs	r3, #6
 80011f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001200:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001202:	2304      	movs	r3, #4
 8001204:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	485e      	ldr	r0, [pc, #376]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001210:	f003 fc58 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800121a:	f000 ff17 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <MX_ADC1_Init+0x244>)
 8001220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001222:	230c      	movs	r3, #12
 8001224:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	4619      	mov	r1, r3
 800122a:	4857      	ldr	r0, [pc, #348]	@ (8001388 <MX_ADC1_Init+0x238>)
 800122c:	f003 fc4a 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001236:	f000 ff09 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800123a:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <MX_ADC1_Init+0x248>)
 800123c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800123e:	2312      	movs	r3, #18
 8001240:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4850      	ldr	r0, [pc, #320]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001248:	f003 fc3c 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001252:	f000 fefb 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001256:	4b51      	ldr	r3, [pc, #324]	@ (800139c <MX_ADC1_Init+0x24c>)
 8001258:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800125a:	2318      	movs	r3, #24
 800125c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4849      	ldr	r0, [pc, #292]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001264:	f003 fc2e 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800126e:	f000 feed 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001272:	4b4b      	ldr	r3, [pc, #300]	@ (80013a0 <MX_ADC1_Init+0x250>)
 8001274:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800127a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	4841      	ldr	r0, [pc, #260]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001282:	f003 fc1f 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 800128c:	f000 fede 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001290:	4b44      	ldr	r3, [pc, #272]	@ (80013a4 <MX_ADC1_Init+0x254>)
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001294:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001298:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	483a      	ldr	r0, [pc, #232]	@ (8001388 <MX_ADC1_Init+0x238>)
 80012a0:	f003 fc10 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80012aa:	f000 fecf 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012ae:	4b3e      	ldr	r3, [pc, #248]	@ (80013a8 <MX_ADC1_Init+0x258>)
 80012b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012b2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80012b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	4832      	ldr	r0, [pc, #200]	@ (8001388 <MX_ADC1_Init+0x238>)
 80012be:	f003 fc01 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 80012c8:	f000 fec0 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012cc:	4b37      	ldr	r3, [pc, #220]	@ (80013ac <MX_ADC1_Init+0x25c>)
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012d0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80012d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	482b      	ldr	r0, [pc, #172]	@ (8001388 <MX_ADC1_Init+0x238>)
 80012dc:	f003 fbf2 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 80012e6:	f000 feb1 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012ea:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <MX_ADC1_Init+0x260>)
 80012ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012ee:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80012f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	4823      	ldr	r0, [pc, #140]	@ (8001388 <MX_ADC1_Init+0x238>)
 80012fa:	f003 fbe3 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8001304:	f000 fea2 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001308:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <MX_ADC1_Init+0x264>)
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800130c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001310:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	481c      	ldr	r0, [pc, #112]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001318:	f003 fbd4 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8001322:	f000 fe93 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <MX_ADC1_Init+0x268>)
 8001328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800132a:	f240 2306 	movw	r3, #518	@ 0x206
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4814      	ldr	r0, [pc, #80]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001336:	f003 fbc5 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8001340:	f000 fe84 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_ADC1_Init+0x26c>)
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001348:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001354:	f003 fbb6 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 800135e:	f000 fe75 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001362:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_ADC1_Init+0x270>)
 8001364:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001366:	f240 2312 	movw	r3, #530	@ 0x212
 800136a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_ADC1_Init+0x238>)
 8001372:	f003 fba7 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 800137c:	f000 fe66 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000028 	.word	0x20000028
 800138c:	42028000 	.word	0x42028000
 8001390:	04000002 	.word	0x04000002
 8001394:	08000004 	.word	0x08000004
 8001398:	0c000008 	.word	0x0c000008
 800139c:	10000010 	.word	0x10000010
 80013a0:	14000020 	.word	0x14000020
 80013a4:	1c000080 	.word	0x1c000080
 80013a8:	20000100 	.word	0x20000100
 80013ac:	2a000400 	.word	0x2a000400
 80013b0:	2e000800 	.word	0x2e000800
 80013b4:	32001000 	.word	0x32001000
 80013b8:	3e008000 	.word	0x3e008000
 80013bc:	42010000 	.word	0x42010000
 80013c0:	ce080000 	.word	0xce080000

080013c4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ca:	463b      	mov	r3, r7
 80013cc:	2220      	movs	r2, #32
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f010 fbf0 	bl	8011bb6 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80013d6:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 80013d8:	4a34      	ldr	r2, [pc, #208]	@ (80014ac <MX_ADC4_Init+0xe8>)
 80013da:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013dc:	4b32      	ldr	r3, [pc, #200]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80013e2:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 80013e4:	2204      	movs	r2, #4
 80013e6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 80013ee:	4b2e      	ldr	r3, [pc, #184]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 80013f0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80013f4:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 80013f8:	2204      	movs	r2, #4
 80013fa:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001402:	4b29      	ldr	r3, [pc, #164]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 8001404:	2200      	movs	r2, #0
 8001406:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8001410:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 8001412:	2202      	movs	r2, #2
 8001414:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001416:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 8001418:	2200      	movs	r2, #0
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 800141e:	2200      	movs	r2, #0
 8001420:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 800142c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001430:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 8001434:	2200      	movs	r2, #0
 8001436:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 800143a:	2200      	movs	r2, #0
 800143c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 800143e:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 8001440:	2200      	movs	r2, #0
 8001442:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800144c:	4816      	ldr	r0, [pc, #88]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 800144e:	f002 fc1f 	bl	8003c90 <HAL_ADC_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8001458:	f000 fdf8 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_ADC4_Init+0xec>)
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001468:	2304      	movs	r3, #4
 800146a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 8001476:	f003 fb25 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8001480:	f000 fde4 	bl	800204c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <MX_ADC4_Init+0xf0>)
 8001486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8001488:	2304      	movs	r3, #4
 800148a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_ADC4_Init+0xe4>)
 8001492:	f003 fb17 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 800149c:	f000 fdd6 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200000b4 	.word	0x200000b4
 80014ac:	46021000 	.word	0x46021000
 80014b0:	1c000080 	.word	0x1c000080
 80014b4:	20000100 	.word	0x20000100

080014b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	@ (8001530 <MX_DMA2D_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <MX_DMA2D_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <MX_DMA2D_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001504:	4809      	ldr	r0, [pc, #36]	@ (800152c <MX_DMA2D_Init+0x74>)
 8001506:	f005 fa67 	bl	80069d8 <HAL_DMA2D_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 fd9c 	bl	800204c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001514:	2101      	movs	r1, #1
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_DMA2D_Init+0x74>)
 8001518:	f005 fac0 	bl	8006a9c <HAL_DMA2D_ConfigLayer>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 fd93 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000026c 	.word	0x2000026c
 8001530:	4002b000 	.word	0x4002b000

08001534 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_GPDMA1_Init+0x6c>)
 800153c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001540:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <MX_GPDMA1_Init+0x6c>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <MX_GPDMA1_Init+0x6c>)
 800154c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	201d      	movs	r0, #29
 800155e:	f004 fadd 	bl	8005b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001562:	201d      	movs	r0, #29
 8001564:	f004 faf4 	bl	8005b50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	201e      	movs	r0, #30
 800156e:	f004 fad5 	bl	8005b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001572:	201e      	movs	r0, #30
 8001574:	f004 faec 	bl	8005b50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	201f      	movs	r0, #31
 800157e:	f004 facd 	bl	8005b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001582:	201f      	movs	r0, #31
 8001584:	f004 fae4 	bl	8005b50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2020      	movs	r0, #32
 800158e:	f004 fac5 	bl	8005b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001592:	2020      	movs	r0, #32
 8001594:	f004 fadc 	bl	8005b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	46020c00 	.word	0x46020c00

080015a4 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <MX_HSPI1_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015b0:	2204      	movs	r2, #4
 80015b2:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015c0:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015c4:	221a      	movs	r2, #26
 80015c6:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80015d4:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80015da:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <MX_HSPI1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_HSPI1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	@ (8001618 <MX_HSPI1_Init+0x74>)
 8001606:	f00f fe6f 	bl	80112e8 <HAL_XSPI_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8001610:	f000 fd1c 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200002d4 	.word	0x200002d4
 800161c:	420d3400 	.word	0x420d3400

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001626:	4a1c      	ldr	r2, [pc, #112]	@ (8001698 <MX_I2C1_Init+0x78>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <MX_I2C1_Init+0x74>)
 800162c:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <MX_I2C1_Init+0x7c>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001638:	2201      	movs	r2, #1
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <MX_I2C1_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165a:	480e      	ldr	r0, [pc, #56]	@ (8001694 <MX_I2C1_Init+0x74>)
 800165c:	f006 fda4 	bl	80081a8 <HAL_I2C_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001666:	f000 fcf1 	bl	800204c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <MX_I2C1_Init+0x74>)
 800166e:	f007 fc46 	bl	8008efe <HAL_I2CEx_ConfigAnalogFilter>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001678:	f000 fce8 	bl	800204c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001680:	f007 fc88 	bl	8008f94 <HAL_I2CEx_ConfigDigitalFilter>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f000 fcdf 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000334 	.word	0x20000334
 8001698:	40005400 	.word	0x40005400
 800169c:	20a0c4df 	.word	0x20a0c4df

080016a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <MX_I2C2_Init+0x78>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <MX_I2C2_Init+0x7c>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016c2:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016da:	480e      	ldr	r0, [pc, #56]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016dc:	f006 fd64 	bl	80081a8 <HAL_I2C_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016e6:	f000 fcb1 	bl	800204c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4809      	ldr	r0, [pc, #36]	@ (8001714 <MX_I2C2_Init+0x74>)
 80016ee:	f007 fc06 	bl	8008efe <HAL_I2CEx_ConfigAnalogFilter>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016f8:	f000 fca8 	bl	800204c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016fc:	2100      	movs	r1, #0
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_I2C2_Init+0x74>)
 8001700:	f007 fc48 	bl	8008f94 <HAL_I2CEx_ConfigDigitalFilter>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800170a:	f000 fc9f 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000388 	.word	0x20000388
 8001718:	40005800 	.word	0x40005800
 800171c:	20a0c4df 	.word	0x20a0c4df

08001720 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001724:	2000      	movs	r0, #0
 8001726:	f007 fc81 	bl	800902c <HAL_ICACHE_ConfigAssociativityMode>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001730:	f000 fc8c 	bl	800204c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001734:	f007 fc9a 	bl	800906c <HAL_ICACHE_Enable>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800173e:	f000 fc85 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08e      	sub	sp, #56	@ 0x38
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2234      	movs	r2, #52	@ 0x34
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f010 fa2e 	bl	8011bb6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800175a:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <MX_LTDC_Init+0xf8>)
 800175c:	4a39      	ldr	r2, [pc, #228]	@ (8001844 <MX_LTDC_Init+0xfc>)
 800175e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001760:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <MX_LTDC_Init+0xf8>)
 8001762:	2200      	movs	r2, #0
 8001764:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001766:	4b36      	ldr	r3, [pc, #216]	@ (8001840 <MX_LTDC_Init+0xf8>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800176c:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <MX_LTDC_Init+0xf8>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001772:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <MX_LTDC_Init+0xf8>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001778:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <MX_LTDC_Init+0xf8>)
 800177a:	2203      	movs	r2, #3
 800177c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800177e:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <MX_LTDC_Init+0xf8>)
 8001780:	2203      	movs	r2, #3
 8001782:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001784:	4b2e      	ldr	r3, [pc, #184]	@ (8001840 <MX_LTDC_Init+0xf8>)
 8001786:	220b      	movs	r2, #11
 8001788:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800178a:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <MX_LTDC_Init+0xf8>)
 800178c:	220b      	movs	r2, #11
 800178e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001790:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <MX_LTDC_Init+0xf8>)
 8001792:	f240 322b 	movw	r2, #811	@ 0x32b
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8001798:	4b29      	ldr	r3, [pc, #164]	@ (8001840 <MX_LTDC_Init+0xf8>)
 800179a:	f240 12eb 	movw	r2, #491	@ 0x1eb
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 80017a0:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <MX_LTDC_Init+0xf8>)
 80017a2:	f240 3233 	movw	r2, #819	@ 0x333
 80017a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 80017a8:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <MX_LTDC_Init+0xf8>)
 80017aa:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80017ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017b0:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <MX_LTDC_Init+0xf8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80017b8:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <MX_LTDC_Init+0xf8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <MX_LTDC_Init+0xf8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017c8:	481d      	ldr	r0, [pc, #116]	@ (8001840 <MX_LTDC_Init+0xf8>)
 80017ca:	f007 fc5f 	bl	800908c <HAL_LTDC_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80017d4:	f000 fc3a 	bl	800204c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80017dc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80017e0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80017e6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80017ea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80017ec:	2301      	movs	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80017f0:	23ff      	movs	r3, #255	@ 0xff
 80017f2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80017f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017fc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80017fe:	2307      	movs	r3, #7
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2200      	movs	r2, #0
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	@ (8001840 <MX_LTDC_Init+0xf8>)
 8001828:	f007 fdc2 	bl	80093b0 <HAL_LTDC_ConfigLayer>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001832:	f000 fc0b 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	3738      	adds	r7, #56	@ 0x38
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200003dc 	.word	0x200003dc
 8001844:	40016800 	.word	0x40016800

08001848 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	615a      	str	r2, [r3, #20]
 800185e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001860:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <MX_RTC_Init+0x94>)
 8001862:	4a1f      	ldr	r2, [pc, #124]	@ (80018e0 <MX_RTC_Init+0x98>)
 8001864:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001866:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <MX_RTC_Init+0x94>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <MX_RTC_Init+0x94>)
 800186e:	227f      	movs	r2, #127	@ 0x7f
 8001870:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_RTC_Init+0x94>)
 8001874:	22ff      	movs	r2, #255	@ 0xff
 8001876:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <MX_RTC_Init+0x94>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_RTC_Init+0x94>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <MX_RTC_Init+0x94>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <MX_RTC_Init+0x94>)
 800188c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001890:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <MX_RTC_Init+0x94>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <MX_RTC_Init+0x94>)
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800189e:	480f      	ldr	r0, [pc, #60]	@ (80018dc <MX_RTC_Init+0x94>)
 80018a0:	f00c fc4a 	bl	800e138 <HAL_RTC_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80018aa:	f000 fbcf 	bl	800204c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	@ (80018dc <MX_RTC_Init+0x94>)
 80018c4:	f00c fd66 	bl	800e394 <HAL_RTCEx_PrivilegeModeSet>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80018ce:	f000 fbbd 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000484 	.word	0x20000484
 80018e0:	46007800 	.word	0x46007800

080018e4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80018e8:	4b2f      	ldr	r3, [pc, #188]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 80018ea:	4a30      	ldr	r2, [pc, #192]	@ (80019ac <MX_SAI2_Init+0xc8>)
 80018ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80018ee:	4b2e      	ldr	r3, [pc, #184]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80018f4:	4b2c      	ldr	r3, [pc, #176]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018fa:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001900:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001906:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800190c:	4b26      	ldr	r3, [pc, #152]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 800190e:	4a28      	ldr	r2, [pc, #160]	@ (80019b0 <MX_SAI2_Init+0xcc>)
 8001910:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001912:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001918:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 800191a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800191e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001920:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 8001922:	2200      	movs	r2, #0
 8001924:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 8001928:	2200      	movs	r2, #0
 800192a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 800192c:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 800192e:	2210      	movs	r2, #16
 8001930:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001932:	2302      	movs	r3, #2
 8001934:	2202      	movs	r2, #2
 8001936:	2101      	movs	r1, #1
 8001938:	481b      	ldr	r0, [pc, #108]	@ (80019a8 <MX_SAI2_Init+0xc4>)
 800193a:	f00c fd59 	bl	800e3f0 <HAL_SAI_InitProtocol>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001944:	f000 fb82 	bl	800204c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001948:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 800194a:	4a1b      	ldr	r2, [pc, #108]	@ (80019b8 <MX_SAI2_Init+0xd4>)
 800194c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 8001950:	2201      	movs	r2, #1
 8001952:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001954:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800195a:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001960:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 8001968:	2202      	movs	r2, #2
 800196a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 800196e:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <MX_SAI2_Init+0xcc>)
 8001970:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 800197a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800197e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 8001982:	2200      	movs	r2, #0
 8001984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 8001988:	2200      	movs	r2, #0
 800198a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 800198c:	2308      	movs	r3, #8
 800198e:	2202      	movs	r2, #2
 8001990:	2100      	movs	r1, #0
 8001992:	4808      	ldr	r0, [pc, #32]	@ (80019b4 <MX_SAI2_Init+0xd0>)
 8001994:	f00c fd2c 	bl	800e3f0 <HAL_SAI_InitProtocol>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 800199e:	f000 fb55 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200004b4 	.word	0x200004b4
 80019ac:	40015804 	.word	0x40015804
 80019b0:	00017700 	.word	0x00017700
 80019b4:	2000054c 	.word	0x2000054c
 80019b8:	40015824 	.word	0x40015824

080019bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	@ 0x28
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ce:	463b      	mov	r3, r7
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
 80019dc:	615a      	str	r2, [r3, #20]
 80019de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 80019e2:	4a26      	ldr	r2, [pc, #152]	@ (8001a7c <MX_TIM3_Init+0xc0>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 80019e8:	22a0      	movs	r2, #160	@ 0xa0
 80019ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 80019f4:	2264      	movs	r2, #100	@ 0x64
 80019f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a04:	481c      	ldr	r0, [pc, #112]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 8001a06:	f00d fb25 	bl	800f054 <HAL_TIM_PWM_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a10:	f000 fb1c 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	4815      	ldr	r0, [pc, #84]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 8001a24:	f00e fafc 	bl	8010020 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a2e:	f000 fb0d 	bl	800204c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a32:	2360      	movs	r3, #96	@ 0x60
 8001a34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001a36:	234b      	movs	r3, #75	@ 0x4b
 8001a38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a42:	463b      	mov	r3, r7
 8001a44:	220c      	movs	r2, #12
 8001a46:	4619      	mov	r1, r3
 8001a48:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 8001a4a:	f00d fb5b 	bl	800f104 <HAL_TIM_PWM_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a54:	f000 fafa 	bl	800204c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a66:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a68:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <MX_TIM3_Init+0xbc>)
 8001a6a:	f001 f89d 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	@ 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000074c 	.word	0x2000074c
 8001a7c:	40000400 	.word	0x40000400

08001a80 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b1c <MX_TIM15_Init+0x9c>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001aa6:	221a      	movs	r2, #26
 8001aa8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001ab2:	2231      	movs	r2, #49	@ 0x31
 8001ab4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001abc:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001ac8:	4813      	ldr	r0, [pc, #76]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001aca:	f00d f9d3 	bl	800ee74 <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001ad4:	f000 faba 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001ae6:	f00d fc21 	bl	800f32c <HAL_TIM_ConfigClockSource>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001af0:	f000 faac 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001af4:	2320      	movs	r3, #32
 8001af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <MX_TIM15_Init+0x98>)
 8001b02:	f00e fa8d 	bl	8010020 <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001b0c:	f000 fa9e 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000798 	.word	0x20000798
 8001b1c:	40014000 	.word	0x40014000

08001b20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b24:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b26:	4a23      	ldr	r2, [pc, #140]	@ (8001bb4 <MX_USART1_UART_Init+0x94>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b2a:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b5c:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b62:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b68:	4811      	ldr	r0, [pc, #68]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b6a:	f00e fb1b 	bl	80101a4 <HAL_UART_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b74:	f000 fa6a 	bl	800204c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	480d      	ldr	r0, [pc, #52]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b7c:	f00f fae9 	bl	8011152 <HAL_UARTEx_SetTxFifoThreshold>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b86:	f000 fa61 	bl	800204c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4808      	ldr	r0, [pc, #32]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b8e:	f00f fb1e 	bl	80111ce <HAL_UARTEx_SetRxFifoThreshold>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b98:	f000 fa58 	bl	800204c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b9e:	f00f fa9f 	bl	80110e0 <HAL_UARTEx_DisableFifoMode>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ba8:	f000 fa50 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200007e4 	.word	0x200007e4
 8001bb4:	40013800 	.word	0x40013800

08001bb8 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001bbe:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001bc4:	2209      	movs	r2, #9
 8001bc6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001bec:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001bfa:	f007 fd8a 	bl	8009712 <HAL_PCD_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001c04:	f000 fa22 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000878 	.word	0x20000878
 8001c10:	42040000 	.word	0x42040000

08001c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	@ 0x38
 8001c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2a:	4b8c      	ldr	r3, [pc, #560]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c30:	4a8a      	ldr	r2, [pc, #552]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c3a:	4b88      	ldr	r3, [pc, #544]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c48:	4b84      	ldr	r3, [pc, #528]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	4a83      	ldr	r2, [pc, #524]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c58:	4b80      	ldr	r3, [pc, #512]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c66:	4b7d      	ldr	r3, [pc, #500]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c6c:	4a7b      	ldr	r2, [pc, #492]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c6e:	f043 0320 	orr.w	r3, r3, #32
 8001c72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c76:	4b79      	ldr	r3, [pc, #484]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c84:	4b75      	ldr	r3, [pc, #468]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c8a:	4a74      	ldr	r2, [pc, #464]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c94:	4b71      	ldr	r3, [pc, #452]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca8:	4a6c      	ldr	r2, [pc, #432]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc6:	4a65      	ldr	r2, [pc, #404]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd0:	4b62      	ldr	r3, [pc, #392]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cde:	4b5f      	ldr	r3, [pc, #380]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cee:	4b5b      	ldr	r3, [pc, #364]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfc:	4b57      	ldr	r3, [pc, #348]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d02:	4a56      	ldr	r2, [pc, #344]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d0c:	4b53      	ldr	r3, [pc, #332]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d1a:	4b50      	ldr	r3, [pc, #320]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d20:	4a4e      	ldr	r2, [pc, #312]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e5c <MX_GPIO_Init+0x248>)
 8001d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	4848      	ldr	r0, [pc, #288]	@ (8001e60 <MX_GPIO_Init+0x24c>)
 8001d3e:	f006 f9df 	bl	8008100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2110      	movs	r1, #16
 8001d46:	4846      	ldr	r0, [pc, #280]	@ (8001e60 <MX_GPIO_Init+0x24c>)
 8001d48:	f006 f9da 	bl	8008100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2114      	movs	r1, #20
 8001d50:	4844      	ldr	r0, [pc, #272]	@ (8001e64 <MX_GPIO_Init+0x250>)
 8001d52:	f006 f9d5 	bl	8008100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001d56:	2314      	movs	r3, #20
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	483c      	ldr	r0, [pc, #240]	@ (8001e60 <MX_GPIO_Init+0x24c>)
 8001d6e:	f005 ffef 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001d72:	2320      	movs	r3, #32
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d76:	4b3c      	ldr	r3, [pc, #240]	@ (8001e68 <MX_GPIO_Init+0x254>)
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d82:	4619      	mov	r1, r3
 8001d84:	4836      	ldr	r0, [pc, #216]	@ (8001e60 <MX_GPIO_Init+0x24c>)
 8001d86:	f005 ffe3 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d8e:	4b37      	ldr	r3, [pc, #220]	@ (8001e6c <MX_GPIO_Init+0x258>)
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4834      	ldr	r0, [pc, #208]	@ (8001e70 <MX_GPIO_Init+0x25c>)
 8001d9e:	f005 ffd7 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001da2:	2310      	movs	r3, #16
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001da6:	4b33      	ldr	r3, [pc, #204]	@ (8001e74 <MX_GPIO_Init+0x260>)
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	482e      	ldr	r0, [pc, #184]	@ (8001e70 <MX_GPIO_Init+0x25c>)
 8001db6:	f005 ffcb 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001dba:	2314      	movs	r3, #20
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4824      	ldr	r0, [pc, #144]	@ (8001e64 <MX_GPIO_Init+0x250>)
 8001dd2:	f005 ffbd 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	481e      	ldr	r0, [pc, #120]	@ (8001e64 <MX_GPIO_Init+0x250>)
 8001dea:	f005 ffb1 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8001dee:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	481d      	ldr	r0, [pc, #116]	@ (8001e78 <MX_GPIO_Init+0x264>)
 8001e04:	f005 ffa4 	bl	8007d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001e08:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4817      	ldr	r0, [pc, #92]	@ (8001e7c <MX_GPIO_Init+0x268>)
 8001e1e:	f005 ff97 	bl	8007d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	200c      	movs	r0, #12
 8001e28:	f003 fe78 	bl	8005b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e2c:	200c      	movs	r0, #12
 8001e2e:	f003 fe8f 	bl	8005b50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	200f      	movs	r0, #15
 8001e38:	f003 fe70 	bl	8005b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e3c:	200f      	movs	r0, #15
 8001e3e:	f003 fe87 	bl	8005b50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2010      	movs	r0, #16
 8001e48:	f003 fe68 	bl	8005b1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001e4c:	2010      	movs	r0, #16
 8001e4e:	f003 fe7f 	bl	8005b50 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e52:	bf00      	nop
 8001e54:	3738      	adds	r7, #56	@ 0x38
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	46020c00 	.word	0x46020c00
 8001e60:	42021000 	.word	0x42021000
 8001e64:	42020c00 	.word	0x42020c00
 8001e68:	10110000 	.word	0x10110000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	42020000 	.word	0x42020000
 8001e74:	10210000 	.word	0x10210000
 8001e78:	42021800 	.word	0x42021800
 8001e7c:	42020400 	.word	0x42020400

08001e80 <HAL_ADC_ConvHalfCpltCallback>:
	temp = temp / denoiseSize;
	return temp;
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 13) / 2; i += 13)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e04e      	b.n	8001f30 <HAL_ADC_ConvHalfCpltCallback+0xb0>
	{
		float convert = ((((float)adcGroup1[i] * gain) / 65536.0f) - 0.5f) * 2.0f;
 8001e92:	4a2f      	ldr	r2, [pc, #188]	@ (8001f50 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea2:	ee17 0a90 	vmov	r0, s15
 8001ea6:	f7fe fb6b 	bl	8000580 <__aeabi_f2d>
 8001eaa:	a327      	add	r3, pc, #156	@ (adr r3, 8001f48 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe fbbe 	bl	8000630 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 8001ec2:	f7fe fcdf 	bl	8000884 <__aeabi_ddiv>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 8001ed4:	f7fe f9f4 	bl	80002c0 <__aeabi_dsub>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	f7fe f9ee 	bl	80002c4 <__adddf3>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fdb0 	bl	8000a54 <__aeabi_d2f>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60fb      	str	r3, [r7, #12]
		int32_t output = (int32_t)(convert * 8388607);
 8001ef8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001efc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001f5c <HAL_ADC_ConvHalfCpltCallback+0xdc>
 8001f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f08:	ee17 3a90 	vmov	r3, s15
 8001f0c:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 8001f0e:	8afb      	ldrh	r3, [r7, #22]
 8001f10:	4913      	ldr	r1, [pc, #76]	@ (8001f60 <HAL_ADC_ConvHalfCpltCallback+0xe0>)
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 8001f18:	8afb      	ldrh	r3, [r7, #22]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	4910      	ldr	r1, [pc, #64]	@ (8001f60 <HAL_ADC_ConvHalfCpltCallback+0xe0>)
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 8001f24:	8afb      	ldrh	r3, [r7, #22]
 8001f26:	3302      	adds	r3, #2
 8001f28:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 13) / 2; i += 13)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	330d      	adds	r3, #13
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8001f36:	dbac      	blt.n	8001e92 <HAL_ADC_ConvHalfCpltCallback+0x12>
	}
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	f3af 8000 	nop.w
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	3ff4cccc 	.word	0x3ff4cccc
 8001f50:	20000d5c 	.word	0x20000d5c
 8001f54:	40f00000 	.word	0x40f00000
 8001f58:	3fe00000 	.word	0x3fe00000
 8001f5c:	4afffffe 	.word	0x4afffffe
 8001f60:	20007560 	.word	0x20007560
 8001f64:	00000000 	.word	0x00000000

08001f68 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	82fb      	strh	r3, [r7, #22]
	for(int i = (sampleSize * 13) / 2; i < sampleSize; i += 13)
 8001f74:	f44f 53d0 	mov.w	r3, #6656	@ 0x1a00
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e04e      	b.n	800201a <HAL_ADC_ConvCpltCallback+0xb2>
	{
		float convert = ((((float)adcGroup1[i] * gain) / 65536.0f) - 0.5f) * 2.0f;
 8001f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8002038 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f8c:	ee17 0a90 	vmov	r0, s15
 8001f90:	f7fe faf6 	bl	8000580 <__aeabi_f2d>
 8001f94:	a326      	add	r3, pc, #152	@ (adr r3, 8002030 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fb49 	bl	8000630 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	4b24      	ldr	r3, [pc, #144]	@ (800203c <HAL_ADC_ConvCpltCallback+0xd4>)
 8001fac:	f7fe fc6a 	bl	8000884 <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001fbe:	f7fe f97f 	bl	80002c0 <__aeabi_dsub>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	f7fe f979 	bl	80002c4 <__adddf3>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7fe fd3b 	bl	8000a54 <__aeabi_d2f>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	60fb      	str	r3, [r7, #12]
		int32_t output = (int32_t)(convert * 8388607);
 8001fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fe6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002044 <HAL_ADC_ConvCpltCallback+0xdc>
 8001fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff2:	ee17 3a90 	vmov	r3, s15
 8001ff6:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 8001ff8:	8afb      	ldrh	r3, [r7, #22]
 8001ffa:	4913      	ldr	r1, [pc, #76]	@ (8002048 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 8002002:	8afb      	ldrh	r3, [r7, #22]
 8002004:	3301      	adds	r3, #1
 8002006:	4910      	ldr	r1, [pc, #64]	@ (8002048 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 800200e:	8afb      	ldrh	r3, [r7, #22]
 8002010:	3302      	adds	r3, #2
 8002012:	82fb      	strh	r3, [r7, #22]
	for(int i = (sampleSize * 13) / 2; i < sampleSize; i += 13)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	330d      	adds	r3, #13
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002020:	dbac      	blt.n	8001f7c <HAL_ADC_ConvCpltCallback+0x14>
	}
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	f3af 8000 	nop.w
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	3ff4cccc 	.word	0x3ff4cccc
 8002038:	20000d5c 	.word	0x20000d5c
 800203c:	40f00000 	.word	0x40f00000
 8002040:	3fe00000 	.word	0x3fe00000
 8002044:	4afffffe 	.word	0x4afffffe
 8002048:	20007560 	.word	0x20007560

0800204c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002050:	b672      	cpsid	i
}
 8002052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <Error_Handler+0x8>

08002058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_MspInit+0x30>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002064:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <HAL_MspInit+0x30>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800206e:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_MspInit+0x30>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 800207c:	f007 fd86 	bl	8009b8c <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	46020c00 	.word	0x46020c00

0800208c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0e0      	sub	sp, #384	@ 0x180
 8002090:	af00      	add	r7, sp, #0
 8002092:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002096:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800209a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ac:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020b0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80020b4:	4618      	mov	r0, r3
 80020b6:	23e0      	movs	r3, #224	@ 0xe0
 80020b8:	461a      	mov	r2, r3
 80020ba:	2100      	movs	r1, #0
 80020bc:	f00f fd7b 	bl	8011bb6 <memset>
  if(hadc->Instance==ADC1)
 80020c0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020c4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4aa1      	ldr	r2, [pc, #644]	@ (8002354 <HAL_ADC_MspInit+0x2c8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	f040 8152 	bne.w	8002378 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80020d4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020d8:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80020dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80020e8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020ec:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80020f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f8:	f107 0320 	add.w	r3, r7, #32
 80020fc:	4618      	mov	r0, r3
 80020fe:	f009 f81f 	bl	800b140 <HAL_RCCEx_PeriphCLKConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8002108:	f7ff ffa0 	bl	800204c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800210c:	4b92      	ldr	r3, [pc, #584]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 800210e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002112:	4a91      	ldr	r2, [pc, #580]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 8002114:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002118:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800211c:	4b8e      	ldr	r3, [pc, #568]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 800211e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002122:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002126:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800212a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002134:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002138:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	4b87      	ldr	r3, [pc, #540]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 800213c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002140:	4a85      	ldr	r2, [pc, #532]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800214a:	4b83      	ldr	r3, [pc, #524]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 800214c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002150:	f003 0204 	and.w	r2, r3, #4
 8002154:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002158:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002162:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002166:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	4b7b      	ldr	r3, [pc, #492]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 800216a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800216e:	4a7a      	ldr	r2, [pc, #488]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002178:	4b77      	ldr	r3, [pc, #476]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 800217a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800217e:	f003 0201 	and.w	r2, r3, #1
 8002182:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002186:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002190:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002194:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	4b70      	ldr	r3, [pc, #448]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 8002198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800219c:	4a6e      	ldr	r2, [pc, #440]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002358 <HAL_ADC_MspInit+0x2cc>)
 80021a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ac:	f003 0202 	and.w	r2, r3, #2
 80021b0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80021b4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80021be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021c2:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 80021c4:	230f      	movs	r3, #15
 80021c6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ca:	2303      	movs	r3, #3
 80021cc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80021da:	4619      	mov	r1, r3
 80021dc:	485f      	ldr	r0, [pc, #380]	@ (800235c <HAL_ADC_MspInit+0x2d0>)
 80021de:	f005 fdb7 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 80021e2:	23ed      	movs	r3, #237	@ 0xed
 80021e4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e8:	2303      	movs	r3, #3
 80021ea:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80021f8:	4619      	mov	r1, r3
 80021fa:	4859      	ldr	r0, [pc, #356]	@ (8002360 <HAL_ADC_MspInit+0x2d4>)
 80021fc:	f005 fda8 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8002200:	2303      	movs	r3, #3
 8002202:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002206:	2303      	movs	r3, #3
 8002208:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8002216:	4619      	mov	r1, r3
 8002218:	4852      	ldr	r0, [pc, #328]	@ (8002364 <HAL_ADC_MspInit+0x2d8>)
 800221a:	f005 fd99 	bl	8007d50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800221e:	2321      	movs	r3, #33	@ 0x21
 8002220:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800223c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002240:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002244:	2301      	movs	r3, #1
 8002246:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800224a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800224e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8002258:	2301      	movs	r3, #1
 800225a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800225e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002262:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8002278:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800227c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8002280:	232b      	movs	r3, #43	@ 0x2b
 8002282:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8002292:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002296:	4934      	ldr	r1, [pc, #208]	@ (8002368 <HAL_ADC_MspInit+0x2dc>)
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fe6d 	bl	8006f78 <HAL_DMAEx_List_BuildNode>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 80022a4:	f7ff fed2 	bl	800204c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80022a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002368 <HAL_ADC_MspInit+0x2dc>)
 80022aa:	2100      	movs	r1, #0
 80022ac:	482f      	ldr	r0, [pc, #188]	@ (800236c <HAL_ADC_MspInit+0x2e0>)
 80022ae:	f004 fe8f 	bl	8006fd0 <HAL_DMAEx_List_InsertNode>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80022b8:	f7ff fec8 	bl	800204c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80022bc:	482b      	ldr	r0, [pc, #172]	@ (800236c <HAL_ADC_MspInit+0x2e0>)
 80022be:	f004 ff50 	bl	8007162 <HAL_DMAEx_List_SetCircularMode>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 80022c8:	f7ff fec0 	bl	800204c <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80022cc:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 80022ce:	4a29      	ldr	r2, [pc, #164]	@ (8002374 <HAL_ADC_MspInit+0x2e8>)
 80022d0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80022d2:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80022de:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80022ea:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 80022ec:	2281      	movs	r2, #129	@ 0x81
 80022ee:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80022f0:	481f      	ldr	r0, [pc, #124]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 80022f2:	f004 fc81 	bl	8006bf8 <HAL_DMAEx_List_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 80022fc:	f7ff fea6 	bl	800204c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002300:	491a      	ldr	r1, [pc, #104]	@ (800236c <HAL_ADC_MspInit+0x2e0>)
 8002302:	481b      	ldr	r0, [pc, #108]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 8002304:	f004 ff8e 	bl	8007224 <HAL_DMAEx_List_LinkQ>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 800230e:	f7ff fe9d 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8002312:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002316:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a14      	ldr	r2, [pc, #80]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 800231e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002320:	4a13      	ldr	r2, [pc, #76]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 8002322:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002326:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800232e:	2110      	movs	r1, #16
 8002330:	480f      	ldr	r0, [pc, #60]	@ (8002370 <HAL_ADC_MspInit+0x2e4>)
 8002332:	f004 f86f 	bl	8006414 <HAL_DMA_ConfigChannelAttributes>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 800233c:	f7ff fe86 	bl	800204c <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	2025      	movs	r0, #37	@ 0x25
 8002346:	f003 fbe9 	bl	8005b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800234a:	2025      	movs	r0, #37	@ 0x25
 800234c:	f003 fc00 	bl	8005b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8002350:	e0c0      	b.n	80024d4 <HAL_ADC_MspInit+0x448>
 8002352:	bf00      	nop
 8002354:	42028000 	.word	0x42028000
 8002358:	46020c00 	.word	0x46020c00
 800235c:	42020800 	.word	0x42020800
 8002360:	42020000 	.word	0x42020000
 8002364:	42020400 	.word	0x42020400
 8002368:	20000140 	.word	0x20000140
 800236c:	20000164 	.word	0x20000164
 8002370:	2000017c 	.word	0x2000017c
 8002374:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8002378:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800237c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a56      	ldr	r2, [pc, #344]	@ (80024e0 <HAL_ADC_MspInit+0x454>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f040 80a4 	bne.w	80024d4 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800238c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002390:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8002394:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80023a0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023a4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	4618      	mov	r0, r3
 80023b6:	f008 fec3 	bl	800b140 <HAL_RCCEx_PeriphCLKConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 80023c0:	f7ff fe44 	bl	800204c <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 80023c4:	4b47      	ldr	r3, [pc, #284]	@ (80024e4 <HAL_ADC_MspInit+0x458>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ca:	4a46      	ldr	r2, [pc, #280]	@ (80024e4 <HAL_ADC_MspInit+0x458>)
 80023cc:	f043 0320 	orr.w	r3, r3, #32
 80023d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80023d4:	4b43      	ldr	r3, [pc, #268]	@ (80024e4 <HAL_ADC_MspInit+0x458>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023da:	f003 0220 	and.w	r2, r3, #32
 80023de:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023e2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023ec:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023f0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023f2:	4b3c      	ldr	r3, [pc, #240]	@ (80024e4 <HAL_ADC_MspInit+0x458>)
 80023f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023f8:	4a3a      	ldr	r2, [pc, #232]	@ (80024e4 <HAL_ADC_MspInit+0x458>)
 80023fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002402:	4b38      	ldr	r3, [pc, #224]	@ (80024e4 <HAL_ADC_MspInit+0x458>)
 8002404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002408:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800240c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002410:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800241a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800241e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8002420:	2303      	movs	r3, #3
 8002422:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002426:	2303      	movs	r3, #3
 8002428:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002432:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8002436:	4619      	mov	r1, r3
 8002438:	482b      	ldr	r0, [pc, #172]	@ (80024e8 <HAL_ADC_MspInit+0x45c>)
 800243a:	f005 fc89 	bl	8007d50 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 800243e:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002440:	4a2b      	ldr	r2, [pc, #172]	@ (80024f0 <HAL_ADC_MspInit+0x464>)
 8002442:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8002444:	4b29      	ldr	r3, [pc, #164]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002446:	2201      	movs	r2, #1
 8002448:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800244a:	4b28      	ldr	r3, [pc, #160]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002450:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8002456:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 800245c:	4b23      	ldr	r3, [pc, #140]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 800245e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002462:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002464:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002466:	2201      	movs	r2, #1
 8002468:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800246a:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 800246c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002470:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002472:	4b1e      	ldr	r3, [pc, #120]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 800247a:	2201      	movs	r2, #1
 800247c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 800247e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002480:	2201      	movs	r2, #1
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002486:	2200      	movs	r2, #0
 8002488:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800248a:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002492:	2200      	movs	r2, #0
 8002494:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8002496:	4815      	ldr	r0, [pc, #84]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 8002498:	f003 fc1c 	bl	8005cd4 <HAL_DMA_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 80024a2:	f7ff fdd3 	bl	800204c <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 80024a6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80024aa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0e      	ldr	r2, [pc, #56]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 80024b2:	671a      	str	r2, [r3, #112]	@ 0x70
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 80024b6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80024ba:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80024c2:	2110      	movs	r1, #16
 80024c4:	4809      	ldr	r0, [pc, #36]	@ (80024ec <HAL_ADC_MspInit+0x460>)
 80024c6:	f003 ffa5 	bl	8006414 <HAL_DMA_ConfigChannelAttributes>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 80024d0:	f7ff fdbc 	bl	800204c <Error_Handler>
}
 80024d4:	bf00      	nop
 80024d6:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	46021000 	.word	0x46021000
 80024e4:	46020c00 	.word	0x46020c00
 80024e8:	42021800 	.word	0x42021800
 80024ec:	200001f4 	.word	0x200001f4
 80024f0:	40020150 	.word	0x40020150

080024f4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0b      	ldr	r2, [pc, #44]	@ (8002530 <HAL_DMA2D_MspInit+0x3c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10e      	bne.n	8002524 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002506:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_DMA2D_MspInit+0x40>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250c:	4a09      	ldr	r2, [pc, #36]	@ (8002534 <HAL_DMA2D_MspInit+0x40>)
 800250e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002512:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002516:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <HAL_DMA2D_MspInit+0x40>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	4002b000 	.word	0x4002b000
 8002534:	46020c00 	.word	0x46020c00

08002538 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	@ 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2a      	ldr	r2, [pc, #168]	@ (8002600 <HAL_XSPI_MspInit+0xc8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d14d      	bne.n	80025f6 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 800255a:	4b2a      	ldr	r3, [pc, #168]	@ (8002604 <HAL_XSPI_MspInit+0xcc>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002560:	4a28      	ldr	r2, [pc, #160]	@ (8002604 <HAL_XSPI_MspInit+0xcc>)
 8002562:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002566:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800256a:	4b26      	ldr	r3, [pc, #152]	@ (8002604 <HAL_XSPI_MspInit+0xcc>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002578:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <HAL_XSPI_MspInit+0xcc>)
 800257a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800257e:	4a21      	ldr	r2, [pc, #132]	@ (8002604 <HAL_XSPI_MspInit+0xcc>)
 8002580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002584:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002588:	4b1e      	ldr	r3, [pc, #120]	@ (8002604 <HAL_XSPI_MspInit+0xcc>)
 800258a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800258e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002596:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <HAL_XSPI_MspInit+0xcc>)
 8002598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800259c:	4a19      	ldr	r2, [pc, #100]	@ (8002604 <HAL_XSPI_MspInit+0xcc>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025a6:	4b17      	ldr	r3, [pc, #92]	@ (8002604 <HAL_XSPI_MspInit+0xcc>)
 80025a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80025b4:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 80025b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80025c6:	2308      	movs	r3, #8
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	480d      	ldr	r0, [pc, #52]	@ (8002608 <HAL_XSPI_MspInit+0xd0>)
 80025d2:	f005 fbbd 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80025d6:	230f      	movs	r3, #15
 80025d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80025e6:	2308      	movs	r3, #8
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4806      	ldr	r0, [pc, #24]	@ (800260c <HAL_XSPI_MspInit+0xd4>)
 80025f2:	f005 fbad 	bl	8007d50 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 80025f6:	bf00      	nop
 80025f8:	3728      	adds	r7, #40	@ 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	420d3400 	.word	0x420d3400
 8002604:	46020c00 	.word	0x46020c00
 8002608:	42021c00 	.word	0x42021c00
 800260c:	42022000 	.word	0x42022000

08002610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0c4      	sub	sp, #272	@ 0x110
 8002614:	af00      	add	r7, sp, #0
 8002616:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800261a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800261e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002630:	f107 0318 	add.w	r3, r7, #24
 8002634:	22e0      	movs	r2, #224	@ 0xe0
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f00f fabc 	bl	8011bb6 <memset>
  if(hi2c->Instance==I2C1)
 800263e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002642:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a63      	ldr	r2, [pc, #396]	@ (80027d8 <HAL_I2C_MspInit+0x1c8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d14f      	bne.n	80026f0 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002650:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002662:	f107 0318 	add.w	r3, r7, #24
 8002666:	4618      	mov	r0, r3
 8002668:	f008 fd6a 	bl	800b140 <HAL_RCCEx_PeriphCLKConfig>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002672:	f7ff fceb 	bl	800204c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002676:	4b59      	ldr	r3, [pc, #356]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 8002678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800267c:	4a57      	ldr	r2, [pc, #348]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 800267e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002682:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002686:	4b55      	ldr	r3, [pc, #340]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800268c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002694:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002698:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800269c:	2312      	movs	r3, #18
 800269e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026ae:	2304      	movs	r3, #4
 80026b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026b4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80026b8:	4619      	mov	r1, r3
 80026ba:	4849      	ldr	r0, [pc, #292]	@ (80027e0 <HAL_I2C_MspInit+0x1d0>)
 80026bc:	f005 fb48 	bl	8007d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026c0:	4b46      	ldr	r3, [pc, #280]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 80026c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026c6:	4a45      	ldr	r2, [pc, #276]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 80026c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026d0:	4b42      	ldr	r3, [pc, #264]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 80026d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026d6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80026da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026de:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026ec:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026ee:	e06e      	b.n	80027ce <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 80026f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a39      	ldr	r2, [pc, #228]	@ (80027e4 <HAL_I2C_MspInit+0x1d4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d165      	bne.n	80027ce <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002702:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800270e:	2300      	movs	r3, #0
 8002710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	4618      	mov	r0, r3
 800271a:	f008 fd11 	bl	800b140 <HAL_RCCEx_PeriphCLKConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002724:	f7ff fc92 	bl	800204c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002728:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 800272a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800272e:	4a2b      	ldr	r2, [pc, #172]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 8002730:	f043 0320 	orr.w	r3, r3, #32
 8002734:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002738:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 800273a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800273e:	f003 0220 	and.w	r2, r3, #32
 8002742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002754:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002756:	2303      	movs	r3, #3
 8002758:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800275c:	2312      	movs	r3, #18
 800275e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800276e:	2304      	movs	r3, #4
 8002770:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002774:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002778:	4619      	mov	r1, r3
 800277a:	481b      	ldr	r0, [pc, #108]	@ (80027e8 <HAL_I2C_MspInit+0x1d8>)
 800277c:	f005 fae8 	bl	8007d50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002780:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 8002782:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002786:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 8002788:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800278c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002790:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_I2C_MspInit+0x1cc>)
 8002792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002796:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800279a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800279e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027ac:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	2039      	movs	r0, #57	@ 0x39
 80027b4:	f003 f9b2 	bl	8005b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80027b8:	2039      	movs	r0, #57	@ 0x39
 80027ba:	f003 f9c9 	bl	8005b50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	203a      	movs	r0, #58	@ 0x3a
 80027c4:	f003 f9aa 	bl	8005b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80027c8:	203a      	movs	r0, #58	@ 0x3a
 80027ca:	f003 f9c1 	bl	8005b50 <HAL_NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40005400 	.word	0x40005400
 80027dc:	46020c00 	.word	0x46020c00
 80027e0:	42021800 	.word	0x42021800
 80027e4:	40005800 	.word	0x40005800
 80027e8:	42021400 	.word	0x42021400

080027ec <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b0c6      	sub	sp, #280	@ 0x118
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80027f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027fa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800280c:	f107 0320 	add.w	r3, r7, #32
 8002810:	22e0      	movs	r2, #224	@ 0xe0
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f00f f9ce 	bl	8011bb6 <memset>
  if(hltdc->Instance==LTDC)
 800281a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800281e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a92      	ldr	r2, [pc, #584]	@ (8002a70 <HAL_LTDC_MspInit+0x284>)
 8002828:	4293      	cmp	r3, r2
 800282a:	f040 811b 	bne.w	8002a64 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0302 	mov.w	r3, #2
 8002836:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8002840:	2303      	movs	r3, #3
 8002842:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8002844:	2304      	movs	r3, #4
 8002846:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8002848:	2332      	movs	r3, #50	@ 0x32
 800284a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 800284c:	2302      	movs	r3, #2
 800284e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8002850:	2302      	movs	r3, #2
 8002852:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8002854:	2308      	movs	r3, #8
 8002856:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8002858:	2300      	movs	r3, #0
 800285a:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8002860:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002864:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002866:	f107 0320 	add.w	r3, r7, #32
 800286a:	4618      	mov	r0, r3
 800286c:	f008 fc68 	bl	800b140 <HAL_RCCEx_PeriphCLKConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8002876:	f7ff fbe9 	bl	800204c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800287a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 800287c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002880:	4a7c      	ldr	r2, [pc, #496]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 8002882:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002886:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800288a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 800288c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002898:	4b76      	ldr	r3, [pc, #472]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 800289a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800289e:	4a75      	ldr	r2, [pc, #468]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028a8:	4b72      	ldr	r3, [pc, #456]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 80028aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ae:	f003 0202 	and.w	r2, r3, #2
 80028b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028b6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028c4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 80028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028cc:	4a69      	ldr	r2, [pc, #420]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 80028ce:	f043 0310 	orr.w	r3, r3, #16
 80028d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028d6:	4b67      	ldr	r3, [pc, #412]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 80028d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028dc:	f003 0210 	and.w	r2, r3, #16
 80028e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028f2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 80028f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002904:	4b5b      	ldr	r3, [pc, #364]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 8002906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800290a:	f003 0208 	and.w	r2, r3, #8
 800290e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800291c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002920:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002922:	4b54      	ldr	r3, [pc, #336]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 8002924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002928:	4a52      	ldr	r2, [pc, #328]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002932:	4b50      	ldr	r3, [pc, #320]	@ (8002a74 <HAL_LTDC_MspInit+0x288>)
 8002934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002938:	f003 0204 	and.w	r2, r3, #4
 800293c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002940:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800294a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800294e:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002950:	2304      	movs	r3, #4
 8002952:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002968:	2308      	movs	r3, #8
 800296a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002972:	4619      	mov	r1, r3
 8002974:	4840      	ldr	r0, [pc, #256]	@ (8002a78 <HAL_LTDC_MspInit+0x28c>)
 8002976:	f005 f9eb 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800297a:	f64f 7381 	movw	r3, #65409	@ 0xff81
 800297e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002994:	2308      	movs	r3, #8
 8002996:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800299a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800299e:	4619      	mov	r1, r3
 80029a0:	4836      	ldr	r0, [pc, #216]	@ (8002a7c <HAL_LTDC_MspInit+0x290>)
 80029a2:	f005 f9d5 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80029a6:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 80029aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80029c0:	2308      	movs	r3, #8
 80029c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029ca:	4619      	mov	r1, r3
 80029cc:	482c      	ldr	r0, [pc, #176]	@ (8002a80 <HAL_LTDC_MspInit+0x294>)
 80029ce:	f005 f9bf 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029d2:	23c0      	movs	r3, #192	@ 0xc0
 80029d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80029ea:	2307      	movs	r3, #7
 80029ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029f4:	4619      	mov	r1, r3
 80029f6:	4823      	ldr	r0, [pc, #140]	@ (8002a84 <HAL_LTDC_MspInit+0x298>)
 80029f8:	f005 f9aa 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002a16:	2308      	movs	r3, #8
 8002a18:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002a20:	4619      	mov	r1, r3
 8002a22:	4818      	ldr	r0, [pc, #96]	@ (8002a84 <HAL_LTDC_MspInit+0x298>)
 8002a24:	f005 f994 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002a42:	2307      	movs	r3, #7
 8002a44:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a48:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	480a      	ldr	r0, [pc, #40]	@ (8002a78 <HAL_LTDC_MspInit+0x28c>)
 8002a50:	f005 f97e 	bl	8007d50 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	2087      	movs	r0, #135	@ 0x87
 8002a5a:	f003 f85f 	bl	8005b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002a5e:	2087      	movs	r0, #135	@ 0x87
 8002a60:	f003 f876 	bl	8005b50 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002a64:	bf00      	nop
 8002a66:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40016800 	.word	0x40016800
 8002a74:	46020c00 	.word	0x46020c00
 8002a78:	42020400 	.word	0x42020400
 8002a7c:	42021000 	.word	0x42021000
 8002a80:	42020c00 	.word	0x42020c00
 8002a84:	42020800 	.word	0x42020800

08002a88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b0bc      	sub	sp, #240	@ 0xf0
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	22e0      	movs	r2, #224	@ 0xe0
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f00f f88c 	bl	8011bb6 <memset>
  if(hrtc->Instance==RTC)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b18 <HAL_RTC_MspInit+0x90>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d132      	bne.n	8002b0e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002aa8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ab4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f008 fb3d 	bl	800b140 <HAL_RCCEx_PeriphCLKConfig>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002acc:	f7ff fabe 	bl	800204c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ad0:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_RTC_MspInit+0x94>)
 8002ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ad6:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <HAL_RTC_MspInit+0x94>)
 8002ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002adc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b1c <HAL_RTC_MspInit+0x94>)
 8002ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <HAL_RTC_MspInit+0x94>)
 8002ae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aec:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002af0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_RTC_MspInit+0x94>)
 8002af2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002af6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002afe:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <HAL_RTC_MspInit+0x94>)
 8002b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b04:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <HAL_RTC_MspInit+0x94>)
 8002b06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002b0e:	bf00      	nop
 8002b10:	37f0      	adds	r7, #240	@ 0xf0
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	46007800 	.word	0x46007800
 8002b1c:	46020c00 	.word	0x46020c00

08002b20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b5c <HAL_TIM_PWM_MspInit+0x3c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b32:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_TIM_PWM_MspInit+0x40>)
 8002b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b38:	4a09      	ldr	r2, [pc, #36]	@ (8002b60 <HAL_TIM_PWM_MspInit+0x40>)
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b42:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <HAL_TIM_PWM_MspInit+0x40>)
 8002b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	46020c00 	.word	0x46020c00

08002b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba0 <HAL_TIM_Base_MspInit+0x3c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <HAL_TIM_Base_MspInit+0x40>)
 8002b78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b7c:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <HAL_TIM_Base_MspInit+0x40>)
 8002b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b82:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002b86:	4b07      	ldr	r3, [pc, #28]	@ (8002ba4 <HAL_TIM_Base_MspInit+0x40>)
 8002b88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40014000 	.word	0x40014000
 8002ba4:	46020c00 	.word	0x46020c00

08002ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a12      	ldr	r2, [pc, #72]	@ (8002c10 <HAL_TIM_MspPostInit+0x68>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d11e      	bne.n	8002c08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_TIM_MspPostInit+0x6c>)
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd0:	4a10      	ldr	r2, [pc, #64]	@ (8002c14 <HAL_TIM_MspPostInit+0x6c>)
 8002bd2:	f043 0310 	orr.w	r3, r3, #16
 8002bd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <HAL_TIM_MspPostInit+0x6c>)
 8002bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002be8:	2340      	movs	r3, #64	@ 0x40
 8002bea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	4619      	mov	r1, r3
 8002c02:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <HAL_TIM_MspPostInit+0x70>)
 8002c04:	f005 f8a4 	bl	8007d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c08:	bf00      	nop
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40000400 	.word	0x40000400
 8002c14:	46020c00 	.word	0x46020c00
 8002c18:	42021000 	.word	0x42021000

08002c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b0c2      	sub	sp, #264	@ 0x108
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c2a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c3c:	f107 0310 	add.w	r3, r7, #16
 8002c40:	22e0      	movs	r2, #224	@ 0xe0
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f00e ffb6 	bl	8011bb6 <memset>
  if(huart->Instance==USART1)
 8002c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2f      	ldr	r2, [pc, #188]	@ (8002d14 <HAL_UART_MspInit+0xf8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d155      	bne.n	8002d08 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c5c:	f04f 0201 	mov.w	r2, #1
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f008 fa65 	bl	800b140 <HAL_RCCEx_PeriphCLKConfig>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002c7c:	f7ff f9e6 	bl	800204c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c80:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <HAL_UART_MspInit+0xfc>)
 8002c82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c86:	4a24      	ldr	r2, [pc, #144]	@ (8002d18 <HAL_UART_MspInit+0xfc>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002c90:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <HAL_UART_MspInit+0xfc>)
 8002c92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <HAL_UART_MspInit+0xfc>)
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <HAL_UART_MspInit+0xfc>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cae:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_UART_MspInit+0xfc>)
 8002cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb4:	f003 0201 	and.w	r2, r3, #1
 8002cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002cbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002cc6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cca:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ccc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cec:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480a      	ldr	r0, [pc, #40]	@ (8002d1c <HAL_UART_MspInit+0x100>)
 8002cf4:	f005 f82c 	bl	8007d50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	203d      	movs	r0, #61	@ 0x3d
 8002cfe:	f002 ff0d 	bl	8005b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d02:	203d      	movs	r0, #61	@ 0x3d
 8002d04:	f002 ff24 	bl	8005b50 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002d08:	bf00      	nop
 8002d0a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40013800 	.word	0x40013800
 8002d18:	46020c00 	.word	0x46020c00
 8002d1c:	42020000 	.word	0x42020000

08002d20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b0be      	sub	sp, #248	@ 0xf8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d28:	f107 0318 	add.w	r3, r7, #24
 8002d2c:	22e0      	movs	r2, #224	@ 0xe0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f00e ff40 	bl	8011bb6 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8002e24 <HAL_PCD_MspInit+0x104>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d16d      	bne.n	8002e1c <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d40:	4b39      	ldr	r3, [pc, #228]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d46:	4a38      	ldr	r2, [pc, #224]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002d50:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002d52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0308 	mov.w	r3, #8
 8002d66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002d6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d72:	f107 0318 	add.w	r3, r7, #24
 8002d76:	4618      	mov	r0, r3
 8002d78:	f008 f9e2 	bl	800b140 <HAL_RCCEx_PeriphCLKConfig>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 8002d82:	f7ff f963 	bl	800204c <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002d86:	200c      	movs	r0, #12
 8002d88:	f000 fc1c 	bl	80035c4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002d8c:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d92:	4a25      	ldr	r2, [pc, #148]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d9c:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002daa:	4b1f      	ldr	r3, [pc, #124]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dba:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc8:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11b      	bne.n	8002e0e <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ddc:	4a12      	ldr	r2, [pc, #72]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002df4:	f006 feaa 	bl	8009b4c <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002df8:	f006 fed8 	bl	8009bac <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e02:	4a09      	ldr	r2, [pc, #36]	@ (8002e28 <HAL_PCD_MspInit+0x108>)
 8002e04:	f023 0304 	bic.w	r3, r3, #4
 8002e08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e0c:	e003      	b.n	8002e16 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002e0e:	f006 fe9d 	bl	8009b4c <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002e12:	f006 fecb 	bl	8009bac <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f000 fbc0 	bl	800359c <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002e1c:	bf00      	nop
 8002e1e:	37f8      	adds	r7, #248	@ 0xf8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	42040000 	.word	0x42040000
 8002e28:	46020c00 	.word	0x46020c00

08002e2c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b0a4      	sub	sp, #144	@ 0x90
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4abb      	ldr	r2, [pc, #748]	@ (8003128 <HAL_SAI_MspInit+0x2fc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	f040 80ca 	bne.w	8002fd4 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002e40:	4bba      	ldr	r3, [pc, #744]	@ (800312c <HAL_SAI_MspInit+0x300>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10e      	bne.n	8002e66 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002e48:	4bb9      	ldr	r3, [pc, #740]	@ (8003130 <HAL_SAI_MspInit+0x304>)
 8002e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e4e:	4ab8      	ldr	r2, [pc, #736]	@ (8003130 <HAL_SAI_MspInit+0x304>)
 8002e50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e54:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002e58:	4bb5      	ldr	r3, [pc, #724]	@ (8003130 <HAL_SAI_MspInit+0x304>)
 8002e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002e66:	4bb1      	ldr	r3, [pc, #708]	@ (800312c <HAL_SAI_MspInit+0x300>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	4aaf      	ldr	r2, [pc, #700]	@ (800312c <HAL_SAI_MspInit+0x300>)
 8002e6e:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e70:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002e74:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002e88:	230d      	movs	r3, #13
 8002e8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002e92:	4619      	mov	r1, r3
 8002e94:	48a7      	ldr	r0, [pc, #668]	@ (8003134 <HAL_SAI_MspInit+0x308>)
 8002e96:	f004 ff5b 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eac:	2303      	movs	r3, #3
 8002eae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002eb2:	230d      	movs	r3, #13
 8002eb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	489d      	ldr	r0, [pc, #628]	@ (8003134 <HAL_SAI_MspInit+0x308>)
 8002ec0:	f004 ff46 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ec4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ec8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002edc:	230d      	movs	r3, #13
 8002ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ee2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4893      	ldr	r0, [pc, #588]	@ (8003138 <HAL_SAI_MspInit+0x30c>)
 8002eea:	f004 ff31 	bl	8007d50 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002eee:	2321      	movs	r3, #33	@ 0x21
 8002ef0:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002ef2:	2326      	movs	r3, #38	@ 0x26
 8002ef4:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002efe:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002f00:	2308      	movs	r3, #8
 8002f02:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002f26:	2300      	movs	r3, #0
 8002f28:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	4981      	ldr	r1, [pc, #516]	@ (800313c <HAL_SAI_MspInit+0x310>)
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f004 f81d 	bl	8006f78 <HAL_DMAEx_List_BuildNode>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002f44:	f7ff f882 	bl	800204c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002f48:	4a7c      	ldr	r2, [pc, #496]	@ (800313c <HAL_SAI_MspInit+0x310>)
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	487c      	ldr	r0, [pc, #496]	@ (8003140 <HAL_SAI_MspInit+0x314>)
 8002f4e:	f004 f83f 	bl	8006fd0 <HAL_DMAEx_List_InsertNode>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8002f58:	f7ff f878 	bl	800204c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8002f5c:	4878      	ldr	r0, [pc, #480]	@ (8003140 <HAL_SAI_MspInit+0x314>)
 8002f5e:	f004 f900 	bl	8007162 <HAL_DMAEx_List_SetCircularMode>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 8002f68:	f7ff f870 	bl	800204c <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8002f6c:	4b75      	ldr	r3, [pc, #468]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002f6e:	4a76      	ldr	r2, [pc, #472]	@ (8003148 <HAL_SAI_MspInit+0x31c>)
 8002f70:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002f72:	4b74      	ldr	r3, [pc, #464]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002f74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002f7a:	4b72      	ldr	r3, [pc, #456]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002f80:	4b70      	ldr	r3, [pc, #448]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002f86:	4b6f      	ldr	r3, [pc, #444]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002f8c:	4b6d      	ldr	r3, [pc, #436]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002f8e:	2281      	movs	r2, #129	@ 0x81
 8002f90:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002f92:	486c      	ldr	r0, [pc, #432]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002f94:	f003 fe30 	bl	8006bf8 <HAL_DMAEx_List_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 8002f9e:	f7ff f855 	bl	800204c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8002fa2:	4967      	ldr	r1, [pc, #412]	@ (8003140 <HAL_SAI_MspInit+0x314>)
 8002fa4:	4867      	ldr	r0, [pc, #412]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002fa6:	f004 f93d 	bl	8007224 <HAL_DMAEx_List_LinkQ>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8002fb0:	f7ff f84c 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a63      	ldr	r2, [pc, #396]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002fbc:	4a61      	ldr	r2, [pc, #388]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002fc2:	2110      	movs	r1, #16
 8002fc4:	485f      	ldr	r0, [pc, #380]	@ (8003144 <HAL_SAI_MspInit+0x318>)
 8002fc6:	f003 fa25 	bl	8006414 <HAL_DMA_ConfigChannelAttributes>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8002fd0:	f7ff f83c 	bl	800204c <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5c      	ldr	r2, [pc, #368]	@ (800314c <HAL_SAI_MspInit+0x320>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	f040 80eb 	bne.w	80031b6 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002fe0:	4b52      	ldr	r3, [pc, #328]	@ (800312c <HAL_SAI_MspInit+0x300>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10e      	bne.n	8003006 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002fe8:	4b51      	ldr	r3, [pc, #324]	@ (8003130 <HAL_SAI_MspInit+0x304>)
 8002fea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fee:	4a50      	ldr	r2, [pc, #320]	@ (8003130 <HAL_SAI_MspInit+0x304>)
 8002ff0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ff4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8003130 <HAL_SAI_MspInit+0x304>)
 8002ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8003006:	4b49      	ldr	r3, [pc, #292]	@ (800312c <HAL_SAI_MspInit+0x300>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a47      	ldr	r2, [pc, #284]	@ (800312c <HAL_SAI_MspInit+0x300>)
 800300e:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003010:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003014:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003028:	230d      	movs	r3, #13
 800302a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003032:	4619      	mov	r1, r3
 8003034:	4846      	ldr	r0, [pc, #280]	@ (8003150 <HAL_SAI_MspInit+0x324>)
 8003036:	f004 fe8b 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800303a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800303e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304c:	2303      	movs	r3, #3
 800304e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003052:	230d      	movs	r3, #13
 8003054:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003058:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800305c:	4619      	mov	r1, r3
 800305e:	483d      	ldr	r0, [pc, #244]	@ (8003154 <HAL_SAI_MspInit+0x328>)
 8003060:	f004 fe76 	bl	8007d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003068:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800307c:	230d      	movs	r3, #13
 800307e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003082:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003086:	4619      	mov	r1, r3
 8003088:	4832      	ldr	r0, [pc, #200]	@ (8003154 <HAL_SAI_MspInit+0x328>)
 800308a:	f004 fe61 	bl	8007d50 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800308e:	2321      	movs	r3, #33	@ 0x21
 8003090:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8003092:	2327      	movs	r3, #39	@ 0x27
 8003094:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80030a2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80030a8:	2302      	movs	r3, #2
 80030aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80030ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80030be:	2300      	movs	r3, #0
 80030c0:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80030c6:	2300      	movs	r3, #0
 80030c8:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80030ce:	2300      	movs	r3, #0
 80030d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80030d2:	f107 0310 	add.w	r3, r7, #16
 80030d6:	4920      	ldr	r1, [pc, #128]	@ (8003158 <HAL_SAI_MspInit+0x32c>)
 80030d8:	4618      	mov	r0, r3
 80030da:	f003 ff4d 	bl	8006f78 <HAL_DMAEx_List_BuildNode>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 80030e4:	f7fe ffb2 	bl	800204c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80030e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003158 <HAL_SAI_MspInit+0x32c>)
 80030ea:	2100      	movs	r1, #0
 80030ec:	481b      	ldr	r0, [pc, #108]	@ (800315c <HAL_SAI_MspInit+0x330>)
 80030ee:	f003 ff6f 	bl	8006fd0 <HAL_DMAEx_List_InsertNode>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 80030f8:	f7fe ffa8 	bl	800204c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80030fc:	4817      	ldr	r0, [pc, #92]	@ (800315c <HAL_SAI_MspInit+0x330>)
 80030fe:	f004 f830 	bl	8007162 <HAL_DMAEx_List_SetCircularMode>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8003108:	f7fe ffa0 	bl	800204c <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800310c:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <HAL_SAI_MspInit+0x334>)
 800310e:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <HAL_SAI_MspInit+0x338>)
 8003110:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8003112:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <HAL_SAI_MspInit+0x334>)
 8003114:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003118:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800311a:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <HAL_SAI_MspInit+0x334>)
 800311c:	2200      	movs	r2, #0
 800311e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8003120:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <HAL_SAI_MspInit+0x334>)
 8003122:	2200      	movs	r2, #0
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40
 8003126:	e01f      	b.n	8003168 <HAL_SAI_MspInit+0x33c>
 8003128:	40015804 	.word	0x40015804
 800312c:	2000e668 	.word	0x2000e668
 8003130:	46020c00 	.word	0x46020c00
 8003134:	42020400 	.word	0x42020400
 8003138:	42021800 	.word	0x42021800
 800313c:	200005e4 	.word	0x200005e4
 8003140:	20000608 	.word	0x20000608
 8003144:	20000620 	.word	0x20000620
 8003148:	400201d0 	.word	0x400201d0
 800314c:	40015824 	.word	0x40015824
 8003150:	42020000 	.word	0x42020000
 8003154:	42020800 	.word	0x42020800
 8003158:	20000698 	.word	0x20000698
 800315c:	200006bc 	.word	0x200006bc
 8003160:	200006d4 	.word	0x200006d4
 8003164:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003168:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_SAI_MspInit+0x394>)
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800316e:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <HAL_SAI_MspInit+0x394>)
 8003170:	2281      	movs	r2, #129	@ 0x81
 8003172:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8003174:	4812      	ldr	r0, [pc, #72]	@ (80031c0 <HAL_SAI_MspInit+0x394>)
 8003176:	f003 fd3f 	bl	8006bf8 <HAL_DMAEx_List_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 8003180:	f7fe ff64 	bl	800204c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8003184:	490f      	ldr	r1, [pc, #60]	@ (80031c4 <HAL_SAI_MspInit+0x398>)
 8003186:	480e      	ldr	r0, [pc, #56]	@ (80031c0 <HAL_SAI_MspInit+0x394>)
 8003188:	f004 f84c 	bl	8007224 <HAL_DMAEx_List_LinkQ>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 8003192:	f7fe ff5b 	bl	800204c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a09      	ldr	r2, [pc, #36]	@ (80031c0 <HAL_SAI_MspInit+0x394>)
 800319a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800319e:	4a08      	ldr	r2, [pc, #32]	@ (80031c0 <HAL_SAI_MspInit+0x394>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80031a4:	2110      	movs	r1, #16
 80031a6:	4806      	ldr	r0, [pc, #24]	@ (80031c0 <HAL_SAI_MspInit+0x394>)
 80031a8:	f003 f934 	bl	8006414 <HAL_DMA_ConfigChannelAttributes>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 80031b2:	f7fe ff4b 	bl	800204c <Error_Handler>
    }

    }
}
 80031b6:	bf00      	nop
 80031b8:	3790      	adds	r7, #144	@ 0x90
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200006d4 	.word	0x200006d4
 80031c4:	200006bc 	.word	0x200006bc

080031c8 <NMI_Handler>:
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <NMI_Handler+0x4>

080031d0 <HardFault_Handler>:
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <HardFault_Handler+0x4>

080031d8 <MemManage_Handler>:
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <MemManage_Handler+0x4>

080031e0 <BusFault_Handler>:
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <BusFault_Handler+0x4>

080031e8 <UsageFault_Handler>:
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <UsageFault_Handler+0x4>

080031f0 <SVC_Handler>:
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <DebugMon_Handler>:
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <PendSV_Handler>:
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <SysTick_Handler>:
 800321a:	b580      	push	{r7, lr}
 800321c:	af00      	add	r7, sp, #0
 800321e:	f000 f979 	bl	8003514 <HAL_IncTick>
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}

08003226 <EXTI1_IRQHandler>:
 8003226:	b580      	push	{r7, lr}
 8003228:	af00      	add	r7, sp, #0
 800322a:	2002      	movs	r0, #2
 800322c:	f004 ff80 	bl	8008130 <HAL_GPIO_EXTI_IRQHandler>
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}

08003234 <EXTI4_IRQHandler>:
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
 8003238:	2010      	movs	r0, #16
 800323a:	f004 ff79 	bl	8008130 <HAL_GPIO_EXTI_IRQHandler>
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}

08003242 <EXTI5_IRQHandler>:
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
 8003246:	2020      	movs	r0, #32
 8003248:	f004 ff72 	bl	8008130 <HAL_GPIO_EXTI_IRQHandler>
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <GPDMA1_Channel0_IRQHandler>:
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
 8003254:	4802      	ldr	r0, [pc, #8]	@ (8003260 <GPDMA1_Channel0_IRQHandler+0x10>)
 8003256:	f002 ff6e 	bl	8006136 <HAL_DMA_IRQHandler>
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	2000017c 	.word	0x2000017c

08003264 <GPDMA1_Channel1_IRQHandler>:
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
 8003268:	4802      	ldr	r0, [pc, #8]	@ (8003274 <GPDMA1_Channel1_IRQHandler+0x10>)
 800326a:	f002 ff64 	bl	8006136 <HAL_DMA_IRQHandler>
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200006d4 	.word	0x200006d4

08003278 <GPDMA1_Channel2_IRQHandler>:
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
 800327c:	4802      	ldr	r0, [pc, #8]	@ (8003288 <GPDMA1_Channel2_IRQHandler+0x10>)
 800327e:	f002 ff5a 	bl	8006136 <HAL_DMA_IRQHandler>
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200001f4 	.word	0x200001f4

0800328c <GPDMA1_Channel3_IRQHandler>:
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
 8003290:	4802      	ldr	r0, [pc, #8]	@ (800329c <GPDMA1_Channel3_IRQHandler+0x10>)
 8003292:	f002 ff50 	bl	8006136 <HAL_DMA_IRQHandler>
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000620 	.word	0x20000620

080032a0 <ADC1_2_IRQHandler>:
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4802      	ldr	r0, [pc, #8]	@ (80032b0 <ADC1_2_IRQHandler+0x10>)
 80032a6:	f001 f925 	bl	80044f4 <HAL_ADC_IRQHandler>
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000028 	.word	0x20000028

080032b4 <I2C2_EV_IRQHandler>:
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4802      	ldr	r0, [pc, #8]	@ (80032c4 <I2C2_EV_IRQHandler+0x10>)
 80032ba:	f005 f810 	bl	80082de <HAL_I2C_EV_IRQHandler>
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000388 	.word	0x20000388

080032c8 <I2C2_ER_IRQHandler>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4802      	ldr	r0, [pc, #8]	@ (80032d8 <I2C2_ER_IRQHandler+0x10>)
 80032ce:	f005 f820 	bl	8008312 <HAL_I2C_ER_IRQHandler>
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000388 	.word	0x20000388

080032dc <USART1_IRQHandler>:
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4802      	ldr	r0, [pc, #8]	@ (80032ec <USART1_IRQHandler+0x10>)
 80032e2:	f00c ffaf 	bl	8010244 <HAL_UART_IRQHandler>
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200007e4 	.word	0x200007e4

080032f0 <LTDC_IRQHandler>:
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4802      	ldr	r0, [pc, #8]	@ (8003300 <LTDC_IRQHandler+0x10>)
 80032f6:	f005 ff99 	bl	800922c <HAL_LTDC_IRQHandler>
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200003dc 	.word	0x200003dc

08003304 <SystemInit>:
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
 8003308:	4b18      	ldr	r3, [pc, #96]	@ (800336c <SystemInit+0x68>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330e:	4a17      	ldr	r2, [pc, #92]	@ (800336c <SystemInit+0x68>)
 8003310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8003318:	4b15      	ldr	r3, [pc, #84]	@ (8003370 <SystemInit+0x6c>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <SystemInit+0x6c>)
 8003320:	2200      	movs	r2, #0
 8003322:	61da      	str	r2, [r3, #28]
 8003324:	4b12      	ldr	r3, [pc, #72]	@ (8003370 <SystemInit+0x6c>)
 8003326:	2200      	movs	r2, #0
 8003328:	621a      	str	r2, [r3, #32]
 800332a:	4b11      	ldr	r3, [pc, #68]	@ (8003370 <SystemInit+0x6c>)
 800332c:	2200      	movs	r2, #0
 800332e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003330:	4b0f      	ldr	r3, [pc, #60]	@ (8003370 <SystemInit+0x6c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0e      	ldr	r2, [pc, #56]	@ (8003370 <SystemInit+0x6c>)
 8003336:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800333a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b0b      	ldr	r3, [pc, #44]	@ (8003370 <SystemInit+0x6c>)
 8003342:	2200      	movs	r2, #0
 8003344:	629a      	str	r2, [r3, #40]	@ 0x28
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <SystemInit+0x6c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a09      	ldr	r2, [pc, #36]	@ (8003370 <SystemInit+0x6c>)
 800334c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <SystemInit+0x6c>)
 8003354:	2200      	movs	r2, #0
 8003356:	651a      	str	r2, [r3, #80]	@ 0x50
 8003358:	4b04      	ldr	r3, [pc, #16]	@ (800336c <SystemInit+0x68>)
 800335a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000ed00 	.word	0xe000ed00
 8003370:	46020c00 	.word	0x46020c00

08003374 <Reset_Handler>:
 8003374:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033ac <LoopForever+0x2>
 8003378:	f7ff ffc4 	bl	8003304 <SystemInit>
 800337c:	2100      	movs	r1, #0
 800337e:	e003      	b.n	8003388 <LoopCopyDataInit>

08003380 <CopyDataInit>:
 8003380:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <LoopForever+0x6>)
 8003382:	585b      	ldr	r3, [r3, r1]
 8003384:	5043      	str	r3, [r0, r1]
 8003386:	3104      	adds	r1, #4

08003388 <LoopCopyDataInit>:
 8003388:	480a      	ldr	r0, [pc, #40]	@ (80033b4 <LoopForever+0xa>)
 800338a:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <LoopForever+0xe>)
 800338c:	1842      	adds	r2, r0, r1
 800338e:	429a      	cmp	r2, r3
 8003390:	d3f6      	bcc.n	8003380 <CopyDataInit>
 8003392:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <LoopForever+0x12>)
 8003394:	e002      	b.n	800339c <LoopFillZerobss>

08003396 <FillZerobss>:
 8003396:	2300      	movs	r3, #0
 8003398:	f842 3b04 	str.w	r3, [r2], #4

0800339c <LoopFillZerobss>:
 800339c:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <LoopForever+0x16>)
 800339e:	429a      	cmp	r2, r3
 80033a0:	d3f9      	bcc.n	8003396 <FillZerobss>
 80033a2:	f00e fc11 	bl	8011bc8 <__libc_init_array>
 80033a6:	f7fd fd31 	bl	8000e0c <main>

080033aa <LoopForever>:
 80033aa:	e7fe      	b.n	80033aa <LoopForever>
 80033ac:	202f0000 	.word	0x202f0000
 80033b0:	08011d38 	.word	0x08011d38
 80033b4:	20000000 	.word	0x20000000
 80033b8:	2000000c 	.word	0x2000000c
 80033bc:	2000000c 	.word	0x2000000c
 80033c0:	2000e670 	.word	0x2000e670

080033c4 <ADC4_IRQHandler>:
 80033c4:	e7fe      	b.n	80033c4 <ADC4_IRQHandler>
	...

080033c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033cc:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <HAL_Init+0x50>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a11      	ldr	r2, [pc, #68]	@ (8003418 <HAL_Init+0x50>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d8:	2003      	movs	r0, #3
 80033da:	f002 fb94 	bl	8005b06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80033de:	f007 fcd1 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <HAL_Init+0x54>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	490c      	ldr	r1, [pc, #48]	@ (8003420 <HAL_Init+0x58>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
 80033f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003424 <HAL_Init+0x5c>)
 80033f6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80033f8:	2004      	movs	r0, #4
 80033fa:	f002 fbd9 	bl	8005bb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033fe:	200f      	movs	r0, #15
 8003400:	f000 f812 	bl	8003428 <HAL_InitTick>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e002      	b.n	8003414 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800340e:	f7fe fe23 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40022000 	.word	0x40022000
 800341c:	46020c00 	.word	0x46020c00
 8003420:	08011c28 	.word	0x08011c28
 8003424:	20000000 	.word	0x20000000

08003428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003434:	4b33      	ldr	r3, [pc, #204]	@ (8003504 <HAL_InitTick+0xdc>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e05c      	b.n	80034fa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003440:	4b31      	ldr	r3, [pc, #196]	@ (8003508 <HAL_InitTick+0xe0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b04      	cmp	r3, #4
 800344a:	d10c      	bne.n	8003466 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800344c:	4b2f      	ldr	r3, [pc, #188]	@ (800350c <HAL_InitTick+0xe4>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b2c      	ldr	r3, [pc, #176]	@ (8003504 <HAL_InitTick+0xdc>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	4619      	mov	r1, r3
 8003456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800345a:	fbb3 f3f1 	udiv	r3, r3, r1
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e037      	b.n	80034d6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003466:	f002 fbfb 	bl	8005c60 <HAL_SYSTICK_GetCLKSourceConfig>
 800346a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d023      	beq.n	80034ba <HAL_InitTick+0x92>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d82d      	bhi.n	80034d4 <HAL_InitTick+0xac>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_InitTick+0x5e>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d00d      	beq.n	80034a0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003484:	e026      	b.n	80034d4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003486:	4b21      	ldr	r3, [pc, #132]	@ (800350c <HAL_InitTick+0xe4>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b1e      	ldr	r3, [pc, #120]	@ (8003504 <HAL_InitTick+0xdc>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003494:	fbb3 f3f1 	udiv	r3, r3, r1
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	60fb      	str	r3, [r7, #12]
        break;
 800349e:	e01a      	b.n	80034d6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80034a0:	4b18      	ldr	r3, [pc, #96]	@ (8003504 <HAL_InitTick+0xdc>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	60fb      	str	r3, [r7, #12]
        break;
 80034b8:	e00d      	b.n	80034d6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80034ba:	4b12      	ldr	r3, [pc, #72]	@ (8003504 <HAL_InitTick+0xdc>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80034c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	60fb      	str	r3, [r7, #12]
        break;
 80034d2:	e000      	b.n	80034d6 <HAL_InitTick+0xae>
        break;
 80034d4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f002 fb48 	bl	8005b6c <HAL_SYSTICK_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e009      	b.n	80034fa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e6:	2200      	movs	r2, #0
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	f002 fb15 	bl	8005b1c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80034f2:	4a07      	ldr	r2, [pc, #28]	@ (8003510 <HAL_InitTick+0xe8>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000008 	.word	0x20000008
 8003508:	e000e010 	.word	0xe000e010
 800350c:	20000000 	.word	0x20000000
 8003510:	20000004 	.word	0x20000004

08003514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_IncTick+0x20>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_IncTick+0x24>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4413      	add	r3, r2
 8003524:	4a04      	ldr	r2, [pc, #16]	@ (8003538 <HAL_IncTick+0x24>)
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000008 	.word	0x20000008
 8003538:	2000e66c 	.word	0x2000e66c

0800353c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return uwTick;
 8003540:	4b03      	ldr	r3, [pc, #12]	@ (8003550 <HAL_GetTick+0x14>)
 8003542:	681b      	ldr	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	2000e66c 	.word	0x2000e66c

08003554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff ffee 	bl	800353c <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d005      	beq.n	800357a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_Delay+0x44>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800357a:	bf00      	nop
 800357c:	f7ff ffde 	bl	800353c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	429a      	cmp	r2, r3
 800358a:	d8f7      	bhi.n	800357c <HAL_Delay+0x28>
  {
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000008 	.word	0x20000008

0800359c <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80035a4:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80035a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a8:	f023 0201 	bic.w	r2, r3, #1
 80035ac:	4904      	ldr	r1, [pc, #16]	@ (80035c0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	46000400 	.word	0x46000400

080035c4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80035cc:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80035ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d0:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80035d4:	4904      	ldr	r1, [pc, #16]	@ (80035e8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4313      	orrs	r3, r2
 80035da:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	46000400 	.word	0x46000400

080035ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	609a      	str	r2, [r3, #8]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a0a      	ldr	r2, [pc, #40]	@ (8003690 <LL_ADC_SetResolution+0x3c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d104      	bne.n	8003674 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3b01      	subs	r3, #1
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f023 020c 	bic.w	r2, r3, #12
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	60da      	str	r2, [r3, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	46021000 	.word	0x46021000

08003694 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3360      	adds	r3, #96	@ 0x60
 80036a6:	461a      	mov	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	430b      	orrs	r3, r1
 80036c4:	431a      	orrs	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3360      	adds	r3, #96	@ 0x60
 80036e4:	461a      	mov	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003702:	b480      	push	{r7}
 8003704:	b087      	sub	sp, #28
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3360      	adds	r3, #96	@ 0x60
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	431a      	orrs	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	601a      	str	r2, [r3, #0]
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3360      	adds	r3, #96	@ 0x60
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	431a      	orrs	r2, r3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800376e:	b480      	push	{r7}
 8003770:	b087      	sub	sp, #28
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3360      	adds	r3, #96	@ 0x60
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	431a      	orrs	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	601a      	str	r2, [r3, #0]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80037b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	d002      	beq.n	80037d6 <LL_ADC_SetGainCompensation+0x32>
 80037d0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80037d4:	e000      	b.n	80037d8 <LL_ADC_SetGainCompensation+0x34>
 80037d6:	2200      	movs	r2, #0
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2107      	movs	r1, #7
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	401a      	ands	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	431a      	orrs	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a2b      	ldr	r2, [pc, #172]	@ (800390c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d020      	beq.n	80038a6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3330      	adds	r3, #48	@ 0x30
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	4413      	add	r3, r2
 8003876:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	211f      	movs	r1, #31
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	401a      	ands	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0e9b      	lsrs	r3, r3, #26
 8003890:	f003 011f 	and.w	r1, r3, #31
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	431a      	orrs	r2, r3
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80038a4:	e02b      	b.n	80038fe <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	210f      	movs	r1, #15
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	401a      	ands	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <LL_ADC_REG_SetSequencerRanks+0x7e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	0e9b      	lsrs	r3, r3, #26
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	e010      	b.n	80038f0 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	613b      	str	r3, [r7, #16]
  return result;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80038e4:	2320      	movs	r3, #32
 80038e6:	e003      	b.n	80038f0 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	f001 011f 	and.w	r1, r1, #31
 80038f6:	408b      	lsls	r3, r1
 80038f8:	431a      	orrs	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038fe:	bf00      	nop
 8003900:	3724      	adds	r7, #36	@ 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	46021000 	.word	0x46021000

08003910 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	0e9b      	lsrs	r3, r3, #26
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	2201      	movs	r2, #1
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	e015      	b.n	8003960 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	60fb      	str	r3, [r7, #12]
  return result;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800394a:	2320      	movs	r3, #32
 800394c:	e003      	b.n	8003956 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fab3 f383 	clz	r3, r3
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2201      	movs	r2, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2101      	movs	r1, #1
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	401a      	ands	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0303 	and.w	r3, r3, #3
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b08b      	sub	sp, #44	@ 0x2c
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a2d      	ldr	r2, [pc, #180]	@ (8003aac <LL_ADC_SetChannelSamplingTime+0xc4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d042      	beq.n	8003a82 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <LL_ADC_SetChannelSamplingTime+0x28>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	0e9b      	lsrs	r3, r3, #26
 8003a0a:	f003 021f 	and.w	r2, r3, #31
 8003a0e:	e011      	b.n	8003a34 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	617b      	str	r3, [r7, #20]
  return result;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003a26:	2320      	movs	r3, #32
 8003a28:	e003      	b.n	8003a32 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	0e5b      	lsrs	r3, r3, #25
 8003a38:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	1ad2      	subs	r2, r2, r3
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3314      	adds	r3, #20
 8003a52:	461a      	mov	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	0e5b      	lsrs	r3, r3, #25
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	4413      	add	r3, r2
 8003a60:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	2107      	movs	r1, #7
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	401a      	ands	r2, r3
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003a80:	e00e      	b.n	8003aa0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	0219      	lsls	r1, r3, #8
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	400b      	ands	r3, r1
 8003a96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	615a      	str	r2, [r3, #20]
}
 8003aa0:	bf00      	nop
 8003aa2:	372c      	adds	r7, #44	@ 0x2c
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	46021000 	.word	0x46021000

08003ab0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	401a      	ands	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f003 0318 	and.w	r3, r3, #24
 8003ad2:	4908      	ldr	r1, [pc, #32]	@ (8003af4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ad4:	40d9      	lsrs	r1, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	400b      	ands	r3, r1
 8003ada:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	000fffff 	.word	0x000fffff

08003af8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 031f 	and.w	r3, r3, #31
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6093      	str	r3, [r2, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b68:	d101      	bne.n	8003b6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	609a      	str	r2, [r3, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bb8:	d101      	bne.n	8003bbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <LL_ADC_IsEnabled+0x18>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <LL_ADC_IsEnabled+0x1a>
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c2a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c2e:	f043 0204 	orr.w	r2, r3, #4
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d101      	bne.n	8003c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d101      	bne.n	8003c80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b08b      	sub	sp, #44	@ 0x2c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e2ce      	b.n	800424e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a95      	ldr	r2, [pc, #596]	@ (8003f14 <HAL_ADC_Init+0x284>)
 8003cbe:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fe f9df 	bl	800208c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff37 	bl	8003b54 <LL_ADC_IsDeepPowerDownEnabled>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff1d 	bl	8003b30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff ff52 	bl	8003ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d115      	bne.n	8003d32 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff36 	bl	8003b7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d10:	4b81      	ldr	r3, [pc, #516]	@ (8003f18 <HAL_ADC_Init+0x288>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	4a81      	ldr	r2, [pc, #516]	@ (8003f1c <HAL_ADC_Init+0x28c>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d24:	e002      	b.n	8003d2c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f9      	bne.n	8003d26 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff34 	bl	8003ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10e      	bne.n	8003d60 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff6c 	bl	8003c42 <LL_ADC_REG_IsConversionOngoing>
 8003d6a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f040 825f 	bne.w	8004238 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 825b 	bne.w	8004238 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d86:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d8a:	f043 0202 	orr.w	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ff2c 	bl	8003bf4 <LL_ADC_IsEnabled>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d14f      	bne.n	8003e42 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f14 <HAL_ADC_Init+0x284>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d037      	beq.n	8003e1c <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5b      	ldr	r2, [pc, #364]	@ (8003f20 <HAL_ADC_Init+0x290>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_ADC_Init+0x130>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a5a      	ldr	r2, [pc, #360]	@ (8003f24 <HAL_ADC_Init+0x294>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d10e      	bne.n	8003dde <HAL_ADC_Init+0x14e>
 8003dc0:	4857      	ldr	r0, [pc, #348]	@ (8003f20 <HAL_ADC_Init+0x290>)
 8003dc2:	f7ff ff17 	bl	8003bf4 <LL_ADC_IsEnabled>
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4856      	ldr	r0, [pc, #344]	@ (8003f24 <HAL_ADC_Init+0x294>)
 8003dca:	f7ff ff13 	bl	8003bf4 <LL_ADC_IsEnabled>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4323      	orrs	r3, r4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e008      	b.n	8003df0 <HAL_ADC_Init+0x160>
 8003dde:	484d      	ldr	r0, [pc, #308]	@ (8003f14 <HAL_ADC_Init+0x284>)
 8003de0:	f7ff ff08 	bl	8003bf4 <LL_ADC_IsEnabled>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d026      	beq.n	8003e42 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a49      	ldr	r2, [pc, #292]	@ (8003f20 <HAL_ADC_Init+0x290>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_ADC_Init+0x178>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a48      	ldr	r2, [pc, #288]	@ (8003f24 <HAL_ADC_Init+0x294>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <HAL_ADC_Init+0x17c>
 8003e08:	4a47      	ldr	r2, [pc, #284]	@ (8003f28 <HAL_ADC_Init+0x298>)
 8003e0a:	e000      	b.n	8003e0e <HAL_ADC_Init+0x17e>
 8003e0c:	4a47      	ldr	r2, [pc, #284]	@ (8003f2c <HAL_ADC_Init+0x29c>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4619      	mov	r1, r3
 8003e14:	4610      	mov	r0, r2
 8003e16:	f7ff fbe9 	bl	80035ec <LL_ADC_SetCommonClock>
 8003e1a:	e012      	b.n	8003e42 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f7ff fc14 	bl	8003654 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f2c <HAL_ADC_Init+0x29c>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003e3c:	493b      	ldr	r1, [pc, #236]	@ (8003f2c <HAL_ADC_Init+0x29c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a33      	ldr	r2, [pc, #204]	@ (8003f14 <HAL_ADC_Init+0x284>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d010      	beq.n	8003e6e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e52:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e58:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003e5e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003e66:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	623b      	str	r3, [r7, #32]
 8003e6c:	e035      	b.n	8003eda <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7f1b      	ldrb	r3, [r3, #28]
 8003e72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e7a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e7c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_ADC_Init+0x1fc>
 8003e86:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e8a:	e000      	b.n	8003e8e <HAL_ADC_Init+0x1fe>
 8003e8c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e8e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003e94:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da04      	bge.n	8003ea8 <HAL_ADC_Init+0x218>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ea6:	e001      	b.n	8003eac <HAL_ADC_Init+0x21c>
 8003ea8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003eac:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	491b      	ldr	r1, [pc, #108]	@ (8003f20 <HAL_ADC_Init+0x290>)
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	d004      	beq.n	8003ec2 <HAL_ADC_Init+0x232>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4919      	ldr	r1, [pc, #100]	@ (8003f24 <HAL_ADC_Init+0x294>)
 8003ebe:	428b      	cmp	r3, r1
 8003ec0:	d103      	bne.n	8003eca <HAL_ADC_Init+0x23a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec8:	e003      	b.n	8003ed2 <HAL_ADC_Init+0x242>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ed0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003ed2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d131      	bne.n	8003f48 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f14 <HAL_ADC_Init+0x284>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	045b      	lsls	r3, r3, #17
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	623b      	str	r3, [r7, #32]
 8003efc:	e024      	b.n	8003f48 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d113      	bne.n	8003f30 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0e:	623b      	str	r3, [r7, #32]
 8003f10:	e01a      	b.n	8003f48 <HAL_ADC_Init+0x2b8>
 8003f12:	bf00      	nop
 8003f14:	46021000 	.word	0x46021000
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	053e2d63 	.word	0x053e2d63
 8003f20:	42028000 	.word	0x42028000
 8003f24:	42028100 	.word	0x42028100
 8003f28:	42028300 	.word	0x42028300
 8003f2c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f40:	f043 0201 	orr.w	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a75      	ldr	r2, [pc, #468]	@ (8004124 <HAL_ADC_Init+0x494>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d018      	beq.n	8003f84 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f66:	4313      	orrs	r3, r2
 8003f68:	6a3a      	ldr	r2, [r7, #32]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	4b6c      	ldr	r3, [pc, #432]	@ (8004128 <HAL_ADC_Init+0x498>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	6a39      	ldr	r1, [r7, #32]
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	60d3      	str	r3, [r2, #12]
 8003f82:	e031      	b.n	8003fe8 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f90:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	6a3a      	ldr	r2, [r7, #32]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	4b61      	ldr	r3, [pc, #388]	@ (800412c <HAL_ADC_Init+0x49c>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	6a39      	ldr	r1, [r7, #32]
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a4d      	ldr	r2, [pc, #308]	@ (8004124 <HAL_ADC_Init+0x494>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	f000 80a4 	beq.w	800413c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fe22 	bl	8003c42 <LL_ADC_REG_IsConversionOngoing>
 8003ffe:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fe2f 	bl	8003c68 <LL_ADC_INJ_IsConversionOngoing>
 800400a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d166      	bne.n	80040e0 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d163      	bne.n	80040e0 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	7f1b      	ldrb	r3, [r3, #28]
 800401c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4943      	ldr	r1, [pc, #268]	@ (8004130 <HAL_ADC_Init+0x4a0>)
 8004024:	428b      	cmp	r3, r1
 8004026:	d004      	beq.n	8004032 <HAL_ADC_Init+0x3a2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4941      	ldr	r1, [pc, #260]	@ (8004134 <HAL_ADC_Init+0x4a4>)
 800402e:	428b      	cmp	r3, r1
 8004030:	d102      	bne.n	8004038 <HAL_ADC_Init+0x3a8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	e002      	b.n	800403e <HAL_ADC_Init+0x3ae>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800403e:	4313      	orrs	r3, r2
 8004040:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800404c:	f023 0303 	bic.w	r3, r3, #3
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	6a39      	ldr	r1, [r7, #32]
 8004056:	430b      	orrs	r3, r1
 8004058:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7ff fb99 	bl	80037a4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004078:	2b01      	cmp	r3, #1
 800407a:	d11e      	bne.n	80040ba <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	4b2b      	ldr	r3, [pc, #172]	@ (8004138 <HAL_ADC_Init+0x4a8>)
 800408a:	4013      	ands	r3, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004090:	0411      	lsls	r1, r2, #16
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004096:	4311      	orrs	r1, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800409c:	4311      	orrs	r1, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80040a2:	4311      	orrs	r1, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80040a8:	0892      	lsrs	r2, r2, #2
 80040aa:	430a      	orrs	r2, r1
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	611a      	str	r2, [r3, #16]
 80040b8:	e007      	b.n	80040ca <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d10c      	bne.n	8004102 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	f023 010f 	bic.w	r1, r3, #15
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	1e5a      	subs	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004100:	e007      	b.n	8004112 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 020f 	bic.w	r2, r2, #15
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004116:	f023 0303 	bic.w	r3, r3, #3
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004122:	e092      	b.n	800424a <HAL_ADC_Init+0x5ba>
 8004124:	46021000 	.word	0x46021000
 8004128:	fff0c013 	.word	0xfff0c013
 800412c:	ffde800d 	.word	0xffde800d
 8004130:	42028000 	.word	0x42028000
 8004134:	42028100 	.word	0x42028100
 8004138:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004142:	2b01      	cmp	r3, #1
 8004144:	d111      	bne.n	800416a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800414e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8004154:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800415a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	4313      	orrs	r3, r2
 8004160:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	4b39      	ldr	r3, [pc, #228]	@ (8004258 <HAL_ADC_Init+0x5c8>)
 8004172:	4013      	ands	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	69f9      	ldr	r1, [r7, #28]
 800417a:	430b      	orrs	r3, r1
 800417c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004186:	461a      	mov	r2, r3
 8004188:	2100      	movs	r1, #0
 800418a:	f7ff fb2e 	bl	80037ea <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004196:	461a      	mov	r2, r3
 8004198:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800419c:	f7ff fb25 	bl	80037ea <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d108      	bne.n	80041ba <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f062 020f 	orn	r2, r2, #15
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80041b8:	e018      	b.n	80041ec <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041c2:	d113      	bne.n	80041ec <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	f003 031c 	and.w	r3, r3, #28
 80041d6:	f06f 020f 	mvn.w	r2, #15
 80041da:	fa02 f103 	lsl.w	r1, r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <HAL_ADC_Init+0x5cc>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	6a3a      	ldr	r2, [r7, #32]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d10b      	bne.n	8004214 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	f043 0201 	orr.w	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004212:	e01a      	b.n	800424a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004218:	f023 0312 	bic.w	r3, r3, #18
 800421c:	f043 0210 	orr.w	r2, r3, #16
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004236:	e008      	b.n	800424a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800423c:	f043 0210 	orr.w	r2, r3, #16
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800424a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800424e:	4618      	mov	r0, r3
 8004250:	372c      	adds	r7, #44	@ 0x2c
 8004252:	46bd      	mov	sp, r7
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	bf00      	nop
 8004258:	f7fffc02 	.word	0xf7fffc02
 800425c:	833ffff3 	.word	0x833ffff3

08004260 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b0a2      	sub	sp, #136	@ 0x88
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a98      	ldr	r2, [pc, #608]	@ (80044d4 <HAL_ADC_Start_DMA+0x274>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <HAL_ADC_Start_DMA+0x20>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a97      	ldr	r2, [pc, #604]	@ (80044d8 <HAL_ADC_Start_DMA+0x278>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_ADC_Start_DMA+0x24>
 8004280:	4b96      	ldr	r3, [pc, #600]	@ (80044dc <HAL_ADC_Start_DMA+0x27c>)
 8004282:	e000      	b.n	8004286 <HAL_ADC_Start_DMA+0x26>
 8004284:	4b96      	ldr	r3, [pc, #600]	@ (80044e0 <HAL_ADC_Start_DMA+0x280>)
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fc36 	bl	8003af8 <LL_ADC_GetMultimode>
 800428c:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fcd5 	bl	8003c42 <LL_ADC_REG_IsConversionOngoing>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 8111 	bne.w	80044c2 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_ADC_Start_DMA+0x4e>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e10e      	b.n	80044cc <HAL_ADC_Start_DMA+0x26c>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d006      	beq.n	80042ca <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d003      	beq.n	80042ca <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042c4:	2b09      	cmp	r3, #9
 80042c6:	f040 80f4 	bne.w	80044b2 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f001 fa18 	bl	8005700 <ADC_Enable>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042d6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f040 80e4 	bne.w	80044a8 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7a      	ldr	r2, [pc, #488]	@ (80044e4 <HAL_ADC_Start_DMA+0x284>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d026      	beq.n	800434c <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a75      	ldr	r2, [pc, #468]	@ (80044d8 <HAL_ADC_Start_DMA+0x278>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d002      	beq.n	800430e <HAL_ADC_Start_DMA+0xae>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	e000      	b.n	8004310 <HAL_ADC_Start_DMA+0xb0>
 800430e:	4b71      	ldr	r3, [pc, #452]	@ (80044d4 <HAL_ADC_Start_DMA+0x274>)
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	4293      	cmp	r3, r2
 8004316:	d002      	beq.n	800431e <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004318:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d105      	bne.n	800432a <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004322:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800432e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d006      	beq.n	8004344 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800433a:	f023 0206 	bic.w	r2, r3, #6
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004342:	e006      	b.n	8004352 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	67da      	str	r2, [r3, #124]	@ 0x7c
 800434a:	e002      	b.n	8004352 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	4a64      	ldr	r2, [pc, #400]	@ (80044e8 <HAL_ADC_Start_DMA+0x288>)
 8004358:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435e:	4a63      	ldr	r2, [pc, #396]	@ (80044ec <HAL_ADC_Start_DMA+0x28c>)
 8004360:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	4a62      	ldr	r2, [pc, #392]	@ (80044f0 <HAL_ADC_Start_DMA+0x290>)
 8004368:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	221c      	movs	r2, #28
 8004370:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0210 	orr.w	r2, r2, #16
 8004388:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a55      	ldr	r2, [pc, #340]	@ (80044e4 <HAL_ADC_Start_DMA+0x284>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d107      	bne.n	80043a4 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d04f      	beq.n	8004452 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d046      	beq.n	800444a <HAL_ADC_Start_DMA+0x1ea>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d040      	beq.n	800444a <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	f107 0310 	add.w	r3, r7, #16
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f002 fde4 	bl	8006fa4 <HAL_DMAEx_List_GetNodeConfig>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e072      	b.n	80044cc <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d104      	bne.n	80043f6 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043f4:	e00a      	b.n	800440c <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80043f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d104      	bne.n	8004406 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004404:	e002      	b.n	800440c <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004418:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443c:	4618      	mov	r0, r3
 800443e:	f002 fd07 	bl	8006e50 <HAL_DMAEx_List_Start_IT>
 8004442:	4603      	mov	r3, r0
 8004444:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004448:	e028      	b.n	800449c <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004450:	e024      	b.n	800449c <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d104      	bne.n	8004466 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004464:	e00c      	b.n	8004480 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d104      	bne.n	800447a <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004478:	e002      	b.n	8004480 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3340      	adds	r3, #64	@ 0x40
 800448a:	4619      	mov	r1, r3
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004492:	f001 fd4b 	bl	8005f2c <HAL_DMA_Start_IT>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fbba 	bl	8003c1a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80044a6:	e00f      	b.n	80044c8 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 80044b0:	e00a      	b.n	80044c8 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80044c0:	e002      	b.n	80044c8 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80044c8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3788      	adds	r7, #136	@ 0x88
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	42028000 	.word	0x42028000
 80044d8:	42028100 	.word	0x42028100
 80044dc:	42028300 	.word	0x42028300
 80044e0:	46021300 	.word	0x46021300
 80044e4:	46021000 	.word	0x46021000
 80044e8:	08005835 	.word	0x08005835
 80044ec:	0800590d 	.word	0x0800590d
 80044f0:	08005929 	.word	0x08005929

080044f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	@ 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80044fc:	2300      	movs	r3, #0
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a77      	ldr	r2, [pc, #476]	@ (80046f4 <HAL_ADC_IRQHandler+0x200>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_ADC_IRQHandler+0x30>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a76      	ldr	r2, [pc, #472]	@ (80046f8 <HAL_ADC_IRQHandler+0x204>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <HAL_ADC_IRQHandler+0x34>
 8004524:	4b75      	ldr	r3, [pc, #468]	@ (80046fc <HAL_ADC_IRQHandler+0x208>)
 8004526:	e000      	b.n	800452a <HAL_ADC_IRQHandler+0x36>
 8004528:	4b75      	ldr	r3, [pc, #468]	@ (8004700 <HAL_ADC_IRQHandler+0x20c>)
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fae4 	bl	8003af8 <LL_ADC_GetMultimode>
 8004530:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d017      	beq.n	800456c <HAL_ADC_IRQHandler+0x78>
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d012      	beq.n	800456c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004556:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f001 fa1a 	bl	8005998 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2202      	movs	r2, #2
 800456a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <HAL_ADC_IRQHandler+0x8c>
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80d1 	beq.w	800472e <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80cb 	beq.w	800472e <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a53      	ldr	r2, [pc, #332]	@ (8004704 <HAL_ADC_IRQHandler+0x210>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d06c      	beq.n	8004694 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff f932 	bl	8003828 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80aa 	beq.w	8004720 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a49      	ldr	r2, [pc, #292]	@ (80046f8 <HAL_ADC_IRQHandler+0x204>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d002      	beq.n	80045dc <HAL_ADC_IRQHandler+0xe8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	e000      	b.n	80045de <HAL_ADC_IRQHandler+0xea>
 80045dc:	4b45      	ldr	r3, [pc, #276]	@ (80046f4 <HAL_ADC_IRQHandler+0x200>)
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d008      	beq.n	80045f8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d002      	beq.n	80045f8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b09      	cmp	r3, #9
 80045f6:	d104      	bne.n	8004602 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	e00c      	b.n	800461c <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3c      	ldr	r2, [pc, #240]	@ (80046f8 <HAL_ADC_IRQHandler+0x204>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d002      	beq.n	8004612 <HAL_ADC_IRQHandler+0x11e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	e000      	b.n	8004614 <HAL_ADC_IRQHandler+0x120>
 8004612:	4b38      	ldr	r3, [pc, #224]	@ (80046f4 <HAL_ADC_IRQHandler+0x200>)
 8004614:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d17c      	bne.n	8004720 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d175      	bne.n	8004720 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fb02 	bl	8003c42 <LL_ADC_REG_IsConversionOngoing>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11a      	bne.n	800467a <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 020c 	bic.w	r2, r2, #12
 8004652:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d159      	bne.n	8004720 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	679a      	str	r2, [r3, #120]	@ 0x78
 8004678:	e052      	b.n	8004720 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800467e:	f043 0210 	orr.w	r2, r3, #16
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004692:	e045      	b.n	8004720 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff f8c5 	bl	8003828 <LL_ADC_REG_IsTriggerSourceSWStart>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d03d      	beq.n	8004720 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d138      	bne.n	8004720 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d131      	bne.n	8004720 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fabe 	bl	8003c42 <LL_ADC_REG_IsConversionOngoing>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11d      	bne.n	8004708 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 020c 	bic.w	r2, r2, #12
 80046da:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	679a      	str	r2, [r3, #120]	@ 0x78
 80046f0:	e016      	b.n	8004720 <HAL_ADC_IRQHandler+0x22c>
 80046f2:	bf00      	nop
 80046f4:	42028000 	.word	0x42028000
 80046f8:	42028100 	.word	0x42028100
 80046fc:	42028300 	.word	0x42028300
 8004700:	46021300 	.word	0x46021300
 8004704:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fd fc21 	bl	8001f68 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	220c      	movs	r2, #12
 800472c:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a8c      	ldr	r2, [pc, #560]	@ (8004964 <HAL_ADC_IRQHandler+0x470>)
 8004734:	4293      	cmp	r3, r2
 8004736:	f000 8095 	beq.w	8004864 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <HAL_ADC_IRQHandler+0x25a>
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8085 	beq.w	8004864 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d07f      	beq.n	8004864 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004774:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff f91e 	bl	80039c2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004786:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff f84b 	bl	8003828 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004792:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a73      	ldr	r2, [pc, #460]	@ (8004968 <HAL_ADC_IRQHandler+0x474>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d002      	beq.n	80047a4 <HAL_ADC_IRQHandler+0x2b0>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	e000      	b.n	80047a6 <HAL_ADC_IRQHandler+0x2b2>
 80047a4:	4b71      	ldr	r3, [pc, #452]	@ (800496c <HAL_ADC_IRQHandler+0x478>)
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d008      	beq.n	80047c0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b06      	cmp	r3, #6
 80047b8:	d002      	beq.n	80047c0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b07      	cmp	r3, #7
 80047be:	d104      	bne.n	80047ca <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	623b      	str	r3, [r7, #32]
 80047c8:	e00c      	b.n	80047e4 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a66      	ldr	r2, [pc, #408]	@ (8004968 <HAL_ADC_IRQHandler+0x474>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d002      	beq.n	80047da <HAL_ADC_IRQHandler+0x2e6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	e000      	b.n	80047dc <HAL_ADC_IRQHandler+0x2e8>
 80047da:	4b64      	ldr	r3, [pc, #400]	@ (800496c <HAL_ADC_IRQHandler+0x478>)
 80047dc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d035      	beq.n	8004856 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_ADC_IRQHandler+0x310>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d02d      	beq.n	8004856 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	d128      	bne.n	8004856 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480e:	2b40      	cmp	r3, #64	@ 0x40
 8004810:	d121      	bne.n	8004856 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fa26 	bl	8003c68 <LL_ADC_INJ_IsConversionOngoing>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d119      	bne.n	8004856 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004830:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004836:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800484e:	f043 0201 	orr.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f001 f880 	bl	800595c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2260      	movs	r2, #96	@ 0x60
 8004862:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d011      	beq.n	8004892 <HAL_ADC_IRQHandler+0x39e>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00c      	beq.n	8004892 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800487c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8eb 	bl	8004a60 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d012      	beq.n	80048c2 <HAL_ADC_IRQHandler+0x3ce>
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f001 f85c 	bl	8005970 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d012      	beq.n	80048f2 <HAL_ADC_IRQHandler+0x3fe>
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00d      	beq.n	80048f2 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f001 f84e 	bl	8005984 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d05d      	beq.n	80049b8 <HAL_ADC_IRQHandler+0x4c4>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	d058      	beq.n	80049b8 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 800490e:	2301      	movs	r3, #1
 8004910:	627b      	str	r3, [r7, #36]	@ 0x24
 8004912:	e03b      	b.n	800498c <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a12      	ldr	r2, [pc, #72]	@ (8004964 <HAL_ADC_IRQHandler+0x470>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d02c      	beq.n	8004978 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d015      	beq.n	8004950 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a10      	ldr	r2, [pc, #64]	@ (800496c <HAL_ADC_IRQHandler+0x478>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d004      	beq.n	8004938 <HAL_ADC_IRQHandler+0x444>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a0d      	ldr	r2, [pc, #52]	@ (8004968 <HAL_ADC_IRQHandler+0x474>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d101      	bne.n	800493c <HAL_ADC_IRQHandler+0x448>
 8004938:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <HAL_ADC_IRQHandler+0x47c>)
 800493a:	e000      	b.n	800493e <HAL_ADC_IRQHandler+0x44a>
 800493c:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <HAL_ADC_IRQHandler+0x480>)
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff f8e8 	bl	8003b14 <LL_ADC_GetMultiDMATransfer>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d020      	beq.n	800498c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800494a:	2301      	movs	r3, #1
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
 800494e:	e01d      	b.n	800498c <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d016      	beq.n	800498c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800495e:	2301      	movs	r3, #1
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
 8004962:	e013      	b.n	800498c <HAL_ADC_IRQHandler+0x498>
 8004964:	46021000 	.word	0x46021000
 8004968:	42028100 	.word	0x42028100
 800496c:	42028000 	.word	0x42028000
 8004970:	42028300 	.word	0x42028300
 8004974:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff f812 	bl	80039a6 <LL_ADC_REG_GetDMATransfer>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004988:	2301      	movs	r3, #1
 800498a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	2b01      	cmp	r3, #1
 8004990:	d10e      	bne.n	80049b0 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004996:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049a2:	f043 0202 	orr.w	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f862 	bl	8004a74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2210      	movs	r2, #16
 80049b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01b      	beq.n	80049fa <HAL_ADC_IRQHandler+0x506>
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d016      	beq.n	80049fa <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049dc:	f043 0201 	orr.w	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f863 	bl	8004ab0 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a17      	ldr	r2, [pc, #92]	@ (8004a5c <HAL_ADC_IRQHandler+0x568>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d126      	bne.n	8004a52 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <HAL_ADC_IRQHandler+0x534>
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d007      	beq.n	8004a28 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f835 	bl	8004a88 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a26:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00f      	beq.n	8004a52 <HAL_ADC_IRQHandler+0x55e>
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f82d 	bl	8004a9c <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a50:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004a52:	bf00      	nop
 8004a54:	3728      	adds	r7, #40	@ 0x28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	46021000 	.word	0x46021000

08004a60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b0b7      	sub	sp, #220	@ 0xdc
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4aa8      	ldr	r2, [pc, #672]	@ (8004d80 <HAL_ADC_ConfigChannel+0x2bc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d103      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d102      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x36>
 8004af4:	2302      	movs	r3, #2
 8004af6:	f000 bdfe 	b.w	80056f6 <HAL_ADC_ConfigChannel+0xc32>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff f89b 	bl	8003c42 <LL_ADC_REG_IsConversionOngoing>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 85c1 	bne.w	8005696 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a99      	ldr	r2, [pc, #612]	@ (8004d80 <HAL_ADC_ConfigChannel+0x2bc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	f000 8409 	beq.w	8005332 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d108      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x7a>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	0e9b      	lsrs	r3, r3, #26
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	2201      	movs	r2, #1
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	e01d      	b.n	8004b7a <HAL_ADC_ConfigChannel+0xb6>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b4a:	fa93 f3a3 	rbit	r3, r3
 8004b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004b5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004b62:	2320      	movs	r3, #32
 8004b64:	e004      	b.n	8004b70 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004b66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b6a:	fab3 f383 	clz	r3, r3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2201      	movs	r2, #1
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	69d1      	ldr	r1, [r2, #28]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	430b      	orrs	r3, r1
 8004b86:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	f7fe fe5b 	bl	8003850 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff f84f 	bl	8003c42 <LL_ADC_REG_IsConversionOngoing>
 8004ba4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff f85b 	bl	8003c68 <LL_ADC_INJ_IsConversionOngoing>
 8004bb2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 81df 	bne.w	8004f7e <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f040 81da 	bne.w	8004f7e <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6819      	ldr	r1, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f7fe ff06 	bl	80039e8 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d046      	beq.n	8004c8c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6919      	ldr	r1, [r3, #16]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c0e:	f7fe fd41 	bl	8003694 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6919      	ldr	r1, [r3, #16]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f7fe fd6f 	bl	8003702 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	7e9b      	ldrb	r3, [r3, #26]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d11e      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x17e>
 8004c3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c40:	e000      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x180>
 8004c42:	2300      	movs	r3, #0
 8004c44:	461a      	mov	r2, r3
 8004c46:	f7fe fd92 	bl	800376e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d102      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x19c>
 8004c5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004c5e:	e000      	b.n	8004c62 <HAL_ADC_ConfigChannel+0x19e>
 8004c60:	2300      	movs	r3, #0
 8004c62:	461a      	mov	r2, r3
 8004c64:	f7fe fd68 	bl	8003738 <LL_ADC_SetOffsetSignedSaturation>
 8004c68:	e189      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2200      	movs	r2, #0
 8004c74:	4619      	mov	r1, r3
 8004c76:	f7fe fd7a 	bl	800376e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2200      	movs	r2, #0
 8004c84:	4619      	mov	r1, r3
 8004c86:	f7fe fd57 	bl	8003738 <LL_ADC_SetOffsetSignedSaturation>
 8004c8a:	e178      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2100      	movs	r1, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fd1f 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x1f4>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe fd14 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	0e9b      	lsrs	r3, r3, #26
 8004cb2:	f003 021f 	and.w	r2, r3, #31
 8004cb6:	e01e      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x232>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fd09 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cce:	fa93 f3a3 	rbit	r3, r3
 8004cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004cda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004cde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	e004      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004cea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004cee:	fab3 f383 	clz	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x24a>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	0e9b      	lsrs	r3, r3, #26
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	e018      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x27c>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004d22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004d32:	2320      	movs	r3, #32
 8004d34:	e004      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d3a:	fab3 f383 	clz	r3, r3
 8004d3e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d107      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f7fe fca0 	bl	8003694 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe fcbb 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10c      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x2c0>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2101      	movs	r1, #1
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe fcb0 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004d76:	4603      	mov	r3, r0
 8004d78:	0e9b      	lsrs	r3, r3, #26
 8004d7a:	f003 021f 	and.w	r2, r3, #31
 8004d7e:	e020      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x2fe>
 8004d80:	46021000 	.word	0x46021000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2101      	movs	r1, #1
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fca3 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004da2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004da6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8004db2:	2320      	movs	r3, #32
 8004db4:	e004      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d105      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x316>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	0e9b      	lsrs	r3, r3, #26
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	e018      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x348>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004dfe:	2320      	movs	r3, #32
 8004e00:	e004      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d107      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	f7fe fc3a 	bl	8003694 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2102      	movs	r1, #2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe fc55 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x388>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2102      	movs	r1, #2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe fc4a 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004e42:	4603      	mov	r3, r0
 8004e44:	0e9b      	lsrs	r3, r3, #26
 8004e46:	f003 021f 	and.w	r2, r3, #31
 8004e4a:	e01a      	b.n	8004e82 <HAL_ADC_ConfigChannel+0x3be>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2102      	movs	r1, #2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe fc3f 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e5e:	fa93 f3a3 	rbit	r3, r3
 8004e62:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004e6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004e72:	2320      	movs	r3, #32
 8004e74:	e004      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e7a:	fab3 f383 	clz	r3, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d105      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x3d6>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	0e9b      	lsrs	r3, r3, #26
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	e011      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x3fa>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ea2:	fa93 f3a3 	rbit	r3, r3
 8004ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eaa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004eb2:	2320      	movs	r3, #32
 8004eb4:	e003      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eb8:	fab3 f383 	clz	r3, r3
 8004ebc:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d107      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2102      	movs	r1, #2
 8004ece:	f7fe fbe1 	bl	8003694 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2103      	movs	r1, #3
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fe fbfc 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x43a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2103      	movs	r1, #3
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe fbf1 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	0e9b      	lsrs	r3, r3, #26
 8004ef8:	f003 021f 	and.w	r2, r3, #31
 8004efc:	e017      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x46a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2103      	movs	r1, #3
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe fbe6 	bl	80036d6 <LL_ADC_GetOffsetChannel>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f10:	fa93 f3a3 	rbit	r3, r3
 8004f14:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f18:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004f20:	2320      	movs	r3, #32
 8004f22:	e003      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004f24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f26:	fab3 f383 	clz	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0x482>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	0e9b      	lsrs	r3, r3, #26
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	e011      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x4a6>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f4e:	fa93 f3a3 	rbit	r3, r3
 8004f52:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004f58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8004f5e:	2320      	movs	r3, #32
 8004f60:	e003      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f64:	fab3 f383 	clz	r3, r3
 8004f68:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d107      	bne.n	8004f7e <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	2300      	movs	r3, #0
 8004f78:	2103      	movs	r1, #3
 8004f7a:	f7fe fb8b 	bl	8003694 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe fe36 	bl	8003bf4 <LL_ADC_IsEnabled>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 83ad 	bne.w	80056ea <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6819      	ldr	r1, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f7fe fd87 	bl	8003ab0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004faa:	f040 80d6 	bne.w	800515a <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10b      	bne.n	8004fd2 <HAL_ADC_ConfigChannel+0x50e>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	0e9b      	lsrs	r3, r3, #26
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2b09      	cmp	r3, #9
 8004fc8:	bf94      	ite	ls
 8004fca:	2301      	movls	r3, #1
 8004fcc:	2300      	movhi	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	e019      	b.n	8005006 <HAL_ADC_ConfigChannel+0x542>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fda:	fa93 f3a3 	rbit	r3, r3
 8004fde:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004fea:	2320      	movs	r3, #32
 8004fec:	e003      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff0:	fab3 f383 	clz	r3, r3
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2b09      	cmp	r3, #9
 8004ffe:	bf94      	ite	ls
 8005000:	2301      	movls	r3, #1
 8005002:	2300      	movhi	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04d      	beq.n	80050a6 <HAL_ADC_ConfigChannel+0x5e2>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d107      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x562>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	0e9b      	lsrs	r3, r3, #26
 800501c:	3301      	adds	r3, #1
 800501e:	069b      	lsls	r3, r3, #26
 8005020:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005024:	e015      	b.n	8005052 <HAL_ADC_ConfigChannel+0x58e>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005036:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800503e:	2320      	movs	r3, #32
 8005040:	e003      	b.n	800504a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	3301      	adds	r3, #1
 800504c:	069b      	lsls	r3, r3, #26
 800504e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x5ae>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	0e9b      	lsrs	r3, r3, #26
 8005064:	3301      	adds	r3, #1
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2101      	movs	r1, #1
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	e017      	b.n	80050a2 <HAL_ADC_ConfigChannel+0x5de>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507a:	fa93 f3a3 	rbit	r3, r3
 800507e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005082:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 800508a:	2320      	movs	r3, #32
 800508c:	e003      	b.n	8005096 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005090:	fab3 f383 	clz	r3, r3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	3301      	adds	r3, #1
 8005098:	f003 031f 	and.w	r3, r3, #31
 800509c:	2101      	movs	r1, #1
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	4313      	orrs	r3, r2
 80050a4:	e04e      	b.n	8005144 <HAL_ADC_ConfigChannel+0x680>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d107      	bne.n	80050c2 <HAL_ADC_ConfigChannel+0x5fe>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	0e9b      	lsrs	r3, r3, #26
 80050b8:	3301      	adds	r3, #1
 80050ba:	069b      	lsls	r3, r3, #26
 80050bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050c0:	e015      	b.n	80050ee <HAL_ADC_ConfigChannel+0x62a>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ca:	fa93 f3a3 	rbit	r3, r3
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80050d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80050da:	2320      	movs	r3, #32
 80050dc:	e003      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80050de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e0:	fab3 f383 	clz	r3, r3
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	3301      	adds	r3, #1
 80050e8:	069b      	lsls	r3, r3, #26
 80050ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <HAL_ADC_ConfigChannel+0x64a>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	0e9b      	lsrs	r3, r3, #26
 8005100:	3301      	adds	r3, #1
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	2101      	movs	r1, #1
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	e017      	b.n	800513e <HAL_ADC_ConfigChannel+0x67a>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	61bb      	str	r3, [r7, #24]
  return result;
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8005126:	2320      	movs	r3, #32
 8005128:	e003      	b.n	8005132 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	fab3 f383 	clz	r3, r3
 8005130:	b2db      	uxtb	r3, r3
 8005132:	3301      	adds	r3, #1
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	2101      	movs	r1, #1
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	4313      	orrs	r3, r2
 8005140:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	461a      	mov	r2, r3
 8005152:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005156:	f7fe fc47 	bl	80039e8 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	f280 82c3 	bge.w	80056ea <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a92      	ldr	r2, [pc, #584]	@ (80053b4 <HAL_ADC_ConfigChannel+0x8f0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_ADC_ConfigChannel+0x6b4>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a91      	ldr	r2, [pc, #580]	@ (80053b8 <HAL_ADC_ConfigChannel+0x8f4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d101      	bne.n	800517c <HAL_ADC_ConfigChannel+0x6b8>
 8005178:	4b90      	ldr	r3, [pc, #576]	@ (80053bc <HAL_ADC_ConfigChannel+0x8f8>)
 800517a:	e000      	b.n	800517e <HAL_ADC_ConfigChannel+0x6ba>
 800517c:	4b90      	ldr	r3, [pc, #576]	@ (80053c0 <HAL_ADC_ConfigChannel+0x8fc>)
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe fa5a 	bl	8003638 <LL_ADC_GetCommonPathInternalCh>
 8005184:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a89      	ldr	r2, [pc, #548]	@ (80053b4 <HAL_ADC_ConfigChannel+0x8f0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <HAL_ADC_ConfigChannel+0x6d8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a88      	ldr	r2, [pc, #544]	@ (80053b8 <HAL_ADC_ConfigChannel+0x8f4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d10e      	bne.n	80051ba <HAL_ADC_ConfigChannel+0x6f6>
 800519c:	4885      	ldr	r0, [pc, #532]	@ (80053b4 <HAL_ADC_ConfigChannel+0x8f0>)
 800519e:	f7fe fd29 	bl	8003bf4 <LL_ADC_IsEnabled>
 80051a2:	4604      	mov	r4, r0
 80051a4:	4884      	ldr	r0, [pc, #528]	@ (80053b8 <HAL_ADC_ConfigChannel+0x8f4>)
 80051a6:	f7fe fd25 	bl	8003bf4 <LL_ADC_IsEnabled>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4323      	orrs	r3, r4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	e008      	b.n	80051cc <HAL_ADC_ConfigChannel+0x708>
 80051ba:	4882      	ldr	r0, [pc, #520]	@ (80053c4 <HAL_ADC_ConfigChannel+0x900>)
 80051bc:	f7fe fd1a 	bl	8003bf4 <LL_ADC_IsEnabled>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bf0c      	ite	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	2300      	movne	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80a6 	beq.w	800531e <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a7c      	ldr	r2, [pc, #496]	@ (80053c8 <HAL_ADC_ConfigChannel+0x904>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d13c      	bne.n	8005256 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d136      	bne.n	8005256 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a71      	ldr	r2, [pc, #452]	@ (80053b4 <HAL_ADC_ConfigChannel+0x8f0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00a      	beq.n	8005208 <HAL_ADC_ConfigChannel+0x744>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a70      	ldr	r2, [pc, #448]	@ (80053b8 <HAL_ADC_ConfigChannel+0x8f4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d005      	beq.n	8005208 <HAL_ADC_ConfigChannel+0x744>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a70      	ldr	r2, [pc, #448]	@ (80053c4 <HAL_ADC_ConfigChannel+0x900>)
 8005202:	4293      	cmp	r3, r2
 8005204:	f040 826e 	bne.w	80056e4 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a69      	ldr	r2, [pc, #420]	@ (80053b4 <HAL_ADC_ConfigChannel+0x8f0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_ADC_ConfigChannel+0x758>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a68      	ldr	r2, [pc, #416]	@ (80053b8 <HAL_ADC_ConfigChannel+0x8f4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x75c>
 800521c:	4a67      	ldr	r2, [pc, #412]	@ (80053bc <HAL_ADC_ConfigChannel+0x8f8>)
 800521e:	e000      	b.n	8005222 <HAL_ADC_ConfigChannel+0x75e>
 8005220:	4a67      	ldr	r2, [pc, #412]	@ (80053c0 <HAL_ADC_ConfigChannel+0x8fc>)
 8005222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005226:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f7fe f9f0 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005232:	4b66      	ldr	r3, [pc, #408]	@ (80053cc <HAL_ADC_ConfigChannel+0x908>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	099b      	lsrs	r3, r3, #6
 8005238:	4a65      	ldr	r2, [pc, #404]	@ (80053d0 <HAL_ADC_ConfigChannel+0x90c>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	099b      	lsrs	r3, r3, #6
 8005240:	3301      	adds	r3, #1
 8005242:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8005244:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8005246:	e002      	b.n	800524e <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	3b01      	subs	r3, #1
 800524c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f9      	bne.n	8005248 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005254:	e246      	b.n	80056e4 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a5e      	ldr	r2, [pc, #376]	@ (80053d4 <HAL_ADC_ConfigChannel+0x910>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d12b      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8005268:	2b00      	cmp	r3, #0
 800526a:	d125      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a50      	ldr	r2, [pc, #320]	@ (80053b4 <HAL_ADC_ConfigChannel+0x8f0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00a      	beq.n	800528c <HAL_ADC_ConfigChannel+0x7c8>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a4f      	ldr	r2, [pc, #316]	@ (80053b8 <HAL_ADC_ConfigChannel+0x8f4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d005      	beq.n	800528c <HAL_ADC_ConfigChannel+0x7c8>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a4f      	ldr	r2, [pc, #316]	@ (80053c4 <HAL_ADC_ConfigChannel+0x900>)
 8005286:	4293      	cmp	r3, r2
 8005288:	f040 822e 	bne.w	80056e8 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a48      	ldr	r2, [pc, #288]	@ (80053b4 <HAL_ADC_ConfigChannel+0x8f0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_ADC_ConfigChannel+0x7dc>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a47      	ldr	r2, [pc, #284]	@ (80053b8 <HAL_ADC_ConfigChannel+0x8f4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d101      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0x7e0>
 80052a0:	4a46      	ldr	r2, [pc, #280]	@ (80053bc <HAL_ADC_ConfigChannel+0x8f8>)
 80052a2:	e000      	b.n	80052a6 <HAL_ADC_ConfigChannel+0x7e2>
 80052a4:	4a46      	ldr	r2, [pc, #280]	@ (80053c0 <HAL_ADC_ConfigChannel+0x8fc>)
 80052a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f7fe f9ae 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052b6:	e217      	b.n	80056e8 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a46      	ldr	r2, [pc, #280]	@ (80053d8 <HAL_ADC_ConfigChannel+0x914>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	f040 8213 	bne.w	80056ea <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 820c 	bne.w	80056ea <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a37      	ldr	r2, [pc, #220]	@ (80053b4 <HAL_ADC_ConfigChannel+0x8f0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00a      	beq.n	80052f2 <HAL_ADC_ConfigChannel+0x82e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a35      	ldr	r2, [pc, #212]	@ (80053b8 <HAL_ADC_ConfigChannel+0x8f4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d005      	beq.n	80052f2 <HAL_ADC_ConfigChannel+0x82e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a36      	ldr	r2, [pc, #216]	@ (80053c4 <HAL_ADC_ConfigChannel+0x900>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	f040 81fc 	bne.w	80056ea <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a2f      	ldr	r2, [pc, #188]	@ (80053b4 <HAL_ADC_ConfigChannel+0x8f0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d004      	beq.n	8005306 <HAL_ADC_ConfigChannel+0x842>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a2d      	ldr	r2, [pc, #180]	@ (80053b8 <HAL_ADC_ConfigChannel+0x8f4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d101      	bne.n	800530a <HAL_ADC_ConfigChannel+0x846>
 8005306:	4a2d      	ldr	r2, [pc, #180]	@ (80053bc <HAL_ADC_ConfigChannel+0x8f8>)
 8005308:	e000      	b.n	800530c <HAL_ADC_ConfigChannel+0x848>
 800530a:	4a2d      	ldr	r2, [pc, #180]	@ (80053c0 <HAL_ADC_ConfigChannel+0x8fc>)
 800530c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005310:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f7fe f97b 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
 800531c:	e1e5      	b.n	80056ea <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005322:	f043 0220 	orr.w	r2, r3, #32
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005330:	e1db      	b.n	80056ea <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b02      	cmp	r3, #2
 8005340:	f000 811b 	beq.w	800557a <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800534c:	d004      	beq.n	8005358 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005352:	4a22      	ldr	r2, [pc, #136]	@ (80053dc <HAL_ADC_ConfigChannel+0x918>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d107      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005360:	4618      	mov	r0, r3
 8005362:	f7fe fad5 	bl	8003910 <LL_ADC_REG_SetSequencerChAdd>
 8005366:	e059      	b.n	800541c <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 031f 	and.w	r3, r3, #31
 8005376:	210f      	movs	r1, #15
 8005378:	fa01 f303 	lsl.w	r3, r1, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005384:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d105      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x8d4>
 800538c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005390:	0e9b      	lsrs	r3, r3, #26
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	e027      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x924>
 8005398:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800539c:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	fa93 f3a3 	rbit	r3, r3
 80053a4:	60fb      	str	r3, [r7, #12]
  return result;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d117      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80053b0:	2320      	movs	r3, #32
 80053b2:	e019      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x924>
 80053b4:	42028000 	.word	0x42028000
 80053b8:	42028100 	.word	0x42028100
 80053bc:	42028300 	.word	0x42028300
 80053c0:	46021300 	.word	0x46021300
 80053c4:	46021000 	.word	0x46021000
 80053c8:	ce080000 	.word	0xce080000
 80053cc:	20000000 	.word	0x20000000
 80053d0:	053e2d63 	.word	0x053e2d63
 80053d4:	ca040000 	.word	0xca040000
 80053d8:	80000001 	.word	0x80000001
 80053dc:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	6849      	ldr	r1, [r1, #4]
 80053ec:	f001 011f 	and.w	r1, r1, #31
 80053f0:	408b      	lsls	r3, r1
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	429a      	cmp	r2, r3
 8005408:	d808      	bhi.n	800541c <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005416:	4619      	mov	r1, r3
 8005418:	f7fe fa1a 	bl	8003850 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	461a      	mov	r2, r3
 8005426:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800542a:	f7fe fadd 	bl	80039e8 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f280 8159 	bge.w	80056ea <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a9b      	ldr	r2, [pc, #620]	@ (80056ac <HAL_ADC_ConfigChannel+0xbe8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_ADC_ConfigChannel+0x988>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a9a      	ldr	r2, [pc, #616]	@ (80056b0 <HAL_ADC_ConfigChannel+0xbec>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x98c>
 800544c:	4b99      	ldr	r3, [pc, #612]	@ (80056b4 <HAL_ADC_ConfigChannel+0xbf0>)
 800544e:	e000      	b.n	8005452 <HAL_ADC_ConfigChannel+0x98e>
 8005450:	4b99      	ldr	r3, [pc, #612]	@ (80056b8 <HAL_ADC_ConfigChannel+0xbf4>)
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe f8f0 	bl	8003638 <LL_ADC_GetCommonPathInternalCh>
 8005458:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a96      	ldr	r2, [pc, #600]	@ (80056bc <HAL_ADC_ConfigChannel+0xbf8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d12b      	bne.n	80054be <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005466:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800546a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d125      	bne.n	80054be <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a8d      	ldr	r2, [pc, #564]	@ (80056ac <HAL_ADC_ConfigChannel+0xbe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_ADC_ConfigChannel+0x9c2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a8b      	ldr	r2, [pc, #556]	@ (80056b0 <HAL_ADC_ConfigChannel+0xbec>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d101      	bne.n	800548a <HAL_ADC_ConfigChannel+0x9c6>
 8005486:	4a8b      	ldr	r2, [pc, #556]	@ (80056b4 <HAL_ADC_ConfigChannel+0xbf0>)
 8005488:	e000      	b.n	800548c <HAL_ADC_ConfigChannel+0x9c8>
 800548a:	4a8b      	ldr	r2, [pc, #556]	@ (80056b8 <HAL_ADC_ConfigChannel+0xbf4>)
 800548c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005490:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f7fe f8bb 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800549c:	4b88      	ldr	r3, [pc, #544]	@ (80056c0 <HAL_ADC_ConfigChannel+0xbfc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	099b      	lsrs	r3, r3, #6
 80054a2:	4a88      	ldr	r2, [pc, #544]	@ (80056c4 <HAL_ADC_ConfigChannel+0xc00>)
 80054a4:	fba2 2303 	umull	r2, r3, r2, r3
 80054a8:	099b      	lsrs	r3, r3, #6
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80054ae:	e002      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f9      	bne.n	80054b0 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80054bc:	e045      	b.n	800554a <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a81      	ldr	r2, [pc, #516]	@ (80056c8 <HAL_ADC_ConfigChannel+0xc04>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d11b      	bne.n	8005500 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d115      	bne.n	8005500 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a74      	ldr	r2, [pc, #464]	@ (80056ac <HAL_ADC_ConfigChannel+0xbe8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_ADC_ConfigChannel+0xa24>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a73      	ldr	r2, [pc, #460]	@ (80056b0 <HAL_ADC_ConfigChannel+0xbec>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d101      	bne.n	80054ec <HAL_ADC_ConfigChannel+0xa28>
 80054e8:	4a72      	ldr	r2, [pc, #456]	@ (80056b4 <HAL_ADC_ConfigChannel+0xbf0>)
 80054ea:	e000      	b.n	80054ee <HAL_ADC_ConfigChannel+0xa2a>
 80054ec:	4a72      	ldr	r2, [pc, #456]	@ (80056b8 <HAL_ADC_ConfigChannel+0xbf4>)
 80054ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fe f88a 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
 80054fe:	e024      	b.n	800554a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a71      	ldr	r2, [pc, #452]	@ (80056cc <HAL_ADC_ConfigChannel+0xc08>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d11f      	bne.n	800554a <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800550a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800550e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d115      	bne.n	8005542 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a64      	ldr	r2, [pc, #400]	@ (80056ac <HAL_ADC_ConfigChannel+0xbe8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <HAL_ADC_ConfigChannel+0xa66>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a62      	ldr	r2, [pc, #392]	@ (80056b0 <HAL_ADC_ConfigChannel+0xbec>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d101      	bne.n	800552e <HAL_ADC_ConfigChannel+0xa6a>
 800552a:	4a62      	ldr	r2, [pc, #392]	@ (80056b4 <HAL_ADC_ConfigChannel+0xbf0>)
 800552c:	e000      	b.n	8005530 <HAL_ADC_ConfigChannel+0xa6c>
 800552e:	4a62      	ldr	r2, [pc, #392]	@ (80056b8 <HAL_ADC_ConfigChannel+0xbf4>)
 8005530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005534:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f7fe f869 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
 8005540:	e003      	b.n	800554a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a62      	ldr	r2, [pc, #392]	@ (80056d0 <HAL_ADC_ConfigChannel+0xc0c>)
 8005548:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a61      	ldr	r2, [pc, #388]	@ (80056d4 <HAL_ADC_ConfigChannel+0xc10>)
 8005550:	4293      	cmp	r3, r2
 8005552:	f040 80ca 	bne.w	80056ea <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005556:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800555a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800555e:	2b00      	cmp	r3, #0
 8005560:	f040 80c3 	bne.w	80056ea <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005578:	e0b7      	b.n	80056ea <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005582:	d004      	beq.n	800558e <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8005588:	4a53      	ldr	r2, [pc, #332]	@ (80056d8 <HAL_ADC_ConfigChannel+0xc14>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d106      	bne.n	800559c <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005596:	4618      	mov	r0, r3
 8005598:	f7fe f9ed 	bl	8003976 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f280 80a2 	bge.w	80056ea <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a40      	ldr	r2, [pc, #256]	@ (80056ac <HAL_ADC_ConfigChannel+0xbe8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d004      	beq.n	80055ba <HAL_ADC_ConfigChannel+0xaf6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a3e      	ldr	r2, [pc, #248]	@ (80056b0 <HAL_ADC_ConfigChannel+0xbec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d101      	bne.n	80055be <HAL_ADC_ConfigChannel+0xafa>
 80055ba:	4b3e      	ldr	r3, [pc, #248]	@ (80056b4 <HAL_ADC_ConfigChannel+0xbf0>)
 80055bc:	e000      	b.n	80055c0 <HAL_ADC_ConfigChannel+0xafc>
 80055be:	4b3e      	ldr	r3, [pc, #248]	@ (80056b8 <HAL_ADC_ConfigChannel+0xbf4>)
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe f839 	bl	8003638 <LL_ADC_GetCommonPathInternalCh>
 80055c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a43      	ldr	r2, [pc, #268]	@ (80056dc <HAL_ADC_ConfigChannel+0xc18>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d115      	bne.n	8005600 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a34      	ldr	r2, [pc, #208]	@ (80056ac <HAL_ADC_ConfigChannel+0xbe8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_ADC_ConfigChannel+0xb24>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a33      	ldr	r2, [pc, #204]	@ (80056b0 <HAL_ADC_ConfigChannel+0xbec>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_ADC_ConfigChannel+0xb28>
 80055e8:	4a32      	ldr	r2, [pc, #200]	@ (80056b4 <HAL_ADC_ConfigChannel+0xbf0>)
 80055ea:	e000      	b.n	80055ee <HAL_ADC_ConfigChannel+0xb2a>
 80055ec:	4a32      	ldr	r2, [pc, #200]	@ (80056b8 <HAL_ADC_ConfigChannel+0xbf4>)
 80055ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7fe f80a 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
 80055fe:	e034      	b.n	800566a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a36      	ldr	r2, [pc, #216]	@ (80056e0 <HAL_ADC_ConfigChannel+0xc1c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d115      	bne.n	8005636 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a27      	ldr	r2, [pc, #156]	@ (80056ac <HAL_ADC_ConfigChannel+0xbe8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_ADC_ConfigChannel+0xb5a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a25      	ldr	r2, [pc, #148]	@ (80056b0 <HAL_ADC_ConfigChannel+0xbec>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d101      	bne.n	8005622 <HAL_ADC_ConfigChannel+0xb5e>
 800561e:	4a25      	ldr	r2, [pc, #148]	@ (80056b4 <HAL_ADC_ConfigChannel+0xbf0>)
 8005620:	e000      	b.n	8005624 <HAL_ADC_ConfigChannel+0xb60>
 8005622:	4a25      	ldr	r2, [pc, #148]	@ (80056b8 <HAL_ADC_ConfigChannel+0xbf4>)
 8005624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005628:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f7fd ffef 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
 8005634:	e019      	b.n	800566a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a24      	ldr	r2, [pc, #144]	@ (80056cc <HAL_ADC_ConfigChannel+0xc08>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d114      	bne.n	800566a <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a19      	ldr	r2, [pc, #100]	@ (80056ac <HAL_ADC_ConfigChannel+0xbe8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_ADC_ConfigChannel+0xb90>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a18      	ldr	r2, [pc, #96]	@ (80056b0 <HAL_ADC_ConfigChannel+0xbec>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <HAL_ADC_ConfigChannel+0xb94>
 8005654:	4a17      	ldr	r2, [pc, #92]	@ (80056b4 <HAL_ADC_ConfigChannel+0xbf0>)
 8005656:	e000      	b.n	800565a <HAL_ADC_ConfigChannel+0xb96>
 8005658:	4a17      	ldr	r2, [pc, #92]	@ (80056b8 <HAL_ADC_ConfigChannel+0xbf4>)
 800565a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800565e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f7fd ffd4 	bl	8003612 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a19      	ldr	r2, [pc, #100]	@ (80056d4 <HAL_ADC_ConfigChannel+0xc10>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d13a      	bne.n	80056ea <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005674:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d134      	bne.n	80056ea <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005694:	e029      	b.n	80056ea <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80056a8:	e01f      	b.n	80056ea <HAL_ADC_ConfigChannel+0xc26>
 80056aa:	bf00      	nop
 80056ac:	42028000 	.word	0x42028000
 80056b0:	42028100 	.word	0x42028100
 80056b4:	42028300 	.word	0x42028300
 80056b8:	46021300 	.word	0x46021300
 80056bc:	b6002000 	.word	0xb6002000
 80056c0:	20000000 	.word	0x20000000
 80056c4:	053e2d63 	.word	0x053e2d63
 80056c8:	ba004000 	.word	0xba004000
 80056cc:	80000001 	.word	0x80000001
 80056d0:	b2001000 	.word	0xb2001000
 80056d4:	d7200000 	.word	0xd7200000
 80056d8:	80000010 	.word	0x80000010
 80056dc:	ce080000 	.word	0xce080000
 80056e0:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056e4:	bf00      	nop
 80056e6:	e000      	b.n	80056ea <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056e8:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80056f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	37dc      	adds	r7, #220	@ 0xdc
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd90      	pop	{r4, r7, pc}
 80056fe:	bf00      	nop

08005700 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe fa71 	bl	8003bf4 <LL_ADC_IsEnabled>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d17b      	bne.n	8005810 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	4b3f      	ldr	r3, [pc, #252]	@ (800581c <ADC_Enable+0x11c>)
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800572a:	f043 0210 	orr.w	r2, r3, #16
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005736:	f043 0201 	orr.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e067      	b.n	8005812 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe fa3c 	bl	8003bcc <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <ADC_Enable+0x66>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2f      	ldr	r2, [pc, #188]	@ (8005820 <ADC_Enable+0x120>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d054      	beq.n	8005810 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005766:	f7fd fee9 	bl	800353c <HAL_GetTick>
 800576a:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2c      	ldr	r2, [pc, #176]	@ (8005824 <ADC_Enable+0x124>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <ADC_Enable+0x80>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2b      	ldr	r2, [pc, #172]	@ (8005828 <ADC_Enable+0x128>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d101      	bne.n	8005784 <ADC_Enable+0x84>
 8005780:	4b2a      	ldr	r3, [pc, #168]	@ (800582c <ADC_Enable+0x12c>)
 8005782:	e000      	b.n	8005786 <ADC_Enable+0x86>
 8005784:	4b2a      	ldr	r3, [pc, #168]	@ (8005830 <ADC_Enable+0x130>)
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe f9b6 	bl	8003af8 <LL_ADC_GetMultimode>
 800578c:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a25      	ldr	r2, [pc, #148]	@ (8005828 <ADC_Enable+0x128>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d002      	beq.n	800579e <ADC_Enable+0x9e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	e000      	b.n	80057a0 <ADC_Enable+0xa0>
 800579e:	4b21      	ldr	r3, [pc, #132]	@ (8005824 <ADC_Enable+0x124>)
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d02c      	beq.n	8005802 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d130      	bne.n	8005810 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057ae:	e028      	b.n	8005802 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe fa1d 	bl	8003bf4 <LL_ADC_IsEnabled>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fe fa01 	bl	8003bcc <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057ca:	f7fd feb7 	bl	800353c <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d914      	bls.n	8005802 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d00d      	beq.n	8005802 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057ea:	f043 0210 	orr.w	r2, r3, #16
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057f6:	f043 0201 	orr.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e007      	b.n	8005812 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d1cf      	bne.n	80057b0 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	8000003f 	.word	0x8000003f
 8005820:	46021000 	.word	0x46021000
 8005824:	42028000 	.word	0x42028000
 8005828:	42028100 	.word	0x42028100
 800582c:	42028300 	.word	0x42028300
 8005830:	46021300 	.word	0x46021300

08005834 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005840:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005846:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800584a:	2b00      	cmp	r3, #0
 800584c:	d14b      	bne.n	80058e6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005852:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b00      	cmp	r3, #0
 8005866:	d021      	beq.n	80058ac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f7fd ffdb 	bl	8003828 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d032      	beq.n	80058de <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d12b      	bne.n	80058de <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800588a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005896:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d11f      	bne.n	80058de <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058a2:	f043 0201 	orr.w	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	679a      	str	r2, [r3, #120]	@ 0x78
 80058aa:	e018      	b.n	80058de <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d111      	bne.n	80058de <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d105      	bne.n	80058de <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7fc fb42 	bl	8001f68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058e4:	e00e      	b.n	8005904 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7ff f8be 	bl	8004a74 <HAL_ADC_ErrorCallback>
}
 80058f8:	e004      	b.n	8005904 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005918:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7fc fab0 	bl	8001e80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005934:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800593a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005946:	f043 0204 	orr.w	r2, r3, #4
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff f890 	bl	8004a74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059bc:	4b0c      	ldr	r3, [pc, #48]	@ (80059f0 <__NVIC_SetPriorityGrouping+0x44>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059c8:	4013      	ands	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059de:	4a04      	ldr	r2, [pc, #16]	@ (80059f0 <__NVIC_SetPriorityGrouping+0x44>)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	60d3      	str	r3, [r2, #12]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059f8:	4b04      	ldr	r3, [pc, #16]	@ (8005a0c <__NVIC_GetPriorityGrouping+0x18>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	f003 0307 	and.w	r3, r3, #7
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db0b      	blt.n	8005a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	f003 021f 	and.w	r2, r3, #31
 8005a28:	4907      	ldr	r1, [pc, #28]	@ (8005a48 <__NVIC_EnableIRQ+0x38>)
 8005a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	2001      	movs	r0, #1
 8005a32:	fa00 f202 	lsl.w	r2, r0, r2
 8005a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	e000e100 	.word	0xe000e100

08005a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	6039      	str	r1, [r7, #0]
 8005a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	db0a      	blt.n	8005a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	490c      	ldr	r1, [pc, #48]	@ (8005a98 <__NVIC_SetPriority+0x4c>)
 8005a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	440b      	add	r3, r1
 8005a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a74:	e00a      	b.n	8005a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	4908      	ldr	r1, [pc, #32]	@ (8005a9c <__NVIC_SetPriority+0x50>)
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	3b04      	subs	r3, #4
 8005a84:	0112      	lsls	r2, r2, #4
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	440b      	add	r3, r1
 8005a8a:	761a      	strb	r2, [r3, #24]
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	e000e100 	.word	0xe000e100
 8005a9c:	e000ed00 	.word	0xe000ed00

08005aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b089      	sub	sp, #36	@ 0x24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f1c3 0307 	rsb	r3, r3, #7
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	bf28      	it	cs
 8005abe:	2304      	movcs	r3, #4
 8005ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	2b06      	cmp	r3, #6
 8005ac8:	d902      	bls.n	8005ad0 <NVIC_EncodePriority+0x30>
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	3b03      	subs	r3, #3
 8005ace:	e000      	b.n	8005ad2 <NVIC_EncodePriority+0x32>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43da      	mvns	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	43d9      	mvns	r1, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af8:	4313      	orrs	r3, r2
         );
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3724      	adds	r7, #36	@ 0x24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff ff4c 	bl	80059ac <__NVIC_SetPriorityGrouping>
}
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b2a:	f7ff ff63 	bl	80059f4 <__NVIC_GetPriorityGrouping>
 8005b2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	6978      	ldr	r0, [r7, #20]
 8005b36:	f7ff ffb3 	bl	8005aa0 <NVIC_EncodePriority>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff ff82 	bl	8005a4c <__NVIC_SetPriority>
}
 8005b48:	bf00      	nop
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff ff56 	bl	8005a10 <__NVIC_EnableIRQ>
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b7c:	d301      	bcc.n	8005b82 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e00d      	b.n	8005b9e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005b82:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <HAL_SYSTICK_Config+0x40>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005b8a:	4b08      	ldr	r3, [pc, #32]	@ (8005bac <HAL_SYSTICK_Config+0x40>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005b90:	4b06      	ldr	r3, [pc, #24]	@ (8005bac <HAL_SYSTICK_Config+0x40>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a05      	ldr	r2, [pc, #20]	@ (8005bac <HAL_SYSTICK_Config+0x40>)
 8005b96:	f043 0303 	orr.w	r3, r3, #3
 8005b9a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	e000e010 	.word	0xe000e010

08005bb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d844      	bhi.n	8005c48 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be7 	.word	0x08005be7
 8005bc8:	08005c05 	.word	0x08005c05
 8005bcc:	08005c27 	.word	0x08005c27
 8005bd0:	08005c49 	.word	0x08005c49
 8005bd4:	08005bd9 	.word	0x08005bd9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8005c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005bde:	f043 0304 	orr.w	r3, r3, #4
 8005be2:	6013      	str	r3, [r2, #0]
      break;
 8005be4:	e031      	b.n	8005c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005be6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005bec:	f023 0304 	bic.w	r3, r3, #4
 8005bf0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bf8:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005bfa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005c02:	e022      	b.n	8005c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005c04:	4b14      	ldr	r3, [pc, #80]	@ (8005c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a13      	ldr	r2, [pc, #76]	@ (8005c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c0a:	f023 0304 	bic.w	r3, r3, #4
 8005c0e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005c10:	4b12      	ldr	r3, [pc, #72]	@ (8005c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005c1a:	4a10      	ldr	r2, [pc, #64]	@ (8005c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005c24:	e011      	b.n	8005c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005c26:	4b0c      	ldr	r3, [pc, #48]	@ (8005c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8005c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005c2c:	f023 0304 	bic.w	r3, r3, #4
 8005c30:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005c32:	4b0a      	ldr	r3, [pc, #40]	@ (8005c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c38:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005c3c:	4a07      	ldr	r2, [pc, #28]	@ (8005c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005c3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005c46:	e000      	b.n	8005c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005c48:	bf00      	nop
  }
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000e010 	.word	0xe000e010
 8005c5c:	46020c00 	.word	0x46020c00

08005c60 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005c66:	4b19      	ldr	r3, [pc, #100]	@ (8005ccc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005c72:	2304      	movs	r3, #4
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	e021      	b.n	8005cbc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005c78:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8005c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c7e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005c82:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c8a:	d011      	beq.n	8005cb0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c92:	d810      	bhi.n	8005cb6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ca0:	d003      	beq.n	8005caa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005ca2:	e008      	b.n	8005cb6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	607b      	str	r3, [r7, #4]
        break;
 8005ca8:	e008      	b.n	8005cbc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005caa:	2301      	movs	r3, #1
 8005cac:	607b      	str	r3, [r7, #4]
        break;
 8005cae:	e005      	b.n	8005cbc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	607b      	str	r3, [r7, #4]
        break;
 8005cb4:	e002      	b.n	8005cbc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	607b      	str	r3, [r7, #4]
        break;
 8005cba:	bf00      	nop
    }
  }
  return systick_source;
 8005cbc:	687b      	ldr	r3, [r7, #4]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	e000e010 	.word	0xe000e010
 8005cd0:	46020c00 	.word	0x46020c00

08005cd4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005cdc:	f7fd fc2e 	bl	800353c <HAL_GetTick>
 8005ce0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0db      	b.n	8005ea4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a6e      	ldr	r2, [pc, #440]	@ (8005eac <HAL_DMA_Init+0x1d8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	f000 809f 	beq.w	8005e36 <HAL_DMA_Init+0x162>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a6c      	ldr	r2, [pc, #432]	@ (8005eb0 <HAL_DMA_Init+0x1dc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	f000 8099 	beq.w	8005e36 <HAL_DMA_Init+0x162>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6a      	ldr	r2, [pc, #424]	@ (8005eb4 <HAL_DMA_Init+0x1e0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f000 8093 	beq.w	8005e36 <HAL_DMA_Init+0x162>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a68      	ldr	r2, [pc, #416]	@ (8005eb8 <HAL_DMA_Init+0x1e4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f000 808d 	beq.w	8005e36 <HAL_DMA_Init+0x162>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a66      	ldr	r2, [pc, #408]	@ (8005ebc <HAL_DMA_Init+0x1e8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	f000 8087 	beq.w	8005e36 <HAL_DMA_Init+0x162>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a64      	ldr	r2, [pc, #400]	@ (8005ec0 <HAL_DMA_Init+0x1ec>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	f000 8081 	beq.w	8005e36 <HAL_DMA_Init+0x162>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a62      	ldr	r2, [pc, #392]	@ (8005ec4 <HAL_DMA_Init+0x1f0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d07b      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a61      	ldr	r2, [pc, #388]	@ (8005ec8 <HAL_DMA_Init+0x1f4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d076      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5f      	ldr	r2, [pc, #380]	@ (8005ecc <HAL_DMA_Init+0x1f8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d071      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a5e      	ldr	r2, [pc, #376]	@ (8005ed0 <HAL_DMA_Init+0x1fc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d06c      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5c      	ldr	r2, [pc, #368]	@ (8005ed4 <HAL_DMA_Init+0x200>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d067      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ed8 <HAL_DMA_Init+0x204>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d062      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a59      	ldr	r2, [pc, #356]	@ (8005edc <HAL_DMA_Init+0x208>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d05d      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a58      	ldr	r2, [pc, #352]	@ (8005ee0 <HAL_DMA_Init+0x20c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d058      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a56      	ldr	r2, [pc, #344]	@ (8005ee4 <HAL_DMA_Init+0x210>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d053      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a55      	ldr	r2, [pc, #340]	@ (8005ee8 <HAL_DMA_Init+0x214>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d04e      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a53      	ldr	r2, [pc, #332]	@ (8005eec <HAL_DMA_Init+0x218>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d049      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a52      	ldr	r2, [pc, #328]	@ (8005ef0 <HAL_DMA_Init+0x21c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d044      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a50      	ldr	r2, [pc, #320]	@ (8005ef4 <HAL_DMA_Init+0x220>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d03f      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4f      	ldr	r2, [pc, #316]	@ (8005ef8 <HAL_DMA_Init+0x224>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d03a      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8005efc <HAL_DMA_Init+0x228>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d035      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a4c      	ldr	r2, [pc, #304]	@ (8005f00 <HAL_DMA_Init+0x22c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d030      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8005f04 <HAL_DMA_Init+0x230>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02b      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a49      	ldr	r2, [pc, #292]	@ (8005f08 <HAL_DMA_Init+0x234>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d026      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a47      	ldr	r2, [pc, #284]	@ (8005f0c <HAL_DMA_Init+0x238>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d021      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a46      	ldr	r2, [pc, #280]	@ (8005f10 <HAL_DMA_Init+0x23c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d01c      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a44      	ldr	r2, [pc, #272]	@ (8005f14 <HAL_DMA_Init+0x240>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d017      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a43      	ldr	r2, [pc, #268]	@ (8005f18 <HAL_DMA_Init+0x244>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d012      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a41      	ldr	r2, [pc, #260]	@ (8005f1c <HAL_DMA_Init+0x248>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00d      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a40      	ldr	r2, [pc, #256]	@ (8005f20 <HAL_DMA_Init+0x24c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d008      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a3e      	ldr	r2, [pc, #248]	@ (8005f24 <HAL_DMA_Init+0x250>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <HAL_DMA_Init+0x162>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a3d      	ldr	r2, [pc, #244]	@ (8005f28 <HAL_DMA_Init+0x254>)
 8005e34:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695a      	ldr	r2, [r3, #20]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0206 	orr.w	r2, r2, #6
 8005e54:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005e56:	e00f      	b.n	8005e78 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005e58:	f7fd fb70 	bl	800353c <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d908      	bls.n	8005e78 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2210      	movs	r2, #16
 8005e6a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e015      	b.n	8005ea4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e8      	bne.n	8005e58 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fb26 	bl	80064d8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40020050 	.word	0x40020050
 8005eb0:	50020050 	.word	0x50020050
 8005eb4:	400200d0 	.word	0x400200d0
 8005eb8:	500200d0 	.word	0x500200d0
 8005ebc:	40020150 	.word	0x40020150
 8005ec0:	50020150 	.word	0x50020150
 8005ec4:	400201d0 	.word	0x400201d0
 8005ec8:	500201d0 	.word	0x500201d0
 8005ecc:	40020250 	.word	0x40020250
 8005ed0:	50020250 	.word	0x50020250
 8005ed4:	400202d0 	.word	0x400202d0
 8005ed8:	500202d0 	.word	0x500202d0
 8005edc:	40020350 	.word	0x40020350
 8005ee0:	50020350 	.word	0x50020350
 8005ee4:	400203d0 	.word	0x400203d0
 8005ee8:	500203d0 	.word	0x500203d0
 8005eec:	40020450 	.word	0x40020450
 8005ef0:	50020450 	.word	0x50020450
 8005ef4:	400204d0 	.word	0x400204d0
 8005ef8:	500204d0 	.word	0x500204d0
 8005efc:	40020550 	.word	0x40020550
 8005f00:	50020550 	.word	0x50020550
 8005f04:	400205d0 	.word	0x400205d0
 8005f08:	500205d0 	.word	0x500205d0
 8005f0c:	40020650 	.word	0x40020650
 8005f10:	50020650 	.word	0x50020650
 8005f14:	400206d0 	.word	0x400206d0
 8005f18:	500206d0 	.word	0x500206d0
 8005f1c:	40020750 	.word	0x40020750
 8005f20:	50020750 	.word	0x50020750
 8005f24:	400207d0 	.word	0x400207d0
 8005f28:	500207d0 	.word	0x500207d0

08005f2c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e04f      	b.n	8005fe4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_DMA_Start_IT+0x26>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e048      	b.n	8005fe4 <HAL_DMA_Start_IT+0xb8>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d136      	bne.n	8005fd4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fa86 	bl	800648c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005f8e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fa6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fbe:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695a      	ldr	r2, [r3, #20]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e007      	b.n	8005fe4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2240      	movs	r2, #64	@ 0x40
 8005fd8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005ff4:	f7fd faa2 	bl	800353c <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e06b      	b.n	80060dc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d008      	beq.n	8006022 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e05c      	b.n	80060dc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0204 	orr.w	r2, r2, #4
 8006030:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2205      	movs	r2, #5
 8006036:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800603a:	e020      	b.n	800607e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800603c:	f7fd fa7e 	bl	800353c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b05      	cmp	r3, #5
 8006048:	d919      	bls.n	800607e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604e:	f043 0210 	orr.w	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2203      	movs	r2, #3
 800605a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800606e:	2201      	movs	r2, #1
 8006070:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e02e      	b.n	80060dc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0d7      	beq.n	800603c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0202 	orr.w	r2, r2, #2
 800609a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2204      	movs	r2, #4
 80060a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80060ac:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c6:	2201      	movs	r2, #1
 80060c8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2200      	movs	r2, #0
 80060d0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e019      	b.n	800612a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d004      	beq.n	800610c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e00e      	b.n	800612a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2204      	movs	r2, #4
 8006110:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b086      	sub	sp, #24
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006146:	f023 030f 	bic.w	r3, r3, #15
 800614a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006154:	3b50      	subs	r3, #80	@ 0x50
 8006156:	09db      	lsrs	r3, r3, #7
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	2201      	movs	r2, #1
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4013      	ands	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 813b 	beq.w	80063ec <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006180:	2b00      	cmp	r3, #0
 8006182:	d011      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800619a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a0:	f043 0201 	orr.w	r2, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d011      	beq.n	80061da <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061cc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d2:	f043 0202 	orr.w	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d011      	beq.n	800620c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80061fe:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006204:	f043 0204 	orr.w	r2, r3, #4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d011      	beq.n	800623e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006230:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006236:	f043 0208 	orr.w	r2, r3, #8
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006248:	2b00      	cmp	r3, #0
 800624a:	d013      	beq.n	8006274 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006262:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04c      	beq.n	800631c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d045      	beq.n	800631c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006298:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d12e      	bne.n	8006304 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062b4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695a      	ldr	r2, [r3, #20]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0202 	orr.w	r2, r2, #2
 80062c4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062de:	2201      	movs	r2, #1
 80062e0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d07a      	beq.n	80063f0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
        }

        return;
 8006302:	e075      	b.n	80063f0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2205      	movs	r2, #5
 8006308:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d039      	beq.n	800639e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d032      	beq.n	800639e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800633c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006340:	2b00      	cmp	r3, #0
 8006342:	d012      	beq.n	800636a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d116      	bne.n	800637c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006354:	2b00      	cmp	r3, #0
 8006356:	d111      	bne.n	800637c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006364:	2201      	movs	r2, #1
 8006366:	731a      	strb	r2, [r3, #12]
 8006368:	e008      	b.n	800637c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006384:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d025      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695a      	ldr	r2, [r3, #20]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f042 0202 	orr.w	r2, r2, #2
 80063b4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ce:	2201      	movs	r2, #1
 80063d0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
 80063ea:	e002      	b.n	80063f2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80063ec:	bf00      	nop
 80063ee:	e000      	b.n	80063f2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80063f0:	bf00      	nop
    }
  }
}
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006406:	b2db      	uxtb	r3, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e02b      	b.n	8006480 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006430:	f023 030f 	bic.w	r3, r3, #15
 8006434:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800643e:	3b50      	subs	r3, #80	@ 0x50
 8006440:	09db      	lsrs	r3, r3, #7
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	2201      	movs	r2, #1
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d012      	beq.n	800647e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f003 0311 	and.w	r3, r3, #17
 800645e:	2b11      	cmp	r3, #17
 8006460:	d106      	bne.n	8006470 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	431a      	orrs	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	e006      	b.n	800647e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	43db      	mvns	r3, r3
 8006478:	401a      	ands	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a0:	0c1b      	lsrs	r3, r3, #16
 80064a2:	041b      	lsls	r3, r3, #16
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	b291      	uxth	r1, r2
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	430b      	orrs	r3, r1
 80064ae:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80064b8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695a      	ldr	r2, [r3, #20]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a53      	ldr	r2, [pc, #332]	@ (8006664 <DMA_Init+0x18c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	f000 80a0 	beq.w	800665e <DMA_Init+0x186>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a51      	ldr	r2, [pc, #324]	@ (8006668 <DMA_Init+0x190>)
 8006524:	4293      	cmp	r3, r2
 8006526:	f000 809a 	beq.w	800665e <DMA_Init+0x186>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a4f      	ldr	r2, [pc, #316]	@ (800666c <DMA_Init+0x194>)
 8006530:	4293      	cmp	r3, r2
 8006532:	f000 8094 	beq.w	800665e <DMA_Init+0x186>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a4d      	ldr	r2, [pc, #308]	@ (8006670 <DMA_Init+0x198>)
 800653c:	4293      	cmp	r3, r2
 800653e:	f000 808e 	beq.w	800665e <DMA_Init+0x186>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a4b      	ldr	r2, [pc, #300]	@ (8006674 <DMA_Init+0x19c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	f000 8088 	beq.w	800665e <DMA_Init+0x186>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a49      	ldr	r2, [pc, #292]	@ (8006678 <DMA_Init+0x1a0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	f000 8082 	beq.w	800665e <DMA_Init+0x186>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a47      	ldr	r2, [pc, #284]	@ (800667c <DMA_Init+0x1a4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d07c      	beq.n	800665e <DMA_Init+0x186>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a45      	ldr	r2, [pc, #276]	@ (8006680 <DMA_Init+0x1a8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d077      	beq.n	800665e <DMA_Init+0x186>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a44      	ldr	r2, [pc, #272]	@ (8006684 <DMA_Init+0x1ac>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d072      	beq.n	800665e <DMA_Init+0x186>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a42      	ldr	r2, [pc, #264]	@ (8006688 <DMA_Init+0x1b0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d06d      	beq.n	800665e <DMA_Init+0x186>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a41      	ldr	r2, [pc, #260]	@ (800668c <DMA_Init+0x1b4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d068      	beq.n	800665e <DMA_Init+0x186>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3f      	ldr	r2, [pc, #252]	@ (8006690 <DMA_Init+0x1b8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d063      	beq.n	800665e <DMA_Init+0x186>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3e      	ldr	r2, [pc, #248]	@ (8006694 <DMA_Init+0x1bc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d05e      	beq.n	800665e <DMA_Init+0x186>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006698 <DMA_Init+0x1c0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d059      	beq.n	800665e <DMA_Init+0x186>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a3b      	ldr	r2, [pc, #236]	@ (800669c <DMA_Init+0x1c4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d054      	beq.n	800665e <DMA_Init+0x186>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a39      	ldr	r2, [pc, #228]	@ (80066a0 <DMA_Init+0x1c8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d04f      	beq.n	800665e <DMA_Init+0x186>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a38      	ldr	r2, [pc, #224]	@ (80066a4 <DMA_Init+0x1cc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d04a      	beq.n	800665e <DMA_Init+0x186>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a36      	ldr	r2, [pc, #216]	@ (80066a8 <DMA_Init+0x1d0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d045      	beq.n	800665e <DMA_Init+0x186>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a35      	ldr	r2, [pc, #212]	@ (80066ac <DMA_Init+0x1d4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d040      	beq.n	800665e <DMA_Init+0x186>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a33      	ldr	r2, [pc, #204]	@ (80066b0 <DMA_Init+0x1d8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d03b      	beq.n	800665e <DMA_Init+0x186>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a32      	ldr	r2, [pc, #200]	@ (80066b4 <DMA_Init+0x1dc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d036      	beq.n	800665e <DMA_Init+0x186>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a30      	ldr	r2, [pc, #192]	@ (80066b8 <DMA_Init+0x1e0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d031      	beq.n	800665e <DMA_Init+0x186>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a2f      	ldr	r2, [pc, #188]	@ (80066bc <DMA_Init+0x1e4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d02c      	beq.n	800665e <DMA_Init+0x186>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a2d      	ldr	r2, [pc, #180]	@ (80066c0 <DMA_Init+0x1e8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d027      	beq.n	800665e <DMA_Init+0x186>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2c      	ldr	r2, [pc, #176]	@ (80066c4 <DMA_Init+0x1ec>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d022      	beq.n	800665e <DMA_Init+0x186>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2a      	ldr	r2, [pc, #168]	@ (80066c8 <DMA_Init+0x1f0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d01d      	beq.n	800665e <DMA_Init+0x186>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a29      	ldr	r2, [pc, #164]	@ (80066cc <DMA_Init+0x1f4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d018      	beq.n	800665e <DMA_Init+0x186>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a27      	ldr	r2, [pc, #156]	@ (80066d0 <DMA_Init+0x1f8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d013      	beq.n	800665e <DMA_Init+0x186>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a26      	ldr	r2, [pc, #152]	@ (80066d4 <DMA_Init+0x1fc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00e      	beq.n	800665e <DMA_Init+0x186>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a24      	ldr	r2, [pc, #144]	@ (80066d8 <DMA_Init+0x200>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d009      	beq.n	800665e <DMA_Init+0x186>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a23      	ldr	r2, [pc, #140]	@ (80066dc <DMA_Init+0x204>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d004      	beq.n	800665e <DMA_Init+0x186>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a21      	ldr	r2, [pc, #132]	@ (80066e0 <DMA_Init+0x208>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d142      	bne.n	80066e4 <DMA_Init+0x20c>
 800665e:	2301      	movs	r3, #1
 8006660:	e041      	b.n	80066e6 <DMA_Init+0x20e>
 8006662:	bf00      	nop
 8006664:	40020050 	.word	0x40020050
 8006668:	50020050 	.word	0x50020050
 800666c:	400200d0 	.word	0x400200d0
 8006670:	500200d0 	.word	0x500200d0
 8006674:	40020150 	.word	0x40020150
 8006678:	50020150 	.word	0x50020150
 800667c:	400201d0 	.word	0x400201d0
 8006680:	500201d0 	.word	0x500201d0
 8006684:	40020250 	.word	0x40020250
 8006688:	50020250 	.word	0x50020250
 800668c:	400202d0 	.word	0x400202d0
 8006690:	500202d0 	.word	0x500202d0
 8006694:	40020350 	.word	0x40020350
 8006698:	50020350 	.word	0x50020350
 800669c:	400203d0 	.word	0x400203d0
 80066a0:	500203d0 	.word	0x500203d0
 80066a4:	40020450 	.word	0x40020450
 80066a8:	50020450 	.word	0x50020450
 80066ac:	400204d0 	.word	0x400204d0
 80066b0:	500204d0 	.word	0x500204d0
 80066b4:	40020550 	.word	0x40020550
 80066b8:	50020550 	.word	0x50020550
 80066bc:	400205d0 	.word	0x400205d0
 80066c0:	500205d0 	.word	0x500205d0
 80066c4:	40020650 	.word	0x40020650
 80066c8:	50020650 	.word	0x50020650
 80066cc:	400206d0 	.word	0x400206d0
 80066d0:	500206d0 	.word	0x500206d0
 80066d4:	40020750 	.word	0x40020750
 80066d8:	50020750 	.word	0x50020750
 80066dc:	400207d0 	.word	0x400207d0
 80066e0:	500207d0 	.word	0x500207d0
 80066e4:	2300      	movs	r3, #0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d012      	beq.n	8006710 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f2:	3b01      	subs	r3, #1
 80066f4:	051b      	lsls	r3, r3, #20
 80066f6:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80066fa:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	3b01      	subs	r3, #1
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006708:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006716:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	430a      	orrs	r2, r1
 8006722:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006742:	f040 80b0 	bne.w	80068a6 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a82      	ldr	r2, [pc, #520]	@ (8006954 <DMA_Init+0x47c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	f000 80a0 	beq.w	8006892 <DMA_Init+0x3ba>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a80      	ldr	r2, [pc, #512]	@ (8006958 <DMA_Init+0x480>)
 8006758:	4293      	cmp	r3, r2
 800675a:	f000 809a 	beq.w	8006892 <DMA_Init+0x3ba>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a7e      	ldr	r2, [pc, #504]	@ (800695c <DMA_Init+0x484>)
 8006764:	4293      	cmp	r3, r2
 8006766:	f000 8094 	beq.w	8006892 <DMA_Init+0x3ba>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a7c      	ldr	r2, [pc, #496]	@ (8006960 <DMA_Init+0x488>)
 8006770:	4293      	cmp	r3, r2
 8006772:	f000 808e 	beq.w	8006892 <DMA_Init+0x3ba>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a7a      	ldr	r2, [pc, #488]	@ (8006964 <DMA_Init+0x48c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	f000 8088 	beq.w	8006892 <DMA_Init+0x3ba>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a78      	ldr	r2, [pc, #480]	@ (8006968 <DMA_Init+0x490>)
 8006788:	4293      	cmp	r3, r2
 800678a:	f000 8082 	beq.w	8006892 <DMA_Init+0x3ba>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a76      	ldr	r2, [pc, #472]	@ (800696c <DMA_Init+0x494>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d07c      	beq.n	8006892 <DMA_Init+0x3ba>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a74      	ldr	r2, [pc, #464]	@ (8006970 <DMA_Init+0x498>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d077      	beq.n	8006892 <DMA_Init+0x3ba>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a73      	ldr	r2, [pc, #460]	@ (8006974 <DMA_Init+0x49c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d072      	beq.n	8006892 <DMA_Init+0x3ba>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a71      	ldr	r2, [pc, #452]	@ (8006978 <DMA_Init+0x4a0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d06d      	beq.n	8006892 <DMA_Init+0x3ba>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a70      	ldr	r2, [pc, #448]	@ (800697c <DMA_Init+0x4a4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d068      	beq.n	8006892 <DMA_Init+0x3ba>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006980 <DMA_Init+0x4a8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d063      	beq.n	8006892 <DMA_Init+0x3ba>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006984 <DMA_Init+0x4ac>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d05e      	beq.n	8006892 <DMA_Init+0x3ba>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006988 <DMA_Init+0x4b0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d059      	beq.n	8006892 <DMA_Init+0x3ba>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a6a      	ldr	r2, [pc, #424]	@ (800698c <DMA_Init+0x4b4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d054      	beq.n	8006892 <DMA_Init+0x3ba>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a68      	ldr	r2, [pc, #416]	@ (8006990 <DMA_Init+0x4b8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d04f      	beq.n	8006892 <DMA_Init+0x3ba>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a67      	ldr	r2, [pc, #412]	@ (8006994 <DMA_Init+0x4bc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d04a      	beq.n	8006892 <DMA_Init+0x3ba>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a65      	ldr	r2, [pc, #404]	@ (8006998 <DMA_Init+0x4c0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d045      	beq.n	8006892 <DMA_Init+0x3ba>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a64      	ldr	r2, [pc, #400]	@ (800699c <DMA_Init+0x4c4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d040      	beq.n	8006892 <DMA_Init+0x3ba>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a62      	ldr	r2, [pc, #392]	@ (80069a0 <DMA_Init+0x4c8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d03b      	beq.n	8006892 <DMA_Init+0x3ba>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a61      	ldr	r2, [pc, #388]	@ (80069a4 <DMA_Init+0x4cc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d036      	beq.n	8006892 <DMA_Init+0x3ba>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a5f      	ldr	r2, [pc, #380]	@ (80069a8 <DMA_Init+0x4d0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d031      	beq.n	8006892 <DMA_Init+0x3ba>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a5e      	ldr	r2, [pc, #376]	@ (80069ac <DMA_Init+0x4d4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d02c      	beq.n	8006892 <DMA_Init+0x3ba>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a5c      	ldr	r2, [pc, #368]	@ (80069b0 <DMA_Init+0x4d8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d027      	beq.n	8006892 <DMA_Init+0x3ba>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a5b      	ldr	r2, [pc, #364]	@ (80069b4 <DMA_Init+0x4dc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d022      	beq.n	8006892 <DMA_Init+0x3ba>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a59      	ldr	r2, [pc, #356]	@ (80069b8 <DMA_Init+0x4e0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d01d      	beq.n	8006892 <DMA_Init+0x3ba>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a58      	ldr	r2, [pc, #352]	@ (80069bc <DMA_Init+0x4e4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d018      	beq.n	8006892 <DMA_Init+0x3ba>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a56      	ldr	r2, [pc, #344]	@ (80069c0 <DMA_Init+0x4e8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <DMA_Init+0x3ba>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a55      	ldr	r2, [pc, #340]	@ (80069c4 <DMA_Init+0x4ec>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00e      	beq.n	8006892 <DMA_Init+0x3ba>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a53      	ldr	r2, [pc, #332]	@ (80069c8 <DMA_Init+0x4f0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d009      	beq.n	8006892 <DMA_Init+0x3ba>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a52      	ldr	r2, [pc, #328]	@ (80069cc <DMA_Init+0x4f4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <DMA_Init+0x3ba>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a50      	ldr	r2, [pc, #320]	@ (80069d0 <DMA_Init+0x4f8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d101      	bne.n	8006896 <DMA_Init+0x3be>
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <DMA_Init+0x3c0>
 8006896:	2300      	movs	r3, #0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00d      	beq.n	80068b8 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	e008      	b.n	80068b8 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ae:	d103      	bne.n	80068b8 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068b6:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068be:	4b45      	ldr	r3, [pc, #276]	@ (80069d4 <DMA_Init+0x4fc>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2200      	movs	r2, #0
 80068d2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a36      	ldr	r2, [pc, #216]	@ (80069b4 <DMA_Init+0x4dc>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d022      	beq.n	8006924 <DMA_Init+0x44c>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a35      	ldr	r2, [pc, #212]	@ (80069b8 <DMA_Init+0x4e0>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d01d      	beq.n	8006924 <DMA_Init+0x44c>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a33      	ldr	r2, [pc, #204]	@ (80069bc <DMA_Init+0x4e4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d018      	beq.n	8006924 <DMA_Init+0x44c>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a32      	ldr	r2, [pc, #200]	@ (80069c0 <DMA_Init+0x4e8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d013      	beq.n	8006924 <DMA_Init+0x44c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a30      	ldr	r2, [pc, #192]	@ (80069c4 <DMA_Init+0x4ec>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00e      	beq.n	8006924 <DMA_Init+0x44c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a2f      	ldr	r2, [pc, #188]	@ (80069c8 <DMA_Init+0x4f0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d009      	beq.n	8006924 <DMA_Init+0x44c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a2d      	ldr	r2, [pc, #180]	@ (80069cc <DMA_Init+0x4f4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d004      	beq.n	8006924 <DMA_Init+0x44c>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a2c      	ldr	r2, [pc, #176]	@ (80069d0 <DMA_Init+0x4f8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d101      	bne.n	8006928 <DMA_Init+0x450>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <DMA_Init+0x452>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2200      	movs	r2, #0
 8006934:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2200      	movs	r2, #0
 800693c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2200      	movs	r2, #0
 8006944:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006946:	bf00      	nop
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40020050 	.word	0x40020050
 8006958:	50020050 	.word	0x50020050
 800695c:	400200d0 	.word	0x400200d0
 8006960:	500200d0 	.word	0x500200d0
 8006964:	40020150 	.word	0x40020150
 8006968:	50020150 	.word	0x50020150
 800696c:	400201d0 	.word	0x400201d0
 8006970:	500201d0 	.word	0x500201d0
 8006974:	40020250 	.word	0x40020250
 8006978:	50020250 	.word	0x50020250
 800697c:	400202d0 	.word	0x400202d0
 8006980:	500202d0 	.word	0x500202d0
 8006984:	40020350 	.word	0x40020350
 8006988:	50020350 	.word	0x50020350
 800698c:	400203d0 	.word	0x400203d0
 8006990:	500203d0 	.word	0x500203d0
 8006994:	40020450 	.word	0x40020450
 8006998:	50020450 	.word	0x50020450
 800699c:	400204d0 	.word	0x400204d0
 80069a0:	500204d0 	.word	0x500204d0
 80069a4:	40020550 	.word	0x40020550
 80069a8:	50020550 	.word	0x50020550
 80069ac:	400205d0 	.word	0x400205d0
 80069b0:	500205d0 	.word	0x500205d0
 80069b4:	40020650 	.word	0x40020650
 80069b8:	50020650 	.word	0x50020650
 80069bc:	400206d0 	.word	0x400206d0
 80069c0:	500206d0 	.word	0x500206d0
 80069c4:	40020750 	.word	0x40020750
 80069c8:	50020750 	.word	0x50020750
 80069cc:	400207d0 	.word	0x400207d0
 80069d0:	500207d0 	.word	0x500207d0
 80069d4:	3c803180 	.word	0x3c803180

080069d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e053      	b.n	8006a92 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fb fd78 	bl	80024f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6851      	ldr	r1, [r2, #4]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	69d2      	ldr	r2, [r2, #28]
 8006a22:	4311      	orrs	r1, r2
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a32:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006a36:	f023 0301 	bic.w	r3, r3, #1
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6891      	ldr	r1, [r2, #8]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6992      	ldr	r2, [r2, #24]
 8006a42:	4311      	orrs	r1, r2
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6812      	ldr	r2, [r2, #0]
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a52:	0c1b      	lsrs	r3, r3, #16
 8006a54:	041b      	lsls	r3, r3, #16
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68d1      	ldr	r1, [r2, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	430b      	orrs	r3, r1
 8006a60:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a68:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	051a      	lsls	r2, r3, #20
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	055b      	lsls	r3, r3, #21
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_DMA2D_ConfigLayer+0x24>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e092      	b.n	8006be6 <HAL_DMA2D_ConfigLayer+0x14a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	3328      	adds	r3, #40	@ 0x28
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	4413      	add	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	041b      	lsls	r3, r3, #16
 8006aec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006af4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006b00:	4b3c      	ldr	r3, [pc, #240]	@ (8006bf4 <HAL_DMA2D_ConfigLayer+0x158>)
 8006b02:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b0a      	cmp	r3, #10
 8006b0a:	d003      	beq.n	8006b14 <HAL_DMA2D_ConfigLayer+0x78>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b09      	cmp	r3, #9
 8006b12:	d107      	bne.n	8006b24 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	e005      	b.n	8006b30 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	061b      	lsls	r3, r3, #24
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d120      	bne.n	8006b78 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	ea02 0103 	and.w	r1, r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b0a      	cmp	r3, #10
 8006b5e:	d003      	beq.n	8006b68 <HAL_DMA2D_ConfigLayer+0xcc>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b09      	cmp	r3, #9
 8006b66:	d135      	bne.n	8006bd4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006b74:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b76:	e02d      	b.n	8006bd4 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b0b      	cmp	r3, #11
 8006b7e:	d109      	bne.n	8006b94 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	049b      	lsls	r3, r3, #18
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006b92:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69da      	ldr	r2, [r3, #28]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	ea02 0103 	and.w	r1, r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b0a      	cmp	r3, #10
 8006bbc:	d003      	beq.n	8006bc6 <HAL_DMA2D_ConfigLayer+0x12a>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b09      	cmp	r3, #9
 8006bc4:	d106      	bne.n	8006bd4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006bd2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	ff33000f 	.word	0xff33000f

08006bf8 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006c00:	f7fc fc9c 	bl	800353c <HAL_GetTick>
 8006c04:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0db      	b.n	8006dc8 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a6e      	ldr	r2, [pc, #440]	@ (8006dd0 <HAL_DMAEx_List_Init+0x1d8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	f000 809f 	beq.w	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a6c      	ldr	r2, [pc, #432]	@ (8006dd4 <HAL_DMAEx_List_Init+0x1dc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	f000 8099 	beq.w	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6a      	ldr	r2, [pc, #424]	@ (8006dd8 <HAL_DMAEx_List_Init+0x1e0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	f000 8093 	beq.w	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a68      	ldr	r2, [pc, #416]	@ (8006ddc <HAL_DMAEx_List_Init+0x1e4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	f000 808d 	beq.w	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a66      	ldr	r2, [pc, #408]	@ (8006de0 <HAL_DMAEx_List_Init+0x1e8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	f000 8087 	beq.w	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a64      	ldr	r2, [pc, #400]	@ (8006de4 <HAL_DMAEx_List_Init+0x1ec>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	f000 8081 	beq.w	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a62      	ldr	r2, [pc, #392]	@ (8006de8 <HAL_DMAEx_List_Init+0x1f0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d07b      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a61      	ldr	r2, [pc, #388]	@ (8006dec <HAL_DMAEx_List_Init+0x1f4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d076      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a5f      	ldr	r2, [pc, #380]	@ (8006df0 <HAL_DMAEx_List_Init+0x1f8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d071      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8006df4 <HAL_DMAEx_List_Init+0x1fc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d06c      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a5c      	ldr	r2, [pc, #368]	@ (8006df8 <HAL_DMAEx_List_Init+0x200>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d067      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8006dfc <HAL_DMAEx_List_Init+0x204>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d062      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a59      	ldr	r2, [pc, #356]	@ (8006e00 <HAL_DMAEx_List_Init+0x208>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d05d      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a58      	ldr	r2, [pc, #352]	@ (8006e04 <HAL_DMAEx_List_Init+0x20c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d058      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a56      	ldr	r2, [pc, #344]	@ (8006e08 <HAL_DMAEx_List_Init+0x210>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d053      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a55      	ldr	r2, [pc, #340]	@ (8006e0c <HAL_DMAEx_List_Init+0x214>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d04e      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a53      	ldr	r2, [pc, #332]	@ (8006e10 <HAL_DMAEx_List_Init+0x218>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d049      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a52      	ldr	r2, [pc, #328]	@ (8006e14 <HAL_DMAEx_List_Init+0x21c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d044      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a50      	ldr	r2, [pc, #320]	@ (8006e18 <HAL_DMAEx_List_Init+0x220>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d03f      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a4f      	ldr	r2, [pc, #316]	@ (8006e1c <HAL_DMAEx_List_Init+0x224>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d03a      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a4d      	ldr	r2, [pc, #308]	@ (8006e20 <HAL_DMAEx_List_Init+0x228>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d035      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8006e24 <HAL_DMAEx_List_Init+0x22c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d030      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8006e28 <HAL_DMAEx_List_Init+0x230>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d02b      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a49      	ldr	r2, [pc, #292]	@ (8006e2c <HAL_DMAEx_List_Init+0x234>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d026      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a47      	ldr	r2, [pc, #284]	@ (8006e30 <HAL_DMAEx_List_Init+0x238>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d021      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a46      	ldr	r2, [pc, #280]	@ (8006e34 <HAL_DMAEx_List_Init+0x23c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d01c      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a44      	ldr	r2, [pc, #272]	@ (8006e38 <HAL_DMAEx_List_Init+0x240>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d017      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a43      	ldr	r2, [pc, #268]	@ (8006e3c <HAL_DMAEx_List_Init+0x244>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d012      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a41      	ldr	r2, [pc, #260]	@ (8006e40 <HAL_DMAEx_List_Init+0x248>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00d      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a40      	ldr	r2, [pc, #256]	@ (8006e44 <HAL_DMAEx_List_Init+0x24c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d008      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e48 <HAL_DMAEx_List_Init+0x250>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <HAL_DMAEx_List_Init+0x162>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a3d      	ldr	r2, [pc, #244]	@ (8006e4c <HAL_DMAEx_List_Init+0x254>)
 8006d58:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	695a      	ldr	r2, [r3, #20]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0206 	orr.w	r2, r2, #6
 8006d78:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006d7a:	e00f      	b.n	8006d9c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006d7c:	f7fc fbde 	bl	800353c <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b05      	cmp	r3, #5
 8006d88:	d908      	bls.n	8006d9c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2210      	movs	r2, #16
 8006d8e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2203      	movs	r2, #3
 8006d94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e015      	b.n	8006dc8 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e8      	bne.n	8006d7c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fae0 	bl	8007370 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40020050 	.word	0x40020050
 8006dd4:	50020050 	.word	0x50020050
 8006dd8:	400200d0 	.word	0x400200d0
 8006ddc:	500200d0 	.word	0x500200d0
 8006de0:	40020150 	.word	0x40020150
 8006de4:	50020150 	.word	0x50020150
 8006de8:	400201d0 	.word	0x400201d0
 8006dec:	500201d0 	.word	0x500201d0
 8006df0:	40020250 	.word	0x40020250
 8006df4:	50020250 	.word	0x50020250
 8006df8:	400202d0 	.word	0x400202d0
 8006dfc:	500202d0 	.word	0x500202d0
 8006e00:	40020350 	.word	0x40020350
 8006e04:	50020350 	.word	0x50020350
 8006e08:	400203d0 	.word	0x400203d0
 8006e0c:	500203d0 	.word	0x500203d0
 8006e10:	40020450 	.word	0x40020450
 8006e14:	50020450 	.word	0x50020450
 8006e18:	400204d0 	.word	0x400204d0
 8006e1c:	500204d0 	.word	0x500204d0
 8006e20:	40020550 	.word	0x40020550
 8006e24:	50020550 	.word	0x50020550
 8006e28:	400205d0 	.word	0x400205d0
 8006e2c:	500205d0 	.word	0x500205d0
 8006e30:	40020650 	.word	0x40020650
 8006e34:	50020650 	.word	0x50020650
 8006e38:	400206d0 	.word	0x400206d0
 8006e3c:	500206d0 	.word	0x500206d0
 8006e40:	40020750 	.word	0x40020750
 8006e44:	50020750 	.word	0x50020750
 8006e48:	400207d0 	.word	0x400207d0
 8006e4c:	500207d0 	.word	0x500207d0

08006e50 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_DMAEx_List_Start_IT+0x16>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e082      	b.n	8006f70 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006e70:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e7c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d005      	beq.n	8006e90 <HAL_DMAEx_List_Start_IT+0x40>
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d16a      	bne.n	8006f60 <HAL_DMAEx_List_Start_IT+0x110>
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d067      	beq.n	8006f60 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d157      	bne.n	8006f4c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d101      	bne.n	8006eaa <HAL_DMAEx_List_Start_IT+0x5a>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e062      	b.n	8006f70 <HAL_DMAEx_List_Start_IT+0x120>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ecc:	2200      	movs	r2, #0
 8006ece:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006ede:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d007      	beq.n	8006ef8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695a      	ldr	r2, [r3, #20]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ef6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695a      	ldr	r2, [r3, #20]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f0e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f107 010c 	add.w	r1, r7, #12
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fe47 	bl	8007bb0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	0c0b      	lsrs	r3, r1, #16
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006f40:	4013      	ands	r3, r2
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6812      	ldr	r2, [r2, #0]
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e007      	b.n	8006f70 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2240      	movs	r2, #64	@ 0x40
 8006f64:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <HAL_DMAEx_List_BuildNode+0x16>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e004      	b.n	8006f9c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb43 	bl	8007620 <DMA_List_BuildNode>

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e004      	b.n	8006fc8 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fc7f 	bl	80078c4 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08c      	sub	sp, #48	@ 0x30
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_DMAEx_List_InsertNode+0x18>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0b6      	b.n	800715a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d104      	bne.n	8006ffe <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e0ad      	b.n	800715a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fd66 	bl	8007ad8 <DMA_List_CheckNodesBaseAddresses>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d004      	beq.n	800701c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2205      	movs	r2, #5
 8007016:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e09e      	b.n	800715a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fd87 	bl	8007b38 <DMA_List_CheckNodesTypes>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d004      	beq.n	800703a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2204      	movs	r2, #4
 8007034:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e08f      	b.n	800715a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2202      	movs	r2, #2
 800703e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8007046:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800704a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fdad 	bl	8007bb0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d11a      	bne.n	8007094 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	609a      	str	r2, [r3, #8]
 8007070:	e06c      	b.n	800714c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800707e:	4013      	ands	r3, r2
 8007080:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007084:	4319      	orrs	r1, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2202      	movs	r2, #2
 8007090:	609a      	str	r2, [r3, #8]
 8007092:	e05b      	b.n	800714c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10f      	bne.n	80070ba <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80070a4:	4013      	ands	r3, r2
 80070a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070aa:	4319      	orrs	r1, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e043      	b.n	8007142 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80070be:	f107 0314 	add.w	r3, r7, #20
 80070c2:	461a      	mov	r2, r3
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fda2 	bl	8007c10 <DMA_List_FindNode>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d132      	bne.n	8007138 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d11a      	bne.n	8007112 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	461a      	mov	r2, r3
 80070ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80070ee:	4013      	ands	r3, r2
 80070f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070f4:	4319      	orrs	r1, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007102:	4013      	ands	r3, r2
 8007104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007108:	4319      	orrs	r1, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007110:	e017      	b.n	8007142 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8007112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007114:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007128:	4013      	ands	r3, r2
 800712a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800712c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800712e:	4319      	orrs	r1, r3
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007136:	e004      	b.n	8007142 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2206      	movs	r2, #6
 800713c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e00b      	b.n	800715a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3730      	adds	r7, #48	@ 0x30
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b08a      	sub	sp, #40	@ 0x28
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e052      	b.n	800721a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e049      	b.n	800721a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00c      	beq.n	80071a8 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d101      	bne.n	800719e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	e03d      	b.n	800721a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2204      	movs	r2, #4
 80071a2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e038      	b.n	800721a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d104      	bne.n	80071ba <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2204      	movs	r2, #4
 80071b4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e02f      	b.n	800721a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f107 0220 	add.w	r2, r7, #32
 80071ce:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fcec 	bl	8007bb0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80071dc:	f107 030c 	add.w	r3, r7, #12
 80071e0:	461a      	mov	r2, r3
 80071e2:	2100      	movs	r1, #0
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fd13 	bl	8007c10 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80071f4:	4013      	ands	r3, r2
 80071f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	4610      	mov	r0, r2
 80071fc:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80071fe:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007200:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3728      	adds	r7, #40	@ 0x28
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_DMAEx_List_LinkQ+0x16>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e072      	b.n	8007324 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007244:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d002      	beq.n	8007258 <HAL_DMAEx_List_LinkQ+0x34>
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2b05      	cmp	r3, #5
 8007256:	d108      	bne.n	800726a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2240      	movs	r2, #64	@ 0x40
 800725c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e05c      	b.n	8007324 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	7b1b      	ldrb	r3, [r3, #12]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d104      	bne.n	800727e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2201      	movs	r2, #1
 8007278:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e052      	b.n	8007324 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a2b      	ldr	r2, [pc, #172]	@ (8007330 <HAL_DMAEx_List_LinkQ+0x10c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d022      	beq.n	80072ce <HAL_DMAEx_List_LinkQ+0xaa>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a29      	ldr	r2, [pc, #164]	@ (8007334 <HAL_DMAEx_List_LinkQ+0x110>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01d      	beq.n	80072ce <HAL_DMAEx_List_LinkQ+0xaa>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a28      	ldr	r2, [pc, #160]	@ (8007338 <HAL_DMAEx_List_LinkQ+0x114>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d018      	beq.n	80072ce <HAL_DMAEx_List_LinkQ+0xaa>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a26      	ldr	r2, [pc, #152]	@ (800733c <HAL_DMAEx_List_LinkQ+0x118>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d013      	beq.n	80072ce <HAL_DMAEx_List_LinkQ+0xaa>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a25      	ldr	r2, [pc, #148]	@ (8007340 <HAL_DMAEx_List_LinkQ+0x11c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00e      	beq.n	80072ce <HAL_DMAEx_List_LinkQ+0xaa>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a23      	ldr	r2, [pc, #140]	@ (8007344 <HAL_DMAEx_List_LinkQ+0x120>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d009      	beq.n	80072ce <HAL_DMAEx_List_LinkQ+0xaa>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a22      	ldr	r2, [pc, #136]	@ (8007348 <HAL_DMAEx_List_LinkQ+0x124>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <HAL_DMAEx_List_LinkQ+0xaa>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a20      	ldr	r2, [pc, #128]	@ (800734c <HAL_DMAEx_List_LinkQ+0x128>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d101      	bne.n	80072d2 <HAL_DMAEx_List_LinkQ+0xae>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <HAL_DMAEx_List_LinkQ+0xb0>
 80072d2:	2300      	movs	r3, #0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10b      	bne.n	80072f0 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2203      	movs	r2, #3
 80072ea:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e019      	b.n	8007324 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f4:	2b81      	cmp	r3, #129	@ 0x81
 80072f6:	d108      	bne.n	800730a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10d      	bne.n	800731c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2204      	movs	r2, #4
 8007304:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e00c      	b.n	8007324 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d004      	beq.n	800731c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2204      	movs	r2, #4
 8007316:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e003      	b.n	8007324 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	40020650 	.word	0x40020650
 8007334:	50020650 	.word	0x50020650
 8007338:	400206d0 	.word	0x400206d0
 800733c:	500206d0 	.word	0x500206d0
 8007340:	40020750 	.word	0x40020750
 8007344:	50020750 	.word	0x50020750
 8007348:	400207d0 	.word	0x400207d0
 800734c:	500207d0 	.word	0x500207d0

08007350 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	0c1b      	lsrs	r3, r3, #16
 8007360:	b2db      	uxtb	r3, r3
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a85      	ldr	r2, [pc, #532]	@ (80075a0 <DMA_List_Init+0x230>)
 800738a:	4293      	cmp	r3, r2
 800738c:	f000 80a0 	beq.w	80074d0 <DMA_List_Init+0x160>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a83      	ldr	r2, [pc, #524]	@ (80075a4 <DMA_List_Init+0x234>)
 8007396:	4293      	cmp	r3, r2
 8007398:	f000 809a 	beq.w	80074d0 <DMA_List_Init+0x160>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a81      	ldr	r2, [pc, #516]	@ (80075a8 <DMA_List_Init+0x238>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	f000 8094 	beq.w	80074d0 <DMA_List_Init+0x160>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a7f      	ldr	r2, [pc, #508]	@ (80075ac <DMA_List_Init+0x23c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	f000 808e 	beq.w	80074d0 <DMA_List_Init+0x160>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a7d      	ldr	r2, [pc, #500]	@ (80075b0 <DMA_List_Init+0x240>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	f000 8088 	beq.w	80074d0 <DMA_List_Init+0x160>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a7b      	ldr	r2, [pc, #492]	@ (80075b4 <DMA_List_Init+0x244>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	f000 8082 	beq.w	80074d0 <DMA_List_Init+0x160>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a79      	ldr	r2, [pc, #484]	@ (80075b8 <DMA_List_Init+0x248>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d07c      	beq.n	80074d0 <DMA_List_Init+0x160>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a78      	ldr	r2, [pc, #480]	@ (80075bc <DMA_List_Init+0x24c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d077      	beq.n	80074d0 <DMA_List_Init+0x160>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a76      	ldr	r2, [pc, #472]	@ (80075c0 <DMA_List_Init+0x250>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d072      	beq.n	80074d0 <DMA_List_Init+0x160>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a75      	ldr	r2, [pc, #468]	@ (80075c4 <DMA_List_Init+0x254>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d06d      	beq.n	80074d0 <DMA_List_Init+0x160>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a73      	ldr	r2, [pc, #460]	@ (80075c8 <DMA_List_Init+0x258>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d068      	beq.n	80074d0 <DMA_List_Init+0x160>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a72      	ldr	r2, [pc, #456]	@ (80075cc <DMA_List_Init+0x25c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d063      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a70      	ldr	r2, [pc, #448]	@ (80075d0 <DMA_List_Init+0x260>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d05e      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a6f      	ldr	r2, [pc, #444]	@ (80075d4 <DMA_List_Init+0x264>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d059      	beq.n	80074d0 <DMA_List_Init+0x160>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a6d      	ldr	r2, [pc, #436]	@ (80075d8 <DMA_List_Init+0x268>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d054      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a6c      	ldr	r2, [pc, #432]	@ (80075dc <DMA_List_Init+0x26c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d04f      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a6a      	ldr	r2, [pc, #424]	@ (80075e0 <DMA_List_Init+0x270>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d04a      	beq.n	80074d0 <DMA_List_Init+0x160>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a69      	ldr	r2, [pc, #420]	@ (80075e4 <DMA_List_Init+0x274>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d045      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a67      	ldr	r2, [pc, #412]	@ (80075e8 <DMA_List_Init+0x278>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d040      	beq.n	80074d0 <DMA_List_Init+0x160>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a66      	ldr	r2, [pc, #408]	@ (80075ec <DMA_List_Init+0x27c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d03b      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a64      	ldr	r2, [pc, #400]	@ (80075f0 <DMA_List_Init+0x280>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d036      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a63      	ldr	r2, [pc, #396]	@ (80075f4 <DMA_List_Init+0x284>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d031      	beq.n	80074d0 <DMA_List_Init+0x160>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a61      	ldr	r2, [pc, #388]	@ (80075f8 <DMA_List_Init+0x288>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d02c      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a60      	ldr	r2, [pc, #384]	@ (80075fc <DMA_List_Init+0x28c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d027      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a5e      	ldr	r2, [pc, #376]	@ (8007600 <DMA_List_Init+0x290>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d022      	beq.n	80074d0 <DMA_List_Init+0x160>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a5d      	ldr	r2, [pc, #372]	@ (8007604 <DMA_List_Init+0x294>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d01d      	beq.n	80074d0 <DMA_List_Init+0x160>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a5b      	ldr	r2, [pc, #364]	@ (8007608 <DMA_List_Init+0x298>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d018      	beq.n	80074d0 <DMA_List_Init+0x160>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a5a      	ldr	r2, [pc, #360]	@ (800760c <DMA_List_Init+0x29c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d013      	beq.n	80074d0 <DMA_List_Init+0x160>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a58      	ldr	r2, [pc, #352]	@ (8007610 <DMA_List_Init+0x2a0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00e      	beq.n	80074d0 <DMA_List_Init+0x160>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a57      	ldr	r2, [pc, #348]	@ (8007614 <DMA_List_Init+0x2a4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d009      	beq.n	80074d0 <DMA_List_Init+0x160>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a55      	ldr	r2, [pc, #340]	@ (8007618 <DMA_List_Init+0x2a8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <DMA_List_Init+0x160>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a54      	ldr	r2, [pc, #336]	@ (800761c <DMA_List_Init+0x2ac>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d101      	bne.n	80074d4 <DMA_List_Init+0x164>
 80074d0:	2301      	movs	r3, #1
 80074d2:	e000      	b.n	80074d6 <DMA_List_Init+0x166>
 80074d4:	2300      	movs	r3, #0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d004      	beq.n	80074e4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2200      	movs	r2, #0
 80074fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007508:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2200      	movs	r2, #0
 8007510:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2200      	movs	r2, #0
 8007518:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a36      	ldr	r2, [pc, #216]	@ (8007600 <DMA_List_Init+0x290>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d022      	beq.n	8007572 <DMA_List_Init+0x202>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a34      	ldr	r2, [pc, #208]	@ (8007604 <DMA_List_Init+0x294>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d01d      	beq.n	8007572 <DMA_List_Init+0x202>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a33      	ldr	r2, [pc, #204]	@ (8007608 <DMA_List_Init+0x298>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d018      	beq.n	8007572 <DMA_List_Init+0x202>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a31      	ldr	r2, [pc, #196]	@ (800760c <DMA_List_Init+0x29c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d013      	beq.n	8007572 <DMA_List_Init+0x202>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a30      	ldr	r2, [pc, #192]	@ (8007610 <DMA_List_Init+0x2a0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00e      	beq.n	8007572 <DMA_List_Init+0x202>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a2e      	ldr	r2, [pc, #184]	@ (8007614 <DMA_List_Init+0x2a4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d009      	beq.n	8007572 <DMA_List_Init+0x202>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a2d      	ldr	r2, [pc, #180]	@ (8007618 <DMA_List_Init+0x2a8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d004      	beq.n	8007572 <DMA_List_Init+0x202>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a2b      	ldr	r2, [pc, #172]	@ (800761c <DMA_List_Init+0x2ac>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d101      	bne.n	8007576 <DMA_List_Init+0x206>
 8007572:	2301      	movs	r3, #1
 8007574:	e000      	b.n	8007578 <DMA_List_Init+0x208>
 8007576:	2300      	movs	r3, #0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2200      	movs	r2, #0
 8007582:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2200      	movs	r2, #0
 800758a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2200      	movs	r2, #0
 8007592:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40020050 	.word	0x40020050
 80075a4:	50020050 	.word	0x50020050
 80075a8:	400200d0 	.word	0x400200d0
 80075ac:	500200d0 	.word	0x500200d0
 80075b0:	40020150 	.word	0x40020150
 80075b4:	50020150 	.word	0x50020150
 80075b8:	400201d0 	.word	0x400201d0
 80075bc:	500201d0 	.word	0x500201d0
 80075c0:	40020250 	.word	0x40020250
 80075c4:	50020250 	.word	0x50020250
 80075c8:	400202d0 	.word	0x400202d0
 80075cc:	500202d0 	.word	0x500202d0
 80075d0:	40020350 	.word	0x40020350
 80075d4:	50020350 	.word	0x50020350
 80075d8:	400203d0 	.word	0x400203d0
 80075dc:	500203d0 	.word	0x500203d0
 80075e0:	40020450 	.word	0x40020450
 80075e4:	50020450 	.word	0x50020450
 80075e8:	400204d0 	.word	0x400204d0
 80075ec:	500204d0 	.word	0x500204d0
 80075f0:	40020550 	.word	0x40020550
 80075f4:	50020550 	.word	0x50020550
 80075f8:	400205d0 	.word	0x400205d0
 80075fc:	500205d0 	.word	0x500205d0
 8007600:	40020650 	.word	0x40020650
 8007604:	50020650 	.word	0x50020650
 8007608:	400206d0 	.word	0x400206d0
 800760c:	500206d0 	.word	0x500206d0
 8007610:	40020750 	.word	0x40020750
 8007614:	50020750 	.word	0x50020750
 8007618:	400207d0 	.word	0x400207d0
 800761c:	500207d0 	.word	0x500207d0

08007620 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007632:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8007638:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800763e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8007644:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d017      	beq.n	8007686 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007662:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	3b01      	subs	r3, #1
 800766a:	051b      	lsls	r3, r3, #20
 800766c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8007670:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007676:	3b01      	subs	r3, #1
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800767e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8007680:	431a      	orrs	r2, r3
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6859      	ldr	r1, [r3, #4]
 800768e:	f240 237f 	movw	r3, #639	@ 0x27f
 8007692:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007694:	431a      	orrs	r2, r3
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a2:	d10c      	bne.n	80076be <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0320 	and.w	r3, r3, #32
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d011      	beq.n	80076d4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	605a      	str	r2, [r3, #4]
 80076bc:	e00a      	b.n	80076d4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076c6:	d105      	bne.n	80076d4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00f      	beq.n	80076fc <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076e8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ee:	041b      	lsls	r3, r3, #16
 80076f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80076f4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80076f6:	431a      	orrs	r2, r3
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007700:	b29a      	uxth	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d04e      	beq.n	80077b0 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800771a:	3b01      	subs	r3, #1
 800771c:	0419      	lsls	r1, r3, #16
 800771e:	4b67      	ldr	r3, [pc, #412]	@ (80078bc <DMA_List_BuildNode+0x29c>)
 8007720:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007722:	431a      	orrs	r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800772c:	2b00      	cmp	r3, #0
 800772e:	da06      	bge.n	800773e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	609a      	str	r2, [r3, #8]
 800773c:	e005      	b.n	800774a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800774e:	2b00      	cmp	r3, #0
 8007750:	da06      	bge.n	8007760 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	609a      	str	r2, [r3, #8]
 800775e:	e005      	b.n	800776c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007770:	2b00      	cmp	r3, #0
 8007772:	da06      	bge.n	8007782 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	e005      	b.n	800778e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007792:	2b00      	cmp	r3, #0
 8007794:	da06      	bge.n	80077a4 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	609a      	str	r2, [r3, #8]
 80077a2:	e005      	b.n	80077b0 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d059      	beq.n	8007880 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	da09      	bge.n	80077e8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d8:	425b      	negs	r3, r3
 80077da:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	615a      	str	r2, [r3, #20]
 80077e6:	e005      	b.n	80077f4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ec:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da0d      	bge.n	8007818 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007800:	425b      	negs	r3, r3
 8007802:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	695a      	ldr	r2, [r3, #20]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	0419      	lsls	r1, r3, #16
 800780c:	4b2c      	ldr	r3, [pc, #176]	@ (80078c0 <DMA_List_BuildNode+0x2a0>)
 800780e:	400b      	ands	r3, r1
 8007810:	431a      	orrs	r2, r3
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	615a      	str	r2, [r3, #20]
 8007816:	e009      	b.n	800782c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007820:	0419      	lsls	r1, r3, #16
 8007822:	4b27      	ldr	r3, [pc, #156]	@ (80078c0 <DMA_List_BuildNode+0x2a0>)
 8007824:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007826:	431a      	orrs	r2, r3
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007830:	2b00      	cmp	r3, #0
 8007832:	da08      	bge.n	8007846 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007838:	425b      	negs	r3, r3
 800783a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	b29a      	uxth	r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	619a      	str	r2, [r3, #24]
 8007844:	e004      	b.n	8007850 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007854:	2b00      	cmp	r3, #0
 8007856:	da0b      	bge.n	8007870 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800785c:	425b      	negs	r3, r3
 800785e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007868:	431a      	orrs	r2, r3
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	619a      	str	r2, [r3, #24]
 800786e:	e007      	b.n	8007880 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007878:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800787a:	431a      	orrs	r2, r3
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d006      	beq.n	80078a2 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80078a0:	e005      	b.n	80078ae <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	621a      	str	r2, [r3, #32]
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	07ff0000 	.word	0x07ff0000
 80078c0:	1fff0000 	.word	0x1fff0000

080078c4 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0208 	and.w	r2, r3, #8
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0203 	and.w	r2, r3, #3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 800790c:	091b      	lsrs	r3, r3, #4
 800790e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007912:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 800791c:	0d1b      	lsrs	r3, r3, #20
 800791e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007922:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	4b66      	ldr	r3, [pc, #408]	@ (8007ad4 <DMA_List_GetNodeConfig+0x210>)
 800793a:	4013      	ands	r3, r2
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007954:	2b00      	cmp	r3, #0
 8007956:	d008      	beq.n	800796a <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800795e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007966:	60da      	str	r2, [r3, #12]
 8007968:	e013      	b.n	8007992 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797e:	2b00      	cmp	r3, #0
 8007980:	d004      	beq.n	800798c <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007988:	60da      	str	r2, [r3, #12]
 800798a:	e002      	b.n	8007992 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80079ba:	0c1b      	lsrs	r3, r3, #16
 80079bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d008      	beq.n	80079f8 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	0c1b      	lsrs	r3, r3, #16
 80079ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079f0:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80079f6:	e002      	b.n	80079fe <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68da      	ldr	r2, [r3, #12]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	691a      	ldr	r2, [r3, #16]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d04a      	beq.n	8007ab0 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a24:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007a26:	89fa      	ldrh	r2, [r7, #14]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	0c1b      	lsrs	r3, r3, #16
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a38:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8007a3a:	89fa      	ldrh	r2, [r7, #14]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a50:	425a      	negs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a66:	425a      	negs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007a72:	89fa      	ldrh	r2, [r7, #14]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	0c1b      	lsrs	r3, r3, #16
 8007a7e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007a80:	89fa      	ldrh	r2, [r7, #14]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a96:	425a      	negs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da11      	bge.n	8007ac8 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aa8:	425a      	negs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007aae:	e00b      	b.n	8007ac8 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	0c002000 	.word	0x0c002000

08007ad8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	041b      	lsls	r3, r3, #16
 8007af2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	617b      	str	r3, [r7, #20]
 8007b02:	e00a      	b.n	8007b1a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	e004      	b.n	8007b1a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	0c1b      	lsrs	r3, r3, #16
 8007b1e:	041b      	lsls	r3, r3, #16
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d001      	beq.n	8007b2a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d004      	beq.n	8007b58 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e00e      	b.n	8007b76 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	e006      	b.n	8007b76 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d001      	beq.n	8007b8c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e00b      	b.n	8007ba4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d007      	beq.n	8007ba2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d001      	beq.n	8007ba2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e000      	b.n	8007ba4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00c      	beq.n	8007be2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8007c08 <DMA_List_GetCLLRNodeInfo+0x58>)
 8007bd2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00f      	beq.n	8007bfa <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2207      	movs	r2, #7
 8007bde:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007be0:	e00b      	b.n	8007bfa <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4a08      	ldr	r2, [pc, #32]	@ (8007c0c <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007bec:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2205      	movs	r2, #5
 8007bf8:	601a      	str	r2, [r3, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	fe010000 	.word	0xfe010000
 8007c0c:	f8010000 	.word	0xf8010000

08007c10 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b089      	sub	sp, #36	@ 0x24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d142      	bne.n	8007cba <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007c34:	e01d      	b.n	8007c72 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d107      	bne.n	8007c4c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007c46:	4013      	ands	r3, r2
 8007c48:	61bb      	str	r3, [r7, #24]
 8007c4a:	e00f      	b.n	8007c6c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	0c1b      	lsrs	r3, r3, #16
 8007c56:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007c64:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007c68:	4013      	ands	r3, r2
 8007c6a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d3dc      	bcc.n	8007c36 <DMA_List_FindNode+0x26>
 8007c7c:	e029      	b.n	8007cd2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d107      	bne.n	8007c94 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007c8e:	4013      	ands	r3, r2
 8007c90:	61bb      	str	r3, [r7, #24]
 8007c92:	e00f      	b.n	8007cb4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007cac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d206      	bcs.n	8007cd2 <DMA_List_FindNode+0xc2>
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007cca:	4013      	ands	r3, r2
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d1d5      	bne.n	8007c7e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d008      	beq.n	8007cea <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007cde:	4013      	ands	r3, r2
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d001      	beq.n	8007cea <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e02b      	b.n	8007d42 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69fa      	ldr	r2, [r7, #28]
 8007cee:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	0c1b      	lsrs	r3, r3, #16
 8007cf6:	041b      	lsls	r3, r3, #16
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	041b      	lsls	r3, r3, #16
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	461a      	mov	r2, r3
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00f      	beq.n	8007d40 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	461a      	mov	r2, r3
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d2c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007d30:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	0c1b      	lsrs	r3, r3, #16
 8007d38:	041b      	lsls	r3, r3, #16
 8007d3a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3724      	adds	r7, #36	@ 0x24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
	...

08007d50 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b089      	sub	sp, #36	@ 0x24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007d62:	e1ba      	b.n	80080da <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	2101      	movs	r1, #1
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d70:	4013      	ands	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 81aa 	beq.w	80080d4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a55      	ldr	r2, [pc, #340]	@ (8007ed8 <HAL_GPIO_Init+0x188>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d15d      	bne.n	8007e44 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007d8e:	2201      	movs	r2, #1
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	43db      	mvns	r3, r3
 8007d98:	69fa      	ldr	r2, [r7, #28]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f003 0201 	and.w	r2, r3, #1
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dac:	69fa      	ldr	r2, [r7, #28]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007db8:	4a48      	ldr	r2, [pc, #288]	@ (8007edc <HAL_GPIO_Init+0x18c>)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007dc0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007dc2:	4a46      	ldr	r2, [pc, #280]	@ (8007edc <HAL_GPIO_Init+0x18c>)
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	4413      	add	r3, r2
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	08da      	lsrs	r2, r3, #3
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3208      	adds	r2, #8
 8007dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dda:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	220f      	movs	r2, #15
 8007de6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dea:	43db      	mvns	r3, r3
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	4013      	ands	r3, r2
 8007df0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	220b      	movs	r2, #11
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	08da      	lsrs	r2, r3, #3
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	3208      	adds	r2, #8
 8007e0e:	69f9      	ldr	r1, [r7, #28]
 8007e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	2203      	movs	r2, #3
 8007e20:	fa02 f303 	lsl.w	r3, r2, r3
 8007e24:	43db      	mvns	r3, r3
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	2202      	movs	r2, #2
 8007e32:	fa02 f303 	lsl.w	r3, r2, r3
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	e067      	b.n	8007f14 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d003      	beq.n	8007e54 <HAL_GPIO_Init+0x104>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	2b12      	cmp	r3, #18
 8007e52:	d145      	bne.n	8007ee0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	08da      	lsrs	r2, r3, #3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3208      	adds	r2, #8
 8007e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	220f      	movs	r2, #15
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	43db      	mvns	r3, r3
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	4013      	ands	r3, r2
 8007e76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	f003 020f 	and.w	r2, r3, #15
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	08da      	lsrs	r2, r3, #3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3208      	adds	r2, #8
 8007e9a:	69f9      	ldr	r1, [r7, #28]
 8007e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	2203      	movs	r2, #3
 8007eac:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f003 0203 	and.w	r2, r3, #3
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	69fa      	ldr	r2, [r7, #28]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e01e      	b.n	8007f14 <HAL_GPIO_Init+0x1c4>
 8007ed6:	bf00      	nop
 8007ed8:	46020000 	.word	0x46020000
 8007edc:	08011c80 	.word	0x08011c80
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	2203      	movs	r2, #3
 8007eec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 0203 	and.w	r2, r3, #3
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	fa02 f303 	lsl.w	r3, r2, r3
 8007f08:	69fa      	ldr	r2, [r7, #28]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d00b      	beq.n	8007f34 <HAL_GPIO_Init+0x1e4>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d007      	beq.n	8007f34 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f28:	2b11      	cmp	r3, #17
 8007f2a:	d003      	beq.n	8007f34 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	2b12      	cmp	r3, #18
 8007f32:	d130      	bne.n	8007f96 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	005b      	lsls	r3, r3, #1
 8007f3e:	2203      	movs	r2, #3
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	43db      	mvns	r3, r3
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f72:	43db      	mvns	r3, r3
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	4013      	ands	r3, r2
 8007f78:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	091b      	lsrs	r3, r3, #4
 8007f80:	f003 0201 	and.w	r2, r3, #1
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d017      	beq.n	8007fce <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	2203      	movs	r2, #3
 8007faa:	fa02 f303 	lsl.w	r3, r2, r3
 8007fae:	43db      	mvns	r3, r3
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d07c      	beq.n	80080d4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007fda:	4a47      	ldr	r2, [pc, #284]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	089b      	lsrs	r3, r3, #2
 8007fe0:	3318      	adds	r3, #24
 8007fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	220f      	movs	r2, #15
 8007ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff6:	43db      	mvns	r3, r3
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	0a9a      	lsrs	r2, r3, #10
 8008002:	4b3e      	ldr	r3, [pc, #248]	@ (80080fc <HAL_GPIO_Init+0x3ac>)
 8008004:	4013      	ands	r3, r2
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	f002 0203 	and.w	r2, r2, #3
 800800c:	00d2      	lsls	r2, r2, #3
 800800e:	4093      	lsls	r3, r2
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	4313      	orrs	r3, r2
 8008014:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8008016:	4938      	ldr	r1, [pc, #224]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	089b      	lsrs	r3, r3, #2
 800801c:	3318      	adds	r3, #24
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8008024:	4b34      	ldr	r3, [pc, #208]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	43db      	mvns	r3, r3
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	4013      	ands	r3, r2
 8008032:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8008040:	69fa      	ldr	r2, [r7, #28]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4313      	orrs	r3, r2
 8008046:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8008048:	4a2b      	ldr	r2, [pc, #172]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800804e:	4b2a      	ldr	r3, [pc, #168]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	43db      	mvns	r3, r3
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	4013      	ands	r3, r2
 800805c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4313      	orrs	r3, r2
 8008070:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8008072:	4a21      	ldr	r2, [pc, #132]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8008078:	4b1f      	ldr	r3, [pc, #124]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 800807a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800807e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	43db      	mvns	r3, r3
 8008084:	69fa      	ldr	r2, [r7, #28]
 8008086:	4013      	ands	r3, r2
 8008088:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800809e:	4a16      	ldr	r2, [pc, #88]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80080a6:	4b14      	ldr	r3, [pc, #80]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 80080a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	43db      	mvns	r3, r3
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	4013      	ands	r3, r2
 80080b6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80080c4:	69fa      	ldr	r2, [r7, #28]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80080cc:	4a0a      	ldr	r2, [pc, #40]	@ (80080f8 <HAL_GPIO_Init+0x3a8>)
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	3301      	adds	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	fa22 f303 	lsr.w	r3, r2, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f47f ae3d 	bne.w	8007d64 <HAL_GPIO_Init+0x14>
  }
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	3724      	adds	r7, #36	@ 0x24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	46022000 	.word	0x46022000
 80080fc:	002f7f7f 	.word	0x002f7f7f

08008100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	807b      	strh	r3, [r7, #2]
 800810c:	4613      	mov	r3, r2
 800810e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008110:	787b      	ldrb	r3, [r7, #1]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008116:	887a      	ldrh	r2, [r7, #2]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800811c:	e002      	b.n	8008124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800811e:	887a      	ldrh	r2, [r7, #2]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800813a:	4b0f      	ldr	r3, [pc, #60]	@ (8008178 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	88fb      	ldrh	r3, [r7, #6]
 8008140:	4013      	ands	r3, r2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d006      	beq.n	8008154 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008146:	4a0c      	ldr	r2, [pc, #48]	@ (8008178 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008148:	88fb      	ldrh	r3, [r7, #6]
 800814a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800814c:	88fb      	ldrh	r3, [r7, #6]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f814 	bl	800817c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8008154:	4b08      	ldr	r3, [pc, #32]	@ (8008178 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008156:	691a      	ldr	r2, [r3, #16]
 8008158:	88fb      	ldrh	r3, [r7, #6]
 800815a:	4013      	ands	r3, r2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008160:	4a05      	ldr	r2, [pc, #20]	@ (8008178 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 f812 	bl	8008192 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	46022000 	.word	0x46022000

0800817c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	4603      	mov	r3, r0
 800819a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e08d      	b.n	80082d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d106      	bne.n	80081d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7fa fa1e 	bl	8002610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2224      	movs	r2, #36	@ 0x24
 80081d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 0201 	bic.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80081f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008208:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d107      	bne.n	8008222 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800821e:	609a      	str	r2, [r3, #8]
 8008220:	e006      	b.n	8008230 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800822e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d108      	bne.n	800824a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008246:	605a      	str	r2, [r3, #4]
 8008248:	e007      	b.n	800825a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008258:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6812      	ldr	r2, [r2, #0]
 8008264:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800826c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800827c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691a      	ldr	r2, [r3, #16]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	69d9      	ldr	r1, [r3, #28]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1a      	ldr	r2, [r3, #32]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0201 	orr.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	68f9      	ldr	r1, [r7, #12]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
  }
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b086      	sub	sp, #24
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00f      	beq.n	8008354 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008342:	f043 0201 	orr.w	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008352:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836c:	f043 0208 	orr.w	r2, r3, #8
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800837c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00f      	beq.n	80083a8 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008396:	f043 0202 	orr.w	r2, r3, #2
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083a6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ac:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f003 030b 	and.w	r3, r3, #11
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80083b8:	68f9      	ldr	r1, [r7, #12]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fbe8 	bl	8008b90 <I2C_ITError>
  }
}
 80083c0:	bf00      	nop
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
 80083fc:	4613      	mov	r3, r2
 80083fe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008458:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008464:	2b01      	cmp	r3, #1
 8008466:	d101      	bne.n	800846c <I2C_Slave_ISR_IT+0x24>
 8008468:	2302      	movs	r3, #2
 800846a:	e0e2      	b.n	8008632 <I2C_Slave_ISR_IT+0x1ea>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008488:	6939      	ldr	r1, [r7, #16]
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f9b6 	bl	80087fc <I2C_ITSlaveCplt>
 8008490:	e0ca      	b.n	8008628 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	d04b      	beq.n	8008534 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d046      	beq.n	8008534 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d128      	bne.n	8008502 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b28      	cmp	r3, #40	@ 0x28
 80084ba:	d108      	bne.n	80084ce <I2C_Slave_ISR_IT+0x86>
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084c2:	d104      	bne.n	80084ce <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80084c4:	6939      	ldr	r1, [r7, #16]
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fb0e 	bl	8008ae8 <I2C_ITListenCplt>
 80084cc:	e031      	b.n	8008532 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b29      	cmp	r3, #41	@ 0x29
 80084d8:	d10e      	bne.n	80084f8 <I2C_Slave_ISR_IT+0xb0>
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80084e0:	d00a      	beq.n	80084f8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2210      	movs	r2, #16
 80084e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 fc67 	bl	8008dbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f926 	bl	8008742 <I2C_ITSlaveSeqCplt>
 80084f6:	e01c      	b.n	8008532 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2210      	movs	r2, #16
 80084fe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008500:	e08f      	b.n	8008622 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2210      	movs	r2, #16
 8008508:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800850e:	f043 0204 	orr.w	r2, r3, #4
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <I2C_Slave_ISR_IT+0xdc>
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008522:	d17e      	bne.n	8008622 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008528:	4619      	mov	r1, r3
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fb30 	bl	8008b90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008530:	e077      	b.n	8008622 <I2C_Slave_ISR_IT+0x1da>
 8008532:	e076      	b.n	8008622 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f003 0304 	and.w	r3, r3, #4
 800853a:	2b00      	cmp	r3, #0
 800853c:	d02f      	beq.n	800859e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02a      	beq.n	800859e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d018      	beq.n	8008584 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800856e:	3b01      	subs	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d14b      	bne.n	8008626 <I2C_Slave_ISR_IT+0x1de>
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008594:	d047      	beq.n	8008626 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 f8d3 	bl	8008742 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800859c:	e043      	b.n	8008626 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f003 0308 	and.w	r3, r3, #8
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d009      	beq.n	80085bc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80085b2:	6939      	ldr	r1, [r7, #16]
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 f840 	bl	800863a <I2C_ITAddrCplt>
 80085ba:	e035      	b.n	8008628 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d030      	beq.n	8008628 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d02b      	beq.n	8008628 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d018      	beq.n	800860c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085de:	781a      	ldrb	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008602:	3b01      	subs	r3, #1
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	851a      	strh	r2, [r3, #40]	@ 0x28
 800860a:	e00d      	b.n	8008628 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008612:	d002      	beq.n	800861a <I2C_Slave_ISR_IT+0x1d2>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d106      	bne.n	8008628 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f891 	bl	8008742 <I2C_ITSlaveSeqCplt>
 8008620:	e002      	b.n	8008628 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8008622:	bf00      	nop
 8008624:	e000      	b.n	8008628 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8008626:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008650:	2b28      	cmp	r3, #40	@ 0x28
 8008652:	d16a      	bne.n	800872a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	0c1b      	lsrs	r3, r3, #16
 800866c:	b29b      	uxth	r3, r3
 800866e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008672:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	b29b      	uxth	r3, r3
 800867c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008680:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	b29b      	uxth	r3, r3
 800868a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800868e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d138      	bne.n	800870a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008698:	897b      	ldrh	r3, [r7, #10]
 800869a:	09db      	lsrs	r3, r3, #7
 800869c:	b29a      	uxth	r2, r3
 800869e:	89bb      	ldrh	r3, [r7, #12]
 80086a0:	4053      	eors	r3, r2
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f003 0306 	and.w	r3, r3, #6
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d11c      	bne.n	80086e6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80086ac:	897b      	ldrh	r3, [r7, #10]
 80086ae:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d13b      	bne.n	800873a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2208      	movs	r2, #8
 80086ce:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80086d8:	89ba      	ldrh	r2, [r7, #12]
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff fe86 	bl	80083f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80086e4:	e029      	b.n	800873a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80086e6:	893b      	ldrh	r3, [r7, #8]
 80086e8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80086ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fba7 	bl	8008e42 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80086fc:	89ba      	ldrh	r2, [r7, #12]
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff fe74 	bl	80083f0 <HAL_I2C_AddrCallback>
}
 8008708:	e017      	b.n	800873a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800870a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fb97 	bl	8008e42 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800871c:	89ba      	ldrh	r2, [r7, #12]
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff fe64 	bl	80083f0 <HAL_I2C_AddrCallback>
}
 8008728:	e007      	b.n	800873a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2208      	movs	r2, #8
 8008730:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800873a:	bf00      	nop
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d008      	beq.n	8008776 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e00c      	b.n	8008790 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800878e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b29      	cmp	r3, #41	@ 0x29
 800879a:	d112      	bne.n	80087c2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2228      	movs	r2, #40	@ 0x28
 80087a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2221      	movs	r2, #33	@ 0x21
 80087a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80087aa:	2101      	movs	r1, #1
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fb48 	bl	8008e42 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff fe04 	bl	80083c8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80087c0:	e017      	b.n	80087f2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80087cc:	d111      	bne.n	80087f2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2228      	movs	r2, #40	@ 0x28
 80087d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2222      	movs	r2, #34	@ 0x22
 80087da:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80087dc:	2102      	movs	r1, #2
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fb2f 	bl	8008e42 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff fdf5 	bl	80083dc <HAL_I2C_SlaveRxCpltCallback>
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80087fc:	b590      	push	{r4, r7, lr}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008816:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800881e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2220      	movs	r2, #32
 8008826:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008828:	7afb      	ldrb	r3, [r7, #11]
 800882a:	2b21      	cmp	r3, #33	@ 0x21
 800882c:	d002      	beq.n	8008834 <I2C_ITSlaveCplt+0x38>
 800882e:	7afb      	ldrb	r3, [r7, #11]
 8008830:	2b29      	cmp	r3, #41	@ 0x29
 8008832:	d108      	bne.n	8008846 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008834:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb02 	bl	8008e42 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2221      	movs	r2, #33	@ 0x21
 8008842:	631a      	str	r2, [r3, #48]	@ 0x30
 8008844:	e019      	b.n	800887a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	2b22      	cmp	r3, #34	@ 0x22
 800884a:	d002      	beq.n	8008852 <I2C_ITSlaveCplt+0x56>
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008850:	d108      	bne.n	8008864 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008852:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 faf3 	bl	8008e42 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2222      	movs	r2, #34	@ 0x22
 8008860:	631a      	str	r2, [r3, #48]	@ 0x30
 8008862:	e00a      	b.n	800887a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008864:	7afb      	ldrb	r3, [r7, #11]
 8008866:	2b28      	cmp	r3, #40	@ 0x28
 8008868:	d107      	bne.n	800887a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800886a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fae7 	bl	8008e42 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008888:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6859      	ldr	r1, [r3, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	4b92      	ldr	r3, [pc, #584]	@ (8008ae0 <I2C_ITSlaveCplt+0x2e4>)
 8008896:	400b      	ands	r3, r1
 8008898:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa8f 	bl	8008dbe <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d01c      	beq.n	80088e4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d031      	beq.n	8008926 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ca:	b29c      	uxth	r4, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fd3d 	bl	8007350 <HAL_DMAEx_GetFifoLevel>
 80088d6:	4603      	mov	r3, r0
 80088d8:	b29b      	uxth	r3, r3
 80088da:	4423      	add	r3, r4
 80088dc:	b29a      	uxth	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80088e2:	e020      	b.n	8008926 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01b      	beq.n	8008926 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00f      	beq.n	8008926 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800890e:	b29c      	uxth	r4, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe fd1b 	bl	8007350 <HAL_DMAEx_GetFifoLevel>
 800891a:	4603      	mov	r3, r0
 800891c:	b29b      	uxth	r3, r3
 800891e:	4423      	add	r3, r4
 8008920:	b29a      	uxth	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f003 0304 	and.w	r3, r3, #4
 800892c:	2b00      	cmp	r3, #0
 800892e:	d020      	beq.n	8008972 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f023 0304 	bic.w	r3, r3, #4
 8008936:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00c      	beq.n	8008972 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800895c:	3b01      	subs	r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008968:	b29b      	uxth	r3, r3
 800896a:	3b01      	subs	r3, #1
 800896c:	b29a      	uxth	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008976:	b29b      	uxth	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008980:	f043 0204 	orr.w	r2, r3, #4
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f003 0310 	and.w	r3, r3, #16
 800898e:	2b00      	cmp	r3, #0
 8008990:	d049      	beq.n	8008a26 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008998:	2b00      	cmp	r3, #0
 800899a:	d044      	beq.n	8008a26 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d128      	bne.n	80089f8 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b28      	cmp	r3, #40	@ 0x28
 80089b0:	d108      	bne.n	80089c4 <I2C_ITSlaveCplt+0x1c8>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089b8:	d104      	bne.n	80089c4 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80089ba:	6979      	ldr	r1, [r7, #20]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f893 	bl	8008ae8 <I2C_ITListenCplt>
 80089c2:	e030      	b.n	8008a26 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b29      	cmp	r3, #41	@ 0x29
 80089ce:	d10e      	bne.n	80089ee <I2C_ITSlaveCplt+0x1f2>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089d6:	d00a      	beq.n	80089ee <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2210      	movs	r2, #16
 80089de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f9ec 	bl	8008dbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7ff feab 	bl	8008742 <I2C_ITSlaveSeqCplt>
 80089ec:	e01b      	b.n	8008a26 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2210      	movs	r2, #16
 80089f4:	61da      	str	r2, [r3, #28]
 80089f6:	e016      	b.n	8008a26 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2210      	movs	r2, #16
 80089fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a04:	f043 0204 	orr.w	r2, r3, #4
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <I2C_ITSlaveCplt+0x21e>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a18:	d105      	bne.n	8008a26 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f8b5 	bl	8008b90 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d010      	beq.n	8008a5e <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f8a4 	bl	8008b90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b28      	cmp	r3, #40	@ 0x28
 8008a52:	d141      	bne.n	8008ad8 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008a54:	6979      	ldr	r1, [r7, #20]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f846 	bl	8008ae8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a5c:	e03c      	b.n	8008ad8 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008a66:	d014      	beq.n	8008a92 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff fe6a 	bl	8008742 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae4 <I2C_ITSlaveCplt+0x2e8>)
 8008a72:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff fcbe 	bl	800840c <HAL_I2C_ListenCpltCallback>
}
 8008a90:	e022      	b.n	8008ad8 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b22      	cmp	r3, #34	@ 0x22
 8008a9c:	d10e      	bne.n	8008abc <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff fc91 	bl	80083dc <HAL_I2C_SlaveRxCpltCallback>
}
 8008aba:	e00d      	b.n	8008ad8 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff fc78 	bl	80083c8 <HAL_I2C_SlaveTxCpltCallback>
}
 8008ad8:	bf00      	nop
 8008ada:	371c      	adds	r7, #28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd90      	pop	{r4, r7, pc}
 8008ae0:	fe00e800 	.word	0xfe00e800
 8008ae4:	ffff0000 	.word	0xffff0000

08008ae8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a25      	ldr	r2, [pc, #148]	@ (8008b8c <I2C_ITListenCplt+0xa4>)
 8008af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	f003 0304 	and.w	r3, r3, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d022      	beq.n	8008b64 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b28:	b2d2      	uxtb	r2, r2
 8008b2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d012      	beq.n	8008b64 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	3b01      	subs	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b5c:	f043 0204 	orr.w	r2, r3, #4
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008b64:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f96a 	bl	8008e42 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2210      	movs	r2, #16
 8008b74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7ff fc44 	bl	800840c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	ffff0000 	.word	0xffff0000

08008b90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ba0:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a6d      	ldr	r2, [pc, #436]	@ (8008d64 <I2C_ITError+0x1d4>)
 8008bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	2b28      	cmp	r3, #40	@ 0x28
 8008bc6:	d005      	beq.n	8008bd4 <I2C_ITError+0x44>
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	2b29      	cmp	r3, #41	@ 0x29
 8008bcc:	d002      	beq.n	8008bd4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bd2:	d10b      	bne.n	8008bec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008bd4:	2103      	movs	r1, #3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f933 	bl	8008e42 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2228      	movs	r2, #40	@ 0x28
 8008be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a60      	ldr	r2, [pc, #384]	@ (8008d68 <I2C_ITError+0x1d8>)
 8008be8:	635a      	str	r2, [r3, #52]	@ 0x34
 8008bea:	e030      	b.n	8008c4e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008bec:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f926 	bl	8008e42 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f8e1 	bl	8008dbe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b60      	cmp	r3, #96	@ 0x60
 8008c06:	d01f      	beq.n	8008c48 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d114      	bne.n	8008c48 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	f003 0310 	and.w	r3, r3, #16
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	d109      	bne.n	8008c40 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2210      	movs	r2, #16
 8008c32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c38:	f043 0204 	orr.w	r2, r3, #4
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2220      	movs	r2, #32
 8008c46:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d039      	beq.n	8008cd0 <I2C_ITError+0x140>
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b11      	cmp	r3, #17
 8008c60:	d002      	beq.n	8008c68 <I2C_ITError+0xd8>
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b21      	cmp	r3, #33	@ 0x21
 8008c66:	d133      	bne.n	8008cd0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c76:	d107      	bne.n	8008c88 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fd fbb3 	bl	80063f8 <HAL_DMA_GetState>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d017      	beq.n	8008cc8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9c:	4a33      	ldr	r2, [pc, #204]	@ (8008d6c <I2C_ITError+0x1dc>)
 8008c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fd fa19 	bl	80060e4 <HAL_DMA_Abort_IT>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d04d      	beq.n	8008d54 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008cc6:	e045      	b.n	8008d54 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f851 	bl	8008d70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008cce:	e041      	b.n	8008d54 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d039      	beq.n	8008d4c <I2C_ITError+0x1bc>
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2b12      	cmp	r3, #18
 8008cdc:	d002      	beq.n	8008ce4 <I2C_ITError+0x154>
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2b22      	cmp	r3, #34	@ 0x22
 8008ce2:	d133      	bne.n	8008d4c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cf2:	d107      	bne.n	8008d04 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fd fb75 	bl	80063f8 <HAL_DMA_GetState>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d017      	beq.n	8008d44 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d18:	4a14      	ldr	r2, [pc, #80]	@ (8008d6c <I2C_ITError+0x1dc>)
 8008d1a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fd f9db 	bl	80060e4 <HAL_DMA_Abort_IT>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d011      	beq.n	8008d58 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d42:	e009      	b.n	8008d58 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f813 	bl	8008d70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d4a:	e005      	b.n	8008d58 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f80f 	bl	8008d70 <I2C_TreatErrorCallback>
  }
}
 8008d52:	e002      	b.n	8008d5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008d54:	bf00      	nop
 8008d56:	e000      	b.n	8008d5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d58:	bf00      	nop
}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	ffff0000 	.word	0xffff0000
 8008d68:	08008449 	.word	0x08008449
 8008d6c:	08008e07 	.word	0x08008e07

08008d70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b60      	cmp	r3, #96	@ 0x60
 8008d82:	d10e      	bne.n	8008da2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff fb4a 	bl	8008434 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008da0:	e009      	b.n	8008db6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff fb35 	bl	8008420 <HAL_I2C_ErrorCallback>
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d103      	bne.n	8008ddc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d007      	beq.n	8008dfa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699a      	ldr	r2, [r3, #24]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0201 	orr.w	r2, r2, #1
 8008df8:	619a      	str	r2, [r3, #24]
  }
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e20:	2200      	movs	r2, #0
 8008e22:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e30:	2200      	movs	r2, #0
 8008e32:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7ff ff9b 	bl	8008d70 <I2C_TreatErrorCallback>
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e52:	887b      	ldrh	r3, [r7, #2]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00f      	beq.n	8008e7c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008e62:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e70:	2b28      	cmp	r3, #40	@ 0x28
 8008e72:	d003      	beq.n	8008e7c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008e7a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008e7c:	887b      	ldrh	r3, [r7, #2]
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00f      	beq.n	8008ea6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008e8c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e9a:	2b28      	cmp	r3, #40	@ 0x28
 8008e9c:	d003      	beq.n	8008ea6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008ea4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008ea6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	da03      	bge.n	8008eb6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008eb4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008eb6:	887b      	ldrh	r3, [r7, #2]
 8008eb8:	2b10      	cmp	r3, #16
 8008eba:	d103      	bne.n	8008ec4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008ec2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008ec4:	887b      	ldrh	r3, [r7, #2]
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	d103      	bne.n	8008ed2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f043 0320 	orr.w	r3, r3, #32
 8008ed0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008ed2:	887b      	ldrh	r3, [r7, #2]
 8008ed4:	2b40      	cmp	r3, #64	@ 0x40
 8008ed6:	d103      	bne.n	8008ee0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ede:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6819      	ldr	r1, [r3, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	43da      	mvns	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	400a      	ands	r2, r1
 8008ef0:	601a      	str	r2, [r3, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b20      	cmp	r3, #32
 8008f12:	d138      	bne.n	8008f86 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d101      	bne.n	8008f22 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f1e:	2302      	movs	r3, #2
 8008f20:	e032      	b.n	8008f88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2224      	movs	r2, #36	@ 0x24
 8008f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0201 	bic.w	r2, r2, #1
 8008f40:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f50:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6819      	ldr	r1, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0201 	orr.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	e000      	b.n	8008f88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f86:	2302      	movs	r3, #2
  }
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b20      	cmp	r3, #32
 8008fa8:	d139      	bne.n	800901e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e033      	b.n	8009020 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2224      	movs	r2, #36	@ 0x24
 8008fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0201 	bic.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008fe6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f042 0201 	orr.w	r2, r2, #1
 8009008:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2220      	movs	r2, #32
 800900e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	e000      	b.n	8009020 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800901e:	2302      	movs	r3, #2
  }
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8009038:	4b0b      	ldr	r3, [pc, #44]	@ (8009068 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	73fb      	strb	r3, [r7, #15]
 8009048:	e007      	b.n	800905a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800904a:	4b07      	ldr	r3, [pc, #28]	@ (8009068 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f023 0204 	bic.w	r2, r3, #4
 8009052:	4905      	ldr	r1, [pc, #20]	@ (8009068 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4313      	orrs	r3, r2
 8009058:	600b      	str	r3, [r1, #0]
  }

  return status;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	40030400 	.word	0x40030400

0800906c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009070:	4b05      	ldr	r3, [pc, #20]	@ (8009088 <HAL_ICACHE_Enable+0x1c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a04      	ldr	r2, [pc, #16]	@ (8009088 <HAL_ICACHE_Enable+0x1c>)
 8009076:	f043 0301 	orr.w	r3, r3, #1
 800907a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	40030400 	.word	0x40030400

0800908c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e0bf      	b.n	800921e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7f9 fb9a 	bl	80027ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80090ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6999      	ldr	r1, [r3, #24]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80090e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6899      	ldr	r1, [r3, #8]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4b4a      	ldr	r3, [pc, #296]	@ (8009228 <HAL_LTDC_Init+0x19c>)
 8009100:	400b      	ands	r3, r1
 8009102:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	041b      	lsls	r3, r3, #16
 800910a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6899      	ldr	r1, [r3, #8]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	431a      	orrs	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	430a      	orrs	r2, r1
 8009120:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68d9      	ldr	r1, [r3, #12]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	4b3e      	ldr	r3, [pc, #248]	@ (8009228 <HAL_LTDC_Init+0x19c>)
 800912e:	400b      	ands	r3, r1
 8009130:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	041b      	lsls	r3, r3, #16
 8009138:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68d9      	ldr	r1, [r3, #12]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a1a      	ldr	r2, [r3, #32]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6919      	ldr	r1, [r3, #16]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	4b33      	ldr	r3, [pc, #204]	@ (8009228 <HAL_LTDC_Init+0x19c>)
 800915c:	400b      	ands	r3, r1
 800915e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009164:	041b      	lsls	r3, r3, #16
 8009166:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6919      	ldr	r1, [r3, #16]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	431a      	orrs	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6959      	ldr	r1, [r3, #20]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4b27      	ldr	r3, [pc, #156]	@ (8009228 <HAL_LTDC_Init+0x19c>)
 800918a:	400b      	ands	r3, r1
 800918c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009192:	041b      	lsls	r3, r3, #16
 8009194:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6959      	ldr	r1, [r3, #20]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	431a      	orrs	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80091bc:	041b      	lsls	r3, r3, #16
 80091be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80091ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80091e2:	431a      	orrs	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f042 0206 	orr.w	r2, r2, #6
 80091fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	f000f800 	.word	0xf000f800

0800922c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009242:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	d023      	beq.n	8009296 <HAL_LTDC_IRQHandler+0x6a>
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01e      	beq.n	8009296 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f022 0204 	bic.w	r2, r2, #4
 8009266:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2204      	movs	r2, #4
 800926e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009276:	f043 0201 	orr.w	r2, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2204      	movs	r2, #4
 8009284:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f86f 	bl	8009374 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d023      	beq.n	80092e8 <HAL_LTDC_IRQHandler+0xbc>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d01e      	beq.n	80092e8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 0202 	bic.w	r2, r2, #2
 80092b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2202      	movs	r2, #2
 80092c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80092c8:	f043 0202 	orr.w	r2, r3, #2
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2204      	movs	r2, #4
 80092d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f846 	bl	8009374 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d01b      	beq.n	800932a <HAL_LTDC_IRQHandler+0xfe>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d016      	beq.n	800932a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0201 	bic.w	r2, r2, #1
 800930a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2201      	movs	r2, #1
 8009312:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f82f 	bl	8009388 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f003 0308 	and.w	r3, r3, #8
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01b      	beq.n	800936c <HAL_LTDC_IRQHandler+0x140>
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f003 0308 	and.w	r3, r3, #8
 800933a:	2b00      	cmp	r3, #0
 800933c:	d016      	beq.n	800936c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0208 	bic.w	r2, r2, #8
 800934c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2208      	movs	r2, #8
 8009354:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f818 	bl	800939c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800936c:	bf00      	nop
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80093b0:	b5b0      	push	{r4, r5, r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_LTDC_ConfigLayer+0x1a>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e02c      	b.n	8009424 <HAL_LTDC_ConfigLayer+0x74>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2134      	movs	r1, #52	@ 0x34
 80093e0:	fb01 f303 	mul.w	r3, r1, r3
 80093e4:	4413      	add	r3, r2
 80093e6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	4614      	mov	r4, r2
 80093ee:	461d      	mov	r5, r3
 80093f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 f811 	bl	800942c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2201      	movs	r2, #1
 8009410:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bdb0      	pop	{r4, r5, r7, pc}

0800942c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800942c:	b480      	push	{r7}
 800942e:	b089      	sub	sp, #36	@ 0x24
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	0c1b      	lsrs	r3, r3, #16
 8009444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009448:	4413      	add	r3, r2
 800944a:	041b      	lsls	r3, r3, #16
 800944c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	01db      	lsls	r3, r3, #7
 8009458:	4413      	add	r3, r2
 800945a:	3384      	adds	r3, #132	@ 0x84
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	6812      	ldr	r2, [r2, #0]
 8009462:	4611      	mov	r1, r2
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	01d2      	lsls	r2, r2, #7
 8009468:	440a      	add	r2, r1
 800946a:	3284      	adds	r2, #132	@ 0x84
 800946c:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009470:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	0c1b      	lsrs	r3, r3, #16
 800947e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009482:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009484:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4619      	mov	r1, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	01db      	lsls	r3, r3, #7
 8009490:	440b      	add	r3, r1
 8009492:	3384      	adds	r3, #132	@ 0x84
 8009494:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800949a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	68da      	ldr	r2, [r3, #12]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094aa:	4413      	add	r3, r2
 80094ac:	041b      	lsls	r3, r3, #16
 80094ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	461a      	mov	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	01db      	lsls	r3, r3, #7
 80094ba:	4413      	add	r3, r2
 80094bc:	3384      	adds	r3, #132	@ 0x84
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	6812      	ldr	r2, [r2, #0]
 80094c4:	4611      	mov	r1, r2
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	01d2      	lsls	r2, r2, #7
 80094ca:	440a      	add	r2, r1
 80094cc:	3284      	adds	r2, #132	@ 0x84
 80094ce:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80094d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094e2:	4413      	add	r3, r2
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4619      	mov	r1, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	01db      	lsls	r3, r3, #7
 80094f0:	440b      	add	r3, r1
 80094f2:	3384      	adds	r3, #132	@ 0x84
 80094f4:	4619      	mov	r1, r3
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	461a      	mov	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	01db      	lsls	r3, r3, #7
 8009506:	4413      	add	r3, r2
 8009508:	3384      	adds	r3, #132	@ 0x84
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	6812      	ldr	r2, [r2, #0]
 8009510:	4611      	mov	r1, r2
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	01d2      	lsls	r2, r2, #7
 8009516:	440a      	add	r2, r1
 8009518:	3284      	adds	r2, #132	@ 0x84
 800951a:	f023 0307 	bic.w	r3, r3, #7
 800951e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	461a      	mov	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	01db      	lsls	r3, r3, #7
 800952a:	4413      	add	r3, r2
 800952c:	3384      	adds	r3, #132	@ 0x84
 800952e:	461a      	mov	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009546:	041b      	lsls	r3, r3, #16
 8009548:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	061b      	lsls	r3, r3, #24
 8009550:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009558:	461a      	mov	r2, r3
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	431a      	orrs	r2, r3
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	431a      	orrs	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4619      	mov	r1, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	01db      	lsls	r3, r3, #7
 800956c:	440b      	add	r3, r1
 800956e:	3384      	adds	r3, #132	@ 0x84
 8009570:	4619      	mov	r1, r3
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	4313      	orrs	r3, r2
 8009576:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	461a      	mov	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	01db      	lsls	r3, r3, #7
 8009582:	4413      	add	r3, r2
 8009584:	3384      	adds	r3, #132	@ 0x84
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	6812      	ldr	r2, [r2, #0]
 800958c:	4611      	mov	r1, r2
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	01d2      	lsls	r2, r2, #7
 8009592:	440a      	add	r2, r1
 8009594:	3284      	adds	r2, #132	@ 0x84
 8009596:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800959a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	01db      	lsls	r3, r3, #7
 80095a6:	4413      	add	r3, r2
 80095a8:	3384      	adds	r3, #132	@ 0x84
 80095aa:	461a      	mov	r2, r3
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	01db      	lsls	r3, r3, #7
 80095bc:	4413      	add	r3, r2
 80095be:	3384      	adds	r3, #132	@ 0x84
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	6812      	ldr	r2, [r2, #0]
 80095c6:	4611      	mov	r1, r2
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	01d2      	lsls	r2, r2, #7
 80095cc:	440a      	add	r2, r1
 80095ce:	3284      	adds	r2, #132	@ 0x84
 80095d0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80095d4:	f023 0307 	bic.w	r3, r3, #7
 80095d8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	69da      	ldr	r2, [r3, #28]
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	68f9      	ldr	r1, [r7, #12]
 80095e4:	6809      	ldr	r1, [r1, #0]
 80095e6:	4608      	mov	r0, r1
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	01c9      	lsls	r1, r1, #7
 80095ec:	4401      	add	r1, r0
 80095ee:	3184      	adds	r1, #132	@ 0x84
 80095f0:	4313      	orrs	r3, r2
 80095f2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	01db      	lsls	r3, r3, #7
 80095fe:	4413      	add	r3, r2
 8009600:	3384      	adds	r3, #132	@ 0x84
 8009602:	461a      	mov	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009608:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8009612:	2304      	movs	r3, #4
 8009614:	61fb      	str	r3, [r7, #28]
 8009616:	e01b      	b.n	8009650 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d102      	bne.n	8009626 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8009620:	2303      	movs	r3, #3
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	e014      	b.n	8009650 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	2b04      	cmp	r3, #4
 800962c:	d00b      	beq.n	8009646 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009632:	2b02      	cmp	r3, #2
 8009634:	d007      	beq.n	8009646 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800963a:	2b03      	cmp	r3, #3
 800963c:	d003      	beq.n	8009646 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009642:	2b07      	cmp	r3, #7
 8009644:	d102      	bne.n	800964c <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8009646:	2302      	movs	r3, #2
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	e001      	b.n	8009650 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 800964c:	2301      	movs	r3, #1
 800964e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	01db      	lsls	r3, r3, #7
 800965a:	4413      	add	r3, r2
 800965c:	3384      	adds	r3, #132	@ 0x84
 800965e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	6812      	ldr	r2, [r2, #0]
 8009664:	4611      	mov	r1, r2
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	01d2      	lsls	r2, r2, #7
 800966a:	440a      	add	r2, r1
 800966c:	3284      	adds	r2, #132	@ 0x84
 800966e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009672:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	fb02 f303 	mul.w	r3, r2, r3
 800967e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	6859      	ldr	r1, [r3, #4]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	1acb      	subs	r3, r1, r3
 800968a:	69f9      	ldr	r1, [r7, #28]
 800968c:	fb01 f303 	mul.w	r3, r1, r3
 8009690:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009692:	68f9      	ldr	r1, [r7, #12]
 8009694:	6809      	ldr	r1, [r1, #0]
 8009696:	4608      	mov	r0, r1
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	01c9      	lsls	r1, r1, #7
 800969c:	4401      	add	r1, r0
 800969e:	3184      	adds	r1, #132	@ 0x84
 80096a0:	4313      	orrs	r3, r2
 80096a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	01db      	lsls	r3, r3, #7
 80096ae:	4413      	add	r3, r2
 80096b0:	3384      	adds	r3, #132	@ 0x84
 80096b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	6812      	ldr	r2, [r2, #0]
 80096b8:	4611      	mov	r1, r2
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	01d2      	lsls	r2, r2, #7
 80096be:	440a      	add	r2, r1
 80096c0:	3284      	adds	r2, #132	@ 0x84
 80096c2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80096c6:	f023 0307 	bic.w	r3, r3, #7
 80096ca:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	01db      	lsls	r3, r3, #7
 80096d6:	4413      	add	r3, r2
 80096d8:	3384      	adds	r3, #132	@ 0x84
 80096da:	461a      	mov	r2, r3
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	01db      	lsls	r3, r3, #7
 80096ec:	4413      	add	r3, r2
 80096ee:	3384      	adds	r3, #132	@ 0x84
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	6812      	ldr	r2, [r2, #0]
 80096f6:	4611      	mov	r1, r2
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	01d2      	lsls	r2, r2, #7
 80096fc:	440a      	add	r2, r1
 80096fe:	3284      	adds	r2, #132	@ 0x84
 8009700:	f043 0301 	orr.w	r3, r3, #1
 8009704:	6013      	str	r3, [r2, #0]
}
 8009706:	bf00      	nop
 8009708:	3724      	adds	r7, #36	@ 0x24
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b086      	sub	sp, #24
 8009716:	af02      	add	r7, sp, #8
 8009718:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e0fe      	b.n	8009922 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7f9 faf1 	bl	8002d20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2203      	movs	r2, #3
 8009742:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4618      	mov	r0, r3
 800974c:	f007 ff8d 	bl	801166a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	7c1a      	ldrb	r2, [r3, #16]
 8009758:	f88d 2000 	strb.w	r2, [sp]
 800975c:	3304      	adds	r3, #4
 800975e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009760:	f007 ff54 	bl	801160c <USB_CoreInit>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d005      	beq.n	8009776 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2202      	movs	r2, #2
 800976e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e0d5      	b.n	8009922 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2100      	movs	r1, #0
 800977c:	4618      	mov	r0, r3
 800977e:	f007 ff85 	bl	801168c <USB_SetCurrentMode>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e0c6      	b.n	8009922 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
 8009798:	e04a      	b.n	8009830 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800979a:	7bfa      	ldrb	r2, [r7, #15]
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	4613      	mov	r3, r2
 80097a0:	00db      	lsls	r3, r3, #3
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	440b      	add	r3, r1
 80097a8:	3315      	adds	r3, #21
 80097aa:	2201      	movs	r2, #1
 80097ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80097ae:	7bfa      	ldrb	r2, [r7, #15]
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	4613      	mov	r3, r2
 80097b4:	00db      	lsls	r3, r3, #3
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	3314      	adds	r3, #20
 80097be:	7bfa      	ldrb	r2, [r7, #15]
 80097c0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80097c2:	7bfa      	ldrb	r2, [r7, #15]
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	b298      	uxth	r0, r3
 80097c8:	6879      	ldr	r1, [r7, #4]
 80097ca:	4613      	mov	r3, r2
 80097cc:	00db      	lsls	r3, r3, #3
 80097ce:	4413      	add	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	440b      	add	r3, r1
 80097d4:	332e      	adds	r3, #46	@ 0x2e
 80097d6:	4602      	mov	r2, r0
 80097d8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80097da:	7bfa      	ldrb	r2, [r7, #15]
 80097dc:	6879      	ldr	r1, [r7, #4]
 80097de:	4613      	mov	r3, r2
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	440b      	add	r3, r1
 80097e8:	3318      	adds	r3, #24
 80097ea:	2200      	movs	r2, #0
 80097ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80097ee:	7bfa      	ldrb	r2, [r7, #15]
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	4613      	mov	r3, r2
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	331c      	adds	r3, #28
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009802:	7bfa      	ldrb	r2, [r7, #15]
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	3320      	adds	r3, #32
 8009812:	2200      	movs	r2, #0
 8009814:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009816:	7bfa      	ldrb	r2, [r7, #15]
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	3324      	adds	r3, #36	@ 0x24
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	3301      	adds	r3, #1
 800982e:	73fb      	strb	r3, [r7, #15]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	791b      	ldrb	r3, [r3, #4]
 8009834:	7bfa      	ldrb	r2, [r7, #15]
 8009836:	429a      	cmp	r2, r3
 8009838:	d3af      	bcc.n	800979a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
 800983e:	e044      	b.n	80098ca <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009840:	7bfa      	ldrb	r2, [r7, #15]
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	4613      	mov	r3, r2
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	440b      	add	r3, r1
 800984e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009852:	2200      	movs	r2, #0
 8009854:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009856:	7bfa      	ldrb	r2, [r7, #15]
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	4613      	mov	r3, r2
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	440b      	add	r3, r1
 8009864:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009868:	7bfa      	ldrb	r2, [r7, #15]
 800986a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800986c:	7bfa      	ldrb	r2, [r7, #15]
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800987e:	2200      	movs	r2, #0
 8009880:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009882:	7bfa      	ldrb	r2, [r7, #15]
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009898:	7bfa      	ldrb	r2, [r7, #15]
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	4613      	mov	r3, r2
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80098ae:	7bfa      	ldrb	r2, [r7, #15]
 80098b0:	6879      	ldr	r1, [r7, #4]
 80098b2:	4613      	mov	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	440b      	add	r3, r1
 80098bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	3301      	adds	r3, #1
 80098c8:	73fb      	strb	r3, [r7, #15]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	791b      	ldrb	r3, [r3, #4]
 80098ce:	7bfa      	ldrb	r2, [r7, #15]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d3b5      	bcc.n	8009840 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6818      	ldr	r0, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7c1a      	ldrb	r2, [r3, #16]
 80098dc:	f88d 2000 	strb.w	r2, [sp]
 80098e0:	3304      	adds	r3, #4
 80098e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098e4:	f007 ff1e 	bl	8011724 <USB_DevInit>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d005      	beq.n	80098fa <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2202      	movs	r2, #2
 80098f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e013      	b.n	8009922 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	7b1b      	ldrb	r3, [r3, #12]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d102      	bne.n	8009916 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f80a 	bl	800992a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	f008 f8eb 	bl	8011af6 <USB_DevDisconnect>

  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800992a:	b480      	push	{r7}
 800992c:	b085      	sub	sp, #20
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800995c:	f043 0303 	orr.w	r3, r3, #3
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
	...

08009974 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009978:	4b05      	ldr	r3, [pc, #20]	@ (8009990 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800997a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997c:	4a04      	ldr	r2, [pc, #16]	@ (8009990 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800997e:	f043 0301 	orr.w	r3, r3, #1
 8009982:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009984:	bf00      	nop
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	46020800 	.word	0x46020800

08009994 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800999c:	4b39      	ldr	r3, [pc, #228]	@ (8009a84 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800999e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80099a4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d10b      	bne.n	80099c6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099b4:	d905      	bls.n	80099c2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80099b6:	4b33      	ldr	r3, [pc, #204]	@ (8009a84 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	4a32      	ldr	r2, [pc, #200]	@ (8009a84 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80099bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099c0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e057      	b.n	8009a76 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099cc:	d90a      	bls.n	80099e4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80099ce:	4b2d      	ldr	r3, [pc, #180]	@ (8009a84 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4313      	orrs	r3, r2
 80099da:	4a2a      	ldr	r2, [pc, #168]	@ (8009a84 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80099dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099e0:	60d3      	str	r3, [r2, #12]
 80099e2:	e007      	b.n	80099f4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80099e4:	4b27      	ldr	r3, [pc, #156]	@ (8009a84 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80099ec:	4925      	ldr	r1, [pc, #148]	@ (8009a84 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80099f4:	4b24      	ldr	r3, [pc, #144]	@ (8009a88 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a24      	ldr	r2, [pc, #144]	@ (8009a8c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80099fa:	fba2 2303 	umull	r2, r3, r2, r3
 80099fe:	099b      	lsrs	r3, r3, #6
 8009a00:	2232      	movs	r2, #50	@ 0x32
 8009a02:	fb02 f303 	mul.w	r3, r2, r3
 8009a06:	4a21      	ldr	r2, [pc, #132]	@ (8009a8c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009a08:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0c:	099b      	lsrs	r3, r3, #6
 8009a0e:	3301      	adds	r3, #1
 8009a10:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009a12:	e002      	b.n	8009a1a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009a84 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <HAL_PWREx_ControlVoltageScaling+0x98>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f3      	bne.n	8009a14 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d01b      	beq.n	8009a6a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009a32:	4b15      	ldr	r3, [pc, #84]	@ (8009a88 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a15      	ldr	r2, [pc, #84]	@ (8009a8c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009a38:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3c:	099b      	lsrs	r3, r3, #6
 8009a3e:	2232      	movs	r2, #50	@ 0x32
 8009a40:	fb02 f303 	mul.w	r3, r2, r3
 8009a44:	4a11      	ldr	r2, [pc, #68]	@ (8009a8c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009a46:	fba2 2303 	umull	r2, r3, r2, r3
 8009a4a:	099b      	lsrs	r3, r3, #6
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009a50:	e002      	b.n	8009a58 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009a58:	4b0a      	ldr	r3, [pc, #40]	@ (8009a84 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d102      	bne.n	8009a6a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1f3      	bne.n	8009a52 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e000      	b.n	8009a76 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	46020800 	.word	0x46020800
 8009a88:	20000000 	.word	0x20000000
 8009a8c:	10624dd3 	.word	0x10624dd3

08009a90 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009a90:	b480      	push	{r7}
 8009a92:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009a94:	4b04      	ldr	r3, [pc, #16]	@ (8009aa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8009a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	46020800 	.word	0x46020800

08009aac <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009ab4:	4b22      	ldr	r3, [pc, #136]	@ (8009b40 <HAL_PWREx_ConfigSupply+0x94>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a22      	ldr	r2, [pc, #136]	@ (8009b44 <HAL_PWREx_ConfigSupply+0x98>)
 8009aba:	fba2 2303 	umull	r2, r3, r2, r3
 8009abe:	099b      	lsrs	r3, r3, #6
 8009ac0:	2232      	movs	r2, #50	@ 0x32
 8009ac2:	fb02 f303 	mul.w	r3, r2, r3
 8009ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8009b44 <HAL_PWREx_ConfigSupply+0x98>)
 8009ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8009acc:	099b      	lsrs	r3, r3, #6
 8009ace:	3301      	adds	r3, #1
 8009ad0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d113      	bne.n	8009b00 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8009b48 <HAL_PWREx_ConfigSupply+0x9c>)
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	4a1a      	ldr	r2, [pc, #104]	@ (8009b48 <HAL_PWREx_ConfigSupply+0x9c>)
 8009ade:	f023 0302 	bic.w	r3, r3, #2
 8009ae2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009ae4:	e002      	b.n	8009aec <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009aec:	4b16      	ldr	r3, [pc, #88]	@ (8009b48 <HAL_PWREx_ConfigSupply+0x9c>)
 8009aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d116      	bne.n	8009b26 <HAL_PWREx_ConfigSupply+0x7a>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1f3      	bne.n	8009ae6 <HAL_PWREx_ConfigSupply+0x3a>
 8009afe:	e012      	b.n	8009b26 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009b00:	4b11      	ldr	r3, [pc, #68]	@ (8009b48 <HAL_PWREx_ConfigSupply+0x9c>)
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	4a10      	ldr	r2, [pc, #64]	@ (8009b48 <HAL_PWREx_ConfigSupply+0x9c>)
 8009b06:	f043 0302 	orr.w	r3, r3, #2
 8009b0a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009b0c:	e002      	b.n	8009b14 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009b14:	4b0c      	ldr	r3, [pc, #48]	@ (8009b48 <HAL_PWREx_ConfigSupply+0x9c>)
 8009b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d102      	bne.n	8009b26 <HAL_PWREx_ConfigSupply+0x7a>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1f3      	bne.n	8009b0e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e000      	b.n	8009b32 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	20000000 	.word	0x20000000
 8009b44:	10624dd3 	.word	0x10624dd3
 8009b48:	46020800 	.word	0x46020800

08009b4c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009b50:	4b05      	ldr	r3, [pc, #20]	@ (8009b68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	4a04      	ldr	r2, [pc, #16]	@ (8009b68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b5a:	6113      	str	r3, [r2, #16]
}
 8009b5c:	bf00      	nop
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	46020800 	.word	0x46020800

08009b6c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009b70:	4b05      	ldr	r3, [pc, #20]	@ (8009b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	4a04      	ldr	r2, [pc, #16]	@ (8009b88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009b76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b7a:	6113      	str	r3, [r2, #16]
}
 8009b7c:	bf00      	nop
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	46020800 	.word	0x46020800

08009b8c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009b90:	4b05      	ldr	r3, [pc, #20]	@ (8009ba8 <HAL_PWREx_EnableVddA+0x1c>)
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	4a04      	ldr	r2, [pc, #16]	@ (8009ba8 <HAL_PWREx_EnableVddA+0x1c>)
 8009b96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b9a:	6113      	str	r3, [r2, #16]
}
 8009b9c:	bf00      	nop
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	46020800 	.word	0x46020800

08009bac <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009bb2:	f7ff ff6d 	bl	8009a90 <HAL_PWREx_GetVoltageRange>
 8009bb6:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009bbe:	d003      	beq.n	8009bc8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bc6:	d107      	bne.n	8009bd8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009bc8:	4b06      	ldr	r3, [pc, #24]	@ (8009be4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4a05      	ldr	r2, [pc, #20]	@ (8009be4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009bce:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009bd2:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	e000      	b.n	8009bda <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	46020800 	.word	0x46020800

08009be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08e      	sub	sp, #56	@ 0x38
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f000 bec8 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c02:	4b99      	ldr	r3, [pc, #612]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	f003 030c 	and.w	r3, r3, #12
 8009c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c0c:	4b96      	ldr	r3, [pc, #600]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 0310 	and.w	r3, r3, #16
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 816c 	beq.w	8009efc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d007      	beq.n	8009c3a <HAL_RCC_OscConfig+0x52>
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2c:	2b0c      	cmp	r3, #12
 8009c2e:	f040 80de 	bne.w	8009dee <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	f040 80da 	bne.w	8009dee <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f000 bea5 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c4c:	4b86      	ldr	r3, [pc, #536]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d004      	beq.n	8009c62 <HAL_RCC_OscConfig+0x7a>
 8009c58:	4b83      	ldr	r3, [pc, #524]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009c60:	e005      	b.n	8009c6e <HAL_RCC_OscConfig+0x86>
 8009c62:	4b81      	ldr	r3, [pc, #516]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c68:	041b      	lsls	r3, r3, #16
 8009c6a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d255      	bcs.n	8009d1e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f001 f9d9 	bl	800b034 <RCC_SetFlashLatencyFromMSIRange>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f000 be82 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009c8e:	4b76      	ldr	r3, [pc, #472]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	4a75      	ldr	r2, [pc, #468]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009c94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009c98:	6093      	str	r3, [r2, #8]
 8009c9a:	4b73      	ldr	r3, [pc, #460]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca6:	4970      	ldr	r1, [pc, #448]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009cb4:	d309      	bcc.n	8009cca <HAL_RCC_OscConfig+0xe2>
 8009cb6:	4b6c      	ldr	r3, [pc, #432]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	f023 021f 	bic.w	r2, r3, #31
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	4969      	ldr	r1, [pc, #420]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60cb      	str	r3, [r1, #12]
 8009cc8:	e07e      	b.n	8009dc8 <HAL_RCC_OscConfig+0x1e0>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da0a      	bge.n	8009ce8 <HAL_RCC_OscConfig+0x100>
 8009cd2:	4b65      	ldr	r3, [pc, #404]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	015b      	lsls	r3, r3, #5
 8009ce0:	4961      	ldr	r1, [pc, #388]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60cb      	str	r3, [r1, #12]
 8009ce6:	e06f      	b.n	8009dc8 <HAL_RCC_OscConfig+0x1e0>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf0:	d30a      	bcc.n	8009d08 <HAL_RCC_OscConfig+0x120>
 8009cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	029b      	lsls	r3, r3, #10
 8009d00:	4959      	ldr	r1, [pc, #356]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60cb      	str	r3, [r1, #12]
 8009d06:	e05f      	b.n	8009dc8 <HAL_RCC_OscConfig+0x1e0>
 8009d08:	4b57      	ldr	r3, [pc, #348]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	03db      	lsls	r3, r3, #15
 8009d16:	4954      	ldr	r1, [pc, #336]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	60cb      	str	r3, [r1, #12]
 8009d1c:	e054      	b.n	8009dc8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009d1e:	4b52      	ldr	r3, [pc, #328]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	4a51      	ldr	r2, [pc, #324]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d28:	6093      	str	r3, [r2, #8]
 8009d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d36:	494c      	ldr	r1, [pc, #304]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d40:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009d44:	d309      	bcc.n	8009d5a <HAL_RCC_OscConfig+0x172>
 8009d46:	4b48      	ldr	r3, [pc, #288]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	f023 021f 	bic.w	r2, r3, #31
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	4945      	ldr	r1, [pc, #276]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d54:	4313      	orrs	r3, r2
 8009d56:	60cb      	str	r3, [r1, #12]
 8009d58:	e028      	b.n	8009dac <HAL_RCC_OscConfig+0x1c4>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	da0a      	bge.n	8009d78 <HAL_RCC_OscConfig+0x190>
 8009d62:	4b41      	ldr	r3, [pc, #260]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	015b      	lsls	r3, r3, #5
 8009d70:	493d      	ldr	r1, [pc, #244]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	60cb      	str	r3, [r1, #12]
 8009d76:	e019      	b.n	8009dac <HAL_RCC_OscConfig+0x1c4>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d80:	d30a      	bcc.n	8009d98 <HAL_RCC_OscConfig+0x1b0>
 8009d82:	4b39      	ldr	r3, [pc, #228]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	029b      	lsls	r3, r3, #10
 8009d90:	4935      	ldr	r1, [pc, #212]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60cb      	str	r3, [r1, #12]
 8009d96:	e009      	b.n	8009dac <HAL_RCC_OscConfig+0x1c4>
 8009d98:	4b33      	ldr	r3, [pc, #204]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
 8009da4:	03db      	lsls	r3, r3, #15
 8009da6:	4930      	ldr	r1, [pc, #192]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10a      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db6:	4618      	mov	r0, r3
 8009db8:	f001 f93c 	bl	800b034 <RCC_SetFlashLatencyFromMSIRange>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d002      	beq.n	8009dc8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f000 bde5 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009dc8:	f001 f8de 	bl	800af88 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009dcc:	4b27      	ldr	r3, [pc, #156]	@ (8009e6c <HAL_RCC_OscConfig+0x284>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f9 fb29 	bl	8003428 <HAL_InitTick>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 808a 	beq.w	8009efa <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009de6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dea:	f000 bdd2 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d066      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009df6:	4b1c      	ldr	r3, [pc, #112]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009dfc:	f043 0301 	orr.w	r3, r3, #1
 8009e00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e02:	f7f9 fb9b 	bl	800353c <HAL_GetTick>
 8009e06:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009e08:	e009      	b.n	8009e1e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e0a:	f7f9 fb97 	bl	800353c <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d902      	bls.n	8009e1e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	f000 bdba 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009e1e:	4b12      	ldr	r3, [pc, #72]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0304 	and.w	r3, r3, #4
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0ef      	beq.n	8009e0a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009e30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009e34:	6093      	str	r3, [r2, #8]
 8009e36:	4b0c      	ldr	r3, [pc, #48]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e42:	4909      	ldr	r1, [pc, #36]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009e44:	4313      	orrs	r3, r2
 8009e46:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009e50:	d30e      	bcc.n	8009e70 <HAL_RCC_OscConfig+0x288>
 8009e52:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f023 021f 	bic.w	r2, r3, #31
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	4902      	ldr	r1, [pc, #8]	@ (8009e68 <HAL_RCC_OscConfig+0x280>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60cb      	str	r3, [r1, #12]
 8009e64:	e04a      	b.n	8009efc <HAL_RCC_OscConfig+0x314>
 8009e66:	bf00      	nop
 8009e68:	46020c00 	.word	0x46020c00
 8009e6c:	20000004 	.word	0x20000004
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	da0a      	bge.n	8009e8e <HAL_RCC_OscConfig+0x2a6>
 8009e78:	4b98      	ldr	r3, [pc, #608]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a1b      	ldr	r3, [r3, #32]
 8009e84:	015b      	lsls	r3, r3, #5
 8009e86:	4995      	ldr	r1, [pc, #596]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60cb      	str	r3, [r1, #12]
 8009e8c:	e036      	b.n	8009efc <HAL_RCC_OscConfig+0x314>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e96:	d30a      	bcc.n	8009eae <HAL_RCC_OscConfig+0x2c6>
 8009e98:	4b90      	ldr	r3, [pc, #576]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	029b      	lsls	r3, r3, #10
 8009ea6:	498d      	ldr	r1, [pc, #564]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	60cb      	str	r3, [r1, #12]
 8009eac:	e026      	b.n	8009efc <HAL_RCC_OscConfig+0x314>
 8009eae:	4b8b      	ldr	r3, [pc, #556]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	03db      	lsls	r3, r3, #15
 8009ebc:	4987      	ldr	r1, [pc, #540]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	60cb      	str	r3, [r1, #12]
 8009ec2:	e01b      	b.n	8009efc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009ec4:	4b85      	ldr	r3, [pc, #532]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a84      	ldr	r2, [pc, #528]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009eca:	f023 0301 	bic.w	r3, r3, #1
 8009ece:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009ed0:	f7f9 fb34 	bl	800353c <HAL_GetTick>
 8009ed4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009ed6:	e009      	b.n	8009eec <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009ed8:	f7f9 fb30 	bl	800353c <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d902      	bls.n	8009eec <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	f000 bd53 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009eec:	4b7b      	ldr	r3, [pc, #492]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1ef      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x2f0>
 8009ef8:	e000      	b.n	8009efc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009efa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 808b 	beq.w	800a020 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	d005      	beq.n	8009f1c <HAL_RCC_OscConfig+0x334>
 8009f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f12:	2b0c      	cmp	r3, #12
 8009f14:	d109      	bne.n	8009f2a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d106      	bne.n	8009f2a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d17d      	bne.n	800a020 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	f000 bd34 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f32:	d106      	bne.n	8009f42 <HAL_RCC_OscConfig+0x35a>
 8009f34:	4b69      	ldr	r3, [pc, #420]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a68      	ldr	r2, [pc, #416]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	e041      	b.n	8009fc6 <HAL_RCC_OscConfig+0x3de>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f4a:	d112      	bne.n	8009f72 <HAL_RCC_OscConfig+0x38a>
 8009f4c:	4b63      	ldr	r3, [pc, #396]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a62      	ldr	r2, [pc, #392]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	4b60      	ldr	r3, [pc, #384]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a5f      	ldr	r2, [pc, #380]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f5e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009f62:	6013      	str	r3, [r2, #0]
 8009f64:	4b5d      	ldr	r3, [pc, #372]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a5c      	ldr	r2, [pc, #368]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	e029      	b.n	8009fc6 <HAL_RCC_OscConfig+0x3de>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009f7a:	d112      	bne.n	8009fa2 <HAL_RCC_OscConfig+0x3ba>
 8009f7c:	4b57      	ldr	r3, [pc, #348]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a56      	ldr	r2, [pc, #344]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	4b54      	ldr	r3, [pc, #336]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a53      	ldr	r2, [pc, #332]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	4b51      	ldr	r3, [pc, #324]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a50      	ldr	r2, [pc, #320]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	e011      	b.n	8009fc6 <HAL_RCC_OscConfig+0x3de>
 8009fa2:	4b4e      	ldr	r3, [pc, #312]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a4d      	ldr	r2, [pc, #308]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	4b4b      	ldr	r3, [pc, #300]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a4a      	ldr	r2, [pc, #296]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009fb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	4b48      	ldr	r3, [pc, #288]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a47      	ldr	r2, [pc, #284]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009fc0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009fc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d014      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009fce:	f7f9 fab5 	bl	800353c <HAL_GetTick>
 8009fd2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fd4:	e009      	b.n	8009fea <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fd6:	f7f9 fab1 	bl	800353c <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	2b64      	cmp	r3, #100	@ 0x64
 8009fe2:	d902      	bls.n	8009fea <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	f000 bcd4 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fea:	4b3c      	ldr	r3, [pc, #240]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0ef      	beq.n	8009fd6 <HAL_RCC_OscConfig+0x3ee>
 8009ff6:	e013      	b.n	800a020 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009ff8:	f7f9 faa0 	bl	800353c <HAL_GetTick>
 8009ffc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ffe:	e009      	b.n	800a014 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a000:	f7f9 fa9c 	bl	800353c <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	2b64      	cmp	r3, #100	@ 0x64
 800a00c:	d902      	bls.n	800a014 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	f000 bcbf 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a014:	4b31      	ldr	r3, [pc, #196]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1ef      	bne.n	800a000 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d05f      	beq.n	800a0ec <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	2b04      	cmp	r3, #4
 800a030:	d005      	beq.n	800a03e <HAL_RCC_OscConfig+0x456>
 800a032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a034:	2b0c      	cmp	r3, #12
 800a036:	d114      	bne.n	800a062 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d111      	bne.n	800a062 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d102      	bne.n	800a04c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	f000 bca3 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a04c:	4b23      	ldr	r3, [pc, #140]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	041b      	lsls	r3, r3, #16
 800a05a:	4920      	ldr	r1, [pc, #128]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a060:	e044      	b.n	800a0ec <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d024      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a06a:	4b1c      	ldr	r3, [pc, #112]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a1b      	ldr	r2, [pc, #108]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a074:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a076:	f7f9 fa61 	bl	800353c <HAL_GetTick>
 800a07a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a07c:	e009      	b.n	800a092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a07e:	f7f9 fa5d 	bl	800353c <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d902      	bls.n	800a092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	f000 bc80 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a092:	4b12      	ldr	r3, [pc, #72]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0ef      	beq.n	800a07e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a09e:	4b0f      	ldr	r3, [pc, #60]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	041b      	lsls	r3, r3, #16
 800a0ac:	490b      	ldr	r1, [pc, #44]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	610b      	str	r3, [r1, #16]
 800a0b2:	e01b      	b.n	800a0ec <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a0b4:	4b09      	ldr	r3, [pc, #36]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a08      	ldr	r2, [pc, #32]	@ (800a0dc <HAL_RCC_OscConfig+0x4f4>)
 800a0ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a0c0:	f7f9 fa3c 	bl	800353c <HAL_GetTick>
 800a0c4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0c6:	e00b      	b.n	800a0e0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0c8:	f7f9 fa38 	bl	800353c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d904      	bls.n	800a0e0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	f000 bc5b 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
 800a0dc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a0e0:	4baf      	ldr	r3, [pc, #700]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1ed      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0308 	and.w	r3, r3, #8
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 80c8 	beq.w	800a28a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a100:	4ba7      	ldr	r3, [pc, #668]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d111      	bne.n	800a132 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a10e:	4ba4      	ldr	r3, [pc, #656]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a114:	4aa2      	ldr	r2, [pc, #648]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a116:	f043 0304 	orr.w	r3, r3, #4
 800a11a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a11e:	4ba0      	ldr	r3, [pc, #640]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	617b      	str	r3, [r7, #20]
 800a12a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a12c:	2301      	movs	r3, #1
 800a12e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a132:	4b9c      	ldr	r3, [pc, #624]	@ (800a3a4 <HAL_RCC_OscConfig+0x7bc>)
 800a134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d119      	bne.n	800a172 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a13e:	4b99      	ldr	r3, [pc, #612]	@ (800a3a4 <HAL_RCC_OscConfig+0x7bc>)
 800a140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a142:	4a98      	ldr	r2, [pc, #608]	@ (800a3a4 <HAL_RCC_OscConfig+0x7bc>)
 800a144:	f043 0301 	orr.w	r3, r3, #1
 800a148:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a14a:	f7f9 f9f7 	bl	800353c <HAL_GetTick>
 800a14e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a150:	e009      	b.n	800a166 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a152:	f7f9 f9f3 	bl	800353c <HAL_GetTick>
 800a156:	4602      	mov	r2, r0
 800a158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d902      	bls.n	800a166 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	f000 bc16 	b.w	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a166:	4b8f      	ldr	r3, [pc, #572]	@ (800a3a4 <HAL_RCC_OscConfig+0x7bc>)
 800a168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0ef      	beq.n	800a152 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d05f      	beq.n	800a23a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a17a:	4b89      	ldr	r3, [pc, #548]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a17c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a180:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	699a      	ldr	r2, [r3, #24]
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d037      	beq.n	800a200 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a196:	2b00      	cmp	r3, #0
 800a198:	d006      	beq.n	800a1a8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e3f4      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d01b      	beq.n	800a1ea <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a1b2:	4b7b      	ldr	r3, [pc, #492]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a1b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1b8:	4a79      	ldr	r2, [pc, #484]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a1ba:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a1be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800a1c2:	f7f9 f9bb 	bl	800353c <HAL_GetTick>
 800a1c6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a1c8:	e008      	b.n	800a1dc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1ca:	f7f9 f9b7 	bl	800353c <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	2b05      	cmp	r3, #5
 800a1d6:	d901      	bls.n	800a1dc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e3da      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a1dc:	4b70      	ldr	r3, [pc, #448]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a1de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1ef      	bne.n	800a1ca <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800a1ea:	4b6d      	ldr	r3, [pc, #436]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a1ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	4969      	ldr	r1, [pc, #420]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800a200:	4b67      	ldr	r3, [pc, #412]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a206:	4a66      	ldr	r2, [pc, #408]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a208:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a20c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a210:	f7f9 f994 	bl	800353c <HAL_GetTick>
 800a214:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a216:	e008      	b.n	800a22a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a218:	f7f9 f990 	bl	800353c <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b05      	cmp	r3, #5
 800a224:	d901      	bls.n	800a22a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e3b3      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800a22a:	4b5d      	ldr	r3, [pc, #372]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a22c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0ef      	beq.n	800a218 <HAL_RCC_OscConfig+0x630>
 800a238:	e01b      	b.n	800a272 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800a23a:	4b59      	ldr	r3, [pc, #356]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a23c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a240:	4a57      	ldr	r2, [pc, #348]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a242:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800a246:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800a24a:	f7f9 f977 	bl	800353c <HAL_GetTick>
 800a24e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a250:	e008      	b.n	800a264 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a252:	f7f9 f973 	bl	800353c <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b05      	cmp	r3, #5
 800a25e:	d901      	bls.n	800a264 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e396      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a264:	4b4e      	ldr	r3, [pc, #312]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a26a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1ef      	bne.n	800a252 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a272:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a276:	2b01      	cmp	r3, #1
 800a278:	d107      	bne.n	800a28a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a27a:	4b49      	ldr	r3, [pc, #292]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a27c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a280:	4a47      	ldr	r2, [pc, #284]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a282:	f023 0304 	bic.w	r3, r3, #4
 800a286:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0304 	and.w	r3, r3, #4
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 8111 	beq.w	800a4ba <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a29e:	4b40      	ldr	r3, [pc, #256]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a2a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d111      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2ac:	4b3c      	ldr	r3, [pc, #240]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a2ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2b2:	4a3b      	ldr	r2, [pc, #236]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a2b4:	f043 0304 	orr.w	r3, r3, #4
 800a2b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a2bc:	4b38      	ldr	r3, [pc, #224]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a2be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2c2:	f003 0304 	and.w	r3, r3, #4
 800a2c6:	613b      	str	r3, [r7, #16]
 800a2c8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a2d0:	4b34      	ldr	r3, [pc, #208]	@ (800a3a4 <HAL_RCC_OscConfig+0x7bc>)
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d118      	bne.n	800a30e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a2dc:	4b31      	ldr	r3, [pc, #196]	@ (800a3a4 <HAL_RCC_OscConfig+0x7bc>)
 800a2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e0:	4a30      	ldr	r2, [pc, #192]	@ (800a3a4 <HAL_RCC_OscConfig+0x7bc>)
 800a2e2:	f043 0301 	orr.w	r3, r3, #1
 800a2e6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2e8:	f7f9 f928 	bl	800353c <HAL_GetTick>
 800a2ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a2ee:	e008      	b.n	800a302 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2f0:	f7f9 f924 	bl	800353c <HAL_GetTick>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d901      	bls.n	800a302 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e347      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a302:	4b28      	ldr	r3, [pc, #160]	@ (800a3a4 <HAL_RCC_OscConfig+0x7bc>)
 800a304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0f0      	beq.n	800a2f0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d01f      	beq.n	800a35a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	f003 0304 	and.w	r3, r3, #4
 800a322:	2b00      	cmp	r3, #0
 800a324:	d010      	beq.n	800a348 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a326:	4b1e      	ldr	r3, [pc, #120]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a32c:	4a1c      	ldr	r2, [pc, #112]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a32e:	f043 0304 	orr.w	r3, r3, #4
 800a332:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a336:	4b1a      	ldr	r3, [pc, #104]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a33c:	4a18      	ldr	r2, [pc, #96]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a33e:	f043 0301 	orr.w	r3, r3, #1
 800a342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a346:	e018      	b.n	800a37a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a348:	4b15      	ldr	r3, [pc, #84]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a34a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a34e:	4a14      	ldr	r2, [pc, #80]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a350:	f043 0301 	orr.w	r3, r3, #1
 800a354:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a358:	e00f      	b.n	800a37a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a35a:	4b11      	ldr	r3, [pc, #68]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a35c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a360:	4a0f      	ldr	r2, [pc, #60]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a36a:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a36c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a370:	4a0b      	ldr	r2, [pc, #44]	@ (800a3a0 <HAL_RCC_OscConfig+0x7b8>)
 800a372:	f023 0304 	bic.w	r3, r3, #4
 800a376:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d057      	beq.n	800a432 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a382:	f7f9 f8db 	bl	800353c <HAL_GetTick>
 800a386:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a388:	e00e      	b.n	800a3a8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a38a:	f7f9 f8d7 	bl	800353c <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a398:	4293      	cmp	r3, r2
 800a39a:	d905      	bls.n	800a3a8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e2f8      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
 800a3a0:	46020c00 	.word	0x46020c00
 800a3a4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3a8:	4b9c      	ldr	r3, [pc, #624]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a3aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0e9      	beq.n	800a38a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01b      	beq.n	800a3fa <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a3c2:	4b96      	ldr	r3, [pc, #600]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a3c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3c8:	4a94      	ldr	r2, [pc, #592]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a3d2:	e00a      	b.n	800a3ea <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3d4:	f7f9 f8b2 	bl	800353c <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d901      	bls.n	800a3ea <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e2d3      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a3ea:	4b8c      	ldr	r3, [pc, #560]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a3ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0ed      	beq.n	800a3d4 <HAL_RCC_OscConfig+0x7ec>
 800a3f8:	e053      	b.n	800a4a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a3fa:	4b88      	ldr	r3, [pc, #544]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a3fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a400:	4a86      	ldr	r2, [pc, #536]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a406:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a40a:	e00a      	b.n	800a422 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a40c:	f7f9 f896 	bl	800353c <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d901      	bls.n	800a422 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e2b7      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a422:	4b7e      	ldr	r3, [pc, #504]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1ed      	bne.n	800a40c <HAL_RCC_OscConfig+0x824>
 800a430:	e037      	b.n	800a4a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a432:	f7f9 f883 	bl	800353c <HAL_GetTick>
 800a436:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a438:	e00a      	b.n	800a450 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a43a:	f7f9 f87f 	bl	800353c <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a448:	4293      	cmp	r3, r2
 800a44a:	d901      	bls.n	800a450 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e2a0      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a450:	4b72      	ldr	r3, [pc, #456]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a456:	f003 0302 	and.w	r3, r3, #2
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1ed      	bne.n	800a43a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a45e:	4b6f      	ldr	r3, [pc, #444]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01a      	beq.n	800a4a2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a46c:	4b6b      	ldr	r3, [pc, #428]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a46e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a472:	4a6a      	ldr	r2, [pc, #424]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a474:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a478:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a47c:	e00a      	b.n	800a494 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a47e:	f7f9 f85d 	bl	800353c <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d901      	bls.n	800a494 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a490:	2303      	movs	r3, #3
 800a492:	e27e      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a494:	4b61      	ldr	r3, [pc, #388]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a49a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1ed      	bne.n	800a47e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a4a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d107      	bne.n	800a4ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4aa:	4b5c      	ldr	r3, [pc, #368]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a4ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4b0:	4a5a      	ldr	r2, [pc, #360]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a4b2:	f023 0304 	bic.w	r3, r3, #4
 800a4b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d036      	beq.n	800a534 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d019      	beq.n	800a502 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a4ce:	4b53      	ldr	r3, [pc, #332]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a52      	ldr	r2, [pc, #328]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a4d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a4d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a4da:	f7f9 f82f 	bl	800353c <HAL_GetTick>
 800a4de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a4e0:	e008      	b.n	800a4f4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4e2:	f7f9 f82b 	bl	800353c <HAL_GetTick>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d901      	bls.n	800a4f4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e24e      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a4f4:	4b49      	ldr	r3, [pc, #292]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0f0      	beq.n	800a4e2 <HAL_RCC_OscConfig+0x8fa>
 800a500:	e018      	b.n	800a534 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a502:	4b46      	ldr	r3, [pc, #280]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a45      	ldr	r2, [pc, #276]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a508:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a50c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a50e:	f7f9 f815 	bl	800353c <HAL_GetTick>
 800a512:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a514:	e008      	b.n	800a528 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a516:	f7f9 f811 	bl	800353c <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	2b02      	cmp	r3, #2
 800a522:	d901      	bls.n	800a528 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	e234      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a528:	4b3c      	ldr	r3, [pc, #240]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1f0      	bne.n	800a516 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d036      	beq.n	800a5ae <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a544:	2b00      	cmp	r3, #0
 800a546:	d019      	beq.n	800a57c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a548:	4b34      	ldr	r3, [pc, #208]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a33      	ldr	r2, [pc, #204]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a54e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a552:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a554:	f7f8 fff2 	bl	800353c <HAL_GetTick>
 800a558:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a55a:	e008      	b.n	800a56e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a55c:	f7f8 ffee 	bl	800353c <HAL_GetTick>
 800a560:	4602      	mov	r2, r0
 800a562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	2b02      	cmp	r3, #2
 800a568:	d901      	bls.n	800a56e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e211      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a56e:	4b2b      	ldr	r3, [pc, #172]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0f0      	beq.n	800a55c <HAL_RCC_OscConfig+0x974>
 800a57a:	e018      	b.n	800a5ae <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a57c:	4b27      	ldr	r3, [pc, #156]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a26      	ldr	r2, [pc, #152]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a586:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a588:	f7f8 ffd8 	bl	800353c <HAL_GetTick>
 800a58c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a58e:	e008      	b.n	800a5a2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a590:	f7f8 ffd4 	bl	800353c <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d901      	bls.n	800a5a2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e1f7      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a5a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1f0      	bne.n	800a590 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d07f      	beq.n	800a6ba <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d062      	beq.n	800a688 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a5c2:	4b16      	ldr	r3, [pc, #88]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	4a15      	ldr	r2, [pc, #84]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a5c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a5cc:	6093      	str	r3, [r2, #8]
 800a5ce:	4b13      	ldr	r3, [pc, #76]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5da:	4910      	ldr	r1, [pc, #64]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a5e8:	d309      	bcc.n	800a5fe <HAL_RCC_OscConfig+0xa16>
 800a5ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f023 021f 	bic.w	r2, r3, #31
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	4909      	ldr	r1, [pc, #36]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	60cb      	str	r3, [r1, #12]
 800a5fc:	e02a      	b.n	800a654 <HAL_RCC_OscConfig+0xa6c>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a602:	2b00      	cmp	r3, #0
 800a604:	da0c      	bge.n	800a620 <HAL_RCC_OscConfig+0xa38>
 800a606:	4b05      	ldr	r3, [pc, #20]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	015b      	lsls	r3, r3, #5
 800a614:	4901      	ldr	r1, [pc, #4]	@ (800a61c <HAL_RCC_OscConfig+0xa34>)
 800a616:	4313      	orrs	r3, r2
 800a618:	60cb      	str	r3, [r1, #12]
 800a61a:	e01b      	b.n	800a654 <HAL_RCC_OscConfig+0xa6c>
 800a61c:	46020c00 	.word	0x46020c00
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a628:	d30a      	bcc.n	800a640 <HAL_RCC_OscConfig+0xa58>
 800a62a:	4ba1      	ldr	r3, [pc, #644]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	029b      	lsls	r3, r3, #10
 800a638:	499d      	ldr	r1, [pc, #628]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60cb      	str	r3, [r1, #12]
 800a63e:	e009      	b.n	800a654 <HAL_RCC_OscConfig+0xa6c>
 800a640:	4b9b      	ldr	r3, [pc, #620]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	03db      	lsls	r3, r3, #15
 800a64e:	4998      	ldr	r1, [pc, #608]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a650:	4313      	orrs	r3, r2
 800a652:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a654:	4b96      	ldr	r3, [pc, #600]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a95      	ldr	r2, [pc, #596]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a65a:	f043 0310 	orr.w	r3, r3, #16
 800a65e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a660:	f7f8 ff6c 	bl	800353c <HAL_GetTick>
 800a664:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a666:	e008      	b.n	800a67a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a668:	f7f8 ff68 	bl	800353c <HAL_GetTick>
 800a66c:	4602      	mov	r2, r0
 800a66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	2b02      	cmp	r3, #2
 800a674:	d901      	bls.n	800a67a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e18b      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a67a:	4b8d      	ldr	r3, [pc, #564]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0320 	and.w	r3, r3, #32
 800a682:	2b00      	cmp	r3, #0
 800a684:	d0f0      	beq.n	800a668 <HAL_RCC_OscConfig+0xa80>
 800a686:	e018      	b.n	800a6ba <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a688:	4b89      	ldr	r3, [pc, #548]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a88      	ldr	r2, [pc, #544]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a68e:	f023 0310 	bic.w	r3, r3, #16
 800a692:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a694:	f7f8 ff52 	bl	800353c <HAL_GetTick>
 800a698:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a69a:	e008      	b.n	800a6ae <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a69c:	f7f8 ff4e 	bl	800353c <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d901      	bls.n	800a6ae <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e171      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a6ae:	4b80      	ldr	r3, [pc, #512]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0320 	and.w	r3, r3, #32
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1f0      	bne.n	800a69c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 8166 	beq.w	800a990 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a6ca:	4b79      	ldr	r3, [pc, #484]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	f003 030c 	and.w	r3, r3, #12
 800a6d2:	2b0c      	cmp	r3, #12
 800a6d4:	f000 80f2 	beq.w	800a8bc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	f040 80c5 	bne.w	800a86c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a6e2:	4b73      	ldr	r3, [pc, #460]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a72      	ldr	r2, [pc, #456]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a6e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a6ee:	f7f8 ff25 	bl	800353c <HAL_GetTick>
 800a6f2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a6f4:	e008      	b.n	800a708 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6f6:	f7f8 ff21 	bl	800353c <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	2b02      	cmp	r3, #2
 800a702:	d901      	bls.n	800a708 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e144      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a708:	4b69      	ldr	r3, [pc, #420]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1f0      	bne.n	800a6f6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a714:	4b66      	ldr	r3, [pc, #408]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a71a:	f003 0304 	and.w	r3, r3, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d111      	bne.n	800a746 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a722:	4b63      	ldr	r3, [pc, #396]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a728:	4a61      	ldr	r2, [pc, #388]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a72a:	f043 0304 	orr.w	r3, r3, #4
 800a72e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a732:	4b5f      	ldr	r3, [pc, #380]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a740:	2301      	movs	r3, #1
 800a742:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a746:	4b5b      	ldr	r3, [pc, #364]	@ (800a8b4 <HAL_RCC_OscConfig+0xccc>)
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a74e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a752:	d102      	bne.n	800a75a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a754:	2301      	movs	r3, #1
 800a756:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a75a:	4b56      	ldr	r3, [pc, #344]	@ (800a8b4 <HAL_RCC_OscConfig+0xccc>)
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	4a55      	ldr	r2, [pc, #340]	@ (800a8b4 <HAL_RCC_OscConfig+0xccc>)
 800a760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a764:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a766:	4b52      	ldr	r3, [pc, #328]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a76a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a76e:	f023 0303 	bic.w	r3, r3, #3
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a77a:	3a01      	subs	r2, #1
 800a77c:	0212      	lsls	r2, r2, #8
 800a77e:	4311      	orrs	r1, r2
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a784:	430a      	orrs	r2, r1
 800a786:	494a      	ldr	r1, [pc, #296]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a788:	4313      	orrs	r3, r2
 800a78a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a78c:	4b48      	ldr	r3, [pc, #288]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a78e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a790:	4b49      	ldr	r3, [pc, #292]	@ (800a8b8 <HAL_RCC_OscConfig+0xcd0>)
 800a792:	4013      	ands	r3, r2
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a798:	3a01      	subs	r2, #1
 800a79a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a7a2:	3a01      	subs	r2, #1
 800a7a4:	0252      	lsls	r2, r2, #9
 800a7a6:	b292      	uxth	r2, r2
 800a7a8:	4311      	orrs	r1, r2
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a7ae:	3a01      	subs	r2, #1
 800a7b0:	0412      	lsls	r2, r2, #16
 800a7b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a7b6:	4311      	orrs	r1, r2
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a7bc:	3a01      	subs	r2, #1
 800a7be:	0612      	lsls	r2, r2, #24
 800a7c0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	493a      	ldr	r1, [pc, #232]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a7cc:	4b38      	ldr	r3, [pc, #224]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d0:	4a37      	ldr	r2, [pc, #220]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a7d2:	f023 0310 	bic.w	r3, r3, #16
 800a7d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7dc:	4a34      	ldr	r2, [pc, #208]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a7e2:	4b33      	ldr	r3, [pc, #204]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e6:	4a32      	ldr	r2, [pc, #200]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a7e8:	f043 0310 	orr.w	r3, r3, #16
 800a7ec:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a7ee:	4b30      	ldr	r3, [pc, #192]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f2:	f023 020c 	bic.w	r2, r3, #12
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7fa:	492d      	ldr	r1, [pc, #180]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a800:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a804:	2b01      	cmp	r3, #1
 800a806:	d105      	bne.n	800a814 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a808:	4b2a      	ldr	r3, [pc, #168]	@ (800a8b4 <HAL_RCC_OscConfig+0xccc>)
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	4a29      	ldr	r2, [pc, #164]	@ (800a8b4 <HAL_RCC_OscConfig+0xccc>)
 800a80e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a812:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a814:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d107      	bne.n	800a82c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a81c:	4b24      	ldr	r3, [pc, #144]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a81e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a822:	4a23      	ldr	r2, [pc, #140]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a824:	f023 0304 	bic.w	r3, r3, #4
 800a828:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a82c:	4b20      	ldr	r3, [pc, #128]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a1f      	ldr	r2, [pc, #124]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a836:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a838:	f7f8 fe80 	bl	800353c <HAL_GetTick>
 800a83c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a83e:	e008      	b.n	800a852 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a840:	f7f8 fe7c 	bl	800353c <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e09f      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a852:	4b17      	ldr	r3, [pc, #92]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0f0      	beq.n	800a840 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a85e:	4b14      	ldr	r3, [pc, #80]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a862:	4a13      	ldr	r2, [pc, #76]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a868:	6293      	str	r3, [r2, #40]	@ 0x28
 800a86a:	e091      	b.n	800a990 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a86c:	4b10      	ldr	r3, [pc, #64]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a0f      	ldr	r2, [pc, #60]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a876:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a878:	f7f8 fe60 	bl	800353c <HAL_GetTick>
 800a87c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a87e:	e008      	b.n	800a892 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a880:	f7f8 fe5c 	bl	800353c <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d901      	bls.n	800a892 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e07f      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a892:	4b07      	ldr	r3, [pc, #28]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1f0      	bne.n	800a880 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a89e:	4b04      	ldr	r3, [pc, #16]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a2:	4a03      	ldr	r2, [pc, #12]	@ (800a8b0 <HAL_RCC_OscConfig+0xcc8>)
 800a8a4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a8a8:	f023 0303 	bic.w	r3, r3, #3
 800a8ac:	6293      	str	r3, [r2, #40]	@ 0x28
 800a8ae:	e06f      	b.n	800a990 <HAL_RCC_OscConfig+0xda8>
 800a8b0:	46020c00 	.word	0x46020c00
 800a8b4:	46020800 	.word	0x46020800
 800a8b8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a8bc:	4b37      	ldr	r3, [pc, #220]	@ (800a99c <HAL_RCC_OscConfig+0xdb4>)
 800a8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a8c2:	4b36      	ldr	r3, [pc, #216]	@ (800a99c <HAL_RCC_OscConfig+0xdb4>)
 800a8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d039      	beq.n	800a944 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	f003 0203 	and.w	r2, r3, #3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d132      	bne.n	800a944 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	0a1b      	lsrs	r3, r3, #8
 800a8e2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ea:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d129      	bne.n	800a944 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d122      	bne.n	800a944 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a908:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d11a      	bne.n	800a944 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	0a5b      	lsrs	r3, r3, #9
 800a912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a91a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d111      	bne.n	800a944 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	0c1b      	lsrs	r3, r3, #16
 800a924:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a92c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a92e:	429a      	cmp	r2, r3
 800a930:	d108      	bne.n	800a944 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	0e1b      	lsrs	r3, r3, #24
 800a936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a93e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a940:	429a      	cmp	r2, r3
 800a942:	d001      	beq.n	800a948 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e024      	b.n	800a992 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a948:	4b14      	ldr	r3, [pc, #80]	@ (800a99c <HAL_RCC_OscConfig+0xdb4>)
 800a94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a94c:	08db      	lsrs	r3, r3, #3
 800a94e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a956:	429a      	cmp	r2, r3
 800a958:	d01a      	beq.n	800a990 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a95a:	4b10      	ldr	r3, [pc, #64]	@ (800a99c <HAL_RCC_OscConfig+0xdb4>)
 800a95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a95e:	4a0f      	ldr	r2, [pc, #60]	@ (800a99c <HAL_RCC_OscConfig+0xdb4>)
 800a960:	f023 0310 	bic.w	r3, r3, #16
 800a964:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a966:	f7f8 fde9 	bl	800353c <HAL_GetTick>
 800a96a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a96c:	bf00      	nop
 800a96e:	f7f8 fde5 	bl	800353c <HAL_GetTick>
 800a972:	4602      	mov	r2, r0
 800a974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a976:	4293      	cmp	r3, r2
 800a978:	d0f9      	beq.n	800a96e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a97e:	4a07      	ldr	r2, [pc, #28]	@ (800a99c <HAL_RCC_OscConfig+0xdb4>)
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a984:	4b05      	ldr	r3, [pc, #20]	@ (800a99c <HAL_RCC_OscConfig+0xdb4>)
 800a986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a988:	4a04      	ldr	r2, [pc, #16]	@ (800a99c <HAL_RCC_OscConfig+0xdb4>)
 800a98a:	f043 0310 	orr.w	r3, r3, #16
 800a98e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3738      	adds	r7, #56	@ 0x38
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	46020c00 	.word	0x46020c00

0800a9a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e1d9      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a9b4:	4b9b      	ldr	r3, [pc, #620]	@ (800ac24 <HAL_RCC_ClockConfig+0x284>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 030f 	and.w	r3, r3, #15
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d910      	bls.n	800a9e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9c2:	4b98      	ldr	r3, [pc, #608]	@ (800ac24 <HAL_RCC_ClockConfig+0x284>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f023 020f 	bic.w	r2, r3, #15
 800a9ca:	4996      	ldr	r1, [pc, #600]	@ (800ac24 <HAL_RCC_ClockConfig+0x284>)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9d2:	4b94      	ldr	r3, [pc, #592]	@ (800ac24 <HAL_RCC_ClockConfig+0x284>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 030f 	and.w	r3, r3, #15
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d001      	beq.n	800a9e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e1c1      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 0310 	and.w	r3, r3, #16
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d010      	beq.n	800aa12 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	695a      	ldr	r2, [r3, #20]
 800a9f4:	4b8c      	ldr	r3, [pc, #560]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d908      	bls.n	800aa12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800aa00:	4b89      	ldr	r3, [pc, #548]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	4986      	ldr	r1, [pc, #536]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0308 	and.w	r3, r3, #8
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d012      	beq.n	800aa44 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691a      	ldr	r2, [r3, #16]
 800aa22:	4b81      	ldr	r3, [pc, #516]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	091b      	lsrs	r3, r3, #4
 800aa28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d909      	bls.n	800aa44 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aa30:	4b7d      	ldr	r3, [pc, #500]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	011b      	lsls	r3, r3, #4
 800aa3e:	497a      	ldr	r1, [pc, #488]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa40:	4313      	orrs	r3, r2
 800aa42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0304 	and.w	r3, r3, #4
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d010      	beq.n	800aa72 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68da      	ldr	r2, [r3, #12]
 800aa54:	4b74      	ldr	r3, [pc, #464]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa56:	6a1b      	ldr	r3, [r3, #32]
 800aa58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d908      	bls.n	800aa72 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800aa60:	4b71      	ldr	r3, [pc, #452]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	496e      	ldr	r1, [pc, #440]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d010      	beq.n	800aaa0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	689a      	ldr	r2, [r3, #8]
 800aa82:	4b69      	ldr	r3, [pc, #420]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	f003 030f 	and.w	r3, r3, #15
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d908      	bls.n	800aaa0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800aa8e:	4b66      	ldr	r3, [pc, #408]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	f023 020f 	bic.w	r2, r3, #15
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	4963      	ldr	r1, [pc, #396]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 80d2 	beq.w	800ac52 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d143      	bne.n	800ab42 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aaba:	4b5b      	ldr	r3, [pc, #364]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aabc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d110      	bne.n	800aaea <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800aac8:	4b57      	ldr	r3, [pc, #348]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aaca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aace:	4a56      	ldr	r2, [pc, #344]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aad0:	f043 0304 	orr.w	r3, r3, #4
 800aad4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800aad8:	4b53      	ldr	r3, [pc, #332]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800aada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aade:	f003 0304 	and.w	r3, r3, #4
 800aae2:	60bb      	str	r3, [r7, #8]
 800aae4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800aae6:	2301      	movs	r3, #1
 800aae8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800aaea:	f7f8 fd27 	bl	800353c <HAL_GetTick>
 800aaee:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800aaf0:	4b4e      	ldr	r3, [pc, #312]	@ (800ac2c <HAL_RCC_ClockConfig+0x28c>)
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00f      	beq.n	800ab1c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800aafc:	e008      	b.n	800ab10 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800aafe:	f7f8 fd1d 	bl	800353c <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d901      	bls.n	800ab10 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e12b      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800ab10:	4b46      	ldr	r3, [pc, #280]	@ (800ac2c <HAL_RCC_ClockConfig+0x28c>)
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d0f0      	beq.n	800aafe <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800ab1c:	7dfb      	ldrb	r3, [r7, #23]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d107      	bne.n	800ab32 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800ab22:	4b41      	ldr	r3, [pc, #260]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800ab24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab28:	4a3f      	ldr	r2, [pc, #252]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800ab2a:	f023 0304 	bic.w	r3, r3, #4
 800ab2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800ab32:	4b3d      	ldr	r3, [pc, #244]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d121      	bne.n	800ab82 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e112      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d107      	bne.n	800ab5a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab4a:	4b37      	ldr	r3, [pc, #220]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d115      	bne.n	800ab82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e106      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d107      	bne.n	800ab72 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800ab62:	4b31      	ldr	r3, [pc, #196]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0304 	and.w	r3, r3, #4
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d109      	bne.n	800ab82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e0fa      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab72:	4b2d      	ldr	r3, [pc, #180]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d101      	bne.n	800ab82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e0f2      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800ab82:	4b29      	ldr	r3, [pc, #164]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	f023 0203 	bic.w	r2, r3, #3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	4926      	ldr	r1, [pc, #152]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800ab94:	f7f8 fcd2 	bl	800353c <HAL_GetTick>
 800ab98:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d112      	bne.n	800abc8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aba2:	e00a      	b.n	800abba <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aba4:	f7f8 fcca 	bl	800353c <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d901      	bls.n	800abba <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e0d6      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abba:	4b1b      	ldr	r3, [pc, #108]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	f003 030c 	and.w	r3, r3, #12
 800abc2:	2b0c      	cmp	r3, #12
 800abc4:	d1ee      	bne.n	800aba4 <HAL_RCC_ClockConfig+0x204>
 800abc6:	e044      	b.n	800ac52 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	d112      	bne.n	800abf6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800abd0:	e00a      	b.n	800abe8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abd2:	f7f8 fcb3 	bl	800353c <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d901      	bls.n	800abe8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800abe4:	2303      	movs	r3, #3
 800abe6:	e0bf      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800abe8:	4b0f      	ldr	r3, [pc, #60]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	f003 030c 	and.w	r3, r3, #12
 800abf0:	2b08      	cmp	r3, #8
 800abf2:	d1ee      	bne.n	800abd2 <HAL_RCC_ClockConfig+0x232>
 800abf4:	e02d      	b.n	800ac52 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d123      	bne.n	800ac46 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800abfe:	e00a      	b.n	800ac16 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac00:	f7f8 fc9c 	bl	800353c <HAL_GetTick>
 800ac04:	4602      	mov	r2, r0
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d901      	bls.n	800ac16 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e0a8      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800ac16:	4b04      	ldr	r3, [pc, #16]	@ (800ac28 <HAL_RCC_ClockConfig+0x288>)
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	f003 030c 	and.w	r3, r3, #12
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1ee      	bne.n	800ac00 <HAL_RCC_ClockConfig+0x260>
 800ac22:	e016      	b.n	800ac52 <HAL_RCC_ClockConfig+0x2b2>
 800ac24:	40022000 	.word	0x40022000
 800ac28:	46020c00 	.word	0x46020c00
 800ac2c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac30:	f7f8 fc84 	bl	800353c <HAL_GetTick>
 800ac34:	4602      	mov	r2, r0
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d901      	bls.n	800ac46 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e090      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac46:	4b4a      	ldr	r3, [pc, #296]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	f003 030c 	and.w	r3, r3, #12
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	d1ee      	bne.n	800ac30 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0302 	and.w	r3, r3, #2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d010      	beq.n	800ac80 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	689a      	ldr	r2, [r3, #8]
 800ac62:	4b43      	ldr	r3, [pc, #268]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	f003 030f 	and.w	r3, r3, #15
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d208      	bcs.n	800ac80 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800ac6e:	4b40      	ldr	r3, [pc, #256]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	f023 020f 	bic.w	r2, r3, #15
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	493d      	ldr	r1, [pc, #244]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac80:	4b3c      	ldr	r3, [pc, #240]	@ (800ad74 <HAL_RCC_ClockConfig+0x3d4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 030f 	and.w	r3, r3, #15
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d210      	bcs.n	800acb0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac8e:	4b39      	ldr	r3, [pc, #228]	@ (800ad74 <HAL_RCC_ClockConfig+0x3d4>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f023 020f 	bic.w	r2, r3, #15
 800ac96:	4937      	ldr	r1, [pc, #220]	@ (800ad74 <HAL_RCC_ClockConfig+0x3d4>)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac9e:	4b35      	ldr	r3, [pc, #212]	@ (800ad74 <HAL_RCC_ClockConfig+0x3d4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 030f 	and.w	r3, r3, #15
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d001      	beq.n	800acb0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e05b      	b.n	800ad68 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d010      	beq.n	800acde <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	68da      	ldr	r2, [r3, #12]
 800acc0:	4b2b      	ldr	r3, [pc, #172]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800acc8:	429a      	cmp	r2, r3
 800acca:	d208      	bcs.n	800acde <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800accc:	4b28      	ldr	r3, [pc, #160]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	4925      	ldr	r1, [pc, #148]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 0308 	and.w	r3, r3, #8
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d012      	beq.n	800ad10 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691a      	ldr	r2, [r3, #16]
 800acee:	4b20      	ldr	r3, [pc, #128]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	091b      	lsrs	r3, r3, #4
 800acf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d209      	bcs.n	800ad10 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800acfc:	4b1c      	ldr	r3, [pc, #112]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800acfe:	6a1b      	ldr	r3, [r3, #32]
 800ad00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	011b      	lsls	r3, r3, #4
 800ad0a:	4919      	ldr	r1, [pc, #100]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0310 	and.w	r3, r3, #16
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d010      	beq.n	800ad3e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	695a      	ldr	r2, [r3, #20]
 800ad20:	4b13      	ldr	r3, [pc, #76]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800ad22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d208      	bcs.n	800ad3e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800ad2c:	4b10      	ldr	r3, [pc, #64]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	490d      	ldr	r1, [pc, #52]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ad3e:	f000 f821 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800ad42:	4602      	mov	r2, r0
 800ad44:	4b0a      	ldr	r3, [pc, #40]	@ (800ad70 <HAL_RCC_ClockConfig+0x3d0>)
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	f003 030f 	and.w	r3, r3, #15
 800ad4c:	490a      	ldr	r1, [pc, #40]	@ (800ad78 <HAL_RCC_ClockConfig+0x3d8>)
 800ad4e:	5ccb      	ldrb	r3, [r1, r3]
 800ad50:	fa22 f303 	lsr.w	r3, r2, r3
 800ad54:	4a09      	ldr	r2, [pc, #36]	@ (800ad7c <HAL_RCC_ClockConfig+0x3dc>)
 800ad56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ad58:	4b09      	ldr	r3, [pc, #36]	@ (800ad80 <HAL_RCC_ClockConfig+0x3e0>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7f8 fb63 	bl	8003428 <HAL_InitTick>
 800ad62:	4603      	mov	r3, r0
 800ad64:	73fb      	strb	r3, [r7, #15]

  return status;
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	46020c00 	.word	0x46020c00
 800ad74:	40022000 	.word	0x40022000
 800ad78:	08011c28 	.word	0x08011c28
 800ad7c:	20000000 	.word	0x20000000
 800ad80:	20000004 	.word	0x20000004

0800ad84 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b08b      	sub	sp, #44	@ 0x2c
 800ad88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad92:	4b78      	ldr	r3, [pc, #480]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	f003 030c 	and.w	r3, r3, #12
 800ad9a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad9c:	4b75      	ldr	r3, [pc, #468]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ad9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada0:	f003 0303 	and.w	r3, r3, #3
 800ada4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d005      	beq.n	800adb8 <HAL_RCC_GetSysClockFreq+0x34>
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	2b0c      	cmp	r3, #12
 800adb0:	d121      	bne.n	800adf6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d11e      	bne.n	800adf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800adb8:	4b6e      	ldr	r3, [pc, #440]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d107      	bne.n	800add4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800adc4:	4b6b      	ldr	r3, [pc, #428]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800adc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800adca:	0b1b      	lsrs	r3, r3, #12
 800adcc:	f003 030f 	and.w	r3, r3, #15
 800add0:	627b      	str	r3, [r7, #36]	@ 0x24
 800add2:	e005      	b.n	800ade0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800add4:	4b67      	ldr	r3, [pc, #412]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	0f1b      	lsrs	r3, r3, #28
 800adda:	f003 030f 	and.w	r3, r3, #15
 800adde:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ade0:	4a65      	ldr	r2, [pc, #404]	@ (800af78 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800ade2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ade8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d110      	bne.n	800ae12 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800adf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800adf4:	e00d      	b.n	800ae12 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800adf6:	4b5f      	ldr	r3, [pc, #380]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	f003 030c 	and.w	r3, r3, #12
 800adfe:	2b04      	cmp	r3, #4
 800ae00:	d102      	bne.n	800ae08 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ae02:	4b5e      	ldr	r3, [pc, #376]	@ (800af7c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ae04:	623b      	str	r3, [r7, #32]
 800ae06:	e004      	b.n	800ae12 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	2b08      	cmp	r3, #8
 800ae0c:	d101      	bne.n	800ae12 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ae0e:	4b5b      	ldr	r3, [pc, #364]	@ (800af7c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ae10:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b0c      	cmp	r3, #12
 800ae16:	f040 80a5 	bne.w	800af64 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ae1a:	4b56      	ldr	r3, [pc, #344]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1e:	f003 0303 	and.w	r3, r3, #3
 800ae22:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ae24:	4b53      	ldr	r3, [pc, #332]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae28:	0a1b      	lsrs	r3, r3, #8
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	3301      	adds	r3, #1
 800ae30:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ae32:	4b50      	ldr	r3, [pc, #320]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae36:	091b      	lsrs	r3, r3, #4
 800ae38:	f003 0301 	and.w	r3, r3, #1
 800ae3c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ae3e:	4b4d      	ldr	r3, [pc, #308]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae42:	08db      	lsrs	r3, r3, #3
 800ae44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	fb02 f303 	mul.w	r3, r2, r3
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae56:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d003      	beq.n	800ae68 <HAL_RCC_GetSysClockFreq+0xe4>
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d022      	beq.n	800aeac <HAL_RCC_GetSysClockFreq+0x128>
 800ae66:	e043      	b.n	800aef0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae72:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800af80 <HAL_RCC_GetSysClockFreq+0x1fc>
 800ae76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae7a:	4b3e      	ldr	r3, [pc, #248]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ae7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ae8a:	ed97 6a01 	vldr	s12, [r7, #4]
 800ae8e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800af84 <HAL_RCC_GetSysClockFreq+0x200>
 800ae92:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ae96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ae9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeaa:	e046      	b.n	800af3a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800af80 <HAL_RCC_GetSysClockFreq+0x1fc>
 800aeba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aebe:	4b2d      	ldr	r3, [pc, #180]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800aece:	ed97 6a01 	vldr	s12, [r7, #4]
 800aed2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800af84 <HAL_RCC_GetSysClockFreq+0x200>
 800aed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aeda:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800aede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeee:	e024      	b.n	800af3a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	ee07 3a90 	vmov	s15, r3
 800af00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af08:	4b1a      	ldr	r3, [pc, #104]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800af0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af10:	ee07 3a90 	vmov	s15, r3
 800af14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800af18:	ed97 6a01 	vldr	s12, [r7, #4]
 800af1c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800af84 <HAL_RCC_GetSysClockFreq+0x200>
 800af20:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800af24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800af28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800af30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af38:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800af3a:	4b0e      	ldr	r3, [pc, #56]	@ (800af74 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800af3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af3e:	0e1b      	lsrs	r3, r3, #24
 800af40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af44:	3301      	adds	r3, #1
 800af46:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af52:	edd7 6a07 	vldr	s13, [r7, #28]
 800af56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af5e:	ee17 3a90 	vmov	r3, s15
 800af62:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800af64:	6a3b      	ldr	r3, [r7, #32]
}
 800af66:	4618      	mov	r0, r3
 800af68:	372c      	adds	r7, #44	@ 0x2c
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	46020c00 	.word	0x46020c00
 800af78:	08011c40 	.word	0x08011c40
 800af7c:	00f42400 	.word	0x00f42400
 800af80:	4b742400 	.word	0x4b742400
 800af84:	46000000 	.word	0x46000000

0800af88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800af8c:	f7ff fefa 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800af90:	4602      	mov	r2, r0
 800af92:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <HAL_RCC_GetHCLKFreq+0x28>)
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	f003 030f 	and.w	r3, r3, #15
 800af9a:	4906      	ldr	r1, [pc, #24]	@ (800afb4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800af9c:	5ccb      	ldrb	r3, [r1, r3]
 800af9e:	fa22 f303 	lsr.w	r3, r2, r3
 800afa2:	4a05      	ldr	r2, [pc, #20]	@ (800afb8 <HAL_RCC_GetHCLKFreq+0x30>)
 800afa4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800afa6:	4b04      	ldr	r3, [pc, #16]	@ (800afb8 <HAL_RCC_GetHCLKFreq+0x30>)
 800afa8:	681b      	ldr	r3, [r3, #0]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	46020c00 	.word	0x46020c00
 800afb4:	08011c28 	.word	0x08011c28
 800afb8:	20000000 	.word	0x20000000

0800afbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800afc0:	f7ff ffe2 	bl	800af88 <HAL_RCC_GetHCLKFreq>
 800afc4:	4602      	mov	r2, r0
 800afc6:	4b05      	ldr	r3, [pc, #20]	@ (800afdc <HAL_RCC_GetPCLK1Freq+0x20>)
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	091b      	lsrs	r3, r3, #4
 800afcc:	f003 0307 	and.w	r3, r3, #7
 800afd0:	4903      	ldr	r1, [pc, #12]	@ (800afe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afd2:	5ccb      	ldrb	r3, [r1, r3]
 800afd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afd8:	4618      	mov	r0, r3
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	46020c00 	.word	0x46020c00
 800afe0:	08011c38 	.word	0x08011c38

0800afe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800afe8:	f7ff ffce 	bl	800af88 <HAL_RCC_GetHCLKFreq>
 800afec:	4602      	mov	r2, r0
 800afee:	4b05      	ldr	r3, [pc, #20]	@ (800b004 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	0a1b      	lsrs	r3, r3, #8
 800aff4:	f003 0307 	and.w	r3, r3, #7
 800aff8:	4903      	ldr	r1, [pc, #12]	@ (800b008 <HAL_RCC_GetPCLK2Freq+0x24>)
 800affa:	5ccb      	ldrb	r3, [r1, r3]
 800affc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b000:	4618      	mov	r0, r3
 800b002:	bd80      	pop	{r7, pc}
 800b004:	46020c00 	.word	0x46020c00
 800b008:	08011c38 	.word	0x08011c38

0800b00c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800b010:	f7ff ffba 	bl	800af88 <HAL_RCC_GetHCLKFreq>
 800b014:	4602      	mov	r2, r0
 800b016:	4b05      	ldr	r3, [pc, #20]	@ (800b02c <HAL_RCC_GetPCLK3Freq+0x20>)
 800b018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01a:	091b      	lsrs	r3, r3, #4
 800b01c:	f003 0307 	and.w	r3, r3, #7
 800b020:	4903      	ldr	r1, [pc, #12]	@ (800b030 <HAL_RCC_GetPCLK3Freq+0x24>)
 800b022:	5ccb      	ldrb	r3, [r1, r3]
 800b024:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b028:	4618      	mov	r0, r3
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	46020c00 	.word	0x46020c00
 800b030:	08011c38 	.word	0x08011c38

0800b034 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b03c:	4b3e      	ldr	r3, [pc, #248]	@ (800b138 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b03e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b042:	f003 0304 	and.w	r3, r3, #4
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b04a:	f7fe fd21 	bl	8009a90 <HAL_PWREx_GetVoltageRange>
 800b04e:	6178      	str	r0, [r7, #20]
 800b050:	e019      	b.n	800b086 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b052:	4b39      	ldr	r3, [pc, #228]	@ (800b138 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b058:	4a37      	ldr	r2, [pc, #220]	@ (800b138 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b05a:	f043 0304 	orr.w	r3, r3, #4
 800b05e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b062:	4b35      	ldr	r3, [pc, #212]	@ (800b138 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b068:	f003 0304 	and.w	r3, r3, #4
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b070:	f7fe fd0e 	bl	8009a90 <HAL_PWREx_GetVoltageRange>
 800b074:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b076:	4b30      	ldr	r3, [pc, #192]	@ (800b138 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b07c:	4a2e      	ldr	r2, [pc, #184]	@ (800b138 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b07e:	f023 0304 	bic.w	r3, r3, #4
 800b082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b08c:	d003      	beq.n	800b096 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b094:	d109      	bne.n	800b0aa <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b09c:	d202      	bcs.n	800b0a4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b09e:	2301      	movs	r3, #1
 800b0a0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b0a2:	e033      	b.n	800b10c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b0a8:	e030      	b.n	800b10c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0b0:	d208      	bcs.n	800b0c4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b8:	d102      	bne.n	800b0c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	613b      	str	r3, [r7, #16]
 800b0be:	e025      	b.n	800b10c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e035      	b.n	800b130 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0ca:	d90f      	bls.n	800b0ec <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d109      	bne.n	800b0e6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b0d8:	d902      	bls.n	800b0e0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
 800b0de:	e015      	b.n	800b10c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	613b      	str	r3, [r7, #16]
 800b0e4:	e012      	b.n	800b10c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	613b      	str	r3, [r7, #16]
 800b0ea:	e00f      	b.n	800b10c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0f2:	d109      	bne.n	800b108 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0fa:	d102      	bne.n	800b102 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	613b      	str	r3, [r7, #16]
 800b100:	e004      	b.n	800b10c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b102:	2302      	movs	r3, #2
 800b104:	613b      	str	r3, [r7, #16]
 800b106:	e001      	b.n	800b10c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b108:	2301      	movs	r3, #1
 800b10a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b10c:	4b0b      	ldr	r3, [pc, #44]	@ (800b13c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f023 020f 	bic.w	r2, r3, #15
 800b114:	4909      	ldr	r1, [pc, #36]	@ (800b13c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	4313      	orrs	r3, r2
 800b11a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b11c:	4b07      	ldr	r3, [pc, #28]	@ (800b13c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 030f 	and.w	r3, r3, #15
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	429a      	cmp	r2, r3
 800b128:	d001      	beq.n	800b12e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e000      	b.n	800b130 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	46020c00 	.word	0x46020c00
 800b13c:	40022000 	.word	0x40022000

0800b140 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b144:	b0c8      	sub	sp, #288	@ 0x120
 800b146:	af00      	add	r7, sp, #0
 800b148:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b14c:	2300      	movs	r3, #0
 800b14e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b152:	2300      	movs	r3, #0
 800b154:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f002 0401 	and.w	r4, r2, #1
 800b164:	2500      	movs	r5, #0
 800b166:	ea54 0305 	orrs.w	r3, r4, r5
 800b16a:	d00b      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b16c:	4bd5      	ldr	r3, [pc, #852]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b16e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b172:	f023 0103 	bic.w	r1, r3, #3
 800b176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b17a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b17c:	4ad1      	ldr	r2, [pc, #836]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b17e:	430b      	orrs	r3, r1
 800b180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18c:	f002 0802 	and.w	r8, r2, #2
 800b190:	f04f 0900 	mov.w	r9, #0
 800b194:	ea58 0309 	orrs.w	r3, r8, r9
 800b198:	d00b      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b19a:	4bca      	ldr	r3, [pc, #808]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b19c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1a0:	f023 010c 	bic.w	r1, r3, #12
 800b1a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1aa:	4ac6      	ldr	r2, [pc, #792]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1ac:	430b      	orrs	r3, r1
 800b1ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b1b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f002 0a04 	and.w	sl, r2, #4
 800b1be:	f04f 0b00 	mov.w	fp, #0
 800b1c2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b1c6:	d00b      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800b1c8:	4bbe      	ldr	r3, [pc, #760]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1ce:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1d8:	4aba      	ldr	r2, [pc, #744]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1da:	430b      	orrs	r3, r1
 800b1dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b1e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	f002 0308 	and.w	r3, r2, #8
 800b1ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b1f6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	d00b      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800b200:	4bb0      	ldr	r3, [pc, #704]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b206:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b20a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b20e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b210:	4aac      	ldr	r2, [pc, #688]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b212:	430b      	orrs	r3, r1
 800b214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	f002 0310 	and.w	r3, r2, #16
 800b224:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b228:	2300      	movs	r3, #0
 800b22a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b22e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b232:	460b      	mov	r3, r1
 800b234:	4313      	orrs	r3, r2
 800b236:	d00b      	beq.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800b238:	4ba2      	ldr	r3, [pc, #648]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b23a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b23e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b248:	4a9e      	ldr	r2, [pc, #632]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b24a:	430b      	orrs	r3, r1
 800b24c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b25c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b260:	2300      	movs	r3, #0
 800b262:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b266:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4313      	orrs	r3, r2
 800b26e:	d00b      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800b270:	4b94      	ldr	r3, [pc, #592]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b272:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b276:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b27e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b280:	4a90      	ldr	r2, [pc, #576]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b282:	430b      	orrs	r3, r1
 800b284:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f002 0320 	and.w	r3, r2, #32
 800b294:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b298:	2300      	movs	r3, #0
 800b29a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b29e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	d00b      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b2a8:	4b86      	ldr	r3, [pc, #536]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b2ae:	f023 0107 	bic.w	r1, r3, #7
 800b2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2b8:	4a82      	ldr	r2, [pc, #520]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2ba:	430b      	orrs	r3, r1
 800b2bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b2c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b2cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	d00b      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b2e0:	4b78      	ldr	r3, [pc, #480]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2e6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b2ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f0:	4a74      	ldr	r2, [pc, #464]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b2f2:	430b      	orrs	r3, r1
 800b2f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b304:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b308:	2300      	movs	r3, #0
 800b30a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b30e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b312:	460b      	mov	r3, r1
 800b314:	4313      	orrs	r3, r2
 800b316:	d00b      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b318:	4b6a      	ldr	r3, [pc, #424]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b31a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b31e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b328:	4a66      	ldr	r2, [pc, #408]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b32a:	430b      	orrs	r3, r1
 800b32c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b33c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b340:	2300      	movs	r3, #0
 800b342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b346:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b34a:	460b      	mov	r3, r1
 800b34c:	4313      	orrs	r3, r2
 800b34e:	d00b      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b350:	4b5c      	ldr	r3, [pc, #368]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b356:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b35a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b35e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b360:	4a58      	ldr	r2, [pc, #352]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b362:	430b      	orrs	r3, r1
 800b364:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b374:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b378:	2300      	movs	r3, #0
 800b37a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b37e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b382:	460b      	mov	r3, r1
 800b384:	4313      	orrs	r3, r2
 800b386:	d00b      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b388:	4b4e      	ldr	r3, [pc, #312]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b38a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b38e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b396:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b398:	4a4a      	ldr	r2, [pc, #296]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b39a:	430b      	orrs	r3, r1
 800b39c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b3a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b3ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b3b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	d00b      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b3c0:	4b40      	ldr	r3, [pc, #256]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b3c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3c6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b3ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3d0:	4a3c      	ldr	r2, [pc, #240]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b3d2:	430b      	orrs	r3, r1
 800b3d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b3d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b3e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b3ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	d00c      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b3f8:	4b32      	ldr	r3, [pc, #200]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b3fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3fe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b40a:	4a2e      	ldr	r2, [pc, #184]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b40c:	430b      	orrs	r3, r1
 800b40e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b41e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b422:	2300      	movs	r3, #0
 800b424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b428:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4313      	orrs	r3, r2
 800b430:	d00c      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b432:	4b24      	ldr	r3, [pc, #144]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b438:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b444:	4a1f      	ldr	r2, [pc, #124]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b446:	430b      	orrs	r3, r1
 800b448:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b44c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b458:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b45c:	2300      	movs	r3, #0
 800b45e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b462:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b466:	460b      	mov	r3, r1
 800b468:	4313      	orrs	r3, r2
 800b46a:	d00c      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b46c:	4b15      	ldr	r3, [pc, #84]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b46e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b472:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b47e:	4a11      	ldr	r2, [pc, #68]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b480:	430b      	orrs	r3, r1
 800b482:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b496:	2300      	movs	r3, #0
 800b498:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b49c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	d010      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b4a6:	4b07      	ldr	r3, [pc, #28]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b4a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b4b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4b8:	4a02      	ldr	r2, [pc, #8]	@ (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b4ba:	430b      	orrs	r3, r1
 800b4bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b4c0:	e002      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b4c2:	bf00      	nop
 800b4c4:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b4c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b4d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b4de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	d04c      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b4e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b4f0:	2b80      	cmp	r3, #128	@ 0x80
 800b4f2:	d02d      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b4f4:	2b80      	cmp	r3, #128	@ 0x80
 800b4f6:	d827      	bhi.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b4f8:	2b60      	cmp	r3, #96	@ 0x60
 800b4fa:	d02b      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b4fc:	2b60      	cmp	r3, #96	@ 0x60
 800b4fe:	d823      	bhi.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b500:	2b40      	cmp	r3, #64	@ 0x40
 800b502:	d006      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b504:	2b40      	cmp	r3, #64	@ 0x40
 800b506:	d81f      	bhi.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d009      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b50c:	2b20      	cmp	r3, #32
 800b50e:	d011      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b510:	e01a      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b512:	4bc0      	ldr	r3, [pc, #768]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b516:	4abf      	ldr	r2, [pc, #764]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b51c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b51e:	e01a      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b524:	3308      	adds	r3, #8
 800b526:	4618      	mov	r0, r3
 800b528:	f002 fcd6 	bl	800ded8 <RCCEx_PLL2_Config>
 800b52c:	4603      	mov	r3, r0
 800b52e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b532:	e010      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b538:	332c      	adds	r3, #44	@ 0x2c
 800b53a:	4618      	mov	r0, r3
 800b53c:	f002 fd64 	bl	800e008 <RCCEx_PLL3_Config>
 800b540:	4603      	mov	r3, r0
 800b542:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b546:	e006      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b54e:	e002      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b550:	bf00      	nop
 800b552:	e000      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b554:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b556:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10d      	bne.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b55e:	4bad      	ldr	r3, [pc, #692]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b560:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b564:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b56c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b570:	4aa8      	ldr	r2, [pc, #672]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b572:	430b      	orrs	r3, r1
 800b574:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b578:	e003      	b.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b57a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b57e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b58e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b592:	2300      	movs	r3, #0
 800b594:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b598:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b59c:	460b      	mov	r3, r1
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	d053      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b5aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5ae:	d033      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b5b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5b4:	d82c      	bhi.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b5b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5ba:	d02f      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b5bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5c0:	d826      	bhi.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b5c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5c6:	d008      	beq.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b5c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5cc:	d820      	bhi.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b5d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5d6:	d011      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b5d8:	e01a      	b.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b5da:	4b8e      	ldr	r3, [pc, #568]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5de:	4a8d      	ldr	r2, [pc, #564]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b5e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5e4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b5e6:	e01a      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b5e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f002 fc72 	bl	800ded8 <RCCEx_PLL2_Config>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b5fa:	e010      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b5fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b600:	332c      	adds	r3, #44	@ 0x2c
 800b602:	4618      	mov	r0, r3
 800b604:	f002 fd00 	bl	800e008 <RCCEx_PLL3_Config>
 800b608:	4603      	mov	r3, r0
 800b60a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b60e:	e006      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b616:	e002      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b618:	bf00      	nop
 800b61a:	e000      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b61c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b61e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10d      	bne.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b626:	4b7b      	ldr	r3, [pc, #492]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b628:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b62c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b634:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b638:	4a76      	ldr	r2, [pc, #472]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b63a:	430b      	orrs	r3, r1
 800b63c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b640:	e003      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b642:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b646:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b64a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b656:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b65a:	2300      	movs	r3, #0
 800b65c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b660:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b664:	460b      	mov	r3, r1
 800b666:	4313      	orrs	r3, r2
 800b668:	d046      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b66e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b672:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b676:	d028      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b678:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b67c:	d821      	bhi.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b67e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b682:	d022      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b684:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b688:	d81b      	bhi.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b68a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b68e:	d01c      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b690:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b694:	d815      	bhi.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b69a:	d008      	beq.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b69c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6a0:	d80f      	bhi.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d011      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b6a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6aa:	d00e      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b6ac:	e009      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b6ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6b2:	3308      	adds	r3, #8
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f002 fc0f 	bl	800ded8 <RCCEx_PLL2_Config>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b6c0:	e004      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b6c8:	e000      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b6ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6cc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10d      	bne.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b6d4:	4b4f      	ldr	r3, [pc, #316]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b6d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b6da:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b6de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b6e6:	4a4b      	ldr	r2, [pc, #300]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b6e8:	430b      	orrs	r3, r1
 800b6ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b6ee:	e003      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6f4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b6f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b708:	2300      	movs	r3, #0
 800b70a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b70e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b712:	460b      	mov	r3, r1
 800b714:	4313      	orrs	r3, r2
 800b716:	d03f      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b71c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b720:	2b04      	cmp	r3, #4
 800b722:	d81e      	bhi.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b724:	a201      	add	r2, pc, #4	@ (adr r2, 800b72c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72a:	bf00      	nop
 800b72c:	0800b76b 	.word	0x0800b76b
 800b730:	0800b741 	.word	0x0800b741
 800b734:	0800b74f 	.word	0x0800b74f
 800b738:	0800b76b 	.word	0x0800b76b
 800b73c:	0800b76b 	.word	0x0800b76b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b740:	4b34      	ldr	r3, [pc, #208]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b744:	4a33      	ldr	r2, [pc, #204]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b74a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b74c:	e00e      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b74e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b752:	332c      	adds	r3, #44	@ 0x2c
 800b754:	4618      	mov	r0, r3
 800b756:	f002 fc57 	bl	800e008 <RCCEx_PLL3_Config>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b760:	e004      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b768:	e000      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b76a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b76c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10d      	bne.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b774:	4b27      	ldr	r3, [pc, #156]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b776:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b77a:	f023 0107 	bic.w	r1, r3, #7
 800b77e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b786:	4a23      	ldr	r2, [pc, #140]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b788:	430b      	orrs	r3, r1
 800b78a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b78e:	e003      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b790:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b794:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b7a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b7aa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	d04c      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b7c0:	d02a      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b7c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b7c6:	d821      	bhi.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b7c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b7cc:	d026      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b7ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b7d2:	d81b      	bhi.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b7d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7d8:	d00e      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b7da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7de:	d815      	bhi.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d01d      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b7e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7e8:	d110      	bne.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b7ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ee:	4a09      	ldr	r2, [pc, #36]	@ (800b814 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b7f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7f4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b7f6:	e014      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b7f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7fc:	332c      	adds	r3, #44	@ 0x2c
 800b7fe:	4618      	mov	r0, r3
 800b800:	f002 fc02 	bl	800e008 <RCCEx_PLL3_Config>
 800b804:	4603      	mov	r3, r0
 800b806:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b80a:	e00a      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b812:	e006      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b814:	46020c00 	.word	0x46020c00
        break;
 800b818:	bf00      	nop
 800b81a:	e002      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b81c:	bf00      	nop
 800b81e:	e000      	b.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b820:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b822:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10d      	bne.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b82a:	4baf      	ldr	r3, [pc, #700]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b82c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b830:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b838:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b83c:	4aaa      	ldr	r2, [pc, #680]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b83e:	430b      	orrs	r3, r1
 800b840:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b844:	e003      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b846:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b84a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b84e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b85a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b85c:	2300      	movs	r3, #0
 800b85e:	677b      	str	r3, [r7, #116]	@ 0x74
 800b860:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b864:	460b      	mov	r3, r1
 800b866:	4313      	orrs	r3, r2
 800b868:	f000 80b5 	beq.w	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b86c:	2300      	movs	r3, #0
 800b86e:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b872:	4b9d      	ldr	r3, [pc, #628]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b878:	f003 0304 	and.w	r3, r3, #4
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d113      	bne.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b880:	4b99      	ldr	r3, [pc, #612]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b886:	4a98      	ldr	r2, [pc, #608]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b888:	f043 0304 	orr.w	r3, r3, #4
 800b88c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b890:	4b95      	ldr	r3, [pc, #596]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b896:	f003 0304 	and.w	r3, r3, #4
 800b89a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b89e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b8a8:	4b90      	ldr	r3, [pc, #576]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ac:	4a8f      	ldr	r2, [pc, #572]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b8b4:	f7f7 fe42 	bl	800353c <HAL_GetTick>
 800b8b8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b8bc:	e00b      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8be:	f7f7 fe3d 	bl	800353c <HAL_GetTick>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d903      	bls.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b8d4:	e005      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b8d6:	4b85      	ldr	r3, [pc, #532]	@ (800baec <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8da:	f003 0301 	and.w	r3, r3, #1
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0ed      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b8e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d165      	bne.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b8ea:	4b7f      	ldr	r3, [pc, #508]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b8ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b8f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d023      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b904:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b908:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d01b      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b910:	4b75      	ldr	r3, [pc, #468]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b91a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b91e:	4b72      	ldr	r3, [pc, #456]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b924:	4a70      	ldr	r2, [pc, #448]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b92a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b92e:	4b6e      	ldr	r3, [pc, #440]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b934:	4a6c      	ldr	r2, [pc, #432]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b93a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b93e:	4a6a      	ldr	r2, [pc, #424]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b948:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b94c:	f003 0301 	and.w	r3, r3, #1
 800b950:	2b00      	cmp	r3, #0
 800b952:	d019      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b954:	f7f7 fdf2 	bl	800353c <HAL_GetTick>
 800b958:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b95c:	e00d      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b95e:	f7f7 fded 	bl	800353c <HAL_GetTick>
 800b962:	4602      	mov	r2, r0
 800b964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b968:	1ad2      	subs	r2, r2, r3
 800b96a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b96e:	429a      	cmp	r2, r3
 800b970:	d903      	bls.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b972:	2303      	movs	r3, #3
 800b974:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b978:	e006      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b97a:	4b5b      	ldr	r3, [pc, #364]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b97c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b980:	f003 0302 	and.w	r3, r3, #2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d0ea      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b988:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10d      	bne.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b990:	4b55      	ldr	r3, [pc, #340]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b996:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b99a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b99e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b9a2:	4a51      	ldr	r2, [pc, #324]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b9a4:	430b      	orrs	r3, r1
 800b9a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b9aa:	e008      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9ac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9b0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b9b4:	e003      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9b6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9ba:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b9be:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d107      	bne.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9c6:	4b48      	ldr	r3, [pc, #288]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b9c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9cc:	4a46      	ldr	r2, [pc, #280]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b9ce:	f023 0304 	bic.w	r3, r3, #4
 800b9d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b9d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b9e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b9e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	d042      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b9f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b9fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b9fe:	d022      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800ba00:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ba04:	d81b      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800ba06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba0a:	d011      	beq.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800ba0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba10:	d815      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d019      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800ba16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba1a:	d110      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba20:	3308      	adds	r3, #8
 800ba22:	4618      	mov	r0, r3
 800ba24:	f002 fa58 	bl	800ded8 <RCCEx_PLL2_Config>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ba2e:	e00d      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba30:	4b2d      	ldr	r3, [pc, #180]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba34:	4a2c      	ldr	r2, [pc, #176]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba3a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800ba3c:	e006      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ba44:	e002      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800ba46:	bf00      	nop
 800ba48:	e000      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800ba4a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ba4c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10d      	bne.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800ba54:	4b24      	ldr	r3, [pc, #144]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba5a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800ba5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ba66:	4a20      	ldr	r2, [pc, #128]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ba68:	430b      	orrs	r3, r1
 800ba6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ba6e:	e003      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba70:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba74:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ba84:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba86:	2300      	movs	r3, #0
 800ba88:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba8a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4313      	orrs	r3, r2
 800ba92:	d031      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800ba94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ba9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800baa0:	d00b      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800baa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800baa6:	d804      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d008      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800baac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bab0:	d007      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bab8:	e004      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800baba:	bf00      	nop
 800babc:	e002      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800babe:	bf00      	nop
 800bac0:	e000      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800bac2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bac4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d111      	bne.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800bacc:	4b06      	ldr	r3, [pc, #24]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bace:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bad2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bada:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bade:	4a02      	ldr	r2, [pc, #8]	@ (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800bae0:	430b      	orrs	r3, r1
 800bae2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bae6:	e007      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800bae8:	46020c00 	.word	0x46020c00
 800baec:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800baf4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800baf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bb04:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb06:	2300      	movs	r3, #0
 800bb08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4313      	orrs	r3, r2
 800bb12:	d00c      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800bb14:	4bb2      	ldr	r3, [pc, #712]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb1a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800bb1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bb26:	4aae      	ldr	r2, [pc, #696]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb28:	430b      	orrs	r3, r1
 800bb2a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800bb2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800bb3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb40:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bb44:	460b      	mov	r3, r1
 800bb46:	4313      	orrs	r3, r2
 800bb48:	d019      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800bb4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bb52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb56:	d105      	bne.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb58:	4ba1      	ldr	r3, [pc, #644]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb5c:	4aa0      	ldr	r2, [pc, #640]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb62:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800bb64:	4b9e      	ldr	r3, [pc, #632]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb6a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800bb6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bb76:	4a9a      	ldr	r2, [pc, #616]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800bb7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bb8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bb94:	460b      	mov	r3, r1
 800bb96:	4313      	orrs	r3, r2
 800bb98:	d00c      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800bb9a:	4b91      	ldr	r3, [pc, #580]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bba0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bbac:	4a8c      	ldr	r2, [pc, #560]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800bbb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bbc0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbc6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	d00c      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800bbd0:	4b83      	ldr	r3, [pc, #524]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bbd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbd6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bbda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbde:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bbe2:	4a7f      	ldr	r2, [pc, #508]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bbe4:	430b      	orrs	r3, r1
 800bbe6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800bbea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bbf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bbfc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bc00:	460b      	mov	r3, r1
 800bc02:	4313      	orrs	r3, r2
 800bc04:	d00c      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800bc06:	4b76      	ldr	r3, [pc, #472]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc0c:	f023 0118 	bic.w	r1, r3, #24
 800bc10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc14:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800bc18:	4a71      	ldr	r2, [pc, #452]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc1a:	430b      	orrs	r3, r1
 800bc1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bc20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800bc2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc2e:	2300      	movs	r3, #0
 800bc30:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bc36:	460b      	mov	r3, r1
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	d032      	beq.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800bc3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bc44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc48:	d105      	bne.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc4a:	4b65      	ldr	r3, [pc, #404]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc4e:	4a64      	ldr	r2, [pc, #400]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc54:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800bc56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bc5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bc62:	d108      	bne.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bc64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc68:	3308      	adds	r3, #8
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f002 f934 	bl	800ded8 <RCCEx_PLL2_Config>
 800bc70:	4603      	mov	r3, r0
 800bc72:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800bc76:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10d      	bne.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800bc7e:	4b58      	ldr	r3, [pc, #352]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc84:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bc88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bc90:	4a53      	ldr	r2, [pc, #332]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc92:	430b      	orrs	r3, r1
 800bc94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bc98:	e003      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc9a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc9e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800bca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	2100      	movs	r1, #0
 800bcac:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	d04a      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800bcbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bcc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bcca:	d01e      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800bccc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bcd0:	d825      	bhi.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800bcd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bcd6:	d00e      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800bcd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bcdc:	d81f      	bhi.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d021      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800bce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bce6:	d11a      	bne.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bce8:	4b3d      	ldr	r3, [pc, #244]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcec:	4a3c      	ldr	r2, [pc, #240]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcf2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bcf4:	e018      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bcf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcfa:	3308      	adds	r3, #8
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f002 f8eb 	bl	800ded8 <RCCEx_PLL2_Config>
 800bd02:	4603      	mov	r3, r0
 800bd04:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bd08:	e00e      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bd0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd0e:	332c      	adds	r3, #44	@ 0x2c
 800bd10:	4618      	mov	r0, r3
 800bd12:	f002 f979 	bl	800e008 <RCCEx_PLL3_Config>
 800bd16:	4603      	mov	r3, r0
 800bd18:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bd1c:	e004      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bd24:	e000      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800bd26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd28:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10d      	bne.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800bd30:	4b2b      	ldr	r3, [pc, #172]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bd3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bd42:	4927      	ldr	r1, [pc, #156]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd44:	4313      	orrs	r3, r2
 800bd46:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bd4a:	e003      	b.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd4c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd50:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800bd54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800bd60:	623b      	str	r3, [r7, #32]
 800bd62:	2300      	movs	r3, #0
 800bd64:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd66:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	d03d      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800bd70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd7c:	d00e      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800bd7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd82:	d815      	bhi.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d017      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bd88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd8c:	d110      	bne.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd8e:	4b14      	ldr	r3, [pc, #80]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd92:	4a13      	ldr	r2, [pc, #76]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd98:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bd9a:	e00e      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bd9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bda0:	3308      	adds	r3, #8
 800bda2:	4618      	mov	r0, r3
 800bda4:	f002 f898 	bl	800ded8 <RCCEx_PLL2_Config>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bdae:	e004      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bdb6:	e000      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bdb8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bdba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d110      	bne.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bdc2:	4b07      	ldr	r3, [pc, #28]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bdc8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bdcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdd4:	4902      	ldr	r1, [pc, #8]	@ (800bde0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bddc:	e006      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bdde:	bf00      	nop
 800bde0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bde8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bdec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bdf8:	61bb      	str	r3, [r7, #24]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	61fb      	str	r3, [r7, #28]
 800bdfe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800be02:	460b      	mov	r3, r1
 800be04:	4313      	orrs	r3, r2
 800be06:	d00c      	beq.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800be08:	4b68      	ldr	r3, [pc, #416]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800be0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be0e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800be12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800be1a:	4964      	ldr	r1, [pc, #400]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800be1c:	4313      	orrs	r3, r2
 800be1e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	2100      	movs	r1, #0
 800be2c:	6139      	str	r1, [r7, #16]
 800be2e:	f003 0302 	and.w	r3, r3, #2
 800be32:	617b      	str	r3, [r7, #20]
 800be34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800be38:	460b      	mov	r3, r1
 800be3a:	4313      	orrs	r3, r2
 800be3c:	d036      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800be3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00c      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800be4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be4e:	d113      	bne.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800be50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be54:	3308      	adds	r3, #8
 800be56:	4618      	mov	r0, r3
 800be58:	f002 f83e 	bl	800ded8 <RCCEx_PLL2_Config>
 800be5c:	4603      	mov	r3, r0
 800be5e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800be62:	e00d      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800be64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be68:	332c      	adds	r3, #44	@ 0x2c
 800be6a:	4618      	mov	r0, r3
 800be6c:	f002 f8cc 	bl	800e008 <RCCEx_PLL3_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800be76:	e003      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800be7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be80:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10d      	bne.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800be88:	4b48      	ldr	r3, [pc, #288]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800be8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be8e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800be92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800be9a:	4944      	ldr	r1, [pc, #272]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800be9c:	4313      	orrs	r3, r2
 800be9e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bea2:	e003      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bea8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800beac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	2100      	movs	r1, #0
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	f003 0304 	and.w	r3, r3, #4
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bec2:	460b      	mov	r3, r1
 800bec4:	4313      	orrs	r3, r2
 800bec6:	d024      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800becc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d108      	bne.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bed8:	332c      	adds	r3, #44	@ 0x2c
 800beda:	4618      	mov	r0, r3
 800bedc:	f002 f894 	bl	800e008 <RCCEx_PLL3_Config>
 800bee0:	4603      	mov	r3, r0
 800bee2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bee6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800beea:	2b00      	cmp	r3, #0
 800beec:	d10d      	bne.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800beee:	4b2f      	ldr	r3, [pc, #188]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bef0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bef4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800befc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf00:	492a      	ldr	r1, [pc, #168]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bf02:	4313      	orrs	r3, r2
 800bf04:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bf08:	e003      	b.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf0a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf0e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bf12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	6039      	str	r1, [r7, #0]
 800bf1e:	f003 0308 	and.w	r3, r3, #8
 800bf22:	607b      	str	r3, [r7, #4]
 800bf24:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	d036      	beq.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800bf2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bf36:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bf3a:	d00d      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800bf3c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bf40:	d811      	bhi.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bf42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf46:	d012      	beq.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bf48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf4c:	d80b      	bhi.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00d      	beq.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bf52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf56:	d106      	bne.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bf58:	4b14      	ldr	r3, [pc, #80]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf5c:	4a13      	ldr	r2, [pc, #76]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bf5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf62:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800bf64:	e004      	b.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bf6c:	e000      	b.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800bf6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf70:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10d      	bne.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800bf78:	4b0c      	ldr	r3, [pc, #48]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bf7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf7e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bf82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bf8a:	4908      	ldr	r1, [pc, #32]	@ (800bfac <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bf92:	e003      	b.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf94:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf98:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bf9c:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfac:	46020c00 	.word	0x46020c00

0800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b089      	sub	sp, #36	@ 0x24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bfb8:	4ba6      	ldr	r3, [pc, #664]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bfba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bfc2:	4ba4      	ldr	r3, [pc, #656]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bfc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc6:	f003 0303 	and.w	r3, r3, #3
 800bfca:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bfcc:	4ba1      	ldr	r3, [pc, #644]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bfce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd0:	0a1b      	lsrs	r3, r3, #8
 800bfd2:	f003 030f 	and.w	r3, r3, #15
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bfda:	4b9e      	ldr	r3, [pc, #632]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfde:	091b      	lsrs	r3, r3, #4
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bfe6:	4b9b      	ldr	r3, [pc, #620]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bfe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfea:	08db      	lsrs	r3, r3, #3
 800bfec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	fb02 f303 	mul.w	r3, r2, r3
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2b03      	cmp	r3, #3
 800c006:	d062      	beq.n	800c0ce <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	2b03      	cmp	r3, #3
 800c00c:	f200 8081 	bhi.w	800c112 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d024      	beq.n	800c060 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d17a      	bne.n	800c112 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c026:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c258 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c02e:	4b89      	ldr	r3, [pc, #548]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c03e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c042:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c046:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c04e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c052:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c05e:	e08f      	b.n	800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c060:	4b7c      	ldr	r3, [pc, #496]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d005      	beq.n	800c078 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800c06c:	4b79      	ldr	r3, [pc, #484]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	0f1b      	lsrs	r3, r3, #28
 800c072:	f003 030f 	and.w	r3, r3, #15
 800c076:	e006      	b.n	800c086 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800c078:	4b76      	ldr	r3, [pc, #472]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c07a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c07e:	041b      	lsls	r3, r3, #16
 800c080:	0f1b      	lsrs	r3, r3, #28
 800c082:	f003 030f 	and.w	r3, r3, #15
 800c086:	4a76      	ldr	r2, [pc, #472]	@ (800c260 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c08c:	ee07 3a90 	vmov	s15, r3
 800c090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	ee07 3a90 	vmov	s15, r3
 800c09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	ee07 3a90 	vmov	s15, r3
 800c0a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ac:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0b0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c0b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0cc:	e058      	b.n	800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	ee07 3a90 	vmov	s15, r3
 800c0d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c258 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c0dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0e0:	4b5c      	ldr	r3, [pc, #368]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c0e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0e8:	ee07 3a90 	vmov	s15, r3
 800c0ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0f0:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0f4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c0f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c0fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c104:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c10c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c110:	e036      	b.n	800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c112:	4b50      	ldr	r3, [pc, #320]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d005      	beq.n	800c12a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800c11e:	4b4d      	ldr	r3, [pc, #308]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	0f1b      	lsrs	r3, r3, #28
 800c124:	f003 030f 	and.w	r3, r3, #15
 800c128:	e006      	b.n	800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800c12a:	4b4a      	ldr	r3, [pc, #296]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c12c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c130:	041b      	lsls	r3, r3, #16
 800c132:	0f1b      	lsrs	r3, r3, #28
 800c134:	f003 030f 	and.w	r3, r3, #15
 800c138:	4a49      	ldr	r2, [pc, #292]	@ (800c260 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c13e:	ee07 3a90 	vmov	s15, r3
 800c142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	ee07 3a90 	vmov	s15, r3
 800c14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c15e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c162:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c16e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c172:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c17a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c17e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c180:	4b34      	ldr	r3, [pc, #208]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d017      	beq.n	800c1bc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c18c:	4b31      	ldr	r3, [pc, #196]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c190:	0a5b      	lsrs	r3, r3, #9
 800c192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800c19e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c1a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1b2:	ee17 2a90 	vmov	r2, s15
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	e002      	b.n	800c1c2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c1c2:	4b24      	ldr	r3, [pc, #144]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d017      	beq.n	800c1fe <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c1ce:	4b21      	ldr	r3, [pc, #132]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1d2:	0c1b      	lsrs	r3, r3, #16
 800c1d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1d8:	ee07 3a90 	vmov	s15, r3
 800c1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c1e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1e4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c1e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1f4:	ee17 2a90 	vmov	r2, s15
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	605a      	str	r2, [r3, #4]
 800c1fc:	e002      	b.n	800c204 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800c204:	4b13      	ldr	r3, [pc, #76]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d017      	beq.n	800c240 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c210:	4b10      	ldr	r3, [pc, #64]	@ (800c254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c214:	0e1b      	lsrs	r3, r3, #24
 800c216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c21a:	ee07 3a90 	vmov	s15, r3
 800c21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800c222:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c226:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c22a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c22e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c236:	ee17 2a90 	vmov	r2, s15
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c23e:	e002      	b.n	800c246 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	609a      	str	r2, [r3, #8]
}
 800c246:	bf00      	nop
 800c248:	3724      	adds	r7, #36	@ 0x24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	46020c00 	.word	0x46020c00
 800c258:	4b742400 	.word	0x4b742400
 800c25c:	46000000 	.word	0x46000000
 800c260:	08011c40 	.word	0x08011c40

0800c264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c264:	b480      	push	{r7}
 800c266:	b089      	sub	sp, #36	@ 0x24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c26c:	4ba6      	ldr	r3, [pc, #664]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c26e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c274:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c276:	4ba4      	ldr	r3, [pc, #656]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27a:	f003 0303 	and.w	r3, r3, #3
 800c27e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800c280:	4ba1      	ldr	r3, [pc, #644]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c284:	0a1b      	lsrs	r3, r3, #8
 800c286:	f003 030f 	and.w	r3, r3, #15
 800c28a:	3301      	adds	r3, #1
 800c28c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c28e:	4b9e      	ldr	r3, [pc, #632]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c292:	091b      	lsrs	r3, r3, #4
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c29a:	4b9b      	ldr	r3, [pc, #620]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c29e:	08db      	lsrs	r3, r3, #3
 800c2a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	fb02 f303 	mul.w	r3, r2, r3
 800c2aa:	ee07 3a90 	vmov	s15, r3
 800c2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2b03      	cmp	r3, #3
 800c2ba:	d062      	beq.n	800c382 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	f200 8081 	bhi.w	800c3c6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d024      	beq.n	800c314 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d17a      	bne.n	800c3c6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	ee07 3a90 	vmov	s15, r3
 800c2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2da:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c2de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2e2:	4b89      	ldr	r3, [pc, #548]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ea:	ee07 3a90 	vmov	s15, r3
 800c2ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2f6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c2fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c2fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c306:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c30a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c30e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c312:	e08f      	b.n	800c434 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c314:	4b7c      	ldr	r3, [pc, #496]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c320:	4b79      	ldr	r3, [pc, #484]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	0f1b      	lsrs	r3, r3, #28
 800c326:	f003 030f 	and.w	r3, r3, #15
 800c32a:	e006      	b.n	800c33a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c32c:	4b76      	ldr	r3, [pc, #472]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c32e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c332:	041b      	lsls	r3, r3, #16
 800c334:	0f1b      	lsrs	r3, r3, #28
 800c336:	f003 030f 	and.w	r3, r3, #15
 800c33a:	4a76      	ldr	r2, [pc, #472]	@ (800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c340:	ee07 3a90 	vmov	s15, r3
 800c344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	ee07 3a90 	vmov	s15, r3
 800c34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	ee07 3a90 	vmov	s15, r3
 800c35c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c360:	ed97 6a02 	vldr	s12, [r7, #8]
 800c364:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c36c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c370:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c374:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c37c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c380:	e058      	b.n	800c434 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	ee07 3a90 	vmov	s15, r3
 800c388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c38c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c394:	4b5c      	ldr	r3, [pc, #368]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39c:	ee07 3a90 	vmov	s15, r3
 800c3a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3a4:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3a8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c3ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c3b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c3b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c3bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3c4:	e036      	b.n	800c434 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c3c6:	4b50      	ldr	r3, [pc, #320]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d005      	beq.n	800c3de <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c3d2:	4b4d      	ldr	r3, [pc, #308]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	0f1b      	lsrs	r3, r3, #28
 800c3d8:	f003 030f 	and.w	r3, r3, #15
 800c3dc:	e006      	b.n	800c3ec <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c3de:	4b4a      	ldr	r3, [pc, #296]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c3e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c3e4:	041b      	lsls	r3, r3, #16
 800c3e6:	0f1b      	lsrs	r3, r3, #28
 800c3e8:	f003 030f 	and.w	r3, r3, #15
 800c3ec:	4a49      	ldr	r2, [pc, #292]	@ (800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3f2:	ee07 3a90 	vmov	s15, r3
 800c3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	ee07 3a90 	vmov	s15, r3
 800c400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	ee07 3a90 	vmov	s15, r3
 800c40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c412:	ed97 6a02 	vldr	s12, [r7, #8]
 800c416:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c510 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c426:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c42e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c432:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c434:	4b34      	ldr	r3, [pc, #208]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d017      	beq.n	800c470 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c440:	4b31      	ldr	r3, [pc, #196]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c444:	0a5b      	lsrs	r3, r3, #9
 800c446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c44a:	ee07 3a90 	vmov	s15, r3
 800c44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c456:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c45a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c45e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c466:	ee17 2a90 	vmov	r2, s15
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	e002      	b.n	800c476 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c476:	4b24      	ldr	r3, [pc, #144]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c47a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d017      	beq.n	800c4b2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c482:	4b21      	ldr	r3, [pc, #132]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c486:	0c1b      	lsrs	r3, r3, #16
 800c488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c48c:	ee07 3a90 	vmov	s15, r3
 800c490:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c498:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c49c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4a8:	ee17 2a90 	vmov	r2, s15
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	605a      	str	r2, [r3, #4]
 800c4b0:	e002      	b.n	800c4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c4b8:	4b13      	ldr	r3, [pc, #76]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d017      	beq.n	800c4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c4c4:	4b10      	ldr	r3, [pc, #64]	@ (800c508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4c8:	0e1b      	lsrs	r3, r3, #24
 800c4ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4ce:	ee07 3a90 	vmov	s15, r3
 800c4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c4d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c4de:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4ea:	ee17 2a90 	vmov	r2, s15
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c4f2:	e002      	b.n	800c4fa <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	609a      	str	r2, [r3, #8]
}
 800c4fa:	bf00      	nop
 800c4fc:	3724      	adds	r7, #36	@ 0x24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	46020c00 	.word	0x46020c00
 800c50c:	4b742400 	.word	0x4b742400
 800c510:	46000000 	.word	0x46000000
 800c514:	08011c40 	.word	0x08011c40

0800c518 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c518:	b480      	push	{r7}
 800c51a:	b089      	sub	sp, #36	@ 0x24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c520:	4ba6      	ldr	r3, [pc, #664]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c528:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c52a:	4ba4      	ldr	r3, [pc, #656]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c52e:	f003 0303 	and.w	r3, r3, #3
 800c532:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c534:	4ba1      	ldr	r3, [pc, #644]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c538:	0a1b      	lsrs	r3, r3, #8
 800c53a:	f003 030f 	and.w	r3, r3, #15
 800c53e:	3301      	adds	r3, #1
 800c540:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c542:	4b9e      	ldr	r3, [pc, #632]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c546:	091b      	lsrs	r3, r3, #4
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c54e:	4b9b      	ldr	r3, [pc, #620]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c552:	08db      	lsrs	r3, r3, #3
 800c554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	fb02 f303 	mul.w	r3, r2, r3
 800c55e:	ee07 3a90 	vmov	s15, r3
 800c562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c566:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b03      	cmp	r3, #3
 800c56e:	d062      	beq.n	800c636 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2b03      	cmp	r3, #3
 800c574:	f200 8081 	bhi.w	800c67a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d024      	beq.n	800c5c8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d17a      	bne.n	800c67a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	ee07 3a90 	vmov	s15, r3
 800c58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c58e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c596:	4b89      	ldr	r3, [pc, #548]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c59e:	ee07 3a90 	vmov	s15, r3
 800c5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c5aa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5c2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c5c6:	e08f      	b.n	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c5c8:	4b7c      	ldr	r3, [pc, #496]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c5d4:	4b79      	ldr	r3, [pc, #484]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	0f1b      	lsrs	r3, r3, #28
 800c5da:	f003 030f 	and.w	r3, r3, #15
 800c5de:	e006      	b.n	800c5ee <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c5e0:	4b76      	ldr	r3, [pc, #472]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c5e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c5e6:	041b      	lsls	r3, r3, #16
 800c5e8:	0f1b      	lsrs	r3, r3, #28
 800c5ea:	f003 030f 	and.w	r3, r3, #15
 800c5ee:	4a76      	ldr	r2, [pc, #472]	@ (800c7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5f4:	ee07 3a90 	vmov	s15, r3
 800c5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	ee07 3a90 	vmov	s15, r3
 800c602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	ee07 3a90 	vmov	s15, r3
 800c610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c614:	ed97 6a02 	vldr	s12, [r7, #8]
 800c618:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c61c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c624:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c628:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c62c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c630:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c634:	e058      	b.n	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	ee07 3a90 	vmov	s15, r3
 800c63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c640:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c648:	4b5c      	ldr	r3, [pc, #368]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c64a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c64c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c650:	ee07 3a90 	vmov	s15, r3
 800c654:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c658:	ed97 6a02 	vldr	s12, [r7, #8]
 800c65c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c660:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c664:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c668:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c66c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c670:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c674:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c678:	e036      	b.n	800c6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c67a:	4b50      	ldr	r3, [pc, #320]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d005      	beq.n	800c692 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c686:	4b4d      	ldr	r3, [pc, #308]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	0f1b      	lsrs	r3, r3, #28
 800c68c:	f003 030f 	and.w	r3, r3, #15
 800c690:	e006      	b.n	800c6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c692:	4b4a      	ldr	r3, [pc, #296]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c698:	041b      	lsls	r3, r3, #16
 800c69a:	0f1b      	lsrs	r3, r3, #28
 800c69c:	f003 030f 	and.w	r3, r3, #15
 800c6a0:	4a49      	ldr	r2, [pc, #292]	@ (800c7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6a6:	ee07 3a90 	vmov	s15, r3
 800c6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	ee07 3a90 	vmov	s15, r3
 800c6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6ca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6e6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c6e8:	4b34      	ldr	r3, [pc, #208]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d017      	beq.n	800c724 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c6f4:	4b31      	ldr	r3, [pc, #196]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c6f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6f8:	0a5b      	lsrs	r3, r3, #9
 800c6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6fe:	ee07 3a90 	vmov	s15, r3
 800c702:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c70a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c70e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c71a:	ee17 2a90 	vmov	r2, s15
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	e002      	b.n	800c72a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c72a:	4b24      	ldr	r3, [pc, #144]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c72e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c732:	2b00      	cmp	r3, #0
 800c734:	d017      	beq.n	800c766 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c736:	4b21      	ldr	r3, [pc, #132]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c73a:	0c1b      	lsrs	r3, r3, #16
 800c73c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c740:	ee07 3a90 	vmov	s15, r3
 800c744:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c748:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c74c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c750:	edd7 6a07 	vldr	s13, [r7, #28]
 800c754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c75c:	ee17 2a90 	vmov	r2, s15
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	605a      	str	r2, [r3, #4]
 800c764:	e002      	b.n	800c76c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c76c:	4b13      	ldr	r3, [pc, #76]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c76e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c774:	2b00      	cmp	r3, #0
 800c776:	d017      	beq.n	800c7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c778:	4b10      	ldr	r3, [pc, #64]	@ (800c7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c77a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c77c:	0e1b      	lsrs	r3, r3, #24
 800c77e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c782:	ee07 3a90 	vmov	s15, r3
 800c786:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c78a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c78e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c792:	edd7 6a07 	vldr	s13, [r7, #28]
 800c796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c79e:	ee17 2a90 	vmov	r2, s15
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c7a6:	e002      	b.n	800c7ae <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	609a      	str	r2, [r3, #8]
}
 800c7ae:	bf00      	nop
 800c7b0:	3724      	adds	r7, #36	@ 0x24
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	46020c00 	.word	0x46020c00
 800c7c0:	4b742400 	.word	0x4b742400
 800c7c4:	46000000 	.word	0x46000000
 800c7c8:	08011c40 	.word	0x08011c40

0800c7cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b08e      	sub	sp, #56	@ 0x38
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c7d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7da:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c7de:	430b      	orrs	r3, r1
 800c7e0:	d145      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c7e2:	4ba7      	ldr	r3, [pc, #668]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c7e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c7e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c7ec:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c7ee:	4ba4      	ldr	r3, [pc, #656]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c7f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d108      	bne.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c802:	d104      	bne.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c808:	637b      	str	r3, [r7, #52]	@ 0x34
 800c80a:	f001 bb5a 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c80e:	4b9c      	ldr	r3, [pc, #624]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c81c:	d114      	bne.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c824:	d110      	bne.n	800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c826:	4b96      	ldr	r3, [pc, #600]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c82c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c834:	d103      	bne.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c836:	23fa      	movs	r3, #250	@ 0xfa
 800c838:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c83a:	f001 bb42 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c83e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c842:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c844:	f001 bb3d 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c848:	4b8d      	ldr	r3, [pc, #564]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c854:	d107      	bne.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c858:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c85c:	d103      	bne.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c85e:	4b89      	ldr	r3, [pc, #548]	@ (800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c860:	637b      	str	r3, [r7, #52]	@ 0x34
 800c862:	f001 bb2e 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c866:	2300      	movs	r3, #0
 800c868:	637b      	str	r3, [r7, #52]	@ 0x34
 800c86a:	f001 bb2a 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c86e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c872:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c876:	430b      	orrs	r3, r1
 800c878:	d151      	bne.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c87a:	4b81      	ldr	r3, [pc, #516]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c87c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c880:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c884:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c888:	2b80      	cmp	r3, #128	@ 0x80
 800c88a:	d035      	beq.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c88e:	2b80      	cmp	r3, #128	@ 0x80
 800c890:	d841      	bhi.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c894:	2b60      	cmp	r3, #96	@ 0x60
 800c896:	d02a      	beq.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89a:	2b60      	cmp	r3, #96	@ 0x60
 800c89c:	d83b      	bhi.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a0:	2b40      	cmp	r3, #64	@ 0x40
 800c8a2:	d009      	beq.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a6:	2b40      	cmp	r3, #64	@ 0x40
 800c8a8:	d835      	bhi.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00c      	beq.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b2:	2b20      	cmp	r3, #32
 800c8b4:	d012      	beq.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c8b6:	e02e      	b.n	800c916 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7ff fb77 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8c6:	f001 bafc 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8ca:	f107 0318 	add.w	r3, r7, #24
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff fcc8 	bl	800c264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8d8:	f001 baf3 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8dc:	f107 030c 	add.w	r3, r7, #12
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7ff fe19 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8ea:	f001 baea 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c8ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c8f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8f4:	f001 bae5 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8f8:	4b61      	ldr	r3, [pc, #388]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c904:	d103      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c906:	4b60      	ldr	r3, [pc, #384]	@ (800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c908:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c90a:	f001 bada 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c912:	f001 bad6 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c91a:	f001 bad2 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c922:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c926:	430b      	orrs	r3, r1
 800c928:	d158      	bne.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c92a:	4b55      	ldr	r3, [pc, #340]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c92c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c930:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c934:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c93c:	d03b      	beq.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c944:	d846      	bhi.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c94c:	d02e      	beq.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c950:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c954:	d83e      	bhi.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c95c:	d00b      	beq.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c964:	d836      	bhi.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00d      	beq.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c972:	d012      	beq.n	800c99a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c974:	e02e      	b.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7ff fb18 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c984:	f001 ba9d 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c988:	f107 0318 	add.w	r3, r7, #24
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff fc69 	bl	800c264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c996:	f001 ba94 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c99a:	f107 030c 	add.w	r3, r7, #12
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff fdba 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9a8:	f001 ba8b 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c9ac:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c9b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9b2:	f001 ba86 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c9b6:	4b32      	ldr	r3, [pc, #200]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9c2:	d103      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c9c4:	4b30      	ldr	r3, [pc, #192]	@ (800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c9c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c9c8:	f001 ba7b 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9d0:	f001 ba77 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9d8:	f001 ba73 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c9dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c9e4:	430b      	orrs	r3, r1
 800c9e6:	d126      	bne.n	800ca36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c9e8:	4b25      	ldr	r3, [pc, #148]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c9ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c9ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c9f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c9f4:	4b22      	ldr	r3, [pc, #136]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca00:	d106      	bne.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ca02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d103      	bne.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ca08:	4b1f      	ldr	r3, [pc, #124]	@ (800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ca0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca0c:	f001 ba59 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ca10:	4b1b      	ldr	r3, [pc, #108]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca1c:	d107      	bne.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca24:	d103      	bne.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ca26:	4b19      	ldr	r3, [pc, #100]	@ (800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ca28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca2a:	f001 ba4a 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca32:	f001 ba46 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ca36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca3a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800ca3e:	430b      	orrs	r3, r1
 800ca40:	d16e      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ca42:	4b0f      	ldr	r3, [pc, #60]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ca44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca48:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ca4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca50:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ca54:	d03d      	beq.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ca56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca58:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ca5c:	d85c      	bhi.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca64:	d014      	beq.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800ca66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca6c:	d854      	bhi.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d01f      	beq.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800ca74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ca7a:	d012      	beq.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ca7c:	e04c      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ca7e:	bf00      	nop
 800ca80:	46020c00 	.word	0x46020c00
 800ca84:	0007a120 	.word	0x0007a120
 800ca88:	00f42400 	.word	0x00f42400
 800ca8c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7ff fa8b 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca9e:	f001 ba10 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caa2:	f107 0318 	add.w	r3, r7, #24
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff fbdc 	bl	800c264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cab0:	f001 ba07 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800cab4:	4ba7      	ldr	r3, [pc, #668]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cabc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cac0:	d103      	bne.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800cac2:	4ba5      	ldr	r3, [pc, #660]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cac4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cac6:	f001 b9fc 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800caca:	2300      	movs	r3, #0
 800cacc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cace:	f001 b9f8 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cad2:	4ba0      	ldr	r3, [pc, #640]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 0320 	and.w	r3, r3, #32
 800cada:	2b20      	cmp	r3, #32
 800cadc:	d118      	bne.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cade:	4b9d      	ldr	r3, [pc, #628]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d005      	beq.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800caea:	4b9a      	ldr	r3, [pc, #616]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	0e1b      	lsrs	r3, r3, #24
 800caf0:	f003 030f 	and.w	r3, r3, #15
 800caf4:	e006      	b.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800caf6:	4b97      	ldr	r3, [pc, #604]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800caf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cafc:	041b      	lsls	r3, r3, #16
 800cafe:	0e1b      	lsrs	r3, r3, #24
 800cb00:	f003 030f 	and.w	r3, r3, #15
 800cb04:	4a95      	ldr	r2, [pc, #596]	@ (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800cb06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cb0c:	f001 b9d9 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cb10:	2300      	movs	r3, #0
 800cb12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb14:	f001 b9d5 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb1c:	f001 b9d1 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cb20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb24:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800cb28:	430b      	orrs	r3, r1
 800cb2a:	d17f      	bne.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cb2c:	4b89      	ldr	r3, [pc, #548]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cb32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb36:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800cb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d165      	bne.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800cb3e:	4b85      	ldr	r3, [pc, #532]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cb40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb44:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800cb48:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cb50:	d034      	beq.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800cb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb54:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cb58:	d853      	bhi.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb60:	d00b      	beq.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800cb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb68:	d84b      	bhi.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d016      	beq.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800cb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cb76:	d009      	beq.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800cb78:	e043      	b.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff fa16 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb86:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cb88:	f001 b99b 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb8c:	f107 0318 	add.w	r3, r7, #24
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7ff fb67 	bl	800c264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cb9a:	f001 b992 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800cb9e:	4b6d      	ldr	r3, [pc, #436]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbaa:	d103      	bne.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800cbac:	4b6a      	ldr	r3, [pc, #424]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cbae:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800cbb0:	f001 b987 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cbb8:	f001 b983 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cbbc:	4b65      	ldr	r3, [pc, #404]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 0320 	and.w	r3, r3, #32
 800cbc4:	2b20      	cmp	r3, #32
 800cbc6:	d118      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cbc8:	4b62      	ldr	r3, [pc, #392]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800cbd4:	4b5f      	ldr	r3, [pc, #380]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	0e1b      	lsrs	r3, r3, #24
 800cbda:	f003 030f 	and.w	r3, r3, #15
 800cbde:	e006      	b.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800cbe0:	4b5c      	ldr	r3, [pc, #368]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cbe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cbe6:	041b      	lsls	r3, r3, #16
 800cbe8:	0e1b      	lsrs	r3, r3, #24
 800cbea:	f003 030f 	and.w	r3, r3, #15
 800cbee:	4a5b      	ldr	r2, [pc, #364]	@ (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800cbf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbf4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800cbf6:	f001 b964 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cbfe:	f001 b960 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800cc02:	2300      	movs	r3, #0
 800cc04:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800cc06:	f001 b95c 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc10:	d108      	bne.n	800cc24 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff f9ca 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc20:	f001 b94f 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800cc24:	2300      	movs	r3, #0
 800cc26:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc28:	f001 b94b 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800cc2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc30:	1e51      	subs	r1, r2, #1
 800cc32:	430b      	orrs	r3, r1
 800cc34:	d136      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800cc36:	4b47      	ldr	r3, [pc, #284]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cc38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc3c:	f003 0303 	and.w	r3, r3, #3
 800cc40:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800cc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d104      	bne.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800cc48:	f7fe f9cc 	bl	800afe4 <HAL_RCC_GetPCLK2Freq>
 800cc4c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc4e:	f001 b938 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800cc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d104      	bne.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc58:	f7fe f894 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800cc5c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc5e:	f001 b930 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800cc62:	4b3c      	ldr	r3, [pc, #240]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc6e:	d106      	bne.n	800cc7e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800cc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d103      	bne.n	800cc7e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800cc76:	4b3a      	ldr	r3, [pc, #232]	@ (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800cc78:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc7a:	f001 b922 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800cc7e:	4b35      	ldr	r3, [pc, #212]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cc80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc84:	f003 0302 	and.w	r3, r3, #2
 800cc88:	2b02      	cmp	r3, #2
 800cc8a:	d107      	bne.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	d104      	bne.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800cc92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc96:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc98:	f001 b913 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cca0:	f001 b90f 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800cca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cca8:	1e91      	subs	r1, r2, #2
 800ccaa:	430b      	orrs	r3, r1
 800ccac:	d136      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ccae:	4b29      	ldr	r3, [pc, #164]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ccb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ccb4:	f003 030c 	and.w	r3, r3, #12
 800ccb8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ccba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d104      	bne.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ccc0:	f7fe f97c 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800ccc4:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccc6:	f001 b8fc 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ccca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cccc:	2b04      	cmp	r3, #4
 800ccce:	d104      	bne.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccd0:	f7fe f858 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800ccd4:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccd6:	f001 b8f4 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ccda:	4b1e      	ldr	r3, [pc, #120]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cce6:	d106      	bne.n	800ccf6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800cce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccea:	2b08      	cmp	r3, #8
 800ccec:	d103      	bne.n	800ccf6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ccee:	4b1c      	ldr	r3, [pc, #112]	@ (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ccf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccf2:	f001 b8e6 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ccf6:	4b17      	ldr	r3, [pc, #92]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ccf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ccfc:	f003 0302 	and.w	r3, r3, #2
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d107      	bne.n	800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800cd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd06:	2b0c      	cmp	r3, #12
 800cd08:	d104      	bne.n	800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800cd0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd10:	f001 b8d7 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800cd14:	2300      	movs	r3, #0
 800cd16:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd18:	f001 b8d3 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800cd1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd20:	1f11      	subs	r1, r2, #4
 800cd22:	430b      	orrs	r3, r1
 800cd24:	d13f      	bne.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800cd26:	4b0b      	ldr	r3, [pc, #44]	@ (800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cd28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cd2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cd30:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800cd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d104      	bne.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd38:	f7fe f940 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800cd3c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd3e:	f001 b8c0 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800cd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd44:	2b10      	cmp	r3, #16
 800cd46:	d10d      	bne.n	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd48:	f7fe f81c 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800cd4c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd4e:	f001 b8b8 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd52:	bf00      	nop
 800cd54:	46020c00 	.word	0x46020c00
 800cd58:	02dc6c00 	.word	0x02dc6c00
 800cd5c:	08011c40 	.word	0x08011c40
 800cd60:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800cd64:	4ba8      	ldr	r3, [pc, #672]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd70:	d106      	bne.n	800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800cd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd74:	2b20      	cmp	r3, #32
 800cd76:	d103      	bne.n	800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800cd78:	4ba4      	ldr	r3, [pc, #656]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd7c:	f001 b8a1 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800cd80:	4ba1      	ldr	r3, [pc, #644]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd86:	f003 0302 	and.w	r3, r3, #2
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d107      	bne.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd90:	2b30      	cmp	r3, #48	@ 0x30
 800cd92:	d104      	bne.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800cd94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd98:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd9a:	f001 b892 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cda2:	f001 b88e 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800cda6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdaa:	f1a2 0108 	sub.w	r1, r2, #8
 800cdae:	430b      	orrs	r3, r1
 800cdb0:	d136      	bne.n	800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800cdb2:	4b95      	ldr	r3, [pc, #596]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cdb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cdb8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cdbc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d104      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cdc4:	f7fe f8fa 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800cdc8:	6378      	str	r0, [r7, #52]	@ 0x34
 800cdca:	f001 b87a 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800cdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd0:	2b40      	cmp	r3, #64	@ 0x40
 800cdd2:	d104      	bne.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cdd4:	f7fd ffd6 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800cdd8:	6378      	str	r0, [r7, #52]	@ 0x34
 800cdda:	f001 b872 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800cdde:	4b8a      	ldr	r3, [pc, #552]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cde6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdea:	d106      	bne.n	800cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800cdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdee:	2b80      	cmp	r3, #128	@ 0x80
 800cdf0:	d103      	bne.n	800cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800cdf2:	4b86      	ldr	r3, [pc, #536]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cdf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdf6:	f001 b864 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cdfa:	4b83      	ldr	r3, [pc, #524]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cdfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce00:	f003 0302 	and.w	r3, r3, #2
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d107      	bne.n	800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ce08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce0c:	d104      	bne.n	800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800ce0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce14:	f001 b855 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce1c:	f001 b851 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800ce20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce24:	f1a2 0110 	sub.w	r1, r2, #16
 800ce28:	430b      	orrs	r3, r1
 800ce2a:	d139      	bne.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ce2c:	4b76      	ldr	r3, [pc, #472]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800ce38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d104      	bne.n	800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ce3e:	f7fe f8bd 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800ce42:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce44:	f001 b83d 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800ce48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce4e:	d104      	bne.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ce50:	f7fd ff98 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800ce54:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce56:	f001 b834 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ce5a:	4b6b      	ldr	r3, [pc, #428]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce66:	d107      	bne.n	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800ce68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce6e:	d103      	bne.n	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800ce70:	4b66      	ldr	r3, [pc, #408]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ce72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce74:	f001 b825 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ce78:	4b63      	ldr	r3, [pc, #396]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ce7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce7e:	f003 0302 	and.w	r3, r3, #2
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d108      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ce86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce8c:	d104      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ce8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce94:	f001 b815 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce9c:	f001 b811 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cea4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cea8:	430b      	orrs	r3, r1
 800ceaa:	d139      	bne.n	800cf20 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ceac:	4b56      	ldr	r3, [pc, #344]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ceae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ceb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ceb6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d104      	bne.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cebe:	f7fe f87d 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800cec2:	6378      	str	r0, [r7, #52]	@ 0x34
 800cec4:	f000 bffd 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cece:	d104      	bne.n	800ceda <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ced0:	f7fd ff58 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800ced4:	6378      	str	r0, [r7, #52]	@ 0x34
 800ced6:	f000 bff4 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ceda:	4b4b      	ldr	r3, [pc, #300]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cee6:	d107      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ceee:	d103      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cef0:	4b46      	ldr	r3, [pc, #280]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cef2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef4:	f000 bfe5 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cef8:	4b43      	ldr	r3, [pc, #268]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cefa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cefe:	f003 0302 	and.w	r3, r3, #2
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d108      	bne.n	800cf18 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf0c:	d104      	bne.n	800cf18 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800cf0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf12:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf14:	f000 bfd5 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf1c:	f000 bfd1 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cf20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf24:	f1a2 0120 	sub.w	r1, r2, #32
 800cf28:	430b      	orrs	r3, r1
 800cf2a:	d158      	bne.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800cf2c:	4b36      	ldr	r3, [pc, #216]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cf32:	f003 0307 	and.w	r3, r3, #7
 800cf36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800cf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d104      	bne.n	800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800cf3e:	f7fe f865 	bl	800b00c <HAL_RCC_GetPCLK3Freq>
 800cf42:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf44:	f000 bfbd 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800cf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d104      	bne.n	800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cf4e:	f7fd ff19 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800cf52:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf54:	f000 bfb5 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800cf58:	4b2b      	ldr	r3, [pc, #172]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf64:	d106      	bne.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800cf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d103      	bne.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800cf6c:	4b27      	ldr	r3, [pc, #156]	@ (800d00c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cf6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf70:	f000 bfa7 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800cf74:	4b24      	ldr	r3, [pc, #144]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf7a:	f003 0302 	and.w	r3, r3, #2
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d107      	bne.n	800cf92 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800cf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf84:	2b03      	cmp	r3, #3
 800cf86:	d104      	bne.n	800cf92 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800cf88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf8e:	f000 bf98 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800cf92:	4b1d      	ldr	r3, [pc, #116]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 0320 	and.w	r3, r3, #32
 800cf9a:	2b20      	cmp	r3, #32
 800cf9c:	d11b      	bne.n	800cfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa0:	2b04      	cmp	r3, #4
 800cfa2:	d118      	bne.n	800cfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cfa4:	4b18      	ldr	r3, [pc, #96]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d005      	beq.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800cfb0:	4b15      	ldr	r3, [pc, #84]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	0e1b      	lsrs	r3, r3, #24
 800cfb6:	f003 030f 	and.w	r3, r3, #15
 800cfba:	e006      	b.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800cfbc:	4b12      	ldr	r3, [pc, #72]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cfbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfc2:	041b      	lsls	r3, r3, #16
 800cfc4:	0e1b      	lsrs	r3, r3, #24
 800cfc6:	f003 030f 	and.w	r3, r3, #15
 800cfca:	4a11      	ldr	r2, [pc, #68]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cfcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfd2:	f000 bf76 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfda:	f000 bf72 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800cfde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfe2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800cfe6:	430b      	orrs	r3, r1
 800cfe8:	d172      	bne.n	800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800cfea:	4b07      	ldr	r3, [pc, #28]	@ (800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cfec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cff0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cff4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800cff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cffc:	d10a      	bne.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cffe:	f7fd fec1 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800d002:	6378      	str	r0, [r7, #52]	@ 0x34
 800d004:	f000 bf5d 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d008:	46020c00 	.word	0x46020c00
 800d00c:	00f42400 	.word	0x00f42400
 800d010:	08011c40 	.word	0x08011c40
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800d014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d01a:	d108      	bne.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d01c:	f107 0318 	add.w	r3, r7, #24
 800d020:	4618      	mov	r0, r3
 800d022:	f7ff f91f 	bl	800c264 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	637b      	str	r3, [r7, #52]	@ 0x34
 800d02a:	f000 bf4a 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800d02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d030:	2b00      	cmp	r3, #0
 800d032:	d104      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800d034:	f7fd ffa8 	bl	800af88 <HAL_RCC_GetHCLKFreq>
 800d038:	6378      	str	r0, [r7, #52]	@ 0x34
 800d03a:	f000 bf42 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800d03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d040:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d044:	d122      	bne.n	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d046:	4bb0      	ldr	r3, [pc, #704]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 0320 	and.w	r3, r3, #32
 800d04e:	2b20      	cmp	r3, #32
 800d050:	d118      	bne.n	800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d052:	4bad      	ldr	r3, [pc, #692]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800d05e:	4baa      	ldr	r3, [pc, #680]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	0e1b      	lsrs	r3, r3, #24
 800d064:	f003 030f 	and.w	r3, r3, #15
 800d068:	e006      	b.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800d06a:	4ba7      	ldr	r3, [pc, #668]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d06c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d070:	041b      	lsls	r3, r3, #16
 800d072:	0e1b      	lsrs	r3, r3, #24
 800d074:	f003 030f 	and.w	r3, r3, #15
 800d078:	4aa4      	ldr	r2, [pc, #656]	@ (800d30c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d07e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d080:	f000 bf1f 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d084:	2300      	movs	r3, #0
 800d086:	637b      	str	r3, [r7, #52]	@ 0x34
 800d088:	f000 bf1b 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800d08c:	4b9e      	ldr	r3, [pc, #632]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d098:	d107      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800d09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d0a0:	d103      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800d0a2:	4b9b      	ldr	r3, [pc, #620]	@ (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0a6:	f000 bf0c 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800d0aa:	4b97      	ldr	r3, [pc, #604]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0b6:	d107      	bne.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d0be:	d103      	bne.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800d0c0:	4b93      	ldr	r3, [pc, #588]	@ (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d0c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0c4:	f000 befd 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0cc:	f000 bef9 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800d0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0d4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d0d8:	430b      	orrs	r3, r1
 800d0da:	d158      	bne.n	800d18e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800d0dc:	4b8a      	ldr	r3, [pc, #552]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d0de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d0e2:	f003 0307 	and.w	r3, r3, #7
 800d0e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ea:	2b04      	cmp	r3, #4
 800d0ec:	d84b      	bhi.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800d0ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800d0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f4:	0800d12d 	.word	0x0800d12d
 800d0f8:	0800d109 	.word	0x0800d109
 800d0fc:	0800d11b 	.word	0x0800d11b
 800d100:	0800d137 	.word	0x0800d137
 800d104:	0800d141 	.word	0x0800d141
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe ff4f 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d116:	f000 bed4 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d11a:	f107 030c 	add.w	r3, r7, #12
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff f9fa 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d128:	f000 becb 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d12c:	f7fd ff2c 	bl	800af88 <HAL_RCC_GetHCLKFreq>
 800d130:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d132:	f000 bec6 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d136:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d13a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d13c:	f000 bec1 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d140:	4b71      	ldr	r3, [pc, #452]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 0320 	and.w	r3, r3, #32
 800d148:	2b20      	cmp	r3, #32
 800d14a:	d118      	bne.n	800d17e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d14c:	4b6e      	ldr	r3, [pc, #440]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d154:	2b00      	cmp	r3, #0
 800d156:	d005      	beq.n	800d164 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800d158:	4b6b      	ldr	r3, [pc, #428]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	0e1b      	lsrs	r3, r3, #24
 800d15e:	f003 030f 	and.w	r3, r3, #15
 800d162:	e006      	b.n	800d172 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800d164:	4b68      	ldr	r3, [pc, #416]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d16a:	041b      	lsls	r3, r3, #16
 800d16c:	0e1b      	lsrs	r3, r3, #24
 800d16e:	f003 030f 	and.w	r3, r3, #15
 800d172:	4a66      	ldr	r2, [pc, #408]	@ (800d30c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d178:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d17a:	f000 bea2 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d17e:	2300      	movs	r3, #0
 800d180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d182:	f000 be9e 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d186:	2300      	movs	r3, #0
 800d188:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d18a:	f000 be9a 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800d18e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d192:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800d196:	430b      	orrs	r3, r1
 800d198:	d167      	bne.n	800d26a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800d19a:	4b5b      	ldr	r3, [pc, #364]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d19c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d1a0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d1a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d1ac:	d036      	beq.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d1b4:	d855      	bhi.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d1bc:	d029      	beq.n	800d212 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800d1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d1c4:	d84d      	bhi.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1cc:	d013      	beq.n	800d1f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1d4:	d845      	bhi.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d015      	beq.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800d1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1e2:	d13e      	bne.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fe fee1 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1f2:	f000 be66 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1f6:	f107 030c 	add.w	r3, r7, #12
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7ff f98c 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d204:	f000 be5d 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d208:	f7fd febe 	bl	800af88 <HAL_RCC_GetHCLKFreq>
 800d20c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d20e:	f000 be58 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d212:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d218:	f000 be53 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d21c:	4b3a      	ldr	r3, [pc, #232]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 0320 	and.w	r3, r3, #32
 800d224:	2b20      	cmp	r3, #32
 800d226:	d118      	bne.n	800d25a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d228:	4b37      	ldr	r3, [pc, #220]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d230:	2b00      	cmp	r3, #0
 800d232:	d005      	beq.n	800d240 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800d234:	4b34      	ldr	r3, [pc, #208]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	0e1b      	lsrs	r3, r3, #24
 800d23a:	f003 030f 	and.w	r3, r3, #15
 800d23e:	e006      	b.n	800d24e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d240:	4b31      	ldr	r3, [pc, #196]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d242:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d246:	041b      	lsls	r3, r3, #16
 800d248:	0e1b      	lsrs	r3, r3, #24
 800d24a:	f003 030f 	and.w	r3, r3, #15
 800d24e:	4a2f      	ldr	r2, [pc, #188]	@ (800d30c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d254:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d256:	f000 be34 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d25a:	2300      	movs	r3, #0
 800d25c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d25e:	f000 be30 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d262:	2300      	movs	r3, #0
 800d264:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d266:	f000 be2c 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800d26a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d26e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800d272:	430b      	orrs	r3, r1
 800d274:	d152      	bne.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d276:	4b24      	ldr	r3, [pc, #144]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d27c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d280:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800d282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d284:	2b00      	cmp	r3, #0
 800d286:	d104      	bne.n	800d292 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d288:	f7fd fe98 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800d28c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d28e:	f000 be18 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800d292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d298:	d104      	bne.n	800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d29a:	f7fd fd73 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800d29e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2a0:	f000 be0f 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d2a4:	4b18      	ldr	r3, [pc, #96]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2b0:	d107      	bne.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d2b8:	d103      	bne.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d2ba:	4b15      	ldr	r3, [pc, #84]	@ (800d310 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d2bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2be:	f000 be00 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d2c2:	4b11      	ldr	r3, [pc, #68]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f003 0320 	and.w	r3, r3, #32
 800d2ca:	2b20      	cmp	r3, #32
 800d2cc:	d122      	bne.n	800d314 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d2d4:	d11e      	bne.n	800d314 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d005      	beq.n	800d2ee <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d2e2:	4b09      	ldr	r3, [pc, #36]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	0e1b      	lsrs	r3, r3, #24
 800d2e8:	f003 030f 	and.w	r3, r3, #15
 800d2ec:	e006      	b.n	800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d2ee:	4b06      	ldr	r3, [pc, #24]	@ (800d308 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d2f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2f4:	041b      	lsls	r3, r3, #16
 800d2f6:	0e1b      	lsrs	r3, r3, #24
 800d2f8:	f003 030f 	and.w	r3, r3, #15
 800d2fc:	4a03      	ldr	r2, [pc, #12]	@ (800d30c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d2fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d302:	637b      	str	r3, [r7, #52]	@ 0x34
 800d304:	f000 bddd 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d308:	46020c00 	.word	0x46020c00
 800d30c:	08011c40 	.word	0x08011c40
 800d310:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d314:	2300      	movs	r3, #0
 800d316:	637b      	str	r3, [r7, #52]	@ 0x34
 800d318:	f000 bdd3 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d31c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d320:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d324:	430b      	orrs	r3, r1
 800d326:	d14c      	bne.n	800d3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d328:	4ba8      	ldr	r3, [pc, #672]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d32a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d32e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d332:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d336:	2b00      	cmp	r3, #0
 800d338:	d104      	bne.n	800d344 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d33a:	f7fd fe3f 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800d33e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d340:	f000 bdbf 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d34a:	d104      	bne.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d34c:	f7fd fd1a 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800d350:	6378      	str	r0, [r7, #52]	@ 0x34
 800d352:	f000 bdb6 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d356:	4b9d      	ldr	r3, [pc, #628]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d35e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d362:	d107      	bne.n	800d374 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d36a:	d103      	bne.n	800d374 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d36c:	4b98      	ldr	r3, [pc, #608]	@ (800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d36e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d370:	f000 bda7 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d374:	4b95      	ldr	r3, [pc, #596]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f003 0320 	and.w	r3, r3, #32
 800d37c:	2b20      	cmp	r3, #32
 800d37e:	d11c      	bne.n	800d3ba <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d382:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d386:	d118      	bne.n	800d3ba <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d388:	4b90      	ldr	r3, [pc, #576]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d390:	2b00      	cmp	r3, #0
 800d392:	d005      	beq.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d394:	4b8d      	ldr	r3, [pc, #564]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	0e1b      	lsrs	r3, r3, #24
 800d39a:	f003 030f 	and.w	r3, r3, #15
 800d39e:	e006      	b.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d3a0:	4b8a      	ldr	r3, [pc, #552]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d3a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3a6:	041b      	lsls	r3, r3, #16
 800d3a8:	0e1b      	lsrs	r3, r3, #24
 800d3aa:	f003 030f 	and.w	r3, r3, #15
 800d3ae:	4a89      	ldr	r2, [pc, #548]	@ (800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3b6:	f000 bd84 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3be:	f000 bd80 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d3ca:	430b      	orrs	r3, r1
 800d3cc:	d158      	bne.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d3ce:	4b7f      	ldr	r3, [pc, #508]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d3d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d3d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d3d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3dc:	2bc0      	cmp	r3, #192	@ 0xc0
 800d3de:	d028      	beq.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e2:	2bc0      	cmp	r3, #192	@ 0xc0
 800d3e4:	d848      	bhi.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e8:	2b80      	cmp	r3, #128	@ 0x80
 800d3ea:	d00e      	beq.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ee:	2b80      	cmp	r3, #128	@ 0x80
 800d3f0:	d842      	bhi.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d003      	beq.n	800d400 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fa:	2b40      	cmp	r3, #64	@ 0x40
 800d3fc:	d014      	beq.n	800d428 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d3fe:	e03b      	b.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d400:	f7fd fe04 	bl	800b00c <HAL_RCC_GetPCLK3Freq>
 800d404:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d406:	f000 bd5c 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d40a:	4b70      	ldr	r3, [pc, #448]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d416:	d103      	bne.n	800d420 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d418:	4b6d      	ldr	r3, [pc, #436]	@ (800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d41a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d41c:	f000 bd51 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d420:	2300      	movs	r3, #0
 800d422:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d424:	f000 bd4d 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d428:	f7fd fcac 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800d42c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d42e:	f000 bd48 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d432:	4b66      	ldr	r3, [pc, #408]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f003 0320 	and.w	r3, r3, #32
 800d43a:	2b20      	cmp	r3, #32
 800d43c:	d118      	bne.n	800d470 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d43e:	4b63      	ldr	r3, [pc, #396]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d446:	2b00      	cmp	r3, #0
 800d448:	d005      	beq.n	800d456 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d44a:	4b60      	ldr	r3, [pc, #384]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	0e1b      	lsrs	r3, r3, #24
 800d450:	f003 030f 	and.w	r3, r3, #15
 800d454:	e006      	b.n	800d464 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d456:	4b5d      	ldr	r3, [pc, #372]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d45c:	041b      	lsls	r3, r3, #16
 800d45e:	0e1b      	lsrs	r3, r3, #24
 800d460:	f003 030f 	and.w	r3, r3, #15
 800d464:	4a5b      	ldr	r2, [pc, #364]	@ (800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d46a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d46c:	f000 bd29 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d470:	2300      	movs	r3, #0
 800d472:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d474:	f000 bd25 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d47c:	f000 bd21 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d480:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d484:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d488:	430b      	orrs	r3, r1
 800d48a:	d14c      	bne.n	800d526 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d48c:	4b4f      	ldr	r3, [pc, #316]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d48e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d492:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d496:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d104      	bne.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d49e:	f7fd fd8d 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800d4a2:	6378      	str	r0, [r7, #52]	@ 0x34
 800d4a4:	f000 bd0d 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d4ae:	d104      	bne.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d4b0:	f7fd fc68 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800d4b4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d4b6:	f000 bd04 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d4ba:	4b44      	ldr	r3, [pc, #272]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4c6:	d107      	bne.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4ce:	d103      	bne.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d4d0:	4b3f      	ldr	r3, [pc, #252]	@ (800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d4d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4d4:	f000 bcf5 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d4d8:	4b3c      	ldr	r3, [pc, #240]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f003 0320 	and.w	r3, r3, #32
 800d4e0:	2b20      	cmp	r3, #32
 800d4e2:	d11c      	bne.n	800d51e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d4ea:	d118      	bne.n	800d51e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d4ec:	4b37      	ldr	r3, [pc, #220]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d005      	beq.n	800d504 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d4f8:	4b34      	ldr	r3, [pc, #208]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	0e1b      	lsrs	r3, r3, #24
 800d4fe:	f003 030f 	and.w	r3, r3, #15
 800d502:	e006      	b.n	800d512 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d504:	4b31      	ldr	r3, [pc, #196]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d50a:	041b      	lsls	r3, r3, #16
 800d50c:	0e1b      	lsrs	r3, r3, #24
 800d50e:	f003 030f 	and.w	r3, r3, #15
 800d512:	4a30      	ldr	r2, [pc, #192]	@ (800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d518:	637b      	str	r3, [r7, #52]	@ 0x34
 800d51a:	f000 bcd2 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d51e:	2300      	movs	r3, #0
 800d520:	637b      	str	r3, [r7, #52]	@ 0x34
 800d522:	f000 bcce 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d52a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d52e:	430b      	orrs	r3, r1
 800d530:	d152      	bne.n	800d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d532:	4b26      	ldr	r3, [pc, #152]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d534:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d538:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d53c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d540:	2b00      	cmp	r3, #0
 800d542:	d104      	bne.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d544:	f7fd fd3a 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800d548:	6378      	str	r0, [r7, #52]	@ 0x34
 800d54a:	f000 bcba 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d554:	d104      	bne.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d556:	f7fd fc15 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800d55a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d55c:	f000 bcb1 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d560:	4b1a      	ldr	r3, [pc, #104]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d56c:	d107      	bne.n	800d57e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d570:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d574:	d103      	bne.n	800d57e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d576:	4b16      	ldr	r3, [pc, #88]	@ (800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d578:	637b      	str	r3, [r7, #52]	@ 0x34
 800d57a:	f000 bca2 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d57e:	4b13      	ldr	r3, [pc, #76]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f003 0320 	and.w	r3, r3, #32
 800d586:	2b20      	cmp	r3, #32
 800d588:	d11c      	bne.n	800d5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d58c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d590:	d118      	bne.n	800d5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d592:	4b0e      	ldr	r3, [pc, #56]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d005      	beq.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d59e:	4b0b      	ldr	r3, [pc, #44]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	0e1b      	lsrs	r3, r3, #24
 800d5a4:	f003 030f 	and.w	r3, r3, #15
 800d5a8:	e006      	b.n	800d5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d5aa:	4b08      	ldr	r3, [pc, #32]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d5ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d5b0:	041b      	lsls	r3, r3, #16
 800d5b2:	0e1b      	lsrs	r3, r3, #24
 800d5b4:	f003 030f 	and.w	r3, r3, #15
 800d5b8:	4a06      	ldr	r2, [pc, #24]	@ (800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d5ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5be:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5c0:	f000 bc7f 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5c8:	f000 bc7b 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d5cc:	46020c00 	.word	0x46020c00
 800d5d0:	00f42400 	.word	0x00f42400
 800d5d4:	08011c40 	.word	0x08011c40
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5dc:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d5e0:	430b      	orrs	r3, r1
 800d5e2:	d14c      	bne.n	800d67e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d5e4:	4ba6      	ldr	r3, [pc, #664]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d5ea:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d5ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d104      	bne.n	800d600 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d5f6:	f7fd fce1 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800d5fa:	6378      	str	r0, [r7, #52]	@ 0x34
 800d5fc:	f000 bc61 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d606:	d104      	bne.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d608:	f7fd fbbc 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800d60c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d60e:	f000 bc58 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d612:	4b9b      	ldr	r3, [pc, #620]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d61a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d61e:	d107      	bne.n	800d630 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d626:	d103      	bne.n	800d630 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d628:	4b96      	ldr	r3, [pc, #600]	@ (800d884 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d62a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d62c:	f000 bc49 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d630:	4b93      	ldr	r3, [pc, #588]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f003 0320 	and.w	r3, r3, #32
 800d638:	2b20      	cmp	r3, #32
 800d63a:	d11c      	bne.n	800d676 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d642:	d118      	bne.n	800d676 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d644:	4b8e      	ldr	r3, [pc, #568]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d005      	beq.n	800d65c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d650:	4b8b      	ldr	r3, [pc, #556]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	0e1b      	lsrs	r3, r3, #24
 800d656:	f003 030f 	and.w	r3, r3, #15
 800d65a:	e006      	b.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d65c:	4b88      	ldr	r3, [pc, #544]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d65e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d662:	041b      	lsls	r3, r3, #16
 800d664:	0e1b      	lsrs	r3, r3, #24
 800d666:	f003 030f 	and.w	r3, r3, #15
 800d66a:	4a87      	ldr	r2, [pc, #540]	@ (800d888 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d670:	637b      	str	r3, [r7, #52]	@ 0x34
 800d672:	f000 bc26 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d676:	2300      	movs	r3, #0
 800d678:	637b      	str	r3, [r7, #52]	@ 0x34
 800d67a:	f000 bc22 	b.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d67e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d682:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d686:	430b      	orrs	r3, r1
 800d688:	d164      	bne.n	800d754 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d68a:	4b7d      	ldr	r3, [pc, #500]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d68c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d694:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d120      	bne.n	800d6de <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d69c:	4b78      	ldr	r3, [pc, #480]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 0320 	and.w	r3, r3, #32
 800d6a4:	2b20      	cmp	r3, #32
 800d6a6:	d117      	bne.n	800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d6a8:	4b75      	ldr	r3, [pc, #468]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d005      	beq.n	800d6c0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d6b4:	4b72      	ldr	r3, [pc, #456]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	0e1b      	lsrs	r3, r3, #24
 800d6ba:	f003 030f 	and.w	r3, r3, #15
 800d6be:	e006      	b.n	800d6ce <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d6c0:	4b6f      	ldr	r3, [pc, #444]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d6c6:	041b      	lsls	r3, r3, #16
 800d6c8:	0e1b      	lsrs	r3, r3, #24
 800d6ca:	f003 030f 	and.w	r3, r3, #15
 800d6ce:	4a6e      	ldr	r2, [pc, #440]	@ (800d888 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6d6:	e3f4      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6dc:	e3f1      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d6de:	4b68      	ldr	r3, [pc, #416]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d6e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d6ec:	d112      	bne.n	800d714 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6f4:	d10e      	bne.n	800d714 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d6f6:	4b62      	ldr	r3, [pc, #392]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d6f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d704:	d102      	bne.n	800d70c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d706:	23fa      	movs	r3, #250	@ 0xfa
 800d708:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d70a:	e3da      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d70c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d710:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d712:	e3d6      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d714:	4b5a      	ldr	r3, [pc, #360]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d71c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d720:	d106      	bne.n	800d730 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d728:	d102      	bne.n	800d730 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d72a:	4b56      	ldr	r3, [pc, #344]	@ (800d884 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d72c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d72e:	e3c8      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d730:	4b53      	ldr	r3, [pc, #332]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d732:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d736:	f003 0302 	and.w	r3, r3, #2
 800d73a:	2b02      	cmp	r3, #2
 800d73c:	d107      	bne.n	800d74e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d740:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d744:	d103      	bne.n	800d74e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d74a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d74c:	e3b9      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d74e:	2300      	movs	r3, #0
 800d750:	637b      	str	r3, [r7, #52]	@ 0x34
 800d752:	e3b6      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d754:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d758:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d75c:	430b      	orrs	r3, r1
 800d75e:	d164      	bne.n	800d82a <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d760:	4b47      	ldr	r3, [pc, #284]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d766:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d76a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d120      	bne.n	800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d772:	4b43      	ldr	r3, [pc, #268]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f003 0320 	and.w	r3, r3, #32
 800d77a:	2b20      	cmp	r3, #32
 800d77c:	d117      	bne.n	800d7ae <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d77e:	4b40      	ldr	r3, [pc, #256]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d786:	2b00      	cmp	r3, #0
 800d788:	d005      	beq.n	800d796 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d78a:	4b3d      	ldr	r3, [pc, #244]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	0e1b      	lsrs	r3, r3, #24
 800d790:	f003 030f 	and.w	r3, r3, #15
 800d794:	e006      	b.n	800d7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d796:	4b3a      	ldr	r3, [pc, #232]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d79c:	041b      	lsls	r3, r3, #16
 800d79e:	0e1b      	lsrs	r3, r3, #24
 800d7a0:	f003 030f 	and.w	r3, r3, #15
 800d7a4:	4a38      	ldr	r2, [pc, #224]	@ (800d888 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7ac:	e389      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7b2:	e386      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d7b4:	4b32      	ldr	r3, [pc, #200]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d7b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d7c2:	d112      	bne.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7ca:	d10e      	bne.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d7cc:	4b2c      	ldr	r3, [pc, #176]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d7ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d7d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7da:	d102      	bne.n	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d7dc:	23fa      	movs	r3, #250	@ 0xfa
 800d7de:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d7e0:	e36f      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d7e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d7e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d7e8:	e36b      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d7ea:	4b25      	ldr	r3, [pc, #148]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7f6:	d106      	bne.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7fe:	d102      	bne.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d800:	4b20      	ldr	r3, [pc, #128]	@ (800d884 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d802:	637b      	str	r3, [r7, #52]	@ 0x34
 800d804:	e35d      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d806:	4b1e      	ldr	r3, [pc, #120]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d80c:	f003 0302 	and.w	r3, r3, #2
 800d810:	2b02      	cmp	r3, #2
 800d812:	d107      	bne.n	800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d816:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d81a:	d103      	bne.n	800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d81c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d820:	637b      	str	r3, [r7, #52]	@ 0x34
 800d822:	e34e      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d824:	2300      	movs	r3, #0
 800d826:	637b      	str	r3, [r7, #52]	@ 0x34
 800d828:	e34b      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d82a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d82e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d832:	430b      	orrs	r3, r1
 800d834:	d14e      	bne.n	800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d836:	4b12      	ldr	r3, [pc, #72]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d83c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d840:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d844:	2b00      	cmp	r3, #0
 800d846:	d103      	bne.n	800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d848:	f7fd fbb8 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800d84c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d84e:	e338      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d850:	4b0b      	ldr	r3, [pc, #44]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d85a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d85e:	d119      	bne.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d862:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d866:	d115      	bne.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d868:	4b05      	ldr	r3, [pc, #20]	@ (800d880 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d86a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d86e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d876:	d109      	bne.n	800d88c <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d878:	23fa      	movs	r3, #250	@ 0xfa
 800d87a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d87c:	e321      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d87e:	bf00      	nop
 800d880:	46020c00 	.word	0x46020c00
 800d884:	00f42400 	.word	0x00f42400
 800d888:	08011c40 	.word	0x08011c40
      }
      else
      {
        frequency = LSI_VALUE;
 800d88c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d890:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d892:	e316      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d894:	4ba8      	ldr	r3, [pc, #672]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d89c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8a0:	d106      	bne.n	800d8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d8a8:	d102      	bne.n	800d8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d8aa:	4ba4      	ldr	r3, [pc, #656]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d8ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8ae:	e308      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d8b0:	4ba1      	ldr	r3, [pc, #644]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8b6:	f003 0302 	and.w	r3, r3, #2
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	d107      	bne.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d8c4:	d103      	bne.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d8c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8cc:	e2f9      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8d2:	e2f6      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d8d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8d8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d8dc:	430b      	orrs	r3, r1
 800d8de:	d12d      	bne.n	800d93c <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d8e0:	4b95      	ldr	r3, [pc, #596]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d8e6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d8ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d8ec:	4b92      	ldr	r3, [pc, #584]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8f8:	d105      	bne.n	800d906 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d102      	bne.n	800d906 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d900:	4b8e      	ldr	r3, [pc, #568]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d902:	637b      	str	r3, [r7, #52]	@ 0x34
 800d904:	e2dd      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d90c:	d107      	bne.n	800d91e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d90e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d912:	4618      	mov	r0, r3
 800d914:	f7fe fb4c 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d91c:	e2d1      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d924:	d107      	bne.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d926:	f107 0318 	add.w	r3, r7, #24
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fc9a 	bl	800c264 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	637b      	str	r3, [r7, #52]	@ 0x34
 800d934:	e2c5      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d936:	2300      	movs	r3, #0
 800d938:	637b      	str	r3, [r7, #52]	@ 0x34
 800d93a:	e2c2      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d93c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d940:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d944:	430b      	orrs	r3, r1
 800d946:	d156      	bne.n	800d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d948:	4b7b      	ldr	r3, [pc, #492]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d94a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d94e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d952:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d956:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d95a:	d028      	beq.n	800d9ae <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d962:	d845      	bhi.n	800d9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d966:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d96a:	d013      	beq.n	800d994 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d972:	d83d      	bhi.n	800d9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d976:	2b00      	cmp	r3, #0
 800d978:	d004      	beq.n	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d980:	d004      	beq.n	800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d982:	e035      	b.n	800d9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d984:	f7fd fb2e 	bl	800afe4 <HAL_RCC_GetPCLK2Freq>
 800d988:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d98a:	e29a      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d98c:	f7fd f9fa 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800d990:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d992:	e296      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d994:	4b68      	ldr	r3, [pc, #416]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d99c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9a0:	d102      	bne.n	800d9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d9a2:	4b66      	ldr	r3, [pc, #408]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d9a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d9a6:	e28c      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9ac:	e289      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d9ae:	4b62      	ldr	r3, [pc, #392]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f003 0320 	and.w	r3, r3, #32
 800d9b6:	2b20      	cmp	r3, #32
 800d9b8:	d117      	bne.n	800d9ea <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d9ba:	4b5f      	ldr	r3, [pc, #380]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d005      	beq.n	800d9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d9c6:	4b5c      	ldr	r3, [pc, #368]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	0e1b      	lsrs	r3, r3, #24
 800d9cc:	f003 030f 	and.w	r3, r3, #15
 800d9d0:	e006      	b.n	800d9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d9d2:	4b59      	ldr	r3, [pc, #356]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d9d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9d8:	041b      	lsls	r3, r3, #16
 800d9da:	0e1b      	lsrs	r3, r3, #24
 800d9dc:	f003 030f 	and.w	r3, r3, #15
 800d9e0:	4a57      	ldr	r2, [pc, #348]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d9e8:	e26b      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9ee:	e268      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9f4:	e265      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d9f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9fa:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d9fe:	430b      	orrs	r3, r1
 800da00:	d156      	bne.n	800dab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800da02:	4b4d      	ldr	r3, [pc, #308]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800da08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800da0c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800da14:	d028      	beq.n	800da68 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800da16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800da1c:	d845      	bhi.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da24:	d013      	beq.n	800da4e <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800da26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da2c:	d83d      	bhi.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800da2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da30:	2b00      	cmp	r3, #0
 800da32:	d004      	beq.n	800da3e <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800da34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da3a:	d004      	beq.n	800da46 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800da3c:	e035      	b.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800da3e:	f7fd fabd 	bl	800afbc <HAL_RCC_GetPCLK1Freq>
 800da42:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da44:	e23d      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800da46:	f7fd f99d 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800da4a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da4c:	e239      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da4e:	4b3a      	ldr	r3, [pc, #232]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da5a:	d102      	bne.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800da5c:	4b37      	ldr	r3, [pc, #220]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800da5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800da60:	e22f      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da66:	e22c      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800da68:	4b33      	ldr	r3, [pc, #204]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f003 0320 	and.w	r3, r3, #32
 800da70:	2b20      	cmp	r3, #32
 800da72:	d117      	bne.n	800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da74:	4b30      	ldr	r3, [pc, #192]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d005      	beq.n	800da8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800da80:	4b2d      	ldr	r3, [pc, #180]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	0e1b      	lsrs	r3, r3, #24
 800da86:	f003 030f 	and.w	r3, r3, #15
 800da8a:	e006      	b.n	800da9a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800da8c:	4b2a      	ldr	r3, [pc, #168]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800da8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da92:	041b      	lsls	r3, r3, #16
 800da94:	0e1b      	lsrs	r3, r3, #24
 800da96:	f003 030f 	and.w	r3, r3, #15
 800da9a:	4a29      	ldr	r2, [pc, #164]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800da9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800daa2:	e20e      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800daa4:	2300      	movs	r3, #0
 800daa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daa8:	e20b      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800daaa:	2300      	movs	r3, #0
 800daac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daae:	e208      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800dab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dab4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800dab8:	430b      	orrs	r3, r1
 800daba:	d17c      	bne.n	800dbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800dabc:	4b1e      	ldr	r3, [pc, #120]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800dabe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dac2:	f003 0318 	and.w	r3, r3, #24
 800dac6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800dac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daca:	2b18      	cmp	r3, #24
 800dacc:	d870      	bhi.n	800dbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800dace:	a201      	add	r2, pc, #4	@ (adr r2, 800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800dad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad4:	0800db45 	.word	0x0800db45
 800dad8:	0800dbb1 	.word	0x0800dbb1
 800dadc:	0800dbb1 	.word	0x0800dbb1
 800dae0:	0800dbb1 	.word	0x0800dbb1
 800dae4:	0800dbb1 	.word	0x0800dbb1
 800dae8:	0800dbb1 	.word	0x0800dbb1
 800daec:	0800dbb1 	.word	0x0800dbb1
 800daf0:	0800dbb1 	.word	0x0800dbb1
 800daf4:	0800db4d 	.word	0x0800db4d
 800daf8:	0800dbb1 	.word	0x0800dbb1
 800dafc:	0800dbb1 	.word	0x0800dbb1
 800db00:	0800dbb1 	.word	0x0800dbb1
 800db04:	0800dbb1 	.word	0x0800dbb1
 800db08:	0800dbb1 	.word	0x0800dbb1
 800db0c:	0800dbb1 	.word	0x0800dbb1
 800db10:	0800dbb1 	.word	0x0800dbb1
 800db14:	0800db55 	.word	0x0800db55
 800db18:	0800dbb1 	.word	0x0800dbb1
 800db1c:	0800dbb1 	.word	0x0800dbb1
 800db20:	0800dbb1 	.word	0x0800dbb1
 800db24:	0800dbb1 	.word	0x0800dbb1
 800db28:	0800dbb1 	.word	0x0800dbb1
 800db2c:	0800dbb1 	.word	0x0800dbb1
 800db30:	0800dbb1 	.word	0x0800dbb1
 800db34:	0800db6f 	.word	0x0800db6f
 800db38:	46020c00 	.word	0x46020c00
 800db3c:	00f42400 	.word	0x00f42400
 800db40:	08011c40 	.word	0x08011c40
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800db44:	f7fd fa62 	bl	800b00c <HAL_RCC_GetPCLK3Freq>
 800db48:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800db4a:	e1ba      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800db4c:	f7fd f91a 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800db50:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800db52:	e1b6      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800db54:	4b9f      	ldr	r3, [pc, #636]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db60:	d102      	bne.n	800db68 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800db62:	4b9d      	ldr	r3, [pc, #628]	@ (800ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800db64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800db66:	e1ac      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800db68:	2300      	movs	r3, #0
 800db6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db6c:	e1a9      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800db6e:	4b99      	ldr	r3, [pc, #612]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 0320 	and.w	r3, r3, #32
 800db76:	2b20      	cmp	r3, #32
 800db78:	d117      	bne.n	800dbaa <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800db7a:	4b96      	ldr	r3, [pc, #600]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db82:	2b00      	cmp	r3, #0
 800db84:	d005      	beq.n	800db92 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800db86:	4b93      	ldr	r3, [pc, #588]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	0e1b      	lsrs	r3, r3, #24
 800db8c:	f003 030f 	and.w	r3, r3, #15
 800db90:	e006      	b.n	800dba0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800db92:	4b90      	ldr	r3, [pc, #576]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800db98:	041b      	lsls	r3, r3, #16
 800db9a:	0e1b      	lsrs	r3, r3, #24
 800db9c:	f003 030f 	and.w	r3, r3, #15
 800dba0:	4a8e      	ldr	r2, [pc, #568]	@ (800dddc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800dba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dba6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dba8:	e18b      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbae:	e188      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbb4:	e185      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800dbb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbba:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800dbbe:	430b      	orrs	r3, r1
 800dbc0:	d155      	bne.n	800dc6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800dbc2:	4b84      	ldr	r3, [pc, #528]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dbc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dbc8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800dbcc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dbd4:	d013      	beq.n	800dbfe <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800dbd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dbdc:	d844      	bhi.n	800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800dbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dbe4:	d013      	beq.n	800dc0e <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dbec:	d83c      	bhi.n	800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800dbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d014      	beq.n	800dc1e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800dbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dbfa:	d014      	beq.n	800dc26 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800dbfc:	e034      	b.n	800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbfe:	f107 0318 	add.w	r3, r7, #24
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fe fb2e 	bl	800c264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc0c:	e159      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fe f9cc 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800dc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc1c:	e151      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800dc1e:	f7fd f8b1 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800dc22:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dc24:	e14d      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dc26:	4b6b      	ldr	r3, [pc, #428]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f003 0320 	and.w	r3, r3, #32
 800dc2e:	2b20      	cmp	r3, #32
 800dc30:	d117      	bne.n	800dc62 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dc32:	4b68      	ldr	r3, [pc, #416]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d005      	beq.n	800dc4a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800dc3e:	4b65      	ldr	r3, [pc, #404]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	0e1b      	lsrs	r3, r3, #24
 800dc44:	f003 030f 	and.w	r3, r3, #15
 800dc48:	e006      	b.n	800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800dc4a:	4b62      	ldr	r3, [pc, #392]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dc50:	041b      	lsls	r3, r3, #16
 800dc52:	0e1b      	lsrs	r3, r3, #24
 800dc54:	f003 030f 	and.w	r3, r3, #15
 800dc58:	4a60      	ldr	r2, [pc, #384]	@ (800dddc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800dc5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dc60:	e12f      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dc62:	2300      	movs	r3, #0
 800dc64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc66:	e12c      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc6c:	e129      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800dc6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc72:	1e59      	subs	r1, r3, #1
 800dc74:	ea52 0301 	orrs.w	r3, r2, r1
 800dc78:	d13c      	bne.n	800dcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800dc7a:	4b56      	ldr	r3, [pc, #344]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dc7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dc80:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800dc84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dc8c:	d027      	beq.n	800dcde <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dc94:	d82b      	bhi.n	800dcee <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800dc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dc9c:	d017      	beq.n	800dcce <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dca4:	d823      	bhi.n	800dcee <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800dca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d004      	beq.n	800dcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800dcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dcb2:	d004      	beq.n	800dcbe <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800dcb4:	e01b      	b.n	800dcee <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800dcb6:	f7fd f865 	bl	800ad84 <HAL_RCC_GetSysClockFreq>
 800dcba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dcbc:	e101      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dcbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fe f974 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800dcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dccc:	e0f9      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcce:	f107 0318 	add.w	r3, r7, #24
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fe fac6 	bl	800c264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dcdc:	e0f1      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcde:	f107 030c 	add.w	r3, r7, #12
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe fc18 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dcec:	e0e9      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dcf2:	e0e6      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800dcf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcf8:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800dcfc:	430b      	orrs	r3, r1
 800dcfe:	d131      	bne.n	800dd64 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800dd00:	4b34      	ldr	r3, [pc, #208]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dd06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dd0a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800dd0c:	4b31      	ldr	r3, [pc, #196]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd12:	f003 0302 	and.w	r3, r3, #2
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	d106      	bne.n	800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d103      	bne.n	800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800dd20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd24:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd26:	e0cc      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800dd28:	4b2a      	ldr	r3, [pc, #168]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dd36:	d112      	bne.n	800dd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800dd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd3e:	d10e      	bne.n	800dd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dd40:	4b24      	ldr	r3, [pc, #144]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd4e:	d102      	bne.n	800dd56 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800dd50:	23fa      	movs	r3, #250	@ 0xfa
 800dd52:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dd54:	e0b5      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dd56:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dd5a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dd5c:	e0b1      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd62:	e0ae      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800dd64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd68:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800dd6c:	430b      	orrs	r3, r1
 800dd6e:	d13b      	bne.n	800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800dd70:	4b18      	ldr	r3, [pc, #96]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800dd7a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800dd7c:	4b15      	ldr	r3, [pc, #84]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dd84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd88:	d105      	bne.n	800dd96 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d102      	bne.n	800dd96 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800dd90:	4b13      	ldr	r3, [pc, #76]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800dd92:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd94:	e095      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800dd96:	4b0f      	ldr	r3, [pc, #60]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dd9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dda2:	d106      	bne.n	800ddb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800dda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddaa:	d102      	bne.n	800ddb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800ddac:	4b0d      	ldr	r3, [pc, #52]	@ (800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800ddae:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddb0:	e087      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800ddb2:	4b08      	ldr	r3, [pc, #32]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ddba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddbe:	d106      	bne.n	800ddce <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddc6:	d102      	bne.n	800ddce <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800ddc8:	4b03      	ldr	r3, [pc, #12]	@ (800ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800ddca:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddcc:	e079      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddd2:	e076      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ddd4:	46020c00 	.word	0x46020c00
 800ddd8:	00f42400 	.word	0x00f42400
 800dddc:	08011c40 	.word	0x08011c40
 800dde0:	02dc6c00 	.word	0x02dc6c00
 800dde4:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800dde8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddec:	1e99      	subs	r1, r3, #2
 800ddee:	ea52 0301 	orrs.w	r3, r2, r1
 800ddf2:	d120      	bne.n	800de36 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800ddf4:	4b35      	ldr	r3, [pc, #212]	@ (800decc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800ddf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ddfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ddfe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800de00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de02:	2b00      	cmp	r3, #0
 800de04:	d004      	beq.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800de06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800de0c:	d008      	beq.n	800de20 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800de0e:	e00f      	b.n	800de30 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de10:	f107 030c 	add.w	r3, r7, #12
 800de14:	4618      	mov	r0, r3
 800de16:	f7fe fb7f 	bl	800c518 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de1e:	e050      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de20:	f107 0318 	add.w	r3, r7, #24
 800de24:	4618      	mov	r0, r3
 800de26:	f7fe fa1d 	bl	800c264 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800de2a:	6a3b      	ldr	r3, [r7, #32]
 800de2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de2e:	e048      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800de30:	2300      	movs	r3, #0
 800de32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de34:	e045      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800de36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de3a:	f1a3 0108 	sub.w	r1, r3, #8
 800de3e:	ea52 0301 	orrs.w	r3, r2, r1
 800de42:	d13c      	bne.n	800debe <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800de44:	4b21      	ldr	r3, [pc, #132]	@ (800decc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800de46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800de4a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800de4e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800de50:	4b1e      	ldr	r3, [pc, #120]	@ (800decc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de5c:	d105      	bne.n	800de6a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800de5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de60:	2b00      	cmp	r3, #0
 800de62:	d102      	bne.n	800de6a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800de64:	4b1a      	ldr	r3, [pc, #104]	@ (800ded0 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800de66:	637b      	str	r3, [r7, #52]	@ 0x34
 800de68:	e02b      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800de6a:	4b18      	ldr	r3, [pc, #96]	@ (800decc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de76:	d106      	bne.n	800de86 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800de78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de7e:	d102      	bne.n	800de86 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800de80:	4b14      	ldr	r3, [pc, #80]	@ (800ded4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800de82:	637b      	str	r3, [r7, #52]	@ 0x34
 800de84:	e01d      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800de86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de8c:	d107      	bne.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800de8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de92:	4618      	mov	r0, r3
 800de94:	f7fe f88c 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800de98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800de9c:	e011      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800de9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800dea4:	d108      	bne.n	800deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fe f880 	bl	800bfb0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800deb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb2:	085b      	lsrs	r3, r3, #1
 800deb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800deb6:	e004      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800deb8:	2300      	movs	r3, #0
 800deba:	637b      	str	r3, [r7, #52]	@ 0x34
 800debc:	e001      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800debe:	2300      	movs	r3, #0
 800dec0:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800dec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3738      	adds	r7, #56	@ 0x38
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	46020c00 	.word	0x46020c00
 800ded0:	00f42400 	.word	0x00f42400
 800ded4:	007a1200 	.word	0x007a1200

0800ded8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dee0:	4b47      	ldr	r3, [pc, #284]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a46      	ldr	r2, [pc, #280]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800dee6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800deea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800deec:	f7f5 fb26 	bl	800353c <HAL_GetTick>
 800def0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800def2:	e008      	b.n	800df06 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800def4:	f7f5 fb22 	bl	800353c <HAL_GetTick>
 800def8:	4602      	mov	r2, r0
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	2b02      	cmp	r3, #2
 800df00:	d901      	bls.n	800df06 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800df02:	2303      	movs	r3, #3
 800df04:	e077      	b.n	800dff6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800df06:	4b3e      	ldr	r3, [pc, #248]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1f0      	bne.n	800def4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800df12:	4b3b      	ldr	r3, [pc, #236]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800df1a:	f023 0303 	bic.w	r3, r3, #3
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	6811      	ldr	r1, [r2, #0]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	6852      	ldr	r2, [r2, #4]
 800df26:	3a01      	subs	r2, #1
 800df28:	0212      	lsls	r2, r2, #8
 800df2a:	430a      	orrs	r2, r1
 800df2c:	4934      	ldr	r1, [pc, #208]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df2e:	4313      	orrs	r3, r2
 800df30:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800df32:	4b33      	ldr	r3, [pc, #204]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df36:	4b33      	ldr	r3, [pc, #204]	@ (800e004 <RCCEx_PLL2_Config+0x12c>)
 800df38:	4013      	ands	r3, r2
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	6892      	ldr	r2, [r2, #8]
 800df3e:	3a01      	subs	r2, #1
 800df40:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	68d2      	ldr	r2, [r2, #12]
 800df48:	3a01      	subs	r2, #1
 800df4a:	0252      	lsls	r2, r2, #9
 800df4c:	b292      	uxth	r2, r2
 800df4e:	4311      	orrs	r1, r2
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	6912      	ldr	r2, [r2, #16]
 800df54:	3a01      	subs	r2, #1
 800df56:	0412      	lsls	r2, r2, #16
 800df58:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800df5c:	4311      	orrs	r1, r2
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	6952      	ldr	r2, [r2, #20]
 800df62:	3a01      	subs	r2, #1
 800df64:	0612      	lsls	r2, r2, #24
 800df66:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800df6a:	430a      	orrs	r2, r1
 800df6c:	4924      	ldr	r1, [pc, #144]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df6e:	4313      	orrs	r3, r2
 800df70:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800df72:	4b23      	ldr	r3, [pc, #140]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df76:	f023 020c 	bic.w	r2, r3, #12
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	699b      	ldr	r3, [r3, #24]
 800df7e:	4920      	ldr	r1, [pc, #128]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df80:	4313      	orrs	r3, r2
 800df82:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800df84:	4b1e      	ldr	r3, [pc, #120]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a1b      	ldr	r3, [r3, #32]
 800df8c:	491c      	ldr	r1, [pc, #112]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df8e:	4313      	orrs	r3, r2
 800df90:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800df92:	4b1b      	ldr	r3, [pc, #108]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df96:	4a1a      	ldr	r2, [pc, #104]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800df98:	f023 0310 	bic.w	r3, r3, #16
 800df9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800df9e:	4b18      	ldr	r3, [pc, #96]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800dfa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dfa6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	69d2      	ldr	r2, [r2, #28]
 800dfae:	00d2      	lsls	r2, r2, #3
 800dfb0:	4913      	ldr	r1, [pc, #76]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800dfb6:	4b12      	ldr	r3, [pc, #72]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800dfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfba:	4a11      	ldr	r2, [pc, #68]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800dfbc:	f043 0310 	orr.w	r3, r3, #16
 800dfc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dfc2:	4b0f      	ldr	r3, [pc, #60]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a0e      	ldr	r2, [pc, #56]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800dfc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dfcc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dfce:	f7f5 fab5 	bl	800353c <HAL_GetTick>
 800dfd2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dfd4:	e008      	b.n	800dfe8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dfd6:	f7f5 fab1 	bl	800353c <HAL_GetTick>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d901      	bls.n	800dfe8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	e006      	b.n	800dff6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dfe8:	4b05      	ldr	r3, [pc, #20]	@ (800e000 <RCCEx_PLL2_Config+0x128>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d0f0      	beq.n	800dfd6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800dff4:	2300      	movs	r3, #0

}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3710      	adds	r7, #16
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	46020c00 	.word	0x46020c00
 800e004:	80800000 	.word	0x80800000

0800e008 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800e010:	4b47      	ldr	r3, [pc, #284]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a46      	ldr	r2, [pc, #280]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e01a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e01c:	f7f5 fa8e 	bl	800353c <HAL_GetTick>
 800e020:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e022:	e008      	b.n	800e036 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e024:	f7f5 fa8a 	bl	800353c <HAL_GetTick>
 800e028:	4602      	mov	r2, r0
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d901      	bls.n	800e036 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e032:	2303      	movs	r3, #3
 800e034:	e077      	b.n	800e126 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e036:	4b3e      	ldr	r3, [pc, #248]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1f0      	bne.n	800e024 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800e042:	4b3b      	ldr	r3, [pc, #236]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e046:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e04a:	f023 0303 	bic.w	r3, r3, #3
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	6811      	ldr	r1, [r2, #0]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	6852      	ldr	r2, [r2, #4]
 800e056:	3a01      	subs	r2, #1
 800e058:	0212      	lsls	r2, r2, #8
 800e05a:	430a      	orrs	r2, r1
 800e05c:	4934      	ldr	r1, [pc, #208]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e05e:	4313      	orrs	r3, r2
 800e060:	630b      	str	r3, [r1, #48]	@ 0x30
 800e062:	4b33      	ldr	r3, [pc, #204]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e066:	4b33      	ldr	r3, [pc, #204]	@ (800e134 <RCCEx_PLL3_Config+0x12c>)
 800e068:	4013      	ands	r3, r2
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	6892      	ldr	r2, [r2, #8]
 800e06e:	3a01      	subs	r2, #1
 800e070:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	68d2      	ldr	r2, [r2, #12]
 800e078:	3a01      	subs	r2, #1
 800e07a:	0252      	lsls	r2, r2, #9
 800e07c:	b292      	uxth	r2, r2
 800e07e:	4311      	orrs	r1, r2
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	6912      	ldr	r2, [r2, #16]
 800e084:	3a01      	subs	r2, #1
 800e086:	0412      	lsls	r2, r2, #16
 800e088:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e08c:	4311      	orrs	r1, r2
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	6952      	ldr	r2, [r2, #20]
 800e092:	3a01      	subs	r2, #1
 800e094:	0612      	lsls	r2, r2, #24
 800e096:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e09a:	430a      	orrs	r2, r1
 800e09c:	4924      	ldr	r1, [pc, #144]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800e0a2:	4b23      	ldr	r3, [pc, #140]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0a6:	f023 020c 	bic.w	r2, r3, #12
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	699b      	ldr	r3, [r3, #24]
 800e0ae:	4920      	ldr	r1, [pc, #128]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800e0b4:	4b1e      	ldr	r3, [pc, #120]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a1b      	ldr	r3, [r3, #32]
 800e0bc:	491c      	ldr	r1, [pc, #112]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800e0c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0c6:	4a1a      	ldr	r2, [pc, #104]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0c8:	f023 0310 	bic.w	r3, r3, #16
 800e0cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e0ce:	4b18      	ldr	r3, [pc, #96]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e0d6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	69d2      	ldr	r2, [r2, #28]
 800e0de:	00d2      	lsls	r2, r2, #3
 800e0e0:	4913      	ldr	r1, [pc, #76]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800e0e6:	4b12      	ldr	r3, [pc, #72]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0ea:	4a11      	ldr	r2, [pc, #68]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0ec:	f043 0310 	orr.w	r3, r3, #16
 800e0f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800e0f2:	4b0f      	ldr	r3, [pc, #60]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a0e      	ldr	r2, [pc, #56]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e0f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e0fc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e0fe:	f7f5 fa1d 	bl	800353c <HAL_GetTick>
 800e102:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e104:	e008      	b.n	800e118 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e106:	f7f5 fa19 	bl	800353c <HAL_GetTick>
 800e10a:	4602      	mov	r2, r0
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	2b02      	cmp	r3, #2
 800e112:	d901      	bls.n	800e118 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e114:	2303      	movs	r3, #3
 800e116:	e006      	b.n	800e126 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e118:	4b05      	ldr	r3, [pc, #20]	@ (800e130 <RCCEx_PLL3_Config+0x128>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e120:	2b00      	cmp	r3, #0
 800e122:	d0f0      	beq.n	800e106 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	46020c00 	.word	0x46020c00
 800e134:	80800000 	.word	0x80800000

0800e138 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d071      	beq.n	800e22e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7f4 fc92 	bl	8002a88 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2202      	movs	r2, #2
 800e168:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e16c:	4b32      	ldr	r3, [pc, #200]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	f003 0310 	and.w	r3, r3, #16
 800e174:	2b10      	cmp	r3, #16
 800e176:	d051      	beq.n	800e21c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e178:	4b2f      	ldr	r3, [pc, #188]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e17a:	22ca      	movs	r2, #202	@ 0xca
 800e17c:	625a      	str	r2, [r3, #36]	@ 0x24
 800e17e:	4b2e      	ldr	r3, [pc, #184]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e180:	2253      	movs	r2, #83	@ 0x53
 800e182:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f88b 	bl	800e2a0 <RTC_EnterInitMode>
 800e18a:	4603      	mov	r3, r0
 800e18c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d13f      	bne.n	800e214 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800e194:	4b28      	ldr	r3, [pc, #160]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e196:	699b      	ldr	r3, [r3, #24]
 800e198:	4a27      	ldr	r2, [pc, #156]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e19a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800e19e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1a2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e1a4:	4b24      	ldr	r3, [pc, #144]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e1a6:	699a      	ldr	r2, [r3, #24]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6859      	ldr	r1, [r3, #4]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	4319      	orrs	r1, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	430b      	orrs	r3, r1
 800e1b8:	491f      	ldr	r1, [pc, #124]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68da      	ldr	r2, [r3, #12]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	041b      	lsls	r3, r3, #16
 800e1c8:	491b      	ldr	r1, [pc, #108]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800e1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1de:	430b      	orrs	r3, r1
 800e1e0:	4915      	ldr	r1, [pc, #84]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f896 	bl	800e318 <RTC_ExitInitMode>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800e1f0:	7bfb      	ldrb	r3, [r7, #15]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10e      	bne.n	800e214 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800e1f6:	4b10      	ldr	r3, [pc, #64]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a19      	ldr	r1, [r3, #32]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	69db      	ldr	r3, [r3, #28]
 800e206:	4319      	orrs	r1, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	695b      	ldr	r3, [r3, #20]
 800e20c:	430b      	orrs	r3, r1
 800e20e:	490a      	ldr	r1, [pc, #40]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e210:	4313      	orrs	r3, r2
 800e212:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e214:	4b08      	ldr	r3, [pc, #32]	@ (800e238 <HAL_RTC_Init+0x100>)
 800e216:	22ff      	movs	r2, #255	@ 0xff
 800e218:	625a      	str	r2, [r3, #36]	@ 0x24
 800e21a:	e001      	b.n	800e220 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800e21c:	2300      	movs	r3, #0
 800e21e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e220:	7bfb      	ldrb	r3, [r7, #15]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d103      	bne.n	800e22e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e230:	4618      	mov	r0, r3
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	46007800 	.word	0x46007800

0800e23c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800e244:	4b15      	ldr	r3, [pc, #84]	@ (800e29c <HAL_RTC_WaitForSynchro+0x60>)
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	4a14      	ldr	r2, [pc, #80]	@ (800e29c <HAL_RTC_WaitForSynchro+0x60>)
 800e24a:	f023 0320 	bic.w	r3, r3, #32
 800e24e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800e250:	f7f5 f974 	bl	800353c <HAL_GetTick>
 800e254:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e256:	e013      	b.n	800e280 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e258:	f7f5 f970 	bl	800353c <HAL_GetTick>
 800e25c:	4602      	mov	r2, r0
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e266:	d90b      	bls.n	800e280 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e268:	4b0c      	ldr	r3, [pc, #48]	@ (800e29c <HAL_RTC_WaitForSynchro+0x60>)
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	f003 0320 	and.w	r3, r3, #32
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10c      	bne.n	800e28e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2203      	movs	r2, #3
 800e278:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800e27c:	2303      	movs	r3, #3
 800e27e:	e008      	b.n	800e292 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e280:	4b06      	ldr	r3, [pc, #24]	@ (800e29c <HAL_RTC_WaitForSynchro+0x60>)
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	f003 0320 	and.w	r3, r3, #32
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d0e5      	beq.n	800e258 <HAL_RTC_WaitForSynchro+0x1c>
 800e28c:	e000      	b.n	800e290 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800e28e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	46007800 	.word	0x46007800

0800e2a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e2ac:	4b19      	ldr	r3, [pc, #100]	@ (800e314 <RTC_EnterInitMode+0x74>)
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d128      	bne.n	800e30a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e2b8:	4b16      	ldr	r3, [pc, #88]	@ (800e314 <RTC_EnterInitMode+0x74>)
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	4a15      	ldr	r2, [pc, #84]	@ (800e314 <RTC_EnterInitMode+0x74>)
 800e2be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2c2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e2c4:	f7f5 f93a 	bl	800353c <HAL_GetTick>
 800e2c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e2ca:	e013      	b.n	800e2f4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e2cc:	f7f5 f936 	bl	800353c <HAL_GetTick>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e2da:	d90b      	bls.n	800e2f4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e2dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e314 <RTC_EnterInitMode+0x74>)
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d10f      	bne.n	800e308 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e2e8:	2303      	movs	r3, #3
 800e2ea:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2203      	movs	r2, #3
 800e2f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e2f4:	4b07      	ldr	r3, [pc, #28]	@ (800e314 <RTC_EnterInitMode+0x74>)
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d104      	bne.n	800e30a <RTC_EnterInitMode+0x6a>
 800e300:	7bfb      	ldrb	r3, [r7, #15]
 800e302:	2b03      	cmp	r3, #3
 800e304:	d1e2      	bne.n	800e2cc <RTC_EnterInitMode+0x2c>
 800e306:	e000      	b.n	800e30a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e308:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	46007800 	.word	0x46007800

0800e318 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e324:	4b1a      	ldr	r3, [pc, #104]	@ (800e390 <RTC_ExitInitMode+0x78>)
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	4a19      	ldr	r2, [pc, #100]	@ (800e390 <RTC_ExitInitMode+0x78>)
 800e32a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e32e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e330:	4b17      	ldr	r3, [pc, #92]	@ (800e390 <RTC_ExitInitMode+0x78>)
 800e332:	699b      	ldr	r3, [r3, #24]
 800e334:	f003 0320 	and.w	r3, r3, #32
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10c      	bne.n	800e356 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7ff ff7d 	bl	800e23c <HAL_RTC_WaitForSynchro>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d01e      	beq.n	800e386 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2203      	movs	r2, #3
 800e34c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e350:	2303      	movs	r3, #3
 800e352:	73fb      	strb	r3, [r7, #15]
 800e354:	e017      	b.n	800e386 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e356:	4b0e      	ldr	r3, [pc, #56]	@ (800e390 <RTC_ExitInitMode+0x78>)
 800e358:	699b      	ldr	r3, [r3, #24]
 800e35a:	4a0d      	ldr	r2, [pc, #52]	@ (800e390 <RTC_ExitInitMode+0x78>)
 800e35c:	f023 0320 	bic.w	r3, r3, #32
 800e360:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7ff ff6a 	bl	800e23c <HAL_RTC_WaitForSynchro>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d005      	beq.n	800e37a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2203      	movs	r2, #3
 800e372:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e376:	2303      	movs	r3, #3
 800e378:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e37a:	4b05      	ldr	r3, [pc, #20]	@ (800e390 <RTC_ExitInitMode+0x78>)
 800e37c:	699b      	ldr	r3, [r3, #24]
 800e37e:	4a04      	ldr	r2, [pc, #16]	@ (800e390 <RTC_ExitInitMode+0x78>)
 800e380:	f043 0320 	orr.w	r3, r3, #32
 800e384:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e386:	7bfb      	ldrb	r3, [r7, #15]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	46007800 	.word	0x46007800

0800e394 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	4910      	ldr	r1, [pc, #64]	@ (800e3e8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	689a      	ldr	r2, [r3, #8]
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	431a      	orrs	r2, r3
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	490c      	ldr	r1, [pc, #48]	@ (800e3ec <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800e3ec <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e3c2:	6a1b      	ldr	r3, [r3, #32]
 800e3c4:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	6919      	ldr	r1, [r3, #16]
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	695b      	ldr	r3, [r3, #20]
 800e3d0:	041b      	lsls	r3, r3, #16
 800e3d2:	430b      	orrs	r3, r1
 800e3d4:	4905      	ldr	r1, [pc, #20]	@ (800e3ec <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e3da:	2300      	movs	r3, #0
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr
 800e3e8:	46007800 	.word	0x46007800
 800e3ec:	46007c00 	.word	0x46007c00

0800e3f0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	607a      	str	r2, [r7, #4]
 800e3fc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	2b02      	cmp	r3, #2
 800e402:	d904      	bls.n	800e40e <HAL_SAI_InitProtocol+0x1e>
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	3b03      	subs	r3, #3
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d812      	bhi.n	800e432 <HAL_SAI_InitProtocol+0x42>
 800e40c:	e008      	b.n	800e420 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	68b9      	ldr	r1, [r7, #8]
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	f000 fb21 	bl	800ea5c <SAI_InitI2S>
 800e41a:	4603      	mov	r3, r0
 800e41c:	75fb      	strb	r3, [r7, #23]
      break;
 800e41e:	e00b      	b.n	800e438 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	68b9      	ldr	r1, [r7, #8]
 800e426:	68f8      	ldr	r0, [r7, #12]
 800e428:	f000 fbca 	bl	800ebc0 <SAI_InitPCM>
 800e42c:	4603      	mov	r3, r0
 800e42e:	75fb      	strb	r3, [r7, #23]
      break;
 800e430:	e002      	b.n	800e438 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e432:	2301      	movs	r3, #1
 800e434:	75fb      	strb	r3, [r7, #23]
      break;
 800e436:	bf00      	nop
  }

  if (status == HAL_OK)
 800e438:	7dfb      	ldrb	r3, [r7, #23]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d104      	bne.n	800e448 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f000 f808 	bl	800e454 <HAL_SAI_Init>
 800e444:	4603      	mov	r3, r0
 800e446:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e448:	7dfb      	ldrb	r3, [r7, #23]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3718      	adds	r7, #24
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
	...

0800e454 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b08a      	sub	sp, #40	@ 0x28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d101      	bne.n	800e466 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e462:	2301      	movs	r3, #1
 800e464:	e1ce      	b.n	800e804 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d10e      	bne.n	800e48e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a83      	ldr	r2, [pc, #524]	@ (800e684 <HAL_SAI_Init+0x230>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d107      	bne.n	800e48a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d103      	bne.n	800e48a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e48a:	2301      	movs	r3, #1
 800e48c:	e1ba      	b.n	800e804 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e494:	b2db      	uxtb	r3, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d106      	bne.n	800e4a8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7f4 fcc2 	bl	8002e2c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 fc43 	bl	800ed34 <SAI_Disable>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d001      	beq.n	800e4b8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	e1a5      	b.n	800e804 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d00c      	beq.n	800e4e2 <HAL_SAI_Init+0x8e>
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d80d      	bhi.n	800e4e8 <HAL_SAI_Init+0x94>
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <HAL_SAI_Init+0x82>
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d003      	beq.n	800e4dc <HAL_SAI_Init+0x88>
 800e4d4:	e008      	b.n	800e4e8 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e4da:	e008      	b.n	800e4ee <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e4dc:	2310      	movs	r3, #16
 800e4de:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e4e0:	e005      	b.n	800e4ee <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e4e2:	2320      	movs	r3, #32
 800e4e4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e4e6:	e002      	b.n	800e4ee <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e4ec:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	2b03      	cmp	r3, #3
 800e4f4:	d81d      	bhi.n	800e532 <HAL_SAI_Init+0xde>
 800e4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4fc <HAL_SAI_Init+0xa8>)
 800e4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fc:	0800e50d 	.word	0x0800e50d
 800e500:	0800e513 	.word	0x0800e513
 800e504:	0800e51b 	.word	0x0800e51b
 800e508:	0800e523 	.word	0x0800e523
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e50c:	2300      	movs	r3, #0
 800e50e:	61fb      	str	r3, [r7, #28]
      break;
 800e510:	e012      	b.n	800e538 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e516:	61fb      	str	r3, [r7, #28]
      break;
 800e518:	e00e      	b.n	800e538 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e51a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e51e:	61fb      	str	r3, [r7, #28]
      break;
 800e520:	e00a      	b.n	800e538 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e522:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e526:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52a:	f043 0301 	orr.w	r3, r3, #1
 800e52e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e530:	e002      	b.n	800e538 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	61fb      	str	r3, [r7, #28]
      break;
 800e536:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a51      	ldr	r2, [pc, #324]	@ (800e684 <HAL_SAI_Init+0x230>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d004      	beq.n	800e54c <HAL_SAI_Init+0xf8>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a50      	ldr	r2, [pc, #320]	@ (800e688 <HAL_SAI_Init+0x234>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d103      	bne.n	800e554 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e54c:	4a4f      	ldr	r2, [pc, #316]	@ (800e68c <HAL_SAI_Init+0x238>)
 800e54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e550:	6013      	str	r3, [r2, #0]
 800e552:	e002      	b.n	800e55a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e554:	4a4e      	ldr	r2, [pc, #312]	@ (800e690 <HAL_SAI_Init+0x23c>)
 800e556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e558:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6a1b      	ldr	r3, [r3, #32]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d077      	beq.n	800e652 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	4a47      	ldr	r2, [pc, #284]	@ (800e684 <HAL_SAI_Init+0x230>)
 800e568:	4293      	cmp	r3, r2
 800e56a:	d004      	beq.n	800e576 <HAL_SAI_Init+0x122>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a45      	ldr	r2, [pc, #276]	@ (800e688 <HAL_SAI_Init+0x234>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d107      	bne.n	800e586 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e576:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e57a:	f04f 0100 	mov.w	r1, #0
 800e57e:	f7fe f925 	bl	800c7cc <HAL_RCCEx_GetPeriphCLKFreq>
 800e582:	61b8      	str	r0, [r7, #24]
 800e584:	e006      	b.n	800e594 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e586:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e58a:	f04f 0100 	mov.w	r1, #0
 800e58e:	f7fe f91d 	bl	800c7cc <HAL_RCCEx_GetPeriphCLKFreq>
 800e592:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	699b      	ldr	r3, [r3, #24]
 800e598:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e59c:	d120      	bne.n	800e5e0 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5a2:	2b04      	cmp	r3, #4
 800e5a4:	d102      	bne.n	800e5ac <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e5a6:	2340      	movs	r3, #64	@ 0x40
 800e5a8:	613b      	str	r3, [r7, #16]
 800e5aa:	e00a      	b.n	800e5c2 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5b0:	2b08      	cmp	r3, #8
 800e5b2:	d103      	bne.n	800e5bc <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e5b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5b8:	613b      	str	r3, [r7, #16]
 800e5ba:	e002      	b.n	800e5c2 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5c0:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e5c2:	69ba      	ldr	r2, [r7, #24]
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	4413      	add	r3, r2
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6a1b      	ldr	r3, [r3, #32]
 800e5d2:	693a      	ldr	r2, [r7, #16]
 800e5d4:	fb02 f303 	mul.w	r3, r2, r3
 800e5d8:	fbb1 f3f3 	udiv	r3, r1, r3
 800e5dc:	617b      	str	r3, [r7, #20]
 800e5de:	e017      	b.n	800e610 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e5e8:	d101      	bne.n	800e5ee <HAL_SAI_Init+0x19a>
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	e000      	b.n	800e5f0 <HAL_SAI_Init+0x19c>
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e5f2:	69ba      	ldr	r2, [r7, #24]
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	4413      	add	r3, r2
 800e5fa:	005b      	lsls	r3, r3, #1
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6a1b      	ldr	r3, [r3, #32]
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	fb02 f303 	mul.w	r3, r2, r3
 800e608:	021b      	lsls	r3, r3, #8
 800e60a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e60e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	4a20      	ldr	r2, [pc, #128]	@ (800e694 <HAL_SAI_Init+0x240>)
 800e614:	fba2 2303 	umull	r2, r3, r2, r3
 800e618:	08da      	lsrs	r2, r3, #3
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e61e:	6979      	ldr	r1, [r7, #20]
 800e620:	4b1c      	ldr	r3, [pc, #112]	@ (800e694 <HAL_SAI_Init+0x240>)
 800e622:	fba3 2301 	umull	r2, r3, r3, r1
 800e626:	08da      	lsrs	r2, r3, #3
 800e628:	4613      	mov	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	1aca      	subs	r2, r1, r3
 800e632:	2a08      	cmp	r2, #8
 800e634:	d904      	bls.n	800e640 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e63a:	1c5a      	adds	r2, r3, #1
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e644:	2b04      	cmp	r3, #4
 800e646:	d104      	bne.n	800e652 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e64c:	085a      	lsrs	r2, r3, #1
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d003      	beq.n	800e662 <HAL_SAI_Init+0x20e>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d109      	bne.n	800e676 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e666:	2b01      	cmp	r3, #1
 800e668:	d101      	bne.n	800e66e <HAL_SAI_Init+0x21a>
 800e66a:	2300      	movs	r3, #0
 800e66c:	e001      	b.n	800e672 <HAL_SAI_Init+0x21e>
 800e66e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e672:	623b      	str	r3, [r7, #32]
 800e674:	e012      	b.n	800e69c <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d10c      	bne.n	800e698 <HAL_SAI_Init+0x244>
 800e67e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e682:	e00a      	b.n	800e69a <HAL_SAI_Init+0x246>
 800e684:	40015404 	.word	0x40015404
 800e688:	40015424 	.word	0x40015424
 800e68c:	40015400 	.word	0x40015400
 800e690:	40015800 	.word	0x40015800
 800e694:	cccccccd 	.word	0xcccccccd
 800e698:	2300      	movs	r3, #0
 800e69a:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	6819      	ldr	r1, [r3, #0]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	4b59      	ldr	r3, [pc, #356]	@ (800e80c <HAL_SAI_Init+0x3b8>)
 800e6a8:	400b      	ands	r3, r1
 800e6aa:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6819      	ldr	r1, [r3, #0]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	685a      	ldr	r2, [r3, #4]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6ba:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e6c0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e6c6:	431a      	orrs	r2, r3
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e6d4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	695b      	ldr	r3, [r3, #20]
 800e6da:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e6e0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6e6:	051b      	lsls	r3, r3, #20
 800e6e8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e6ee:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	430a      	orrs	r2, r1
 800e6fc:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	6812      	ldr	r2, [r2, #0]
 800e708:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e70c:	f023 030f 	bic.w	r3, r3, #15
 800e710:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6859      	ldr	r1, [r3, #4]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	69da      	ldr	r2, [r3, #28]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e720:	431a      	orrs	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e726:	431a      	orrs	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	430a      	orrs	r2, r1
 800e72e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	6899      	ldr	r1, [r3, #8]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	4b35      	ldr	r3, [pc, #212]	@ (800e810 <HAL_SAI_Init+0x3bc>)
 800e73c:	400b      	ands	r3, r1
 800e73e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	6899      	ldr	r1, [r3, #8]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e74a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e750:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e756:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e75c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e762:	3b01      	subs	r3, #1
 800e764:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e766:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	430a      	orrs	r2, r1
 800e76e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	68d9      	ldr	r1, [r3, #12]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e77e:	400b      	ands	r3, r1
 800e780:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	68d9      	ldr	r1, [r3, #12]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e790:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e796:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e798:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	021b      	lsls	r3, r3, #8
 800e7a2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	430a      	orrs	r2, r1
 800e7aa:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a18      	ldr	r2, [pc, #96]	@ (800e814 <HAL_SAI_Init+0x3c0>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d119      	bne.n	800e7ea <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e7b6:	4b18      	ldr	r3, [pc, #96]	@ (800e818 <HAL_SAI_Init+0x3c4>)
 800e7b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7ba:	4a17      	ldr	r2, [pc, #92]	@ (800e818 <HAL_SAI_Init+0x3c4>)
 800e7bc:	f023 0301 	bic.w	r3, r3, #1
 800e7c0:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d10e      	bne.n	800e7ea <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7d4:	3b01      	subs	r3, #1
 800e7d6:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e7d8:	490f      	ldr	r1, [pc, #60]	@ (800e818 <HAL_SAI_Init+0x3c4>)
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e7de:	4b0e      	ldr	r3, [pc, #56]	@ (800e818 <HAL_SAI_Init+0x3c4>)
 800e7e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7e2:	4a0d      	ldr	r2, [pc, #52]	@ (800e818 <HAL_SAI_Init+0x3c4>)
 800e7e4:	f043 0301 	orr.w	r3, r3, #1
 800e7e8:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3728      	adds	r7, #40	@ 0x28
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	f005c010 	.word	0xf005c010
 800e810:	fff88000 	.word	0xfff88000
 800e814:	40015404 	.word	0x40015404
 800e818:	40015400 	.word	0x40015400

0800e81c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b088      	sub	sp, #32
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	4613      	mov	r3, r2
 800e828:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e82a:	f7f4 fe87 	bl	800353c <HAL_GetTick>
 800e82e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d002      	beq.n	800e83c <HAL_SAI_Transmit_DMA+0x20>
 800e836:	88fb      	ldrh	r3, [r7, #6]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d101      	bne.n	800e840 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e83c:	2301      	movs	r3, #1
 800e83e:	e0e4      	b.n	800ea0a <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e846:	b2db      	uxtb	r3, r3
 800e848:	2b01      	cmp	r3, #1
 800e84a:	f040 80dd 	bne.w	800ea08 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e854:	2b01      	cmp	r3, #1
 800e856:	d101      	bne.n	800e85c <HAL_SAI_Transmit_DMA+0x40>
 800e858:	2302      	movs	r3, #2
 800e85a:	e0d6      	b.n	800ea0a <HAL_SAI_Transmit_DMA+0x1ee>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2201      	movs	r2, #1
 800e860:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	68ba      	ldr	r2, [r7, #8]
 800e868:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	88fa      	ldrh	r2, [r7, #6]
 800e86e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	88fa      	ldrh	r2, [r7, #6]
 800e876:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2200      	movs	r2, #0
 800e87e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2212      	movs	r2, #18
 800e886:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e890:	4a60      	ldr	r2, [pc, #384]	@ (800ea14 <HAL_SAI_Transmit_DMA+0x1f8>)
 800e892:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e89a:	4a5f      	ldr	r2, [pc, #380]	@ (800ea18 <HAL_SAI_Transmit_DMA+0x1fc>)
 800e89c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8a4:	4a5d      	ldr	r2, [pc, #372]	@ (800ea1c <HAL_SAI_Transmit_DMA+0x200>)
 800e8a6:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8b6:	2b40      	cmp	r3, #64	@ 0x40
 800e8b8:	d106      	bne.n	800e8c8 <HAL_SAI_Transmit_DMA+0xac>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d102      	bne.n	800e8c8 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800e8c2:	88fb      	ldrh	r3, [r7, #6]
 800e8c4:	61bb      	str	r3, [r7, #24]
 800e8c6:	e00a      	b.n	800e8de <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8cc:	2b80      	cmp	r3, #128	@ 0x80
 800e8ce:	d803      	bhi.n	800e8d8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e8d0:	88fb      	ldrh	r3, [r7, #6]
 800e8d2:	005b      	lsls	r3, r3, #1
 800e8d4:	61bb      	str	r3, [r7, #24]
 800e8d6:	e002      	b.n	800e8de <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e8d8:	88fb      	ldrh	r3, [r7, #6]
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d02d      	beq.n	800e94a <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d021      	beq.n	800e93e <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	69ba      	ldr	r2, [r7, #24]
 800e906:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f103 021c 	add.w	r2, r3, #28
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e932:	4618      	mov	r0, r3
 800e934:	f7f8 fa8c 	bl	8006e50 <HAL_DMAEx_List_Start_IT>
 800e938:	4603      	mov	r3, r0
 800e93a:	77fb      	strb	r3, [r7, #31]
 800e93c:	e014      	b.n	800e968 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e946:	2301      	movs	r3, #1
 800e948:	e05f      	b.n	800ea0a <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e954:	4619      	mov	r1, r3
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	331c      	adds	r3, #28
 800e95c:	461a      	mov	r2, r3
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	f7f7 fae4 	bl	8005f2c <HAL_DMA_Start_IT>
 800e964:	4603      	mov	r3, r0
 800e966:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800e968:	7ffb      	ldrb	r3, [r7, #31]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d005      	beq.n	800e97a <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	e047      	b.n	800ea0a <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e97a:	2100      	movs	r1, #0
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f000 f9a1 	bl	800ecc4 <SAI_InterruptFlag>
 800e982:	4601      	mov	r1, r0
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	691a      	ldr	r2, [r3, #16]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	430a      	orrs	r2, r1
 800e990:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e9a0:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e9a2:	e015      	b.n	800e9d0 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e9a4:	f7f4 fdca 	bl	800353c <HAL_GetTick>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	1ad3      	subs	r3, r2, r3
 800e9ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e9b2:	d90d      	bls.n	800e9d0 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e9ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800e9cc:	2303      	movs	r3, #3
 800e9ce:	e01c      	b.n	800ea0a <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	695b      	ldr	r3, [r3, #20]
 800e9d6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d0e2      	beq.n	800e9a4 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d107      	bne.n	800e9fc <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e9fa:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800ea04:	2300      	movs	r3, #0
 800ea06:	e000      	b.n	800ea0a <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800ea08:	2302      	movs	r3, #2
  }
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3720      	adds	r7, #32
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	0800ee07 	.word	0x0800ee07
 800ea18:	0800eda9 	.word	0x0800eda9
 800ea1c:	0800ee23 	.word	0x0800ee23

0800ea20 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ea3c:	bf00      	nop
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800ea50:	bf00      	nop
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b087      	sub	sp, #28
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	607a      	str	r2, [r7, #4]
 800ea68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2200      	movs	r2, #0
 800ea72:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2200      	movs	r2, #0
 800ea78:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d003      	beq.n	800ea8a <SAI_InitI2S+0x2e>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d103      	bne.n	800ea92 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ea90:	e002      	b.n	800ea98 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2201      	movs	r2, #1
 800ea96:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ea9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eaa6:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	f003 0301 	and.w	r3, r3, #1
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800eabe:	2301      	movs	r3, #1
 800eac0:	e077      	b.n	800ebb2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d107      	bne.n	800ead8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2200      	movs	r2, #0
 800eacc:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ead4:	665a      	str	r2, [r3, #100]	@ 0x64
 800ead6:	e006      	b.n	800eae6 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800eade:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b03      	cmp	r3, #3
 800eaea:	d84f      	bhi.n	800eb8c <SAI_InitI2S+0x130>
 800eaec:	a201      	add	r2, pc, #4	@ (adr r2, 800eaf4 <SAI_InitI2S+0x98>)
 800eaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf2:	bf00      	nop
 800eaf4:	0800eb05 	.word	0x0800eb05
 800eaf8:	0800eb27 	.word	0x0800eb27
 800eafc:	0800eb49 	.word	0x0800eb49
 800eb00:	0800eb6b 	.word	0x0800eb6b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2280      	movs	r2, #128	@ 0x80
 800eb08:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	085b      	lsrs	r3, r3, #1
 800eb0e:	015a      	lsls	r2, r3, #5
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	085b      	lsrs	r3, r3, #1
 800eb18:	011a      	lsls	r2, r3, #4
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2240      	movs	r2, #64	@ 0x40
 800eb22:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb24:	e035      	b.n	800eb92 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2280      	movs	r2, #128	@ 0x80
 800eb2a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	085b      	lsrs	r3, r3, #1
 800eb30:	019a      	lsls	r2, r3, #6
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	085b      	lsrs	r3, r3, #1
 800eb3a:	015a      	lsls	r2, r3, #5
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2280      	movs	r2, #128	@ 0x80
 800eb44:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb46:	e024      	b.n	800eb92 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	22c0      	movs	r2, #192	@ 0xc0
 800eb4c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	085b      	lsrs	r3, r3, #1
 800eb52:	019a      	lsls	r2, r3, #6
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	085b      	lsrs	r3, r3, #1
 800eb5c:	015a      	lsls	r2, r3, #5
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2280      	movs	r2, #128	@ 0x80
 800eb66:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb68:	e013      	b.n	800eb92 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	22e0      	movs	r2, #224	@ 0xe0
 800eb6e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	085b      	lsrs	r3, r3, #1
 800eb74:	019a      	lsls	r2, r3, #6
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	085b      	lsrs	r3, r3, #1
 800eb7e:	015a      	lsls	r2, r3, #5
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2280      	movs	r2, #128	@ 0x80
 800eb88:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eb8a:	e002      	b.n	800eb92 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	75fb      	strb	r3, [r7, #23]
      break;
 800eb90:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d10b      	bne.n	800ebb0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d102      	bne.n	800eba4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2210      	movs	r2, #16
 800eba2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	d102      	bne.n	800ebb0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2208      	movs	r2, #8
 800ebae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800ebb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	371c      	adds	r7, #28
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop

0800ebc0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b087      	sub	sp, #28
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
 800ebcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d003      	beq.n	800ebee <SAI_InitPCM+0x2e>
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	d103      	bne.n	800ebf6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	651a      	str	r2, [r3, #80]	@ 0x50
 800ebf4:	e002      	b.n	800ebfc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ec08:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ec10:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2200      	movs	r2, #0
 800ec16:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec24:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	2b04      	cmp	r3, #4
 800ec2a:	d103      	bne.n	800ec34 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	659a      	str	r2, [r3, #88]	@ 0x58
 800ec32:	e002      	b.n	800ec3a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	220d      	movs	r2, #13
 800ec38:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b03      	cmp	r3, #3
 800ec3e:	d837      	bhi.n	800ecb0 <SAI_InitPCM+0xf0>
 800ec40:	a201      	add	r2, pc, #4	@ (adr r2, 800ec48 <SAI_InitPCM+0x88>)
 800ec42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec46:	bf00      	nop
 800ec48:	0800ec59 	.word	0x0800ec59
 800ec4c:	0800ec6f 	.word	0x0800ec6f
 800ec50:	0800ec85 	.word	0x0800ec85
 800ec54:	0800ec9b 	.word	0x0800ec9b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2280      	movs	r2, #128	@ 0x80
 800ec5c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	011a      	lsls	r2, r3, #4
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2240      	movs	r2, #64	@ 0x40
 800ec6a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ec6c:	e023      	b.n	800ecb6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2280      	movs	r2, #128	@ 0x80
 800ec72:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	015a      	lsls	r2, r3, #5
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2280      	movs	r2, #128	@ 0x80
 800ec80:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ec82:	e018      	b.n	800ecb6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	22c0      	movs	r2, #192	@ 0xc0
 800ec88:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	015a      	lsls	r2, r3, #5
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2280      	movs	r2, #128	@ 0x80
 800ec96:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ec98:	e00d      	b.n	800ecb6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	22e0      	movs	r2, #224	@ 0xe0
 800ec9e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	015a      	lsls	r2, r3, #5
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2280      	movs	r2, #128	@ 0x80
 800ecac:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ecae:	e002      	b.n	800ecb6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	75fb      	strb	r3, [r7, #23]
      break;
 800ecb4:	bf00      	nop
  }

  return status;
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	371c      	adds	r7, #28
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	460b      	mov	r3, r1
 800ecce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ecd4:	78fb      	ldrb	r3, [r7, #3]
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d103      	bne.n	800ece2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f043 0308 	orr.w	r3, r3, #8
 800ece0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ece6:	2b08      	cmp	r3, #8
 800ece8:	d10b      	bne.n	800ed02 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d003      	beq.n	800ecfa <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	2b01      	cmp	r3, #1
 800ecf8:	d103      	bne.n	800ed02 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f043 0310 	orr.w	r3, r3, #16
 800ed00:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d003      	beq.n	800ed12 <SAI_InterruptFlag+0x4e>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	2b02      	cmp	r3, #2
 800ed10:	d104      	bne.n	800ed1c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ed18:	60fb      	str	r3, [r7, #12]
 800ed1a:	e003      	b.n	800ed24 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f043 0304 	orr.w	r3, r3, #4
 800ed22:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ed24:	68fb      	ldr	r3, [r7, #12]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3714      	adds	r7, #20
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
	...

0800ed34 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ed3c:	4b18      	ldr	r3, [pc, #96]	@ (800eda0 <SAI_Disable+0x6c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a18      	ldr	r2, [pc, #96]	@ (800eda4 <SAI_Disable+0x70>)
 800ed42:	fba2 2303 	umull	r2, r3, r2, r3
 800ed46:	0b1b      	lsrs	r3, r3, #12
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ed5e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d10a      	bne.n	800ed7c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ed76:	2303      	movs	r3, #3
 800ed78:	72fb      	strb	r3, [r7, #11]
      break;
 800ed7a:	e009      	b.n	800ed90 <SAI_Disable+0x5c>
    }
    count--;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d1e7      	bne.n	800ed60 <SAI_Disable+0x2c>

  return status;
 800ed90:	7afb      	ldrb	r3, [r7, #11]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3714      	adds	r7, #20
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	20000000 	.word	0x20000000
 800eda4:	95cbec1b 	.word	0x95cbec1b

0800eda8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800edb4:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edba:	2b81      	cmp	r3, #129	@ 0x81
 800edbc:	d01c      	beq.n	800edf8 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2200      	movs	r2, #0
 800edc2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800edd4:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800edd6:	2100      	movs	r1, #0
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	f7ff ff73 	bl	800ecc4 <SAI_InterruptFlag>
 800edde:	4603      	mov	r3, r0
 800ede0:	43d9      	mvns	r1, r3
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	691a      	ldr	r2, [r3, #16]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	400a      	ands	r2, r1
 800edee:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2201      	movs	r2, #1
 800edf4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f7ff fe11 	bl	800ea20 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800edfe:	bf00      	nop
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b084      	sub	sp, #16
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ee12:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f7ff fe0d 	bl	800ea34 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ee1a:	bf00      	nop
 800ee1c:	3710      	adds	r7, #16
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b084      	sub	sp, #16
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ee2e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ee36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ee4e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f7ff ff6f 	bl	800ed34 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7ff fdee 	bl	800ea48 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ee6c:	bf00      	nop
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d101      	bne.n	800ee86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee82:	2301      	movs	r3, #1
 800ee84:	e049      	b.n	800ef1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7f3 fe62 	bl	8002b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2202      	movs	r2, #2
 800eea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	3304      	adds	r3, #4
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	f000 fb3c 	bl	800f530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2201      	movs	r2, #1
 800eefc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2201      	movs	r2, #1
 800ef14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ef18:	2300      	movs	r3, #0
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3708      	adds	r7, #8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
	...

0800ef24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d001      	beq.n	800ef3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e06a      	b.n	800f012 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2202      	movs	r2, #2
 800ef40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4a35      	ldr	r2, [pc, #212]	@ (800f020 <HAL_TIM_Base_Start+0xfc>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d040      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	4a34      	ldr	r2, [pc, #208]	@ (800f024 <HAL_TIM_Base_Start+0x100>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d03b      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef60:	d036      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef6a:	d031      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a2d      	ldr	r2, [pc, #180]	@ (800f028 <HAL_TIM_Base_Start+0x104>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d02c      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a2c      	ldr	r2, [pc, #176]	@ (800f02c <HAL_TIM_Base_Start+0x108>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d027      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a2a      	ldr	r2, [pc, #168]	@ (800f030 <HAL_TIM_Base_Start+0x10c>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d022      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4a29      	ldr	r2, [pc, #164]	@ (800f034 <HAL_TIM_Base_Start+0x110>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d01d      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a27      	ldr	r2, [pc, #156]	@ (800f038 <HAL_TIM_Base_Start+0x114>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d018      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	4a26      	ldr	r2, [pc, #152]	@ (800f03c <HAL_TIM_Base_Start+0x118>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d013      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a24      	ldr	r2, [pc, #144]	@ (800f040 <HAL_TIM_Base_Start+0x11c>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d00e      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a23      	ldr	r2, [pc, #140]	@ (800f044 <HAL_TIM_Base_Start+0x120>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d009      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a21      	ldr	r2, [pc, #132]	@ (800f048 <HAL_TIM_Base_Start+0x124>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d004      	beq.n	800efd0 <HAL_TIM_Base_Start+0xac>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a20      	ldr	r2, [pc, #128]	@ (800f04c <HAL_TIM_Base_Start+0x128>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d115      	bne.n	800effc <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	689a      	ldr	r2, [r3, #8]
 800efd6:	4b1e      	ldr	r3, [pc, #120]	@ (800f050 <HAL_TIM_Base_Start+0x12c>)
 800efd8:	4013      	ands	r3, r2
 800efda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2b06      	cmp	r3, #6
 800efe0:	d015      	beq.n	800f00e <HAL_TIM_Base_Start+0xea>
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efe8:	d011      	beq.n	800f00e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f042 0201 	orr.w	r2, r2, #1
 800eff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800effa:	e008      	b.n	800f00e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f042 0201 	orr.w	r2, r2, #1
 800f00a:	601a      	str	r2, [r3, #0]
 800f00c:	e000      	b.n	800f010 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f00e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f010:	2300      	movs	r3, #0
}
 800f012:	4618      	mov	r0, r3
 800f014:	3714      	adds	r7, #20
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	40012c00 	.word	0x40012c00
 800f024:	50012c00 	.word	0x50012c00
 800f028:	40000400 	.word	0x40000400
 800f02c:	50000400 	.word	0x50000400
 800f030:	40000800 	.word	0x40000800
 800f034:	50000800 	.word	0x50000800
 800f038:	40000c00 	.word	0x40000c00
 800f03c:	50000c00 	.word	0x50000c00
 800f040:	40013400 	.word	0x40013400
 800f044:	50013400 	.word	0x50013400
 800f048:	40014000 	.word	0x40014000
 800f04c:	50014000 	.word	0x50014000
 800f050:	00010007 	.word	0x00010007

0800f054 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d101      	bne.n	800f066 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f062:	2301      	movs	r3, #1
 800f064:	e049      	b.n	800f0fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d106      	bne.n	800f080 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2200      	movs	r2, #0
 800f076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7f3 fd50 	bl	8002b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2202      	movs	r2, #2
 800f084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	3304      	adds	r3, #4
 800f090:	4619      	mov	r1, r3
 800f092:	4610      	mov	r0, r2
 800f094:	f000 fa4c 	bl	800f530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f0f8:	2300      	movs	r3, #0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3708      	adds	r7, #8
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
	...

0800f104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b086      	sub	sp, #24
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d101      	bne.n	800f122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f11e:	2302      	movs	r3, #2
 800f120:	e0ff      	b.n	800f322 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2201      	movs	r2, #1
 800f126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b14      	cmp	r3, #20
 800f12e:	f200 80f0 	bhi.w	800f312 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f132:	a201      	add	r2, pc, #4	@ (adr r2, 800f138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f138:	0800f18d 	.word	0x0800f18d
 800f13c:	0800f313 	.word	0x0800f313
 800f140:	0800f313 	.word	0x0800f313
 800f144:	0800f313 	.word	0x0800f313
 800f148:	0800f1cd 	.word	0x0800f1cd
 800f14c:	0800f313 	.word	0x0800f313
 800f150:	0800f313 	.word	0x0800f313
 800f154:	0800f313 	.word	0x0800f313
 800f158:	0800f20f 	.word	0x0800f20f
 800f15c:	0800f313 	.word	0x0800f313
 800f160:	0800f313 	.word	0x0800f313
 800f164:	0800f313 	.word	0x0800f313
 800f168:	0800f24f 	.word	0x0800f24f
 800f16c:	0800f313 	.word	0x0800f313
 800f170:	0800f313 	.word	0x0800f313
 800f174:	0800f313 	.word	0x0800f313
 800f178:	0800f291 	.word	0x0800f291
 800f17c:	0800f313 	.word	0x0800f313
 800f180:	0800f313 	.word	0x0800f313
 800f184:	0800f313 	.word	0x0800f313
 800f188:	0800f2d1 	.word	0x0800f2d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	68b9      	ldr	r1, [r7, #8]
 800f192:	4618      	mov	r0, r3
 800f194:	f000 fad2 	bl	800f73c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	699a      	ldr	r2, [r3, #24]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f042 0208 	orr.w	r2, r2, #8
 800f1a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	699a      	ldr	r2, [r3, #24]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f022 0204 	bic.w	r2, r2, #4
 800f1b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	6999      	ldr	r1, [r3, #24]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	691a      	ldr	r2, [r3, #16]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	430a      	orrs	r2, r1
 800f1c8:	619a      	str	r2, [r3, #24]
      break;
 800f1ca:	e0a5      	b.n	800f318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	68b9      	ldr	r1, [r7, #8]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f000 fb74 	bl	800f8c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	699a      	ldr	r2, [r3, #24]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	699a      	ldr	r2, [r3, #24]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	6999      	ldr	r1, [r3, #24]
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	021a      	lsls	r2, r3, #8
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	430a      	orrs	r2, r1
 800f20a:	619a      	str	r2, [r3, #24]
      break;
 800f20c:	e084      	b.n	800f318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68b9      	ldr	r1, [r7, #8]
 800f214:	4618      	mov	r0, r3
 800f216:	f000 fc03 	bl	800fa20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	69da      	ldr	r2, [r3, #28]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f042 0208 	orr.w	r2, r2, #8
 800f228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	69da      	ldr	r2, [r3, #28]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f022 0204 	bic.w	r2, r2, #4
 800f238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	69d9      	ldr	r1, [r3, #28]
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	691a      	ldr	r2, [r3, #16]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	430a      	orrs	r2, r1
 800f24a:	61da      	str	r2, [r3, #28]
      break;
 800f24c:	e064      	b.n	800f318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	68b9      	ldr	r1, [r7, #8]
 800f254:	4618      	mov	r0, r3
 800f256:	f000 fc91 	bl	800fb7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	69da      	ldr	r2, [r3, #28]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	69da      	ldr	r2, [r3, #28]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	69d9      	ldr	r1, [r3, #28]
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	691b      	ldr	r3, [r3, #16]
 800f284:	021a      	lsls	r2, r3, #8
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	430a      	orrs	r2, r1
 800f28c:	61da      	str	r2, [r3, #28]
      break;
 800f28e:	e043      	b.n	800f318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	68b9      	ldr	r1, [r7, #8]
 800f296:	4618      	mov	r0, r3
 800f298:	f000 fd20 	bl	800fcdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f042 0208 	orr.w	r2, r2, #8
 800f2aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f022 0204 	bic.w	r2, r2, #4
 800f2ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	691a      	ldr	r2, [r3, #16]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	430a      	orrs	r2, r1
 800f2cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f2ce:	e023      	b.n	800f318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	68b9      	ldr	r1, [r7, #8]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 fd82 	bl	800fde0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f2ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f2fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	691b      	ldr	r3, [r3, #16]
 800f306:	021a      	lsls	r2, r3, #8
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	430a      	orrs	r2, r1
 800f30e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f310:	e002      	b.n	800f318 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f312:	2301      	movs	r3, #1
 800f314:	75fb      	strb	r3, [r7, #23]
      break;
 800f316:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2200      	movs	r2, #0
 800f31c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f320:	7dfb      	ldrb	r3, [r7, #23]
}
 800f322:	4618      	mov	r0, r3
 800f324:	3718      	adds	r7, #24
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop

0800f32c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f336:	2300      	movs	r3, #0
 800f338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f340:	2b01      	cmp	r3, #1
 800f342:	d101      	bne.n	800f348 <HAL_TIM_ConfigClockSource+0x1c>
 800f344:	2302      	movs	r3, #2
 800f346:	e0e6      	b.n	800f516 <HAL_TIM_ConfigClockSource+0x1ea>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2201      	movs	r2, #1
 800f34c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2202      	movs	r2, #2
 800f354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	689b      	ldr	r3, [r3, #8]
 800f35e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f366:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f36a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a67      	ldr	r2, [pc, #412]	@ (800f520 <HAL_TIM_ConfigClockSource+0x1f4>)
 800f382:	4293      	cmp	r3, r2
 800f384:	f000 80b1 	beq.w	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f388:	4a65      	ldr	r2, [pc, #404]	@ (800f520 <HAL_TIM_ConfigClockSource+0x1f4>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	f200 80b6 	bhi.w	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f390:	4a64      	ldr	r2, [pc, #400]	@ (800f524 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f392:	4293      	cmp	r3, r2
 800f394:	f000 80a9 	beq.w	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f398:	4a62      	ldr	r2, [pc, #392]	@ (800f524 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	f200 80ae 	bhi.w	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f3a0:	4a61      	ldr	r2, [pc, #388]	@ (800f528 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	f000 80a1 	beq.w	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f3a8:	4a5f      	ldr	r2, [pc, #380]	@ (800f528 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	f200 80a6 	bhi.w	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f3b0:	4a5e      	ldr	r2, [pc, #376]	@ (800f52c <HAL_TIM_ConfigClockSource+0x200>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	f000 8099 	beq.w	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f3b8:	4a5c      	ldr	r2, [pc, #368]	@ (800f52c <HAL_TIM_ConfigClockSource+0x200>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	f200 809e 	bhi.w	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f3c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f3c4:	f000 8091 	beq.w	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f3c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f3cc:	f200 8096 	bhi.w	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f3d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3d4:	f000 8089 	beq.w	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f3d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3dc:	f200 808e 	bhi.w	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f3e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3e4:	d03e      	beq.n	800f464 <HAL_TIM_ConfigClockSource+0x138>
 800f3e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3ea:	f200 8087 	bhi.w	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f3ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3f2:	f000 8086 	beq.w	800f502 <HAL_TIM_ConfigClockSource+0x1d6>
 800f3f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3fa:	d87f      	bhi.n	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f3fc:	2b70      	cmp	r3, #112	@ 0x70
 800f3fe:	d01a      	beq.n	800f436 <HAL_TIM_ConfigClockSource+0x10a>
 800f400:	2b70      	cmp	r3, #112	@ 0x70
 800f402:	d87b      	bhi.n	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f404:	2b60      	cmp	r3, #96	@ 0x60
 800f406:	d050      	beq.n	800f4aa <HAL_TIM_ConfigClockSource+0x17e>
 800f408:	2b60      	cmp	r3, #96	@ 0x60
 800f40a:	d877      	bhi.n	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f40c:	2b50      	cmp	r3, #80	@ 0x50
 800f40e:	d03c      	beq.n	800f48a <HAL_TIM_ConfigClockSource+0x15e>
 800f410:	2b50      	cmp	r3, #80	@ 0x50
 800f412:	d873      	bhi.n	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f414:	2b40      	cmp	r3, #64	@ 0x40
 800f416:	d058      	beq.n	800f4ca <HAL_TIM_ConfigClockSource+0x19e>
 800f418:	2b40      	cmp	r3, #64	@ 0x40
 800f41a:	d86f      	bhi.n	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f41c:	2b30      	cmp	r3, #48	@ 0x30
 800f41e:	d064      	beq.n	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f420:	2b30      	cmp	r3, #48	@ 0x30
 800f422:	d86b      	bhi.n	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f424:	2b20      	cmp	r3, #32
 800f426:	d060      	beq.n	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f428:	2b20      	cmp	r3, #32
 800f42a:	d867      	bhi.n	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d05c      	beq.n	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f430:	2b10      	cmp	r3, #16
 800f432:	d05a      	beq.n	800f4ea <HAL_TIM_ConfigClockSource+0x1be>
 800f434:	e062      	b.n	800f4fc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f446:	f000 fdcb 	bl	800ffe0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	68ba      	ldr	r2, [r7, #8]
 800f460:	609a      	str	r2, [r3, #8]
      break;
 800f462:	e04f      	b.n	800f504 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f474:	f000 fdb4 	bl	800ffe0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	689a      	ldr	r2, [r3, #8]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f486:	609a      	str	r2, [r3, #8]
      break;
 800f488:	e03c      	b.n	800f504 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f496:	461a      	mov	r2, r3
 800f498:	f000 fd26 	bl	800fee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2150      	movs	r1, #80	@ 0x50
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 fd7f 	bl	800ffa6 <TIM_ITRx_SetConfig>
      break;
 800f4a8:	e02c      	b.n	800f504 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	f000 fd45 	bl	800ff46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2160      	movs	r1, #96	@ 0x60
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 fd6f 	bl	800ffa6 <TIM_ITRx_SetConfig>
      break;
 800f4c8:	e01c      	b.n	800f504 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	f000 fd06 	bl	800fee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2140      	movs	r1, #64	@ 0x40
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 fd5f 	bl	800ffa6 <TIM_ITRx_SetConfig>
      break;
 800f4e8:	e00c      	b.n	800f504 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	f000 fd56 	bl	800ffa6 <TIM_ITRx_SetConfig>
      break;
 800f4fa:	e003      	b.n	800f504 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f500:	e000      	b.n	800f504 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800f502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2201      	movs	r2, #1
 800f508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f514:	7bfb      	ldrb	r3, [r7, #15]
}
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	00100070 	.word	0x00100070
 800f524:	00100040 	.word	0x00100040
 800f528:	00100030 	.word	0x00100030
 800f52c:	00100020 	.word	0x00100020

0800f530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f530:	b480      	push	{r7}
 800f532:	b085      	sub	sp, #20
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4a6e      	ldr	r2, [pc, #440]	@ (800f6fc <TIM_Base_SetConfig+0x1cc>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d02b      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a6d      	ldr	r2, [pc, #436]	@ (800f700 <TIM_Base_SetConfig+0x1d0>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d027      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f556:	d023      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f55e:	d01f      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a68      	ldr	r2, [pc, #416]	@ (800f704 <TIM_Base_SetConfig+0x1d4>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d01b      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a67      	ldr	r2, [pc, #412]	@ (800f708 <TIM_Base_SetConfig+0x1d8>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d017      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a66      	ldr	r2, [pc, #408]	@ (800f70c <TIM_Base_SetConfig+0x1dc>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d013      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a65      	ldr	r2, [pc, #404]	@ (800f710 <TIM_Base_SetConfig+0x1e0>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d00f      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a64      	ldr	r2, [pc, #400]	@ (800f714 <TIM_Base_SetConfig+0x1e4>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d00b      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a63      	ldr	r2, [pc, #396]	@ (800f718 <TIM_Base_SetConfig+0x1e8>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d007      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a62      	ldr	r2, [pc, #392]	@ (800f71c <TIM_Base_SetConfig+0x1ec>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d003      	beq.n	800f5a0 <TIM_Base_SetConfig+0x70>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a61      	ldr	r2, [pc, #388]	@ (800f720 <TIM_Base_SetConfig+0x1f0>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d108      	bne.n	800f5b2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a51      	ldr	r2, [pc, #324]	@ (800f6fc <TIM_Base_SetConfig+0x1cc>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d043      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4a50      	ldr	r2, [pc, #320]	@ (800f700 <TIM_Base_SetConfig+0x1d0>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d03f      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5c8:	d03b      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5d0:	d037      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4a4b      	ldr	r2, [pc, #300]	@ (800f704 <TIM_Base_SetConfig+0x1d4>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d033      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4a4a      	ldr	r2, [pc, #296]	@ (800f708 <TIM_Base_SetConfig+0x1d8>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d02f      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4a49      	ldr	r2, [pc, #292]	@ (800f70c <TIM_Base_SetConfig+0x1dc>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d02b      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a48      	ldr	r2, [pc, #288]	@ (800f710 <TIM_Base_SetConfig+0x1e0>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d027      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	4a47      	ldr	r2, [pc, #284]	@ (800f714 <TIM_Base_SetConfig+0x1e4>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d023      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4a46      	ldr	r2, [pc, #280]	@ (800f718 <TIM_Base_SetConfig+0x1e8>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d01f      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a45      	ldr	r2, [pc, #276]	@ (800f71c <TIM_Base_SetConfig+0x1ec>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d01b      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a44      	ldr	r2, [pc, #272]	@ (800f720 <TIM_Base_SetConfig+0x1f0>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d017      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4a43      	ldr	r2, [pc, #268]	@ (800f724 <TIM_Base_SetConfig+0x1f4>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d013      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	4a42      	ldr	r2, [pc, #264]	@ (800f728 <TIM_Base_SetConfig+0x1f8>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d00f      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a41      	ldr	r2, [pc, #260]	@ (800f72c <TIM_Base_SetConfig+0x1fc>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d00b      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4a40      	ldr	r2, [pc, #256]	@ (800f730 <TIM_Base_SetConfig+0x200>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d007      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4a3f      	ldr	r2, [pc, #252]	@ (800f734 <TIM_Base_SetConfig+0x204>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d003      	beq.n	800f642 <TIM_Base_SetConfig+0x112>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4a3e      	ldr	r2, [pc, #248]	@ (800f738 <TIM_Base_SetConfig+0x208>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d108      	bne.n	800f654 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	68db      	ldr	r3, [r3, #12]
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	4313      	orrs	r3, r2
 800f652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	695b      	ldr	r3, [r3, #20]
 800f65e:	4313      	orrs	r3, r2
 800f660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	689a      	ldr	r2, [r3, #8]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a20      	ldr	r2, [pc, #128]	@ (800f6fc <TIM_Base_SetConfig+0x1cc>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d023      	beq.n	800f6c8 <TIM_Base_SetConfig+0x198>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a1f      	ldr	r2, [pc, #124]	@ (800f700 <TIM_Base_SetConfig+0x1d0>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d01f      	beq.n	800f6c8 <TIM_Base_SetConfig+0x198>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4a24      	ldr	r2, [pc, #144]	@ (800f71c <TIM_Base_SetConfig+0x1ec>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d01b      	beq.n	800f6c8 <TIM_Base_SetConfig+0x198>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a23      	ldr	r2, [pc, #140]	@ (800f720 <TIM_Base_SetConfig+0x1f0>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d017      	beq.n	800f6c8 <TIM_Base_SetConfig+0x198>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4a22      	ldr	r2, [pc, #136]	@ (800f724 <TIM_Base_SetConfig+0x1f4>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d013      	beq.n	800f6c8 <TIM_Base_SetConfig+0x198>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4a21      	ldr	r2, [pc, #132]	@ (800f728 <TIM_Base_SetConfig+0x1f8>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d00f      	beq.n	800f6c8 <TIM_Base_SetConfig+0x198>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a20      	ldr	r2, [pc, #128]	@ (800f72c <TIM_Base_SetConfig+0x1fc>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d00b      	beq.n	800f6c8 <TIM_Base_SetConfig+0x198>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4a1f      	ldr	r2, [pc, #124]	@ (800f730 <TIM_Base_SetConfig+0x200>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d007      	beq.n	800f6c8 <TIM_Base_SetConfig+0x198>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4a1e      	ldr	r2, [pc, #120]	@ (800f734 <TIM_Base_SetConfig+0x204>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d003      	beq.n	800f6c8 <TIM_Base_SetConfig+0x198>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4a1d      	ldr	r2, [pc, #116]	@ (800f738 <TIM_Base_SetConfig+0x208>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d103      	bne.n	800f6d0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	691a      	ldr	r2, [r3, #16]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	691b      	ldr	r3, [r3, #16]
 800f6da:	f003 0301 	and.w	r3, r3, #1
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d105      	bne.n	800f6ee <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	691b      	ldr	r3, [r3, #16]
 800f6e6:	f023 0201 	bic.w	r2, r3, #1
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	611a      	str	r2, [r3, #16]
  }
}
 800f6ee:	bf00      	nop
 800f6f0:	3714      	adds	r7, #20
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop
 800f6fc:	40012c00 	.word	0x40012c00
 800f700:	50012c00 	.word	0x50012c00
 800f704:	40000400 	.word	0x40000400
 800f708:	50000400 	.word	0x50000400
 800f70c:	40000800 	.word	0x40000800
 800f710:	50000800 	.word	0x50000800
 800f714:	40000c00 	.word	0x40000c00
 800f718:	50000c00 	.word	0x50000c00
 800f71c:	40013400 	.word	0x40013400
 800f720:	50013400 	.word	0x50013400
 800f724:	40014000 	.word	0x40014000
 800f728:	50014000 	.word	0x50014000
 800f72c:	40014400 	.word	0x40014400
 800f730:	50014400 	.word	0x50014400
 800f734:	40014800 	.word	0x40014800
 800f738:	50014800 	.word	0x50014800

0800f73c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b087      	sub	sp, #28
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a1b      	ldr	r3, [r3, #32]
 800f74a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6a1b      	ldr	r3, [r3, #32]
 800f750:	f023 0201 	bic.w	r2, r3, #1
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	699b      	ldr	r3, [r3, #24]
 800f762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f76a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f76e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f023 0303 	bic.w	r3, r3, #3
 800f776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	4313      	orrs	r3, r2
 800f780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	f023 0302 	bic.w	r3, r3, #2
 800f788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	697a      	ldr	r2, [r7, #20]
 800f790:	4313      	orrs	r3, r2
 800f792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4a40      	ldr	r2, [pc, #256]	@ (800f898 <TIM_OC1_SetConfig+0x15c>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d023      	beq.n	800f7e4 <TIM_OC1_SetConfig+0xa8>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a3f      	ldr	r2, [pc, #252]	@ (800f89c <TIM_OC1_SetConfig+0x160>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d01f      	beq.n	800f7e4 <TIM_OC1_SetConfig+0xa8>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a3e      	ldr	r2, [pc, #248]	@ (800f8a0 <TIM_OC1_SetConfig+0x164>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d01b      	beq.n	800f7e4 <TIM_OC1_SetConfig+0xa8>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a3d      	ldr	r2, [pc, #244]	@ (800f8a4 <TIM_OC1_SetConfig+0x168>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d017      	beq.n	800f7e4 <TIM_OC1_SetConfig+0xa8>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a3c      	ldr	r2, [pc, #240]	@ (800f8a8 <TIM_OC1_SetConfig+0x16c>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d013      	beq.n	800f7e4 <TIM_OC1_SetConfig+0xa8>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a3b      	ldr	r2, [pc, #236]	@ (800f8ac <TIM_OC1_SetConfig+0x170>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d00f      	beq.n	800f7e4 <TIM_OC1_SetConfig+0xa8>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a3a      	ldr	r2, [pc, #232]	@ (800f8b0 <TIM_OC1_SetConfig+0x174>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d00b      	beq.n	800f7e4 <TIM_OC1_SetConfig+0xa8>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a39      	ldr	r2, [pc, #228]	@ (800f8b4 <TIM_OC1_SetConfig+0x178>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d007      	beq.n	800f7e4 <TIM_OC1_SetConfig+0xa8>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4a38      	ldr	r2, [pc, #224]	@ (800f8b8 <TIM_OC1_SetConfig+0x17c>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d003      	beq.n	800f7e4 <TIM_OC1_SetConfig+0xa8>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4a37      	ldr	r2, [pc, #220]	@ (800f8bc <TIM_OC1_SetConfig+0x180>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d10c      	bne.n	800f7fe <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	f023 0308 	bic.w	r3, r3, #8
 800f7ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	697a      	ldr	r2, [r7, #20]
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	f023 0304 	bic.w	r3, r3, #4
 800f7fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a25      	ldr	r2, [pc, #148]	@ (800f898 <TIM_OC1_SetConfig+0x15c>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d023      	beq.n	800f84e <TIM_OC1_SetConfig+0x112>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a24      	ldr	r2, [pc, #144]	@ (800f89c <TIM_OC1_SetConfig+0x160>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d01f      	beq.n	800f84e <TIM_OC1_SetConfig+0x112>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a23      	ldr	r2, [pc, #140]	@ (800f8a0 <TIM_OC1_SetConfig+0x164>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d01b      	beq.n	800f84e <TIM_OC1_SetConfig+0x112>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a22      	ldr	r2, [pc, #136]	@ (800f8a4 <TIM_OC1_SetConfig+0x168>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d017      	beq.n	800f84e <TIM_OC1_SetConfig+0x112>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a21      	ldr	r2, [pc, #132]	@ (800f8a8 <TIM_OC1_SetConfig+0x16c>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d013      	beq.n	800f84e <TIM_OC1_SetConfig+0x112>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4a20      	ldr	r2, [pc, #128]	@ (800f8ac <TIM_OC1_SetConfig+0x170>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d00f      	beq.n	800f84e <TIM_OC1_SetConfig+0x112>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a1f      	ldr	r2, [pc, #124]	@ (800f8b0 <TIM_OC1_SetConfig+0x174>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d00b      	beq.n	800f84e <TIM_OC1_SetConfig+0x112>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a1e      	ldr	r2, [pc, #120]	@ (800f8b4 <TIM_OC1_SetConfig+0x178>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d007      	beq.n	800f84e <TIM_OC1_SetConfig+0x112>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a1d      	ldr	r2, [pc, #116]	@ (800f8b8 <TIM_OC1_SetConfig+0x17c>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d003      	beq.n	800f84e <TIM_OC1_SetConfig+0x112>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a1c      	ldr	r2, [pc, #112]	@ (800f8bc <TIM_OC1_SetConfig+0x180>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d111      	bne.n	800f872 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f85c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	695b      	ldr	r3, [r3, #20]
 800f862:	693a      	ldr	r2, [r7, #16]
 800f864:	4313      	orrs	r3, r2
 800f866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	699b      	ldr	r3, [r3, #24]
 800f86c:	693a      	ldr	r2, [r7, #16]
 800f86e:	4313      	orrs	r3, r2
 800f870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	693a      	ldr	r2, [r7, #16]
 800f876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	685a      	ldr	r2, [r3, #4]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	697a      	ldr	r2, [r7, #20]
 800f88a:	621a      	str	r2, [r3, #32]
}
 800f88c:	bf00      	nop
 800f88e:	371c      	adds	r7, #28
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr
 800f898:	40012c00 	.word	0x40012c00
 800f89c:	50012c00 	.word	0x50012c00
 800f8a0:	40013400 	.word	0x40013400
 800f8a4:	50013400 	.word	0x50013400
 800f8a8:	40014000 	.word	0x40014000
 800f8ac:	50014000 	.word	0x50014000
 800f8b0:	40014400 	.word	0x40014400
 800f8b4:	50014400 	.word	0x50014400
 800f8b8:	40014800 	.word	0x40014800
 800f8bc:	50014800 	.word	0x50014800

0800f8c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b087      	sub	sp, #28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a1b      	ldr	r3, [r3, #32]
 800f8d4:	f023 0210 	bic.w	r2, r3, #16
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f8ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	021b      	lsls	r3, r3, #8
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	4313      	orrs	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	f023 0320 	bic.w	r3, r3, #32
 800f90e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	011b      	lsls	r3, r3, #4
 800f916:	697a      	ldr	r2, [r7, #20]
 800f918:	4313      	orrs	r3, r2
 800f91a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a36      	ldr	r2, [pc, #216]	@ (800f9f8 <TIM_OC2_SetConfig+0x138>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d00b      	beq.n	800f93c <TIM_OC2_SetConfig+0x7c>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a35      	ldr	r2, [pc, #212]	@ (800f9fc <TIM_OC2_SetConfig+0x13c>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d007      	beq.n	800f93c <TIM_OC2_SetConfig+0x7c>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a34      	ldr	r2, [pc, #208]	@ (800fa00 <TIM_OC2_SetConfig+0x140>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d003      	beq.n	800f93c <TIM_OC2_SetConfig+0x7c>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a33      	ldr	r2, [pc, #204]	@ (800fa04 <TIM_OC2_SetConfig+0x144>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d10d      	bne.n	800f958 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	011b      	lsls	r3, r3, #4
 800f94a:	697a      	ldr	r2, [r7, #20]
 800f94c:	4313      	orrs	r3, r2
 800f94e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f956:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a27      	ldr	r2, [pc, #156]	@ (800f9f8 <TIM_OC2_SetConfig+0x138>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d023      	beq.n	800f9a8 <TIM_OC2_SetConfig+0xe8>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a26      	ldr	r2, [pc, #152]	@ (800f9fc <TIM_OC2_SetConfig+0x13c>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d01f      	beq.n	800f9a8 <TIM_OC2_SetConfig+0xe8>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	4a25      	ldr	r2, [pc, #148]	@ (800fa00 <TIM_OC2_SetConfig+0x140>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d01b      	beq.n	800f9a8 <TIM_OC2_SetConfig+0xe8>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4a24      	ldr	r2, [pc, #144]	@ (800fa04 <TIM_OC2_SetConfig+0x144>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d017      	beq.n	800f9a8 <TIM_OC2_SetConfig+0xe8>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4a23      	ldr	r2, [pc, #140]	@ (800fa08 <TIM_OC2_SetConfig+0x148>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d013      	beq.n	800f9a8 <TIM_OC2_SetConfig+0xe8>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4a22      	ldr	r2, [pc, #136]	@ (800fa0c <TIM_OC2_SetConfig+0x14c>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d00f      	beq.n	800f9a8 <TIM_OC2_SetConfig+0xe8>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a21      	ldr	r2, [pc, #132]	@ (800fa10 <TIM_OC2_SetConfig+0x150>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d00b      	beq.n	800f9a8 <TIM_OC2_SetConfig+0xe8>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4a20      	ldr	r2, [pc, #128]	@ (800fa14 <TIM_OC2_SetConfig+0x154>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d007      	beq.n	800f9a8 <TIM_OC2_SetConfig+0xe8>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4a1f      	ldr	r2, [pc, #124]	@ (800fa18 <TIM_OC2_SetConfig+0x158>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d003      	beq.n	800f9a8 <TIM_OC2_SetConfig+0xe8>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	4a1e      	ldr	r2, [pc, #120]	@ (800fa1c <TIM_OC2_SetConfig+0x15c>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d113      	bne.n	800f9d0 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f9ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	695b      	ldr	r3, [r3, #20]
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	699b      	ldr	r3, [r3, #24]
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	693a      	ldr	r2, [r7, #16]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	685a      	ldr	r2, [r3, #4]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	697a      	ldr	r2, [r7, #20]
 800f9e8:	621a      	str	r2, [r3, #32]
}
 800f9ea:	bf00      	nop
 800f9ec:	371c      	adds	r7, #28
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	40012c00 	.word	0x40012c00
 800f9fc:	50012c00 	.word	0x50012c00
 800fa00:	40013400 	.word	0x40013400
 800fa04:	50013400 	.word	0x50013400
 800fa08:	40014000 	.word	0x40014000
 800fa0c:	50014000 	.word	0x50014000
 800fa10:	40014400 	.word	0x40014400
 800fa14:	50014400 	.word	0x50014400
 800fa18:	40014800 	.word	0x40014800
 800fa1c:	50014800 	.word	0x50014800

0800fa20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b087      	sub	sp, #28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6a1b      	ldr	r3, [r3, #32]
 800fa34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	69db      	ldr	r3, [r3, #28]
 800fa46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f023 0303 	bic.w	r3, r3, #3
 800fa5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fa6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	689b      	ldr	r3, [r3, #8]
 800fa72:	021b      	lsls	r3, r3, #8
 800fa74:	697a      	ldr	r2, [r7, #20]
 800fa76:	4313      	orrs	r3, r2
 800fa78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4a35      	ldr	r2, [pc, #212]	@ (800fb54 <TIM_OC3_SetConfig+0x134>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d00b      	beq.n	800fa9a <TIM_OC3_SetConfig+0x7a>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4a34      	ldr	r2, [pc, #208]	@ (800fb58 <TIM_OC3_SetConfig+0x138>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d007      	beq.n	800fa9a <TIM_OC3_SetConfig+0x7a>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4a33      	ldr	r2, [pc, #204]	@ (800fb5c <TIM_OC3_SetConfig+0x13c>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d003      	beq.n	800fa9a <TIM_OC3_SetConfig+0x7a>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4a32      	ldr	r2, [pc, #200]	@ (800fb60 <TIM_OC3_SetConfig+0x140>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d10d      	bne.n	800fab6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800faa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	68db      	ldr	r3, [r3, #12]
 800faa6:	021b      	lsls	r3, r3, #8
 800faa8:	697a      	ldr	r2, [r7, #20]
 800faaa:	4313      	orrs	r3, r2
 800faac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4a26      	ldr	r2, [pc, #152]	@ (800fb54 <TIM_OC3_SetConfig+0x134>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d023      	beq.n	800fb06 <TIM_OC3_SetConfig+0xe6>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4a25      	ldr	r2, [pc, #148]	@ (800fb58 <TIM_OC3_SetConfig+0x138>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d01f      	beq.n	800fb06 <TIM_OC3_SetConfig+0xe6>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4a24      	ldr	r2, [pc, #144]	@ (800fb5c <TIM_OC3_SetConfig+0x13c>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d01b      	beq.n	800fb06 <TIM_OC3_SetConfig+0xe6>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4a23      	ldr	r2, [pc, #140]	@ (800fb60 <TIM_OC3_SetConfig+0x140>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d017      	beq.n	800fb06 <TIM_OC3_SetConfig+0xe6>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a22      	ldr	r2, [pc, #136]	@ (800fb64 <TIM_OC3_SetConfig+0x144>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d013      	beq.n	800fb06 <TIM_OC3_SetConfig+0xe6>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a21      	ldr	r2, [pc, #132]	@ (800fb68 <TIM_OC3_SetConfig+0x148>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d00f      	beq.n	800fb06 <TIM_OC3_SetConfig+0xe6>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a20      	ldr	r2, [pc, #128]	@ (800fb6c <TIM_OC3_SetConfig+0x14c>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d00b      	beq.n	800fb06 <TIM_OC3_SetConfig+0xe6>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a1f      	ldr	r2, [pc, #124]	@ (800fb70 <TIM_OC3_SetConfig+0x150>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d007      	beq.n	800fb06 <TIM_OC3_SetConfig+0xe6>
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4a1e      	ldr	r2, [pc, #120]	@ (800fb74 <TIM_OC3_SetConfig+0x154>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d003      	beq.n	800fb06 <TIM_OC3_SetConfig+0xe6>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	4a1d      	ldr	r2, [pc, #116]	@ (800fb78 <TIM_OC3_SetConfig+0x158>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d113      	bne.n	800fb2e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fb14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	695b      	ldr	r3, [r3, #20]
 800fb1a:	011b      	lsls	r3, r3, #4
 800fb1c:	693a      	ldr	r2, [r7, #16]
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	699b      	ldr	r3, [r3, #24]
 800fb26:	011b      	lsls	r3, r3, #4
 800fb28:	693a      	ldr	r2, [r7, #16]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	693a      	ldr	r2, [r7, #16]
 800fb32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	685a      	ldr	r2, [r3, #4]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	697a      	ldr	r2, [r7, #20]
 800fb46:	621a      	str	r2, [r3, #32]
}
 800fb48:	bf00      	nop
 800fb4a:	371c      	adds	r7, #28
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	40012c00 	.word	0x40012c00
 800fb58:	50012c00 	.word	0x50012c00
 800fb5c:	40013400 	.word	0x40013400
 800fb60:	50013400 	.word	0x50013400
 800fb64:	40014000 	.word	0x40014000
 800fb68:	50014000 	.word	0x50014000
 800fb6c:	40014400 	.word	0x40014400
 800fb70:	50014400 	.word	0x50014400
 800fb74:	40014800 	.word	0x40014800
 800fb78:	50014800 	.word	0x50014800

0800fb7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b087      	sub	sp, #28
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a1b      	ldr	r3, [r3, #32]
 800fb8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6a1b      	ldr	r3, [r3, #32]
 800fb90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	69db      	ldr	r3, [r3, #28]
 800fba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fbaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fbae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	021b      	lsls	r3, r3, #8
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fbca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	031b      	lsls	r3, r3, #12
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a36      	ldr	r2, [pc, #216]	@ (800fcb4 <TIM_OC4_SetConfig+0x138>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d00b      	beq.n	800fbf8 <TIM_OC4_SetConfig+0x7c>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a35      	ldr	r2, [pc, #212]	@ (800fcb8 <TIM_OC4_SetConfig+0x13c>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d007      	beq.n	800fbf8 <TIM_OC4_SetConfig+0x7c>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a34      	ldr	r2, [pc, #208]	@ (800fcbc <TIM_OC4_SetConfig+0x140>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d003      	beq.n	800fbf8 <TIM_OC4_SetConfig+0x7c>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4a33      	ldr	r2, [pc, #204]	@ (800fcc0 <TIM_OC4_SetConfig+0x144>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d10d      	bne.n	800fc14 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fbfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	031b      	lsls	r3, r3, #12
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fc12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4a27      	ldr	r2, [pc, #156]	@ (800fcb4 <TIM_OC4_SetConfig+0x138>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d023      	beq.n	800fc64 <TIM_OC4_SetConfig+0xe8>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a26      	ldr	r2, [pc, #152]	@ (800fcb8 <TIM_OC4_SetConfig+0x13c>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d01f      	beq.n	800fc64 <TIM_OC4_SetConfig+0xe8>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4a25      	ldr	r2, [pc, #148]	@ (800fcbc <TIM_OC4_SetConfig+0x140>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d01b      	beq.n	800fc64 <TIM_OC4_SetConfig+0xe8>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a24      	ldr	r2, [pc, #144]	@ (800fcc0 <TIM_OC4_SetConfig+0x144>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d017      	beq.n	800fc64 <TIM_OC4_SetConfig+0xe8>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a23      	ldr	r2, [pc, #140]	@ (800fcc4 <TIM_OC4_SetConfig+0x148>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d013      	beq.n	800fc64 <TIM_OC4_SetConfig+0xe8>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4a22      	ldr	r2, [pc, #136]	@ (800fcc8 <TIM_OC4_SetConfig+0x14c>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d00f      	beq.n	800fc64 <TIM_OC4_SetConfig+0xe8>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	4a21      	ldr	r2, [pc, #132]	@ (800fccc <TIM_OC4_SetConfig+0x150>)
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	d00b      	beq.n	800fc64 <TIM_OC4_SetConfig+0xe8>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	4a20      	ldr	r2, [pc, #128]	@ (800fcd0 <TIM_OC4_SetConfig+0x154>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d007      	beq.n	800fc64 <TIM_OC4_SetConfig+0xe8>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	4a1f      	ldr	r2, [pc, #124]	@ (800fcd4 <TIM_OC4_SetConfig+0x158>)
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d003      	beq.n	800fc64 <TIM_OC4_SetConfig+0xe8>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	4a1e      	ldr	r2, [pc, #120]	@ (800fcd8 <TIM_OC4_SetConfig+0x15c>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d113      	bne.n	800fc8c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fc6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fc72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	695b      	ldr	r3, [r3, #20]
 800fc78:	019b      	lsls	r3, r3, #6
 800fc7a:	693a      	ldr	r2, [r7, #16]
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	699b      	ldr	r3, [r3, #24]
 800fc84:	019b      	lsls	r3, r3, #6
 800fc86:	693a      	ldr	r2, [r7, #16]
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	693a      	ldr	r2, [r7, #16]
 800fc90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	68fa      	ldr	r2, [r7, #12]
 800fc96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	685a      	ldr	r2, [r3, #4]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	697a      	ldr	r2, [r7, #20]
 800fca4:	621a      	str	r2, [r3, #32]
}
 800fca6:	bf00      	nop
 800fca8:	371c      	adds	r7, #28
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr
 800fcb2:	bf00      	nop
 800fcb4:	40012c00 	.word	0x40012c00
 800fcb8:	50012c00 	.word	0x50012c00
 800fcbc:	40013400 	.word	0x40013400
 800fcc0:	50013400 	.word	0x50013400
 800fcc4:	40014000 	.word	0x40014000
 800fcc8:	50014000 	.word	0x50014000
 800fccc:	40014400 	.word	0x40014400
 800fcd0:	50014400 	.word	0x50014400
 800fcd4:	40014800 	.word	0x40014800
 800fcd8:	50014800 	.word	0x50014800

0800fcdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b087      	sub	sp, #28
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6a1b      	ldr	r3, [r3, #32]
 800fcf0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fd0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	68fa      	ldr	r2, [r7, #12]
 800fd16:	4313      	orrs	r3, r2
 800fd18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fd20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	041b      	lsls	r3, r3, #16
 800fd28:	693a      	ldr	r2, [r7, #16]
 800fd2a:	4313      	orrs	r3, r2
 800fd2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4a21      	ldr	r2, [pc, #132]	@ (800fdb8 <TIM_OC5_SetConfig+0xdc>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d023      	beq.n	800fd7e <TIM_OC5_SetConfig+0xa2>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	4a20      	ldr	r2, [pc, #128]	@ (800fdbc <TIM_OC5_SetConfig+0xe0>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d01f      	beq.n	800fd7e <TIM_OC5_SetConfig+0xa2>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4a1f      	ldr	r2, [pc, #124]	@ (800fdc0 <TIM_OC5_SetConfig+0xe4>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d01b      	beq.n	800fd7e <TIM_OC5_SetConfig+0xa2>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a1e      	ldr	r2, [pc, #120]	@ (800fdc4 <TIM_OC5_SetConfig+0xe8>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d017      	beq.n	800fd7e <TIM_OC5_SetConfig+0xa2>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4a1d      	ldr	r2, [pc, #116]	@ (800fdc8 <TIM_OC5_SetConfig+0xec>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d013      	beq.n	800fd7e <TIM_OC5_SetConfig+0xa2>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4a1c      	ldr	r2, [pc, #112]	@ (800fdcc <TIM_OC5_SetConfig+0xf0>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d00f      	beq.n	800fd7e <TIM_OC5_SetConfig+0xa2>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4a1b      	ldr	r2, [pc, #108]	@ (800fdd0 <TIM_OC5_SetConfig+0xf4>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d00b      	beq.n	800fd7e <TIM_OC5_SetConfig+0xa2>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4a1a      	ldr	r2, [pc, #104]	@ (800fdd4 <TIM_OC5_SetConfig+0xf8>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d007      	beq.n	800fd7e <TIM_OC5_SetConfig+0xa2>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4a19      	ldr	r2, [pc, #100]	@ (800fdd8 <TIM_OC5_SetConfig+0xfc>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d003      	beq.n	800fd7e <TIM_OC5_SetConfig+0xa2>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4a18      	ldr	r2, [pc, #96]	@ (800fddc <TIM_OC5_SetConfig+0x100>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d109      	bne.n	800fd92 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fd84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	695b      	ldr	r3, [r3, #20]
 800fd8a:	021b      	lsls	r3, r3, #8
 800fd8c:	697a      	ldr	r2, [r7, #20]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	697a      	ldr	r2, [r7, #20]
 800fd96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	685a      	ldr	r2, [r3, #4]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	693a      	ldr	r2, [r7, #16]
 800fdaa:	621a      	str	r2, [r3, #32]
}
 800fdac:	bf00      	nop
 800fdae:	371c      	adds	r7, #28
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr
 800fdb8:	40012c00 	.word	0x40012c00
 800fdbc:	50012c00 	.word	0x50012c00
 800fdc0:	40013400 	.word	0x40013400
 800fdc4:	50013400 	.word	0x50013400
 800fdc8:	40014000 	.word	0x40014000
 800fdcc:	50014000 	.word	0x50014000
 800fdd0:	40014400 	.word	0x40014400
 800fdd4:	50014400 	.word	0x50014400
 800fdd8:	40014800 	.word	0x40014800
 800fddc:	50014800 	.word	0x50014800

0800fde0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b087      	sub	sp, #28
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6a1b      	ldr	r3, [r3, #32]
 800fdee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6a1b      	ldr	r3, [r3, #32]
 800fdf4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fe0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	021b      	lsls	r3, r3, #8
 800fe1a:	68fa      	ldr	r2, [r7, #12]
 800fe1c:	4313      	orrs	r3, r2
 800fe1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fe26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	051b      	lsls	r3, r3, #20
 800fe2e:	693a      	ldr	r2, [r7, #16]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4a22      	ldr	r2, [pc, #136]	@ (800fec0 <TIM_OC6_SetConfig+0xe0>)
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d023      	beq.n	800fe84 <TIM_OC6_SetConfig+0xa4>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	4a21      	ldr	r2, [pc, #132]	@ (800fec4 <TIM_OC6_SetConfig+0xe4>)
 800fe40:	4293      	cmp	r3, r2
 800fe42:	d01f      	beq.n	800fe84 <TIM_OC6_SetConfig+0xa4>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4a20      	ldr	r2, [pc, #128]	@ (800fec8 <TIM_OC6_SetConfig+0xe8>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d01b      	beq.n	800fe84 <TIM_OC6_SetConfig+0xa4>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4a1f      	ldr	r2, [pc, #124]	@ (800fecc <TIM_OC6_SetConfig+0xec>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d017      	beq.n	800fe84 <TIM_OC6_SetConfig+0xa4>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4a1e      	ldr	r2, [pc, #120]	@ (800fed0 <TIM_OC6_SetConfig+0xf0>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d013      	beq.n	800fe84 <TIM_OC6_SetConfig+0xa4>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4a1d      	ldr	r2, [pc, #116]	@ (800fed4 <TIM_OC6_SetConfig+0xf4>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d00f      	beq.n	800fe84 <TIM_OC6_SetConfig+0xa4>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	4a1c      	ldr	r2, [pc, #112]	@ (800fed8 <TIM_OC6_SetConfig+0xf8>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d00b      	beq.n	800fe84 <TIM_OC6_SetConfig+0xa4>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	4a1b      	ldr	r2, [pc, #108]	@ (800fedc <TIM_OC6_SetConfig+0xfc>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d007      	beq.n	800fe84 <TIM_OC6_SetConfig+0xa4>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	4a1a      	ldr	r2, [pc, #104]	@ (800fee0 <TIM_OC6_SetConfig+0x100>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d003      	beq.n	800fe84 <TIM_OC6_SetConfig+0xa4>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a19      	ldr	r2, [pc, #100]	@ (800fee4 <TIM_OC6_SetConfig+0x104>)
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d109      	bne.n	800fe98 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fe8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	695b      	ldr	r3, [r3, #20]
 800fe90:	029b      	lsls	r3, r3, #10
 800fe92:	697a      	ldr	r2, [r7, #20]
 800fe94:	4313      	orrs	r3, r2
 800fe96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	697a      	ldr	r2, [r7, #20]
 800fe9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	685a      	ldr	r2, [r3, #4]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	693a      	ldr	r2, [r7, #16]
 800feb0:	621a      	str	r2, [r3, #32]
}
 800feb2:	bf00      	nop
 800feb4:	371c      	adds	r7, #28
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	40012c00 	.word	0x40012c00
 800fec4:	50012c00 	.word	0x50012c00
 800fec8:	40013400 	.word	0x40013400
 800fecc:	50013400 	.word	0x50013400
 800fed0:	40014000 	.word	0x40014000
 800fed4:	50014000 	.word	0x50014000
 800fed8:	40014400 	.word	0x40014400
 800fedc:	50014400 	.word	0x50014400
 800fee0:	40014800 	.word	0x40014800
 800fee4:	50014800 	.word	0x50014800

0800fee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fee8:	b480      	push	{r7}
 800feea:	b087      	sub	sp, #28
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6a1b      	ldr	r3, [r3, #32]
 800fef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6a1b      	ldr	r3, [r3, #32]
 800fefe:	f023 0201 	bic.w	r2, r3, #1
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	699b      	ldr	r3, [r3, #24]
 800ff0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ff12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	011b      	lsls	r3, r3, #4
 800ff18:	693a      	ldr	r2, [r7, #16]
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	f023 030a 	bic.w	r3, r3, #10
 800ff24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ff26:	697a      	ldr	r2, [r7, #20]
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	693a      	ldr	r2, [r7, #16]
 800ff32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	621a      	str	r2, [r3, #32]
}
 800ff3a:	bf00      	nop
 800ff3c:	371c      	adds	r7, #28
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr

0800ff46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff46:	b480      	push	{r7}
 800ff48:	b087      	sub	sp, #28
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	60f8      	str	r0, [r7, #12]
 800ff4e:	60b9      	str	r1, [r7, #8]
 800ff50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	6a1b      	ldr	r3, [r3, #32]
 800ff56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	6a1b      	ldr	r3, [r3, #32]
 800ff5c:	f023 0210 	bic.w	r2, r3, #16
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	699b      	ldr	r3, [r3, #24]
 800ff68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ff70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	031b      	lsls	r3, r3, #12
 800ff76:	693a      	ldr	r2, [r7, #16]
 800ff78:	4313      	orrs	r3, r2
 800ff7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ff82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	011b      	lsls	r3, r3, #4
 800ff88:	697a      	ldr	r2, [r7, #20]
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	693a      	ldr	r2, [r7, #16]
 800ff92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	697a      	ldr	r2, [r7, #20]
 800ff98:	621a      	str	r2, [r3, #32]
}
 800ff9a:	bf00      	nop
 800ff9c:	371c      	adds	r7, #28
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	b085      	sub	sp, #20
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
 800ffae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	689b      	ldr	r3, [r3, #8]
 800ffb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ffbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ffc2:	683a      	ldr	r2, [r7, #0]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	f043 0307 	orr.w	r3, r3, #7
 800ffcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	609a      	str	r2, [r3, #8]
}
 800ffd4:	bf00      	nop
 800ffd6:	3714      	adds	r7, #20
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr

0800ffe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b087      	sub	sp, #28
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
 800ffec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	689b      	ldr	r3, [r3, #8]
 800fff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	021a      	lsls	r2, r3, #8
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	431a      	orrs	r2, r3
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	4313      	orrs	r3, r2
 8010008:	697a      	ldr	r2, [r7, #20]
 801000a:	4313      	orrs	r3, r2
 801000c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	697a      	ldr	r2, [r7, #20]
 8010012:	609a      	str	r2, [r3, #8]
}
 8010014:	bf00      	nop
 8010016:	371c      	adds	r7, #28
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010030:	2b01      	cmp	r3, #1
 8010032:	d101      	bne.n	8010038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010034:	2302      	movs	r3, #2
 8010036:	e097      	b.n	8010168 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2201      	movs	r2, #1
 801003c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2202      	movs	r2, #2
 8010044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a45      	ldr	r2, [pc, #276]	@ (8010174 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d00e      	beq.n	8010080 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	4a44      	ldr	r2, [pc, #272]	@ (8010178 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010068:	4293      	cmp	r3, r2
 801006a:	d009      	beq.n	8010080 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4a42      	ldr	r2, [pc, #264]	@ (801017c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d004      	beq.n	8010080 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a41      	ldr	r2, [pc, #260]	@ (8010180 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d108      	bne.n	8010092 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010086:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	68fa      	ldr	r2, [r7, #12]
 801008e:	4313      	orrs	r3, r2
 8010090:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801009c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	68fa      	ldr	r2, [r7, #12]
 80100a4:	4313      	orrs	r3, r2
 80100a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a2f      	ldr	r2, [pc, #188]	@ (8010174 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d040      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a2e      	ldr	r2, [pc, #184]	@ (8010178 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d03b      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80100cc:	d036      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80100d6:	d031      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4a29      	ldr	r2, [pc, #164]	@ (8010184 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d02c      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4a28      	ldr	r2, [pc, #160]	@ (8010188 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d027      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a26      	ldr	r2, [pc, #152]	@ (801018c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d022      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a25      	ldr	r2, [pc, #148]	@ (8010190 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d01d      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a23      	ldr	r2, [pc, #140]	@ (8010194 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d018      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4a22      	ldr	r2, [pc, #136]	@ (8010198 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d013      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4a18      	ldr	r2, [pc, #96]	@ (801017c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d00e      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a17      	ldr	r2, [pc, #92]	@ (8010180 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d009      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a1b      	ldr	r2, [pc, #108]	@ (801019c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d004      	beq.n	801013c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a1a      	ldr	r2, [pc, #104]	@ (80101a0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d10c      	bne.n	8010156 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010142:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	68ba      	ldr	r2, [r7, #8]
 801014a:	4313      	orrs	r3, r2
 801014c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2201      	movs	r2, #1
 801015a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010166:	2300      	movs	r3, #0
}
 8010168:	4618      	mov	r0, r3
 801016a:	3714      	adds	r7, #20
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr
 8010174:	40012c00 	.word	0x40012c00
 8010178:	50012c00 	.word	0x50012c00
 801017c:	40013400 	.word	0x40013400
 8010180:	50013400 	.word	0x50013400
 8010184:	40000400 	.word	0x40000400
 8010188:	50000400 	.word	0x50000400
 801018c:	40000800 	.word	0x40000800
 8010190:	50000800 	.word	0x50000800
 8010194:	40000c00 	.word	0x40000c00
 8010198:	50000c00 	.word	0x50000c00
 801019c:	40014000 	.word	0x40014000
 80101a0:	50014000 	.word	0x50014000

080101a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d101      	bne.n	80101b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101b2:	2301      	movs	r3, #1
 80101b4:	e042      	b.n	801023c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d106      	bne.n	80101ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7f2 fd27 	bl	8002c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2224      	movs	r2, #36	@ 0x24
 80101d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f022 0201 	bic.w	r2, r2, #1
 80101e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 fd02 	bl	8010bf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 fb51 	bl	801089c <UART_SetConfig>
 80101fa:	4603      	mov	r3, r0
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d101      	bne.n	8010204 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010200:	2301      	movs	r3, #1
 8010202:	e01b      	b.n	801023c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	685a      	ldr	r2, [r3, #4]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	689a      	ldr	r2, [r3, #8]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f042 0201 	orr.w	r2, r2, #1
 8010232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 fd81 	bl	8010d3c <UART_CheckIdleState>
 801023a:	4603      	mov	r3, r0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b0ba      	sub	sp, #232	@ 0xe8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	69db      	ldr	r3, [r3, #28]
 8010252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801026a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801026e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010272:	4013      	ands	r3, r2
 8010274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801027c:	2b00      	cmp	r3, #0
 801027e:	d11b      	bne.n	80102b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010284:	f003 0320 	and.w	r3, r3, #32
 8010288:	2b00      	cmp	r3, #0
 801028a:	d015      	beq.n	80102b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801028c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010290:	f003 0320 	and.w	r3, r3, #32
 8010294:	2b00      	cmp	r3, #0
 8010296:	d105      	bne.n	80102a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801029c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d009      	beq.n	80102b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f000 82cb 	beq.w	8010844 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	4798      	blx	r3
      }
      return;
 80102b6:	e2c5      	b.n	8010844 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80102b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80102bc:	2b00      	cmp	r3, #0
 80102be:	f000 8123 	beq.w	8010508 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80102c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80102c6:	4b8d      	ldr	r3, [pc, #564]	@ (80104fc <HAL_UART_IRQHandler+0x2b8>)
 80102c8:	4013      	ands	r3, r2
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80102ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80102d2:	4b8b      	ldr	r3, [pc, #556]	@ (8010500 <HAL_UART_IRQHandler+0x2bc>)
 80102d4:	4013      	ands	r3, r2
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	f000 8116 	beq.w	8010508 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102e0:	f003 0301 	and.w	r3, r3, #1
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d011      	beq.n	801030c <HAL_UART_IRQHandler+0xc8>
 80102e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00b      	beq.n	801030c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2201      	movs	r2, #1
 80102fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010302:	f043 0201 	orr.w	r2, r3, #1
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801030c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010310:	f003 0302 	and.w	r3, r3, #2
 8010314:	2b00      	cmp	r3, #0
 8010316:	d011      	beq.n	801033c <HAL_UART_IRQHandler+0xf8>
 8010318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801031c:	f003 0301 	and.w	r3, r3, #1
 8010320:	2b00      	cmp	r3, #0
 8010322:	d00b      	beq.n	801033c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2202      	movs	r2, #2
 801032a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010332:	f043 0204 	orr.w	r2, r3, #4
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801033c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010340:	f003 0304 	and.w	r3, r3, #4
 8010344:	2b00      	cmp	r3, #0
 8010346:	d011      	beq.n	801036c <HAL_UART_IRQHandler+0x128>
 8010348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801034c:	f003 0301 	and.w	r3, r3, #1
 8010350:	2b00      	cmp	r3, #0
 8010352:	d00b      	beq.n	801036c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2204      	movs	r2, #4
 801035a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010362:	f043 0202 	orr.w	r2, r3, #2
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801036c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010370:	f003 0308 	and.w	r3, r3, #8
 8010374:	2b00      	cmp	r3, #0
 8010376:	d017      	beq.n	80103a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801037c:	f003 0320 	and.w	r3, r3, #32
 8010380:	2b00      	cmp	r3, #0
 8010382:	d105      	bne.n	8010390 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010384:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010388:	4b5c      	ldr	r3, [pc, #368]	@ (80104fc <HAL_UART_IRQHandler+0x2b8>)
 801038a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00b      	beq.n	80103a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2208      	movs	r2, #8
 8010396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801039e:	f043 0208 	orr.w	r2, r3, #8
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80103a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d012      	beq.n	80103da <HAL_UART_IRQHandler+0x196>
 80103b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00c      	beq.n	80103da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80103c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103d0:	f043 0220 	orr.w	r2, r3, #32
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f000 8231 	beq.w	8010848 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80103e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103ea:	f003 0320 	and.w	r3, r3, #32
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d013      	beq.n	801041a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103f6:	f003 0320 	and.w	r3, r3, #32
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d105      	bne.n	801040a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010406:	2b00      	cmp	r3, #0
 8010408:	d007      	beq.n	801041a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801040e:	2b00      	cmp	r3, #0
 8010410:	d003      	beq.n	801041a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010420:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	689b      	ldr	r3, [r3, #8]
 801042a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801042e:	2b40      	cmp	r3, #64	@ 0x40
 8010430:	d005      	beq.n	801043e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010436:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801043a:	2b00      	cmp	r3, #0
 801043c:	d054      	beq.n	80104e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 fd93 	bl	8010f6a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	689b      	ldr	r3, [r3, #8]
 801044a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801044e:	2b40      	cmp	r3, #64	@ 0x40
 8010450:	d146      	bne.n	80104e0 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	3308      	adds	r3, #8
 8010458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010460:	e853 3f00 	ldrex	r3, [r3]
 8010464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801046c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3308      	adds	r3, #8
 801047a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801047e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801048a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801048e:	e841 2300 	strex	r3, r2, [r1]
 8010492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801049a:	2b00      	cmp	r3, #0
 801049c:	d1d9      	bne.n	8010452 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d017      	beq.n	80104d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104ae:	4a15      	ldr	r2, [pc, #84]	@ (8010504 <HAL_UART_IRQHandler+0x2c0>)
 80104b0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7f5 fe13 	bl	80060e4 <HAL_DMA_Abort_IT>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d019      	beq.n	80104f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80104d2:	4610      	mov	r0, r2
 80104d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104d6:	e00f      	b.n	80104f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 f9c9 	bl	8010870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104de:	e00b      	b.n	80104f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f9c5 	bl	8010870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104e6:	e007      	b.n	80104f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 f9c1 	bl	8010870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2200      	movs	r2, #0
 80104f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80104f6:	e1a7      	b.n	8010848 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104f8:	bf00      	nop
    return;
 80104fa:	e1a5      	b.n	8010848 <HAL_UART_IRQHandler+0x604>
 80104fc:	10000001 	.word	0x10000001
 8010500:	04000120 	.word	0x04000120
 8010504:	08011037 	.word	0x08011037

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801050c:	2b01      	cmp	r3, #1
 801050e:	f040 8150 	bne.w	80107b2 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010516:	f003 0310 	and.w	r3, r3, #16
 801051a:	2b00      	cmp	r3, #0
 801051c:	f000 8149 	beq.w	80107b2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010524:	f003 0310 	and.w	r3, r3, #16
 8010528:	2b00      	cmp	r3, #0
 801052a:	f000 8142 	beq.w	80107b2 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2210      	movs	r2, #16
 8010534:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010540:	2b40      	cmp	r3, #64	@ 0x40
 8010542:	f040 80b8 	bne.w	80106b6 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010550:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 8177 	beq.w	801084c <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010568:	429a      	cmp	r2, r3
 801056a:	f080 816f 	bcs.w	801084c <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010574:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801057e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010580:	2b81      	cmp	r3, #129	@ 0x81
 8010582:	f000 8087 	beq.w	8010694 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010592:	e853 3f00 	ldrex	r3, [r3]
 8010596:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801059a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801059e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80105a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	461a      	mov	r2, r3
 80105ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80105b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80105b4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80105bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80105c0:	e841 2300 	strex	r3, r2, [r1]
 80105c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80105c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1da      	bne.n	8010586 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	3308      	adds	r3, #8
 80105d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80105da:	e853 3f00 	ldrex	r3, [r3]
 80105de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80105e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80105e2:	f023 0301 	bic.w	r3, r3, #1
 80105e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	3308      	adds	r3, #8
 80105f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80105f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80105f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80105fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010600:	e841 2300 	strex	r3, r2, [r1]
 8010604:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010606:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1e1      	bne.n	80105d0 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3308      	adds	r3, #8
 8010612:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010614:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010616:	e853 3f00 	ldrex	r3, [r3]
 801061a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801061c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801061e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	3308      	adds	r3, #8
 801062c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010630:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010632:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010634:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010636:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010638:	e841 2300 	strex	r3, r2, [r1]
 801063c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801063e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010640:	2b00      	cmp	r3, #0
 8010642:	d1e3      	bne.n	801060c <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2220      	movs	r2, #32
 8010648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801065a:	e853 3f00 	ldrex	r3, [r3]
 801065e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010662:	f023 0310 	bic.w	r3, r3, #16
 8010666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	461a      	mov	r2, r3
 8010670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010674:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010676:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010678:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801067a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801067c:	e841 2300 	strex	r3, r2, [r1]
 8010680:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010684:	2b00      	cmp	r3, #0
 8010686:	d1e4      	bne.n	8010652 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801068e:	4618      	mov	r0, r3
 8010690:	f7f5 fcac 	bl	8005fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2202      	movs	r2, #2
 8010698:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	4619      	mov	r1, r3
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 f8e8 	bl	8010884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80106b4:	e0ca      	b.n	801084c <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	1ad3      	subs	r3, r2, r3
 80106c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f000 80bc 	beq.w	8010850 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80106d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80106dc:	2b00      	cmp	r3, #0
 80106de:	f000 80b7 	beq.w	8010850 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ea:	e853 3f00 	ldrex	r3, [r3]
 80106ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80106f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	461a      	mov	r2, r3
 8010700:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010704:	647b      	str	r3, [r7, #68]	@ 0x44
 8010706:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801070a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801070c:	e841 2300 	strex	r3, r2, [r1]
 8010710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1e4      	bne.n	80106e2 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	3308      	adds	r3, #8
 801071e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010722:	e853 3f00 	ldrex	r3, [r3]
 8010726:	623b      	str	r3, [r7, #32]
   return(result);
 8010728:	6a3b      	ldr	r3, [r7, #32]
 801072a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801072e:	f023 0301 	bic.w	r3, r3, #1
 8010732:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	3308      	adds	r3, #8
 801073c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010740:	633a      	str	r2, [r7, #48]	@ 0x30
 8010742:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010744:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010748:	e841 2300 	strex	r3, r2, [r1]
 801074c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801074e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010750:	2b00      	cmp	r3, #0
 8010752:	d1e1      	bne.n	8010718 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2220      	movs	r2, #32
 8010758:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	e853 3f00 	ldrex	r3, [r3]
 8010774:	60fb      	str	r3, [r7, #12]
   return(result);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f023 0310 	bic.w	r3, r3, #16
 801077c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	461a      	mov	r2, r3
 8010786:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801078a:	61fb      	str	r3, [r7, #28]
 801078c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078e:	69b9      	ldr	r1, [r7, #24]
 8010790:	69fa      	ldr	r2, [r7, #28]
 8010792:	e841 2300 	strex	r3, r2, [r1]
 8010796:	617b      	str	r3, [r7, #20]
   return(result);
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d1e4      	bne.n	8010768 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2202      	movs	r2, #2
 80107a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80107a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80107a8:	4619      	mov	r1, r3
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 f86a 	bl	8010884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80107b0:	e04e      	b.n	8010850 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80107b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80107b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d014      	beq.n	80107e8 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80107be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80107c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d105      	bne.n	80107d6 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80107ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80107ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d008      	beq.n	80107e8 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d03a      	beq.n	8010854 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	4798      	blx	r3
    }
    return;
 80107e6:	e035      	b.n	8010854 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80107e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80107ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d009      	beq.n	8010808 <HAL_UART_IRQHandler+0x5c4>
 80107f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80107f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d003      	beq.n	8010808 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fc2e 	bl	8011062 <UART_EndTransmit_IT>
    return;
 8010806:	e026      	b.n	8010856 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801080c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010810:	2b00      	cmp	r3, #0
 8010812:	d009      	beq.n	8010828 <HAL_UART_IRQHandler+0x5e4>
 8010814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010818:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 fc53 	bl	80110cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010826:	e016      	b.n	8010856 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801082c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010830:	2b00      	cmp	r3, #0
 8010832:	d010      	beq.n	8010856 <HAL_UART_IRQHandler+0x612>
 8010834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010838:	2b00      	cmp	r3, #0
 801083a:	da0c      	bge.n	8010856 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f000 fc3b 	bl	80110b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010842:	e008      	b.n	8010856 <HAL_UART_IRQHandler+0x612>
      return;
 8010844:	bf00      	nop
 8010846:	e006      	b.n	8010856 <HAL_UART_IRQHandler+0x612>
    return;
 8010848:	bf00      	nop
 801084a:	e004      	b.n	8010856 <HAL_UART_IRQHandler+0x612>
      return;
 801084c:	bf00      	nop
 801084e:	e002      	b.n	8010856 <HAL_UART_IRQHandler+0x612>
      return;
 8010850:	bf00      	nop
 8010852:	e000      	b.n	8010856 <HAL_UART_IRQHandler+0x612>
    return;
 8010854:	bf00      	nop
  }
}
 8010856:	37e8      	adds	r7, #232	@ 0xe8
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010864:	bf00      	nop
 8010866:	370c      	adds	r7, #12
 8010868:	46bd      	mov	sp, r7
 801086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086e:	4770      	bx	lr

08010870 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	460b      	mov	r3, r1
 801088e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010890:	bf00      	nop
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801089c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80108a0:	b094      	sub	sp, #80	@ 0x50
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80108a6:	2300      	movs	r3, #0
 80108a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80108ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ae:	681a      	ldr	r2, [r3, #0]
 80108b0:	4b83      	ldr	r3, [pc, #524]	@ (8010ac0 <UART_SetConfig+0x224>)
 80108b2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80108b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b6:	689a      	ldr	r2, [r3, #8]
 80108b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ba:	691b      	ldr	r3, [r3, #16]
 80108bc:	431a      	orrs	r2, r3
 80108be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c0:	695b      	ldr	r3, [r3, #20]
 80108c2:	431a      	orrs	r2, r3
 80108c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c6:	69db      	ldr	r3, [r3, #28]
 80108c8:	4313      	orrs	r3, r2
 80108ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	497c      	ldr	r1, [pc, #496]	@ (8010ac4 <UART_SetConfig+0x228>)
 80108d4:	4019      	ands	r1, r3
 80108d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108dc:	430b      	orrs	r3, r1
 80108de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80108ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ec:	68d9      	ldr	r1, [r3, #12]
 80108ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	ea40 0301 	orr.w	r3, r0, r1
 80108f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80108f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108fa:	699b      	ldr	r3, [r3, #24]
 80108fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80108fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	4b6f      	ldr	r3, [pc, #444]	@ (8010ac0 <UART_SetConfig+0x224>)
 8010904:	429a      	cmp	r2, r3
 8010906:	d009      	beq.n	801091c <UART_SetConfig+0x80>
 8010908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	4b6e      	ldr	r3, [pc, #440]	@ (8010ac8 <UART_SetConfig+0x22c>)
 801090e:	429a      	cmp	r2, r3
 8010910:	d004      	beq.n	801091c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010914:	6a1a      	ldr	r2, [r3, #32]
 8010916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010918:	4313      	orrs	r3, r2
 801091a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801091c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	689b      	ldr	r3, [r3, #8]
 8010922:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8010926:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801092a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010930:	430b      	orrs	r3, r1
 8010932:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801093a:	f023 000f 	bic.w	r0, r3, #15
 801093e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010940:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	ea40 0301 	orr.w	r3, r0, r1
 801094a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801094c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	4b5e      	ldr	r3, [pc, #376]	@ (8010acc <UART_SetConfig+0x230>)
 8010952:	429a      	cmp	r2, r3
 8010954:	d102      	bne.n	801095c <UART_SetConfig+0xc0>
 8010956:	2301      	movs	r3, #1
 8010958:	64bb      	str	r3, [r7, #72]	@ 0x48
 801095a:	e032      	b.n	80109c2 <UART_SetConfig+0x126>
 801095c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	4b5b      	ldr	r3, [pc, #364]	@ (8010ad0 <UART_SetConfig+0x234>)
 8010962:	429a      	cmp	r2, r3
 8010964:	d102      	bne.n	801096c <UART_SetConfig+0xd0>
 8010966:	2302      	movs	r3, #2
 8010968:	64bb      	str	r3, [r7, #72]	@ 0x48
 801096a:	e02a      	b.n	80109c2 <UART_SetConfig+0x126>
 801096c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	4b58      	ldr	r3, [pc, #352]	@ (8010ad4 <UART_SetConfig+0x238>)
 8010972:	429a      	cmp	r2, r3
 8010974:	d102      	bne.n	801097c <UART_SetConfig+0xe0>
 8010976:	2304      	movs	r3, #4
 8010978:	64bb      	str	r3, [r7, #72]	@ 0x48
 801097a:	e022      	b.n	80109c2 <UART_SetConfig+0x126>
 801097c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801097e:	681a      	ldr	r2, [r3, #0]
 8010980:	4b55      	ldr	r3, [pc, #340]	@ (8010ad8 <UART_SetConfig+0x23c>)
 8010982:	429a      	cmp	r2, r3
 8010984:	d102      	bne.n	801098c <UART_SetConfig+0xf0>
 8010986:	2308      	movs	r3, #8
 8010988:	64bb      	str	r3, [r7, #72]	@ 0x48
 801098a:	e01a      	b.n	80109c2 <UART_SetConfig+0x126>
 801098c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	4b52      	ldr	r3, [pc, #328]	@ (8010adc <UART_SetConfig+0x240>)
 8010992:	429a      	cmp	r2, r3
 8010994:	d102      	bne.n	801099c <UART_SetConfig+0x100>
 8010996:	2310      	movs	r3, #16
 8010998:	64bb      	str	r3, [r7, #72]	@ 0x48
 801099a:	e012      	b.n	80109c2 <UART_SetConfig+0x126>
 801099c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	4b4f      	ldr	r3, [pc, #316]	@ (8010ae0 <UART_SetConfig+0x244>)
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d103      	bne.n	80109ae <UART_SetConfig+0x112>
 80109a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80109aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109ac:	e009      	b.n	80109c2 <UART_SetConfig+0x126>
 80109ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b0:	681a      	ldr	r2, [r3, #0]
 80109b2:	4b43      	ldr	r3, [pc, #268]	@ (8010ac0 <UART_SetConfig+0x224>)
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d102      	bne.n	80109be <UART_SetConfig+0x122>
 80109b8:	2320      	movs	r3, #32
 80109ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109bc:	e001      	b.n	80109c2 <UART_SetConfig+0x126>
 80109be:	2300      	movs	r3, #0
 80109c0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80109c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	4b3e      	ldr	r3, [pc, #248]	@ (8010ac0 <UART_SetConfig+0x224>)
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d005      	beq.n	80109d8 <UART_SetConfig+0x13c>
 80109cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	4b3d      	ldr	r3, [pc, #244]	@ (8010ac8 <UART_SetConfig+0x22c>)
 80109d2:	429a      	cmp	r2, r3
 80109d4:	f040 8088 	bne.w	8010ae8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80109d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109da:	2200      	movs	r2, #0
 80109dc:	623b      	str	r3, [r7, #32]
 80109de:	627a      	str	r2, [r7, #36]	@ 0x24
 80109e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80109e4:	f7fb fef2 	bl	800c7cc <HAL_RCCEx_GetPeriphCLKFreq>
 80109e8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80109ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f000 80eb 	beq.w	8010bc8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80109f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109f6:	4a3b      	ldr	r2, [pc, #236]	@ (8010ae4 <UART_SetConfig+0x248>)
 80109f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109fc:	461a      	mov	r2, r3
 80109fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a04:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a08:	685a      	ldr	r2, [r3, #4]
 8010a0a:	4613      	mov	r3, r2
 8010a0c:	005b      	lsls	r3, r3, #1
 8010a0e:	4413      	add	r3, r2
 8010a10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d305      	bcc.n	8010a22 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d903      	bls.n	8010a2a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8010a22:	2301      	movs	r3, #1
 8010a24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010a28:	e048      	b.n	8010abc <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	61bb      	str	r3, [r7, #24]
 8010a30:	61fa      	str	r2, [r7, #28]
 8010a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a36:	4a2b      	ldr	r2, [pc, #172]	@ (8010ae4 <UART_SetConfig+0x248>)
 8010a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	2200      	movs	r2, #0
 8010a40:	613b      	str	r3, [r7, #16]
 8010a42:	617a      	str	r2, [r7, #20]
 8010a44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010a48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010a4c:	f7f0 f852 	bl	8000af4 <__aeabi_uldivmod>
 8010a50:	4602      	mov	r2, r0
 8010a52:	460b      	mov	r3, r1
 8010a54:	4610      	mov	r0, r2
 8010a56:	4619      	mov	r1, r3
 8010a58:	f04f 0200 	mov.w	r2, #0
 8010a5c:	f04f 0300 	mov.w	r3, #0
 8010a60:	020b      	lsls	r3, r1, #8
 8010a62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010a66:	0202      	lsls	r2, r0, #8
 8010a68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a6a:	6849      	ldr	r1, [r1, #4]
 8010a6c:	0849      	lsrs	r1, r1, #1
 8010a6e:	2000      	movs	r0, #0
 8010a70:	460c      	mov	r4, r1
 8010a72:	4605      	mov	r5, r0
 8010a74:	eb12 0804 	adds.w	r8, r2, r4
 8010a78:	eb43 0905 	adc.w	r9, r3, r5
 8010a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	60bb      	str	r3, [r7, #8]
 8010a84:	60fa      	str	r2, [r7, #12]
 8010a86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a8a:	4640      	mov	r0, r8
 8010a8c:	4649      	mov	r1, r9
 8010a8e:	f7f0 f831 	bl	8000af4 <__aeabi_uldivmod>
 8010a92:	4602      	mov	r2, r0
 8010a94:	460b      	mov	r3, r1
 8010a96:	4613      	mov	r3, r2
 8010a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010aa0:	d308      	bcc.n	8010ab4 <UART_SetConfig+0x218>
 8010aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010aa8:	d204      	bcs.n	8010ab4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8010aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010ab0:	60da      	str	r2, [r3, #12]
 8010ab2:	e003      	b.n	8010abc <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8010aba:	e085      	b.n	8010bc8 <UART_SetConfig+0x32c>
 8010abc:	e084      	b.n	8010bc8 <UART_SetConfig+0x32c>
 8010abe:	bf00      	nop
 8010ac0:	46002400 	.word	0x46002400
 8010ac4:	cfff69f3 	.word	0xcfff69f3
 8010ac8:	56002400 	.word	0x56002400
 8010acc:	40013800 	.word	0x40013800
 8010ad0:	40004400 	.word	0x40004400
 8010ad4:	40004800 	.word	0x40004800
 8010ad8:	40004c00 	.word	0x40004c00
 8010adc:	40005000 	.word	0x40005000
 8010ae0:	40006400 	.word	0x40006400
 8010ae4:	08011d00 	.word	0x08011d00
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aea:	69db      	ldr	r3, [r3, #28]
 8010aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010af0:	d13c      	bne.n	8010b6c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010af4:	2200      	movs	r2, #0
 8010af6:	603b      	str	r3, [r7, #0]
 8010af8:	607a      	str	r2, [r7, #4]
 8010afa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010afe:	f7fb fe65 	bl	800c7cc <HAL_RCCEx_GetPeriphCLKFreq>
 8010b02:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d05e      	beq.n	8010bc8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b0e:	4a39      	ldr	r2, [pc, #228]	@ (8010bf4 <UART_SetConfig+0x358>)
 8010b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b14:	461a      	mov	r2, r3
 8010b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b1c:	005a      	lsls	r2, r3, #1
 8010b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	085b      	lsrs	r3, r3, #1
 8010b24:	441a      	add	r2, r3
 8010b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b32:	2b0f      	cmp	r3, #15
 8010b34:	d916      	bls.n	8010b64 <UART_SetConfig+0x2c8>
 8010b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b3c:	d212      	bcs.n	8010b64 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	f023 030f 	bic.w	r3, r3, #15
 8010b46:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b4a:	085b      	lsrs	r3, r3, #1
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	f003 0307 	and.w	r3, r3, #7
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010b56:	4313      	orrs	r3, r2
 8010b58:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010b60:	60da      	str	r2, [r3, #12]
 8010b62:	e031      	b.n	8010bc8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010b64:	2301      	movs	r3, #1
 8010b66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010b6a:	e02d      	b.n	8010bc8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b6e:	2200      	movs	r2, #0
 8010b70:	469a      	mov	sl, r3
 8010b72:	4693      	mov	fp, r2
 8010b74:	4650      	mov	r0, sl
 8010b76:	4659      	mov	r1, fp
 8010b78:	f7fb fe28 	bl	800c7cc <HAL_RCCEx_GetPeriphCLKFreq>
 8010b7c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d021      	beq.n	8010bc8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b88:	4a1a      	ldr	r2, [pc, #104]	@ (8010bf4 <UART_SetConfig+0x358>)
 8010b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b8e:	461a      	mov	r2, r3
 8010b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b92:	fbb3 f2f2 	udiv	r2, r3, r2
 8010b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b98:	685b      	ldr	r3, [r3, #4]
 8010b9a:	085b      	lsrs	r3, r3, #1
 8010b9c:	441a      	add	r2, r3
 8010b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010baa:	2b0f      	cmp	r3, #15
 8010bac:	d909      	bls.n	8010bc2 <UART_SetConfig+0x326>
 8010bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010bb4:	d205      	bcs.n	8010bc2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	60da      	str	r2, [r3, #12]
 8010bc0:	e002      	b.n	8010bc8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bca:	2201      	movs	r2, #1
 8010bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bda:	2200      	movs	r2, #0
 8010bdc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be0:	2200      	movs	r2, #0
 8010be2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010be4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3750      	adds	r7, #80	@ 0x50
 8010bec:	46bd      	mov	sp, r7
 8010bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010bf2:	bf00      	nop
 8010bf4:	08011d00 	.word	0x08011d00

08010bf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c04:	f003 0308 	and.w	r3, r3, #8
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d00a      	beq.n	8010c22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	430a      	orrs	r2, r1
 8010c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c26:	f003 0301 	and.w	r3, r3, #1
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00a      	beq.n	8010c44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	430a      	orrs	r2, r1
 8010c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c48:	f003 0302 	and.w	r3, r3, #2
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00a      	beq.n	8010c66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	430a      	orrs	r2, r1
 8010c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c6a:	f003 0304 	and.w	r3, r3, #4
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00a      	beq.n	8010c88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	430a      	orrs	r2, r1
 8010c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c8c:	f003 0310 	and.w	r3, r3, #16
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00a      	beq.n	8010caa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	689b      	ldr	r3, [r3, #8]
 8010c9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	430a      	orrs	r2, r1
 8010ca8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cae:	f003 0320 	and.w	r3, r3, #32
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00a      	beq.n	8010ccc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	689b      	ldr	r3, [r3, #8]
 8010cbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	430a      	orrs	r2, r1
 8010cca:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d01a      	beq.n	8010d0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	430a      	orrs	r2, r1
 8010cec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010cf6:	d10a      	bne.n	8010d0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	430a      	orrs	r2, r1
 8010d0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d00a      	beq.n	8010d30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	430a      	orrs	r2, r1
 8010d2e:	605a      	str	r2, [r3, #4]
  }
}
 8010d30:	bf00      	nop
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b098      	sub	sp, #96	@ 0x60
 8010d40:	af02      	add	r7, sp, #8
 8010d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010d4c:	f7f2 fbf6 	bl	800353c <HAL_GetTick>
 8010d50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f003 0308 	and.w	r3, r3, #8
 8010d5c:	2b08      	cmp	r3, #8
 8010d5e:	d12f      	bne.n	8010dc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010d60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010d64:	9300      	str	r3, [sp, #0]
 8010d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d68:	2200      	movs	r2, #0
 8010d6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 f88e 	bl	8010e90 <UART_WaitOnFlagUntilTimeout>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d022      	beq.n	8010dc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d82:	e853 3f00 	ldrex	r3, [r3]
 8010d86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	461a      	mov	r2, r3
 8010d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010d9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010da0:	e841 2300 	strex	r3, r2, [r1]
 8010da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1e6      	bne.n	8010d7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2220      	movs	r2, #32
 8010db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010dbc:	2303      	movs	r3, #3
 8010dbe:	e063      	b.n	8010e88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 0304 	and.w	r3, r3, #4
 8010dca:	2b04      	cmp	r3, #4
 8010dcc:	d149      	bne.n	8010e62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010dce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 f857 	bl	8010e90 <UART_WaitOnFlagUntilTimeout>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d03c      	beq.n	8010e62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010df0:	e853 3f00 	ldrex	r3, [r3]
 8010df4:	623b      	str	r3, [r7, #32]
   return(result);
 8010df6:	6a3b      	ldr	r3, [r7, #32]
 8010df8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	461a      	mov	r2, r3
 8010e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e0e:	e841 2300 	strex	r3, r2, [r1]
 8010e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d1e6      	bne.n	8010de8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	3308      	adds	r3, #8
 8010e20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	e853 3f00 	ldrex	r3, [r3]
 8010e28:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f023 0301 	bic.w	r3, r3, #1
 8010e30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	3308      	adds	r3, #8
 8010e38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e3a:	61fa      	str	r2, [r7, #28]
 8010e3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e3e:	69b9      	ldr	r1, [r7, #24]
 8010e40:	69fa      	ldr	r2, [r7, #28]
 8010e42:	e841 2300 	strex	r3, r2, [r1]
 8010e46:	617b      	str	r3, [r7, #20]
   return(result);
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d1e5      	bne.n	8010e1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2220      	movs	r2, #32
 8010e52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e5e:	2303      	movs	r3, #3
 8010e60:	e012      	b.n	8010e88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2220      	movs	r2, #32
 8010e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2220      	movs	r2, #32
 8010e6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2200      	movs	r2, #0
 8010e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e86:	2300      	movs	r3, #0
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3758      	adds	r7, #88	@ 0x58
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	603b      	str	r3, [r7, #0]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ea0:	e04f      	b.n	8010f42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea8:	d04b      	beq.n	8010f42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010eaa:	f7f2 fb47 	bl	800353c <HAL_GetTick>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	69ba      	ldr	r2, [r7, #24]
 8010eb6:	429a      	cmp	r2, r3
 8010eb8:	d302      	bcc.n	8010ec0 <UART_WaitOnFlagUntilTimeout+0x30>
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d101      	bne.n	8010ec4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010ec0:	2303      	movs	r3, #3
 8010ec2:	e04e      	b.n	8010f62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f003 0304 	and.w	r3, r3, #4
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d037      	beq.n	8010f42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	2b80      	cmp	r3, #128	@ 0x80
 8010ed6:	d034      	beq.n	8010f42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2b40      	cmp	r3, #64	@ 0x40
 8010edc:	d031      	beq.n	8010f42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	69db      	ldr	r3, [r3, #28]
 8010ee4:	f003 0308 	and.w	r3, r3, #8
 8010ee8:	2b08      	cmp	r3, #8
 8010eea:	d110      	bne.n	8010f0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	2208      	movs	r2, #8
 8010ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	f000 f838 	bl	8010f6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2208      	movs	r2, #8
 8010efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e029      	b.n	8010f62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	69db      	ldr	r3, [r3, #28]
 8010f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010f1c:	d111      	bne.n	8010f42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010f26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010f28:	68f8      	ldr	r0, [r7, #12]
 8010f2a:	f000 f81e 	bl	8010f6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2220      	movs	r2, #32
 8010f32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010f3e:	2303      	movs	r3, #3
 8010f40:	e00f      	b.n	8010f62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	69da      	ldr	r2, [r3, #28]
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	4013      	ands	r3, r2
 8010f4c:	68ba      	ldr	r2, [r7, #8]
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	bf0c      	ite	eq
 8010f52:	2301      	moveq	r3, #1
 8010f54:	2300      	movne	r3, #0
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	461a      	mov	r2, r3
 8010f5a:	79fb      	ldrb	r3, [r7, #7]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d0a0      	beq.n	8010ea2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010f60:	2300      	movs	r3, #0
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3710      	adds	r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010f6a:	b480      	push	{r7}
 8010f6c:	b095      	sub	sp, #84	@ 0x54
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f7a:	e853 3f00 	ldrex	r3, [r3]
 8010f7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f98:	e841 2300 	strex	r3, r2, [r1]
 8010f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1e6      	bne.n	8010f72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	3308      	adds	r3, #8
 8010faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	e853 3f00 	ldrex	r3, [r3]
 8010fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010fba:	f023 0301 	bic.w	r3, r3, #1
 8010fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	3308      	adds	r3, #8
 8010fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010fc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010fd0:	e841 2300 	strex	r3, r2, [r1]
 8010fd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d1e3      	bne.n	8010fa4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d118      	bne.n	8011016 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	e853 3f00 	ldrex	r3, [r3]
 8010ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	f023 0310 	bic.w	r3, r3, #16
 8010ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	461a      	mov	r2, r3
 8011000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011002:	61bb      	str	r3, [r7, #24]
 8011004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011006:	6979      	ldr	r1, [r7, #20]
 8011008:	69ba      	ldr	r2, [r7, #24]
 801100a:	e841 2300 	strex	r3, r2, [r1]
 801100e:	613b      	str	r3, [r7, #16]
   return(result);
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d1e6      	bne.n	8010fe4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2220      	movs	r2, #32
 801101a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2200      	movs	r2, #0
 8011022:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2200      	movs	r2, #0
 8011028:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801102a:	bf00      	nop
 801102c:	3754      	adds	r7, #84	@ 0x54
 801102e:	46bd      	mov	sp, r7
 8011030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011034:	4770      	bx	lr

08011036 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011036:	b580      	push	{r7, lr}
 8011038:	b084      	sub	sp, #16
 801103a:	af00      	add	r7, sp, #0
 801103c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2200      	movs	r2, #0
 8011048:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2200      	movs	r2, #0
 8011050:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	f7ff fc0b 	bl	8010870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801105a:	bf00      	nop
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}

08011062 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011062:	b580      	push	{r7, lr}
 8011064:	b088      	sub	sp, #32
 8011066:	af00      	add	r7, sp, #0
 8011068:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	e853 3f00 	ldrex	r3, [r3]
 8011076:	60bb      	str	r3, [r7, #8]
   return(result);
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801107e:	61fb      	str	r3, [r7, #28]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	461a      	mov	r2, r3
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	61bb      	str	r3, [r7, #24]
 801108a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801108c:	6979      	ldr	r1, [r7, #20]
 801108e:	69ba      	ldr	r2, [r7, #24]
 8011090:	e841 2300 	strex	r3, r2, [r1]
 8011094:	613b      	str	r3, [r7, #16]
   return(result);
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1e6      	bne.n	801106a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2220      	movs	r2, #32
 80110a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2200      	movs	r2, #0
 80110a8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f7ff fbd6 	bl	801085c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80110b0:	bf00      	nop
 80110b2:	3720      	adds	r7, #32
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80110c0:	bf00      	nop
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80110d4:	bf00      	nop
 80110d6:	370c      	adds	r7, #12
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr

080110e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b085      	sub	sp, #20
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d101      	bne.n	80110f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80110f2:	2302      	movs	r3, #2
 80110f4:	e027      	b.n	8011146 <HAL_UARTEx_DisableFifoMode+0x66>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2201      	movs	r2, #1
 80110fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2224      	movs	r2, #36	@ 0x24
 8011102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	681a      	ldr	r2, [r3, #0]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	f022 0201 	bic.w	r2, r2, #1
 801111c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011124:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2200      	movs	r2, #0
 801112a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2220      	movs	r2, #32
 8011138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2200      	movs	r2, #0
 8011140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011144:	2300      	movs	r3, #0
}
 8011146:	4618      	mov	r0, r3
 8011148:	3714      	adds	r7, #20
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr

08011152 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011152:	b580      	push	{r7, lr}
 8011154:	b084      	sub	sp, #16
 8011156:	af00      	add	r7, sp, #0
 8011158:	6078      	str	r0, [r7, #4]
 801115a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011162:	2b01      	cmp	r3, #1
 8011164:	d101      	bne.n	801116a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011166:	2302      	movs	r3, #2
 8011168:	e02d      	b.n	80111c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2201      	movs	r2, #1
 801116e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2224      	movs	r2, #36	@ 0x24
 8011176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	681a      	ldr	r2, [r3, #0]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f022 0201 	bic.w	r2, r2, #1
 8011190:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	689b      	ldr	r3, [r3, #8]
 8011198:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	683a      	ldr	r2, [r7, #0]
 80111a2:	430a      	orrs	r2, r1
 80111a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 f850 	bl	801124c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2220      	movs	r2, #32
 80111b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2200      	movs	r2, #0
 80111c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}

080111ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111ce:	b580      	push	{r7, lr}
 80111d0:	b084      	sub	sp, #16
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	6078      	str	r0, [r7, #4]
 80111d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d101      	bne.n	80111e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80111e2:	2302      	movs	r3, #2
 80111e4:	e02d      	b.n	8011242 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2201      	movs	r2, #1
 80111ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2224      	movs	r2, #36	@ 0x24
 80111f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	f022 0201 	bic.w	r2, r2, #1
 801120c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	683a      	ldr	r2, [r7, #0]
 801121e:	430a      	orrs	r2, r1
 8011220:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f000 f812 	bl	801124c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2220      	movs	r2, #32
 8011234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2200      	movs	r2, #0
 801123c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011240:	2300      	movs	r3, #0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
	...

0801124c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801124c:	b480      	push	{r7}
 801124e:	b085      	sub	sp, #20
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011258:	2b00      	cmp	r3, #0
 801125a:	d108      	bne.n	801126e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2201      	movs	r2, #1
 8011260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2201      	movs	r2, #1
 8011268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801126c:	e031      	b.n	80112d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801126e:	2308      	movs	r3, #8
 8011270:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011272:	2308      	movs	r3, #8
 8011274:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	689b      	ldr	r3, [r3, #8]
 801127c:	0e5b      	lsrs	r3, r3, #25
 801127e:	b2db      	uxtb	r3, r3
 8011280:	f003 0307 	and.w	r3, r3, #7
 8011284:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	689b      	ldr	r3, [r3, #8]
 801128c:	0f5b      	lsrs	r3, r3, #29
 801128e:	b2db      	uxtb	r3, r3
 8011290:	f003 0307 	and.w	r3, r3, #7
 8011294:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011296:	7bbb      	ldrb	r3, [r7, #14]
 8011298:	7b3a      	ldrb	r2, [r7, #12]
 801129a:	4911      	ldr	r1, [pc, #68]	@ (80112e0 <UARTEx_SetNbDataToProcess+0x94>)
 801129c:	5c8a      	ldrb	r2, [r1, r2]
 801129e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80112a2:	7b3a      	ldrb	r2, [r7, #12]
 80112a4:	490f      	ldr	r1, [pc, #60]	@ (80112e4 <UARTEx_SetNbDataToProcess+0x98>)
 80112a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80112a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112b4:	7bfb      	ldrb	r3, [r7, #15]
 80112b6:	7b7a      	ldrb	r2, [r7, #13]
 80112b8:	4909      	ldr	r1, [pc, #36]	@ (80112e0 <UARTEx_SetNbDataToProcess+0x94>)
 80112ba:	5c8a      	ldrb	r2, [r1, r2]
 80112bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80112c0:	7b7a      	ldrb	r2, [r7, #13]
 80112c2:	4908      	ldr	r1, [pc, #32]	@ (80112e4 <UARTEx_SetNbDataToProcess+0x98>)
 80112c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80112ca:	b29a      	uxth	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80112d2:	bf00      	nop
 80112d4:	3714      	adds	r7, #20
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr
 80112de:	bf00      	nop
 80112e0:	08011d18 	.word	0x08011d18
 80112e4:	08011d20 	.word	0x08011d20

080112e8 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b086      	sub	sp, #24
 80112ec:	af02      	add	r7, sp, #8
 80112ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112f0:	2300      	movs	r3, #0
 80112f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80112f4:	f7f2 f922 	bl	800353c <HAL_GetTick>
 80112f8:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d102      	bne.n	8011306 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011300:	2301      	movs	r3, #1
 8011302:	73fb      	strb	r3, [r7, #15]
 8011304:	e137      	b.n	8011576 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	4a76      	ldr	r2, [pc, #472]	@ (80114e4 <HAL_XSPI_Init+0x1fc>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d008      	beq.n	8011322 <HAL_XSPI_Init+0x3a>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4a74      	ldr	r2, [pc, #464]	@ (80114e8 <HAL_XSPI_Init+0x200>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d003      	beq.n	8011322 <HAL_XSPI_Init+0x3a>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4a73      	ldr	r2, [pc, #460]	@ (80114ec <HAL_XSPI_Init+0x204>)
 8011320:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	4a72      	ldr	r2, [pc, #456]	@ (80114f0 <HAL_XSPI_Init+0x208>)
 8011328:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	4a6d      	ldr	r2, [pc, #436]	@ (80114e4 <HAL_XSPI_Init+0x1fc>)
 8011330:	4293      	cmp	r3, r2
 8011332:	d008      	beq.n	8011346 <HAL_XSPI_Init+0x5e>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	4a6b      	ldr	r2, [pc, #428]	@ (80114e8 <HAL_XSPI_Init+0x200>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d003      	beq.n	8011346 <HAL_XSPI_Init+0x5e>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	4a6a      	ldr	r2, [pc, #424]	@ (80114ec <HAL_XSPI_Init+0x204>)
 8011344:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	4a66      	ldr	r2, [pc, #408]	@ (80114e4 <HAL_XSPI_Init+0x1fc>)
 801134c:	4293      	cmp	r3, r2
 801134e:	d008      	beq.n	8011362 <HAL_XSPI_Init+0x7a>
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	4a64      	ldr	r2, [pc, #400]	@ (80114e8 <HAL_XSPI_Init+0x200>)
 8011356:	4293      	cmp	r3, r2
 8011358:	d003      	beq.n	8011362 <HAL_XSPI_Init+0x7a>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	4a63      	ldr	r2, [pc, #396]	@ (80114ec <HAL_XSPI_Init+0x204>)
 8011360:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2200      	movs	r2, #0
 8011366:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801136c:	2b00      	cmp	r3, #0
 801136e:	f040 8102 	bne.w	8011576 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f7f1 f8e0 	bl	8002538 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011378:	f241 3188 	movw	r1, #5000	@ 0x1388
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f000 f8ff 	bl	8011580 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	689a      	ldr	r2, [r3, #8]
 8011388:	4b5a      	ldr	r3, [pc, #360]	@ (80114f4 <HAL_XSPI_Init+0x20c>)
 801138a:	4013      	ands	r3, r2
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	68d1      	ldr	r1, [r2, #12]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	6912      	ldr	r2, [r2, #16]
 8011394:	0412      	lsls	r2, r2, #16
 8011396:	4311      	orrs	r1, r2
 8011398:	687a      	ldr	r2, [r7, #4]
 801139a:	6952      	ldr	r2, [r2, #20]
 801139c:	3a01      	subs	r2, #1
 801139e:	0212      	lsls	r2, r2, #8
 80113a0:	4311      	orrs	r1, r2
 80113a2:	687a      	ldr	r2, [r7, #4]
 80113a4:	69d2      	ldr	r2, [r2, #28]
 80113a6:	4311      	orrs	r1, r2
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	6812      	ldr	r2, [r2, #0]
 80113ac:	430b      	orrs	r3, r1
 80113ae:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a4b      	ldr	r2, [pc, #300]	@ (80114e4 <HAL_XSPI_Init+0x1fc>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d00e      	beq.n	80113d8 <HAL_XSPI_Init+0xf0>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	4a4a      	ldr	r2, [pc, #296]	@ (80114e8 <HAL_XSPI_Init+0x200>)
 80113c0:	4293      	cmp	r3, r2
 80113c2:	d009      	beq.n	80113d8 <HAL_XSPI_Init+0xf0>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	4a48      	ldr	r2, [pc, #288]	@ (80114ec <HAL_XSPI_Init+0x204>)
 80113ca:	4293      	cmp	r3, r2
 80113cc:	d004      	beq.n	80113d8 <HAL_XSPI_Init+0xf0>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4a49      	ldr	r2, [pc, #292]	@ (80114f8 <HAL_XSPI_Init+0x210>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d10a      	bne.n	80113ee <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	689b      	ldr	r3, [r3, #8]
 80113de:	f023 0108 	bic.w	r1, r3, #8
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	430a      	orrs	r2, r1
 80113ec:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6a1a      	ldr	r2, [r3, #32]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	430a      	orrs	r2, r1
 8011402:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	691b      	ldr	r3, [r3, #16]
 801140a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011412:	041a      	lsls	r2, r3, #16
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	430a      	orrs	r2, r1
 801141a:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4a30      	ldr	r2, [pc, #192]	@ (80114e4 <HAL_XSPI_Init+0x1fc>)
 8011422:	4293      	cmp	r3, r2
 8011424:	d00e      	beq.n	8011444 <HAL_XSPI_Init+0x15c>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	4a2f      	ldr	r2, [pc, #188]	@ (80114e8 <HAL_XSPI_Init+0x200>)
 801142c:	4293      	cmp	r3, r2
 801142e:	d009      	beq.n	8011444 <HAL_XSPI_Init+0x15c>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4a2d      	ldr	r2, [pc, #180]	@ (80114ec <HAL_XSPI_Init+0x204>)
 8011436:	4293      	cmp	r3, r2
 8011438:	d004      	beq.n	8011444 <HAL_XSPI_Init+0x15c>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	4a2e      	ldr	r2, [pc, #184]	@ (80114f8 <HAL_XSPI_Init+0x210>)
 8011440:	4293      	cmp	r3, r2
 8011442:	d10a      	bne.n	801145a <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	430a      	orrs	r2, r1
 8011458:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011462:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	3b01      	subs	r3, #1
 8011474:	021a      	lsls	r2, r3, #8
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	430a      	orrs	r2, r1
 801147c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011482:	9300      	str	r3, [sp, #0]
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	2200      	movs	r2, #0
 8011488:	2120      	movs	r1, #32
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f887 	bl	801159e <XSPI_WaitFlagStateUntilTimeout>
 8011490:	4603      	mov	r3, r0
 8011492:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011494:	7bfb      	ldrb	r3, [r7, #15]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d16d      	bne.n	8011576 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	68db      	ldr	r3, [r3, #12]
 80114a0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	430a      	orrs	r2, r1
 80114ae:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4a0e      	ldr	r2, [pc, #56]	@ (80114f0 <HAL_XSPI_Init+0x208>)
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d004      	beq.n	80114c4 <HAL_XSPI_Init+0x1dc>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	4a0f      	ldr	r2, [pc, #60]	@ (80114fc <HAL_XSPI_Init+0x214>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d11d      	bne.n	8011500 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	2200      	movs	r2, #0
 80114ce:	2120      	movs	r1, #32
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f000 f864 	bl	801159e <XSPI_WaitFlagStateUntilTimeout>
 80114d6:	4603      	mov	r3, r0
 80114d8:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80114da:	7bfb      	ldrb	r3, [r7, #15]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00f      	beq.n	8011500 <HAL_XSPI_Init+0x218>
          {
            return status;
 80114e0:	7bfb      	ldrb	r3, [r7, #15]
 80114e2:	e049      	b.n	8011578 <HAL_XSPI_Init+0x290>
 80114e4:	420d1400 	.word	0x420d1400
 80114e8:	520d1400 	.word	0x520d1400
 80114ec:	420d2400 	.word	0x420d2400
 80114f0:	420d3400 	.word	0x420d3400
 80114f4:	f8e0c0fc 	.word	0xf8e0c0fc
 80114f8:	520d2400 	.word	0x520d2400
 80114fc:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	689a      	ldr	r2, [r3, #8]
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	430a      	orrs	r2, r1
 8011514:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801151e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801152a:	431a      	orrs	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	430a      	orrs	r2, r1
 8011532:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f042 0201 	orr.w	r2, r2, #1
 8011544:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	699b      	ldr	r3, [r3, #24]
 801154a:	2b02      	cmp	r3, #2
 801154c:	d107      	bne.n	801155e <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	689a      	ldr	r2, [r3, #8]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	f042 0202 	orr.w	r2, r2, #2
 801155c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011566:	d103      	bne.n	8011570 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2201      	movs	r2, #1
 801156c:	655a      	str	r2, [r3, #84]	@ 0x54
 801156e:	e002      	b.n	8011576 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2202      	movs	r2, #2
 8011574:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011576:	7bfb      	ldrb	r3, [r7, #15]
}
 8011578:	4618      	mov	r0, r3
 801157a:	3710      	adds	r7, #16
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	683a      	ldr	r2, [r7, #0]
 801158e:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	370c      	adds	r7, #12
 8011596:	46bd      	mov	sp, r7
 8011598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159c:	4770      	bx	lr

0801159e <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801159e:	b580      	push	{r7, lr}
 80115a0:	b084      	sub	sp, #16
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	60f8      	str	r0, [r7, #12]
 80115a6:	60b9      	str	r1, [r7, #8]
 80115a8:	603b      	str	r3, [r7, #0]
 80115aa:	4613      	mov	r3, r2
 80115ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80115ae:	e01a      	b.n	80115e6 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b6:	d016      	beq.n	80115e6 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80115b8:	f7f1 ffc0 	bl	800353c <HAL_GetTick>
 80115bc:	4602      	mov	r2, r0
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	69ba      	ldr	r2, [r7, #24]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d302      	bcc.n	80115ce <XSPI_WaitFlagStateUntilTimeout+0x30>
 80115c8:	69bb      	ldr	r3, [r7, #24]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d10b      	bne.n	80115e6 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115d4:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115da:	f043 0201 	orr.w	r2, r3, #1
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80115e2:	2303      	movs	r3, #3
 80115e4:	e00e      	b.n	8011604 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6a1a      	ldr	r2, [r3, #32]
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	4013      	ands	r3, r2
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	bf14      	ite	ne
 80115f4:	2301      	movne	r3, #1
 80115f6:	2300      	moveq	r3, #0
 80115f8:	b2db      	uxtb	r3, r3
 80115fa:	461a      	mov	r2, r3
 80115fc:	79fb      	ldrb	r3, [r7, #7]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d1d6      	bne.n	80115b0 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011602:	2300      	movs	r3, #0
}
 8011604:	4618      	mov	r0, r3
 8011606:	3710      	adds	r7, #16
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801160c:	b084      	sub	sp, #16
 801160e:	b580      	push	{r7, lr}
 8011610:	b084      	sub	sp, #16
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
 8011616:	f107 001c 	add.w	r0, r7, #28
 801161a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801161e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011622:	2b03      	cmp	r3, #3
 8011624:	d105      	bne.n	8011632 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f000 fa8e 	bl	8011b54 <USB_CoreReset>
 8011638:	4603      	mov	r3, r0
 801163a:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 801163c:	7fbb      	ldrb	r3, [r7, #30]
 801163e:	2b01      	cmp	r3, #1
 8011640:	d10b      	bne.n	801165a <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	689b      	ldr	r3, [r3, #8]
 8011646:	f043 0208 	orr.w	r2, r3, #8
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	f043 0220 	orr.w	r2, r3, #32
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 801165a:	7bfb      	ldrb	r3, [r7, #15]
}
 801165c:	4618      	mov	r0, r3
 801165e:	3710      	adds	r7, #16
 8011660:	46bd      	mov	sp, r7
 8011662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011666:	b004      	add	sp, #16
 8011668:	4770      	bx	lr

0801166a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801166a:	b480      	push	{r7}
 801166c:	b083      	sub	sp, #12
 801166e:	af00      	add	r7, sp, #0
 8011670:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	f023 0201 	bic.w	r2, r3, #1
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	460b      	mov	r3, r1
 8011696:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011698:	2300      	movs	r3, #0
 801169a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80116a8:	78fb      	ldrb	r3, [r7, #3]
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	d115      	bne.n	80116da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80116ba:	200a      	movs	r0, #10
 80116bc:	f7f1 ff4a 	bl	8003554 <HAL_Delay>
      ms += 10U;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	330a      	adds	r3, #10
 80116c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f000 fa36 	bl	8011b38 <USB_GetMode>
 80116cc:	4603      	mov	r3, r0
 80116ce:	2b01      	cmp	r3, #1
 80116d0:	d01e      	beq.n	8011710 <USB_SetCurrentMode+0x84>
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80116d6:	d9f0      	bls.n	80116ba <USB_SetCurrentMode+0x2e>
 80116d8:	e01a      	b.n	8011710 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80116da:	78fb      	ldrb	r3, [r7, #3]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d115      	bne.n	801170c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80116ec:	200a      	movs	r0, #10
 80116ee:	f7f1 ff31 	bl	8003554 <HAL_Delay>
      ms += 10U;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	330a      	adds	r3, #10
 80116f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f000 fa1d 	bl	8011b38 <USB_GetMode>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d005      	beq.n	8011710 <USB_SetCurrentMode+0x84>
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2bc7      	cmp	r3, #199	@ 0xc7
 8011708:	d9f0      	bls.n	80116ec <USB_SetCurrentMode+0x60>
 801170a:	e001      	b.n	8011710 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801170c:	2301      	movs	r3, #1
 801170e:	e005      	b.n	801171c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2bc8      	cmp	r3, #200	@ 0xc8
 8011714:	d101      	bne.n	801171a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011716:	2301      	movs	r3, #1
 8011718:	e000      	b.n	801171c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801171a:	2300      	movs	r3, #0
}
 801171c:	4618      	mov	r0, r3
 801171e:	3710      	adds	r7, #16
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011724:	b084      	sub	sp, #16
 8011726:	b580      	push	{r7, lr}
 8011728:	b086      	sub	sp, #24
 801172a:	af00      	add	r7, sp, #0
 801172c:	6078      	str	r0, [r7, #4]
 801172e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011736:	2300      	movs	r3, #0
 8011738:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801173e:	2300      	movs	r3, #0
 8011740:	613b      	str	r3, [r7, #16]
 8011742:	e009      	b.n	8011758 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	3340      	adds	r3, #64	@ 0x40
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	4413      	add	r3, r2
 801174e:	2200      	movs	r2, #0
 8011750:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	3301      	adds	r3, #1
 8011756:	613b      	str	r3, [r7, #16]
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	2b0e      	cmp	r3, #14
 801175c:	d9f2      	bls.n	8011744 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011762:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801176a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801176e:	2b00      	cmp	r3, #0
 8011770:	d11c      	bne.n	80117ac <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	68fa      	ldr	r2, [r7, #12]
 801177c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011780:	f043 0302 	orr.w	r3, r3, #2
 8011784:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801178a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011796:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80117aa:	e011      	b.n	80117d0 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117bc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80117d6:	461a      	mov	r2, r3
 80117d8:	2300      	movs	r3, #0
 80117da:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80117dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80117e0:	2b03      	cmp	r3, #3
 80117e2:	d10d      	bne.n	8011800 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80117e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d104      	bne.n	80117f6 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80117ec:	2100      	movs	r1, #0
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f968 	bl	8011ac4 <USB_SetDevSpeed>
 80117f4:	e008      	b.n	8011808 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80117f6:	2101      	movs	r1, #1
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f000 f963 	bl	8011ac4 <USB_SetDevSpeed>
 80117fe:	e003      	b.n	8011808 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011800:	2103      	movs	r1, #3
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 f95e 	bl	8011ac4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011808:	2110      	movs	r1, #16
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 f8fa 	bl	8011a04 <USB_FlushTxFifo>
 8011810:	4603      	mov	r3, r0
 8011812:	2b00      	cmp	r3, #0
 8011814:	d001      	beq.n	801181a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8011816:	2301      	movs	r3, #1
 8011818:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 f924 	bl	8011a68 <USB_FlushRxFifo>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8011826:	2301      	movs	r3, #1
 8011828:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011830:	461a      	mov	r2, r3
 8011832:	2300      	movs	r3, #0
 8011834:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801183c:	461a      	mov	r2, r3
 801183e:	2300      	movs	r3, #0
 8011840:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011848:	461a      	mov	r2, r3
 801184a:	2300      	movs	r3, #0
 801184c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801184e:	2300      	movs	r3, #0
 8011850:	613b      	str	r3, [r7, #16]
 8011852:	e043      	b.n	80118dc <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	015a      	lsls	r2, r3, #5
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	4413      	add	r3, r2
 801185c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801186a:	d118      	bne.n	801189e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d10a      	bne.n	8011888 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	015a      	lsls	r2, r3, #5
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	4413      	add	r3, r2
 801187a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801187e:	461a      	mov	r2, r3
 8011880:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011884:	6013      	str	r3, [r2, #0]
 8011886:	e013      	b.n	80118b0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	015a      	lsls	r2, r3, #5
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	4413      	add	r3, r2
 8011890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011894:	461a      	mov	r2, r3
 8011896:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801189a:	6013      	str	r3, [r2, #0]
 801189c:	e008      	b.n	80118b0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	015a      	lsls	r2, r3, #5
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	4413      	add	r3, r2
 80118a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118aa:	461a      	mov	r2, r3
 80118ac:	2300      	movs	r3, #0
 80118ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	015a      	lsls	r2, r3, #5
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	4413      	add	r3, r2
 80118b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118bc:	461a      	mov	r2, r3
 80118be:	2300      	movs	r3, #0
 80118c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	015a      	lsls	r2, r3, #5
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	4413      	add	r3, r2
 80118ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118ce:	461a      	mov	r2, r3
 80118d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80118d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	3301      	adds	r3, #1
 80118da:	613b      	str	r3, [r7, #16]
 80118dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80118e0:	461a      	mov	r2, r3
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d3b5      	bcc.n	8011854 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80118e8:	2300      	movs	r3, #0
 80118ea:	613b      	str	r3, [r7, #16]
 80118ec:	e043      	b.n	8011976 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	015a      	lsls	r2, r3, #5
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	4413      	add	r3, r2
 80118f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011904:	d118      	bne.n	8011938 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d10a      	bne.n	8011922 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	015a      	lsls	r2, r3, #5
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	4413      	add	r3, r2
 8011914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011918:	461a      	mov	r2, r3
 801191a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801191e:	6013      	str	r3, [r2, #0]
 8011920:	e013      	b.n	801194a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	015a      	lsls	r2, r3, #5
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	4413      	add	r3, r2
 801192a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801192e:	461a      	mov	r2, r3
 8011930:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011934:	6013      	str	r3, [r2, #0]
 8011936:	e008      	b.n	801194a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	015a      	lsls	r2, r3, #5
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	4413      	add	r3, r2
 8011940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011944:	461a      	mov	r2, r3
 8011946:	2300      	movs	r3, #0
 8011948:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	015a      	lsls	r2, r3, #5
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	4413      	add	r3, r2
 8011952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011956:	461a      	mov	r2, r3
 8011958:	2300      	movs	r3, #0
 801195a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	015a      	lsls	r2, r3, #5
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	4413      	add	r3, r2
 8011964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011968:	461a      	mov	r2, r3
 801196a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801196e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	3301      	adds	r3, #1
 8011974:	613b      	str	r3, [r7, #16]
 8011976:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801197a:	461a      	mov	r2, r3
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	4293      	cmp	r3, r2
 8011980:	d3b5      	bcc.n	80118ee <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011988:	691b      	ldr	r3, [r3, #16]
 801198a:	68fa      	ldr	r2, [r7, #12]
 801198c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011994:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2200      	movs	r2, #0
 801199a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80119a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80119a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d105      	bne.n	80119b8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	699b      	ldr	r3, [r3, #24]
 80119b0:	f043 0210 	orr.w	r2, r3, #16
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	699a      	ldr	r2, [r3, #24]
 80119bc:	4b10      	ldr	r3, [pc, #64]	@ (8011a00 <USB_DevInit+0x2dc>)
 80119be:	4313      	orrs	r3, r2
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80119c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d005      	beq.n	80119d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	699b      	ldr	r3, [r3, #24]
 80119d0:	f043 0208 	orr.w	r2, r3, #8
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80119d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80119dc:	2b01      	cmp	r3, #1
 80119de:	d107      	bne.n	80119f0 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	699b      	ldr	r3, [r3, #24]
 80119e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80119e8:	f043 0304 	orr.w	r3, r3, #4
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80119f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3718      	adds	r7, #24
 80119f6:	46bd      	mov	sp, r7
 80119f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80119fc:	b004      	add	sp, #16
 80119fe:	4770      	bx	lr
 8011a00:	803c3800 	.word	0x803c3800

08011a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011a04:	b480      	push	{r7}
 8011a06:	b085      	sub	sp, #20
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	3301      	adds	r3, #1
 8011a16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a1e:	d901      	bls.n	8011a24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011a20:	2303      	movs	r3, #3
 8011a22:	e01b      	b.n	8011a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	691b      	ldr	r3, [r3, #16]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	daf2      	bge.n	8011a12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	019b      	lsls	r3, r3, #6
 8011a34:	f043 0220 	orr.w	r2, r3, #32
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a48:	d901      	bls.n	8011a4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011a4a:	2303      	movs	r3, #3
 8011a4c:	e006      	b.n	8011a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	691b      	ldr	r3, [r3, #16]
 8011a52:	f003 0320 	and.w	r3, r3, #32
 8011a56:	2b20      	cmp	r3, #32
 8011a58:	d0f0      	beq.n	8011a3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3714      	adds	r7, #20
 8011a60:	46bd      	mov	sp, r7
 8011a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a66:	4770      	bx	lr

08011a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b085      	sub	sp, #20
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a70:	2300      	movs	r3, #0
 8011a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	3301      	adds	r3, #1
 8011a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a80:	d901      	bls.n	8011a86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011a82:	2303      	movs	r3, #3
 8011a84:	e018      	b.n	8011ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	691b      	ldr	r3, [r3, #16]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	daf2      	bge.n	8011a74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2210      	movs	r2, #16
 8011a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011aa4:	d901      	bls.n	8011aaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011aa6:	2303      	movs	r3, #3
 8011aa8:	e006      	b.n	8011ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	691b      	ldr	r3, [r3, #16]
 8011aae:	f003 0310 	and.w	r3, r3, #16
 8011ab2:	2b10      	cmp	r3, #16
 8011ab4:	d0f0      	beq.n	8011a98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011ab6:	2300      	movs	r3, #0
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3714      	adds	r7, #20
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr

08011ac4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b085      	sub	sp, #20
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	460b      	mov	r3, r1
 8011ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	78fb      	ldrb	r3, [r7, #3]
 8011ade:	68f9      	ldr	r1, [r7, #12]
 8011ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011ae4:	4313      	orrs	r3, r2
 8011ae6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011ae8:	2300      	movs	r3, #0
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3714      	adds	r7, #20
 8011aee:	46bd      	mov	sp, r7
 8011af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af4:	4770      	bx	lr

08011af6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011af6:	b480      	push	{r7}
 8011af8:	b085      	sub	sp, #20
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	68fa      	ldr	r2, [r7, #12]
 8011b0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011b10:	f023 0303 	bic.w	r3, r3, #3
 8011b14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	68fa      	ldr	r2, [r7, #12]
 8011b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011b24:	f043 0302 	orr.w	r3, r3, #2
 8011b28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3714      	adds	r7, #20
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	695b      	ldr	r3, [r3, #20]
 8011b44:	f003 0301 	and.w	r3, r3, #1
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr

08011b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b085      	sub	sp, #20
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	3301      	adds	r3, #1
 8011b64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b6c:	d901      	bls.n	8011b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011b6e:	2303      	movs	r3, #3
 8011b70:	e01b      	b.n	8011baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	691b      	ldr	r3, [r3, #16]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	daf2      	bge.n	8011b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	691b      	ldr	r3, [r3, #16]
 8011b82:	f043 0201 	orr.w	r2, r3, #1
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b96:	d901      	bls.n	8011b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011b98:	2303      	movs	r3, #3
 8011b9a:	e006      	b.n	8011baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	691b      	ldr	r3, [r3, #16]
 8011ba0:	f003 0301 	and.w	r3, r3, #1
 8011ba4:	2b01      	cmp	r3, #1
 8011ba6:	d0f0      	beq.n	8011b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8011ba8:	2300      	movs	r3, #0
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3714      	adds	r7, #20
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr

08011bb6 <memset>:
 8011bb6:	4402      	add	r2, r0
 8011bb8:	4603      	mov	r3, r0
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d100      	bne.n	8011bc0 <memset+0xa>
 8011bbe:	4770      	bx	lr
 8011bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8011bc4:	e7f9      	b.n	8011bba <memset+0x4>
	...

08011bc8 <__libc_init_array>:
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	4d0d      	ldr	r5, [pc, #52]	@ (8011c00 <__libc_init_array+0x38>)
 8011bcc:	2600      	movs	r6, #0
 8011bce:	4c0d      	ldr	r4, [pc, #52]	@ (8011c04 <__libc_init_array+0x3c>)
 8011bd0:	1b64      	subs	r4, r4, r5
 8011bd2:	10a4      	asrs	r4, r4, #2
 8011bd4:	42a6      	cmp	r6, r4
 8011bd6:	d109      	bne.n	8011bec <__libc_init_array+0x24>
 8011bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8011c08 <__libc_init_array+0x40>)
 8011bda:	2600      	movs	r6, #0
 8011bdc:	4c0b      	ldr	r4, [pc, #44]	@ (8011c0c <__libc_init_array+0x44>)
 8011bde:	f000 f817 	bl	8011c10 <_init>
 8011be2:	1b64      	subs	r4, r4, r5
 8011be4:	10a4      	asrs	r4, r4, #2
 8011be6:	42a6      	cmp	r6, r4
 8011be8:	d105      	bne.n	8011bf6 <__libc_init_array+0x2e>
 8011bea:	bd70      	pop	{r4, r5, r6, pc}
 8011bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bf0:	3601      	adds	r6, #1
 8011bf2:	4798      	blx	r3
 8011bf4:	e7ee      	b.n	8011bd4 <__libc_init_array+0xc>
 8011bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bfa:	3601      	adds	r6, #1
 8011bfc:	4798      	blx	r3
 8011bfe:	e7f2      	b.n	8011be6 <__libc_init_array+0x1e>
 8011c00:	08011d30 	.word	0x08011d30
 8011c04:	08011d30 	.word	0x08011d30
 8011c08:	08011d30 	.word	0x08011d30
 8011c0c:	08011d34 	.word	0x08011d34

08011c10 <_init>:
 8011c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c12:	bf00      	nop
 8011c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c16:	bc08      	pop	{r3}
 8011c18:	469e      	mov	lr, r3
 8011c1a:	4770      	bx	lr

08011c1c <_fini>:
 8011c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1e:	bf00      	nop
 8011c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c22:	bc08      	pop	{r3}
 8011c24:	469e      	mov	lr, r3
 8011c26:	4770      	bx	lr
