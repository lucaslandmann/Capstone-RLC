
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001135c  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080115d0  080115d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116d0  080116d0  0001300c  2**0
                  CONTENTS
  4 .ARM          00000008  080116d0  080116d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116d8  080116d8  0001300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116d8  080116d8  000126d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080116dc  080116dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080116e0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c264  2000000c  080116ec  0001300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2000c270  080116ec  00013270  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031bc3  00000000  00000000  00013042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d25  00000000  00000000  00044c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  00049930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002171  00000000  00000000  0004c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004731a  00000000  00000000  0004e541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b6c  00000000  00000000  0009585b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9d4  00000000  00000000  000cb3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287d9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd64  00000000  00000000  00287de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00293b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	080115b8 	.word	0x080115b8

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	080115b8 	.word	0x080115b8

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 fa99 	bl	8002b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8ed 	bl	80007b4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f957 	bl	800088c <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f98c 	bl	80008fa <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fefb 	bl	80013dc <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb89 	bl	8000cfc <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb49 	bl	8000c80 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbbd 	bl	8000d6c <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc39 	bl	8000e68 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc77 	bl	8000ee8 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc89 	bl	8000f10 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd07 	bl	8001010 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fdbf 	bl	8001184 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f987 	bl	8000918 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe6d 	bl	80012e8 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd4d 	bl	80010ac <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 fabb 	bl	8000b8c <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fbe7 	bl	8000de8 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 feb1 	bl	8001380 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fe13 	bl	8001248 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 8000622:	f44f 52d0 	mov.w	r2, #6656	@ 0x1a00
 8000626:	4959      	ldr	r1, [pc, #356]	@ (800078c <main+0x1c0>)
 8000628:	4859      	ldr	r0, [pc, #356]	@ (8000790 <main+0x1c4>)
 800062a:	f003 f9b9 	bl	80039a0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 800062e:	2202      	movs	r2, #2
 8000630:	4958      	ldr	r1, [pc, #352]	@ (8000794 <main+0x1c8>)
 8000632:	4859      	ldr	r0, [pc, #356]	@ (8000798 <main+0x1cc>)
 8000634:	f003 f9b4 	bl	80039a0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000638:	4858      	ldr	r0, [pc, #352]	@ (800079c <main+0x1d0>)
 800063a:	f00e f947 	bl	800e8cc <HAL_TIM_Base_Start>
	  HAL_Delay(10);
  }

  HAL_Delay(10);
  */
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
 800063e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000642:	4957      	ldr	r1, [pc, #348]	@ (80007a0 <main+0x1d4>)
 8000644:	4857      	ldr	r0, [pc, #348]	@ (80007a4 <main+0x1d8>)
 8000646:	f00d fda3 	bl	800e190 <HAL_SAI_Receive_DMA>
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacData, DIM(dacData));
 800064a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800064e:	4956      	ldr	r1, [pc, #344]	@ (80007a8 <main+0x1dc>)
 8000650:	4856      	ldr	r0, [pc, #344]	@ (80007ac <main+0x1e0>)
 8000652:	f00d fc9b 	bl	800df8c <HAL_SAI_Transmit_DMA>

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e08e      	b.n	800077a <main+0x1ae>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	e00d      	b.n	800067e <main+0xb2>
	  {
		  channels[i].channelData[s] = 0;
 8000662:	4953      	ldr	r1, [pc, #332]	@ (80007b0 <main+0x1e4>)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f240 220b 	movw	r2, #523	@ 0x20b
 800066a:	fb03 f202 	mul.w	r2, r3, r2
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	4413      	add	r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	3301      	adds	r3, #1
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000684:	d3ed      	bcc.n	8000662 <main+0x96>
	  }
	  channels[i].channelNum = i;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	b2d8      	uxtb	r0, r3
 800068a:	4a49      	ldr	r2, [pc, #292]	@ (80007b0 <main+0x1e4>)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f640 012c 	movw	r1, #2092	@ 0x82c
 8000692:	fb01 f303 	mul.w	r3, r1, r3
 8000696:	4413      	add	r3, r2
 8000698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800069c:	4602      	mov	r2, r0
 800069e:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 80006a0:	4a43      	ldr	r2, [pc, #268]	@ (80007b0 <main+0x1e4>)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f640 012c 	movw	r1, #2092	@ 0x82c
 80006a8:	fb01 f303 	mul.w	r3, r1, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	f603 0304 	addw	r3, r3, #2052	@ 0x804
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 80006b8:	4a3d      	ldr	r2, [pc, #244]	@ (80007b0 <main+0x1e4>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f640 012c 	movw	r1, #2092	@ 0x82c
 80006c0:	fb01 f303 	mul.w	r3, r1, r3
 80006c4:	4413      	add	r3, r2
 80006c6:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 80006d0:	4a37      	ldr	r2, [pc, #220]	@ (80007b0 <main+0x1e4>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f640 012c 	movw	r1, #2092	@ 0x82c
 80006d8:	fb01 f303 	mul.w	r3, r1, r3
 80006dc:	4413      	add	r3, r2
 80006de:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 80006e6:	4a32      	ldr	r2, [pc, #200]	@ (80007b0 <main+0x1e4>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f640 012c 	movw	r1, #2092	@ 0x82c
 80006ee:	fb01 f303 	mul.w	r3, r1, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	f603 030d 	addw	r3, r3, #2061	@ 0x80d
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 80006fc:	4a2c      	ldr	r2, [pc, #176]	@ (80007b0 <main+0x1e4>)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f640 012c 	movw	r1, #2092	@ 0x82c
 8000704:	fb01 f303 	mul.w	r3, r1, r3
 8000708:	4413      	add	r3, r2
 800070a:	f603 030e 	addw	r3, r3, #2062	@ 0x80e
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 8000712:	4a27      	ldr	r2, [pc, #156]	@ (80007b0 <main+0x1e4>)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f640 012c 	movw	r1, #2092	@ 0x82c
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	4413      	add	r3, r2
 8000720:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	e012      	b.n	8000756 <main+0x18a>
	  {
		  channels[i].eqLevels[r] = 0.0;
 8000730:	491f      	ldr	r1, [pc, #124]	@ (80007b0 <main+0x1e4>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f240 220b 	movw	r2, #523	@ 0x20b
 8000738:	fb03 f202 	mul.w	r2, r3, r2
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	440b      	add	r3, r1
 8000748:	3304      	adds	r3, #4
 800074a:	f04f 0200 	mov.w	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3301      	adds	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b13      	cmp	r3, #19
 800075a:	d9e9      	bls.n	8000730 <main+0x164>
	  }
	  channels[i].distortionStrength = 0.0;
 800075c:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <main+0x1e4>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f640 012c 	movw	r1, #2092	@ 0x82c
 8000764:	fb01 f303 	mul.w	r3, r1, r3
 8000768:	4413      	add	r3, r2
 800076a:	f603 0328 	addw	r3, r3, #2088	@ 0x828
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f243 1207 	movw	r2, #12551	@ 0x3107
 8000780:	4293      	cmp	r3, r2
 8000782:	f67f af6b 	bls.w	800065c <main+0x90>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000786:	bf00      	nop
 8000788:	e7fd      	b.n	8000786 <main+0x1ba>
 800078a:	bf00      	nop
 800078c:	20000d5c 	.word	0x20000d5c
 8000790:	20000028 	.word	0x20000028
 8000794:	2000415c 	.word	0x2000415c
 8000798:	200000b4 	.word	0x200000b4
 800079c:	20000798 	.word	0x20000798
 80007a0:	20004160 	.word	0x20004160
 80007a4:	2000054c 	.word	0x2000054c
 80007a8:	20008160 	.word	0x20008160
 80007ac:	200004b4 	.word	0x200004b4
 80007b0:	20009160 	.word	0x20009160

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09e      	sub	sp, #120	@ 0x78
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	2260      	movs	r2, #96	@ 0x60
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f010 fecb 	bl	801155e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
 80007d6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007d8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007dc:	f008 fc92 	bl	8009104 <HAL_PWREx_ControlVoltageScaling>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007e6:	f000 ffd1 	bl	800178c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ea:	f008 fc7b 	bl	80090e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <SystemClock_Config+0xd4>)
 80007f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80007f4:	4a24      	ldr	r2, [pc, #144]	@ (8000888 <SystemClock_Config+0xd4>)
 80007f6:	f023 0318 	bic.w	r3, r3, #24
 80007fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007fe:	2307      	movs	r3, #7
 8000800:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000802:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000806:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000808:	2381      	movs	r3, #129	@ 0x81
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2310      	movs	r3, #16
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	2303      	movs	r3, #3
 800081c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000826:	2308      	movs	r3, #8
 8000828:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800082a:	2308      	movs	r3, #8
 800082c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000836:	230c      	movs	r3, #12
 8000838:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	4618      	mov	r0, r3
 8000844:	f008 fd88 	bl	8009358 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800084e:	f000 ff9d 	bl	800178c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	231f      	movs	r3, #31
 8000854:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2303      	movs	r3, #3
 8000858:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	2103      	movs	r1, #3
 800086e:	4618      	mov	r0, r3
 8000870:	f009 fc4e 	bl	800a110 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800087a:	f000 ff87 	bl	800178c <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3778      	adds	r7, #120	@ 0x78
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	46020c00 	.word	0x46020c00

0800088c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0b8      	sub	sp, #224	@ 0xe0
 8000890:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	22e0      	movs	r2, #224	@ 0xe0
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f010 fe60 	bl	801155e <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 800089e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a2:	f04f 0301 	mov.w	r3, #1
 80008a6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80008b0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80008b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80008b8:	2303      	movs	r3, #3
 80008ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80008c0:	230c      	movs	r3, #12
 80008c2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 80008c8:	2303      	movs	r3, #3
 80008ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80008d0:	230c      	movs	r3, #12
 80008d2:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 80008d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 80008da:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	4618      	mov	r0, r3
 80008e4:	f009 ffe4 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 80008ee:	f000 ff4d 	bl	800178c <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	37e0      	adds	r7, #224	@ 0xe0
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008fe:	f008 fced 	bl	80092dc <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000902:	2002      	movs	r0, #2
 8000904:	f008 fc8a 	bl	800921c <HAL_PWREx_ConfigSupply>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800090e:	f000 ff3d 	bl	800178c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2220      	movs	r2, #32
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f010 fe1a 	bl	801155e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800092a:	4b89      	ldr	r3, [pc, #548]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800092c:	4a89      	ldr	r2, [pc, #548]	@ (8000b54 <MX_ADC1_Init+0x23c>)
 800092e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000930:	4b87      	ldr	r3, [pc, #540]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000936:	4b86      	ldr	r3, [pc, #536]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800093c:	4b84      	ldr	r3, [pc, #528]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000942:	4b83      	ldr	r3, [pc, #524]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000948:	4b81      	ldr	r3, [pc, #516]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800094a:	2201      	movs	r2, #1
 800094c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094e:	4b80      	ldr	r3, [pc, #512]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000950:	2204      	movs	r2, #4
 8000952:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000954:	4b7e      	ldr	r3, [pc, #504]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000956:	2201      	movs	r2, #1
 8000958:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800095a:	4b7d      	ldr	r3, [pc, #500]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000962:	4b7b      	ldr	r3, [pc, #492]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000964:	220d      	movs	r2, #13
 8000966:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000968:	4b79      	ldr	r3, [pc, #484]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000970:	4b77      	ldr	r3, [pc, #476]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000972:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000976:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000978:	4b75      	ldr	r3, [pc, #468]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800097a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800097e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000980:	4b73      	ldr	r3, [pc, #460]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000982:	2201      	movs	r2, #1
 8000984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000988:	4b71      	ldr	r3, [pc, #452]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800098a:	2200      	movs	r2, #0
 800098c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800098e:	4b70      	ldr	r3, [pc, #448]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000990:	2200      	movs	r2, #0
 8000992:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000994:	4b6e      	ldr	r3, [pc, #440]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000996:	2200      	movs	r2, #0
 8000998:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800099a:	4b6d      	ldr	r3, [pc, #436]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800099c:	2203      	movs	r2, #3
 800099e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000b50 <MX_ADC1_Init+0x238>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a8:	4869      	ldr	r0, [pc, #420]	@ (8000b50 <MX_ADC1_Init+0x238>)
 80009aa:	f002 fd11 	bl	80033d0 <HAL_ADC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80009b4:	f000 feea 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b8:	4b67      	ldr	r3, [pc, #412]	@ (8000b58 <MX_ADC1_Init+0x240>)
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009bc:	2306      	movs	r3, #6
 80009be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ca:	2304      	movs	r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	485e      	ldr	r0, [pc, #376]	@ (8000b50 <MX_ADC1_Init+0x238>)
 80009d8:	f003 fc28 	bl	800422c <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80009e2:	f000 fed3 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009e6:	4b5d      	ldr	r3, [pc, #372]	@ (8000b5c <MX_ADC1_Init+0x244>)
 80009e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ea:	230c      	movs	r3, #12
 80009ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4857      	ldr	r0, [pc, #348]	@ (8000b50 <MX_ADC1_Init+0x238>)
 80009f4:	f003 fc1a 	bl	800422c <HAL_ADC_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80009fe:	f000 fec5 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a02:	4b57      	ldr	r3, [pc, #348]	@ (8000b60 <MX_ADC1_Init+0x248>)
 8000a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a06:	2312      	movs	r3, #18
 8000a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4850      	ldr	r0, [pc, #320]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a10:	f003 fc0c 	bl	800422c <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000a1a:	f000 feb7 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a1e:	4b51      	ldr	r3, [pc, #324]	@ (8000b64 <MX_ADC1_Init+0x24c>)
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a22:	2318      	movs	r3, #24
 8000a24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4849      	ldr	r0, [pc, #292]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a2c:	f003 fbfe 	bl	800422c <HAL_ADC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a36:	f000 fea9 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b68 <MX_ADC1_Init+0x250>)
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4841      	ldr	r0, [pc, #260]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a4a:	f003 fbef 	bl	800422c <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000a54:	f000 fe9a 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a58:	4b44      	ldr	r3, [pc, #272]	@ (8000b6c <MX_ADC1_Init+0x254>)
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a5c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	483a      	ldr	r0, [pc, #232]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a68:	f003 fbe0 	bl	800422c <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000a72:	f000 fe8b 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a76:	4b3e      	ldr	r3, [pc, #248]	@ (8000b70 <MX_ADC1_Init+0x258>)
 8000a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a7a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4832      	ldr	r0, [pc, #200]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a86:	f003 fbd1 	bl	800422c <HAL_ADC_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000a90:	f000 fe7c 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a94:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <MX_ADC1_Init+0x25c>)
 8000a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a98:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000a9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	482b      	ldr	r0, [pc, #172]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000aa4:	f003 fbc2 	bl	800422c <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000aae:	f000 fe6d 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <MX_ADC1_Init+0x260>)
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000ab6:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000aba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4823      	ldr	r0, [pc, #140]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000ac2:	f003 fbb3 	bl	800422c <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000acc:	f000 fe5e 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <MX_ADC1_Init+0x264>)
 8000ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	481c      	ldr	r0, [pc, #112]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000ae0:	f003 fba4 	bl	800422c <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000aea:	f000 fe4f 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aee:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <MX_ADC1_Init+0x268>)
 8000af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000af2:	f240 2306 	movw	r3, #518	@ 0x206
 8000af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	4619      	mov	r1, r3
 8000afc:	4814      	ldr	r0, [pc, #80]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000afe:	f003 fb95 	bl	800422c <HAL_ADC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000b08:	f000 fe40 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <MX_ADC1_Init+0x26c>)
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b10:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000b14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000b1c:	f003 fb86 	bl	800422c <HAL_ADC_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000b26:	f000 fe31 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_ADC1_Init+0x270>)
 8000b2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b2e:	f240 2312 	movw	r3, #530	@ 0x212
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000b3a:	f003 fb77 	bl	800422c <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b44:	f000 fe22 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000028 	.word	0x20000028
 8000b54:	42028000 	.word	0x42028000
 8000b58:	04000002 	.word	0x04000002
 8000b5c:	08000004 	.word	0x08000004
 8000b60:	0c000008 	.word	0x0c000008
 8000b64:	10000010 	.word	0x10000010
 8000b68:	14000020 	.word	0x14000020
 8000b6c:	1c000080 	.word	0x1c000080
 8000b70:	20000100 	.word	0x20000100
 8000b74:	2a000400 	.word	0x2a000400
 8000b78:	2e000800 	.word	0x2e000800
 8000b7c:	32001000 	.word	0x32001000
 8000b80:	3e008000 	.word	0x3e008000
 8000b84:	42010000 	.word	0x42010000
 8000b88:	ce080000 	.word	0xce080000

08000b8c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2220      	movs	r2, #32
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f010 fce0 	bl	801155e <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b9e:	4b34      	ldr	r3, [pc, #208]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000ba0:	4a34      	ldr	r2, [pc, #208]	@ (8000c74 <MX_ADC4_Init+0xe8>)
 8000ba2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ba4:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000baa:	4b31      	ldr	r3, [pc, #196]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bb8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000bbc:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bf4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bf8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c14:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c16:	f002 fbdb 	bl	80033d0 <HAL_ADC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000c20:	f000 fdb4 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_ADC4_Init+0xec>)
 8000c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c30:	2304      	movs	r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c3e:	f003 faf5 	bl	800422c <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000c48:	f000 fda0 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_ADC4_Init+0xf0>)
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c50:	2304      	movs	r3, #4
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c5a:	f003 fae7 	bl	800422c <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000c64:	f000 fd92 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000b4 	.word	0x200000b4
 8000c74:	46021000 	.word	0x46021000
 8000c78:	1c000080 	.word	0x1c000080
 8000c7c:	20000100 	.word	0x20000100

08000c80 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <MX_DMA2D_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ccc:	4809      	ldr	r0, [pc, #36]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cce:	f005 fa3b 	bl	8006148 <HAL_DMA2D_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000cd8:	f000 fd58 	bl	800178c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000ce0:	f005 fa94 	bl	800620c <HAL_DMA2D_ConfigLayer>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f000 fd4f 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000026c 	.word	0x2000026c
 8000cf8:	4002b000 	.word	0x4002b000

08000cfc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_GPDMA1_Init+0x6c>)
 8000d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d08:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <MX_GPDMA1_Init+0x6c>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_GPDMA1_Init+0x6c>)
 8000d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	201d      	movs	r0, #29
 8000d26:	f004 fab1 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d2a:	201d      	movs	r0, #29
 8000d2c:	f004 fac8 	bl	80052c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	201e      	movs	r0, #30
 8000d36:	f004 faa9 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d3a:	201e      	movs	r0, #30
 8000d3c:	f004 fac0 	bl	80052c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	201f      	movs	r0, #31
 8000d46:	f004 faa1 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d4a:	201f      	movs	r0, #31
 8000d4c:	f004 fab8 	bl	80052c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2020      	movs	r0, #32
 8000d56:	f004 fa99 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d5a:	2020      	movs	r0, #32
 8000d5c:	f004 fab0 	bl	80052c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	46020c00 	.word	0x46020c00

08000d6c <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <MX_HSPI1_Init+0x78>)
 8000d74:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d88:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d8c:	221a      	movs	r2, #26
 8000d8e:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000dce:	f00f ff5f 	bl	8010c90 <HAL_XSPI_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000dd8:	f000 fcd8 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200002d4 	.word	0x200002d4
 8000de4:	420d3400 	.word	0x420d3400

08000de8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dee:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <MX_I2C1_Init+0x78>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <MX_I2C1_Init+0x7c>)
 8000df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e22:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e24:	f006 fd78 	bl	8007918 <HAL_I2C_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2e:	f000 fcad 	bl	800178c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e36:	f007 fc1a 	bl	800866e <HAL_I2CEx_ConfigAnalogFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 fca4 	bl	800178c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e48:	f007 fc5c 	bl	8008704 <HAL_I2CEx_ConfigDigitalFilter>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 fc9b 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000334 	.word	0x20000334
 8000e60:	40005400 	.word	0x40005400
 8000e64:	20a0c4df 	.word	0x20a0c4df

08000e68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <MX_I2C2_Init+0x78>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee4 <MX_I2C2_Init+0x7c>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ea2:	480e      	ldr	r0, [pc, #56]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000ea4:	f006 fd38 	bl	8007918 <HAL_I2C_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eae:	f000 fc6d 	bl	800178c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4809      	ldr	r0, [pc, #36]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000eb6:	f007 fbda 	bl	800866e <HAL_I2CEx_ConfigAnalogFilter>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ec0:	f000 fc64 	bl	800178c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000ec8:	f007 fc1c 	bl	8008704 <HAL_I2CEx_ConfigDigitalFilter>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 fc5b 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000388 	.word	0x20000388
 8000ee0:	40005800 	.word	0x40005800
 8000ee4:	20a0c4df 	.word	0x20a0c4df

08000ee8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000eec:	2000      	movs	r0, #0
 8000eee:	f007 fc55 	bl	800879c <HAL_ICACHE_ConfigAssociativityMode>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ef8:	f000 fc48 	bl	800178c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000efc:	f007 fc6e 	bl	80087dc <HAL_ICACHE_Enable>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f06:	f000 fc41 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	@ 0x38
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2234      	movs	r2, #52	@ 0x34
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f010 fb1e 	bl	801155e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f22:	4b39      	ldr	r3, [pc, #228]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f24:	4a39      	ldr	r2, [pc, #228]	@ (800100c <MX_LTDC_Init+0xfc>)
 8000f26:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f28:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f2e:	4b36      	ldr	r3, [pc, #216]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f34:	4b34      	ldr	r3, [pc, #208]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f3a:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f40:	4b31      	ldr	r3, [pc, #196]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f42:	2203      	movs	r2, #3
 8000f44:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f46:	4b30      	ldr	r3, [pc, #192]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f4e:	220b      	movs	r2, #11
 8000f50:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f54:	220b      	movs	r2, #11
 8000f56:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f5a:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f60:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f62:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000f68:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f6a:	f240 3233 	movw	r2, #819	@ 0x333
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000f70:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f72:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f90:	481d      	ldr	r0, [pc, #116]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f92:	f007 fc33 	bl	80087fc <HAL_LTDC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f9c:	f000 fbf6 	bl	800178c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000fa4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000fa8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fae:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000fb2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fb8:	23ff      	movs	r3, #255	@ 0xff
 8000fba:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fc0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fc4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000ff0:	f007 fd96 	bl	8008b20 <HAL_LTDC_ConfigLayer>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000ffa:	f000 fbc7 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	@ 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200003dc 	.word	0x200003dc
 800100c:	40016800 	.word	0x40016800

08001010 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001028:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <MX_RTC_Init+0x94>)
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <MX_RTC_Init+0x98>)
 800102c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800102e:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001036:	227f      	movs	r2, #127	@ 0x7f
 8001038:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_RTC_Init+0x94>)
 800103c:	22ff      	movs	r2, #255	@ 0xff
 800103e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_RTC_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001054:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001058:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_RTC_Init+0x94>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001060:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001066:	480f      	ldr	r0, [pc, #60]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001068:	f00c fc1e 	bl	800d8a8 <HAL_RTC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001072:	f000 fb8b 	bl	800178c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <MX_RTC_Init+0x94>)
 800108c:	f00c fd3a 	bl	800db04 <HAL_RTCEx_PrivilegeModeSet>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001096:	f000 fb79 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000484 	.word	0x20000484
 80010a8:	46007800 	.word	0x46007800

080010ac <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010b2:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <MX_SAI2_Init+0xc8>)
 80010b4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010ce:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80010d4:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010d6:	4a28      	ldr	r2, [pc, #160]	@ (8001178 <MX_SAI2_Init+0xcc>)
 80010d8:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010da:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80010e0:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010e6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010e8:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010f6:	2210      	movs	r2, #16
 80010f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80010fa:	2302      	movs	r3, #2
 80010fc:	2202      	movs	r2, #2
 80010fe:	2101      	movs	r1, #1
 8001100:	481b      	ldr	r0, [pc, #108]	@ (8001170 <MX_SAI2_Init+0xc4>)
 8001102:	f00c fd2d 	bl	800db60 <HAL_SAI_InitProtocol>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 800110c:	f000 fb3e 	bl	800178c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001110:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001112:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <MX_SAI2_Init+0xd4>)
 8001114:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001116:	4b19      	ldr	r3, [pc, #100]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001118:	2201      	movs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <MX_SAI2_Init+0xd0>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_SAI2_Init+0xd0>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001130:	2202      	movs	r2, #2
 8001132:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001136:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <MX_SAI2_Init+0xcc>)
 8001138:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <MX_SAI2_Init+0xd0>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001140:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001142:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001146:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_SAI2_Init+0xd0>)
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001154:	2308      	movs	r3, #8
 8001156:	2202      	movs	r2, #2
 8001158:	2100      	movs	r1, #0
 800115a:	4808      	ldr	r0, [pc, #32]	@ (800117c <MX_SAI2_Init+0xd0>)
 800115c:	f00c fd00 	bl	800db60 <HAL_SAI_InitProtocol>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 8001166:	f000 fb11 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200004b4 	.word	0x200004b4
 8001174:	40015804 	.word	0x40015804
 8001178:	00017700 	.word	0x00017700
 800117c:	2000054c 	.word	0x2000054c
 8001180:	40015824 	.word	0x40015824

08001184 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <MX_TIM3_Init+0xc0>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80011ae:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011b0:	22a0      	movs	r2, #160	@ 0xa0
 80011b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011bc:	2264      	movs	r2, #100	@ 0x64
 80011be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011cc:	481c      	ldr	r0, [pc, #112]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011ce:	f00d fc15 	bl	800e9fc <HAL_TIM_PWM_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011d8:	f000 fad8 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4815      	ldr	r0, [pc, #84]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011ec:	f00e fbec 	bl	800f9c8 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011f6:	f000 fac9 	bl	800178c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fa:	2360      	movs	r3, #96	@ 0x60
 80011fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80011fe:	234b      	movs	r3, #75	@ 0x4b
 8001200:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	220c      	movs	r2, #12
 800120e:	4619      	mov	r1, r3
 8001210:	480b      	ldr	r0, [pc, #44]	@ (8001240 <MX_TIM3_Init+0xbc>)
 8001212:	f00d fc4b 	bl	800eaac <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800121c:	f000 fab6 	bl	800178c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <MX_TIM3_Init+0xbc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	69da      	ldr	r2, [r3, #28]
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_TIM3_Init+0xbc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800122e:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <MX_TIM3_Init+0xbc>)
 8001232:	f001 f859 	bl	80022e8 <HAL_TIM_MspPostInit>

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	@ 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000074c 	.word	0x2000074c
 8001244:	40000400 	.word	0x40000400

08001248 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001268:	4a1e      	ldr	r2, [pc, #120]	@ (80012e4 <MX_TIM15_Init+0x9c>)
 800126a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_TIM15_Init+0x98>)
 800126e:	221a      	movs	r2, #26
 8001270:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_TIM15_Init+0x98>)
 800127a:	2231      	movs	r2, #49	@ 0x31
 800127c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_TIM15_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001290:	4813      	ldr	r0, [pc, #76]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001292:	f00d fac4 	bl	800e81e <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 800129c:	f000 fa76 	bl	800178c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <MX_TIM15_Init+0x98>)
 80012ae:	f00d fd11 	bl	800ecd4 <HAL_TIM_ConfigClockSource>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80012b8:	f000 fa68 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012bc:	2320      	movs	r3, #32
 80012be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_TIM15_Init+0x98>)
 80012ca:	f00e fb7d 	bl	800f9c8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80012d4:	f000 fa5a 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000798 	.word	0x20000798
 80012e4:	40014000 	.word	0x40014000

080012e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 80012ee:	4a23      	ldr	r2, [pc, #140]	@ (800137c <MX_USART1_UART_Init+0x94>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132a:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001330:	4811      	ldr	r0, [pc, #68]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001332:	f00e fc0b 	bl	800fb4c <HAL_UART_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800133c:	f000 fa26 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001340:	2100      	movs	r1, #0
 8001342:	480d      	ldr	r0, [pc, #52]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001344:	f00f fbd9 	bl	8010afa <HAL_UARTEx_SetTxFifoThreshold>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800134e:	f000 fa1d 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001356:	f00f fc0e 	bl	8010b76 <HAL_UARTEx_SetRxFifoThreshold>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001360:	f000 fa14 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001366:	f00f fb8f 	bl	8010a88 <HAL_UARTEx_DisableFifoMode>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001370:	f000 fa0c 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200007e4 	.word	0x200007e4
 800137c:	40013800 	.word	0x40013800

08001380 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001386:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001388:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800138c:	2209      	movs	r2, #9
 800138e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001390:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001392:	2200      	movs	r2, #0
 8001394:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001398:	2203      	movs	r2, #3
 800139a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800139e:	2200      	movs	r2, #0
 80013a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013bc:	2200      	movs	r2, #0
 80013be:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013c2:	f007 fd5e 	bl	8008e82 <HAL_PCD_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80013cc:	f000 f9de 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000878 	.word	0x20000878
 80013d8:	42040000 	.word	0x42040000

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	4b8c      	ldr	r3, [pc, #560]	@ (8001624 <MX_GPIO_Init+0x248>)
 80013f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f8:	4a8a      	ldr	r2, [pc, #552]	@ (8001624 <MX_GPIO_Init+0x248>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001402:	4b88      	ldr	r3, [pc, #544]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001410:	4b84      	ldr	r3, [pc, #528]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001416:	4a83      	ldr	r2, [pc, #524]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001420:	4b80      	ldr	r3, [pc, #512]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	4b7d      	ldr	r3, [pc, #500]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001434:	4a7b      	ldr	r2, [pc, #492]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800143e:	4b79      	ldr	r3, [pc, #484]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144c:	4b75      	ldr	r3, [pc, #468]	@ (8001624 <MX_GPIO_Init+0x248>)
 800144e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001452:	4a74      	ldr	r2, [pc, #464]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001458:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800145c:	4b71      	ldr	r3, [pc, #452]	@ (8001624 <MX_GPIO_Init+0x248>)
 800145e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b6e      	ldr	r3, [pc, #440]	@ (8001624 <MX_GPIO_Init+0x248>)
 800146c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001470:	4a6c      	ldr	r2, [pc, #432]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800147a:	4b6a      	ldr	r3, [pc, #424]	@ (8001624 <MX_GPIO_Init+0x248>)
 800147c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b66      	ldr	r3, [pc, #408]	@ (8001624 <MX_GPIO_Init+0x248>)
 800148a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148e:	4a65      	ldr	r2, [pc, #404]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001498:	4b62      	ldr	r3, [pc, #392]	@ (8001624 <MX_GPIO_Init+0x248>)
 800149a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	4b57      	ldr	r3, [pc, #348]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ca:	4a56      	ldr	r2, [pc, #344]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014d4:	4b53      	ldr	r3, [pc, #332]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014e2:	4b50      	ldr	r3, [pc, #320]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2104      	movs	r1, #4
 8001504:	4848      	ldr	r0, [pc, #288]	@ (8001628 <MX_GPIO_Init+0x24c>)
 8001506:	f006 f9b3 	bl	8007870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2110      	movs	r1, #16
 800150e:	4846      	ldr	r0, [pc, #280]	@ (8001628 <MX_GPIO_Init+0x24c>)
 8001510:	f006 f9ae 	bl	8007870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2114      	movs	r1, #20
 8001518:	4844      	ldr	r0, [pc, #272]	@ (800162c <MX_GPIO_Init+0x250>)
 800151a:	f006 f9a9 	bl	8007870 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800151e:	2314      	movs	r3, #20
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	483c      	ldr	r0, [pc, #240]	@ (8001628 <MX_GPIO_Init+0x24c>)
 8001536:	f005 ffc3 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800153a:	2320      	movs	r3, #32
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153e:	4b3c      	ldr	r3, [pc, #240]	@ (8001630 <MX_GPIO_Init+0x254>)
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4836      	ldr	r0, [pc, #216]	@ (8001628 <MX_GPIO_Init+0x24c>)
 800154e:	f005 ffb7 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001552:	2302      	movs	r3, #2
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001556:	4b37      	ldr	r3, [pc, #220]	@ (8001634 <MX_GPIO_Init+0x258>)
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	4834      	ldr	r0, [pc, #208]	@ (8001638 <MX_GPIO_Init+0x25c>)
 8001566:	f005 ffab 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 800156a:	2310      	movs	r3, #16
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800156e:	4b33      	ldr	r3, [pc, #204]	@ (800163c <MX_GPIO_Init+0x260>)
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001572:	2301      	movs	r3, #1
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	482e      	ldr	r0, [pc, #184]	@ (8001638 <MX_GPIO_Init+0x25c>)
 800157e:	f005 ff9f 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001582:	2314      	movs	r3, #20
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	4824      	ldr	r0, [pc, #144]	@ (800162c <MX_GPIO_Init+0x250>)
 800159a:	f005 ff91 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 800159e:	2380      	movs	r3, #128	@ 0x80
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	481e      	ldr	r0, [pc, #120]	@ (800162c <MX_GPIO_Init+0x250>)
 80015b2:	f005 ff85 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80015b6:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	481d      	ldr	r0, [pc, #116]	@ (8001640 <MX_GPIO_Init+0x264>)
 80015cc:	f005 ff78 	bl	80074c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80015d0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4817      	ldr	r0, [pc, #92]	@ (8001644 <MX_GPIO_Init+0x268>)
 80015e6:	f005 ff6b 	bl	80074c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	200c      	movs	r0, #12
 80015f0:	f003 fe4c 	bl	800528c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015f4:	200c      	movs	r0, #12
 80015f6:	f003 fe63 	bl	80052c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	200f      	movs	r0, #15
 8001600:	f003 fe44 	bl	800528c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001604:	200f      	movs	r0, #15
 8001606:	f003 fe5b 	bl	80052c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2010      	movs	r0, #16
 8001610:	f003 fe3c 	bl	800528c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001614:	2010      	movs	r0, #16
 8001616:	f003 fe53 	bl	80052c0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161a:	bf00      	nop
 800161c:	3738      	adds	r7, #56	@ 0x38
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	46020c00 	.word	0x46020c00
 8001628:	42021000 	.word	0x42021000
 800162c:	42020c00 	.word	0x42020c00
 8001630:	10110000 	.word	0x10110000
 8001634:	10310000 	.word	0x10310000
 8001638:	42020000 	.word	0x42020000
 800163c:	10210000 	.word	0x10210000
 8001640:	42021800 	.word	0x42021800
 8001644:	42020400 	.word	0x42020400

08001648 <HAL_SAI_RxHalfCpltCallback>:
	temp = temp / denoiseSize;
	return temp;
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 8 ) / 2; i += 8)
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	e033      	b.n	80016c2 <HAL_SAI_RxHalfCpltCallback+0x7a>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 800165a:	4a1f      	ldr	r2, [pc, #124]	@ (80016d8 <HAL_SAI_RxHalfCpltCallback+0x90>)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800166a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800166e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001672:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80016dc <HAL_SAI_RxHalfCpltCallback+0x94>
 8001676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800167e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001682:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001686:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 800168a:	edd7 7a03 	vldr	s15, [r7, #12]
 800168e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80016e0 <HAL_SAI_RxHalfCpltCallback+0x98>
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169a:	ee17 3a90 	vmov	r3, s15
 800169e:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	4910      	ldr	r1, [pc, #64]	@ (80016e4 <HAL_SAI_RxHalfCpltCallback+0x9c>)
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 80016aa:	8afb      	ldrh	r3, [r7, #22]
 80016ac:	3301      	adds	r3, #1
 80016ae:	490d      	ldr	r1, [pc, #52]	@ (80016e4 <HAL_SAI_RxHalfCpltCallback+0x9c>)
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 80016b6:	8afb      	ldrh	r3, [r7, #22]
 80016b8:	3302      	adds	r3, #2
 80016ba:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 8 ) / 2; i += 8)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	3308      	adds	r3, #8
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016c8:	dbc7      	blt.n	800165a <HAL_SAI_RxHalfCpltCallback+0x12>
	}
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	20004160 	.word	0x20004160
 80016dc:	4b800000 	.word	0x4b800000
 80016e0:	4b000000 	.word	0x4b000000
 80016e4:	20008160 	.word	0x20008160

080016e8 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = sampleSize;
 80016f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016f4:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8)) / 2; i < sampleSize * 8; i += 8)
 80016f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	e033      	b.n	8001766 <HAL_SAI_RxCpltCallback+0x7e>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 80016fe:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <HAL_SAI_RxCpltCallback+0x94>)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001712:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001716:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001780 <HAL_SAI_RxCpltCallback+0x98>
 800171a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001722:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001726:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800172a:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 800172e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001732:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001784 <HAL_SAI_RxCpltCallback+0x9c>
 8001736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173e:	ee17 3a90 	vmov	r3, s15
 8001742:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 8001744:	8afb      	ldrh	r3, [r7, #22]
 8001746:	4910      	ldr	r1, [pc, #64]	@ (8001788 <HAL_SAI_RxCpltCallback+0xa0>)
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 800174e:	8afb      	ldrh	r3, [r7, #22]
 8001750:	3301      	adds	r3, #1
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <HAL_SAI_RxCpltCallback+0xa0>)
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 800175a:	8afb      	ldrh	r3, [r7, #22]
 800175c:	3302      	adds	r3, #2
 800175e:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8)) / 2; i < sampleSize * 8; i += 8)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	3308      	adds	r3, #8
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800176c:	dbc7      	blt.n	80016fe <HAL_SAI_RxCpltCallback+0x16>
	}
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	20004160 	.word	0x20004160
 8001780:	4b800000 	.word	0x4b800000
 8001784:	4b000000 	.word	0x4b000000
 8001788:	20008160 	.word	0x20008160

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <Error_Handler+0x8>

08001798 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <HAL_MspInit+0x30>)
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a4:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x30>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x30>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80017bc:	f007 fd9e 	bl	80092fc <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	46020c00 	.word	0x46020c00

080017cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0e0      	sub	sp, #384	@ 0x180
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017d6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017da:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ec:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017f0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017f4:	4618      	mov	r0, r3
 80017f6:	23e0      	movs	r3, #224	@ 0xe0
 80017f8:	461a      	mov	r2, r3
 80017fa:	2100      	movs	r1, #0
 80017fc:	f00f feaf 	bl	801155e <memset>
  if(hadc->Instance==ADC1)
 8001800:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001804:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4aa1      	ldr	r2, [pc, #644]	@ (8001a94 <HAL_ADC_MspInit+0x2c8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	f040 8152 	bne.w	8001ab8 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001814:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001818:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 800181c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001828:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800182c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001830:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001834:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	4618      	mov	r0, r3
 800183e:	f009 f837 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001848:	f7ff ffa0 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800184c:	4b92      	ldr	r3, [pc, #584]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 800184e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001852:	4a91      	ldr	r2, [pc, #580]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 8001854:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001858:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800185c:	4b8e      	ldr	r3, [pc, #568]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 800185e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001862:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001866:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800186a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001874:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001878:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b87      	ldr	r3, [pc, #540]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 800187c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001880:	4a85      	ldr	r2, [pc, #532]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800188a:	4b83      	ldr	r3, [pc, #524]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 800188c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001890:	f003 0204 	and.w	r2, r3, #4
 8001894:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001898:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018a2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018a6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b7b      	ldr	r3, [pc, #492]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 80018aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ae:	4a7a      	ldr	r2, [pc, #488]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b8:	4b77      	ldr	r3, [pc, #476]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 80018ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018be:	f003 0201 	and.w	r2, r3, #1
 80018c2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018c6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018d0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018d4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b70      	ldr	r3, [pc, #448]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 80018d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018dc:	4a6e      	ldr	r2, [pc, #440]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a98 <HAL_ADC_MspInit+0x2cc>)
 80018e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ec:	f003 0202 	and.w	r2, r3, #2
 80018f0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018f4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018fe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001902:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001904:	230f      	movs	r3, #15
 8001906:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190a:	2303      	movs	r3, #3
 800190c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001916:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800191a:	4619      	mov	r1, r3
 800191c:	485f      	ldr	r0, [pc, #380]	@ (8001a9c <HAL_ADC_MspInit+0x2d0>)
 800191e:	f005 fdcf 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8001922:	23ed      	movs	r3, #237	@ 0xed
 8001924:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001928:	2303      	movs	r3, #3
 800192a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001938:	4619      	mov	r1, r3
 800193a:	4859      	ldr	r0, [pc, #356]	@ (8001aa0 <HAL_ADC_MspInit+0x2d4>)
 800193c:	f005 fdc0 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8001940:	2303      	movs	r3, #3
 8001942:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001946:	2303      	movs	r3, #3
 8001948:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001956:	4619      	mov	r1, r3
 8001958:	4852      	ldr	r0, [pc, #328]	@ (8001aa4 <HAL_ADC_MspInit+0x2d8>)
 800195a:	f005 fdb1 	bl	80074c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800195e:	2321      	movs	r3, #33	@ 0x21
 8001960:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800197c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001980:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001984:	2301      	movs	r3, #1
 8001986:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800198a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800198e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 8001992:	2301      	movs	r3, #1
 8001994:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8001998:	2301      	movs	r3, #1
 800199a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800199e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80019b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019bc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80019c0:	232b      	movs	r3, #43	@ 0x2b
 80019c2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80019d2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80019d6:	4934      	ldr	r1, [pc, #208]	@ (8001aa8 <HAL_ADC_MspInit+0x2dc>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 fe85 	bl	80066e8 <HAL_DMAEx_List_BuildNode>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 80019e4:	f7ff fed2 	bl	800178c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80019e8:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa8 <HAL_ADC_MspInit+0x2dc>)
 80019ea:	2100      	movs	r1, #0
 80019ec:	482f      	ldr	r0, [pc, #188]	@ (8001aac <HAL_ADC_MspInit+0x2e0>)
 80019ee:	f004 fea7 	bl	8006740 <HAL_DMAEx_List_InsertNode>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80019f8:	f7ff fec8 	bl	800178c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80019fc:	482b      	ldr	r0, [pc, #172]	@ (8001aac <HAL_ADC_MspInit+0x2e0>)
 80019fe:	f004 ff68 	bl	80068d2 <HAL_DMAEx_List_SetCircularMode>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8001a08:	f7ff fec0 	bl	800178c <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001a0c:	4b28      	ldr	r3, [pc, #160]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a0e:	4a29      	ldr	r2, [pc, #164]	@ (8001ab4 <HAL_ADC_MspInit+0x2e8>)
 8001a10:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001a12:	4b27      	ldr	r3, [pc, #156]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001a18:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001a1e:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a24:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a2c:	2281      	movs	r2, #129	@ 0x81
 8001a2e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001a30:	481f      	ldr	r0, [pc, #124]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a32:	f004 fc99 	bl	8006368 <HAL_DMAEx_List_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001a3c:	f7ff fea6 	bl	800178c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001a40:	491a      	ldr	r1, [pc, #104]	@ (8001aac <HAL_ADC_MspInit+0x2e0>)
 8001a42:	481b      	ldr	r0, [pc, #108]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a44:	f004 ffa6 	bl	8006994 <HAL_DMAEx_List_LinkQ>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8001a4e:	f7ff fe9d 	bl	800178c <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001a52:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a56:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a5e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a60:	4a13      	ldr	r2, [pc, #76]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a62:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a66:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a6e:	2110      	movs	r1, #16
 8001a70:	480f      	ldr	r0, [pc, #60]	@ (8001ab0 <HAL_ADC_MspInit+0x2e4>)
 8001a72:	f004 f887 	bl	8005b84 <HAL_DMA_ConfigChannelAttributes>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001a7c:	f7ff fe86 	bl	800178c <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2025      	movs	r0, #37	@ 0x25
 8001a86:	f003 fc01 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a8a:	2025      	movs	r0, #37	@ 0x25
 8001a8c:	f003 fc18 	bl	80052c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001a90:	e0c0      	b.n	8001c14 <HAL_ADC_MspInit+0x448>
 8001a92:	bf00      	nop
 8001a94:	42028000 	.word	0x42028000
 8001a98:	46020c00 	.word	0x46020c00
 8001a9c:	42020800 	.word	0x42020800
 8001aa0:	42020000 	.word	0x42020000
 8001aa4:	42020400 	.word	0x42020400
 8001aa8:	20000140 	.word	0x20000140
 8001aac:	20000164 	.word	0x20000164
 8001ab0:	2000017c 	.word	0x2000017c
 8001ab4:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001ab8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001abc:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <HAL_ADC_MspInit+0x454>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	f040 80a4 	bne.w	8001c14 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001acc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ad0:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001ad4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001ae0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ae4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ae8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 0320 	add.w	r3, r7, #32
 8001af4:	4618      	mov	r0, r3
 8001af6:	f008 fedb 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001b00:	f7ff fe44 	bl	800178c <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001b04:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <HAL_ADC_MspInit+0x458>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0a:	4a46      	ldr	r2, [pc, #280]	@ (8001c24 <HAL_ADC_MspInit+0x458>)
 8001b0c:	f043 0320 	orr.w	r3, r3, #32
 8001b10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b14:	4b43      	ldr	r3, [pc, #268]	@ (8001c24 <HAL_ADC_MspInit+0x458>)
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b1a:	f003 0220 	and.w	r2, r3, #32
 8001b1e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b22:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b2c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b30:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b32:	4b3c      	ldr	r3, [pc, #240]	@ (8001c24 <HAL_ADC_MspInit+0x458>)
 8001b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b38:	4a3a      	ldr	r2, [pc, #232]	@ (8001c24 <HAL_ADC_MspInit+0x458>)
 8001b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b42:	4b38      	ldr	r3, [pc, #224]	@ (8001c24 <HAL_ADC_MspInit+0x458>)
 8001b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b48:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001b4c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b50:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b5a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b5e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b66:	2303      	movs	r3, #3
 8001b68:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b72:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b76:	4619      	mov	r1, r3
 8001b78:	482b      	ldr	r0, [pc, #172]	@ (8001c28 <HAL_ADC_MspInit+0x45c>)
 8001b7a:	f005 fca1 	bl	80074c0 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001b80:	4a2b      	ldr	r2, [pc, #172]	@ (8001c30 <HAL_ADC_MspInit+0x464>)
 8001b82:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001b84:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b90:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001b96:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001b9e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ba2:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001ba4:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bb0:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001bd6:	4815      	ldr	r0, [pc, #84]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bd8:	f003 fc34 	bl	8005444 <HAL_DMA_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001be2:	f7ff fdd3 	bl	800178c <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001be6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bea:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bf2:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001bf6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bfa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c02:	2110      	movs	r1, #16
 8001c04:	4809      	ldr	r0, [pc, #36]	@ (8001c2c <HAL_ADC_MspInit+0x460>)
 8001c06:	f003 ffbd 	bl	8005b84 <HAL_DMA_ConfigChannelAttributes>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8001c10:	f7ff fdbc 	bl	800178c <Error_Handler>
}
 8001c14:	bf00      	nop
 8001c16:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	46021000 	.word	0x46021000
 8001c24:	46020c00 	.word	0x46020c00
 8001c28:	42021800 	.word	0x42021800
 8001c2c:	200001f4 	.word	0x200001f4
 8001c30:	40020150 	.word	0x40020150

08001c34 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0b      	ldr	r2, [pc, #44]	@ (8001c70 <HAL_DMA2D_MspInit+0x3c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10e      	bne.n	8001c64 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_DMA2D_MspInit+0x40>)
 8001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4c:	4a09      	ldr	r2, [pc, #36]	@ (8001c74 <HAL_DMA2D_MspInit+0x40>)
 8001c4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c52:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <HAL_DMA2D_MspInit+0x40>)
 8001c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	4002b000 	.word	0x4002b000
 8001c74:	46020c00 	.word	0x46020c00

08001c78 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2a      	ldr	r2, [pc, #168]	@ (8001d40 <HAL_XSPI_MspInit+0xc8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d14d      	bne.n	8001d36 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d44 <HAL_XSPI_MspInit+0xcc>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca0:	4a28      	ldr	r2, [pc, #160]	@ (8001d44 <HAL_XSPI_MspInit+0xcc>)
 8001ca2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ca6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001caa:	4b26      	ldr	r3, [pc, #152]	@ (8001d44 <HAL_XSPI_MspInit+0xcc>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb8:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <HAL_XSPI_MspInit+0xcc>)
 8001cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cbe:	4a21      	ldr	r2, [pc, #132]	@ (8001d44 <HAL_XSPI_MspInit+0xcc>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <HAL_XSPI_MspInit+0xcc>)
 8001cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <HAL_XSPI_MspInit+0xcc>)
 8001cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cdc:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <HAL_XSPI_MspInit+0xcc>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ce6:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <HAL_XSPI_MspInit+0xcc>)
 8001ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001cf4:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001cf8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d06:	2308      	movs	r3, #8
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <HAL_XSPI_MspInit+0xd0>)
 8001d12:	f005 fbd5 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d16:	230f      	movs	r3, #15
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d26:	2308      	movs	r3, #8
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <HAL_XSPI_MspInit+0xd4>)
 8001d32:	f005 fbc5 	bl	80074c0 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	420d3400 	.word	0x420d3400
 8001d44:	46020c00 	.word	0x46020c00
 8001d48:	42021c00 	.word	0x42021c00
 8001d4c:	42022000 	.word	0x42022000

08001d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0c4      	sub	sp, #272	@ 0x110
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d5e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	22e0      	movs	r2, #224	@ 0xe0
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00f fbf0 	bl	801155e <memset>
  if(hi2c->Instance==I2C1)
 8001d7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a63      	ldr	r2, [pc, #396]	@ (8001f18 <HAL_I2C_MspInit+0x1c8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d14f      	bne.n	8001e30 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d90:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da2:	f107 0318 	add.w	r3, r7, #24
 8001da6:	4618      	mov	r0, r3
 8001da8:	f008 fd82 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001db2:	f7ff fceb 	bl	800178c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001db6:	4b59      	ldr	r3, [pc, #356]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dbc:	4a57      	ldr	r2, [pc, #348]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dc6:	4b55      	ldr	r3, [pc, #340]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001dd4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001dd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ddc:	2312      	movs	r3, #18
 8001dde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dee:	2304      	movs	r3, #4
 8001df0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001df4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4849      	ldr	r0, [pc, #292]	@ (8001f20 <HAL_I2C_MspInit+0x1d0>)
 8001dfc:	f005 fb60 	bl	80074c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e00:	4b46      	ldr	r3, [pc, #280]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e06:	4a45      	ldr	r2, [pc, #276]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001e08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e0c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e10:	4b42      	ldr	r3, [pc, #264]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e16:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001e1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e1e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e28:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e2c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e2e:	e06e      	b.n	8001f0e <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001e30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a39      	ldr	r2, [pc, #228]	@ (8001f24 <HAL_I2C_MspInit+0x1d4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d165      	bne.n	8001f0e <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e42:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e54:	f107 0318 	add.w	r3, r7, #24
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f008 fd29 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001e64:	f7ff fc92 	bl	800178c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e68:	4b2c      	ldr	r3, [pc, #176]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001e70:	f043 0320 	orr.w	r3, r3, #32
 8001e74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e78:	4b28      	ldr	r3, [pc, #160]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e7e:	f003 0220 	and.w	r2, r3, #32
 8001e82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e94:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e96:	2303      	movs	r3, #3
 8001e98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9c:	2312      	movs	r3, #18
 8001e9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eb4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481b      	ldr	r0, [pc, #108]	@ (8001f28 <HAL_I2C_MspInit+0x1d8>)
 8001ebc:	f005 fb00 	bl	80074c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ec0:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ec6:	4a15      	ldr	r2, [pc, #84]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001ec8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ecc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_I2C_MspInit+0x1cc>)
 8001ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ed6:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001eda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001eec:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2039      	movs	r0, #57	@ 0x39
 8001ef4:	f003 f9ca 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ef8:	2039      	movs	r0, #57	@ 0x39
 8001efa:	f003 f9e1 	bl	80052c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	203a      	movs	r0, #58	@ 0x3a
 8001f04:	f003 f9c2 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001f08:	203a      	movs	r0, #58	@ 0x3a
 8001f0a:	f003 f9d9 	bl	80052c0 <HAL_NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40005400 	.word	0x40005400
 8001f1c:	46020c00 	.word	0x46020c00
 8001f20:	42021800 	.word	0x42021800
 8001f24:	40005800 	.word	0x40005800
 8001f28:	42021400 	.word	0x42021400

08001f2c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b0c6      	sub	sp, #280	@ 0x118
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f3a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	22e0      	movs	r2, #224	@ 0xe0
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00f fb02 	bl	801155e <memset>
  if(hltdc->Instance==LTDC)
 8001f5a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a92      	ldr	r2, [pc, #584]	@ (80021b0 <HAL_LTDC_MspInit+0x284>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	f040 811b 	bne.w	80021a4 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0302 	mov.w	r3, #2
 8001f76:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001f80:	2303      	movs	r3, #3
 8001f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001f84:	2304      	movs	r3, #4
 8001f86:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001f88:	2332      	movs	r3, #50	@ 0x32
 8001f8a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001f90:	2302      	movs	r3, #2
 8001f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001f94:	2308      	movs	r3, #8
 8001f96:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001fa0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa6:	f107 0320 	add.w	r3, r7, #32
 8001faa:	4618      	mov	r0, r3
 8001fac:	f008 fc80 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001fb6:	f7ff fbe9 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fba:	4b7e      	ldr	r3, [pc, #504]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8001fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fc0:	4a7c      	ldr	r2, [pc, #496]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8001fc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001fc6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001fca:	4b7a      	ldr	r3, [pc, #488]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8001fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd8:	4b76      	ldr	r3, [pc, #472]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8001fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fde:	4a75      	ldr	r2, [pc, #468]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fe8:	4b72      	ldr	r3, [pc, #456]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8001fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fee:	f003 0202 	and.w	r2, r3, #2
 8001ff2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ff6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002000:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002004:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002006:	4b6b      	ldr	r3, [pc, #428]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8002008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800200c:	4a69      	ldr	r2, [pc, #420]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002016:	4b67      	ldr	r3, [pc, #412]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8002018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800201c:	f003 0210 	and.w	r2, r3, #16
 8002020:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800202e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002032:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002034:	4b5f      	ldr	r3, [pc, #380]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8002036:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800203a:	4a5e      	ldr	r2, [pc, #376]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002044:	4b5b      	ldr	r3, [pc, #364]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8002046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800204a:	f003 0208 	and.w	r2, r3, #8
 800204e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800205c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002060:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	4b54      	ldr	r3, [pc, #336]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8002064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002068:	4a52      	ldr	r2, [pc, #328]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002072:	4b50      	ldr	r3, [pc, #320]	@ (80021b4 <HAL_LTDC_MspInit+0x288>)
 8002074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002078:	f003 0204 	and.w	r2, r3, #4
 800207c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002080:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800208a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800208e:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002090:	2304      	movs	r3, #4
 8002092:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020a8:	2308      	movs	r3, #8
 80020aa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ae:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020b2:	4619      	mov	r1, r3
 80020b4:	4840      	ldr	r0, [pc, #256]	@ (80021b8 <HAL_LTDC_MspInit+0x28c>)
 80020b6:	f005 fa03 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80020ba:	f64f 7381 	movw	r3, #65409	@ 0xff81
 80020be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020d4:	2308      	movs	r3, #8
 80020d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020da:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020de:	4619      	mov	r1, r3
 80020e0:	4836      	ldr	r0, [pc, #216]	@ (80021bc <HAL_LTDC_MspInit+0x290>)
 80020e2:	f005 f9ed 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80020e6:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 80020ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002100:	2308      	movs	r3, #8
 8002102:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002106:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800210a:	4619      	mov	r1, r3
 800210c:	482c      	ldr	r0, [pc, #176]	@ (80021c0 <HAL_LTDC_MspInit+0x294>)
 800210e:	f005 f9d7 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002112:	23c0      	movs	r3, #192	@ 0xc0
 8002114:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 800212a:	2307      	movs	r3, #7
 800212c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002130:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002134:	4619      	mov	r1, r3
 8002136:	4823      	ldr	r0, [pc, #140]	@ (80021c4 <HAL_LTDC_MspInit+0x298>)
 8002138:	f005 f9c2 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800213c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002140:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002156:	2308      	movs	r3, #8
 8002158:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002160:	4619      	mov	r1, r3
 8002162:	4818      	ldr	r0, [pc, #96]	@ (80021c4 <HAL_LTDC_MspInit+0x298>)
 8002164:	f005 f9ac 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002168:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800216c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002182:	2307      	movs	r3, #7
 8002184:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800218c:	4619      	mov	r1, r3
 800218e:	480a      	ldr	r0, [pc, #40]	@ (80021b8 <HAL_LTDC_MspInit+0x28c>)
 8002190:	f005 f996 	bl	80074c0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2087      	movs	r0, #135	@ 0x87
 800219a:	f003 f877 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800219e:	2087      	movs	r0, #135	@ 0x87
 80021a0:	f003 f88e 	bl	80052c0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80021a4:	bf00      	nop
 80021a6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40016800 	.word	0x40016800
 80021b4:	46020c00 	.word	0x46020c00
 80021b8:	42020400 	.word	0x42020400
 80021bc:	42021000 	.word	0x42021000
 80021c0:	42020c00 	.word	0x42020c00
 80021c4:	42020800 	.word	0x42020800

080021c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b0bc      	sub	sp, #240	@ 0xf0
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	22e0      	movs	r2, #224	@ 0xe0
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f00f f9c0 	bl	801155e <memset>
  if(hrtc->Instance==RTC)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002258 <HAL_RTC_MspInit+0x90>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d132      	bne.n	800224e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4618      	mov	r0, r3
 8002202:	f008 fb55 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800220c:	f7ff fabe 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_RTC_MspInit+0x94>)
 8002212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002216:	4a11      	ldr	r2, [pc, #68]	@ (800225c <HAL_RTC_MspInit+0x94>)
 8002218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800221c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <HAL_RTC_MspInit+0x94>)
 8002222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002226:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <HAL_RTC_MspInit+0x94>)
 8002228:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800222c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_RTC_MspInit+0x94>)
 8002232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800223e:	4b07      	ldr	r3, [pc, #28]	@ (800225c <HAL_RTC_MspInit+0x94>)
 8002240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002244:	4a05      	ldr	r2, [pc, #20]	@ (800225c <HAL_RTC_MspInit+0x94>)
 8002246:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800224a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800224e:	bf00      	nop
 8002250:	37f0      	adds	r7, #240	@ 0xf0
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	46007800 	.word	0x46007800
 800225c:	46020c00 	.word	0x46020c00

08002260 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0b      	ldr	r2, [pc, #44]	@ (800229c <HAL_TIM_PWM_MspInit+0x3c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_TIM_PWM_MspInit+0x40>)
 8002274:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002278:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <HAL_TIM_PWM_MspInit+0x40>)
 800227a:	f043 0302 	orr.w	r3, r3, #2
 800227e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <HAL_TIM_PWM_MspInit+0x40>)
 8002284:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40000400 	.word	0x40000400
 80022a0:	46020c00 	.word	0x46020c00

080022a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0b      	ldr	r2, [pc, #44]	@ (80022e0 <HAL_TIM_Base_MspInit+0x3c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10e      	bne.n	80022d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <HAL_TIM_Base_MspInit+0x40>)
 80022b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022bc:	4a09      	ldr	r2, [pc, #36]	@ (80022e4 <HAL_TIM_Base_MspInit+0x40>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <HAL_TIM_Base_MspInit+0x40>)
 80022c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40014000 	.word	0x40014000
 80022e4:	46020c00 	.word	0x46020c00

080022e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <HAL_TIM_MspPostInit+0x68>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d11e      	bne.n	8002348 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_TIM_MspPostInit+0x6c>)
 800230c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002310:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <HAL_TIM_MspPostInit+0x6c>)
 8002312:	f043 0310 	orr.w	r3, r3, #16
 8002316:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_TIM_MspPostInit+0x6c>)
 800231c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002328:	2340      	movs	r3, #64	@ 0x40
 800232a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002338:	2302      	movs	r3, #2
 800233a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <HAL_TIM_MspPostInit+0x70>)
 8002344:	f005 f8bc 	bl	80074c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40000400 	.word	0x40000400
 8002354:	46020c00 	.word	0x46020c00
 8002358:	42021000 	.word	0x42021000

0800235c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b0c2      	sub	sp, #264	@ 0x108
 8002360:	af00      	add	r7, sp, #0
 8002362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800236a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	22e0      	movs	r2, #224	@ 0xe0
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f00f f8ea 	bl	801155e <memset>
  if(huart->Instance==USART1)
 800238a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800238e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2f      	ldr	r2, [pc, #188]	@ (8002454 <HAL_UART_MspInit+0xf8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d155      	bne.n	8002448 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800239c:	f04f 0201 	mov.w	r2, #1
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023a8:	2300      	movs	r3, #0
 80023aa:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	4618      	mov	r0, r3
 80023b2:	f008 fa7d 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80023bc:	f7ff f9e6 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023c0:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <HAL_UART_MspInit+0xfc>)
 80023c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023c6:	4a24      	ldr	r2, [pc, #144]	@ (8002458 <HAL_UART_MspInit+0xfc>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023d0:	4b21      	ldr	r3, [pc, #132]	@ (8002458 <HAL_UART_MspInit+0xfc>)
 80023d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b1e      	ldr	r3, [pc, #120]	@ (8002458 <HAL_UART_MspInit+0xfc>)
 80023e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002458 <HAL_UART_MspInit+0xfc>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <HAL_UART_MspInit+0xfc>)
 80023f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023f4:	f003 0201 	and.w	r2, r3, #1
 80023f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002406:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800240a:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800240c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002410:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002426:	2307      	movs	r3, #7
 8002428:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002430:	4619      	mov	r1, r3
 8002432:	480a      	ldr	r0, [pc, #40]	@ (800245c <HAL_UART_MspInit+0x100>)
 8002434:	f005 f844 	bl	80074c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	203d      	movs	r0, #61	@ 0x3d
 800243e:	f002 ff25 	bl	800528c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002442:	203d      	movs	r0, #61	@ 0x3d
 8002444:	f002 ff3c 	bl	80052c0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002448:	bf00      	nop
 800244a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40013800 	.word	0x40013800
 8002458:	46020c00 	.word	0x46020c00
 800245c:	42020000 	.word	0x42020000

08002460 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0be      	sub	sp, #248	@ 0xf8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002468:	f107 0318 	add.w	r3, r7, #24
 800246c:	22e0      	movs	r2, #224	@ 0xe0
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f00f f874 	bl	801155e <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a3a      	ldr	r2, [pc, #232]	@ (8002564 <HAL_PCD_MspInit+0x104>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d16d      	bne.n	800255c <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002480:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 8002482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002486:	4a38      	ldr	r2, [pc, #224]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002490:	4b35      	ldr	r3, [pc, #212]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 8002492:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0308 	mov.w	r3, #8
 80024a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80024aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b2:	f107 0318 	add.w	r3, r7, #24
 80024b6:	4618      	mov	r0, r3
 80024b8:	f008 f9fa 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80024c2:	f7ff f963 	bl	800178c <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80024c6:	200c      	movs	r0, #12
 80024c8:	f000 fc1c 	bl	8002d04 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80024cc:	4b26      	ldr	r3, [pc, #152]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 80024ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d2:	4a25      	ldr	r2, [pc, #148]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024dc:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 80024de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 80024ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 80024f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 80024fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11b      	bne.n	800254e <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 8002518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800251c:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002534:	f006 fec2 	bl	80092bc <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002538:	f006 fef0 	bl	800931c <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800253c:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002542:	4a09      	ldr	r2, [pc, #36]	@ (8002568 <HAL_PCD_MspInit+0x108>)
 8002544:	f023 0304 	bic.w	r3, r3, #4
 8002548:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800254c:	e003      	b.n	8002556 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800254e:	f006 feb5 	bl	80092bc <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002552:	f006 fee3 	bl	800931c <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002556:	2001      	movs	r0, #1
 8002558:	f000 fbc0 	bl	8002cdc <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800255c:	bf00      	nop
 800255e:	37f8      	adds	r7, #248	@ 0xf8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	42040000 	.word	0x42040000
 8002568:	46020c00 	.word	0x46020c00

0800256c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0a4      	sub	sp, #144	@ 0x90
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4abb      	ldr	r2, [pc, #748]	@ (8002868 <HAL_SAI_MspInit+0x2fc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	f040 80ca 	bne.w	8002714 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002580:	4bba      	ldr	r3, [pc, #744]	@ (800286c <HAL_SAI_MspInit+0x300>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10e      	bne.n	80025a6 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002588:	4bb9      	ldr	r3, [pc, #740]	@ (8002870 <HAL_SAI_MspInit+0x304>)
 800258a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800258e:	4ab8      	ldr	r2, [pc, #736]	@ (8002870 <HAL_SAI_MspInit+0x304>)
 8002590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002594:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002598:	4bb5      	ldr	r3, [pc, #724]	@ (8002870 <HAL_SAI_MspInit+0x304>)
 800259a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800259e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80025a6:	4bb1      	ldr	r3, [pc, #708]	@ (800286c <HAL_SAI_MspInit+0x300>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4aaf      	ldr	r2, [pc, #700]	@ (800286c <HAL_SAI_MspInit+0x300>)
 80025ae:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80025b0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80025b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025c8:	230d      	movs	r3, #13
 80025ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025d2:	4619      	mov	r1, r3
 80025d4:	48a7      	ldr	r0, [pc, #668]	@ (8002874 <HAL_SAI_MspInit+0x308>)
 80025d6:	f004 ff73 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025f2:	230d      	movs	r3, #13
 80025f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025fc:	4619      	mov	r1, r3
 80025fe:	489d      	ldr	r0, [pc, #628]	@ (8002874 <HAL_SAI_MspInit+0x308>)
 8002600:	f004 ff5e 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002608:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800261c:	230d      	movs	r3, #13
 800261e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002622:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002626:	4619      	mov	r1, r3
 8002628:	4893      	ldr	r0, [pc, #588]	@ (8002878 <HAL_SAI_MspInit+0x30c>)
 800262a:	f004 ff49 	bl	80074c0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800262e:	2321      	movs	r3, #33	@ 0x21
 8002630:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002632:	2326      	movs	r3, #38	@ 0x26
 8002634:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800263a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800263e:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002640:	2308      	movs	r3, #8
 8002642:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002648:	2302      	movs	r3, #2
 800264a:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800264c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002656:	2301      	movs	r3, #1
 8002658:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800265a:	2300      	movs	r3, #0
 800265c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800265e:	2300      	movs	r3, #0
 8002660:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002662:	2300      	movs	r3, #0
 8002664:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002666:	2300      	movs	r3, #0
 8002668:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800266a:	2300      	movs	r3, #0
 800266c:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800266e:	2300      	movs	r3, #0
 8002670:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8002672:	f107 0310 	add.w	r3, r7, #16
 8002676:	4981      	ldr	r1, [pc, #516]	@ (800287c <HAL_SAI_MspInit+0x310>)
 8002678:	4618      	mov	r0, r3
 800267a:	f004 f835 	bl	80066e8 <HAL_DMAEx_List_BuildNode>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002684:	f7ff f882 	bl	800178c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002688:	4a7c      	ldr	r2, [pc, #496]	@ (800287c <HAL_SAI_MspInit+0x310>)
 800268a:	2100      	movs	r1, #0
 800268c:	487c      	ldr	r0, [pc, #496]	@ (8002880 <HAL_SAI_MspInit+0x314>)
 800268e:	f004 f857 	bl	8006740 <HAL_DMAEx_List_InsertNode>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8002698:	f7ff f878 	bl	800178c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 800269c:	4878      	ldr	r0, [pc, #480]	@ (8002880 <HAL_SAI_MspInit+0x314>)
 800269e:	f004 f918 	bl	80068d2 <HAL_DMAEx_List_SetCircularMode>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 80026a8:	f7ff f870 	bl	800178c <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80026ac:	4b75      	ldr	r3, [pc, #468]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026ae:	4a76      	ldr	r2, [pc, #472]	@ (8002888 <HAL_SAI_MspInit+0x31c>)
 80026b0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80026b2:	4b74      	ldr	r3, [pc, #464]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026b8:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80026ba:	4b72      	ldr	r3, [pc, #456]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026bc:	2200      	movs	r2, #0
 80026be:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80026c0:	4b70      	ldr	r3, [pc, #448]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80026cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026ce:	2281      	movs	r2, #129	@ 0x81
 80026d0:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80026d2:	486c      	ldr	r0, [pc, #432]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026d4:	f003 fe48 	bl	8006368 <HAL_DMAEx_List_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 80026de:	f7ff f855 	bl	800178c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 80026e2:	4967      	ldr	r1, [pc, #412]	@ (8002880 <HAL_SAI_MspInit+0x314>)
 80026e4:	4867      	ldr	r0, [pc, #412]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026e6:	f004 f955 	bl	8006994 <HAL_DMAEx_List_LinkQ>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 80026f0:	f7ff f84c 	bl	800178c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a63      	ldr	r2, [pc, #396]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026fc:	4a61      	ldr	r2, [pc, #388]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002702:	2110      	movs	r1, #16
 8002704:	485f      	ldr	r0, [pc, #380]	@ (8002884 <HAL_SAI_MspInit+0x318>)
 8002706:	f003 fa3d 	bl	8005b84 <HAL_DMA_ConfigChannelAttributes>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8002710:	f7ff f83c 	bl	800178c <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5c      	ldr	r2, [pc, #368]	@ (800288c <HAL_SAI_MspInit+0x320>)
 800271a:	4293      	cmp	r3, r2
 800271c:	f040 80eb 	bne.w	80028f6 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002720:	4b52      	ldr	r3, [pc, #328]	@ (800286c <HAL_SAI_MspInit+0x300>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10e      	bne.n	8002746 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002728:	4b51      	ldr	r3, [pc, #324]	@ (8002870 <HAL_SAI_MspInit+0x304>)
 800272a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800272e:	4a50      	ldr	r2, [pc, #320]	@ (8002870 <HAL_SAI_MspInit+0x304>)
 8002730:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002734:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002738:	4b4d      	ldr	r3, [pc, #308]	@ (8002870 <HAL_SAI_MspInit+0x304>)
 800273a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800273e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002746:	4b49      	ldr	r3, [pc, #292]	@ (800286c <HAL_SAI_MspInit+0x300>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	4a47      	ldr	r2, [pc, #284]	@ (800286c <HAL_SAI_MspInit+0x300>)
 800274e:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002754:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002768:	230d      	movs	r3, #13
 800276a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002772:	4619      	mov	r1, r3
 8002774:	4846      	ldr	r0, [pc, #280]	@ (8002890 <HAL_SAI_MspInit+0x324>)
 8002776:	f004 fea3 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800277a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800277e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002792:	230d      	movs	r3, #13
 8002794:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002798:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800279c:	4619      	mov	r1, r3
 800279e:	483d      	ldr	r0, [pc, #244]	@ (8002894 <HAL_SAI_MspInit+0x328>)
 80027a0:	f004 fe8e 	bl	80074c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027bc:	230d      	movs	r3, #13
 80027be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80027c6:	4619      	mov	r1, r3
 80027c8:	4832      	ldr	r0, [pc, #200]	@ (8002894 <HAL_SAI_MspInit+0x328>)
 80027ca:	f004 fe79 	bl	80074c0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80027ce:	2321      	movs	r3, #33	@ 0x21
 80027d0:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80027d2:	2327      	movs	r3, #39	@ 0x27
 80027d4:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80027e2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80027e8:	2302      	movs	r3, #2
 80027ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80027ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80027fe:	2300      	movs	r3, #0
 8002800:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002802:	2300      	movs	r3, #0
 8002804:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002806:	2300      	movs	r3, #0
 8002808:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800280a:	2300      	movs	r3, #0
 800280c:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800280e:	2300      	movs	r3, #0
 8002810:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	4920      	ldr	r1, [pc, #128]	@ (8002898 <HAL_SAI_MspInit+0x32c>)
 8002818:	4618      	mov	r0, r3
 800281a:	f003 ff65 	bl	80066e8 <HAL_DMAEx_List_BuildNode>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8002824:	f7fe ffb2 	bl	800178c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002828:	4a1b      	ldr	r2, [pc, #108]	@ (8002898 <HAL_SAI_MspInit+0x32c>)
 800282a:	2100      	movs	r1, #0
 800282c:	481b      	ldr	r0, [pc, #108]	@ (800289c <HAL_SAI_MspInit+0x330>)
 800282e:	f003 ff87 	bl	8006740 <HAL_DMAEx_List_InsertNode>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8002838:	f7fe ffa8 	bl	800178c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800283c:	4817      	ldr	r0, [pc, #92]	@ (800289c <HAL_SAI_MspInit+0x330>)
 800283e:	f004 f848 	bl	80068d2 <HAL_DMAEx_List_SetCircularMode>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8002848:	f7fe ffa0 	bl	800178c <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_SAI_MspInit+0x334>)
 800284e:	4a15      	ldr	r2, [pc, #84]	@ (80028a4 <HAL_SAI_MspInit+0x338>)
 8002850:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002852:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <HAL_SAI_MspInit+0x334>)
 8002854:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002858:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800285a:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_SAI_MspInit+0x334>)
 800285c:	2200      	movs	r2, #0
 800285e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002860:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_SAI_MspInit+0x334>)
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40
 8002866:	e01f      	b.n	80028a8 <HAL_SAI_MspInit+0x33c>
 8002868:	40015804 	.word	0x40015804
 800286c:	2000c268 	.word	0x2000c268
 8002870:	46020c00 	.word	0x46020c00
 8002874:	42020400 	.word	0x42020400
 8002878:	42021800 	.word	0x42021800
 800287c:	200005e4 	.word	0x200005e4
 8002880:	20000608 	.word	0x20000608
 8002884:	20000620 	.word	0x20000620
 8002888:	400201d0 	.word	0x400201d0
 800288c:	40015824 	.word	0x40015824
 8002890:	42020000 	.word	0x42020000
 8002894:	42020800 	.word	0x42020800
 8002898:	20000698 	.word	0x20000698
 800289c:	200006bc 	.word	0x200006bc
 80028a0:	200006d4 	.word	0x200006d4
 80028a4:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80028a8:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <HAL_SAI_MspInit+0x394>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80028ae:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <HAL_SAI_MspInit+0x394>)
 80028b0:	2281      	movs	r2, #129	@ 0x81
 80028b2:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80028b4:	4812      	ldr	r0, [pc, #72]	@ (8002900 <HAL_SAI_MspInit+0x394>)
 80028b6:	f003 fd57 	bl	8006368 <HAL_DMAEx_List_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 80028c0:	f7fe ff64 	bl	800178c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80028c4:	490f      	ldr	r1, [pc, #60]	@ (8002904 <HAL_SAI_MspInit+0x398>)
 80028c6:	480e      	ldr	r0, [pc, #56]	@ (8002900 <HAL_SAI_MspInit+0x394>)
 80028c8:	f004 f864 	bl	8006994 <HAL_DMAEx_List_LinkQ>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80028d2:	f7fe ff5b 	bl	800178c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a09      	ldr	r2, [pc, #36]	@ (8002900 <HAL_SAI_MspInit+0x394>)
 80028da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80028de:	4a08      	ldr	r2, [pc, #32]	@ (8002900 <HAL_SAI_MspInit+0x394>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80028e4:	2110      	movs	r1, #16
 80028e6:	4806      	ldr	r0, [pc, #24]	@ (8002900 <HAL_SAI_MspInit+0x394>)
 80028e8:	f003 f94c 	bl	8005b84 <HAL_DMA_ConfigChannelAttributes>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 80028f2:	f7fe ff4b 	bl	800178c <Error_Handler>
    }

    }
}
 80028f6:	bf00      	nop
 80028f8:	3790      	adds	r7, #144	@ 0x90
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200006d4 	.word	0x200006d4
 8002904:	200006bc 	.word	0x200006bc

08002908 <NMI_Handler>:
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <NMI_Handler+0x4>

08002910 <HardFault_Handler>:
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <HardFault_Handler+0x4>

08002918 <MemManage_Handler>:
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <MemManage_Handler+0x4>

08002920 <BusFault_Handler>:
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <UsageFault_Handler+0x4>

08002930 <SVC_Handler>:
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <DebugMon_Handler>:
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <PendSV_Handler>:
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <SysTick_Handler>:
 800295a:	b580      	push	{r7, lr}
 800295c:	af00      	add	r7, sp, #0
 800295e:	f000 f979 	bl	8002c54 <HAL_IncTick>
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}

08002966 <EXTI1_IRQHandler>:
 8002966:	b580      	push	{r7, lr}
 8002968:	af00      	add	r7, sp, #0
 800296a:	2002      	movs	r0, #2
 800296c:	f004 ff98 	bl	80078a0 <HAL_GPIO_EXTI_IRQHandler>
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <EXTI4_IRQHandler>:
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
 8002978:	2010      	movs	r0, #16
 800297a:	f004 ff91 	bl	80078a0 <HAL_GPIO_EXTI_IRQHandler>
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}

08002982 <EXTI5_IRQHandler>:
 8002982:	b580      	push	{r7, lr}
 8002984:	af00      	add	r7, sp, #0
 8002986:	2020      	movs	r0, #32
 8002988:	f004 ff8a 	bl	80078a0 <HAL_GPIO_EXTI_IRQHandler>
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <GPDMA1_Channel0_IRQHandler>:
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <GPDMA1_Channel0_IRQHandler+0x10>)
 8002996:	f002 ff86 	bl	80058a6 <HAL_DMA_IRQHandler>
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000017c 	.word	0x2000017c

080029a4 <GPDMA1_Channel1_IRQHandler>:
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <GPDMA1_Channel1_IRQHandler+0x10>)
 80029aa:	f002 ff7c 	bl	80058a6 <HAL_DMA_IRQHandler>
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200006d4 	.word	0x200006d4

080029b8 <GPDMA1_Channel2_IRQHandler>:
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <GPDMA1_Channel2_IRQHandler+0x10>)
 80029be:	f002 ff72 	bl	80058a6 <HAL_DMA_IRQHandler>
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200001f4 	.word	0x200001f4

080029cc <GPDMA1_Channel3_IRQHandler>:
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <GPDMA1_Channel3_IRQHandler+0x10>)
 80029d2:	f002 ff68 	bl	80058a6 <HAL_DMA_IRQHandler>
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000620 	.word	0x20000620

080029e0 <ADC1_2_IRQHandler>:
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <ADC1_2_IRQHandler+0x10>)
 80029e6:	f001 f925 	bl	8003c34 <HAL_ADC_IRQHandler>
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000028 	.word	0x20000028

080029f4 <I2C2_EV_IRQHandler>:
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <I2C2_EV_IRQHandler+0x10>)
 80029fa:	f005 f828 	bl	8007a4e <HAL_I2C_EV_IRQHandler>
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000388 	.word	0x20000388

08002a08 <I2C2_ER_IRQHandler>:
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <I2C2_ER_IRQHandler+0x10>)
 8002a0e:	f005 f838 	bl	8007a82 <HAL_I2C_ER_IRQHandler>
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000388 	.word	0x20000388

08002a1c <USART1_IRQHandler>:
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <USART1_IRQHandler+0x10>)
 8002a22:	f00d f8e3 	bl	800fbec <HAL_UART_IRQHandler>
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200007e4 	.word	0x200007e4

08002a30 <LTDC_IRQHandler>:
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <LTDC_IRQHandler+0x10>)
 8002a36:	f005 ffb1 	bl	800899c <HAL_LTDC_IRQHandler>
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200003dc 	.word	0x200003dc

08002a44 <SystemInit>:
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4b18      	ldr	r3, [pc, #96]	@ (8002aac <SystemInit+0x68>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <SystemInit+0x68>)
 8002a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002a58:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <SystemInit+0x6c>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <SystemInit+0x6c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	61da      	str	r2, [r3, #28]
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <SystemInit+0x6c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	621a      	str	r2, [r3, #32]
 8002a6a:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <SystemInit+0x6c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a70:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab0 <SystemInit+0x6c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab0 <SystemInit+0x6c>)
 8002a76:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a7a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <SystemInit+0x6c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <SystemInit+0x6c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a09      	ldr	r2, [pc, #36]	@ (8002ab0 <SystemInit+0x6c>)
 8002a8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b07      	ldr	r3, [pc, #28]	@ (8002ab0 <SystemInit+0x6c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a98:	4b04      	ldr	r3, [pc, #16]	@ (8002aac <SystemInit+0x68>)
 8002a9a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00
 8002ab0:	46020c00 	.word	0x46020c00

08002ab4 <Reset_Handler>:
 8002ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aec <LoopForever+0x2>
 8002ab8:	f7ff ffc4 	bl	8002a44 <SystemInit>
 8002abc:	2100      	movs	r1, #0
 8002abe:	e003      	b.n	8002ac8 <LoopCopyDataInit>

08002ac0 <CopyDataInit>:
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <LoopForever+0x6>)
 8002ac2:	585b      	ldr	r3, [r3, r1]
 8002ac4:	5043      	str	r3, [r0, r1]
 8002ac6:	3104      	adds	r1, #4

08002ac8 <LoopCopyDataInit>:
 8002ac8:	480a      	ldr	r0, [pc, #40]	@ (8002af4 <LoopForever+0xa>)
 8002aca:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <LoopForever+0xe>)
 8002acc:	1842      	adds	r2, r0, r1
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d3f6      	bcc.n	8002ac0 <CopyDataInit>
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <LoopForever+0x12>)
 8002ad4:	e002      	b.n	8002adc <LoopFillZerobss>

08002ad6 <FillZerobss>:
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f842 3b04 	str.w	r3, [r2], #4

08002adc <LoopFillZerobss>:
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <LoopForever+0x16>)
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d3f9      	bcc.n	8002ad6 <FillZerobss>
 8002ae2:	f00e fd45 	bl	8011570 <__libc_init_array>
 8002ae6:	f7fd fd71 	bl	80005cc <main>

08002aea <LoopForever>:
 8002aea:	e7fe      	b.n	8002aea <LoopForever>
 8002aec:	202f0000 	.word	0x202f0000
 8002af0:	080116e0 	.word	0x080116e0
 8002af4:	20000000 	.word	0x20000000
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	2000000c 	.word	0x2000000c
 8002b00:	2000c270 	.word	0x2000c270

08002b04 <ADC4_IRQHandler>:
 8002b04:	e7fe      	b.n	8002b04 <ADC4_IRQHandler>
	...

08002b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_Init+0x50>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a11      	ldr	r2, [pc, #68]	@ (8002b58 <HAL_Init+0x50>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f002 fbac 	bl	8005276 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b1e:	f007 fce9 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <HAL_Init+0x54>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	490c      	ldr	r1, [pc, #48]	@ (8002b60 <HAL_Init+0x58>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	4a0b      	ldr	r2, [pc, #44]	@ (8002b64 <HAL_Init+0x5c>)
 8002b36:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b38:	2004      	movs	r0, #4
 8002b3a:	f002 fbf1 	bl	8005320 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b3e:	200f      	movs	r0, #15
 8002b40:	f000 f812 	bl	8002b68 <HAL_InitTick>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e002      	b.n	8002b54 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4e:	f7fe fe23 	bl	8001798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40022000 	.word	0x40022000
 8002b5c:	46020c00 	.word	0x46020c00
 8002b60:	080115d0 	.word	0x080115d0
 8002b64:	20000000 	.word	0x20000000

08002b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b74:	4b33      	ldr	r3, [pc, #204]	@ (8002c44 <HAL_InitTick+0xdc>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e05c      	b.n	8002c3a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b80:	4b31      	ldr	r3, [pc, #196]	@ (8002c48 <HAL_InitTick+0xe0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c4c <HAL_InitTick+0xe4>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b2c      	ldr	r3, [pc, #176]	@ (8002c44 <HAL_InitTick+0xdc>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e037      	b.n	8002c16 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002ba6:	f002 fc13 	bl	80053d0 <HAL_SYSTICK_GetCLKSourceConfig>
 8002baa:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d023      	beq.n	8002bfa <HAL_InitTick+0x92>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d82d      	bhi.n	8002c14 <HAL_InitTick+0xac>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_InitTick+0x5e>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d00d      	beq.n	8002be0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002bc4:	e026      	b.n	8002c14 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002bc6:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <HAL_InitTick+0xe4>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b1e      	ldr	r3, [pc, #120]	@ (8002c44 <HAL_InitTick+0xdc>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002bd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	60fb      	str	r3, [r7, #12]
        break;
 8002bde:	e01a      	b.n	8002c16 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002be0:	4b18      	ldr	r3, [pc, #96]	@ (8002c44 <HAL_InitTick+0xdc>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	60fb      	str	r3, [r7, #12]
        break;
 8002bf8:	e00d      	b.n	8002c16 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_InitTick+0xdc>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c08:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	60fb      	str	r3, [r7, #12]
        break;
 8002c12:	e000      	b.n	8002c16 <HAL_InitTick+0xae>
        break;
 8002c14:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f002 fb60 	bl	80052dc <HAL_SYSTICK_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e009      	b.n	8002c3a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c26:	2200      	movs	r2, #0
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2e:	f002 fb2d 	bl	800528c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c32:	4a07      	ldr	r2, [pc, #28]	@ (8002c50 <HAL_InitTick+0xe8>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000008 	.word	0x20000008
 8002c48:	e000e010 	.word	0xe000e010
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_IncTick+0x20>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_IncTick+0x24>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <HAL_IncTick+0x24>)
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000008 	.word	0x20000008
 8002c78:	2000c26c 	.word	0x2000c26c

08002c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c80:	4b03      	ldr	r3, [pc, #12]	@ (8002c90 <HAL_GetTick+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	2000c26c 	.word	0x2000c26c

08002c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff ffee 	bl	8002c7c <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d005      	beq.n	8002cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cae:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <HAL_Delay+0x44>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cba:	bf00      	nop
 8002cbc:	f7ff ffde 	bl	8002c7c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d8f7      	bhi.n	8002cbc <HAL_Delay+0x28>
  {
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000008 	.word	0x20000008

08002cdc <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce8:	f023 0201 	bic.w	r2, r3, #1
 8002cec:	4904      	ldr	r1, [pc, #16]	@ (8002d00 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	46000400 	.word	0x46000400

08002d04 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d10:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002d14:	4904      	ldr	r1, [pc, #16]	@ (8002d28 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	46000400 	.word	0x46000400

08002d2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <LL_ADC_SetResolution+0x3c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d104      	bne.n	8002db4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f023 020c 	bic.w	r2, r3, #12
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	46021000 	.word	0x46021000

08002dd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3360      	adds	r3, #96	@ 0x60
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	430b      	orrs	r3, r1
 8002e04:	431a      	orrs	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3360      	adds	r3, #96	@ 0x60
 8002e24:	461a      	mov	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3360      	adds	r3, #96	@ 0x60
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3360      	adds	r3, #96	@ 0x60
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3360      	adds	r3, #96	@ 0x60
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	601a      	str	r2, [r3, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ef6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d002      	beq.n	8002f16 <LL_ADC_SetGainCompensation+0x32>
 8002f10:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002f14:	e000      	b.n	8002f18 <LL_ADC_SetGainCompensation+0x34>
 8002f16:	2200      	movs	r2, #0
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2107      	movs	r1, #7
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	401a      	ands	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	@ 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800304c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d020      	beq.n	8002fe6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3330      	adds	r3, #48	@ 0x30
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	4413      	add	r3, r2
 8002fb6:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	211f      	movs	r1, #31
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	0e9b      	lsrs	r3, r3, #26
 8002fd0:	f003 011f 	and.w	r1, r3, #31
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002fe4:	e02b      	b.n	800303e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	210f      	movs	r1, #15
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0e9b      	lsrs	r3, r3, #26
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	e010      	b.n	8003030 <LL_ADC_REG_SetSequencerRanks+0xa0>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	613b      	str	r3, [r7, #16]
  return result;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003024:	2320      	movs	r3, #32
 8003026:	e003      	b.n	8003030 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	f001 011f 	and.w	r1, r1, #31
 8003036:	408b      	lsls	r3, r1
 8003038:	431a      	orrs	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800303e:	bf00      	nop
 8003040:	3724      	adds	r7, #36	@ 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	46021000 	.word	0x46021000

08003050 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2201      	movs	r2, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	e015      	b.n	80030a0 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	60fb      	str	r3, [r7, #12]
  return result;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e003      	b.n	8003096 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	2201      	movs	r2, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	0e9b      	lsrs	r3, r3, #26
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	2101      	movs	r1, #1
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	401a      	ands	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0303 	and.w	r3, r3, #3
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003128:	b480      	push	{r7}
 800312a:	b08b      	sub	sp, #44	@ 0x2c
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a2d      	ldr	r2, [pc, #180]	@ (80031ec <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d042      	beq.n	80031c2 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d104      	bne.n	8003150 <LL_ADC_SetChannelSamplingTime+0x28>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	0e9b      	lsrs	r3, r3, #26
 800314a:	f003 021f 	and.w	r2, r3, #31
 800314e:	e011      	b.n	8003174 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	617b      	str	r3, [r7, #20]
  return result;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003166:	2320      	movs	r3, #32
 8003168:	e003      	b.n	8003172 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	0e5b      	lsrs	r3, r3, #25
 8003178:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800317c:	460b      	mov	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	1ad2      	subs	r2, r2, r3
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3314      	adds	r3, #20
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0e5b      	lsrs	r3, r3, #25
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	4413      	add	r3, r2
 80031a0:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	2107      	movs	r1, #7
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	401a      	ands	r2, r3
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	431a      	orrs	r2, r3
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80031c0:	e00e      	b.n	80031e0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	43db      	mvns	r3, r3
 80031cc:	401a      	ands	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	0219      	lsls	r1, r3, #8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	400b      	ands	r3, r1
 80031d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031da:	431a      	orrs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	615a      	str	r2, [r3, #20]
}
 80031e0:	bf00      	nop
 80031e2:	372c      	adds	r7, #44	@ 0x2c
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	46021000 	.word	0x46021000

080031f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0318 	and.w	r3, r3, #24
 8003212:	4908      	ldr	r1, [pc, #32]	@ (8003234 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003214:	40d9      	lsrs	r1, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	400b      	ands	r3, r1
 800321a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800321e:	431a      	orrs	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	000fffff 	.word	0x000fffff

08003238 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 031f 	and.w	r3, r3, #31
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003280:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6093      	str	r3, [r2, #8]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a8:	d101      	bne.n	80032ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	609a      	str	r2, [r3, #8]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032f8:	d101      	bne.n	80032fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800331c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <LL_ADC_IsEnabled+0x18>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <LL_ADC_IsEnabled+0x1a>
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800336a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800336e:	f043 0204 	orr.w	r2, r3, #4
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	609a      	str	r2, [r3, #8]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d101      	bne.n	800339a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d101      	bne.n	80033c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b08b      	sub	sp, #44	@ 0x2c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e2ce      	b.n	800398e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a95      	ldr	r2, [pc, #596]	@ (8003654 <HAL_ADC_Init+0x284>)
 80033fe:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7fe f9df 	bl	80017cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff37 	bl	8003294 <LL_ADC_IsDeepPowerDownEnabled>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d004      	beq.n	8003436 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff1d 	bl	8003270 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ff52 	bl	80032e4 <LL_ADC_IsInternalRegulatorEnabled>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d115      	bne.n	8003472 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff36 	bl	80032bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003450:	4b81      	ldr	r3, [pc, #516]	@ (8003658 <HAL_ADC_Init+0x288>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	4a81      	ldr	r2, [pc, #516]	@ (800365c <HAL_ADC_Init+0x28c>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003464:	e002      	b.n	800346c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b01      	subs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff ff34 	bl	80032e4 <LL_ADC_IsInternalRegulatorEnabled>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10e      	bne.n	80034a0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003486:	f043 0210 	orr.w	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff6c 	bl	8003382 <LL_ADC_REG_IsConversionOngoing>
 80034aa:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 825f 	bne.w	8003978 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 825b 	bne.w	8003978 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034ca:	f043 0202 	orr.w	r2, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ff2c 	bl	8003334 <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d14f      	bne.n	8003582 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003654 <HAL_ADC_Init+0x284>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d037      	beq.n	800355c <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5b      	ldr	r2, [pc, #364]	@ (8003660 <HAL_ADC_Init+0x290>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_ADC_Init+0x130>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003664 <HAL_ADC_Init+0x294>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10e      	bne.n	800351e <HAL_ADC_Init+0x14e>
 8003500:	4857      	ldr	r0, [pc, #348]	@ (8003660 <HAL_ADC_Init+0x290>)
 8003502:	f7ff ff17 	bl	8003334 <LL_ADC_IsEnabled>
 8003506:	4604      	mov	r4, r0
 8003508:	4856      	ldr	r0, [pc, #344]	@ (8003664 <HAL_ADC_Init+0x294>)
 800350a:	f7ff ff13 	bl	8003334 <LL_ADC_IsEnabled>
 800350e:	4603      	mov	r3, r0
 8003510:	4323      	orrs	r3, r4
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	e008      	b.n	8003530 <HAL_ADC_Init+0x160>
 800351e:	484d      	ldr	r0, [pc, #308]	@ (8003654 <HAL_ADC_Init+0x284>)
 8003520:	f7ff ff08 	bl	8003334 <LL_ADC_IsEnabled>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d026      	beq.n	8003582 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a49      	ldr	r2, [pc, #292]	@ (8003660 <HAL_ADC_Init+0x290>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_ADC_Init+0x178>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a48      	ldr	r2, [pc, #288]	@ (8003664 <HAL_ADC_Init+0x294>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_ADC_Init+0x17c>
 8003548:	4a47      	ldr	r2, [pc, #284]	@ (8003668 <HAL_ADC_Init+0x298>)
 800354a:	e000      	b.n	800354e <HAL_ADC_Init+0x17e>
 800354c:	4a47      	ldr	r2, [pc, #284]	@ (800366c <HAL_ADC_Init+0x29c>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f7ff fbe9 	bl	8002d2c <LL_ADC_SetCommonClock>
 800355a:	e012      	b.n	8003582 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f7ff fc14 	bl	8002d94 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800356c:	4b3f      	ldr	r3, [pc, #252]	@ (800366c <HAL_ADC_Init+0x29c>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800357c:	493b      	ldr	r1, [pc, #236]	@ (800366c <HAL_ADC_Init+0x29c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a33      	ldr	r2, [pc, #204]	@ (8003654 <HAL_ADC_Init+0x284>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d010      	beq.n	80035ae <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003592:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003598:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800359e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80035a6:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80035a8:	4313      	orrs	r3, r2
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	e035      	b.n	800361a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7f1b      	ldrb	r3, [r3, #28]
 80035b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035ba:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035bc:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	d002      	beq.n	80035cc <HAL_ADC_Init+0x1fc>
 80035c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035ca:	e000      	b.n	80035ce <HAL_ADC_Init+0x1fe>
 80035cc:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035ce:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035d4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	da04      	bge.n	80035e8 <HAL_ADC_Init+0x218>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035e6:	e001      	b.n	80035ec <HAL_ADC_Init+0x21c>
 80035e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80035ec:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	491b      	ldr	r1, [pc, #108]	@ (8003660 <HAL_ADC_Init+0x290>)
 80035f4:	428b      	cmp	r3, r1
 80035f6:	d004      	beq.n	8003602 <HAL_ADC_Init+0x232>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4919      	ldr	r1, [pc, #100]	@ (8003664 <HAL_ADC_Init+0x294>)
 80035fe:	428b      	cmp	r3, r1
 8003600:	d103      	bne.n	800360a <HAL_ADC_Init+0x23a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003608:	e003      	b.n	8003612 <HAL_ADC_Init+0x242>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003610:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003612:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	4313      	orrs	r3, r2
 8003618:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d131      	bne.n	8003688 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <HAL_ADC_Init+0x284>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	3b01      	subs	r3, #1
 8003634:	045b      	lsls	r3, r3, #17
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	4313      	orrs	r3, r2
 800363a:	623b      	str	r3, [r7, #32]
 800363c:	e024      	b.n	8003688 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d113      	bne.n	8003670 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364e:	623b      	str	r3, [r7, #32]
 8003650:	e01a      	b.n	8003688 <HAL_ADC_Init+0x2b8>
 8003652:	bf00      	nop
 8003654:	46021000 	.word	0x46021000
 8003658:	20000000 	.word	0x20000000
 800365c:	053e2d63 	.word	0x053e2d63
 8003660:	42028000 	.word	0x42028000
 8003664:	42028100 	.word	0x42028100
 8003668:	42028300 	.word	0x42028300
 800366c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003680:	f043 0201 	orr.w	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a75      	ldr	r2, [pc, #468]	@ (8003864 <HAL_ADC_Init+0x494>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d018      	beq.n	80036c4 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a6:	4313      	orrs	r3, r2
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003868 <HAL_ADC_Init+0x498>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	6a39      	ldr	r1, [r7, #32]
 80036be:	430b      	orrs	r3, r1
 80036c0:	60d3      	str	r3, [r2, #12]
 80036c2:	e031      	b.n	8003728 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	4313      	orrs	r3, r2
 80036da:	6a3a      	ldr	r2, [r7, #32]
 80036dc:	4313      	orrs	r3, r2
 80036de:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	4b61      	ldr	r3, [pc, #388]	@ (800386c <HAL_ADC_Init+0x49c>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	6a39      	ldr	r1, [r7, #32]
 80036f0:	430b      	orrs	r3, r1
 80036f2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1a      	ldr	r2, [r3, #32]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a4d      	ldr	r2, [pc, #308]	@ (8003864 <HAL_ADC_Init+0x494>)
 800372e:	4293      	cmp	r3, r2
 8003730:	f000 80a4 	beq.w	800387c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fe22 	bl	8003382 <LL_ADC_REG_IsConversionOngoing>
 800373e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fe2f 	bl	80033a8 <LL_ADC_INJ_IsConversionOngoing>
 800374a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d166      	bne.n	8003820 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d163      	bne.n	8003820 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7f1b      	ldrb	r3, [r3, #28]
 800375c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4943      	ldr	r1, [pc, #268]	@ (8003870 <HAL_ADC_Init+0x4a0>)
 8003764:	428b      	cmp	r3, r1
 8003766:	d004      	beq.n	8003772 <HAL_ADC_Init+0x3a2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4941      	ldr	r1, [pc, #260]	@ (8003874 <HAL_ADC_Init+0x4a4>)
 800376e:	428b      	cmp	r3, r1
 8003770:	d102      	bne.n	8003778 <HAL_ADC_Init+0x3a8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	e002      	b.n	800377e <HAL_ADC_Init+0x3ae>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800377e:	4313      	orrs	r3, r2
 8003780:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800378c:	f023 0303 	bic.w	r3, r3, #3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	6a39      	ldr	r1, [r7, #32]
 8003796:	430b      	orrs	r3, r1
 8003798:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4619      	mov	r1, r3
 80037ac:	4610      	mov	r0, r2
 80037ae:	f7ff fb99 	bl	8002ee4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d11e      	bne.n	80037fa <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c0:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003878 <HAL_ADC_Init+0x4a8>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037d0:	0411      	lsls	r1, r2, #16
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037d6:	4311      	orrs	r1, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80037dc:	4311      	orrs	r1, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80037e2:	4311      	orrs	r1, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037e8:	0892      	lsrs	r2, r2, #2
 80037ea:	430a      	orrs	r2, r1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	611a      	str	r2, [r3, #16]
 80037f8:	e007      	b.n	800380a <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10c      	bne.n	8003842 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	f023 010f 	bic.w	r1, r3, #15
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003836:	1e5a      	subs	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003840:	e007      	b.n	8003852 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 020f 	bic.w	r2, r2, #15
 8003850:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003856:	f023 0303 	bic.w	r3, r3, #3
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003862:	e092      	b.n	800398a <HAL_ADC_Init+0x5ba>
 8003864:	46021000 	.word	0x46021000
 8003868:	fff0c013 	.word	0xfff0c013
 800386c:	ffde800d 	.word	0xffde800d
 8003870:	42028000 	.word	0x42028000
 8003874:	42028100 	.word	0x42028100
 8003878:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003882:	2b01      	cmp	r3, #1
 8003884:	d111      	bne.n	80038aa <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800388e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003894:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800389a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	4b39      	ldr	r3, [pc, #228]	@ (8003998 <HAL_ADC_Init+0x5c8>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	69f9      	ldr	r1, [r7, #28]
 80038ba:	430b      	orrs	r3, r1
 80038bc:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c6:	461a      	mov	r2, r3
 80038c8:	2100      	movs	r1, #0
 80038ca:	f7ff fb2e 	bl	8002f2a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d6:	461a      	mov	r2, r3
 80038d8:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80038dc:	f7ff fb25 	bl	8002f2a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d108      	bne.n	80038fa <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f062 020f 	orn	r2, r2, #15
 80038f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038f8:	e018      	b.n	800392c <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003902:	d113      	bne.n	800392c <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	f003 031c 	and.w	r3, r3, #28
 8003916:	f06f 020f 	mvn.w	r2, #15
 800391a:	fa02 f103 	lsl.w	r1, r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	4b1a      	ldr	r3, [pc, #104]	@ (800399c <HAL_ADC_Init+0x5cc>)
 8003934:	4013      	ands	r3, r2
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	429a      	cmp	r2, r3
 800393a:	d10b      	bne.n	8003954 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003952:	e01a      	b.n	800398a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003958:	f023 0312 	bic.w	r3, r3, #18
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003976:	e008      	b.n	800398a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800397c:	f043 0210 	orr.w	r2, r3, #16
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800398a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800398e:	4618      	mov	r0, r3
 8003990:	372c      	adds	r7, #44	@ 0x2c
 8003992:	46bd      	mov	sp, r7
 8003994:	bd90      	pop	{r4, r7, pc}
 8003996:	bf00      	nop
 8003998:	f7fffc02 	.word	0xf7fffc02
 800399c:	833ffff3 	.word	0x833ffff3

080039a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b0a2      	sub	sp, #136	@ 0x88
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a98      	ldr	r2, [pc, #608]	@ (8003c14 <HAL_ADC_Start_DMA+0x274>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_ADC_Start_DMA+0x20>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a97      	ldr	r2, [pc, #604]	@ (8003c18 <HAL_ADC_Start_DMA+0x278>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_Start_DMA+0x24>
 80039c0:	4b96      	ldr	r3, [pc, #600]	@ (8003c1c <HAL_ADC_Start_DMA+0x27c>)
 80039c2:	e000      	b.n	80039c6 <HAL_ADC_Start_DMA+0x26>
 80039c4:	4b96      	ldr	r3, [pc, #600]	@ (8003c20 <HAL_ADC_Start_DMA+0x280>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fc36 	bl	8003238 <LL_ADC_GetMultimode>
 80039cc:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fcd5 	bl	8003382 <LL_ADC_REG_IsConversionOngoing>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 8111 	bne.w	8003c02 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_Start_DMA+0x4e>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e10e      	b.n	8003c0c <HAL_ADC_Start_DMA+0x26c>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d006      	beq.n	8003a0a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039fe:	2b05      	cmp	r3, #5
 8003a00:	d003      	beq.n	8003a0a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a04:	2b09      	cmp	r3, #9
 8003a06:	f040 80f4 	bne.w	8003bf2 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f001 fa2c 	bl	8004e68 <ADC_Enable>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a16:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 80e4 	bne.w	8003be8 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7a      	ldr	r2, [pc, #488]	@ (8003c24 <HAL_ADC_Start_DMA+0x284>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d026      	beq.n	8003a8c <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a75      	ldr	r2, [pc, #468]	@ (8003c18 <HAL_ADC_Start_DMA+0x278>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d002      	beq.n	8003a4e <HAL_ADC_Start_DMA+0xae>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	e000      	b.n	8003a50 <HAL_ADC_Start_DMA+0xb0>
 8003a4e:	4b71      	ldr	r3, [pc, #452]	@ (8003c14 <HAL_ADC_Start_DMA+0x274>)
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d002      	beq.n	8003a5e <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a62:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a7a:	f023 0206 	bic.w	r2, r3, #6
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a82:	e006      	b.n	8003a92 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a8a:	e002      	b.n	8003a92 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	4a64      	ldr	r2, [pc, #400]	@ (8003c28 <HAL_ADC_Start_DMA+0x288>)
 8003a98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	4a63      	ldr	r2, [pc, #396]	@ (8003c2c <HAL_ADC_Start_DMA+0x28c>)
 8003aa0:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	4a62      	ldr	r2, [pc, #392]	@ (8003c30 <HAL_ADC_Start_DMA+0x290>)
 8003aa8:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	221c      	movs	r2, #28
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0210 	orr.w	r2, r2, #16
 8003ac8:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a55      	ldr	r2, [pc, #340]	@ (8003c24 <HAL_ADC_Start_DMA+0x284>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d107      	bne.n	8003ae4 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d04f      	beq.n	8003b92 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d046      	beq.n	8003b8a <HAL_ADC_Start_DMA+0x1ea>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d040      	beq.n	8003b8a <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	f107 0310 	add.w	r3, r7, #16
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f002 fdfc 	bl	8006714 <HAL_DMAEx_List_GetNodeConfig>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e072      	b.n	8003c0c <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d104      	bne.n	8003b36 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b34:	e00a      	b.n	8003b4c <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d104      	bne.n	8003b46 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b44:	e002      	b.n	8003b4c <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b58:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f002 fd1f 	bl	80065c0 <HAL_DMAEx_List_Start_IT>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b88:	e028      	b.n	8003bdc <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b90:	e024      	b.n	8003bdc <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d104      	bne.n	8003ba6 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba4:	e00c      	b.n	8003bc0 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d104      	bne.n	8003bba <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bb8:	e002      	b.n	8003bc0 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3340      	adds	r3, #64	@ 0x40
 8003bca:	4619      	mov	r1, r3
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bd2:	f001 fd63 	bl	800569c <HAL_DMA_Start_IT>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fbba 	bl	800335a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003be6:	e00f      	b.n	8003c08 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003bf0:	e00a      	b.n	8003c08 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003c00:	e002      	b.n	8003c08 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
 8003c04:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003c08:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3788      	adds	r7, #136	@ 0x88
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	42028000 	.word	0x42028000
 8003c18:	42028100 	.word	0x42028100
 8003c1c:	42028300 	.word	0x42028300
 8003c20:	46021300 	.word	0x46021300
 8003c24:	46021000 	.word	0x46021000
 8003c28:	08004f9d 	.word	0x08004f9d
 8003c2c:	0800507b 	.word	0x0800507b
 8003c30:	08005097 	.word	0x08005097

08003c34 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	@ 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a77      	ldr	r2, [pc, #476]	@ (8003e34 <HAL_ADC_IRQHandler+0x200>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_ADC_IRQHandler+0x30>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a76      	ldr	r2, [pc, #472]	@ (8003e38 <HAL_ADC_IRQHandler+0x204>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d101      	bne.n	8003c68 <HAL_ADC_IRQHandler+0x34>
 8003c64:	4b75      	ldr	r3, [pc, #468]	@ (8003e3c <HAL_ADC_IRQHandler+0x208>)
 8003c66:	e000      	b.n	8003c6a <HAL_ADC_IRQHandler+0x36>
 8003c68:	4b75      	ldr	r3, [pc, #468]	@ (8003e40 <HAL_ADC_IRQHandler+0x20c>)
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fae4 	bl	8003238 <LL_ADC_GetMultimode>
 8003c70:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d017      	beq.n	8003cac <HAL_ADC_IRQHandler+0x78>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d012      	beq.n	8003cac <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c96:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 fa31 	bl	8005106 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_ADC_IRQHandler+0x8c>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80d1 	beq.w	8003e6e <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80cb 	beq.w	8003e6e <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ce8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a53      	ldr	r2, [pc, #332]	@ (8003e44 <HAL_ADC_IRQHandler+0x210>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d06c      	beq.n	8003dd4 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff f932 	bl	8002f68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80aa 	beq.w	8003e60 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a49      	ldr	r2, [pc, #292]	@ (8003e38 <HAL_ADC_IRQHandler+0x204>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d002      	beq.n	8003d1c <HAL_ADC_IRQHandler+0xe8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	e000      	b.n	8003d1e <HAL_ADC_IRQHandler+0xea>
 8003d1c:	4b45      	ldr	r3, [pc, #276]	@ (8003e34 <HAL_ADC_IRQHandler+0x200>)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d008      	beq.n	8003d38 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b05      	cmp	r3, #5
 8003d30:	d002      	beq.n	8003d38 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b09      	cmp	r3, #9
 8003d36:	d104      	bne.n	8003d42 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	e00c      	b.n	8003d5c <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a3c      	ldr	r2, [pc, #240]	@ (8003e38 <HAL_ADC_IRQHandler+0x204>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d002      	beq.n	8003d52 <HAL_ADC_IRQHandler+0x11e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	e000      	b.n	8003d54 <HAL_ADC_IRQHandler+0x120>
 8003d52:	4b38      	ldr	r3, [pc, #224]	@ (8003e34 <HAL_ADC_IRQHandler+0x200>)
 8003d54:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d17c      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d175      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fb02 	bl	8003382 <LL_ADC_REG_IsConversionOngoing>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11a      	bne.n	8003dba <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 020c 	bic.w	r2, r2, #12
 8003d92:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d159      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	679a      	str	r2, [r3, #120]	@ 0x78
 8003db8:	e052      	b.n	8003e60 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dbe:	f043 0210 	orr.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003dd2:	e045      	b.n	8003e60 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff f8c5 	bl	8002f68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d03d      	beq.n	8003e60 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d138      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d131      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fabe 	bl	8003382 <LL_ADC_REG_IsConversionOngoing>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11d      	bne.n	8003e48 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 020c 	bic.w	r2, r2, #12
 8003e1a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f043 0201 	orr.w	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003e30:	e016      	b.n	8003e60 <HAL_ADC_IRQHandler+0x22c>
 8003e32:	bf00      	nop
 8003e34:	42028000 	.word	0x42028000
 8003e38:	42028100 	.word	0x42028100
 8003e3c:	42028300 	.word	0x42028300
 8003e40:	46021300 	.word	0x46021300
 8003e44:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e4c:	f043 0220 	orr.w	r2, r3, #32
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e58:	f043 0201 	orr.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f99d 	bl	80041a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	220c      	movs	r2, #12
 8003e6c:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a8c      	ldr	r2, [pc, #560]	@ (80040a4 <HAL_ADC_IRQHandler+0x470>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	f000 8095 	beq.w	8003fa4 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_ADC_IRQHandler+0x25a>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8085 	beq.w	8003fa4 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d07f      	beq.n	8003fa4 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eb4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff f91e 	bl	8003102 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ec6:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff f84b 	bl	8002f68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ed2:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a73      	ldr	r2, [pc, #460]	@ (80040a8 <HAL_ADC_IRQHandler+0x474>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d002      	beq.n	8003ee4 <HAL_ADC_IRQHandler+0x2b0>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	e000      	b.n	8003ee6 <HAL_ADC_IRQHandler+0x2b2>
 8003ee4:	4b71      	ldr	r3, [pc, #452]	@ (80040ac <HAL_ADC_IRQHandler+0x478>)
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d008      	beq.n	8003f00 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d002      	beq.n	8003f00 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b07      	cmp	r3, #7
 8003efe:	d104      	bne.n	8003f0a <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	e00c      	b.n	8003f24 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a66      	ldr	r2, [pc, #408]	@ (80040a8 <HAL_ADC_IRQHandler+0x474>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d002      	beq.n	8003f1a <HAL_ADC_IRQHandler+0x2e6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	e000      	b.n	8003f1c <HAL_ADC_IRQHandler+0x2e8>
 8003f1a:	4b64      	ldr	r3, [pc, #400]	@ (80040ac <HAL_ADC_IRQHandler+0x478>)
 8003f1c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d035      	beq.n	8003f96 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_ADC_IRQHandler+0x310>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d02d      	beq.n	8003f96 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d128      	bne.n	8003f96 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d121      	bne.n	8003f96 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fa26 	bl	80033a8 <LL_ADC_INJ_IsConversionOngoing>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d119      	bne.n	8003f96 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f70:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d105      	bne.n	8003f96 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f8e:	f043 0201 	orr.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f001 f897 	bl	80050ca <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2260      	movs	r2, #96	@ 0x60
 8003fa2:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <HAL_ADC_IRQHandler+0x39e>
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8ff 	bl	80041c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2280      	movs	r2, #128	@ 0x80
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d012      	beq.n	8004002 <HAL_ADC_IRQHandler+0x3ce>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f001 f873 	bl	80050de <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004008:	2b00      	cmp	r3, #0
 800400a:	d012      	beq.n	8004032 <HAL_ADC_IRQHandler+0x3fe>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00d      	beq.n	8004032 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f001 f865 	bl	80050f2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004030:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05d      	beq.n	80040f8 <HAL_ADC_IRQHandler+0x4c4>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	d058      	beq.n	80040f8 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 800404e:	2301      	movs	r3, #1
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
 8004052:	e03b      	b.n	80040cc <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a12      	ldr	r2, [pc, #72]	@ (80040a4 <HAL_ADC_IRQHandler+0x470>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d02c      	beq.n	80040b8 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d015      	beq.n	8004090 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a10      	ldr	r2, [pc, #64]	@ (80040ac <HAL_ADC_IRQHandler+0x478>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_ADC_IRQHandler+0x444>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a0d      	ldr	r2, [pc, #52]	@ (80040a8 <HAL_ADC_IRQHandler+0x474>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_ADC_IRQHandler+0x448>
 8004078:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <HAL_ADC_IRQHandler+0x47c>)
 800407a:	e000      	b.n	800407e <HAL_ADC_IRQHandler+0x44a>
 800407c:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <HAL_ADC_IRQHandler+0x480>)
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff f8e8 	bl	8003254 <LL_ADC_GetMultiDMATransfer>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d020      	beq.n	80040cc <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800408a:	2301      	movs	r3, #1
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
 800408e:	e01d      	b.n	80040cc <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800409e:	2301      	movs	r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a2:	e013      	b.n	80040cc <HAL_ADC_IRQHandler+0x498>
 80040a4:	46021000 	.word	0x46021000
 80040a8:	42028100 	.word	0x42028100
 80040ac:	42028000 	.word	0x42028000
 80040b0:	42028300 	.word	0x42028300
 80040b4:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff f812 	bl	80030e6 <LL_ADC_REG_GetDMATransfer>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 80040c8:	2301      	movs	r3, #1
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d10e      	bne.n	80040f0 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040d6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040e2:	f043 0202 	orr.w	r2, r3, #2
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f876 	bl	80041dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2210      	movs	r2, #16
 80040f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d01b      	beq.n	800413a <HAL_ADC_IRQHandler+0x506>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d016      	beq.n	800413a <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f877 	bl	8004218 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a17      	ldr	r2, [pc, #92]	@ (800419c <HAL_ADC_IRQHandler+0x568>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d126      	bne.n	8004192 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_ADC_IRQHandler+0x534>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f849 	bl	80041f0 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004166:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00f      	beq.n	8004192 <HAL_ADC_IRQHandler+0x55e>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f841 	bl	8004204 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004190:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004192:	bf00      	nop
 8004194:	3728      	adds	r7, #40	@ 0x28
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	46021000 	.word	0x46021000

080041a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b0b7      	sub	sp, #220	@ 0xdc
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4aa8      	ldr	r2, [pc, #672]	@ (80044e8 <HAL_ADC_ConfigChannel+0x2bc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d103      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x36>
 800425c:	2302      	movs	r3, #2
 800425e:	f000 bdfe 	b.w	8004e5e <HAL_ADC_ConfigChannel+0xc32>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f887 	bl	8003382 <LL_ADC_REG_IsConversionOngoing>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 85c1 	bne.w	8004dfe <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a99      	ldr	r2, [pc, #612]	@ (80044e8 <HAL_ADC_ConfigChannel+0x2bc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	f000 8409 	beq.w	8004a9a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d108      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x7a>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0e9b      	lsrs	r3, r3, #26
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2201      	movs	r2, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	e01d      	b.n	80042e2 <HAL_ADC_ConfigChannel+0xb6>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80042ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80042c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80042ca:	2320      	movs	r3, #32
 80042cc:	e004      	b.n	80042d8 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80042ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2201      	movs	r2, #1
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	69d1      	ldr	r1, [r2, #28]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	f7fe fe47 	bl	8002f90 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff f83b 	bl	8003382 <LL_ADC_REG_IsConversionOngoing>
 800430c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff f847 	bl	80033a8 <LL_ADC_INJ_IsConversionOngoing>
 800431a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800431e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 81df 	bne.w	80046e6 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800432c:	2b00      	cmp	r3, #0
 800432e:	f040 81da 	bne.w	80046e6 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	461a      	mov	r2, r3
 8004340:	f7fe fef2 	bl	8003128 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	089b      	lsrs	r3, r3, #2
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b04      	cmp	r3, #4
 8004364:	d046      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6919      	ldr	r1, [r3, #16]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004376:	f7fe fd2d 	bl	8002dd4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	461a      	mov	r2, r3
 8004388:	f7fe fd5b 	bl	8002e42 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	7e9b      	ldrb	r3, [r3, #26]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d11e      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x17e>
 80043a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043a8:	e000      	b.n	80043ac <HAL_ADC_ConfigChannel+0x180>
 80043aa:	2300      	movs	r3, #0
 80043ac:	461a      	mov	r2, r3
 80043ae:	f7fe fd7e 	bl	8002eae <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d102      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x19c>
 80043c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80043c6:	e000      	b.n	80043ca <HAL_ADC_ConfigChannel+0x19e>
 80043c8:	2300      	movs	r3, #0
 80043ca:	461a      	mov	r2, r3
 80043cc:	f7fe fd54 	bl	8002e78 <LL_ADC_SetOffsetSignedSaturation>
 80043d0:	e189      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2200      	movs	r2, #0
 80043dc:	4619      	mov	r1, r3
 80043de:	f7fe fd66 	bl	8002eae <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2200      	movs	r2, #0
 80043ec:	4619      	mov	r1, r3
 80043ee:	f7fe fd43 	bl	8002e78 <LL_ADC_SetOffsetSignedSaturation>
 80043f2:	e178      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fd0b 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 8004400:	4603      	mov	r3, r0
 8004402:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x1f4>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fd00 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 8004416:	4603      	mov	r3, r0
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	f003 021f 	and.w	r2, r3, #31
 800441e:	e01e      	b.n	800445e <HAL_ADC_ConfigChannel+0x232>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fcf5 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 800442c:	4603      	mov	r3, r0
 800442e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004436:	fa93 f3a3 	rbit	r3, r3
 800443a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800443e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004446:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 800444e:	2320      	movs	r3, #32
 8004450:	e004      	b.n	800445c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d105      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x24a>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	0e9b      	lsrs	r3, r3, #26
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	e018      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x27c>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800448a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800448e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800449a:	2320      	movs	r3, #32
 800449c:	e004      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800449e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d107      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	2100      	movs	r1, #0
 80044b8:	f7fe fc8c 	bl	8002dd4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fca7 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10c      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x2c0>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2101      	movs	r1, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe fc9c 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	0e9b      	lsrs	r3, r3, #26
 80044e2:	f003 021f 	and.w	r2, r3, #31
 80044e6:	e020      	b.n	800452a <HAL_ADC_ConfigChannel+0x2fe>
 80044e8:	46021000 	.word	0x46021000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2101      	movs	r1, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fc8f 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800450a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800450e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004512:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800451a:	2320      	movs	r3, #32
 800451c:	e004      	b.n	8004528 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800451e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x316>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0e9b      	lsrs	r3, r3, #26
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	e018      	b.n	8004574 <HAL_ADC_ConfigChannel+0x348>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004556:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800455a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800455e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004566:	2320      	movs	r3, #32
 8004568:	e004      	b.n	8004574 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800456a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	2101      	movs	r1, #1
 8004584:	f7fe fc26 	bl	8002dd4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2102      	movs	r1, #2
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fc41 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 8004594:	4603      	mov	r3, r0
 8004596:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x388>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2102      	movs	r1, #2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe fc36 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 80045aa:	4603      	mov	r3, r0
 80045ac:	0e9b      	lsrs	r3, r3, #26
 80045ae:	f003 021f 	and.w	r2, r3, #31
 80045b2:	e01a      	b.n	80045ea <HAL_ADC_ConfigChannel+0x3be>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fc2b 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 80045c0:	4603      	mov	r3, r0
 80045c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80045cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80045d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80045da:	2320      	movs	r3, #32
 80045dc:	e004      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80045de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045e2:	fab3 f383 	clz	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x3d6>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	0e9b      	lsrs	r3, r3, #26
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	e011      	b.n	8004626 <HAL_ADC_ConfigChannel+0x3fa>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004608:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004612:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800461a:	2320      	movs	r3, #32
 800461c:	e003      	b.n	8004626 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800461e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004620:	fab3 f383 	clz	r3, r3
 8004624:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004626:	429a      	cmp	r2, r3
 8004628:	d107      	bne.n	800463a <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	2300      	movs	r3, #0
 8004634:	2102      	movs	r1, #2
 8004636:	f7fe fbcd 	bl	8002dd4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2103      	movs	r1, #3
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fbe8 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 8004646:	4603      	mov	r3, r0
 8004648:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x43a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2103      	movs	r1, #3
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe fbdd 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 800465c:	4603      	mov	r3, r0
 800465e:	0e9b      	lsrs	r3, r3, #26
 8004660:	f003 021f 	and.w	r2, r3, #31
 8004664:	e017      	b.n	8004696 <HAL_ADC_ConfigChannel+0x46a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2103      	movs	r1, #3
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe fbd2 	bl	8002e16 <LL_ADC_GetOffsetChannel>
 8004672:	4603      	mov	r3, r0
 8004674:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800467e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004680:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004688:	2320      	movs	r3, #32
 800468a:	e003      	b.n	8004694 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 800468c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800468e:	fab3 f383 	clz	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d105      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x482>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	0e9b      	lsrs	r3, r3, #26
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	e011      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x4a6>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80046bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80046c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80046c6:	2320      	movs	r3, #32
 80046c8:	e003      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80046ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d107      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	2300      	movs	r3, #0
 80046e0:	2103      	movs	r1, #3
 80046e2:	f7fe fb77 	bl	8002dd4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fe22 	bl	8003334 <LL_ADC_IsEnabled>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f040 83ad 	bne.w	8004e52 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	461a      	mov	r2, r3
 8004706:	f7fe fd73 	bl	80031f0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004712:	f040 80d6 	bne.w	80048c2 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <HAL_ADC_ConfigChannel+0x50e>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	0e9b      	lsrs	r3, r3, #26
 8004728:	3301      	adds	r3, #1
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	2b09      	cmp	r3, #9
 8004730:	bf94      	ite	ls
 8004732:	2301      	movls	r3, #1
 8004734:	2300      	movhi	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	e019      	b.n	800476e <HAL_ADC_ConfigChannel+0x542>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800474a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800474c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004752:	2320      	movs	r3, #32
 8004754:	e003      	b.n	800475e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004758:	fab3 f383 	clz	r3, r3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	3301      	adds	r3, #1
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	2b09      	cmp	r3, #9
 8004766:	bf94      	ite	ls
 8004768:	2301      	movls	r3, #1
 800476a:	2300      	movhi	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d04d      	beq.n	800480e <HAL_ADC_ConfigChannel+0x5e2>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d107      	bne.n	800478e <HAL_ADC_ConfigChannel+0x562>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	0e9b      	lsrs	r3, r3, #26
 8004784:	3301      	adds	r3, #1
 8004786:	069b      	lsls	r3, r3, #26
 8004788:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800478c:	e015      	b.n	80047ba <HAL_ADC_ConfigChannel+0x58e>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800479c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80047a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80047a6:	2320      	movs	r3, #32
 80047a8:	e003      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80047aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	3301      	adds	r3, #1
 80047b4:	069b      	lsls	r3, r3, #26
 80047b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_ADC_ConfigChannel+0x5ae>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	0e9b      	lsrs	r3, r3, #26
 80047cc:	3301      	adds	r3, #1
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2101      	movs	r1, #1
 80047d4:	fa01 f303 	lsl.w	r3, r1, r3
 80047d8:	e017      	b.n	800480a <HAL_ADC_ConfigChannel+0x5de>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80047ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80047f2:	2320      	movs	r3, #32
 80047f4:	e003      	b.n	80047fe <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80047f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2101      	movs	r1, #1
 8004806:	fa01 f303 	lsl.w	r3, r1, r3
 800480a:	4313      	orrs	r3, r2
 800480c:	e04e      	b.n	80048ac <HAL_ADC_ConfigChannel+0x680>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d107      	bne.n	800482a <HAL_ADC_ConfigChannel+0x5fe>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	0e9b      	lsrs	r3, r3, #26
 8004820:	3301      	adds	r3, #1
 8004822:	069b      	lsls	r3, r3, #26
 8004824:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004828:	e015      	b.n	8004856 <HAL_ADC_ConfigChannel+0x62a>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004832:	fa93 f3a3 	rbit	r3, r3
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004842:	2320      	movs	r3, #32
 8004844:	e003      	b.n	800484e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004848:	fab3 f383 	clz	r3, r3
 800484c:	b2db      	uxtb	r3, r3
 800484e:	3301      	adds	r3, #1
 8004850:	069b      	lsls	r3, r3, #26
 8004852:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x64a>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	0e9b      	lsrs	r3, r3, #26
 8004868:	3301      	adds	r3, #1
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	2101      	movs	r1, #1
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	e017      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x67a>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	61bb      	str	r3, [r7, #24]
  return result;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 800488e:	2320      	movs	r3, #32
 8004890:	e003      	b.n	800489a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	fab3 f383 	clz	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	3301      	adds	r3, #1
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2101      	movs	r1, #1
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	461a      	mov	r2, r3
 80048ba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80048be:	f7fe fc33 	bl	8003128 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f280 82c3 	bge.w	8004e52 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a92      	ldr	r2, [pc, #584]	@ (8004b1c <HAL_ADC_ConfigChannel+0x8f0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_ADC_ConfigChannel+0x6b4>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a91      	ldr	r2, [pc, #580]	@ (8004b20 <HAL_ADC_ConfigChannel+0x8f4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d101      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x6b8>
 80048e0:	4b90      	ldr	r3, [pc, #576]	@ (8004b24 <HAL_ADC_ConfigChannel+0x8f8>)
 80048e2:	e000      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x6ba>
 80048e4:	4b90      	ldr	r3, [pc, #576]	@ (8004b28 <HAL_ADC_ConfigChannel+0x8fc>)
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe fa46 	bl	8002d78 <LL_ADC_GetCommonPathInternalCh>
 80048ec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a89      	ldr	r2, [pc, #548]	@ (8004b1c <HAL_ADC_ConfigChannel+0x8f0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_ADC_ConfigChannel+0x6d8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a88      	ldr	r2, [pc, #544]	@ (8004b20 <HAL_ADC_ConfigChannel+0x8f4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10e      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x6f6>
 8004904:	4885      	ldr	r0, [pc, #532]	@ (8004b1c <HAL_ADC_ConfigChannel+0x8f0>)
 8004906:	f7fe fd15 	bl	8003334 <LL_ADC_IsEnabled>
 800490a:	4604      	mov	r4, r0
 800490c:	4884      	ldr	r0, [pc, #528]	@ (8004b20 <HAL_ADC_ConfigChannel+0x8f4>)
 800490e:	f7fe fd11 	bl	8003334 <LL_ADC_IsEnabled>
 8004912:	4603      	mov	r3, r0
 8004914:	4323      	orrs	r3, r4
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e008      	b.n	8004934 <HAL_ADC_ConfigChannel+0x708>
 8004922:	4882      	ldr	r0, [pc, #520]	@ (8004b2c <HAL_ADC_ConfigChannel+0x900>)
 8004924:	f7fe fd06 	bl	8003334 <LL_ADC_IsEnabled>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80a6 	beq.w	8004a86 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b30 <HAL_ADC_ConfigChannel+0x904>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d13c      	bne.n	80049be <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004944:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004948:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d136      	bne.n	80049be <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a71      	ldr	r2, [pc, #452]	@ (8004b1c <HAL_ADC_ConfigChannel+0x8f0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00a      	beq.n	8004970 <HAL_ADC_ConfigChannel+0x744>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a70      	ldr	r2, [pc, #448]	@ (8004b20 <HAL_ADC_ConfigChannel+0x8f4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d005      	beq.n	8004970 <HAL_ADC_ConfigChannel+0x744>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a70      	ldr	r2, [pc, #448]	@ (8004b2c <HAL_ADC_ConfigChannel+0x900>)
 800496a:	4293      	cmp	r3, r2
 800496c:	f040 826e 	bne.w	8004e4c <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a69      	ldr	r2, [pc, #420]	@ (8004b1c <HAL_ADC_ConfigChannel+0x8f0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_ADC_ConfigChannel+0x758>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a68      	ldr	r2, [pc, #416]	@ (8004b20 <HAL_ADC_ConfigChannel+0x8f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x75c>
 8004984:	4a67      	ldr	r2, [pc, #412]	@ (8004b24 <HAL_ADC_ConfigChannel+0x8f8>)
 8004986:	e000      	b.n	800498a <HAL_ADC_ConfigChannel+0x75e>
 8004988:	4a67      	ldr	r2, [pc, #412]	@ (8004b28 <HAL_ADC_ConfigChannel+0x8fc>)
 800498a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800498e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fe f9dc 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800499a:	4b66      	ldr	r3, [pc, #408]	@ (8004b34 <HAL_ADC_ConfigChannel+0x908>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	4a65      	ldr	r2, [pc, #404]	@ (8004b38 <HAL_ADC_ConfigChannel+0x90c>)
 80049a2:	fba2 2303 	umull	r2, r3, r2, r3
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	3301      	adds	r3, #1
 80049aa:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80049ac:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80049ae:	e002      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f9      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049bc:	e246      	b.n	8004e4c <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b3c <HAL_ADC_ConfigChannel+0x910>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d12b      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d125      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a50      	ldr	r2, [pc, #320]	@ (8004b1c <HAL_ADC_ConfigChannel+0x8f0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00a      	beq.n	80049f4 <HAL_ADC_ConfigChannel+0x7c8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a4f      	ldr	r2, [pc, #316]	@ (8004b20 <HAL_ADC_ConfigChannel+0x8f4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d005      	beq.n	80049f4 <HAL_ADC_ConfigChannel+0x7c8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a4f      	ldr	r2, [pc, #316]	@ (8004b2c <HAL_ADC_ConfigChannel+0x900>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f040 822e 	bne.w	8004e50 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a48      	ldr	r2, [pc, #288]	@ (8004b1c <HAL_ADC_ConfigChannel+0x8f0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_ADC_ConfigChannel+0x7dc>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a47      	ldr	r2, [pc, #284]	@ (8004b20 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d101      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x7e0>
 8004a08:	4a46      	ldr	r2, [pc, #280]	@ (8004b24 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a0a:	e000      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x7e2>
 8004a0c:	4a46      	ldr	r2, [pc, #280]	@ (8004b28 <HAL_ADC_ConfigChannel+0x8fc>)
 8004a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f7fe f99a 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a1e:	e217      	b.n	8004e50 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a46      	ldr	r2, [pc, #280]	@ (8004b40 <HAL_ADC_ConfigChannel+0x914>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	f040 8213 	bne.w	8004e52 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 820c 	bne.w	8004e52 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a37      	ldr	r2, [pc, #220]	@ (8004b1c <HAL_ADC_ConfigChannel+0x8f0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00a      	beq.n	8004a5a <HAL_ADC_ConfigChannel+0x82e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a35      	ldr	r2, [pc, #212]	@ (8004b20 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d005      	beq.n	8004a5a <HAL_ADC_ConfigChannel+0x82e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a36      	ldr	r2, [pc, #216]	@ (8004b2c <HAL_ADC_ConfigChannel+0x900>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	f040 81fc 	bne.w	8004e52 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b1c <HAL_ADC_ConfigChannel+0x8f0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <HAL_ADC_ConfigChannel+0x842>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2d      	ldr	r2, [pc, #180]	@ (8004b20 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d101      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x846>
 8004a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b24 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a70:	e000      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x848>
 8004a72:	4a2d      	ldr	r2, [pc, #180]	@ (8004b28 <HAL_ADC_ConfigChannel+0x8fc>)
 8004a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f7fe f967 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
 8004a84:	e1e5      	b.n	8004e52 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a98:	e1db      	b.n	8004e52 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	f000 811b 	beq.w	8004ce2 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ab4:	d004      	beq.n	8004ac0 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004aba:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <HAL_ADC_ConfigChannel+0x918>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d107      	bne.n	8004ad0 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fac1 	bl	8003050 <LL_ADC_REG_SetSequencerChAdd>
 8004ace:	e059      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	210f      	movs	r1, #15
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004aec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x8d4>
 8004af4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004af8:	0e9b      	lsrs	r3, r3, #26
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	e027      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x924>
 8004b00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b04:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	fa93 f3a3 	rbit	r3, r3
 8004b0c:	60fb      	str	r3, [r7, #12]
  return result;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d117      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004b18:	2320      	movs	r3, #32
 8004b1a:	e019      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x924>
 8004b1c:	42028000 	.word	0x42028000
 8004b20:	42028100 	.word	0x42028100
 8004b24:	42028300 	.word	0x42028300
 8004b28:	46021300 	.word	0x46021300
 8004b2c:	46021000 	.word	0x46021000
 8004b30:	ce080000 	.word	0xce080000
 8004b34:	20000000 	.word	0x20000000
 8004b38:	053e2d63 	.word	0x053e2d63
 8004b3c:	ca040000 	.word	0xca040000
 8004b40:	80000001 	.word	0x80000001
 8004b44:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	6849      	ldr	r1, [r1, #4]
 8004b54:	f001 011f 	and.w	r1, r1, #31
 8004b58:	408b      	lsls	r3, r1
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d808      	bhi.n	8004b84 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b7e:	4619      	mov	r1, r3
 8004b80:	f7fe fa06 	bl	8002f90 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004b92:	f7fe fac9 	bl	8003128 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f280 8159 	bge.w	8004e52 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a9b      	ldr	r2, [pc, #620]	@ (8004e14 <HAL_ADC_ConfigChannel+0xbe8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_ADC_ConfigChannel+0x988>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a9a      	ldr	r2, [pc, #616]	@ (8004e18 <HAL_ADC_ConfigChannel+0xbec>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d101      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x98c>
 8004bb4:	4b99      	ldr	r3, [pc, #612]	@ (8004e1c <HAL_ADC_ConfigChannel+0xbf0>)
 8004bb6:	e000      	b.n	8004bba <HAL_ADC_ConfigChannel+0x98e>
 8004bb8:	4b99      	ldr	r3, [pc, #612]	@ (8004e20 <HAL_ADC_ConfigChannel+0xbf4>)
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe f8dc 	bl	8002d78 <LL_ADC_GetCommonPathInternalCh>
 8004bc0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a96      	ldr	r2, [pc, #600]	@ (8004e24 <HAL_ADC_ConfigChannel+0xbf8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d12b      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d125      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a8d      	ldr	r2, [pc, #564]	@ (8004e14 <HAL_ADC_ConfigChannel+0xbe8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <HAL_ADC_ConfigChannel+0x9c2>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a8b      	ldr	r2, [pc, #556]	@ (8004e18 <HAL_ADC_ConfigChannel+0xbec>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0x9c6>
 8004bee:	4a8b      	ldr	r2, [pc, #556]	@ (8004e1c <HAL_ADC_ConfigChannel+0xbf0>)
 8004bf0:	e000      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x9c8>
 8004bf2:	4a8b      	ldr	r2, [pc, #556]	@ (8004e20 <HAL_ADC_ConfigChannel+0xbf4>)
 8004bf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f7fe f8a7 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004c04:	4b88      	ldr	r3, [pc, #544]	@ (8004e28 <HAL_ADC_ConfigChannel+0xbfc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	099b      	lsrs	r3, r3, #6
 8004c0a:	4a88      	ldr	r2, [pc, #544]	@ (8004e2c <HAL_ADC_ConfigChannel+0xc00>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	099b      	lsrs	r3, r3, #6
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c16:	e002      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f9      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004c24:	e045      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a81      	ldr	r2, [pc, #516]	@ (8004e30 <HAL_ADC_ConfigChannel+0xc04>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d11b      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d115      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a74      	ldr	r2, [pc, #464]	@ (8004e14 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_ADC_ConfigChannel+0xa24>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a73      	ldr	r2, [pc, #460]	@ (8004e18 <HAL_ADC_ConfigChannel+0xbec>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0xa28>
 8004c50:	4a72      	ldr	r2, [pc, #456]	@ (8004e1c <HAL_ADC_ConfigChannel+0xbf0>)
 8004c52:	e000      	b.n	8004c56 <HAL_ADC_ConfigChannel+0xa2a>
 8004c54:	4a72      	ldr	r2, [pc, #456]	@ (8004e20 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fe f876 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
 8004c66:	e024      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a71      	ldr	r2, [pc, #452]	@ (8004e34 <HAL_ADC_ConfigChannel+0xc08>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d11f      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d115      	bne.n	8004caa <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a64      	ldr	r2, [pc, #400]	@ (8004e14 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_ADC_ConfigChannel+0xa66>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a62      	ldr	r2, [pc, #392]	@ (8004e18 <HAL_ADC_ConfigChannel+0xbec>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d101      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0xa6a>
 8004c92:	4a62      	ldr	r2, [pc, #392]	@ (8004e1c <HAL_ADC_ConfigChannel+0xbf0>)
 8004c94:	e000      	b.n	8004c98 <HAL_ADC_ConfigChannel+0xa6c>
 8004c96:	4a62      	ldr	r2, [pc, #392]	@ (8004e20 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7fe f855 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
 8004ca8:	e003      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a62      	ldr	r2, [pc, #392]	@ (8004e38 <HAL_ADC_ConfigChannel+0xc0c>)
 8004cb0:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a61      	ldr	r2, [pc, #388]	@ (8004e3c <HAL_ADC_ConfigChannel+0xc10>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	f040 80ca 	bne.w	8004e52 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 80c3 	bne.w	8004e52 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004ce0:	e0b7      	b.n	8004e52 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cea:	d004      	beq.n	8004cf6 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004cf0:	4a53      	ldr	r2, [pc, #332]	@ (8004e40 <HAL_ADC_ConfigChannel+0xc14>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d106      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe f9d9 	bl	80030b6 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f280 80a2 	bge.w	8004e52 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a40      	ldr	r2, [pc, #256]	@ (8004e14 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d004      	beq.n	8004d22 <HAL_ADC_ConfigChannel+0xaf6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e18 <HAL_ADC_ConfigChannel+0xbec>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0xafa>
 8004d22:	4b3e      	ldr	r3, [pc, #248]	@ (8004e1c <HAL_ADC_ConfigChannel+0xbf0>)
 8004d24:	e000      	b.n	8004d28 <HAL_ADC_ConfigChannel+0xafc>
 8004d26:	4b3e      	ldr	r3, [pc, #248]	@ (8004e20 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe f825 	bl	8002d78 <LL_ADC_GetCommonPathInternalCh>
 8004d2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a43      	ldr	r2, [pc, #268]	@ (8004e44 <HAL_ADC_ConfigChannel+0xc18>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d115      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a34      	ldr	r2, [pc, #208]	@ (8004e14 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_ADC_ConfigChannel+0xb24>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a33      	ldr	r2, [pc, #204]	@ (8004e18 <HAL_ADC_ConfigChannel+0xbec>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0xb28>
 8004d50:	4a32      	ldr	r2, [pc, #200]	@ (8004e1c <HAL_ADC_ConfigChannel+0xbf0>)
 8004d52:	e000      	b.n	8004d56 <HAL_ADC_ConfigChannel+0xb2a>
 8004d54:	4a32      	ldr	r2, [pc, #200]	@ (8004e20 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7fd fff6 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
 8004d66:	e034      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a36      	ldr	r2, [pc, #216]	@ (8004e48 <HAL_ADC_ConfigChannel+0xc1c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d115      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a27      	ldr	r2, [pc, #156]	@ (8004e14 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_ADC_ConfigChannel+0xb5a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a25      	ldr	r2, [pc, #148]	@ (8004e18 <HAL_ADC_ConfigChannel+0xbec>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0xb5e>
 8004d86:	4a25      	ldr	r2, [pc, #148]	@ (8004e1c <HAL_ADC_ConfigChannel+0xbf0>)
 8004d88:	e000      	b.n	8004d8c <HAL_ADC_ConfigChannel+0xb60>
 8004d8a:	4a25      	ldr	r2, [pc, #148]	@ (8004e20 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7fd ffdb 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
 8004d9c:	e019      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a24      	ldr	r2, [pc, #144]	@ (8004e34 <HAL_ADC_ConfigChannel+0xc08>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d114      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <HAL_ADC_ConfigChannel+0xbe8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_ADC_ConfigChannel+0xb90>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <HAL_ADC_ConfigChannel+0xbec>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0xb94>
 8004dbc:	4a17      	ldr	r2, [pc, #92]	@ (8004e1c <HAL_ADC_ConfigChannel+0xbf0>)
 8004dbe:	e000      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0xb96>
 8004dc0:	4a17      	ldr	r2, [pc, #92]	@ (8004e20 <HAL_ADC_ConfigChannel+0xbf4>)
 8004dc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dc6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f7fd ffc0 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a19      	ldr	r2, [pc, #100]	@ (8004e3c <HAL_ADC_ConfigChannel+0xc10>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d13a      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d134      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004dfc:	e029      	b.n	8004e52 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004e10:	e01f      	b.n	8004e52 <HAL_ADC_ConfigChannel+0xc26>
 8004e12:	bf00      	nop
 8004e14:	42028000 	.word	0x42028000
 8004e18:	42028100 	.word	0x42028100
 8004e1c:	42028300 	.word	0x42028300
 8004e20:	46021300 	.word	0x46021300
 8004e24:	b6002000 	.word	0xb6002000
 8004e28:	20000000 	.word	0x20000000
 8004e2c:	053e2d63 	.word	0x053e2d63
 8004e30:	ba004000 	.word	0xba004000
 8004e34:	80000001 	.word	0x80000001
 8004e38:	b2001000 	.word	0xb2001000
 8004e3c:	d7200000 	.word	0xd7200000
 8004e40:	80000010 	.word	0x80000010
 8004e44:	ce080000 	.word	0xce080000
 8004e48:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e50:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004e5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	37dc      	adds	r7, #220	@ 0xdc
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd90      	pop	{r4, r7, pc}
 8004e66:	bf00      	nop

08004e68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fe fa5d 	bl	8003334 <LL_ADC_IsEnabled>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d17b      	bne.n	8004f78 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	4b3f      	ldr	r3, [pc, #252]	@ (8004f84 <ADC_Enable+0x11c>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00d      	beq.n	8004eaa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e92:	f043 0210 	orr.w	r2, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e9e:	f043 0201 	orr.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e067      	b.n	8004f7a <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fa28 	bl	800330c <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <ADC_Enable+0x66>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8004f88 <ADC_Enable+0x120>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d054      	beq.n	8004f78 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004ece:	f7fd fed5 	bl	8002c7c <HAL_GetTick>
 8004ed2:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8004f8c <ADC_Enable+0x124>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <ADC_Enable+0x80>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f90 <ADC_Enable+0x128>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d101      	bne.n	8004eec <ADC_Enable+0x84>
 8004ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f94 <ADC_Enable+0x12c>)
 8004eea:	e000      	b.n	8004eee <ADC_Enable+0x86>
 8004eec:	4b2a      	ldr	r3, [pc, #168]	@ (8004f98 <ADC_Enable+0x130>)
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe f9a2 	bl	8003238 <LL_ADC_GetMultimode>
 8004ef4:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a25      	ldr	r2, [pc, #148]	@ (8004f90 <ADC_Enable+0x128>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d002      	beq.n	8004f06 <ADC_Enable+0x9e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	e000      	b.n	8004f08 <ADC_Enable+0xa0>
 8004f06:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <ADC_Enable+0x124>)
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d02c      	beq.n	8004f6a <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d130      	bne.n	8004f78 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f16:	e028      	b.n	8004f6a <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fe fa09 	bl	8003334 <LL_ADC_IsEnabled>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe f9ed 	bl	800330c <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f32:	f7fd fea3 	bl	8002c7c <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d914      	bls.n	8004f6a <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d00d      	beq.n	8004f6a <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f52:	f043 0210 	orr.w	r2, r3, #16
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f5e:	f043 0201 	orr.w	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e007      	b.n	8004f7a <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d1cf      	bne.n	8004f18 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	8000003f 	.word	0x8000003f
 8004f88:	46021000 	.word	0x46021000
 8004f8c:	42028000 	.word	0x42028000
 8004f90:	42028100 	.word	0x42028100
 8004f94:	42028300 	.word	0x42028300
 8004f98:	46021300 	.word	0x46021300

08004f9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d14b      	bne.n	800504e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d021      	beq.n	8005014 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fd ffc7 	bl	8002f68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d032      	beq.n	8005046 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d12b      	bne.n	8005046 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ff2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11f      	bne.n	8005046 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	679a      	str	r2, [r3, #120]	@ 0x78
 8005012:	e018      	b.n	8005046 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d111      	bne.n	8005046 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005026:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800503e:	f043 0201 	orr.w	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff f8aa 	bl	80041a0 <HAL_ADC_ConvCpltCallback>
      /* Call ADC DMA error callback */
        HAL_ADC_ConvCpltCallback(hadc);
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800504c:	e011      	b.n	8005072 <ADC_DMAConvCplt+0xd6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff f8be 	bl	80041dc <HAL_ADC_ErrorCallback>
}
 8005060:	e007      	b.n	8005072 <ADC_DMAConvCplt+0xd6>
        HAL_ADC_ConvCpltCallback(hadc);
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff f89c 	bl	80041a0 <HAL_ADC_ConvCpltCallback>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005086:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff f893 	bl	80041b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800508e:	bf00      	nop
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050b4:	f043 0204 	orr.w	r2, r3, #4
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff f88d 	bl	80041dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800512c:	4b0c      	ldr	r3, [pc, #48]	@ (8005160 <__NVIC_SetPriorityGrouping+0x44>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005138:	4013      	ands	r3, r2
 800513a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800514c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800514e:	4a04      	ldr	r2, [pc, #16]	@ (8005160 <__NVIC_SetPriorityGrouping+0x44>)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	60d3      	str	r3, [r2, #12]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	e000ed00 	.word	0xe000ed00

08005164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005168:	4b04      	ldr	r3, [pc, #16]	@ (800517c <__NVIC_GetPriorityGrouping+0x18>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	f003 0307 	and.w	r3, r3, #7
}
 8005172:	4618      	mov	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000ed00 	.word	0xe000ed00

08005180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800518a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800518e:	2b00      	cmp	r3, #0
 8005190:	db0b      	blt.n	80051aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	f003 021f 	and.w	r2, r3, #31
 8005198:	4907      	ldr	r1, [pc, #28]	@ (80051b8 <__NVIC_EnableIRQ+0x38>)
 800519a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	2001      	movs	r0, #1
 80051a2:	fa00 f202 	lsl.w	r2, r0, r2
 80051a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	e000e100 	.word	0xe000e100

080051bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	6039      	str	r1, [r7, #0]
 80051c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	db0a      	blt.n	80051e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	490c      	ldr	r1, [pc, #48]	@ (8005208 <__NVIC_SetPriority+0x4c>)
 80051d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051da:	0112      	lsls	r2, r2, #4
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	440b      	add	r3, r1
 80051e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051e4:	e00a      	b.n	80051fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	4908      	ldr	r1, [pc, #32]	@ (800520c <__NVIC_SetPriority+0x50>)
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	3b04      	subs	r3, #4
 80051f4:	0112      	lsls	r2, r2, #4
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	440b      	add	r3, r1
 80051fa:	761a      	strb	r2, [r3, #24]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	e000e100 	.word	0xe000e100
 800520c:	e000ed00 	.word	0xe000ed00

08005210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005210:	b480      	push	{r7}
 8005212:	b089      	sub	sp, #36	@ 0x24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f1c3 0307 	rsb	r3, r3, #7
 800522a:	2b04      	cmp	r3, #4
 800522c:	bf28      	it	cs
 800522e:	2304      	movcs	r3, #4
 8005230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3304      	adds	r3, #4
 8005236:	2b06      	cmp	r3, #6
 8005238:	d902      	bls.n	8005240 <NVIC_EncodePriority+0x30>
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3b03      	subs	r3, #3
 800523e:	e000      	b.n	8005242 <NVIC_EncodePriority+0x32>
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43da      	mvns	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	401a      	ands	r2, r3
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005258:	f04f 31ff 	mov.w	r1, #4294967295
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	43d9      	mvns	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005268:	4313      	orrs	r3, r2
         );
}
 800526a:	4618      	mov	r0, r3
 800526c:	3724      	adds	r7, #36	@ 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff ff4c 	bl	800511c <__NVIC_SetPriorityGrouping>
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800529a:	f7ff ff63 	bl	8005164 <__NVIC_GetPriorityGrouping>
 800529e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	6978      	ldr	r0, [r7, #20]
 80052a6:	f7ff ffb3 	bl	8005210 <NVIC_EncodePriority>
 80052aa:	4602      	mov	r2, r0
 80052ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff ff82 	bl	80051bc <__NVIC_SetPriority>
}
 80052b8:	bf00      	nop
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff ff56 	bl	8005180 <__NVIC_EnableIRQ>
}
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052ec:	d301      	bcc.n	80052f2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80052ee:	2301      	movs	r3, #1
 80052f0:	e00d      	b.n	800530e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80052f2:	4a0a      	ldr	r2, [pc, #40]	@ (800531c <HAL_SYSTICK_Config+0x40>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80052fa:	4b08      	ldr	r3, [pc, #32]	@ (800531c <HAL_SYSTICK_Config+0x40>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005300:	4b06      	ldr	r3, [pc, #24]	@ (800531c <HAL_SYSTICK_Config+0x40>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a05      	ldr	r2, [pc, #20]	@ (800531c <HAL_SYSTICK_Config+0x40>)
 8005306:	f043 0303 	orr.w	r3, r3, #3
 800530a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	e000e010 	.word	0xe000e010

08005320 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b04      	cmp	r3, #4
 800532c:	d844      	bhi.n	80053b8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800532e:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005357 	.word	0x08005357
 8005338:	08005375 	.word	0x08005375
 800533c:	08005397 	.word	0x08005397
 8005340:	080053b9 	.word	0x080053b9
 8005344:	08005349 	.word	0x08005349
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005348:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1e      	ldr	r2, [pc, #120]	@ (80053c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800534e:	f043 0304 	orr.w	r3, r3, #4
 8005352:	6013      	str	r3, [r2, #0]
      break;
 8005354:	e031      	b.n	80053ba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005356:	4b1c      	ldr	r3, [pc, #112]	@ (80053c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1b      	ldr	r2, [pc, #108]	@ (80053c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800535c:	f023 0304 	bic.w	r3, r3, #4
 8005360:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005362:	4b1a      	ldr	r3, [pc, #104]	@ (80053cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005368:	4a18      	ldr	r2, [pc, #96]	@ (80053cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800536a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800536e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005372:	e022      	b.n	80053ba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005374:	4b14      	ldr	r3, [pc, #80]	@ (80053c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a13      	ldr	r2, [pc, #76]	@ (80053c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800537a:	f023 0304 	bic.w	r3, r3, #4
 800537e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005380:	4b12      	ldr	r3, [pc, #72]	@ (80053cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005386:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800538a:	4a10      	ldr	r2, [pc, #64]	@ (80053cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800538c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005394:	e011      	b.n	80053ba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005396:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a0b      	ldr	r2, [pc, #44]	@ (80053c8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800539c:	f023 0304 	bic.w	r3, r3, #4
 80053a0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053ac:	4a07      	ldr	r2, [pc, #28]	@ (80053cc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80053b6:	e000      	b.n	80053ba <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80053b8:	bf00      	nop
  }
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	e000e010 	.word	0xe000e010
 80053cc:	46020c00 	.word	0x46020c00

080053d0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80053d6:	4b19      	ldr	r3, [pc, #100]	@ (800543c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80053e2:	2304      	movs	r3, #4
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	e021      	b.n	800542c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80053e8:	4b15      	ldr	r3, [pc, #84]	@ (8005440 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80053ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ee:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80053f2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053fa:	d011      	beq.n	8005420 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005402:	d810      	bhi.n	8005426 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005410:	d003      	beq.n	800541a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005412:	e008      	b.n	8005426 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005414:	2300      	movs	r3, #0
 8005416:	607b      	str	r3, [r7, #4]
        break;
 8005418:	e008      	b.n	800542c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800541a:	2301      	movs	r3, #1
 800541c:	607b      	str	r3, [r7, #4]
        break;
 800541e:	e005      	b.n	800542c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005420:	2302      	movs	r3, #2
 8005422:	607b      	str	r3, [r7, #4]
        break;
 8005424:	e002      	b.n	800542c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
        break;
 800542a:	bf00      	nop
    }
  }
  return systick_source;
 800542c:	687b      	ldr	r3, [r7, #4]
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	e000e010 	.word	0xe000e010
 8005440:	46020c00 	.word	0x46020c00

08005444 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800544c:	f7fd fc16 	bl	8002c7c <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0db      	b.n	8005614 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a6e      	ldr	r2, [pc, #440]	@ (800561c <HAL_DMA_Init+0x1d8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	f000 809f 	beq.w	80055a6 <HAL_DMA_Init+0x162>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a6c      	ldr	r2, [pc, #432]	@ (8005620 <HAL_DMA_Init+0x1dc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	f000 8099 	beq.w	80055a6 <HAL_DMA_Init+0x162>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a6a      	ldr	r2, [pc, #424]	@ (8005624 <HAL_DMA_Init+0x1e0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	f000 8093 	beq.w	80055a6 <HAL_DMA_Init+0x162>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a68      	ldr	r2, [pc, #416]	@ (8005628 <HAL_DMA_Init+0x1e4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	f000 808d 	beq.w	80055a6 <HAL_DMA_Init+0x162>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a66      	ldr	r2, [pc, #408]	@ (800562c <HAL_DMA_Init+0x1e8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	f000 8087 	beq.w	80055a6 <HAL_DMA_Init+0x162>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a64      	ldr	r2, [pc, #400]	@ (8005630 <HAL_DMA_Init+0x1ec>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f000 8081 	beq.w	80055a6 <HAL_DMA_Init+0x162>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a62      	ldr	r2, [pc, #392]	@ (8005634 <HAL_DMA_Init+0x1f0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d07b      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a61      	ldr	r2, [pc, #388]	@ (8005638 <HAL_DMA_Init+0x1f4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d076      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a5f      	ldr	r2, [pc, #380]	@ (800563c <HAL_DMA_Init+0x1f8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d071      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005640 <HAL_DMA_Init+0x1fc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d06c      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5c      	ldr	r2, [pc, #368]	@ (8005644 <HAL_DMA_Init+0x200>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d067      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a5b      	ldr	r2, [pc, #364]	@ (8005648 <HAL_DMA_Init+0x204>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d062      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a59      	ldr	r2, [pc, #356]	@ (800564c <HAL_DMA_Init+0x208>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d05d      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a58      	ldr	r2, [pc, #352]	@ (8005650 <HAL_DMA_Init+0x20c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d058      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a56      	ldr	r2, [pc, #344]	@ (8005654 <HAL_DMA_Init+0x210>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d053      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a55      	ldr	r2, [pc, #340]	@ (8005658 <HAL_DMA_Init+0x214>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d04e      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a53      	ldr	r2, [pc, #332]	@ (800565c <HAL_DMA_Init+0x218>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d049      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a52      	ldr	r2, [pc, #328]	@ (8005660 <HAL_DMA_Init+0x21c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d044      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a50      	ldr	r2, [pc, #320]	@ (8005664 <HAL_DMA_Init+0x220>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d03f      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a4f      	ldr	r2, [pc, #316]	@ (8005668 <HAL_DMA_Init+0x224>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d03a      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a4d      	ldr	r2, [pc, #308]	@ (800566c <HAL_DMA_Init+0x228>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d035      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a4c      	ldr	r2, [pc, #304]	@ (8005670 <HAL_DMA_Init+0x22c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d030      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a4a      	ldr	r2, [pc, #296]	@ (8005674 <HAL_DMA_Init+0x230>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d02b      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a49      	ldr	r2, [pc, #292]	@ (8005678 <HAL_DMA_Init+0x234>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d026      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a47      	ldr	r2, [pc, #284]	@ (800567c <HAL_DMA_Init+0x238>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d021      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a46      	ldr	r2, [pc, #280]	@ (8005680 <HAL_DMA_Init+0x23c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d01c      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a44      	ldr	r2, [pc, #272]	@ (8005684 <HAL_DMA_Init+0x240>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d017      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a43      	ldr	r2, [pc, #268]	@ (8005688 <HAL_DMA_Init+0x244>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d012      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a41      	ldr	r2, [pc, #260]	@ (800568c <HAL_DMA_Init+0x248>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00d      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a40      	ldr	r2, [pc, #256]	@ (8005690 <HAL_DMA_Init+0x24c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d008      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a3e      	ldr	r2, [pc, #248]	@ (8005694 <HAL_DMA_Init+0x250>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <HAL_DMA_Init+0x162>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005698 <HAL_DMA_Init+0x254>)
 80055a4:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2202      	movs	r2, #2
 80055b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0206 	orr.w	r2, r2, #6
 80055c4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80055c6:	e00f      	b.n	80055e8 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80055c8:	f7fd fb58 	bl	8002c7c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d908      	bls.n	80055e8 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2210      	movs	r2, #16
 80055da:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2203      	movs	r2, #3
 80055e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e015      	b.n	8005614 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e8      	bne.n	80055c8 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fb26 	bl	8005c48 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40020050 	.word	0x40020050
 8005620:	50020050 	.word	0x50020050
 8005624:	400200d0 	.word	0x400200d0
 8005628:	500200d0 	.word	0x500200d0
 800562c:	40020150 	.word	0x40020150
 8005630:	50020150 	.word	0x50020150
 8005634:	400201d0 	.word	0x400201d0
 8005638:	500201d0 	.word	0x500201d0
 800563c:	40020250 	.word	0x40020250
 8005640:	50020250 	.word	0x50020250
 8005644:	400202d0 	.word	0x400202d0
 8005648:	500202d0 	.word	0x500202d0
 800564c:	40020350 	.word	0x40020350
 8005650:	50020350 	.word	0x50020350
 8005654:	400203d0 	.word	0x400203d0
 8005658:	500203d0 	.word	0x500203d0
 800565c:	40020450 	.word	0x40020450
 8005660:	50020450 	.word	0x50020450
 8005664:	400204d0 	.word	0x400204d0
 8005668:	500204d0 	.word	0x500204d0
 800566c:	40020550 	.word	0x40020550
 8005670:	50020550 	.word	0x50020550
 8005674:	400205d0 	.word	0x400205d0
 8005678:	500205d0 	.word	0x500205d0
 800567c:	40020650 	.word	0x40020650
 8005680:	50020650 	.word	0x50020650
 8005684:	400206d0 	.word	0x400206d0
 8005688:	500206d0 	.word	0x500206d0
 800568c:	40020750 	.word	0x40020750
 8005690:	50020750 	.word	0x50020750
 8005694:	400207d0 	.word	0x400207d0
 8005698:	500207d0 	.word	0x500207d0

0800569c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e04f      	b.n	8005754 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_DMA_Start_IT+0x26>
 80056be:	2302      	movs	r3, #2
 80056c0:	e048      	b.n	8005754 <HAL_DMA_Start_IT+0xb8>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d136      	bne.n	8005744 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 fa86 	bl	8005bfc <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80056fe:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005716:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571c:	2b00      	cmp	r3, #0
 800571e:	d007      	beq.n	8005730 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695a      	ldr	r2, [r3, #20]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800572e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	e007      	b.n	8005754 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2240      	movs	r2, #64	@ 0x40
 8005748:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005764:	f7fd fa8a 	bl	8002c7c <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e06b      	b.n	800584c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d008      	beq.n	8005792 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e05c      	b.n	800584c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0204 	orr.w	r2, r2, #4
 80057a0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2205      	movs	r2, #5
 80057a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80057aa:	e020      	b.n	80057ee <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80057ac:	f7fd fa66 	bl	8002c7c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b05      	cmp	r3, #5
 80057b8:	d919      	bls.n	80057ee <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057be:	f043 0210 	orr.w	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2203      	movs	r2, #3
 80057ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057de:	2201      	movs	r2, #1
 80057e0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e02e      	b.n	800584c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0d7      	beq.n	80057ac <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0202 	orr.w	r2, r2, #2
 800580a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2204      	movs	r2, #4
 8005810:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800581c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800582a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005836:	2201      	movs	r2, #1
 8005838:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2200      	movs	r2, #0
 8005840:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e019      	b.n	800589a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d004      	beq.n	800587c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e00e      	b.n	800589a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2204      	movs	r2, #4
 8005880:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80058b6:	f023 030f 	bic.w	r3, r3, #15
 80058ba:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c4:	3b50      	subs	r3, #80	@ 0x50
 80058c6:	09db      	lsrs	r3, r3, #7
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	2201      	movs	r2, #1
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4013      	ands	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 813b 	beq.w	8005b5c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d011      	beq.n	8005918 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800590a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005910:	f043 0201 	orr.w	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800593c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005942:	f043 0202 	orr.w	r2, r3, #2
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d011      	beq.n	800597c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800596e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005974:	f043 0204 	orr.w	r2, r3, #4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d011      	beq.n	80059ae <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80059a0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a6:	f043 0208 	orr.w	r2, r3, #8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d013      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00c      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059d2:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d04c      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d045      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a08:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d12e      	bne.n	8005a74 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a24:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0202 	orr.w	r2, r2, #2
 8005a34:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4e:	2201      	movs	r2, #1
 8005a50:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d07a      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
        }

        return;
 8005a72:	e075      	b.n	8005b60 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2205      	movs	r2, #5
 8005a78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d039      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d032      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d012      	beq.n	8005ada <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d116      	bne.n	8005aec <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d111      	bne.n	8005aec <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	731a      	strb	r2, [r3, #12]
 8005ad8:	e008      	b.n	8005aec <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005af4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d025      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695a      	ldr	r2, [r3, #20]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0202 	orr.w	r2, r2, #2
 8005b24:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b3e:	2201      	movs	r2, #1
 8005b40:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
 8005b5a:	e002      	b.n	8005b62 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005b5c:	bf00      	nop
 8005b5e:	e000      	b.n	8005b62 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005b60:	bf00      	nop
    }
  }
}
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b76:	b2db      	uxtb	r3, r3
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e02b      	b.n	8005bf0 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005ba0:	f023 030f 	bic.w	r3, r3, #15
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bae:	3b50      	subs	r3, #80	@ 0x50
 8005bb0:	09db      	lsrs	r3, r3, #7
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d012      	beq.n	8005bee <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f003 0311 	and.w	r3, r3, #17
 8005bce:	2b11      	cmp	r3, #17
 8005bd0:	d106      	bne.n	8005be0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	e006      	b.n	8005bee <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	43db      	mvns	r3, r3
 8005be8:	401a      	ands	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	041b      	lsls	r3, r3, #16
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	b291      	uxth	r1, r2
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005c28:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a53      	ldr	r2, [pc, #332]	@ (8005dd4 <DMA_Init+0x18c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	f000 80a0 	beq.w	8005dce <DMA_Init+0x186>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a51      	ldr	r2, [pc, #324]	@ (8005dd8 <DMA_Init+0x190>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	f000 809a 	beq.w	8005dce <DMA_Init+0x186>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a4f      	ldr	r2, [pc, #316]	@ (8005ddc <DMA_Init+0x194>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	f000 8094 	beq.w	8005dce <DMA_Init+0x186>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a4d      	ldr	r2, [pc, #308]	@ (8005de0 <DMA_Init+0x198>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	f000 808e 	beq.w	8005dce <DMA_Init+0x186>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a4b      	ldr	r2, [pc, #300]	@ (8005de4 <DMA_Init+0x19c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	f000 8088 	beq.w	8005dce <DMA_Init+0x186>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a49      	ldr	r2, [pc, #292]	@ (8005de8 <DMA_Init+0x1a0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	f000 8082 	beq.w	8005dce <DMA_Init+0x186>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a47      	ldr	r2, [pc, #284]	@ (8005dec <DMA_Init+0x1a4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d07c      	beq.n	8005dce <DMA_Init+0x186>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a45      	ldr	r2, [pc, #276]	@ (8005df0 <DMA_Init+0x1a8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d077      	beq.n	8005dce <DMA_Init+0x186>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a44      	ldr	r2, [pc, #272]	@ (8005df4 <DMA_Init+0x1ac>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d072      	beq.n	8005dce <DMA_Init+0x186>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a42      	ldr	r2, [pc, #264]	@ (8005df8 <DMA_Init+0x1b0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d06d      	beq.n	8005dce <DMA_Init+0x186>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a41      	ldr	r2, [pc, #260]	@ (8005dfc <DMA_Init+0x1b4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d068      	beq.n	8005dce <DMA_Init+0x186>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a3f      	ldr	r2, [pc, #252]	@ (8005e00 <DMA_Init+0x1b8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d063      	beq.n	8005dce <DMA_Init+0x186>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e04 <DMA_Init+0x1bc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d05e      	beq.n	8005dce <DMA_Init+0x186>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a3c      	ldr	r2, [pc, #240]	@ (8005e08 <DMA_Init+0x1c0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d059      	beq.n	8005dce <DMA_Init+0x186>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a3b      	ldr	r2, [pc, #236]	@ (8005e0c <DMA_Init+0x1c4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d054      	beq.n	8005dce <DMA_Init+0x186>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a39      	ldr	r2, [pc, #228]	@ (8005e10 <DMA_Init+0x1c8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d04f      	beq.n	8005dce <DMA_Init+0x186>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a38      	ldr	r2, [pc, #224]	@ (8005e14 <DMA_Init+0x1cc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d04a      	beq.n	8005dce <DMA_Init+0x186>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a36      	ldr	r2, [pc, #216]	@ (8005e18 <DMA_Init+0x1d0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d045      	beq.n	8005dce <DMA_Init+0x186>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a35      	ldr	r2, [pc, #212]	@ (8005e1c <DMA_Init+0x1d4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d040      	beq.n	8005dce <DMA_Init+0x186>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a33      	ldr	r2, [pc, #204]	@ (8005e20 <DMA_Init+0x1d8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d03b      	beq.n	8005dce <DMA_Init+0x186>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a32      	ldr	r2, [pc, #200]	@ (8005e24 <DMA_Init+0x1dc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d036      	beq.n	8005dce <DMA_Init+0x186>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a30      	ldr	r2, [pc, #192]	@ (8005e28 <DMA_Init+0x1e0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d031      	beq.n	8005dce <DMA_Init+0x186>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8005e2c <DMA_Init+0x1e4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d02c      	beq.n	8005dce <DMA_Init+0x186>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a2d      	ldr	r2, [pc, #180]	@ (8005e30 <DMA_Init+0x1e8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d027      	beq.n	8005dce <DMA_Init+0x186>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a2c      	ldr	r2, [pc, #176]	@ (8005e34 <DMA_Init+0x1ec>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <DMA_Init+0x186>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e38 <DMA_Init+0x1f0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01d      	beq.n	8005dce <DMA_Init+0x186>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a29      	ldr	r2, [pc, #164]	@ (8005e3c <DMA_Init+0x1f4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d018      	beq.n	8005dce <DMA_Init+0x186>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a27      	ldr	r2, [pc, #156]	@ (8005e40 <DMA_Init+0x1f8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <DMA_Init+0x186>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a26      	ldr	r2, [pc, #152]	@ (8005e44 <DMA_Init+0x1fc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <DMA_Init+0x186>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a24      	ldr	r2, [pc, #144]	@ (8005e48 <DMA_Init+0x200>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <DMA_Init+0x186>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a23      	ldr	r2, [pc, #140]	@ (8005e4c <DMA_Init+0x204>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <DMA_Init+0x186>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a21      	ldr	r2, [pc, #132]	@ (8005e50 <DMA_Init+0x208>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d142      	bne.n	8005e54 <DMA_Init+0x20c>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e041      	b.n	8005e56 <DMA_Init+0x20e>
 8005dd2:	bf00      	nop
 8005dd4:	40020050 	.word	0x40020050
 8005dd8:	50020050 	.word	0x50020050
 8005ddc:	400200d0 	.word	0x400200d0
 8005de0:	500200d0 	.word	0x500200d0
 8005de4:	40020150 	.word	0x40020150
 8005de8:	50020150 	.word	0x50020150
 8005dec:	400201d0 	.word	0x400201d0
 8005df0:	500201d0 	.word	0x500201d0
 8005df4:	40020250 	.word	0x40020250
 8005df8:	50020250 	.word	0x50020250
 8005dfc:	400202d0 	.word	0x400202d0
 8005e00:	500202d0 	.word	0x500202d0
 8005e04:	40020350 	.word	0x40020350
 8005e08:	50020350 	.word	0x50020350
 8005e0c:	400203d0 	.word	0x400203d0
 8005e10:	500203d0 	.word	0x500203d0
 8005e14:	40020450 	.word	0x40020450
 8005e18:	50020450 	.word	0x50020450
 8005e1c:	400204d0 	.word	0x400204d0
 8005e20:	500204d0 	.word	0x500204d0
 8005e24:	40020550 	.word	0x40020550
 8005e28:	50020550 	.word	0x50020550
 8005e2c:	400205d0 	.word	0x400205d0
 8005e30:	500205d0 	.word	0x500205d0
 8005e34:	40020650 	.word	0x40020650
 8005e38:	50020650 	.word	0x50020650
 8005e3c:	400206d0 	.word	0x400206d0
 8005e40:	500206d0 	.word	0x500206d0
 8005e44:	40020750 	.word	0x40020750
 8005e48:	50020750 	.word	0x50020750
 8005e4c:	400207d0 	.word	0x400207d0
 8005e50:	500207d0 	.word	0x500207d0
 8005e54:	2300      	movs	r3, #0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d012      	beq.n	8005e80 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	3b01      	subs	r3, #1
 8005e64:	051b      	lsls	r3, r3, #20
 8005e66:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e6a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	3b01      	subs	r3, #1
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e78:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb2:	f040 80b0 	bne.w	8006016 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a82      	ldr	r2, [pc, #520]	@ (80060c4 <DMA_Init+0x47c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	f000 80a0 	beq.w	8006002 <DMA_Init+0x3ba>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a80      	ldr	r2, [pc, #512]	@ (80060c8 <DMA_Init+0x480>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	f000 809a 	beq.w	8006002 <DMA_Init+0x3ba>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80060cc <DMA_Init+0x484>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	f000 8094 	beq.w	8006002 <DMA_Init+0x3ba>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a7c      	ldr	r2, [pc, #496]	@ (80060d0 <DMA_Init+0x488>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	f000 808e 	beq.w	8006002 <DMA_Init+0x3ba>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a7a      	ldr	r2, [pc, #488]	@ (80060d4 <DMA_Init+0x48c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	f000 8088 	beq.w	8006002 <DMA_Init+0x3ba>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a78      	ldr	r2, [pc, #480]	@ (80060d8 <DMA_Init+0x490>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	f000 8082 	beq.w	8006002 <DMA_Init+0x3ba>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a76      	ldr	r2, [pc, #472]	@ (80060dc <DMA_Init+0x494>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d07c      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a74      	ldr	r2, [pc, #464]	@ (80060e0 <DMA_Init+0x498>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d077      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a73      	ldr	r2, [pc, #460]	@ (80060e4 <DMA_Init+0x49c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d072      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a71      	ldr	r2, [pc, #452]	@ (80060e8 <DMA_Init+0x4a0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d06d      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a70      	ldr	r2, [pc, #448]	@ (80060ec <DMA_Init+0x4a4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d068      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a6e      	ldr	r2, [pc, #440]	@ (80060f0 <DMA_Init+0x4a8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d063      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a6d      	ldr	r2, [pc, #436]	@ (80060f4 <DMA_Init+0x4ac>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d05e      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a6b      	ldr	r2, [pc, #428]	@ (80060f8 <DMA_Init+0x4b0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d059      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a6a      	ldr	r2, [pc, #424]	@ (80060fc <DMA_Init+0x4b4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d054      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a68      	ldr	r2, [pc, #416]	@ (8006100 <DMA_Init+0x4b8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d04f      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a67      	ldr	r2, [pc, #412]	@ (8006104 <DMA_Init+0x4bc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d04a      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a65      	ldr	r2, [pc, #404]	@ (8006108 <DMA_Init+0x4c0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d045      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a64      	ldr	r2, [pc, #400]	@ (800610c <DMA_Init+0x4c4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d040      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a62      	ldr	r2, [pc, #392]	@ (8006110 <DMA_Init+0x4c8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d03b      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a61      	ldr	r2, [pc, #388]	@ (8006114 <DMA_Init+0x4cc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d036      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a5f      	ldr	r2, [pc, #380]	@ (8006118 <DMA_Init+0x4d0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d031      	beq.n	8006002 <DMA_Init+0x3ba>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a5e      	ldr	r2, [pc, #376]	@ (800611c <DMA_Init+0x4d4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d02c      	beq.n	8006002 <DMA_Init+0x3ba>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a5c      	ldr	r2, [pc, #368]	@ (8006120 <DMA_Init+0x4d8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d027      	beq.n	8006002 <DMA_Init+0x3ba>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8006124 <DMA_Init+0x4dc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d022      	beq.n	8006002 <DMA_Init+0x3ba>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a59      	ldr	r2, [pc, #356]	@ (8006128 <DMA_Init+0x4e0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d01d      	beq.n	8006002 <DMA_Init+0x3ba>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a58      	ldr	r2, [pc, #352]	@ (800612c <DMA_Init+0x4e4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d018      	beq.n	8006002 <DMA_Init+0x3ba>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a56      	ldr	r2, [pc, #344]	@ (8006130 <DMA_Init+0x4e8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d013      	beq.n	8006002 <DMA_Init+0x3ba>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a55      	ldr	r2, [pc, #340]	@ (8006134 <DMA_Init+0x4ec>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00e      	beq.n	8006002 <DMA_Init+0x3ba>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a53      	ldr	r2, [pc, #332]	@ (8006138 <DMA_Init+0x4f0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d009      	beq.n	8006002 <DMA_Init+0x3ba>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a52      	ldr	r2, [pc, #328]	@ (800613c <DMA_Init+0x4f4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d004      	beq.n	8006002 <DMA_Init+0x3ba>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a50      	ldr	r2, [pc, #320]	@ (8006140 <DMA_Init+0x4f8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d101      	bne.n	8006006 <DMA_Init+0x3be>
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <DMA_Init+0x3c0>
 8006006:	2300      	movs	r3, #0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00d      	beq.n	8006028 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e008      	b.n	8006028 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800601e:	d103      	bne.n	8006028 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006026:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800602e:	4b45      	ldr	r3, [pc, #276]	@ (8006144 <DMA_Init+0x4fc>)
 8006030:	4013      	ands	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6812      	ldr	r2, [r2, #0]
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	430b      	orrs	r3, r1
 800603a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2200      	movs	r2, #0
 8006042:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a36      	ldr	r2, [pc, #216]	@ (8006124 <DMA_Init+0x4dc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d022      	beq.n	8006094 <DMA_Init+0x44c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a35      	ldr	r2, [pc, #212]	@ (8006128 <DMA_Init+0x4e0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d01d      	beq.n	8006094 <DMA_Init+0x44c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a33      	ldr	r2, [pc, #204]	@ (800612c <DMA_Init+0x4e4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d018      	beq.n	8006094 <DMA_Init+0x44c>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a32      	ldr	r2, [pc, #200]	@ (8006130 <DMA_Init+0x4e8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <DMA_Init+0x44c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a30      	ldr	r2, [pc, #192]	@ (8006134 <DMA_Init+0x4ec>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00e      	beq.n	8006094 <DMA_Init+0x44c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2f      	ldr	r2, [pc, #188]	@ (8006138 <DMA_Init+0x4f0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d009      	beq.n	8006094 <DMA_Init+0x44c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2d      	ldr	r2, [pc, #180]	@ (800613c <DMA_Init+0x4f4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <DMA_Init+0x44c>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2c      	ldr	r2, [pc, #176]	@ (8006140 <DMA_Init+0x4f8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d101      	bne.n	8006098 <DMA_Init+0x450>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <DMA_Init+0x452>
 8006098:	2300      	movs	r3, #0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2200      	movs	r2, #0
 80060a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2200      	movs	r2, #0
 80060ac:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2200      	movs	r2, #0
 80060b4:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80060b6:	bf00      	nop
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40020050 	.word	0x40020050
 80060c8:	50020050 	.word	0x50020050
 80060cc:	400200d0 	.word	0x400200d0
 80060d0:	500200d0 	.word	0x500200d0
 80060d4:	40020150 	.word	0x40020150
 80060d8:	50020150 	.word	0x50020150
 80060dc:	400201d0 	.word	0x400201d0
 80060e0:	500201d0 	.word	0x500201d0
 80060e4:	40020250 	.word	0x40020250
 80060e8:	50020250 	.word	0x50020250
 80060ec:	400202d0 	.word	0x400202d0
 80060f0:	500202d0 	.word	0x500202d0
 80060f4:	40020350 	.word	0x40020350
 80060f8:	50020350 	.word	0x50020350
 80060fc:	400203d0 	.word	0x400203d0
 8006100:	500203d0 	.word	0x500203d0
 8006104:	40020450 	.word	0x40020450
 8006108:	50020450 	.word	0x50020450
 800610c:	400204d0 	.word	0x400204d0
 8006110:	500204d0 	.word	0x500204d0
 8006114:	40020550 	.word	0x40020550
 8006118:	50020550 	.word	0x50020550
 800611c:	400205d0 	.word	0x400205d0
 8006120:	500205d0 	.word	0x500205d0
 8006124:	40020650 	.word	0x40020650
 8006128:	50020650 	.word	0x50020650
 800612c:	400206d0 	.word	0x400206d0
 8006130:	500206d0 	.word	0x500206d0
 8006134:	40020750 	.word	0x40020750
 8006138:	50020750 	.word	0x50020750
 800613c:	400207d0 	.word	0x400207d0
 8006140:	500207d0 	.word	0x500207d0
 8006144:	3c803180 	.word	0x3c803180

08006148 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e053      	b.n	8006202 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fb fd60 	bl	8001c34 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006186:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6851      	ldr	r1, [r2, #4]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	69d2      	ldr	r2, [r2, #28]
 8006192:	4311      	orrs	r1, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	430b      	orrs	r3, r1
 800619a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a2:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6891      	ldr	r1, [r2, #8]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6992      	ldr	r2, [r2, #24]
 80061b2:	4311      	orrs	r1, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	430b      	orrs	r3, r1
 80061ba:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c2:	0c1b      	lsrs	r3, r3, #16
 80061c4:	041b      	lsls	r3, r3, #16
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68d1      	ldr	r1, [r2, #12]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	430b      	orrs	r3, r1
 80061d0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	051a      	lsls	r2, r3, #20
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	055b      	lsls	r3, r3, #21
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_DMA2D_ConfigLayer+0x24>
 800622c:	2302      	movs	r3, #2
 800622e:	e092      	b.n	8006356 <HAL_DMA2D_ConfigLayer+0x14a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	1a9b      	subs	r3, r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	3328      	adds	r3, #40	@ 0x28
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006264:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006270:	4b3c      	ldr	r3, [pc, #240]	@ (8006364 <HAL_DMA2D_ConfigLayer+0x158>)
 8006272:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b0a      	cmp	r3, #10
 800627a:	d003      	beq.n	8006284 <HAL_DMA2D_ConfigLayer+0x78>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b09      	cmp	r3, #9
 8006282:	d107      	bne.n	8006294 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	e005      	b.n	80062a0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	061b      	lsls	r3, r3, #24
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d120      	bne.n	80062e8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	43db      	mvns	r3, r3
 80062b0:	ea02 0103 	and.w	r1, r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b0a      	cmp	r3, #10
 80062ce:	d003      	beq.n	80062d8 <HAL_DMA2D_ConfigLayer+0xcc>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b09      	cmp	r3, #9
 80062d6:	d135      	bne.n	8006344 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80062e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80062e6:	e02d      	b.n	8006344 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b0b      	cmp	r3, #11
 80062ee:	d109      	bne.n	8006304 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	049b      	lsls	r3, r3, #18
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006302:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69da      	ldr	r2, [r3, #28]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	43db      	mvns	r3, r3
 800630e:	ea02 0103 	and.w	r1, r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	430a      	orrs	r2, r1
 800631a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	6812      	ldr	r2, [r2, #0]
 8006324:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b0a      	cmp	r3, #10
 800632c:	d003      	beq.n	8006336 <HAL_DMA2D_ConfigLayer+0x12a>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2b09      	cmp	r3, #9
 8006334:	d106      	bne.n	8006344 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006342:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	ff33000f 	.word	0xff33000f

08006368 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006370:	f7fc fc84 	bl	8002c7c <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e0db      	b.n	8006538 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a6e      	ldr	r2, [pc, #440]	@ (8006540 <HAL_DMAEx_List_Init+0x1d8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	f000 809f 	beq.w	80064ca <HAL_DMAEx_List_Init+0x162>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a6c      	ldr	r2, [pc, #432]	@ (8006544 <HAL_DMAEx_List_Init+0x1dc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	f000 8099 	beq.w	80064ca <HAL_DMAEx_List_Init+0x162>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a6a      	ldr	r2, [pc, #424]	@ (8006548 <HAL_DMAEx_List_Init+0x1e0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	f000 8093 	beq.w	80064ca <HAL_DMAEx_List_Init+0x162>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a68      	ldr	r2, [pc, #416]	@ (800654c <HAL_DMAEx_List_Init+0x1e4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	f000 808d 	beq.w	80064ca <HAL_DMAEx_List_Init+0x162>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a66      	ldr	r2, [pc, #408]	@ (8006550 <HAL_DMAEx_List_Init+0x1e8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	f000 8087 	beq.w	80064ca <HAL_DMAEx_List_Init+0x162>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a64      	ldr	r2, [pc, #400]	@ (8006554 <HAL_DMAEx_List_Init+0x1ec>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	f000 8081 	beq.w	80064ca <HAL_DMAEx_List_Init+0x162>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a62      	ldr	r2, [pc, #392]	@ (8006558 <HAL_DMAEx_List_Init+0x1f0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d07b      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a61      	ldr	r2, [pc, #388]	@ (800655c <HAL_DMAEx_List_Init+0x1f4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d076      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a5f      	ldr	r2, [pc, #380]	@ (8006560 <HAL_DMAEx_List_Init+0x1f8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d071      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006564 <HAL_DMAEx_List_Init+0x1fc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d06c      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a5c      	ldr	r2, [pc, #368]	@ (8006568 <HAL_DMAEx_List_Init+0x200>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d067      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a5b      	ldr	r2, [pc, #364]	@ (800656c <HAL_DMAEx_List_Init+0x204>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d062      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a59      	ldr	r2, [pc, #356]	@ (8006570 <HAL_DMAEx_List_Init+0x208>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d05d      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a58      	ldr	r2, [pc, #352]	@ (8006574 <HAL_DMAEx_List_Init+0x20c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d058      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a56      	ldr	r2, [pc, #344]	@ (8006578 <HAL_DMAEx_List_Init+0x210>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d053      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a55      	ldr	r2, [pc, #340]	@ (800657c <HAL_DMAEx_List_Init+0x214>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d04e      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a53      	ldr	r2, [pc, #332]	@ (8006580 <HAL_DMAEx_List_Init+0x218>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d049      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a52      	ldr	r2, [pc, #328]	@ (8006584 <HAL_DMAEx_List_Init+0x21c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d044      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a50      	ldr	r2, [pc, #320]	@ (8006588 <HAL_DMAEx_List_Init+0x220>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d03f      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a4f      	ldr	r2, [pc, #316]	@ (800658c <HAL_DMAEx_List_Init+0x224>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d03a      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a4d      	ldr	r2, [pc, #308]	@ (8006590 <HAL_DMAEx_List_Init+0x228>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d035      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a4c      	ldr	r2, [pc, #304]	@ (8006594 <HAL_DMAEx_List_Init+0x22c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d030      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a4a      	ldr	r2, [pc, #296]	@ (8006598 <HAL_DMAEx_List_Init+0x230>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d02b      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a49      	ldr	r2, [pc, #292]	@ (800659c <HAL_DMAEx_List_Init+0x234>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d026      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a47      	ldr	r2, [pc, #284]	@ (80065a0 <HAL_DMAEx_List_Init+0x238>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d021      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a46      	ldr	r2, [pc, #280]	@ (80065a4 <HAL_DMAEx_List_Init+0x23c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d01c      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a44      	ldr	r2, [pc, #272]	@ (80065a8 <HAL_DMAEx_List_Init+0x240>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d017      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a43      	ldr	r2, [pc, #268]	@ (80065ac <HAL_DMAEx_List_Init+0x244>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d012      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a41      	ldr	r2, [pc, #260]	@ (80065b0 <HAL_DMAEx_List_Init+0x248>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00d      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a40      	ldr	r2, [pc, #256]	@ (80065b4 <HAL_DMAEx_List_Init+0x24c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d008      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a3e      	ldr	r2, [pc, #248]	@ (80065b8 <HAL_DMAEx_List_Init+0x250>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d003      	beq.n	80064ca <HAL_DMAEx_List_Init+0x162>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a3d      	ldr	r2, [pc, #244]	@ (80065bc <HAL_DMAEx_List_Init+0x254>)
 80064c8:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0206 	orr.w	r2, r2, #6
 80064e8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80064ea:	e00f      	b.n	800650c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80064ec:	f7fc fbc6 	bl	8002c7c <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b05      	cmp	r3, #5
 80064f8:	d908      	bls.n	800650c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2210      	movs	r2, #16
 80064fe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2203      	movs	r2, #3
 8006504:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e015      	b.n	8006538 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e8      	bne.n	80064ec <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fae0 	bl	8006ae0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40020050 	.word	0x40020050
 8006544:	50020050 	.word	0x50020050
 8006548:	400200d0 	.word	0x400200d0
 800654c:	500200d0 	.word	0x500200d0
 8006550:	40020150 	.word	0x40020150
 8006554:	50020150 	.word	0x50020150
 8006558:	400201d0 	.word	0x400201d0
 800655c:	500201d0 	.word	0x500201d0
 8006560:	40020250 	.word	0x40020250
 8006564:	50020250 	.word	0x50020250
 8006568:	400202d0 	.word	0x400202d0
 800656c:	500202d0 	.word	0x500202d0
 8006570:	40020350 	.word	0x40020350
 8006574:	50020350 	.word	0x50020350
 8006578:	400203d0 	.word	0x400203d0
 800657c:	500203d0 	.word	0x500203d0
 8006580:	40020450 	.word	0x40020450
 8006584:	50020450 	.word	0x50020450
 8006588:	400204d0 	.word	0x400204d0
 800658c:	500204d0 	.word	0x500204d0
 8006590:	40020550 	.word	0x40020550
 8006594:	50020550 	.word	0x50020550
 8006598:	400205d0 	.word	0x400205d0
 800659c:	500205d0 	.word	0x500205d0
 80065a0:	40020650 	.word	0x40020650
 80065a4:	50020650 	.word	0x50020650
 80065a8:	400206d0 	.word	0x400206d0
 80065ac:	500206d0 	.word	0x500206d0
 80065b0:	40020750 	.word	0x40020750
 80065b4:	50020750 	.word	0x50020750
 80065b8:	400207d0 	.word	0x400207d0
 80065bc:	500207d0 	.word	0x500207d0

080065c0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_DMAEx_List_Start_IT+0x16>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e082      	b.n	80066e0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065e0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065ec:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d005      	beq.n	8006600 <HAL_DMAEx_List_Start_IT+0x40>
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d16a      	bne.n	80066d0 <HAL_DMAEx_List_Start_IT+0x110>
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d067      	beq.n	80066d0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b01      	cmp	r3, #1
 800660a:	d157      	bne.n	80066bc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_DMAEx_List_Start_IT+0x5a>
 8006616:	2302      	movs	r3, #2
 8006618:	e062      	b.n	80066e0 <HAL_DMAEx_List_Start_IT+0x120>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2202      	movs	r2, #2
 8006626:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662e:	2202      	movs	r2, #2
 8006630:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663c:	2200      	movs	r2, #0
 800663e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800664e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006654:	2b00      	cmp	r3, #0
 8006656:	d007      	beq.n	8006668 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695a      	ldr	r2, [r3, #20]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006666:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695a      	ldr	r2, [r3, #20]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800667e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f107 010c 	add.w	r1, r7, #12
 800668a:	2200      	movs	r2, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fe47 	bl	8007320 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4619      	mov	r1, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	0c0b      	lsrs	r3, r1, #16
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80066b0:	4013      	ands	r3, r2
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	430b      	orrs	r3, r1
 80066ba:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695a      	ldr	r2, [r3, #20]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e007      	b.n	80066e0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2240      	movs	r2, #64	@ 0x40
 80066d4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <HAL_DMAEx_List_BuildNode+0x16>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e004      	b.n	800670c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fb43 	bl	8006d90 <DMA_List_BuildNode>

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e004      	b.n	8006738 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fc7f 	bl	8007034 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	@ 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <HAL_DMAEx_List_InsertNode+0x18>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0b6      	b.n	80068ca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d104      	bne.n	800676e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2204      	movs	r2, #4
 8006768:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e0ad      	b.n	80068ca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fd66 	bl	8007248 <DMA_List_CheckNodesBaseAddresses>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d004      	beq.n	800678c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2205      	movs	r2, #5
 8006786:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e09e      	b.n	80068ca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fd87 	bl	80072a8 <DMA_List_CheckNodesTypes>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2204      	movs	r2, #4
 80067a4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e08f      	b.n	80068ca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2202      	movs	r2, #2
 80067ae:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80067b6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80067ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fdad 	bl	8007320 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d11a      	bne.n	8006804 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	609a      	str	r2, [r3, #8]
 80067e0:	e06c      	b.n	80068bc <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067ee:	4013      	ands	r3, r2
 80067f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067f4:	4319      	orrs	r1, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2202      	movs	r2, #2
 8006800:	609a      	str	r2, [r3, #8]
 8006802:	e05b      	b.n	80068bc <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10f      	bne.n	800682a <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006814:	4013      	ands	r3, r2
 8006816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800681a:	4319      	orrs	r1, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e043      	b.n	80068b2 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800682a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682c:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 800682e:	f107 0314 	add.w	r3, r7, #20
 8006832:	461a      	mov	r2, r3
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 fda2 	bl	8007380 <DMA_List_FindNode>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d132      	bne.n	80068a8 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	429a      	cmp	r2, r3
 800684a:	d11a      	bne.n	8006882 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	461a      	mov	r2, r3
 800685a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800685e:	4013      	ands	r3, r2
 8006860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006864:	4319      	orrs	r1, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006872:	4013      	ands	r3, r2
 8006874:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006878:	4319      	orrs	r1, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006880:	e017      	b.n	80068b2 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006882:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006898:	4013      	ands	r3, r2
 800689a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800689c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800689e:	4319      	orrs	r1, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068a6:	e004      	b.n	80068b2 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2206      	movs	r2, #6
 80068ac:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e00b      	b.n	80068ca <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3730      	adds	r7, #48	@ 0x30
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b08a      	sub	sp, #40	@ 0x28
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e052      	b.n	800698a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e049      	b.n	800698a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d101      	bne.n	800690e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	e03d      	b.n	800698a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2204      	movs	r2, #4
 8006912:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e038      	b.n	800698a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d104      	bne.n	800692a <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2204      	movs	r2, #4
 8006924:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e02f      	b.n	800698a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f107 0220 	add.w	r2, r7, #32
 800693e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fcec 	bl	8007320 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	461a      	mov	r2, r3
 8006952:	2100      	movs	r1, #0
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fd13 	bl	8007380 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006964:	4013      	ands	r3, r2
 8006966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	4610      	mov	r0, r2
 800696c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800696e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006970:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3728      	adds	r7, #40	@ 0x28
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_DMAEx_List_LinkQ+0x16>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e072      	b.n	8006a94 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80069b4:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d002      	beq.n	80069c8 <HAL_DMAEx_List_LinkQ+0x34>
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2b05      	cmp	r3, #5
 80069c6:	d108      	bne.n	80069da <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2240      	movs	r2, #64	@ 0x40
 80069cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e05c      	b.n	8006a94 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	7b1b      	ldrb	r3, [r3, #12]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d104      	bne.n	80069ee <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2201      	movs	r2, #1
 80069e8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e052      	b.n	8006a94 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a2b      	ldr	r2, [pc, #172]	@ (8006aa0 <HAL_DMAEx_List_LinkQ+0x10c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d022      	beq.n	8006a3e <HAL_DMAEx_List_LinkQ+0xaa>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a29      	ldr	r2, [pc, #164]	@ (8006aa4 <HAL_DMAEx_List_LinkQ+0x110>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d01d      	beq.n	8006a3e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a28      	ldr	r2, [pc, #160]	@ (8006aa8 <HAL_DMAEx_List_LinkQ+0x114>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d018      	beq.n	8006a3e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a26      	ldr	r2, [pc, #152]	@ (8006aac <HAL_DMAEx_List_LinkQ+0x118>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d013      	beq.n	8006a3e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a25      	ldr	r2, [pc, #148]	@ (8006ab0 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00e      	beq.n	8006a3e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a23      	ldr	r2, [pc, #140]	@ (8006ab4 <HAL_DMAEx_List_LinkQ+0x120>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d009      	beq.n	8006a3e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a22      	ldr	r2, [pc, #136]	@ (8006ab8 <HAL_DMAEx_List_LinkQ+0x124>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d004      	beq.n	8006a3e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a20      	ldr	r2, [pc, #128]	@ (8006abc <HAL_DMAEx_List_LinkQ+0x128>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d101      	bne.n	8006a42 <HAL_DMAEx_List_LinkQ+0xae>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <HAL_DMAEx_List_LinkQ+0xb0>
 8006a42:	2300      	movs	r3, #0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e019      	b.n	8006a94 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a64:	2b81      	cmp	r3, #129	@ 0x81
 8006a66:	d108      	bne.n	8006a7a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10d      	bne.n	8006a8c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2204      	movs	r2, #4
 8006a74:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e00c      	b.n	8006a94 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2204      	movs	r2, #4
 8006a86:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e003      	b.n	8006a94 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	40020650 	.word	0x40020650
 8006aa4:	50020650 	.word	0x50020650
 8006aa8:	400206d0 	.word	0x400206d0
 8006aac:	500206d0 	.word	0x500206d0
 8006ab0:	40020750 	.word	0x40020750
 8006ab4:	50020750 	.word	0x50020750
 8006ab8:	400207d0 	.word	0x400207d0
 8006abc:	500207d0 	.word	0x500207d0

08006ac0 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	0c1b      	lsrs	r3, r3, #16
 8006ad0:	b2db      	uxtb	r3, r3
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a85      	ldr	r2, [pc, #532]	@ (8006d10 <DMA_List_Init+0x230>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	f000 80a0 	beq.w	8006c40 <DMA_List_Init+0x160>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a83      	ldr	r2, [pc, #524]	@ (8006d14 <DMA_List_Init+0x234>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	f000 809a 	beq.w	8006c40 <DMA_List_Init+0x160>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a81      	ldr	r2, [pc, #516]	@ (8006d18 <DMA_List_Init+0x238>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	f000 8094 	beq.w	8006c40 <DMA_List_Init+0x160>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a7f      	ldr	r2, [pc, #508]	@ (8006d1c <DMA_List_Init+0x23c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	f000 808e 	beq.w	8006c40 <DMA_List_Init+0x160>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a7d      	ldr	r2, [pc, #500]	@ (8006d20 <DMA_List_Init+0x240>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	f000 8088 	beq.w	8006c40 <DMA_List_Init+0x160>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a7b      	ldr	r2, [pc, #492]	@ (8006d24 <DMA_List_Init+0x244>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	f000 8082 	beq.w	8006c40 <DMA_List_Init+0x160>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a79      	ldr	r2, [pc, #484]	@ (8006d28 <DMA_List_Init+0x248>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d07c      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a78      	ldr	r2, [pc, #480]	@ (8006d2c <DMA_List_Init+0x24c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d077      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a76      	ldr	r2, [pc, #472]	@ (8006d30 <DMA_List_Init+0x250>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d072      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a75      	ldr	r2, [pc, #468]	@ (8006d34 <DMA_List_Init+0x254>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d06d      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a73      	ldr	r2, [pc, #460]	@ (8006d38 <DMA_List_Init+0x258>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d068      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a72      	ldr	r2, [pc, #456]	@ (8006d3c <DMA_List_Init+0x25c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d063      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a70      	ldr	r2, [pc, #448]	@ (8006d40 <DMA_List_Init+0x260>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d05e      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a6f      	ldr	r2, [pc, #444]	@ (8006d44 <DMA_List_Init+0x264>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d059      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a6d      	ldr	r2, [pc, #436]	@ (8006d48 <DMA_List_Init+0x268>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d054      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a6c      	ldr	r2, [pc, #432]	@ (8006d4c <DMA_List_Init+0x26c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d04f      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8006d50 <DMA_List_Init+0x270>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d04a      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a69      	ldr	r2, [pc, #420]	@ (8006d54 <DMA_List_Init+0x274>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d045      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a67      	ldr	r2, [pc, #412]	@ (8006d58 <DMA_List_Init+0x278>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d040      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a66      	ldr	r2, [pc, #408]	@ (8006d5c <DMA_List_Init+0x27c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d03b      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a64      	ldr	r2, [pc, #400]	@ (8006d60 <DMA_List_Init+0x280>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d036      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a63      	ldr	r2, [pc, #396]	@ (8006d64 <DMA_List_Init+0x284>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d031      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a61      	ldr	r2, [pc, #388]	@ (8006d68 <DMA_List_Init+0x288>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02c      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a60      	ldr	r2, [pc, #384]	@ (8006d6c <DMA_List_Init+0x28c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d027      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8006d70 <DMA_List_Init+0x290>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d022      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8006d74 <DMA_List_Init+0x294>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d01d      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a5b      	ldr	r2, [pc, #364]	@ (8006d78 <DMA_List_Init+0x298>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d018      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a5a      	ldr	r2, [pc, #360]	@ (8006d7c <DMA_List_Init+0x29c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a58      	ldr	r2, [pc, #352]	@ (8006d80 <DMA_List_Init+0x2a0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d00e      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a57      	ldr	r2, [pc, #348]	@ (8006d84 <DMA_List_Init+0x2a4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d009      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a55      	ldr	r2, [pc, #340]	@ (8006d88 <DMA_List_Init+0x2a8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <DMA_List_Init+0x160>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a54      	ldr	r2, [pc, #336]	@ (8006d8c <DMA_List_Init+0x2ac>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d101      	bne.n	8006c44 <DMA_List_Init+0x164>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <DMA_List_Init+0x166>
 8006c44:	2300      	movs	r3, #0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c78:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2200      	movs	r2, #0
 8006c88:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a36      	ldr	r2, [pc, #216]	@ (8006d70 <DMA_List_Init+0x290>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d022      	beq.n	8006ce2 <DMA_List_Init+0x202>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a34      	ldr	r2, [pc, #208]	@ (8006d74 <DMA_List_Init+0x294>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d01d      	beq.n	8006ce2 <DMA_List_Init+0x202>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a33      	ldr	r2, [pc, #204]	@ (8006d78 <DMA_List_Init+0x298>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d018      	beq.n	8006ce2 <DMA_List_Init+0x202>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a31      	ldr	r2, [pc, #196]	@ (8006d7c <DMA_List_Init+0x29c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <DMA_List_Init+0x202>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a30      	ldr	r2, [pc, #192]	@ (8006d80 <DMA_List_Init+0x2a0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00e      	beq.n	8006ce2 <DMA_List_Init+0x202>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8006d84 <DMA_List_Init+0x2a4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d009      	beq.n	8006ce2 <DMA_List_Init+0x202>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8006d88 <DMA_List_Init+0x2a8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d004      	beq.n	8006ce2 <DMA_List_Init+0x202>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8006d8c <DMA_List_Init+0x2ac>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d101      	bne.n	8006ce6 <DMA_List_Init+0x206>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <DMA_List_Init+0x208>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2200      	movs	r2, #0
 8006d02:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006d04:	bf00      	nop
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	40020050 	.word	0x40020050
 8006d14:	50020050 	.word	0x50020050
 8006d18:	400200d0 	.word	0x400200d0
 8006d1c:	500200d0 	.word	0x500200d0
 8006d20:	40020150 	.word	0x40020150
 8006d24:	50020150 	.word	0x50020150
 8006d28:	400201d0 	.word	0x400201d0
 8006d2c:	500201d0 	.word	0x500201d0
 8006d30:	40020250 	.word	0x40020250
 8006d34:	50020250 	.word	0x50020250
 8006d38:	400202d0 	.word	0x400202d0
 8006d3c:	500202d0 	.word	0x500202d0
 8006d40:	40020350 	.word	0x40020350
 8006d44:	50020350 	.word	0x50020350
 8006d48:	400203d0 	.word	0x400203d0
 8006d4c:	500203d0 	.word	0x500203d0
 8006d50:	40020450 	.word	0x40020450
 8006d54:	50020450 	.word	0x50020450
 8006d58:	400204d0 	.word	0x400204d0
 8006d5c:	500204d0 	.word	0x500204d0
 8006d60:	40020550 	.word	0x40020550
 8006d64:	50020550 	.word	0x50020550
 8006d68:	400205d0 	.word	0x400205d0
 8006d6c:	500205d0 	.word	0x500205d0
 8006d70:	40020650 	.word	0x40020650
 8006d74:	50020650 	.word	0x50020650
 8006d78:	400206d0 	.word	0x400206d0
 8006d7c:	500206d0 	.word	0x500206d0
 8006d80:	40020750 	.word	0x40020750
 8006d84:	50020750 	.word	0x50020750
 8006d88:	400207d0 	.word	0x400207d0
 8006d8c:	500207d0 	.word	0x500207d0

08006d90 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006da2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006da8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006dae:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006db4:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d017      	beq.n	8006df6 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	051b      	lsls	r3, r3, #20
 8006ddc:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006de0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de6:	3b01      	subs	r3, #1
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006dee:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006df0:	431a      	orrs	r2, r3
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6859      	ldr	r1, [r3, #4]
 8006dfe:	f240 237f 	movw	r3, #639	@ 0x27f
 8006e02:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006e04:	431a      	orrs	r2, r3
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e12:	d10c      	bne.n	8006e2e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d011      	beq.n	8006e44 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	605a      	str	r2, [r3, #4]
 8006e2c:	e00a      	b.n	8006e44 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e36:	d105      	bne.n	8006e44 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00f      	beq.n	8006e6c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e58:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e5e:	041b      	lsls	r3, r3, #16
 8006e60:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e64:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e66:	431a      	orrs	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d04e      	beq.n	8006f20 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	0419      	lsls	r1, r3, #16
 8006e8e:	4b67      	ldr	r3, [pc, #412]	@ (800702c <DMA_List_BuildNode+0x29c>)
 8006e90:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e92:	431a      	orrs	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	da06      	bge.n	8006eae <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	609a      	str	r2, [r3, #8]
 8006eac:	e005      	b.n	8006eba <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da06      	bge.n	8006ed0 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	609a      	str	r2, [r3, #8]
 8006ece:	e005      	b.n	8006edc <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	da06      	bge.n	8006ef2 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	609a      	str	r2, [r3, #8]
 8006ef0:	e005      	b.n	8006efe <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da06      	bge.n	8006f14 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	609a      	str	r2, [r3, #8]
 8006f12:	e005      	b.n	8006f20 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d059      	beq.n	8006ff0 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da09      	bge.n	8006f58 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f48:	425b      	negs	r3, r3
 8006f4a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	615a      	str	r2, [r3, #20]
 8006f56:	e005      	b.n	8006f64 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da0d      	bge.n	8006f88 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f70:	425b      	negs	r3, r3
 8006f72:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	695a      	ldr	r2, [r3, #20]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	0419      	lsls	r1, r3, #16
 8006f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8007030 <DMA_List_BuildNode+0x2a0>)
 8006f7e:	400b      	ands	r3, r1
 8006f80:	431a      	orrs	r2, r3
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	615a      	str	r2, [r3, #20]
 8006f86:	e009      	b.n	8006f9c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f90:	0419      	lsls	r1, r3, #16
 8006f92:	4b27      	ldr	r3, [pc, #156]	@ (8007030 <DMA_List_BuildNode+0x2a0>)
 8006f94:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f96:	431a      	orrs	r2, r3
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	da08      	bge.n	8006fb6 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa8:	425b      	negs	r3, r3
 8006faa:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	619a      	str	r2, [r3, #24]
 8006fb4:	e004      	b.n	8006fc0 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fba:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da0b      	bge.n	8006fe0 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fcc:	425b      	negs	r3, r3
 8006fce:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	619a      	str	r2, [r3, #24]
 8006fde:	e007      	b.n	8006ff0 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fea:	431a      	orrs	r2, r3
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d006      	beq.n	8007012 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007010:	e005      	b.n	800701e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	621a      	str	r2, [r3, #32]
}
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	07ff0000 	.word	0x07ff0000
 8007030:	1fff0000 	.word	0x1fff0000

08007034 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0208 	and.w	r2, r3, #8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0203 	and.w	r2, r3, #3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007082:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 800708c:	0d1b      	lsrs	r3, r3, #20
 800708e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007092:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4b66      	ldr	r3, [pc, #408]	@ (8007244 <DMA_List_GetNodeConfig+0x210>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070ce:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070d6:	60da      	str	r2, [r3, #12]
 80070d8:	e013      	b.n	8007102 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	e002      	b.n	8007102 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800712a:	0c1b      	lsrs	r3, r3, #16
 800712c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d008      	beq.n	8007168 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	0c1b      	lsrs	r3, r3, #16
 800715c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007160:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007166:	e002      	b.n	800716e <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d04a      	beq.n	8007220 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007194:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007196:	89fa      	ldrh	r2, [r7, #14]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	0c1b      	lsrs	r3, r3, #16
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071a8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80071aa:	89fa      	ldrh	r2, [r7, #14]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c0:	425a      	negs	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d004      	beq.n	80071dc <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d6:	425a      	negs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80071e2:	89fa      	ldrh	r2, [r7, #14]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	0c1b      	lsrs	r3, r3, #16
 80071ee:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80071f0:	89fa      	ldrh	r2, [r7, #14]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007206:	425a      	negs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	da11      	bge.n	8007238 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007218:	425a      	negs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800721e:	e00b      	b.n	8007238 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007238:	bf00      	nop
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	0c002000 	.word	0x0c002000

08007248 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4313      	orrs	r3, r2
 800725e:	0c1b      	lsrs	r3, r3, #16
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	e00a      	b.n	800728a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	e004      	b.n	800728a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	0c1b      	lsrs	r3, r3, #16
 800728e:	041b      	lsls	r3, r3, #16
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	429a      	cmp	r2, r3
 8007294:	d001      	beq.n	800729a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	e00e      	b.n	80072e6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	e006      	b.n	80072e6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d007      	beq.n	80072fc <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d001      	beq.n	80072fc <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80072f8:	2302      	movs	r3, #2
 80072fa:	e00b      	b.n	8007314 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	429a      	cmp	r2, r3
 800730c:	d001      	beq.n	8007312 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800730e:	2303      	movs	r3, #3
 8007310:	e000      	b.n	8007314 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00c      	beq.n	8007352 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4a0d      	ldr	r2, [pc, #52]	@ (8007378 <DMA_List_GetCLLRNodeInfo+0x58>)
 8007342:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00f      	beq.n	800736a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2207      	movs	r2, #7
 800734e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007350:	e00b      	b.n	800736a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4a08      	ldr	r2, [pc, #32]	@ (800737c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800735c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2205      	movs	r2, #5
 8007368:	601a      	str	r2, [r3, #0]
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	fe010000 	.word	0xfe010000
 800737c:	f8010000 	.word	0xf8010000

08007380 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	@ 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d142      	bne.n	800742a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80073a4:	e01d      	b.n	80073e2 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d107      	bne.n	80073bc <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073b6:	4013      	ands	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	e00f      	b.n	80073dc <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	4413      	add	r3, r2
 80073cc:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073d4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073d8:	4013      	ands	r3, r2
 80073da:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	3301      	adds	r3, #1
 80073e0:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d3dc      	bcc.n	80073a6 <DMA_List_FindNode+0x26>
 80073ec:	e029      	b.n	8007442 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d107      	bne.n	8007404 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073fe:	4013      	ands	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	e00f      	b.n	8007424 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	4413      	add	r3, r2
 8007414:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800741c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007420:	4013      	ands	r3, r2
 8007422:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	3301      	adds	r3, #1
 8007428:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	429a      	cmp	r2, r3
 8007432:	d206      	bcs.n	8007442 <DMA_List_FindNode+0xc2>
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800743a:	4013      	ands	r3, r2
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	429a      	cmp	r2, r3
 8007440:	d1d5      	bne.n	80073ee <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d008      	beq.n	800745a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800744e:	4013      	ands	r3, r2
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	429a      	cmp	r2, r3
 8007454:	d001      	beq.n	800745a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007456:	2301      	movs	r3, #1
 8007458:	e02b      	b.n	80074b2 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	0c1b      	lsrs	r3, r3, #16
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	0c1b      	lsrs	r3, r3, #16
 8007476:	041b      	lsls	r3, r3, #16
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	461a      	mov	r2, r3
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00f      	beq.n	80074b0 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	461a      	mov	r2, r3
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80074a0:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	0c1b      	lsrs	r3, r3, #16
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3724      	adds	r7, #36	@ 0x24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
	...

080074c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b089      	sub	sp, #36	@ 0x24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80074d2:	e1ba      	b.n	800784a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	2101      	movs	r1, #1
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	fa01 f303 	lsl.w	r3, r1, r3
 80074e0:	4013      	ands	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 81aa 	beq.w	8007844 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a55      	ldr	r2, [pc, #340]	@ (8007648 <HAL_GPIO_Init+0x188>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d15d      	bne.n	80075b4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80074fe:	2201      	movs	r2, #1
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	43db      	mvns	r3, r3
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	4013      	ands	r3, r2
 800750c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f003 0201 	and.w	r2, r3, #1
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	4313      	orrs	r3, r2
 8007520:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007528:	4a48      	ldr	r2, [pc, #288]	@ (800764c <HAL_GPIO_Init+0x18c>)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007530:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007532:	4a46      	ldr	r2, [pc, #280]	@ (800764c <HAL_GPIO_Init+0x18c>)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	4413      	add	r3, r2
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	08da      	lsrs	r2, r3, #3
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3208      	adds	r2, #8
 8007546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	220f      	movs	r2, #15
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	43db      	mvns	r3, r3
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	4013      	ands	r3, r2
 8007560:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	220b      	movs	r2, #11
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	4313      	orrs	r3, r2
 8007574:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	08da      	lsrs	r2, r3, #3
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	3208      	adds	r2, #8
 800757e:	69f9      	ldr	r1, [r7, #28]
 8007580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	2203      	movs	r2, #3
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	43db      	mvns	r3, r3
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	4013      	ands	r3, r2
 800759a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	2202      	movs	r2, #2
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e067      	b.n	8007684 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d003      	beq.n	80075c4 <HAL_GPIO_Init+0x104>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b12      	cmp	r3, #18
 80075c2:	d145      	bne.n	8007650 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	08da      	lsrs	r2, r3, #3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3208      	adds	r2, #8
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	220f      	movs	r2, #15
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	43db      	mvns	r3, r3
 80075e2:	69fa      	ldr	r2, [r7, #28]
 80075e4:	4013      	ands	r3, r2
 80075e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f003 020f 	and.w	r2, r3, #15
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	4313      	orrs	r3, r2
 8007600:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	08da      	lsrs	r2, r3, #3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3208      	adds	r2, #8
 800760a:	69f9      	ldr	r1, [r7, #28]
 800760c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	2203      	movs	r2, #3
 800761c:	fa02 f303 	lsl.w	r3, r2, r3
 8007620:	43db      	mvns	r3, r3
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	4013      	ands	r3, r2
 8007626:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 0203 	and.w	r2, r3, #3
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	69fa      	ldr	r2, [r7, #28]
 800763a:	4313      	orrs	r3, r2
 800763c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e01e      	b.n	8007684 <HAL_GPIO_Init+0x1c4>
 8007646:	bf00      	nop
 8007648:	46020000 	.word	0x46020000
 800764c:	08011628 	.word	0x08011628
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	2203      	movs	r2, #3
 800765c:	fa02 f303 	lsl.w	r3, r2, r3
 8007660:	43db      	mvns	r3, r3
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	4013      	ands	r3, r2
 8007666:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 0203 	and.w	r2, r3, #3
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	4313      	orrs	r3, r2
 800767c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d00b      	beq.n	80076a4 <HAL_GPIO_Init+0x1e4>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2b02      	cmp	r3, #2
 8007692:	d007      	beq.n	80076a4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007698:	2b11      	cmp	r3, #17
 800769a:	d003      	beq.n	80076a4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b12      	cmp	r3, #18
 80076a2:	d130      	bne.n	8007706 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	2203      	movs	r2, #3
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	43db      	mvns	r3, r3
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	4013      	ands	r3, r2
 80076ba:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	fa02 f303 	lsl.w	r3, r2, r3
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80076da:	2201      	movs	r2, #1
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	091b      	lsrs	r3, r3, #4
 80076f0:	f003 0201 	and.w	r2, r3, #1
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	69fa      	ldr	r2, [r7, #28]
 8007704:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b03      	cmp	r3, #3
 800770c:	d017      	beq.n	800773e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	2203      	movs	r2, #3
 800771a:	fa02 f303 	lsl.w	r3, r2, r3
 800771e:	43db      	mvns	r3, r3
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	4013      	ands	r3, r2
 8007724:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	fa02 f303 	lsl.w	r3, r2, r3
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	4313      	orrs	r3, r2
 8007736:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d07c      	beq.n	8007844 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800774a:	4a47      	ldr	r2, [pc, #284]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	089b      	lsrs	r3, r3, #2
 8007750:	3318      	adds	r3, #24
 8007752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007756:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	220f      	movs	r2, #15
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	43db      	mvns	r3, r3
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	4013      	ands	r3, r2
 800776c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	0a9a      	lsrs	r2, r3, #10
 8007772:	4b3e      	ldr	r3, [pc, #248]	@ (800786c <HAL_GPIO_Init+0x3ac>)
 8007774:	4013      	ands	r3, r2
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	f002 0203 	and.w	r2, r2, #3
 800777c:	00d2      	lsls	r2, r2, #3
 800777e:	4093      	lsls	r3, r2
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	4313      	orrs	r3, r2
 8007784:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007786:	4938      	ldr	r1, [pc, #224]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	089b      	lsrs	r3, r3, #2
 800778c:	3318      	adds	r3, #24
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007794:	4b34      	ldr	r3, [pc, #208]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	43db      	mvns	r3, r3
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	4013      	ands	r3, r2
 80077a2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80077b0:	69fa      	ldr	r2, [r7, #28]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80077b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80077be:	4b2a      	ldr	r3, [pc, #168]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	43db      	mvns	r3, r3
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	4013      	ands	r3, r2
 80077cc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80077e2:	4a21      	ldr	r2, [pc, #132]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80077e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 80077ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	43db      	mvns	r3, r3
 80077f4:	69fa      	ldr	r2, [r7, #28]
 80077f6:	4013      	ands	r3, r2
 80077f8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800780e:	4a16      	ldr	r2, [pc, #88]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8007816:	4b14      	ldr	r3, [pc, #80]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 8007818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800781c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	43db      	mvns	r3, r3
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	4013      	ands	r3, r2
 8007826:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4313      	orrs	r3, r2
 800783a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800783c:	4a0a      	ldr	r2, [pc, #40]	@ (8007868 <HAL_GPIO_Init+0x3a8>)
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	3301      	adds	r3, #1
 8007848:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	f47f ae3d 	bne.w	80074d4 <HAL_GPIO_Init+0x14>
  }
}
 800785a:	bf00      	nop
 800785c:	bf00      	nop
 800785e:	3724      	adds	r7, #36	@ 0x24
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	46022000 	.word	0x46022000
 800786c:	002f7f7f 	.word	0x002f7f7f

08007870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	807b      	strh	r3, [r7, #2]
 800787c:	4613      	mov	r3, r2
 800787e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007880:	787b      	ldrb	r3, [r7, #1]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007886:	887a      	ldrh	r2, [r7, #2]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800788c:	e002      	b.n	8007894 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800788e:	887a      	ldrh	r2, [r7, #2]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80078aa:	4b0f      	ldr	r3, [pc, #60]	@ (80078e8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	88fb      	ldrh	r3, [r7, #6]
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d006      	beq.n	80078c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80078b6:	4a0c      	ldr	r2, [pc, #48]	@ (80078e8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80078bc:	88fb      	ldrh	r3, [r7, #6]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f814 	bl	80078ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80078c4:	4b08      	ldr	r3, [pc, #32]	@ (80078e8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	88fb      	ldrh	r3, [r7, #6]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d006      	beq.n	80078de <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80078d0:	4a05      	ldr	r2, [pc, #20]	@ (80078e8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 f812 	bl	8007902 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	46022000 	.word	0x46022000

080078ec <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	4603      	mov	r3, r0
 800790a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e08d      	b.n	8007a46 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7fa fa06 	bl	8001d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2224      	movs	r2, #36	@ 0x24
 8007948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0201 	bic.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007968:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007978:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d107      	bne.n	8007992 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800798e:	609a      	str	r2, [r3, #8]
 8007990:	e006      	b.n	80079a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800799e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d108      	bne.n	80079ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079b6:	605a      	str	r2, [r3, #4]
 80079b8:	e007      	b.n	80079ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6812      	ldr	r2, [r2, #0]
 80079d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691a      	ldr	r2, [r3, #16]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69d9      	ldr	r1, [r3, #28]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1a      	ldr	r2, [r3, #32]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	68f9      	ldr	r1, [r7, #12]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b086      	sub	sp, #24
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00f      	beq.n	8007ac4 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab2:	f043 0201 	orr.w	r2, r3, #1
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ac2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00f      	beq.n	8007aee <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007adc:	f043 0208 	orr.w	r2, r3, #8
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007aec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00f      	beq.n	8007b18 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b06:	f043 0202 	orr.w	r2, r3, #2
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b16:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f003 030b 	and.w	r3, r3, #11
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007b28:	68f9      	ldr	r1, [r7, #12]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fbe8 	bl	8008300 <I2C_ITError>
  }
}
 8007b30:	bf00      	nop
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <I2C_Slave_ISR_IT+0x24>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e0e2      	b.n	8007da2 <I2C_Slave_ISR_IT+0x1ea>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d009      	beq.n	8007c02 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d004      	beq.n	8007c02 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007bf8:	6939      	ldr	r1, [r7, #16]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f9b6 	bl	8007f6c <I2C_ITSlaveCplt>
 8007c00:	e0ca      	b.n	8007d98 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f003 0310 	and.w	r3, r3, #16
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d04b      	beq.n	8007ca4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d046      	beq.n	8007ca4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d128      	bne.n	8007c72 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b28      	cmp	r3, #40	@ 0x28
 8007c2a:	d108      	bne.n	8007c3e <I2C_Slave_ISR_IT+0x86>
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c32:	d104      	bne.n	8007c3e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007c34:	6939      	ldr	r1, [r7, #16]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fb0e 	bl	8008258 <I2C_ITListenCplt>
 8007c3c:	e031      	b.n	8007ca2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b29      	cmp	r3, #41	@ 0x29
 8007c48:	d10e      	bne.n	8007c68 <I2C_Slave_ISR_IT+0xb0>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007c50:	d00a      	beq.n	8007c68 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2210      	movs	r2, #16
 8007c58:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fc67 	bl	800852e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f926 	bl	8007eb2 <I2C_ITSlaveSeqCplt>
 8007c66:	e01c      	b.n	8007ca2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2210      	movs	r2, #16
 8007c6e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007c70:	e08f      	b.n	8007d92 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2210      	movs	r2, #16
 8007c78:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7e:	f043 0204 	orr.w	r2, r3, #4
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <I2C_Slave_ISR_IT+0xdc>
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c92:	d17e      	bne.n	8007d92 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c98:	4619      	mov	r1, r3
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fb30 	bl	8008300 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007ca0:	e077      	b.n	8007d92 <I2C_Slave_ISR_IT+0x1da>
 8007ca2:	e076      	b.n	8007d92 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02f      	beq.n	8007d0e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d02a      	beq.n	8007d0e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d018      	beq.n	8007cf4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ccc:	b2d2      	uxtb	r2, r2
 8007cce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d14b      	bne.n	8007d96 <I2C_Slave_ISR_IT+0x1de>
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d04:	d047      	beq.n	8007d96 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 f8d3 	bl	8007eb2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007d0c:	e043      	b.n	8007d96 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d004      	beq.n	8007d2c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007d22:	6939      	ldr	r1, [r7, #16]
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 f840 	bl	8007daa <I2C_ITAddrCplt>
 8007d2a:	e035      	b.n	8007d98 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d030      	beq.n	8007d98 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d02b      	beq.n	8007d98 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d018      	beq.n	8007d7c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4e:	781a      	ldrb	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007d7a:	e00d      	b.n	8007d98 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d82:	d002      	beq.n	8007d8a <I2C_Slave_ISR_IT+0x1d2>
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f891 	bl	8007eb2 <I2C_ITSlaveSeqCplt>
 8007d90:	e002      	b.n	8007d98 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007d92:	bf00      	nop
 8007d94:	e000      	b.n	8007d98 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007d96:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007dc0:	2b28      	cmp	r3, #40	@ 0x28
 8007dc2:	d16a      	bne.n	8007e9a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	0c1b      	lsrs	r3, r3, #16
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007de2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007df0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007dfe:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d138      	bne.n	8007e7a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007e08:	897b      	ldrh	r3, [r7, #10]
 8007e0a:	09db      	lsrs	r3, r3, #7
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	89bb      	ldrh	r3, [r7, #12]
 8007e10:	4053      	eors	r3, r2
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f003 0306 	and.w	r3, r3, #6
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d11c      	bne.n	8007e56 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007e1c:	897b      	ldrh	r3, [r7, #10]
 8007e1e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d13b      	bne.n	8007eaa <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e48:	89ba      	ldrh	r2, [r7, #12]
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fe86 	bl	8007b60 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007e54:	e029      	b.n	8007eaa <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007e56:	893b      	ldrh	r3, [r7, #8]
 8007e58:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fba7 	bl	80085b2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e6c:	89ba      	ldrh	r2, [r7, #12]
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff fe74 	bl	8007b60 <HAL_I2C_AddrCallback>
}
 8007e78:	e017      	b.n	8007eaa <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fb97 	bl	80085b2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e8c:	89ba      	ldrh	r2, [r7, #12]
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff fe64 	bl	8007b60 <HAL_I2C_AddrCallback>
}
 8007e98:	e007      	b.n	8007eaa <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d008      	beq.n	8007ee6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	e00c      	b.n	8007f00 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d007      	beq.n	8007f00 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007efe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b29      	cmp	r3, #41	@ 0x29
 8007f0a:	d112      	bne.n	8007f32 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2228      	movs	r2, #40	@ 0x28
 8007f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2221      	movs	r2, #33	@ 0x21
 8007f18:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fb48 	bl	80085b2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff fe04 	bl	8007b38 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f30:	e017      	b.n	8007f62 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f3c:	d111      	bne.n	8007f62 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2228      	movs	r2, #40	@ 0x28
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2222      	movs	r2, #34	@ 0x22
 8007f4a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fb2f 	bl	80085b2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff fdf5 	bl	8007b4c <HAL_I2C_SlaveRxCpltCallback>
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f6c:	b590      	push	{r4, r7, lr}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f86:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f8e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2220      	movs	r2, #32
 8007f96:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f98:	7afb      	ldrb	r3, [r7, #11]
 8007f9a:	2b21      	cmp	r3, #33	@ 0x21
 8007f9c:	d002      	beq.n	8007fa4 <I2C_ITSlaveCplt+0x38>
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	2b29      	cmp	r3, #41	@ 0x29
 8007fa2:	d108      	bne.n	8007fb6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007fa4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fb02 	bl	80085b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2221      	movs	r2, #33	@ 0x21
 8007fb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fb4:	e019      	b.n	8007fea <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	2b22      	cmp	r3, #34	@ 0x22
 8007fba:	d002      	beq.n	8007fc2 <I2C_ITSlaveCplt+0x56>
 8007fbc:	7afb      	ldrb	r3, [r7, #11]
 8007fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fc0:	d108      	bne.n	8007fd4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007fc2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 faf3 	bl	80085b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2222      	movs	r2, #34	@ 0x22
 8007fd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fd2:	e00a      	b.n	8007fea <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	2b28      	cmp	r3, #40	@ 0x28
 8007fd8:	d107      	bne.n	8007fea <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007fda:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fae7 	bl	80085b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ff8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6859      	ldr	r1, [r3, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4b92      	ldr	r3, [pc, #584]	@ (8008250 <I2C_ITSlaveCplt+0x2e4>)
 8008006:	400b      	ands	r3, r1
 8008008:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa8f 	bl	800852e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d01c      	beq.n	8008054 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008028:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802e:	2b00      	cmp	r3, #0
 8008030:	d031      	beq.n	8008096 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803a:	b29c      	uxth	r4, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008040:	4618      	mov	r0, r3
 8008042:	f7fe fd3d 	bl	8006ac0 <HAL_DMAEx_GetFifoLevel>
 8008046:	4603      	mov	r3, r0
 8008048:	b29b      	uxth	r3, r3
 800804a:	4423      	add	r3, r4
 800804c:	b29a      	uxth	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008052:	e020      	b.n	8008096 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d01b      	beq.n	8008096 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800806c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00f      	beq.n	8008096 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800807e:	b29c      	uxth	r4, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe fd1b 	bl	8006ac0 <HAL_DMAEx_GetFifoLevel>
 800808a:	4603      	mov	r3, r0
 800808c:	b29b      	uxth	r3, r3
 800808e:	4423      	add	r3, r4
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d020      	beq.n	80080e2 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f023 0304 	bic.w	r3, r3, #4
 80080a6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00c      	beq.n	80080e2 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080cc:	3b01      	subs	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d005      	beq.n	80080f8 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f0:	f043 0204 	orr.w	r2, r3, #4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d049      	beq.n	8008196 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008108:	2b00      	cmp	r3, #0
 800810a:	d044      	beq.n	8008196 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008110:	b29b      	uxth	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d128      	bne.n	8008168 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b28      	cmp	r3, #40	@ 0x28
 8008120:	d108      	bne.n	8008134 <I2C_ITSlaveCplt+0x1c8>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008128:	d104      	bne.n	8008134 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800812a:	6979      	ldr	r1, [r7, #20]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f893 	bl	8008258 <I2C_ITListenCplt>
 8008132:	e030      	b.n	8008196 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b29      	cmp	r3, #41	@ 0x29
 800813e:	d10e      	bne.n	800815e <I2C_ITSlaveCplt+0x1f2>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008146:	d00a      	beq.n	800815e <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2210      	movs	r2, #16
 800814e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f9ec 	bl	800852e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff feab 	bl	8007eb2 <I2C_ITSlaveSeqCplt>
 800815c:	e01b      	b.n	8008196 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2210      	movs	r2, #16
 8008164:	61da      	str	r2, [r3, #28]
 8008166:	e016      	b.n	8008196 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2210      	movs	r2, #16
 800816e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008174:	f043 0204 	orr.w	r2, r3, #4
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <I2C_ITSlaveCplt+0x21e>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008188:	d105      	bne.n	8008196 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f8b5 	bl	8008300 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d010      	beq.n	80081ce <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f8a4 	bl	8008300 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b28      	cmp	r3, #40	@ 0x28
 80081c2:	d141      	bne.n	8008248 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80081c4:	6979      	ldr	r1, [r7, #20]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f846 	bl	8008258 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081cc:	e03c      	b.n	8008248 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80081d6:	d014      	beq.n	8008202 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff fe6a 	bl	8007eb2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008254 <I2C_ITSlaveCplt+0x2e8>)
 80081e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff fcbe 	bl	8007b7c <HAL_I2C_ListenCpltCallback>
}
 8008200:	e022      	b.n	8008248 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b22      	cmp	r3, #34	@ 0x22
 800820c:	d10e      	bne.n	800822c <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff fc91 	bl	8007b4c <HAL_I2C_SlaveRxCpltCallback>
}
 800822a:	e00d      	b.n	8008248 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7ff fc78 	bl	8007b38 <HAL_I2C_SlaveTxCpltCallback>
}
 8008248:	bf00      	nop
 800824a:	371c      	adds	r7, #28
 800824c:	46bd      	mov	sp, r7
 800824e:	bd90      	pop	{r4, r7, pc}
 8008250:	fe00e800 	.word	0xfe00e800
 8008254:	ffff0000 	.word	0xffff0000

08008258 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a25      	ldr	r2, [pc, #148]	@ (80082fc <I2C_ITListenCplt+0xa4>)
 8008266:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d022      	beq.n	80082d4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d012      	beq.n	80082d4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082cc:	f043 0204 	orr.w	r2, r3, #4
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80082d4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f96a 	bl	80085b2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2210      	movs	r2, #16
 80082e4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff fc44 	bl	8007b7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	ffff0000 	.word	0xffff0000

08008300 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008310:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a6d      	ldr	r2, [pc, #436]	@ (80084d4 <I2C_ITError+0x1d4>)
 800831e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	431a      	orrs	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	2b28      	cmp	r3, #40	@ 0x28
 8008336:	d005      	beq.n	8008344 <I2C_ITError+0x44>
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b29      	cmp	r3, #41	@ 0x29
 800833c:	d002      	beq.n	8008344 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b2a      	cmp	r3, #42	@ 0x2a
 8008342:	d10b      	bne.n	800835c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008344:	2103      	movs	r1, #3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f933 	bl	80085b2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2228      	movs	r2, #40	@ 0x28
 8008350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a60      	ldr	r2, [pc, #384]	@ (80084d8 <I2C_ITError+0x1d8>)
 8008358:	635a      	str	r2, [r3, #52]	@ 0x34
 800835a:	e030      	b.n	80083be <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800835c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f926 	bl	80085b2 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f8e1 	bl	800852e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b60      	cmp	r3, #96	@ 0x60
 8008376:	d01f      	beq.n	80083b8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2220      	movs	r2, #32
 800837c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b20      	cmp	r3, #32
 800838c:	d114      	bne.n	80083b8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b10      	cmp	r3, #16
 800839a:	d109      	bne.n	80083b0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2210      	movs	r2, #16
 80083a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a8:	f043 0204 	orr.w	r2, r3, #4
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2220      	movs	r2, #32
 80083b6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d039      	beq.n	8008440 <I2C_ITError+0x140>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b11      	cmp	r3, #17
 80083d0:	d002      	beq.n	80083d8 <I2C_ITError+0xd8>
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2b21      	cmp	r3, #33	@ 0x21
 80083d6:	d133      	bne.n	8008440 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083e6:	d107      	bne.n	80083f8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80083f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fd fbb3 	bl	8005b68 <HAL_DMA_GetState>
 8008402:	4603      	mov	r3, r0
 8008404:	2b01      	cmp	r3, #1
 8008406:	d017      	beq.n	8008438 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840c:	4a33      	ldr	r2, [pc, #204]	@ (80084dc <I2C_ITError+0x1dc>)
 800840e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841c:	4618      	mov	r0, r3
 800841e:	f7fd fa19 	bl	8005854 <HAL_DMA_Abort_IT>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d04d      	beq.n	80084c4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008432:	4610      	mov	r0, r2
 8008434:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008436:	e045      	b.n	80084c4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f851 	bl	80084e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800843e:	e041      	b.n	80084c4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d039      	beq.n	80084bc <I2C_ITError+0x1bc>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b12      	cmp	r3, #18
 800844c:	d002      	beq.n	8008454 <I2C_ITError+0x154>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b22      	cmp	r3, #34	@ 0x22
 8008452:	d133      	bne.n	80084bc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800845e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008462:	d107      	bne.n	8008474 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008472:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008478:	4618      	mov	r0, r3
 800847a:	f7fd fb75 	bl	8005b68 <HAL_DMA_GetState>
 800847e:	4603      	mov	r3, r0
 8008480:	2b01      	cmp	r3, #1
 8008482:	d017      	beq.n	80084b4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008488:	4a14      	ldr	r2, [pc, #80]	@ (80084dc <I2C_ITError+0x1dc>)
 800848a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008498:	4618      	mov	r0, r3
 800849a:	f7fd f9db 	bl	8005854 <HAL_DMA_Abort_IT>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d011      	beq.n	80084c8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80084ae:	4610      	mov	r0, r2
 80084b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084b2:	e009      	b.n	80084c8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f813 	bl	80084e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084ba:	e005      	b.n	80084c8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f80f 	bl	80084e0 <I2C_TreatErrorCallback>
  }
}
 80084c2:	e002      	b.n	80084ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80084c4:	bf00      	nop
 80084c6:	e000      	b.n	80084ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084c8:	bf00      	nop
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	ffff0000 	.word	0xffff0000
 80084d8:	08007bb9 	.word	0x08007bb9
 80084dc:	08008577 	.word	0x08008577

080084e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b60      	cmp	r3, #96	@ 0x60
 80084f2:	d10e      	bne.n	8008512 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7ff fb4a 	bl	8007ba4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008510:	e009      	b.n	8008526 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff fb35 	bl	8007b90 <HAL_I2C_ErrorCallback>
}
 8008526:	bf00      	nop
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b02      	cmp	r3, #2
 8008542:	d103      	bne.n	800854c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2200      	movs	r2, #0
 800854a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b01      	cmp	r3, #1
 8008558:	d007      	beq.n	800856a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	699a      	ldr	r2, [r3, #24]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0201 	orr.w	r2, r2, #1
 8008568:	619a      	str	r2, [r3, #24]
  }
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008582:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008590:	2200      	movs	r2, #0
 8008592:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a0:	2200      	movs	r2, #0
 80085a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff ff9b 	bl	80084e0 <I2C_TreatErrorCallback>
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b085      	sub	sp, #20
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80085c2:	887b      	ldrh	r3, [r7, #2]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00f      	beq.n	80085ec <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80085d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085e0:	2b28      	cmp	r3, #40	@ 0x28
 80085e2:	d003      	beq.n	80085ec <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80085ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80085ec:	887b      	ldrh	r3, [r7, #2]
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00f      	beq.n	8008616 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80085fc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800860a:	2b28      	cmp	r3, #40	@ 0x28
 800860c:	d003      	beq.n	8008616 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008614:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008616:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800861a:	2b00      	cmp	r3, #0
 800861c:	da03      	bge.n	8008626 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008624:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008626:	887b      	ldrh	r3, [r7, #2]
 8008628:	2b10      	cmp	r3, #16
 800862a:	d103      	bne.n	8008634 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008632:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008634:	887b      	ldrh	r3, [r7, #2]
 8008636:	2b20      	cmp	r3, #32
 8008638:	d103      	bne.n	8008642 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f043 0320 	orr.w	r3, r3, #32
 8008640:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008642:	887b      	ldrh	r3, [r7, #2]
 8008644:	2b40      	cmp	r3, #64	@ 0x40
 8008646:	d103      	bne.n	8008650 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800864e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6819      	ldr	r1, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	43da      	mvns	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	400a      	ands	r2, r1
 8008660:	601a      	str	r2, [r3, #0]
}
 8008662:	bf00      	nop
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b20      	cmp	r3, #32
 8008682:	d138      	bne.n	80086f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800868e:	2302      	movs	r3, #2
 8008690:	e032      	b.n	80086f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2224      	movs	r2, #36	@ 0x24
 800869e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0201 	bic.w	r2, r2, #1
 80086b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6819      	ldr	r1, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0201 	orr.w	r2, r2, #1
 80086e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	e000      	b.n	80086f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80086f6:	2302      	movs	r3, #2
  }
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b20      	cmp	r3, #32
 8008718:	d139      	bne.n	800878e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008724:	2302      	movs	r3, #2
 8008726:	e033      	b.n	8008790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2224      	movs	r2, #36	@ 0x24
 8008734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0201 	bic.w	r2, r2, #1
 8008746:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008756:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	021b      	lsls	r3, r3, #8
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f042 0201 	orr.w	r2, r2, #1
 8008778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	e000      	b.n	8008790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800878e:	2302      	movs	r3, #2
  }
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80087a8:	4b0b      	ldr	r3, [pc, #44]	@ (80087d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	73fb      	strb	r3, [r7, #15]
 80087b8:	e007      	b.n	80087ca <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80087ba:	4b07      	ldr	r3, [pc, #28]	@ (80087d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f023 0204 	bic.w	r2, r3, #4
 80087c2:	4905      	ldr	r1, [pc, #20]	@ (80087d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	40030400 	.word	0x40030400

080087dc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80087e0:	4b05      	ldr	r3, [pc, #20]	@ (80087f8 <HAL_ICACHE_Enable+0x1c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a04      	ldr	r2, [pc, #16]	@ (80087f8 <HAL_ICACHE_Enable+0x1c>)
 80087e6:	f043 0301 	orr.w	r3, r3, #1
 80087ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40030400 	.word	0x40030400

080087fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e0bf      	b.n	800898e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7f9 fb82 	bl	8001f2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699a      	ldr	r2, [r3, #24]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800883e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6999      	ldr	r1, [r3, #24]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008854:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6899      	ldr	r1, [r3, #8]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b4a      	ldr	r3, [pc, #296]	@ (8008998 <HAL_LTDC_Init+0x19c>)
 8008870:	400b      	ands	r3, r1
 8008872:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	041b      	lsls	r3, r3, #16
 800887a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6899      	ldr	r1, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68d9      	ldr	r1, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	4b3e      	ldr	r3, [pc, #248]	@ (8008998 <HAL_LTDC_Init+0x19c>)
 800889e:	400b      	ands	r3, r1
 80088a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	041b      	lsls	r3, r3, #16
 80088a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68d9      	ldr	r1, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a1a      	ldr	r2, [r3, #32]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6919      	ldr	r1, [r3, #16]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4b33      	ldr	r3, [pc, #204]	@ (8008998 <HAL_LTDC_Init+0x19c>)
 80088cc:	400b      	ands	r3, r1
 80088ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d4:	041b      	lsls	r3, r3, #16
 80088d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6919      	ldr	r1, [r3, #16]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	431a      	orrs	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6959      	ldr	r1, [r3, #20]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4b27      	ldr	r3, [pc, #156]	@ (8008998 <HAL_LTDC_Init+0x19c>)
 80088fa:	400b      	ands	r3, r1
 80088fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	041b      	lsls	r3, r3, #16
 8008904:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6959      	ldr	r1, [r3, #20]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008922:	021b      	lsls	r3, r3, #8
 8008924:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800892c:	041b      	lsls	r3, r3, #16
 800892e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800893e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4313      	orrs	r3, r2
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0206 	orr.w	r2, r2, #6
 800896a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	f000f800 	.word	0xf000f800

0800899c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f003 0304 	and.w	r3, r3, #4
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d023      	beq.n	8008a06 <HAL_LTDC_IRQHandler+0x6a>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01e      	beq.n	8008a06 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0204 	bic.w	r2, r2, #4
 80089d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2204      	movs	r2, #4
 80089de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089e6:	f043 0201 	orr.w	r2, r3, #1
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2204      	movs	r2, #4
 80089f4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f86f 	bl	8008ae4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d023      	beq.n	8008a58 <HAL_LTDC_IRQHandler+0xbc>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01e      	beq.n	8008a58 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0202 	bic.w	r2, r2, #2
 8008a28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a38:	f043 0202 	orr.w	r2, r3, #2
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2204      	movs	r2, #4
 8008a46:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f846 	bl	8008ae4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d01b      	beq.n	8008a9a <HAL_LTDC_IRQHandler+0xfe>
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d016      	beq.n	8008a9a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0201 	bic.w	r2, r2, #1
 8008a7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2201      	movs	r2, #1
 8008a82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f82f 	bl	8008af8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01b      	beq.n	8008adc <HAL_LTDC_IRQHandler+0x140>
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f003 0308 	and.w	r3, r3, #8
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d016      	beq.n	8008adc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0208 	bic.w	r2, r2, #8
 8008abc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2208      	movs	r2, #8
 8008ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f818 	bl	8008b0c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008adc:	bf00      	nop
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008b20:	b5b0      	push	{r4, r5, r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d101      	bne.n	8008b3a <HAL_LTDC_ConfigLayer+0x1a>
 8008b36:	2302      	movs	r3, #2
 8008b38:	e02c      	b.n	8008b94 <HAL_LTDC_ConfigLayer+0x74>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2202      	movs	r2, #2
 8008b46:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2134      	movs	r1, #52	@ 0x34
 8008b50:	fb01 f303 	mul.w	r3, r1, r3
 8008b54:	4413      	add	r3, r2
 8008b56:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	461d      	mov	r5, r3
 8008b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	68b9      	ldr	r1, [r7, #8]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f811 	bl	8008b9c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bdb0      	pop	{r4, r5, r7, pc}

08008b9c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b089      	sub	sp, #36	@ 0x24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	0c1b      	lsrs	r3, r3, #16
 8008bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bb8:	4413      	add	r3, r2
 8008bba:	041b      	lsls	r3, r3, #16
 8008bbc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	01db      	lsls	r3, r3, #7
 8008bc8:	4413      	add	r3, r2
 8008bca:	3384      	adds	r3, #132	@ 0x84
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	01d2      	lsls	r2, r2, #7
 8008bd8:	440a      	add	r2, r1
 8008bda:	3284      	adds	r2, #132	@ 0x84
 8008bdc:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008be0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	0c1b      	lsrs	r3, r3, #16
 8008bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008bf2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008bf4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	01db      	lsls	r3, r3, #7
 8008c00:	440b      	add	r3, r1
 8008c02:	3384      	adds	r3, #132	@ 0x84
 8008c04:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008c0a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c1a:	4413      	add	r3, r2
 8008c1c:	041b      	lsls	r3, r3, #16
 8008c1e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	01db      	lsls	r3, r3, #7
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3384      	adds	r3, #132	@ 0x84
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	6812      	ldr	r2, [r2, #0]
 8008c34:	4611      	mov	r1, r2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	01d2      	lsls	r2, r2, #7
 8008c3a:	440a      	add	r2, r1
 8008c3c:	3284      	adds	r2, #132	@ 0x84
 8008c3e:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008c42:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c52:	4413      	add	r3, r2
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	01db      	lsls	r3, r3, #7
 8008c60:	440b      	add	r3, r1
 8008c62:	3384      	adds	r3, #132	@ 0x84
 8008c64:	4619      	mov	r1, r3
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	461a      	mov	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	01db      	lsls	r3, r3, #7
 8008c76:	4413      	add	r3, r2
 8008c78:	3384      	adds	r3, #132	@ 0x84
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	6812      	ldr	r2, [r2, #0]
 8008c80:	4611      	mov	r1, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	01d2      	lsls	r2, r2, #7
 8008c86:	440a      	add	r2, r1
 8008c88:	3284      	adds	r2, #132	@ 0x84
 8008c8a:	f023 0307 	bic.w	r3, r3, #7
 8008c8e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	01db      	lsls	r3, r3, #7
 8008c9a:	4413      	add	r3, r2
 8008c9c:	3384      	adds	r3, #132	@ 0x84
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008cb6:	041b      	lsls	r3, r3, #16
 8008cb8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cc8:	461a      	mov	r2, r3
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	01db      	lsls	r3, r3, #7
 8008cdc:	440b      	add	r3, r1
 8008cde:	3384      	adds	r3, #132	@ 0x84
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	01db      	lsls	r3, r3, #7
 8008cf2:	4413      	add	r3, r2
 8008cf4:	3384      	adds	r3, #132	@ 0x84
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	6812      	ldr	r2, [r2, #0]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	01d2      	lsls	r2, r2, #7
 8008d02:	440a      	add	r2, r1
 8008d04:	3284      	adds	r2, #132	@ 0x84
 8008d06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008d0a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	01db      	lsls	r3, r3, #7
 8008d16:	4413      	add	r3, r2
 8008d18:	3384      	adds	r3, #132	@ 0x84
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	01db      	lsls	r3, r3, #7
 8008d2c:	4413      	add	r3, r2
 8008d2e:	3384      	adds	r3, #132	@ 0x84
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	6812      	ldr	r2, [r2, #0]
 8008d36:	4611      	mov	r1, r2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	01d2      	lsls	r2, r2, #7
 8008d3c:	440a      	add	r2, r1
 8008d3e:	3284      	adds	r2, #132	@ 0x84
 8008d40:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008d44:	f023 0307 	bic.w	r3, r3, #7
 8008d48:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	69da      	ldr	r2, [r3, #28]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	68f9      	ldr	r1, [r7, #12]
 8008d54:	6809      	ldr	r1, [r1, #0]
 8008d56:	4608      	mov	r0, r1
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	01c9      	lsls	r1, r1, #7
 8008d5c:	4401      	add	r1, r0
 8008d5e:	3184      	adds	r1, #132	@ 0x84
 8008d60:	4313      	orrs	r3, r2
 8008d62:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	01db      	lsls	r3, r3, #7
 8008d6e:	4413      	add	r3, r2
 8008d70:	3384      	adds	r3, #132	@ 0x84
 8008d72:	461a      	mov	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d78:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d102      	bne.n	8008d88 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8008d82:	2304      	movs	r3, #4
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	e01b      	b.n	8008dc0 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d102      	bne.n	8008d96 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8008d90:	2303      	movs	r3, #3
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e014      	b.n	8008dc0 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d00b      	beq.n	8008db6 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d007      	beq.n	8008db6 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d003      	beq.n	8008db6 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008db2:	2b07      	cmp	r3, #7
 8008db4:	d102      	bne.n	8008dbc <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8008db6:	2302      	movs	r3, #2
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	e001      	b.n	8008dc0 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	01db      	lsls	r3, r3, #7
 8008dca:	4413      	add	r3, r2
 8008dcc:	3384      	adds	r3, #132	@ 0x84
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	6812      	ldr	r2, [r2, #0]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	01d2      	lsls	r2, r2, #7
 8008dda:	440a      	add	r2, r1
 8008ddc:	3284      	adds	r2, #132	@ 0x84
 8008dde:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008de2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	fb02 f303 	mul.w	r3, r2, r3
 8008dee:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	6859      	ldr	r1, [r3, #4]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	1acb      	subs	r3, r1, r3
 8008dfa:	69f9      	ldr	r1, [r7, #28]
 8008dfc:	fb01 f303 	mul.w	r3, r1, r3
 8008e00:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008e02:	68f9      	ldr	r1, [r7, #12]
 8008e04:	6809      	ldr	r1, [r1, #0]
 8008e06:	4608      	mov	r0, r1
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	01c9      	lsls	r1, r1, #7
 8008e0c:	4401      	add	r1, r0
 8008e0e:	3184      	adds	r1, #132	@ 0x84
 8008e10:	4313      	orrs	r3, r2
 8008e12:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	01db      	lsls	r3, r3, #7
 8008e1e:	4413      	add	r3, r2
 8008e20:	3384      	adds	r3, #132	@ 0x84
 8008e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	6812      	ldr	r2, [r2, #0]
 8008e28:	4611      	mov	r1, r2
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	01d2      	lsls	r2, r2, #7
 8008e2e:	440a      	add	r2, r1
 8008e30:	3284      	adds	r2, #132	@ 0x84
 8008e32:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008e36:	f023 0307 	bic.w	r3, r3, #7
 8008e3a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	01db      	lsls	r3, r3, #7
 8008e46:	4413      	add	r3, r2
 8008e48:	3384      	adds	r3, #132	@ 0x84
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e50:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	01db      	lsls	r3, r3, #7
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3384      	adds	r3, #132	@ 0x84
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	6812      	ldr	r2, [r2, #0]
 8008e66:	4611      	mov	r1, r2
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	01d2      	lsls	r2, r2, #7
 8008e6c:	440a      	add	r2, r1
 8008e6e:	3284      	adds	r2, #132	@ 0x84
 8008e70:	f043 0301 	orr.w	r3, r3, #1
 8008e74:	6013      	str	r3, [r2, #0]
}
 8008e76:	bf00      	nop
 8008e78:	3724      	adds	r7, #36	@ 0x24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b086      	sub	sp, #24
 8008e86:	af02      	add	r7, sp, #8
 8008e88:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e0fe      	b.n	8009092 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d106      	bne.n	8008eae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7f9 fad9 	bl	8002460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2203      	movs	r2, #3
 8008eb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f008 f8a9 	bl	8011012 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	7c1a      	ldrb	r2, [r3, #16]
 8008ec8:	f88d 2000 	strb.w	r2, [sp]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ed0:	f008 f870 	bl	8010fb4 <USB_CoreInit>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2202      	movs	r2, #2
 8008ede:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e0d5      	b.n	8009092 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2100      	movs	r1, #0
 8008eec:	4618      	mov	r0, r3
 8008eee:	f008 f8a1 	bl	8011034 <USB_SetCurrentMode>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d005      	beq.n	8008f04 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e0c6      	b.n	8009092 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
 8008f08:	e04a      	b.n	8008fa0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008f0a:	7bfa      	ldrb	r2, [r7, #15]
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	3315      	adds	r3, #21
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008f1e:	7bfa      	ldrb	r2, [r7, #15]
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	3314      	adds	r3, #20
 8008f2e:	7bfa      	ldrb	r2, [r7, #15]
 8008f30:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008f32:	7bfa      	ldrb	r2, [r7, #15]
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	b298      	uxth	r0, r3
 8008f38:	6879      	ldr	r1, [r7, #4]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	440b      	add	r3, r1
 8008f44:	332e      	adds	r3, #46	@ 0x2e
 8008f46:	4602      	mov	r2, r0
 8008f48:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008f4a:	7bfa      	ldrb	r2, [r7, #15]
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	3318      	adds	r3, #24
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008f5e:	7bfa      	ldrb	r2, [r7, #15]
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	331c      	adds	r3, #28
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008f72:	7bfa      	ldrb	r2, [r7, #15]
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4613      	mov	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	440b      	add	r3, r1
 8008f80:	3320      	adds	r3, #32
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008f86:	7bfa      	ldrb	r2, [r7, #15]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	3324      	adds	r3, #36	@ 0x24
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	73fb      	strb	r3, [r7, #15]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	791b      	ldrb	r3, [r3, #4]
 8008fa4:	7bfa      	ldrb	r2, [r7, #15]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d3af      	bcc.n	8008f0a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
 8008fae:	e044      	b.n	800903a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008fb0:	7bfa      	ldrb	r2, [r7, #15]
 8008fb2:	6879      	ldr	r1, [r7, #4]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008fc6:	7bfa      	ldrb	r2, [r7, #15]
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008fd8:	7bfa      	ldrb	r2, [r7, #15]
 8008fda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008fdc:	7bfa      	ldrb	r2, [r7, #15]
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	440b      	add	r3, r1
 8008fea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008fee:	2200      	movs	r2, #0
 8008ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008ff2:	7bfa      	ldrb	r2, [r7, #15]
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009008:	7bfa      	ldrb	r2, [r7, #15]
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	4613      	mov	r3, r2
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800901e:	7bfa      	ldrb	r2, [r7, #15]
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	4613      	mov	r3, r2
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	3301      	adds	r3, #1
 8009038:	73fb      	strb	r3, [r7, #15]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	791b      	ldrb	r3, [r3, #4]
 800903e:	7bfa      	ldrb	r2, [r7, #15]
 8009040:	429a      	cmp	r2, r3
 8009042:	d3b5      	bcc.n	8008fb0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	7c1a      	ldrb	r2, [r3, #16]
 800904c:	f88d 2000 	strb.w	r2, [sp]
 8009050:	3304      	adds	r3, #4
 8009052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009054:	f008 f83a 	bl	80110cc <USB_DevInit>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d005      	beq.n	800906a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2202      	movs	r2, #2
 8009062:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e013      	b.n	8009092 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	7b1b      	ldrb	r3, [r3, #12]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d102      	bne.n	8009086 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f80a 	bl	800909a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4618      	mov	r0, r3
 800908c:	f008 fa07 	bl	801149e <USB_DevDisconnect>

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800909a:	b480      	push	{r7}
 800909c:	b085      	sub	sp, #20
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090cc:	f043 0303 	orr.w	r3, r3, #3
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
	...

080090e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80090e8:	4b05      	ldr	r3, [pc, #20]	@ (8009100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80090ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ec:	4a04      	ldr	r2, [pc, #16]	@ (8009100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80090ee:	f043 0301 	orr.w	r3, r3, #1
 80090f2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80090f4:	bf00      	nop
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	46020800 	.word	0x46020800

08009104 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800910c:	4b39      	ldr	r3, [pc, #228]	@ (80091f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800910e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009110:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009114:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	429a      	cmp	r2, r3
 800911c:	d10b      	bne.n	8009136 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009124:	d905      	bls.n	8009132 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009126:	4b33      	ldr	r3, [pc, #204]	@ (80091f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	4a32      	ldr	r2, [pc, #200]	@ (80091f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800912c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009130:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	e057      	b.n	80091e6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800913c:	d90a      	bls.n	8009154 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800913e:	4b2d      	ldr	r3, [pc, #180]	@ (80091f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4313      	orrs	r3, r2
 800914a:	4a2a      	ldr	r2, [pc, #168]	@ (80091f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800914c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009150:	60d3      	str	r3, [r2, #12]
 8009152:	e007      	b.n	8009164 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009154:	4b27      	ldr	r3, [pc, #156]	@ (80091f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800915c:	4925      	ldr	r1, [pc, #148]	@ (80091f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4313      	orrs	r3, r2
 8009162:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009164:	4b24      	ldr	r3, [pc, #144]	@ (80091f8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a24      	ldr	r2, [pc, #144]	@ (80091fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800916a:	fba2 2303 	umull	r2, r3, r2, r3
 800916e:	099b      	lsrs	r3, r3, #6
 8009170:	2232      	movs	r2, #50	@ 0x32
 8009172:	fb02 f303 	mul.w	r3, r2, r3
 8009176:	4a21      	ldr	r2, [pc, #132]	@ (80091fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009178:	fba2 2303 	umull	r2, r3, r2, r3
 800917c:	099b      	lsrs	r3, r3, #6
 800917e:	3301      	adds	r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009182:	e002      	b.n	800918a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3b01      	subs	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800918a:	4b1a      	ldr	r3, [pc, #104]	@ (80091f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <HAL_PWREx_ControlVoltageScaling+0x98>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1f3      	bne.n	8009184 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01b      	beq.n	80091da <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80091a2:	4b15      	ldr	r3, [pc, #84]	@ (80091f8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a15      	ldr	r2, [pc, #84]	@ (80091fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80091a8:	fba2 2303 	umull	r2, r3, r2, r3
 80091ac:	099b      	lsrs	r3, r3, #6
 80091ae:	2232      	movs	r2, #50	@ 0x32
 80091b0:	fb02 f303 	mul.w	r3, r2, r3
 80091b4:	4a11      	ldr	r2, [pc, #68]	@ (80091fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80091b6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ba:	099b      	lsrs	r3, r3, #6
 80091bc:	3301      	adds	r3, #1
 80091be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80091c0:	e002      	b.n	80091c8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80091c8:	4b0a      	ldr	r3, [pc, #40]	@ (80091f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80091ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <HAL_PWREx_ControlVoltageScaling+0xd6>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1f3      	bne.n	80091c2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e000      	b.n	80091e6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	46020800 	.word	0x46020800
 80091f8:	20000000 	.word	0x20000000
 80091fc:	10624dd3 	.word	0x10624dd3

08009200 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009204:	4b04      	ldr	r3, [pc, #16]	@ (8009218 <HAL_PWREx_GetVoltageRange+0x18>)
 8009206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009208:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800920c:	4618      	mov	r0, r3
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	46020800 	.word	0x46020800

0800921c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009224:	4b22      	ldr	r3, [pc, #136]	@ (80092b0 <HAL_PWREx_ConfigSupply+0x94>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a22      	ldr	r2, [pc, #136]	@ (80092b4 <HAL_PWREx_ConfigSupply+0x98>)
 800922a:	fba2 2303 	umull	r2, r3, r2, r3
 800922e:	099b      	lsrs	r3, r3, #6
 8009230:	2232      	movs	r2, #50	@ 0x32
 8009232:	fb02 f303 	mul.w	r3, r2, r3
 8009236:	4a1f      	ldr	r2, [pc, #124]	@ (80092b4 <HAL_PWREx_ConfigSupply+0x98>)
 8009238:	fba2 2303 	umull	r2, r3, r2, r3
 800923c:	099b      	lsrs	r3, r3, #6
 800923e:	3301      	adds	r3, #1
 8009240:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d113      	bne.n	8009270 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009248:	4b1b      	ldr	r3, [pc, #108]	@ (80092b8 <HAL_PWREx_ConfigSupply+0x9c>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	4a1a      	ldr	r2, [pc, #104]	@ (80092b8 <HAL_PWREx_ConfigSupply+0x9c>)
 800924e:	f023 0302 	bic.w	r3, r3, #2
 8009252:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009254:	e002      	b.n	800925c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3b01      	subs	r3, #1
 800925a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800925c:	4b16      	ldr	r3, [pc, #88]	@ (80092b8 <HAL_PWREx_ConfigSupply+0x9c>)
 800925e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b02      	cmp	r3, #2
 8009266:	d116      	bne.n	8009296 <HAL_PWREx_ConfigSupply+0x7a>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1f3      	bne.n	8009256 <HAL_PWREx_ConfigSupply+0x3a>
 800926e:	e012      	b.n	8009296 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009270:	4b11      	ldr	r3, [pc, #68]	@ (80092b8 <HAL_PWREx_ConfigSupply+0x9c>)
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	4a10      	ldr	r2, [pc, #64]	@ (80092b8 <HAL_PWREx_ConfigSupply+0x9c>)
 8009276:	f043 0302 	orr.w	r3, r3, #2
 800927a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800927c:	e002      	b.n	8009284 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3b01      	subs	r3, #1
 8009282:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009284:	4b0c      	ldr	r3, [pc, #48]	@ (80092b8 <HAL_PWREx_ConfigSupply+0x9c>)
 8009286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d102      	bne.n	8009296 <HAL_PWREx_ConfigSupply+0x7a>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1f3      	bne.n	800927e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e000      	b.n	80092a2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	20000000 	.word	0x20000000
 80092b4:	10624dd3 	.word	0x10624dd3
 80092b8:	46020800 	.word	0x46020800

080092bc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80092c0:	4b05      	ldr	r3, [pc, #20]	@ (80092d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	4a04      	ldr	r2, [pc, #16]	@ (80092d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80092c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ca:	6113      	str	r3, [r2, #16]
}
 80092cc:	bf00      	nop
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	46020800 	.word	0x46020800

080092dc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80092e0:	4b05      	ldr	r3, [pc, #20]	@ (80092f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	4a04      	ldr	r2, [pc, #16]	@ (80092f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80092e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092ea:	6113      	str	r3, [r2, #16]
}
 80092ec:	bf00      	nop
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	46020800 	.word	0x46020800

080092fc <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009300:	4b05      	ldr	r3, [pc, #20]	@ (8009318 <HAL_PWREx_EnableVddA+0x1c>)
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	4a04      	ldr	r2, [pc, #16]	@ (8009318 <HAL_PWREx_EnableVddA+0x1c>)
 8009306:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800930a:	6113      	str	r3, [r2, #16]
}
 800930c:	bf00      	nop
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	46020800 	.word	0x46020800

0800931c <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009322:	f7ff ff6d 	bl	8009200 <HAL_PWREx_GetVoltageRange>
 8009326:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800932e:	d003      	beq.n	8009338 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009336:	d107      	bne.n	8009348 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009338:	4b06      	ldr	r3, [pc, #24]	@ (8009354 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	4a05      	ldr	r2, [pc, #20]	@ (8009354 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800933e:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009342:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	e000      	b.n	800934a <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	46020800 	.word	0x46020800

08009358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08e      	sub	sp, #56	@ 0x38
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009360:	2300      	movs	r3, #0
 8009362:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d102      	bne.n	8009372 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	f000 bec8 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009372:	4b99      	ldr	r3, [pc, #612]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	f003 030c 	and.w	r3, r3, #12
 800937a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800937c:	4b96      	ldr	r3, [pc, #600]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 800937e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009380:	f003 0303 	and.w	r3, r3, #3
 8009384:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0310 	and.w	r3, r3, #16
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 816c 	beq.w	800966c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	2b00      	cmp	r3, #0
 8009398:	d007      	beq.n	80093aa <HAL_RCC_OscConfig+0x52>
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	2b0c      	cmp	r3, #12
 800939e:	f040 80de 	bne.w	800955e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80093a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	f040 80da 	bne.w	800955e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d102      	bne.n	80093b8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	f000 bea5 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093bc:	4b86      	ldr	r3, [pc, #536]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d004      	beq.n	80093d2 <HAL_RCC_OscConfig+0x7a>
 80093c8:	4b83      	ldr	r3, [pc, #524]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80093d0:	e005      	b.n	80093de <HAL_RCC_OscConfig+0x86>
 80093d2:	4b81      	ldr	r3, [pc, #516]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80093d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093d8:	041b      	lsls	r3, r3, #16
 80093da:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80093de:	4293      	cmp	r3, r2
 80093e0:	d255      	bcs.n	800948e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 f9d9 	bl	800a7a4 <RCC_SetFlashLatencyFromMSIRange>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	f000 be82 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80093fe:	4b76      	ldr	r3, [pc, #472]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	4a75      	ldr	r2, [pc, #468]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009404:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009408:	6093      	str	r3, [r2, #8]
 800940a:	4b73      	ldr	r3, [pc, #460]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009416:	4970      	ldr	r1, [pc, #448]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009418:	4313      	orrs	r3, r2
 800941a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009420:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009424:	d309      	bcc.n	800943a <HAL_RCC_OscConfig+0xe2>
 8009426:	4b6c      	ldr	r3, [pc, #432]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	f023 021f 	bic.w	r2, r3, #31
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	4969      	ldr	r1, [pc, #420]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009434:	4313      	orrs	r3, r2
 8009436:	60cb      	str	r3, [r1, #12]
 8009438:	e07e      	b.n	8009538 <HAL_RCC_OscConfig+0x1e0>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	da0a      	bge.n	8009458 <HAL_RCC_OscConfig+0x100>
 8009442:	4b65      	ldr	r3, [pc, #404]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	015b      	lsls	r3, r3, #5
 8009450:	4961      	ldr	r1, [pc, #388]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009452:	4313      	orrs	r3, r2
 8009454:	60cb      	str	r3, [r1, #12]
 8009456:	e06f      	b.n	8009538 <HAL_RCC_OscConfig+0x1e0>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009460:	d30a      	bcc.n	8009478 <HAL_RCC_OscConfig+0x120>
 8009462:	4b5d      	ldr	r3, [pc, #372]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	029b      	lsls	r3, r3, #10
 8009470:	4959      	ldr	r1, [pc, #356]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009472:	4313      	orrs	r3, r2
 8009474:	60cb      	str	r3, [r1, #12]
 8009476:	e05f      	b.n	8009538 <HAL_RCC_OscConfig+0x1e0>
 8009478:	4b57      	ldr	r3, [pc, #348]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	03db      	lsls	r3, r3, #15
 8009486:	4954      	ldr	r1, [pc, #336]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009488:	4313      	orrs	r3, r2
 800948a:	60cb      	str	r3, [r1, #12]
 800948c:	e054      	b.n	8009538 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800948e:	4b52      	ldr	r3, [pc, #328]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	4a51      	ldr	r2, [pc, #324]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009494:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009498:	6093      	str	r3, [r2, #8]
 800949a:	4b4f      	ldr	r3, [pc, #316]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a6:	494c      	ldr	r1, [pc, #304]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80094b4:	d309      	bcc.n	80094ca <HAL_RCC_OscConfig+0x172>
 80094b6:	4b48      	ldr	r3, [pc, #288]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f023 021f 	bic.w	r2, r3, #31
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	4945      	ldr	r1, [pc, #276]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	60cb      	str	r3, [r1, #12]
 80094c8:	e028      	b.n	800951c <HAL_RCC_OscConfig+0x1c4>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	da0a      	bge.n	80094e8 <HAL_RCC_OscConfig+0x190>
 80094d2:	4b41      	ldr	r3, [pc, #260]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	015b      	lsls	r3, r3, #5
 80094e0:	493d      	ldr	r1, [pc, #244]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	60cb      	str	r3, [r1, #12]
 80094e6:	e019      	b.n	800951c <HAL_RCC_OscConfig+0x1c4>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094f0:	d30a      	bcc.n	8009508 <HAL_RCC_OscConfig+0x1b0>
 80094f2:	4b39      	ldr	r3, [pc, #228]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	029b      	lsls	r3, r3, #10
 8009500:	4935      	ldr	r1, [pc, #212]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009502:	4313      	orrs	r3, r2
 8009504:	60cb      	str	r3, [r1, #12]
 8009506:	e009      	b.n	800951c <HAL_RCC_OscConfig+0x1c4>
 8009508:	4b33      	ldr	r3, [pc, #204]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	03db      	lsls	r3, r3, #15
 8009516:	4930      	ldr	r1, [pc, #192]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009518:	4313      	orrs	r3, r2
 800951a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800951c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10a      	bne.n	8009538 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009526:	4618      	mov	r0, r3
 8009528:	f001 f93c 	bl	800a7a4 <RCC_SetFlashLatencyFromMSIRange>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	f000 bde5 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009538:	f001 f8de 	bl	800a6f8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800953c:	4b27      	ldr	r3, [pc, #156]	@ (80095dc <HAL_RCC_OscConfig+0x284>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4618      	mov	r0, r3
 8009542:	f7f9 fb11 	bl	8002b68 <HAL_InitTick>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800954c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 808a 	beq.w	800966a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800955a:	f000 bdd2 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d066      	beq.n	8009634 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009566:	4b1c      	ldr	r3, [pc, #112]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1b      	ldr	r2, [pc, #108]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 800956c:	f043 0301 	orr.w	r3, r3, #1
 8009570:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009572:	f7f9 fb83 	bl	8002c7c <HAL_GetTick>
 8009576:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009578:	e009      	b.n	800958e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800957a:	f7f9 fb7f 	bl	8002c7c <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d902      	bls.n	800958e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	f000 bdba 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800958e:	4b12      	ldr	r3, [pc, #72]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0304 	and.w	r3, r3, #4
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0ef      	beq.n	800957a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800959a:	4b0f      	ldr	r3, [pc, #60]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	4a0e      	ldr	r2, [pc, #56]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80095a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80095a4:	6093      	str	r3, [r2, #8]
 80095a6:	4b0c      	ldr	r3, [pc, #48]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b2:	4909      	ldr	r1, [pc, #36]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095bc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80095c0:	d30e      	bcc.n	80095e0 <HAL_RCC_OscConfig+0x288>
 80095c2:	4b05      	ldr	r3, [pc, #20]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f023 021f 	bic.w	r2, r3, #31
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	4902      	ldr	r1, [pc, #8]	@ (80095d8 <HAL_RCC_OscConfig+0x280>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	60cb      	str	r3, [r1, #12]
 80095d4:	e04a      	b.n	800966c <HAL_RCC_OscConfig+0x314>
 80095d6:	bf00      	nop
 80095d8:	46020c00 	.word	0x46020c00
 80095dc:	20000004 	.word	0x20000004
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	da0a      	bge.n	80095fe <HAL_RCC_OscConfig+0x2a6>
 80095e8:	4b98      	ldr	r3, [pc, #608]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a1b      	ldr	r3, [r3, #32]
 80095f4:	015b      	lsls	r3, r3, #5
 80095f6:	4995      	ldr	r1, [pc, #596]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60cb      	str	r3, [r1, #12]
 80095fc:	e036      	b.n	800966c <HAL_RCC_OscConfig+0x314>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009606:	d30a      	bcc.n	800961e <HAL_RCC_OscConfig+0x2c6>
 8009608:	4b90      	ldr	r3, [pc, #576]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	029b      	lsls	r3, r3, #10
 8009616:	498d      	ldr	r1, [pc, #564]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009618:	4313      	orrs	r3, r2
 800961a:	60cb      	str	r3, [r1, #12]
 800961c:	e026      	b.n	800966c <HAL_RCC_OscConfig+0x314>
 800961e:	4b8b      	ldr	r3, [pc, #556]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	03db      	lsls	r3, r3, #15
 800962c:	4987      	ldr	r1, [pc, #540]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 800962e:	4313      	orrs	r3, r2
 8009630:	60cb      	str	r3, [r1, #12]
 8009632:	e01b      	b.n	800966c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009634:	4b85      	ldr	r3, [pc, #532]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a84      	ldr	r2, [pc, #528]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 800963a:	f023 0301 	bic.w	r3, r3, #1
 800963e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009640:	f7f9 fb1c 	bl	8002c7c <HAL_GetTick>
 8009644:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009646:	e009      	b.n	800965c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009648:	f7f9 fb18 	bl	8002c7c <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b02      	cmp	r3, #2
 8009654:	d902      	bls.n	800965c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	f000 bd53 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800965c:	4b7b      	ldr	r3, [pc, #492]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1ef      	bne.n	8009648 <HAL_RCC_OscConfig+0x2f0>
 8009668:	e000      	b.n	800966c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800966a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 808b 	beq.w	8009790 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800967a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967c:	2b08      	cmp	r3, #8
 800967e:	d005      	beq.n	800968c <HAL_RCC_OscConfig+0x334>
 8009680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009682:	2b0c      	cmp	r3, #12
 8009684:	d109      	bne.n	800969a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009688:	2b03      	cmp	r3, #3
 800968a:	d106      	bne.n	800969a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d17d      	bne.n	8009790 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	f000 bd34 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096a2:	d106      	bne.n	80096b2 <HAL_RCC_OscConfig+0x35a>
 80096a4:	4b69      	ldr	r3, [pc, #420]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a68      	ldr	r2, [pc, #416]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	e041      	b.n	8009736 <HAL_RCC_OscConfig+0x3de>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096ba:	d112      	bne.n	80096e2 <HAL_RCC_OscConfig+0x38a>
 80096bc:	4b63      	ldr	r3, [pc, #396]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a62      	ldr	r2, [pc, #392]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	4b60      	ldr	r3, [pc, #384]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a5f      	ldr	r2, [pc, #380]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096ce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	4b5d      	ldr	r3, [pc, #372]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a5c      	ldr	r2, [pc, #368]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096de:	6013      	str	r3, [r2, #0]
 80096e0:	e029      	b.n	8009736 <HAL_RCC_OscConfig+0x3de>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80096ea:	d112      	bne.n	8009712 <HAL_RCC_OscConfig+0x3ba>
 80096ec:	4b57      	ldr	r3, [pc, #348]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a56      	ldr	r2, [pc, #344]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	4b54      	ldr	r3, [pc, #336]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a53      	ldr	r2, [pc, #332]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80096fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	4b51      	ldr	r3, [pc, #324]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a50      	ldr	r2, [pc, #320]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 800970a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	e011      	b.n	8009736 <HAL_RCC_OscConfig+0x3de>
 8009712:	4b4e      	ldr	r3, [pc, #312]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a4d      	ldr	r2, [pc, #308]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	4b4b      	ldr	r3, [pc, #300]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a4a      	ldr	r2, [pc, #296]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	4b48      	ldr	r3, [pc, #288]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a47      	ldr	r2, [pc, #284]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009730:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009734:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d014      	beq.n	8009768 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800973e:	f7f9 fa9d 	bl	8002c7c <HAL_GetTick>
 8009742:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009744:	e009      	b.n	800975a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009746:	f7f9 fa99 	bl	8002c7c <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b64      	cmp	r3, #100	@ 0x64
 8009752:	d902      	bls.n	800975a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	f000 bcd4 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800975a:	4b3c      	ldr	r3, [pc, #240]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d0ef      	beq.n	8009746 <HAL_RCC_OscConfig+0x3ee>
 8009766:	e013      	b.n	8009790 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009768:	f7f9 fa88 	bl	8002c7c <HAL_GetTick>
 800976c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800976e:	e009      	b.n	8009784 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009770:	f7f9 fa84 	bl	8002c7c <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b64      	cmp	r3, #100	@ 0x64
 800977c:	d902      	bls.n	8009784 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	f000 bcbf 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009784:	4b31      	ldr	r3, [pc, #196]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1ef      	bne.n	8009770 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d05f      	beq.n	800985c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800979c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d005      	beq.n	80097ae <HAL_RCC_OscConfig+0x456>
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	2b0c      	cmp	r3, #12
 80097a6:	d114      	bne.n	80097d2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80097a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d111      	bne.n	80097d2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	f000 bca3 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80097bc:	4b23      	ldr	r3, [pc, #140]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	041b      	lsls	r3, r3, #16
 80097ca:	4920      	ldr	r1, [pc, #128]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80097d0:	e044      	b.n	800985c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d024      	beq.n	8009824 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80097da:	4b1c      	ldr	r3, [pc, #112]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a1b      	ldr	r2, [pc, #108]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 80097e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097e4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80097e6:	f7f9 fa49 	bl	8002c7c <HAL_GetTick>
 80097ea:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097ec:	e009      	b.n	8009802 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097ee:	f7f9 fa45 	bl	8002c7c <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d902      	bls.n	8009802 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	f000 bc80 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009802:	4b12      	ldr	r3, [pc, #72]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0ef      	beq.n	80097ee <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800980e:	4b0f      	ldr	r3, [pc, #60]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	041b      	lsls	r3, r3, #16
 800981c:	490b      	ldr	r1, [pc, #44]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 800981e:	4313      	orrs	r3, r2
 8009820:	610b      	str	r3, [r1, #16]
 8009822:	e01b      	b.n	800985c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009824:	4b09      	ldr	r3, [pc, #36]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a08      	ldr	r2, [pc, #32]	@ (800984c <HAL_RCC_OscConfig+0x4f4>)
 800982a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800982e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009830:	f7f9 fa24 	bl	8002c7c <HAL_GetTick>
 8009834:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009836:	e00b      	b.n	8009850 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009838:	f7f9 fa20 	bl	8002c7c <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d904      	bls.n	8009850 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	f000 bc5b 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
 800984c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009850:	4baf      	ldr	r3, [pc, #700]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1ed      	bne.n	8009838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 80c8 	beq.w	80099fa <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800986a:	2300      	movs	r3, #0
 800986c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009870:	4ba7      	ldr	r3, [pc, #668]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d111      	bne.n	80098a2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800987e:	4ba4      	ldr	r3, [pc, #656]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009884:	4aa2      	ldr	r2, [pc, #648]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009886:	f043 0304 	orr.w	r3, r3, #4
 800988a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800988e:	4ba0      	ldr	r3, [pc, #640]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	617b      	str	r3, [r7, #20]
 800989a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800989c:	2301      	movs	r3, #1
 800989e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80098a2:	4b9c      	ldr	r3, [pc, #624]	@ (8009b14 <HAL_RCC_OscConfig+0x7bc>)
 80098a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d119      	bne.n	80098e2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80098ae:	4b99      	ldr	r3, [pc, #612]	@ (8009b14 <HAL_RCC_OscConfig+0x7bc>)
 80098b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b2:	4a98      	ldr	r2, [pc, #608]	@ (8009b14 <HAL_RCC_OscConfig+0x7bc>)
 80098b4:	f043 0301 	orr.w	r3, r3, #1
 80098b8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098ba:	f7f9 f9df 	bl	8002c7c <HAL_GetTick>
 80098be:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80098c0:	e009      	b.n	80098d6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098c2:	f7f9 f9db 	bl	8002c7c <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d902      	bls.n	80098d6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	f000 bc16 	b.w	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80098d6:	4b8f      	ldr	r3, [pc, #572]	@ (8009b14 <HAL_RCC_OscConfig+0x7bc>)
 80098d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0ef      	beq.n	80098c2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d05f      	beq.n	80099aa <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80098ea:	4b89      	ldr	r3, [pc, #548]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 80098ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098f0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	699a      	ldr	r2, [r3, #24]
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d037      	beq.n	8009970 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d006      	beq.n	8009918 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e3f4      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d01b      	beq.n	800995a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009922:	4b7b      	ldr	r3, [pc, #492]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009928:	4a79      	ldr	r2, [pc, #484]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 800992a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800992e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009932:	f7f9 f9a3 	bl	8002c7c <HAL_GetTick>
 8009936:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009938:	e008      	b.n	800994c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800993a:	f7f9 f99f 	bl	8002c7c <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	2b05      	cmp	r3, #5
 8009946:	d901      	bls.n	800994c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e3da      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800994c:	4b70      	ldr	r3, [pc, #448]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 800994e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1ef      	bne.n	800993a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800995a:	4b6d      	ldr	r3, [pc, #436]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 800995c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009960:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	4969      	ldr	r1, [pc, #420]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 800996a:	4313      	orrs	r3, r2
 800996c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009970:	4b67      	ldr	r3, [pc, #412]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009976:	4a66      	ldr	r2, [pc, #408]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009978:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800997c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009980:	f7f9 f97c 	bl	8002c7c <HAL_GetTick>
 8009984:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009986:	e008      	b.n	800999a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009988:	f7f9 f978 	bl	8002c7c <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	2b05      	cmp	r3, #5
 8009994:	d901      	bls.n	800999a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e3b3      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800999a:	4b5d      	ldr	r3, [pc, #372]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 800999c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d0ef      	beq.n	8009988 <HAL_RCC_OscConfig+0x630>
 80099a8:	e01b      	b.n	80099e2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80099aa:	4b59      	ldr	r3, [pc, #356]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 80099ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099b0:	4a57      	ldr	r2, [pc, #348]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 80099b2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80099b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80099ba:	f7f9 f95f 	bl	8002c7c <HAL_GetTick>
 80099be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80099c0:	e008      	b.n	80099d4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099c2:	f7f9 f95b 	bl	8002c7c <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b05      	cmp	r3, #5
 80099ce:	d901      	bls.n	80099d4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e396      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80099d4:	4b4e      	ldr	r3, [pc, #312]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 80099d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1ef      	bne.n	80099c2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80099e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d107      	bne.n	80099fa <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099ea:	4b49      	ldr	r3, [pc, #292]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 80099ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099f0:	4a47      	ldr	r2, [pc, #284]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 80099f2:	f023 0304 	bic.w	r3, r3, #4
 80099f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0304 	and.w	r3, r3, #4
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 8111 	beq.w	8009c2a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a0e:	4b40      	ldr	r3, [pc, #256]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a14:	f003 0304 	and.w	r3, r3, #4
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d111      	bne.n	8009a40 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a22:	4a3b      	ldr	r2, [pc, #236]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009a24:	f043 0304 	orr.w	r3, r3, #4
 8009a28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009a2c:	4b38      	ldr	r3, [pc, #224]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a32:	f003 0304 	and.w	r3, r3, #4
 8009a36:	613b      	str	r3, [r7, #16]
 8009a38:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009a40:	4b34      	ldr	r3, [pc, #208]	@ (8009b14 <HAL_RCC_OscConfig+0x7bc>)
 8009a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a44:	f003 0301 	and.w	r3, r3, #1
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d118      	bne.n	8009a7e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009a4c:	4b31      	ldr	r3, [pc, #196]	@ (8009b14 <HAL_RCC_OscConfig+0x7bc>)
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a50:	4a30      	ldr	r2, [pc, #192]	@ (8009b14 <HAL_RCC_OscConfig+0x7bc>)
 8009a52:	f043 0301 	orr.w	r3, r3, #1
 8009a56:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a58:	f7f9 f910 	bl	8002c7c <HAL_GetTick>
 8009a5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009a5e:	e008      	b.n	8009a72 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a60:	f7f9 f90c 	bl	8002c7c <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d901      	bls.n	8009a72 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e347      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009a72:	4b28      	ldr	r3, [pc, #160]	@ (8009b14 <HAL_RCC_OscConfig+0x7bc>)
 8009a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0f0      	beq.n	8009a60 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d01f      	beq.n	8009aca <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d010      	beq.n	8009ab8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009a96:	4b1e      	ldr	r3, [pc, #120]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009a9e:	f043 0304 	orr.w	r3, r3, #4
 8009aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009aac:	4a18      	ldr	r2, [pc, #96]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009aae:	f043 0301 	orr.w	r3, r3, #1
 8009ab2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009ab6:	e018      	b.n	8009aea <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009ab8:	4b15      	ldr	r3, [pc, #84]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009abe:	4a14      	ldr	r2, [pc, #80]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009ac0:	f043 0301 	orr.w	r3, r3, #1
 8009ac4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009ac8:	e00f      	b.n	8009aea <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009aca:	4b11      	ldr	r3, [pc, #68]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009ad2:	f023 0301 	bic.w	r3, r3, #1
 8009ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009ada:	4b0d      	ldr	r3, [pc, #52]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8009b10 <HAL_RCC_OscConfig+0x7b8>)
 8009ae2:	f023 0304 	bic.w	r3, r3, #4
 8009ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d057      	beq.n	8009ba2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8009af2:	f7f9 f8c3 	bl	8002c7c <HAL_GetTick>
 8009af6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009af8:	e00e      	b.n	8009b18 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009afa:	f7f9 f8bf 	bl	8002c7c <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d905      	bls.n	8009b18 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e2f8      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
 8009b10:	46020c00 	.word	0x46020c00
 8009b14:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b18:	4b9c      	ldr	r3, [pc, #624]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0e9      	beq.n	8009afa <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d01b      	beq.n	8009b6a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009b32:	4b96      	ldr	r3, [pc, #600]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b38:	4a94      	ldr	r2, [pc, #592]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009b42:	e00a      	b.n	8009b5a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b44:	f7f9 f89a 	bl	8002c7c <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d901      	bls.n	8009b5a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e2d3      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009b5a:	4b8c      	ldr	r3, [pc, #560]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0ed      	beq.n	8009b44 <HAL_RCC_OscConfig+0x7ec>
 8009b68:	e053      	b.n	8009c12 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009b6a:	4b88      	ldr	r3, [pc, #544]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b70:	4a86      	ldr	r2, [pc, #536]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009b7a:	e00a      	b.n	8009b92 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b7c:	f7f9 f87e 	bl	8002c7c <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e2b7      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009b92:	4b7e      	ldr	r3, [pc, #504]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1ed      	bne.n	8009b7c <HAL_RCC_OscConfig+0x824>
 8009ba0:	e037      	b.n	8009c12 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8009ba2:	f7f9 f86b 	bl	8002c7c <HAL_GetTick>
 8009ba6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009ba8:	e00a      	b.n	8009bc0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009baa:	f7f9 f867 	bl	8002c7c <HAL_GetTick>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d901      	bls.n	8009bc0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e2a0      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bc0:	4b72      	ldr	r3, [pc, #456]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1ed      	bne.n	8009baa <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009bce:	4b6f      	ldr	r3, [pc, #444]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01a      	beq.n	8009c12 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009bdc:	4b6b      	ldr	r3, [pc, #428]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009be2:	4a6a      	ldr	r2, [pc, #424]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009be8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009bec:	e00a      	b.n	8009c04 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bee:	f7f9 f845 	bl	8002c7c <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e27e      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009c04:	4b61      	ldr	r3, [pc, #388]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1ed      	bne.n	8009bee <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c12:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d107      	bne.n	8009c2a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c20:	4a5a      	ldr	r2, [pc, #360]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009c22:	f023 0304 	bic.w	r3, r3, #4
 8009c26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d036      	beq.n	8009ca4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d019      	beq.n	8009c72 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8009c3e:	4b53      	ldr	r3, [pc, #332]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a52      	ldr	r2, [pc, #328]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009c44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c48:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009c4a:	f7f9 f817 	bl	8002c7c <HAL_GetTick>
 8009c4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009c50:	e008      	b.n	8009c64 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c52:	f7f9 f813 	bl	8002c7c <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d901      	bls.n	8009c64 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e24e      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009c64:	4b49      	ldr	r3, [pc, #292]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0f0      	beq.n	8009c52 <HAL_RCC_OscConfig+0x8fa>
 8009c70:	e018      	b.n	8009ca4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8009c72:	4b46      	ldr	r3, [pc, #280]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a45      	ldr	r2, [pc, #276]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009c78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c7c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009c7e:	f7f8 fffd 	bl	8002c7c <HAL_GetTick>
 8009c82:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009c84:	e008      	b.n	8009c98 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c86:	f7f8 fff9 	bl	8002c7c <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d901      	bls.n	8009c98 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e234      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009c98:	4b3c      	ldr	r3, [pc, #240]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1f0      	bne.n	8009c86 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d036      	beq.n	8009d1e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d019      	beq.n	8009cec <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8009cb8:	4b34      	ldr	r3, [pc, #208]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a33      	ldr	r2, [pc, #204]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009cc2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009cc4:	f7f8 ffda 	bl	8002c7c <HAL_GetTick>
 8009cc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009cca:	e008      	b.n	8009cde <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009ccc:	f7f8 ffd6 	bl	8002c7c <HAL_GetTick>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d901      	bls.n	8009cde <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e211      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009cde:	4b2b      	ldr	r3, [pc, #172]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0f0      	beq.n	8009ccc <HAL_RCC_OscConfig+0x974>
 8009cea:	e018      	b.n	8009d1e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009cec:	4b27      	ldr	r3, [pc, #156]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a26      	ldr	r2, [pc, #152]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009cf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cf6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009cf8:	f7f8 ffc0 	bl	8002c7c <HAL_GetTick>
 8009cfc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009cfe:	e008      	b.n	8009d12 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009d00:	f7f8 ffbc 	bl	8002c7c <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d901      	bls.n	8009d12 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e1f7      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009d12:	4b1e      	ldr	r3, [pc, #120]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1f0      	bne.n	8009d00 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d07f      	beq.n	8009e2a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d062      	beq.n	8009df8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009d32:	4b16      	ldr	r3, [pc, #88]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	4a15      	ldr	r2, [pc, #84]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009d38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d3c:	6093      	str	r3, [r2, #8]
 8009d3e:	4b13      	ldr	r3, [pc, #76]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4a:	4910      	ldr	r1, [pc, #64]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d54:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009d58:	d309      	bcc.n	8009d6e <HAL_RCC_OscConfig+0xa16>
 8009d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f023 021f 	bic.w	r2, r3, #31
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	4909      	ldr	r1, [pc, #36]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60cb      	str	r3, [r1, #12]
 8009d6c:	e02a      	b.n	8009dc4 <HAL_RCC_OscConfig+0xa6c>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	da0c      	bge.n	8009d90 <HAL_RCC_OscConfig+0xa38>
 8009d76:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	015b      	lsls	r3, r3, #5
 8009d84:	4901      	ldr	r1, [pc, #4]	@ (8009d8c <HAL_RCC_OscConfig+0xa34>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60cb      	str	r3, [r1, #12]
 8009d8a:	e01b      	b.n	8009dc4 <HAL_RCC_OscConfig+0xa6c>
 8009d8c:	46020c00 	.word	0x46020c00
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d98:	d30a      	bcc.n	8009db0 <HAL_RCC_OscConfig+0xa58>
 8009d9a:	4ba1      	ldr	r3, [pc, #644]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	029b      	lsls	r3, r3, #10
 8009da8:	499d      	ldr	r1, [pc, #628]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60cb      	str	r3, [r1, #12]
 8009dae:	e009      	b.n	8009dc4 <HAL_RCC_OscConfig+0xa6c>
 8009db0:	4b9b      	ldr	r3, [pc, #620]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	03db      	lsls	r3, r3, #15
 8009dbe:	4998      	ldr	r1, [pc, #608]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8009dc4:	4b96      	ldr	r3, [pc, #600]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a95      	ldr	r2, [pc, #596]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009dca:	f043 0310 	orr.w	r3, r3, #16
 8009dce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009dd0:	f7f8 ff54 	bl	8002c7c <HAL_GetTick>
 8009dd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009dd6:	e008      	b.n	8009dea <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009dd8:	f7f8 ff50 	bl	8002c7c <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d901      	bls.n	8009dea <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e18b      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009dea:	4b8d      	ldr	r3, [pc, #564]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0320 	and.w	r3, r3, #32
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0f0      	beq.n	8009dd8 <HAL_RCC_OscConfig+0xa80>
 8009df6:	e018      	b.n	8009e2a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009df8:	4b89      	ldr	r3, [pc, #548]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a88      	ldr	r2, [pc, #544]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009dfe:	f023 0310 	bic.w	r3, r3, #16
 8009e02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009e04:	f7f8 ff3a 	bl	8002c7c <HAL_GetTick>
 8009e08:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009e0a:	e008      	b.n	8009e1e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009e0c:	f7f8 ff36 	bl	8002c7c <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d901      	bls.n	8009e1e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e171      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009e1e:	4b80      	ldr	r3, [pc, #512]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1f0      	bne.n	8009e0c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 8166 	beq.w	800a100 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009e34:	2300      	movs	r3, #0
 8009e36:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e3a:	4b79      	ldr	r3, [pc, #484]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	f003 030c 	and.w	r3, r3, #12
 8009e42:	2b0c      	cmp	r3, #12
 8009e44:	f000 80f2 	beq.w	800a02c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	f040 80c5 	bne.w	8009fdc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009e52:	4b73      	ldr	r3, [pc, #460]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a72      	ldr	r2, [pc, #456]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009e58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e5c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e5e:	f7f8 ff0d 	bl	8002c7c <HAL_GetTick>
 8009e62:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009e64:	e008      	b.n	8009e78 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e66:	f7f8 ff09 	bl	8002c7c <HAL_GetTick>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d901      	bls.n	8009e78 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e144      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009e78:	4b69      	ldr	r3, [pc, #420]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1f0      	bne.n	8009e66 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e84:	4b66      	ldr	r3, [pc, #408]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d111      	bne.n	8009eb6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8009e92:	4b63      	ldr	r3, [pc, #396]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e98:	4a61      	ldr	r2, [pc, #388]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009e9a:	f043 0304 	orr.w	r3, r3, #4
 8009e9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009ea2:	4b5f      	ldr	r3, [pc, #380]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009eb6:	4b5b      	ldr	r3, [pc, #364]	@ (800a024 <HAL_RCC_OscConfig+0xccc>)
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ebe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ec2:	d102      	bne.n	8009eca <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009eca:	4b56      	ldr	r3, [pc, #344]	@ (800a024 <HAL_RCC_OscConfig+0xccc>)
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	4a55      	ldr	r2, [pc, #340]	@ (800a024 <HAL_RCC_OscConfig+0xccc>)
 8009ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ed4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009ed6:	4b52      	ldr	r3, [pc, #328]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009eea:	3a01      	subs	r2, #1
 8009eec:	0212      	lsls	r2, r2, #8
 8009eee:	4311      	orrs	r1, r2
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	494a      	ldr	r1, [pc, #296]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	628b      	str	r3, [r1, #40]	@ 0x28
 8009efc:	4b48      	ldr	r3, [pc, #288]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f00:	4b49      	ldr	r3, [pc, #292]	@ (800a028 <HAL_RCC_OscConfig+0xcd0>)
 8009f02:	4013      	ands	r3, r2
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009f08:	3a01      	subs	r2, #1
 8009f0a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f12:	3a01      	subs	r2, #1
 8009f14:	0252      	lsls	r2, r2, #9
 8009f16:	b292      	uxth	r2, r2
 8009f18:	4311      	orrs	r1, r2
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009f1e:	3a01      	subs	r2, #1
 8009f20:	0412      	lsls	r2, r2, #16
 8009f22:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009f26:	4311      	orrs	r1, r2
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f2c:	3a01      	subs	r2, #1
 8009f2e:	0612      	lsls	r2, r2, #24
 8009f30:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009f34:	430a      	orrs	r2, r1
 8009f36:	493a      	ldr	r1, [pc, #232]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009f3c:	4b38      	ldr	r3, [pc, #224]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	4a37      	ldr	r2, [pc, #220]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f42:	f023 0310 	bic.w	r3, r3, #16
 8009f46:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f4c:	4a34      	ldr	r2, [pc, #208]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009f52:	4b33      	ldr	r3, [pc, #204]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f56:	4a32      	ldr	r2, [pc, #200]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f58:	f043 0310 	orr.w	r3, r3, #16
 8009f5c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009f5e:	4b30      	ldr	r3, [pc, #192]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f62:	f023 020c 	bic.w	r2, r3, #12
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f6a:	492d      	ldr	r1, [pc, #180]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8009f70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d105      	bne.n	8009f84 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009f78:	4b2a      	ldr	r3, [pc, #168]	@ (800a024 <HAL_RCC_OscConfig+0xccc>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	4a29      	ldr	r2, [pc, #164]	@ (800a024 <HAL_RCC_OscConfig+0xccc>)
 8009f7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f82:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009f84:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d107      	bne.n	8009f9c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8009f8c:	4b24      	ldr	r3, [pc, #144]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f92:	4a23      	ldr	r2, [pc, #140]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f94:	f023 0304 	bic.w	r3, r3, #4
 8009f98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009f9c:	4b20      	ldr	r3, [pc, #128]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a1f      	ldr	r2, [pc, #124]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009fa6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009fa8:	f7f8 fe68 	bl	8002c7c <HAL_GetTick>
 8009fac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009fae:	e008      	b.n	8009fc2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fb0:	f7f8 fe64 	bl	8002c7c <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d901      	bls.n	8009fc2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e09f      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009fc2:	4b17      	ldr	r3, [pc, #92]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0f0      	beq.n	8009fb0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009fce:	4b14      	ldr	r3, [pc, #80]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd2:	4a13      	ldr	r2, [pc, #76]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fd8:	6293      	str	r3, [r2, #40]	@ 0x28
 8009fda:	e091      	b.n	800a100 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009fdc:	4b10      	ldr	r3, [pc, #64]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a0f      	ldr	r2, [pc, #60]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 8009fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009fe6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009fe8:	f7f8 fe48 	bl	8002c7c <HAL_GetTick>
 8009fec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ff0:	f7f8 fe44 	bl	8002c7c <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e07f      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a002:	4b07      	ldr	r3, [pc, #28]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1f0      	bne.n	8009ff0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a00e:	4b04      	ldr	r3, [pc, #16]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 800a010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a012:	4a03      	ldr	r2, [pc, #12]	@ (800a020 <HAL_RCC_OscConfig+0xcc8>)
 800a014:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a018:	f023 0303 	bic.w	r3, r3, #3
 800a01c:	6293      	str	r3, [r2, #40]	@ 0x28
 800a01e:	e06f      	b.n	800a100 <HAL_RCC_OscConfig+0xda8>
 800a020:	46020c00 	.word	0x46020c00
 800a024:	46020800 	.word	0x46020800
 800a028:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a02c:	4b37      	ldr	r3, [pc, #220]	@ (800a10c <HAL_RCC_OscConfig+0xdb4>)
 800a02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a030:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a032:	4b36      	ldr	r3, [pc, #216]	@ (800a10c <HAL_RCC_OscConfig+0xdb4>)
 800a034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a036:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d039      	beq.n	800a0b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	f003 0203 	and.w	r2, r3, #3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d132      	bne.n	800a0b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	0a1b      	lsrs	r3, r3, #8
 800a052:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a05a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d129      	bne.n	800a0b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d122      	bne.n	800a0b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a078:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d11a      	bne.n	800a0b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	0a5b      	lsrs	r3, r3, #9
 800a082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a08a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d111      	bne.n	800a0b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	0c1b      	lsrs	r3, r3, #16
 800a094:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a09c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d108      	bne.n	800a0b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	0e1b      	lsrs	r3, r3, #24
 800a0a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d001      	beq.n	800a0b8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e024      	b.n	800a102 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a0b8:	4b14      	ldr	r3, [pc, #80]	@ (800a10c <HAL_RCC_OscConfig+0xdb4>)
 800a0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0bc:	08db      	lsrs	r3, r3, #3
 800a0be:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d01a      	beq.n	800a100 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a0ca:	4b10      	ldr	r3, [pc, #64]	@ (800a10c <HAL_RCC_OscConfig+0xdb4>)
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ce:	4a0f      	ldr	r2, [pc, #60]	@ (800a10c <HAL_RCC_OscConfig+0xdb4>)
 800a0d0:	f023 0310 	bic.w	r3, r3, #16
 800a0d4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d6:	f7f8 fdd1 	bl	8002c7c <HAL_GetTick>
 800a0da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a0dc:	bf00      	nop
 800a0de:	f7f8 fdcd 	bl	8002c7c <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d0f9      	beq.n	800a0de <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0ee:	4a07      	ldr	r2, [pc, #28]	@ (800a10c <HAL_RCC_OscConfig+0xdb4>)
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a0f4:	4b05      	ldr	r3, [pc, #20]	@ (800a10c <HAL_RCC_OscConfig+0xdb4>)
 800a0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0f8:	4a04      	ldr	r2, [pc, #16]	@ (800a10c <HAL_RCC_OscConfig+0xdb4>)
 800a0fa:	f043 0310 	orr.w	r3, r3, #16
 800a0fe:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3738      	adds	r7, #56	@ 0x38
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	46020c00 	.word	0x46020c00

0800a110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e1d9      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a124:	4b9b      	ldr	r3, [pc, #620]	@ (800a394 <HAL_RCC_ClockConfig+0x284>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d910      	bls.n	800a154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a132:	4b98      	ldr	r3, [pc, #608]	@ (800a394 <HAL_RCC_ClockConfig+0x284>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f023 020f 	bic.w	r2, r3, #15
 800a13a:	4996      	ldr	r1, [pc, #600]	@ (800a394 <HAL_RCC_ClockConfig+0x284>)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	4313      	orrs	r3, r2
 800a140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a142:	4b94      	ldr	r3, [pc, #592]	@ (800a394 <HAL_RCC_ClockConfig+0x284>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d001      	beq.n	800a154 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e1c1      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0310 	and.w	r3, r3, #16
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d010      	beq.n	800a182 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	695a      	ldr	r2, [r3, #20]
 800a164:	4b8c      	ldr	r3, [pc, #560]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a168:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d908      	bls.n	800a182 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a170:	4b89      	ldr	r3, [pc, #548]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a174:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	4986      	ldr	r1, [pc, #536]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 0308 	and.w	r3, r3, #8
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d012      	beq.n	800a1b4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691a      	ldr	r2, [r3, #16]
 800a192:	4b81      	ldr	r3, [pc, #516]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	091b      	lsrs	r3, r3, #4
 800a198:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d909      	bls.n	800a1b4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a1a0:	4b7d      	ldr	r3, [pc, #500]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	011b      	lsls	r3, r3, #4
 800a1ae:	497a      	ldr	r1, [pc, #488]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d010      	beq.n	800a1e2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68da      	ldr	r2, [r3, #12]
 800a1c4:	4b74      	ldr	r3, [pc, #464]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d908      	bls.n	800a1e2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a1d0:	4b71      	ldr	r3, [pc, #452]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	496e      	ldr	r1, [pc, #440]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d010      	beq.n	800a210 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689a      	ldr	r2, [r3, #8]
 800a1f2:	4b69      	ldr	r3, [pc, #420]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d908      	bls.n	800a210 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a1fe:	4b66      	ldr	r3, [pc, #408]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	f023 020f 	bic.w	r2, r3, #15
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	4963      	ldr	r1, [pc, #396]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 80d2 	beq.w	800a3c2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a21e:	2300      	movs	r3, #0
 800a220:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	2b03      	cmp	r3, #3
 800a228:	d143      	bne.n	800a2b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a22a:	4b5b      	ldr	r3, [pc, #364]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a22c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a230:	f003 0304 	and.w	r3, r3, #4
 800a234:	2b00      	cmp	r3, #0
 800a236:	d110      	bne.n	800a25a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a238:	4b57      	ldr	r3, [pc, #348]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a23a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a23e:	4a56      	ldr	r2, [pc, #344]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a240:	f043 0304 	orr.w	r3, r3, #4
 800a244:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a248:	4b53      	ldr	r3, [pc, #332]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a24a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	60bb      	str	r3, [r7, #8]
 800a254:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a256:	2301      	movs	r3, #1
 800a258:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a25a:	f7f8 fd0f 	bl	8002c7c <HAL_GetTick>
 800a25e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a260:	4b4e      	ldr	r3, [pc, #312]	@ (800a39c <HAL_RCC_ClockConfig+0x28c>)
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00f      	beq.n	800a28c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a26c:	e008      	b.n	800a280 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a26e:	f7f8 fd05 	bl	8002c7c <HAL_GetTick>
 800a272:	4602      	mov	r2, r0
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d901      	bls.n	800a280 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e12b      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a280:	4b46      	ldr	r3, [pc, #280]	@ (800a39c <HAL_RCC_ClockConfig+0x28c>)
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0f0      	beq.n	800a26e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d107      	bne.n	800a2a2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a292:	4b41      	ldr	r3, [pc, #260]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a298:	4a3f      	ldr	r2, [pc, #252]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a29a:	f023 0304 	bic.w	r3, r3, #4
 800a29e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a2a2:	4b3d      	ldr	r3, [pc, #244]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d121      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e112      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d107      	bne.n	800a2ca <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a2ba:	4b37      	ldr	r3, [pc, #220]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d115      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e106      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d107      	bne.n	800a2e2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a2d2:	4b31      	ldr	r3, [pc, #196]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 0304 	and.w	r3, r3, #4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d109      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e0fa      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a2e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e0f2      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a2f2:	4b29      	ldr	r3, [pc, #164]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a2f4:	69db      	ldr	r3, [r3, #28]
 800a2f6:	f023 0203 	bic.w	r2, r3, #3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	4926      	ldr	r1, [pc, #152]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a300:	4313      	orrs	r3, r2
 800a302:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a304:	f7f8 fcba 	bl	8002c7c <HAL_GetTick>
 800a308:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d112      	bne.n	800a338 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a312:	e00a      	b.n	800a32a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a314:	f7f8 fcb2 	bl	8002c7c <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a322:	4293      	cmp	r3, r2
 800a324:	d901      	bls.n	800a32a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e0d6      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a32a:	4b1b      	ldr	r3, [pc, #108]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a32c:	69db      	ldr	r3, [r3, #28]
 800a32e:	f003 030c 	and.w	r3, r3, #12
 800a332:	2b0c      	cmp	r3, #12
 800a334:	d1ee      	bne.n	800a314 <HAL_RCC_ClockConfig+0x204>
 800a336:	e044      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d112      	bne.n	800a366 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a340:	e00a      	b.n	800a358 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a342:	f7f8 fc9b 	bl	8002c7c <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a350:	4293      	cmp	r3, r2
 800a352:	d901      	bls.n	800a358 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a354:	2303      	movs	r3, #3
 800a356:	e0bf      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a358:	4b0f      	ldr	r3, [pc, #60]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	f003 030c 	and.w	r3, r3, #12
 800a360:	2b08      	cmp	r3, #8
 800a362:	d1ee      	bne.n	800a342 <HAL_RCC_ClockConfig+0x232>
 800a364:	e02d      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d123      	bne.n	800a3b6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a36e:	e00a      	b.n	800a386 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a370:	f7f8 fc84 	bl	8002c7c <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a37e:	4293      	cmp	r3, r2
 800a380:	d901      	bls.n	800a386 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e0a8      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a386:	4b04      	ldr	r3, [pc, #16]	@ (800a398 <HAL_RCC_ClockConfig+0x288>)
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	f003 030c 	and.w	r3, r3, #12
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1ee      	bne.n	800a370 <HAL_RCC_ClockConfig+0x260>
 800a392:	e016      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x2b2>
 800a394:	40022000 	.word	0x40022000
 800a398:	46020c00 	.word	0x46020c00
 800a39c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3a0:	f7f8 fc6c 	bl	8002c7c <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d901      	bls.n	800a3b6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e090      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a3b6:	4b4a      	ldr	r3, [pc, #296]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	f003 030c 	and.w	r3, r3, #12
 800a3be:	2b04      	cmp	r3, #4
 800a3c0:	d1ee      	bne.n	800a3a0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d010      	beq.n	800a3f0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	4b43      	ldr	r3, [pc, #268]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d208      	bcs.n	800a3f0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a3de:	4b40      	ldr	r3, [pc, #256]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	f023 020f 	bic.w	r2, r3, #15
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	493d      	ldr	r1, [pc, #244]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3f0:	4b3c      	ldr	r3, [pc, #240]	@ (800a4e4 <HAL_RCC_ClockConfig+0x3d4>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 030f 	and.w	r3, r3, #15
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d210      	bcs.n	800a420 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3fe:	4b39      	ldr	r3, [pc, #228]	@ (800a4e4 <HAL_RCC_ClockConfig+0x3d4>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f023 020f 	bic.w	r2, r3, #15
 800a406:	4937      	ldr	r1, [pc, #220]	@ (800a4e4 <HAL_RCC_ClockConfig+0x3d4>)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a40e:	4b35      	ldr	r3, [pc, #212]	@ (800a4e4 <HAL_RCC_ClockConfig+0x3d4>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 030f 	and.w	r3, r3, #15
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d001      	beq.n	800a420 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e05b      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d010      	beq.n	800a44e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	4b2b      	ldr	r3, [pc, #172]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a438:	429a      	cmp	r2, r3
 800a43a:	d208      	bcs.n	800a44e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a43c:	4b28      	ldr	r3, [pc, #160]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	4925      	ldr	r1, [pc, #148]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0308 	and.w	r3, r3, #8
 800a456:	2b00      	cmp	r3, #0
 800a458:	d012      	beq.n	800a480 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	691a      	ldr	r2, [r3, #16]
 800a45e:	4b20      	ldr	r3, [pc, #128]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	091b      	lsrs	r3, r3, #4
 800a464:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a468:	429a      	cmp	r2, r3
 800a46a:	d209      	bcs.n	800a480 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a46c:	4b1c      	ldr	r3, [pc, #112]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	4919      	ldr	r1, [pc, #100]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a47c:	4313      	orrs	r3, r2
 800a47e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0310 	and.w	r3, r3, #16
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d010      	beq.n	800a4ae <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	695a      	ldr	r2, [r3, #20]
 800a490:	4b13      	ldr	r3, [pc, #76]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a494:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a498:	429a      	cmp	r2, r3
 800a49a:	d208      	bcs.n	800a4ae <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a49c:	4b10      	ldr	r3, [pc, #64]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	490d      	ldr	r1, [pc, #52]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a4ae:	f000 f821 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e0 <HAL_RCC_ClockConfig+0x3d0>)
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	f003 030f 	and.w	r3, r3, #15
 800a4bc:	490a      	ldr	r1, [pc, #40]	@ (800a4e8 <HAL_RCC_ClockConfig+0x3d8>)
 800a4be:	5ccb      	ldrb	r3, [r1, r3]
 800a4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c4:	4a09      	ldr	r2, [pc, #36]	@ (800a4ec <HAL_RCC_ClockConfig+0x3dc>)
 800a4c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a4c8:	4b09      	ldr	r3, [pc, #36]	@ (800a4f0 <HAL_RCC_ClockConfig+0x3e0>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7f8 fb4b 	bl	8002b68 <HAL_InitTick>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73fb      	strb	r3, [r7, #15]

  return status;
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	46020c00 	.word	0x46020c00
 800a4e4:	40022000 	.word	0x40022000
 800a4e8:	080115d0 	.word	0x080115d0
 800a4ec:	20000000 	.word	0x20000000
 800a4f0:	20000004 	.word	0x20000004

0800a4f4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b08b      	sub	sp, #44	@ 0x2c
 800a4f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a4fe:	2300      	movs	r3, #0
 800a500:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a502:	4b78      	ldr	r3, [pc, #480]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	f003 030c 	and.w	r3, r3, #12
 800a50a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a50c:	4b75      	ldr	r3, [pc, #468]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a510:	f003 0303 	and.w	r3, r3, #3
 800a514:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d005      	beq.n	800a528 <HAL_RCC_GetSysClockFreq+0x34>
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	2b0c      	cmp	r3, #12
 800a520:	d121      	bne.n	800a566 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d11e      	bne.n	800a566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a528:	4b6e      	ldr	r3, [pc, #440]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d107      	bne.n	800a544 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a534:	4b6b      	ldr	r3, [pc, #428]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a53a:	0b1b      	lsrs	r3, r3, #12
 800a53c:	f003 030f 	and.w	r3, r3, #15
 800a540:	627b      	str	r3, [r7, #36]	@ 0x24
 800a542:	e005      	b.n	800a550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a544:	4b67      	ldr	r3, [pc, #412]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	0f1b      	lsrs	r3, r3, #28
 800a54a:	f003 030f 	and.w	r3, r3, #15
 800a54e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a550:	4a65      	ldr	r2, [pc, #404]	@ (800a6e8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800a552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a558:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d110      	bne.n	800a582 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a562:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a564:	e00d      	b.n	800a582 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a566:	4b5f      	ldr	r3, [pc, #380]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	f003 030c 	and.w	r3, r3, #12
 800a56e:	2b04      	cmp	r3, #4
 800a570:	d102      	bne.n	800a578 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a572:	4b5e      	ldr	r3, [pc, #376]	@ (800a6ec <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a574:	623b      	str	r3, [r7, #32]
 800a576:	e004      	b.n	800a582 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	2b08      	cmp	r3, #8
 800a57c:	d101      	bne.n	800a582 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a57e:	4b5b      	ldr	r3, [pc, #364]	@ (800a6ec <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a580:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	2b0c      	cmp	r3, #12
 800a586:	f040 80a5 	bne.w	800a6d4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a58a:	4b56      	ldr	r3, [pc, #344]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58e:	f003 0303 	and.w	r3, r3, #3
 800a592:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a594:	4b53      	ldr	r3, [pc, #332]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	f003 030f 	and.w	r3, r3, #15
 800a59e:	3301      	adds	r3, #1
 800a5a0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a5a2:	4b50      	ldr	r3, [pc, #320]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a6:	091b      	lsrs	r3, r3, #4
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a5ae:	4b4d      	ldr	r3, [pc, #308]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a5b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b2:	08db      	lsrs	r3, r3, #3
 800a5b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	fb02 f303 	mul.w	r3, r2, r3
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d003      	beq.n	800a5d8 <HAL_RCC_GetSysClockFreq+0xe4>
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	d022      	beq.n	800a61c <HAL_RCC_GetSysClockFreq+0x128>
 800a5d6:	e043      	b.n	800a660 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800a6f0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ea:	4b3e      	ldr	r3, [pc, #248]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a5ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a5fa:	ed97 6a01 	vldr	s12, [r7, #4]
 800a5fe:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800a6f4 <HAL_RCC_GetSysClockFreq+0x200>
 800a602:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a606:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a60a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a61a:	e046      	b.n	800a6aa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	ee07 3a90 	vmov	s15, r3
 800a622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a626:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800a6f0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a62e:	4b2d      	ldr	r3, [pc, #180]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a63e:	ed97 6a01 	vldr	s12, [r7, #4]
 800a642:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a6f4 <HAL_RCC_GetSysClockFreq+0x200>
 800a646:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a64e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a652:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a65e:	e024      	b.n	800a6aa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	ee07 3a90 	vmov	s15, r3
 800a666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	ee07 3a90 	vmov	s15, r3
 800a670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a678:	4b1a      	ldr	r3, [pc, #104]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a67a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a67c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a680:	ee07 3a90 	vmov	s15, r3
 800a684:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a688:	ed97 6a01 	vldr	s12, [r7, #4]
 800a68c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800a6f4 <HAL_RCC_GetSysClockFreq+0x200>
 800a690:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a694:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a698:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a69c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a6a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6a8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a6aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a6e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6ae:	0e1b      	lsrs	r3, r3, #24
 800a6b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ce:	ee17 3a90 	vmov	r3, s15
 800a6d2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	372c      	adds	r7, #44	@ 0x2c
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	46020c00 	.word	0x46020c00
 800a6e8:	080115e8 	.word	0x080115e8
 800a6ec:	00f42400 	.word	0x00f42400
 800a6f0:	4b742400 	.word	0x4b742400
 800a6f4:	46000000 	.word	0x46000000

0800a6f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a6fc:	f7ff fefa 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800a700:	4602      	mov	r2, r0
 800a702:	4b07      	ldr	r3, [pc, #28]	@ (800a720 <HAL_RCC_GetHCLKFreq+0x28>)
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	f003 030f 	and.w	r3, r3, #15
 800a70a:	4906      	ldr	r1, [pc, #24]	@ (800a724 <HAL_RCC_GetHCLKFreq+0x2c>)
 800a70c:	5ccb      	ldrb	r3, [r1, r3]
 800a70e:	fa22 f303 	lsr.w	r3, r2, r3
 800a712:	4a05      	ldr	r2, [pc, #20]	@ (800a728 <HAL_RCC_GetHCLKFreq+0x30>)
 800a714:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a716:	4b04      	ldr	r3, [pc, #16]	@ (800a728 <HAL_RCC_GetHCLKFreq+0x30>)
 800a718:	681b      	ldr	r3, [r3, #0]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	46020c00 	.word	0x46020c00
 800a724:	080115d0 	.word	0x080115d0
 800a728:	20000000 	.word	0x20000000

0800a72c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a730:	f7ff ffe2 	bl	800a6f8 <HAL_RCC_GetHCLKFreq>
 800a734:	4602      	mov	r2, r0
 800a736:	4b05      	ldr	r3, [pc, #20]	@ (800a74c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	091b      	lsrs	r3, r3, #4
 800a73c:	f003 0307 	and.w	r3, r3, #7
 800a740:	4903      	ldr	r1, [pc, #12]	@ (800a750 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a742:	5ccb      	ldrb	r3, [r1, r3]
 800a744:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a748:	4618      	mov	r0, r3
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	46020c00 	.word	0x46020c00
 800a750:	080115e0 	.word	0x080115e0

0800a754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a758:	f7ff ffce 	bl	800a6f8 <HAL_RCC_GetHCLKFreq>
 800a75c:	4602      	mov	r2, r0
 800a75e:	4b05      	ldr	r3, [pc, #20]	@ (800a774 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	0a1b      	lsrs	r3, r3, #8
 800a764:	f003 0307 	and.w	r3, r3, #7
 800a768:	4903      	ldr	r1, [pc, #12]	@ (800a778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a76a:	5ccb      	ldrb	r3, [r1, r3]
 800a76c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a770:	4618      	mov	r0, r3
 800a772:	bd80      	pop	{r7, pc}
 800a774:	46020c00 	.word	0x46020c00
 800a778:	080115e0 	.word	0x080115e0

0800a77c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a780:	f7ff ffba 	bl	800a6f8 <HAL_RCC_GetHCLKFreq>
 800a784:	4602      	mov	r2, r0
 800a786:	4b05      	ldr	r3, [pc, #20]	@ (800a79c <HAL_RCC_GetPCLK3Freq+0x20>)
 800a788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78a:	091b      	lsrs	r3, r3, #4
 800a78c:	f003 0307 	and.w	r3, r3, #7
 800a790:	4903      	ldr	r1, [pc, #12]	@ (800a7a0 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a792:	5ccb      	ldrb	r3, [r1, r3]
 800a794:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a798:	4618      	mov	r0, r3
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	46020c00 	.word	0x46020c00
 800a7a0:	080115e0 	.word	0x080115e0

0800a7a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a7ac:	4b3e      	ldr	r3, [pc, #248]	@ (800a8a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a7ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7b2:	f003 0304 	and.w	r3, r3, #4
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a7ba:	f7fe fd21 	bl	8009200 <HAL_PWREx_GetVoltageRange>
 800a7be:	6178      	str	r0, [r7, #20]
 800a7c0:	e019      	b.n	800a7f6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a7c2:	4b39      	ldr	r3, [pc, #228]	@ (800a8a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a7c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7c8:	4a37      	ldr	r2, [pc, #220]	@ (800a8a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a7ca:	f043 0304 	orr.w	r3, r3, #4
 800a7ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a7d2:	4b35      	ldr	r3, [pc, #212]	@ (800a8a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a7d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	60fb      	str	r3, [r7, #12]
 800a7de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a7e0:	f7fe fd0e 	bl	8009200 <HAL_PWREx_GetVoltageRange>
 800a7e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a7e6:	4b30      	ldr	r3, [pc, #192]	@ (800a8a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a7e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7ec:	4a2e      	ldr	r2, [pc, #184]	@ (800a8a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a7ee:	f023 0304 	bic.w	r3, r3, #4
 800a7f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a7fc:	d003      	beq.n	800a806 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a804:	d109      	bne.n	800a81a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a80c:	d202      	bcs.n	800a814 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a80e:	2301      	movs	r3, #1
 800a810:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a812:	e033      	b.n	800a87c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a814:	2300      	movs	r3, #0
 800a816:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a818:	e030      	b.n	800a87c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a820:	d208      	bcs.n	800a834 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a828:	d102      	bne.n	800a830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800a82a:	2303      	movs	r3, #3
 800a82c:	613b      	str	r3, [r7, #16]
 800a82e:	e025      	b.n	800a87c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e035      	b.n	800a8a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a83a:	d90f      	bls.n	800a85c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d109      	bne.n	800a856 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a848:	d902      	bls.n	800a850 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800a84a:	2300      	movs	r3, #0
 800a84c:	613b      	str	r3, [r7, #16]
 800a84e:	e015      	b.n	800a87c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800a850:	2301      	movs	r3, #1
 800a852:	613b      	str	r3, [r7, #16]
 800a854:	e012      	b.n	800a87c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800a856:	2300      	movs	r3, #0
 800a858:	613b      	str	r3, [r7, #16]
 800a85a:	e00f      	b.n	800a87c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a862:	d109      	bne.n	800a878 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a86a:	d102      	bne.n	800a872 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800a86c:	2301      	movs	r3, #1
 800a86e:	613b      	str	r3, [r7, #16]
 800a870:	e004      	b.n	800a87c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800a872:	2302      	movs	r3, #2
 800a874:	613b      	str	r3, [r7, #16]
 800a876:	e001      	b.n	800a87c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800a878:	2301      	movs	r3, #1
 800a87a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a87c:	4b0b      	ldr	r3, [pc, #44]	@ (800a8ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f023 020f 	bic.w	r2, r3, #15
 800a884:	4909      	ldr	r1, [pc, #36]	@ (800a8ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	4313      	orrs	r3, r2
 800a88a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a88c:	4b07      	ldr	r3, [pc, #28]	@ (800a8ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	429a      	cmp	r2, r3
 800a898:	d001      	beq.n	800a89e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e000      	b.n	800a8a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	46020c00 	.word	0x46020c00
 800a8ac:	40022000 	.word	0x40022000

0800a8b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a8b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8b4:	b0c8      	sub	sp, #288	@ 0x120
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f002 0401 	and.w	r4, r2, #1
 800a8d4:	2500      	movs	r5, #0
 800a8d6:	ea54 0305 	orrs.w	r3, r4, r5
 800a8da:	d00b      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a8dc:	4bd5      	ldr	r3, [pc, #852]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8e2:	f023 0103 	bic.w	r1, r3, #3
 800a8e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ec:	4ad1      	ldr	r2, [pc, #836]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8ee:	430b      	orrs	r3, r1
 800a8f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	f002 0802 	and.w	r8, r2, #2
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	ea58 0309 	orrs.w	r3, r8, r9
 800a908:	d00b      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a90a:	4bca      	ldr	r3, [pc, #808]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a90c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a910:	f023 010c 	bic.w	r1, r3, #12
 800a914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a91a:	4ac6      	ldr	r2, [pc, #792]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a91c:	430b      	orrs	r3, r1
 800a91e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92a:	f002 0a04 	and.w	sl, r2, #4
 800a92e:	f04f 0b00 	mov.w	fp, #0
 800a932:	ea5a 030b 	orrs.w	r3, sl, fp
 800a936:	d00b      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a938:	4bbe      	ldr	r3, [pc, #760]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a93a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a93e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a948:	4aba      	ldr	r2, [pc, #744]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a94a:	430b      	orrs	r3, r1
 800a94c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	f002 0308 	and.w	r3, r2, #8
 800a95c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a960:	2300      	movs	r3, #0
 800a962:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a966:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a96a:	460b      	mov	r3, r1
 800a96c:	4313      	orrs	r3, r2
 800a96e:	d00b      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a970:	4bb0      	ldr	r3, [pc, #704]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a976:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a97a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a97e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a980:	4aac      	ldr	r2, [pc, #688]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a982:	430b      	orrs	r3, r1
 800a984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f002 0310 	and.w	r3, r2, #16
 800a994:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a998:	2300      	movs	r3, #0
 800a99a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a99e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	d00b      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a9a8:	4ba2      	ldr	r3, [pc, #648]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a9b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9b8:	4a9e      	ldr	r2, [pc, #632]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9ba:	430b      	orrs	r3, r1
 800a9bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a9cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a9d6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	d00b      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800a9e0:	4b94      	ldr	r3, [pc, #592]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a9e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a9ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9f0:	4a90      	ldr	r2, [pc, #576]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9f2:	430b      	orrs	r3, r1
 800a9f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a9f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	f002 0320 	and.w	r3, r2, #32
 800aa04:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aa0e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800aa12:	460b      	mov	r3, r1
 800aa14:	4313      	orrs	r3, r2
 800aa16:	d00b      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800aa18:	4b86      	ldr	r3, [pc, #536]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa1e:	f023 0107 	bic.w	r1, r3, #7
 800aa22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa28:	4a82      	ldr	r2, [pc, #520]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aa3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aa40:	2300      	movs	r3, #0
 800aa42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	d00b      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800aa50:	4b78      	ldr	r3, [pc, #480]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa56:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800aa5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa60:	4a74      	ldr	r2, [pc, #464]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa62:	430b      	orrs	r3, r1
 800aa64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aa68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aa74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa78:	2300      	movs	r3, #0
 800aa7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aa7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aa82:	460b      	mov	r3, r1
 800aa84:	4313      	orrs	r3, r2
 800aa86:	d00b      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800aa88:	4b6a      	ldr	r3, [pc, #424]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa98:	4a66      	ldr	r2, [pc, #408]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa9a:	430b      	orrs	r3, r1
 800aa9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aaa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800aaac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aab0:	2300      	movs	r3, #0
 800aab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aab6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800aaba:	460b      	mov	r3, r1
 800aabc:	4313      	orrs	r3, r2
 800aabe:	d00b      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800aac0:	4b5c      	ldr	r3, [pc, #368]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aac6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800aaca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aad0:	4a58      	ldr	r2, [pc, #352]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aad2:	430b      	orrs	r3, r1
 800aad4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800aae4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aae8:	2300      	movs	r3, #0
 800aaea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aaee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	d00b      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800aaf8:	4b4e      	ldr	r3, [pc, #312]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aafa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aafe:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800ab02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab08:	4a4a      	ldr	r2, [pc, #296]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab0a:	430b      	orrs	r3, r1
 800ab0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800ab10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ab1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab20:	2300      	movs	r3, #0
 800ab22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	d00b      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800ab30:	4b40      	ldr	r3, [pc, #256]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab36:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800ab3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab40:	4a3c      	ldr	r2, [pc, #240]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab42:	430b      	orrs	r3, r1
 800ab44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800ab48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ab54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ab5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ab62:	460b      	mov	r3, r1
 800ab64:	4313      	orrs	r3, r2
 800ab66:	d00c      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800ab68:	4b32      	ldr	r3, [pc, #200]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab6e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800ab72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab7a:	4a2e      	ldr	r2, [pc, #184]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ab82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800ab8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab92:	2300      	movs	r3, #0
 800ab94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab98:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	d00c      	beq.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800aba2:	4b24      	ldr	r3, [pc, #144]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aba8:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800abac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abb4:	4a1f      	ldr	r2, [pc, #124]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abb6:	430b      	orrs	r3, r1
 800abb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800abbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800abc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800abcc:	2300      	movs	r3, #0
 800abce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800abd2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800abd6:	460b      	mov	r3, r1
 800abd8:	4313      	orrs	r3, r2
 800abda:	d00c      	beq.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800abdc:	4b15      	ldr	r3, [pc, #84]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abe2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800abe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abee:	4a11      	ldr	r2, [pc, #68]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abf0:	430b      	orrs	r3, r1
 800abf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800abf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ac02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ac06:	2300      	movs	r3, #0
 800ac08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ac0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ac10:	460b      	mov	r3, r1
 800ac12:	4313      	orrs	r3, r2
 800ac14:	d010      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800ac16:	4b07      	ldr	r3, [pc, #28]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac28:	4a02      	ldr	r2, [pc, #8]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ac2a:	430b      	orrs	r3, r1
 800ac2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ac30:	e002      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800ac32:	bf00      	nop
 800ac34:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ac38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ac44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ac52:	460b      	mov	r3, r1
 800ac54:	4313      	orrs	r3, r2
 800ac56:	d04c      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800ac58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac60:	2b80      	cmp	r3, #128	@ 0x80
 800ac62:	d02d      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ac64:	2b80      	cmp	r3, #128	@ 0x80
 800ac66:	d827      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ac68:	2b60      	cmp	r3, #96	@ 0x60
 800ac6a:	d02b      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800ac6c:	2b60      	cmp	r3, #96	@ 0x60
 800ac6e:	d823      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ac70:	2b40      	cmp	r3, #64	@ 0x40
 800ac72:	d006      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800ac74:	2b40      	cmp	r3, #64	@ 0x40
 800ac76:	d81f      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d009      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ac7c:	2b20      	cmp	r3, #32
 800ac7e:	d011      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800ac80:	e01a      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac82:	4bc0      	ldr	r3, [pc, #768]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac86:	4abf      	ldr	r2, [pc, #764]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac8c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ac8e:	e01a      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ac90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac94:	3308      	adds	r3, #8
 800ac96:	4618      	mov	r0, r3
 800ac98:	f002 fcd6 	bl	800d648 <RCCEx_PLL2_Config>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800aca2:	e010      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aca8:	332c      	adds	r3, #44	@ 0x2c
 800acaa:	4618      	mov	r0, r3
 800acac:	f002 fd64 	bl	800d778 <RCCEx_PLL3_Config>
 800acb0:	4603      	mov	r3, r0
 800acb2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800acb6:	e006      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800acbe:	e002      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800acc0:	bf00      	nop
 800acc2:	e000      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800acc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acc6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10d      	bne.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800acce:	4bad      	ldr	r3, [pc, #692]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800acd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800acd4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800acd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ace0:	4aa8      	ldr	r2, [pc, #672]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ace2:	430b      	orrs	r3, r1
 800ace4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ace8:	e003      	b.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800acee:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800acf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800acfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad02:	2300      	movs	r3, #0
 800ad04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad08:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	d053      	beq.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800ad12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad1e:	d033      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800ad20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad24:	d82c      	bhi.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ad26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad2a:	d02f      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800ad2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad30:	d826      	bhi.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ad32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad36:	d008      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800ad38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad3c:	d820      	bhi.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00a      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ad42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad46:	d011      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ad48:	e01a      	b.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad4a:	4b8e      	ldr	r3, [pc, #568]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4e:	4a8d      	ldr	r2, [pc, #564]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad54:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ad56:	e01a      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ad58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad5c:	3308      	adds	r3, #8
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f002 fc72 	bl	800d648 <RCCEx_PLL2_Config>
 800ad64:	4603      	mov	r3, r0
 800ad66:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ad6a:	e010      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad70:	332c      	adds	r3, #44	@ 0x2c
 800ad72:	4618      	mov	r0, r3
 800ad74:	f002 fd00 	bl	800d778 <RCCEx_PLL3_Config>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ad7e:	e006      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ad86:	e002      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ad88:	bf00      	nop
 800ad8a:	e000      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ad8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad8e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10d      	bne.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800ad96:	4b7b      	ldr	r3, [pc, #492]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad9c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800ada0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ada4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ada8:	4a76      	ldr	r2, [pc, #472]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adaa:	430b      	orrs	r3, r1
 800adac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800adb0:	e003      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800adb6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800adba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800adc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800adca:	2300      	movs	r3, #0
 800adcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800add0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800add4:	460b      	mov	r3, r1
 800add6:	4313      	orrs	r3, r2
 800add8:	d046      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800adda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ade2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ade6:	d028      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ade8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800adec:	d821      	bhi.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800adee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adf2:	d022      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800adf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adf8:	d81b      	bhi.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800adfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800adfe:	d01c      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ae00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ae04:	d815      	bhi.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ae06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae0a:	d008      	beq.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800ae0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae10:	d80f      	bhi.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d011      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ae16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae1a:	d00e      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ae1c:	e009      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ae1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae22:	3308      	adds	r3, #8
 800ae24:	4618      	mov	r0, r3
 800ae26:	f002 fc0f 	bl	800d648 <RCCEx_PLL2_Config>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ae30:	e004      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ae38:	e000      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800ae3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae3c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10d      	bne.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800ae44:	4b4f      	ldr	r3, [pc, #316]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae4a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ae4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae56:	4a4b      	ldr	r2, [pc, #300]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae58:	430b      	orrs	r3, r1
 800ae5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ae5e:	e003      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae60:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae64:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800ae68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ae74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ae82:	460b      	mov	r3, r1
 800ae84:	4313      	orrs	r3, r2
 800ae86:	d03f      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800ae88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d81e      	bhi.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800ae94:	a201      	add	r2, pc, #4	@ (adr r2, 800ae9c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800ae96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9a:	bf00      	nop
 800ae9c:	0800aedb 	.word	0x0800aedb
 800aea0:	0800aeb1 	.word	0x0800aeb1
 800aea4:	0800aebf 	.word	0x0800aebf
 800aea8:	0800aedb 	.word	0x0800aedb
 800aeac:	0800aedb 	.word	0x0800aedb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aeb0:	4b34      	ldr	r3, [pc, #208]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aeb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb4:	4a33      	ldr	r2, [pc, #204]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aeb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aeba:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800aebc:	e00e      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aec2:	332c      	adds	r3, #44	@ 0x2c
 800aec4:	4618      	mov	r0, r3
 800aec6:	f002 fc57 	bl	800d778 <RCCEx_PLL3_Config>
 800aeca:	4603      	mov	r3, r0
 800aecc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800aed0:	e004      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800aed8:	e000      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800aeda:	bf00      	nop
    }
    if (ret == HAL_OK)
 800aedc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10d      	bne.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800aee4:	4b27      	ldr	r3, [pc, #156]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aee6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aeea:	f023 0107 	bic.w	r1, r3, #7
 800aeee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aef6:	4a23      	ldr	r2, [pc, #140]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aef8:	430b      	orrs	r3, r1
 800aefa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800aefe:	e003      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af00:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af04:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800af08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800af14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af16:	2300      	movs	r3, #0
 800af18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800af1e:	460b      	mov	r3, r1
 800af20:	4313      	orrs	r3, r2
 800af22:	d04c      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800af24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800af2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af30:	d02a      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800af32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af36:	d821      	bhi.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800af38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af3c:	d026      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800af3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af42:	d81b      	bhi.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800af44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af48:	d00e      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800af4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af4e:	d815      	bhi.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01d      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800af54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af58:	d110      	bne.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800af5a:	4b0a      	ldr	r3, [pc, #40]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5e:	4a09      	ldr	r2, [pc, #36]	@ (800af84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af64:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800af66:	e014      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af6c:	332c      	adds	r3, #44	@ 0x2c
 800af6e:	4618      	mov	r0, r3
 800af70:	f002 fc02 	bl	800d778 <RCCEx_PLL3_Config>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af7a:	e00a      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af82:	e006      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800af84:	46020c00 	.word	0x46020c00
        break;
 800af88:	bf00      	nop
 800af8a:	e002      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800af8c:	bf00      	nop
 800af8e:	e000      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800af90:	bf00      	nop
    }
    if (ret == HAL_OK)
 800af92:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10d      	bne.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800af9a:	4baf      	ldr	r3, [pc, #700]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800afa0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800afa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800afac:	4aaa      	ldr	r2, [pc, #680]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afae:	430b      	orrs	r3, r1
 800afb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800afb4:	e003      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800afba:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800afbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800afca:	673b      	str	r3, [r7, #112]	@ 0x70
 800afcc:	2300      	movs	r3, #0
 800afce:	677b      	str	r3, [r7, #116]	@ 0x74
 800afd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800afd4:	460b      	mov	r3, r1
 800afd6:	4313      	orrs	r3, r2
 800afd8:	f000 80b5 	beq.w	800b146 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afdc:	2300      	movs	r3, #0
 800afde:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afe2:	4b9d      	ldr	r3, [pc, #628]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b00      	cmp	r3, #0
 800afee:	d113      	bne.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aff0:	4b99      	ldr	r3, [pc, #612]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800aff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aff6:	4a98      	ldr	r2, [pc, #608]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800aff8:	f043 0304 	orr.w	r3, r3, #4
 800affc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b000:	4b95      	ldr	r3, [pc, #596]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b006:	f003 0304 	and.w	r3, r3, #4
 800b00a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b00e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b012:	2301      	movs	r3, #1
 800b014:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b018:	4b90      	ldr	r3, [pc, #576]	@ (800b25c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01c:	4a8f      	ldr	r2, [pc, #572]	@ (800b25c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b01e:	f043 0301 	orr.w	r3, r3, #1
 800b022:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b024:	f7f7 fe2a 	bl	8002c7c <HAL_GetTick>
 800b028:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b02c:	e00b      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b02e:	f7f7 fe25 	bl	8002c7c <HAL_GetTick>
 800b032:	4602      	mov	r2, r0
 800b034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d903      	bls.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b044:	e005      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b046:	4b85      	ldr	r3, [pc, #532]	@ (800b25c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0ed      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b052:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b056:	2b00      	cmp	r3, #0
 800b058:	d165      	bne.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b05a:	4b7f      	ldr	r3, [pc, #508]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b05c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b064:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d023      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b074:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b078:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d01b      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b080:	4b75      	ldr	r3, [pc, #468]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b08a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b08e:	4b72      	ldr	r3, [pc, #456]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b094:	4a70      	ldr	r2, [pc, #448]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b09a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b09e:	4b6e      	ldr	r3, [pc, #440]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0a4:	4a6c      	ldr	r2, [pc, #432]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b0ae:	4a6a      	ldr	r2, [pc, #424]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b0b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b0b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d019      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c4:	f7f7 fdda 	bl	8002c7c <HAL_GetTick>
 800b0c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0cc:	e00d      	b.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0ce:	f7f7 fdd5 	bl	8002c7c <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0d8:	1ad2      	subs	r2, r2, r3
 800b0da:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d903      	bls.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b0e8:	e006      	b.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0ea:	4b5b      	ldr	r3, [pc, #364]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d0ea      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b0f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10d      	bne.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b100:	4b55      	ldr	r3, [pc, #340]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b106:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b10a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b10e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b112:	4a51      	ldr	r2, [pc, #324]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b114:	430b      	orrs	r3, r1
 800b116:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b11a:	e008      	b.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b11c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b120:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b124:	e003      	b.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b126:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b12a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b12e:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b132:	2b01      	cmp	r3, #1
 800b134:	d107      	bne.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b136:	4b48      	ldr	r3, [pc, #288]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b13c:	4a46      	ldr	r2, [pc, #280]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b13e:	f023 0304 	bic.w	r3, r3, #4
 800b142:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b152:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b154:	2300      	movs	r3, #0
 800b156:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b158:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b15c:	460b      	mov	r3, r1
 800b15e:	4313      	orrs	r3, r2
 800b160:	d042      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b166:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b16a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b16e:	d022      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b170:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b174:	d81b      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b17a:	d011      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b17c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b180:	d815      	bhi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d019      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b186:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b18a:	d110      	bne.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b18c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b190:	3308      	adds	r3, #8
 800b192:	4618      	mov	r0, r3
 800b194:	f002 fa58 	bl	800d648 <RCCEx_PLL2_Config>
 800b198:	4603      	mov	r3, r0
 800b19a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b19e:	e00d      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1a0:	4b2d      	ldr	r3, [pc, #180]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a4:	4a2c      	ldr	r2, [pc, #176]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b1a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1aa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b1ac:	e006      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b1b4:	e002      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b1b6:	bf00      	nop
 800b1b8:	e000      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b1ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b1bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10d      	bne.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b1c4:	4b24      	ldr	r3, [pc, #144]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b1c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1ca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b1ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b1d6:	4a20      	ldr	r2, [pc, #128]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b1de:	e003      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b1e4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b1e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b1f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1fa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b1fe:	460b      	mov	r3, r1
 800b200:	4313      	orrs	r3, r2
 800b202:	d031      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b208:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b20c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b210:	d00b      	beq.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b216:	d804      	bhi.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d008      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b21c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b220:	d007      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b228:	e004      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b22a:	bf00      	nop
 800b22c:	e002      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b22e:	bf00      	nop
 800b230:	e000      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b232:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b234:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d111      	bne.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b23c:	4b06      	ldr	r3, [pc, #24]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b23e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b242:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b24a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b24e:	4a02      	ldr	r2, [pc, #8]	@ (800b258 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b250:	430b      	orrs	r3, r1
 800b252:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b256:	e007      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b258:	46020c00 	.word	0x46020c00
 800b25c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b260:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b264:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b274:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b276:	2300      	movs	r3, #0
 800b278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b27a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b27e:	460b      	mov	r3, r1
 800b280:	4313      	orrs	r3, r2
 800b282:	d00c      	beq.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b284:	4bb2      	ldr	r3, [pc, #712]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b286:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b28a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b28e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b292:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b296:	4aae      	ldr	r2, [pc, #696]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b298:	430b      	orrs	r3, r1
 800b29a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b29e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b2aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2b0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	d019      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b2c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2c6:	d105      	bne.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b2c8:	4ba1      	ldr	r3, [pc, #644]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2cc:	4aa0      	ldr	r2, [pc, #640]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2d2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b2d4:	4b9e      	ldr	r3, [pc, #632]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2da:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b2e6:	4a9a      	ldr	r2, [pc, #616]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2e8:	430b      	orrs	r3, r1
 800b2ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b2ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b2fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b300:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b304:	460b      	mov	r3, r1
 800b306:	4313      	orrs	r3, r2
 800b308:	d00c      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b30a:	4b91      	ldr	r3, [pc, #580]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b30c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b310:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b318:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b31c:	4a8c      	ldr	r2, [pc, #560]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b31e:	430b      	orrs	r3, r1
 800b320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b330:	643b      	str	r3, [r7, #64]	@ 0x40
 800b332:	2300      	movs	r3, #0
 800b334:	647b      	str	r3, [r7, #68]	@ 0x44
 800b336:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b33a:	460b      	mov	r3, r1
 800b33c:	4313      	orrs	r3, r2
 800b33e:	d00c      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b340:	4b83      	ldr	r3, [pc, #524]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b346:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b34e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b352:	4a7f      	ldr	r2, [pc, #508]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b354:	430b      	orrs	r3, r1
 800b356:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b35a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b366:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b368:	2300      	movs	r3, #0
 800b36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b36c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b370:	460b      	mov	r3, r1
 800b372:	4313      	orrs	r3, r2
 800b374:	d00c      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b376:	4b76      	ldr	r3, [pc, #472]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b37c:	f023 0118 	bic.w	r1, r3, #24
 800b380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b384:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b388:	4a71      	ldr	r2, [pc, #452]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b38a:	430b      	orrs	r3, r1
 800b38c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b39c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b39e:	2300      	movs	r3, #0
 800b3a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	d032      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b3ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b3b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3b8:	d105      	bne.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3ba:	4b65      	ldr	r3, [pc, #404]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3be:	4a64      	ldr	r2, [pc, #400]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3c4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b3ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3d2:	d108      	bne.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b3d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d8:	3308      	adds	r3, #8
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f002 f934 	bl	800d648 <RCCEx_PLL2_Config>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b3e6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10d      	bne.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b3ee:	4b58      	ldr	r3, [pc, #352]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3f4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b3f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b400:	4a53      	ldr	r2, [pc, #332]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b402:	430b      	orrs	r3, r1
 800b404:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b408:	e003      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b40e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	2100      	movs	r1, #0
 800b41c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b424:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b428:	460b      	mov	r3, r1
 800b42a:	4313      	orrs	r3, r2
 800b42c:	d04a      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b42e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b432:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b436:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b43a:	d01e      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b43c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b440:	d825      	bhi.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b446:	d00e      	beq.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b448:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b44c:	d81f      	bhi.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d021      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b456:	d11a      	bne.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b458:	4b3d      	ldr	r3, [pc, #244]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45c:	4a3c      	ldr	r2, [pc, #240]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b45e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b462:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b464:	e018      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b46a:	3308      	adds	r3, #8
 800b46c:	4618      	mov	r0, r3
 800b46e:	f002 f8eb 	bl	800d648 <RCCEx_PLL2_Config>
 800b472:	4603      	mov	r3, r0
 800b474:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b478:	e00e      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b47a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b47e:	332c      	adds	r3, #44	@ 0x2c
 800b480:	4618      	mov	r0, r3
 800b482:	f002 f979 	bl	800d778 <RCCEx_PLL3_Config>
 800b486:	4603      	mov	r3, r0
 800b488:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b48c:	e004      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b494:	e000      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800b496:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b498:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10d      	bne.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800b4a0:	4b2b      	ldr	r3, [pc, #172]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b4b2:	4927      	ldr	r1, [pc, #156]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b4ba:	e003      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4c0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800b4c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b4d0:	623b      	str	r3, [r7, #32]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	d03d      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800b4e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4ec:	d00e      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800b4ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4f2:	d815      	bhi.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d017      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b4f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4fc:	d110      	bne.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4fe:	4b14      	ldr	r3, [pc, #80]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b502:	4a13      	ldr	r2, [pc, #76]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b508:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b50a:	e00e      	b.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b50c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b510:	3308      	adds	r3, #8
 800b512:	4618      	mov	r0, r3
 800b514:	f002 f898 	bl	800d648 <RCCEx_PLL2_Config>
 800b518:	4603      	mov	r3, r0
 800b51a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b51e:	e004      	b.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b526:	e000      	b.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b528:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b52a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d110      	bne.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b532:	4b07      	ldr	r3, [pc, #28]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b538:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b53c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b544:	4902      	ldr	r1, [pc, #8]	@ (800b550 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b546:	4313      	orrs	r3, r2
 800b548:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b54c:	e006      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b54e:	bf00      	nop
 800b550:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b554:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b558:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b55c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b568:	61bb      	str	r3, [r7, #24]
 800b56a:	2300      	movs	r3, #0
 800b56c:	61fb      	str	r3, [r7, #28]
 800b56e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b572:	460b      	mov	r3, r1
 800b574:	4313      	orrs	r3, r2
 800b576:	d00c      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b578:	4b68      	ldr	r3, [pc, #416]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b57a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b57e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b586:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b58a:	4964      	ldr	r1, [pc, #400]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	2100      	movs	r1, #0
 800b59c:	6139      	str	r1, [r7, #16]
 800b59e:	f003 0302 	and.w	r3, r3, #2
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	d036      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800b5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00c      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b5ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5be:	d113      	bne.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b5c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f002 f83e 	bl	800d648 <RCCEx_PLL2_Config>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b5d2:	e00d      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b5d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5d8:	332c      	adds	r3, #44	@ 0x2c
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f002 f8cc 	bl	800d778 <RCCEx_PLL3_Config>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b5e6:	e003      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5f0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10d      	bne.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800b5f8:	4b48      	ldr	r3, [pc, #288]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b5fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b5fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b606:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b60a:	4944      	ldr	r1, [pc, #272]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b60c:	4313      	orrs	r3, r2
 800b60e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b612:	e003      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b614:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b618:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b61c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	2100      	movs	r1, #0
 800b626:	60b9      	str	r1, [r7, #8]
 800b628:	f003 0304 	and.w	r3, r3, #4
 800b62c:	60fb      	str	r3, [r7, #12]
 800b62e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b632:	460b      	mov	r3, r1
 800b634:	4313      	orrs	r3, r2
 800b636:	d024      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800b638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b63c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b640:	2b00      	cmp	r3, #0
 800b642:	d108      	bne.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b648:	332c      	adds	r3, #44	@ 0x2c
 800b64a:	4618      	mov	r0, r3
 800b64c:	f002 f894 	bl	800d778 <RCCEx_PLL3_Config>
 800b650:	4603      	mov	r3, r0
 800b652:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800b656:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10d      	bne.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800b65e:	4b2f      	ldr	r3, [pc, #188]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b664:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b66c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b670:	492a      	ldr	r1, [pc, #168]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b672:	4313      	orrs	r3, r2
 800b674:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b678:	e003      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b67e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800b682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	2100      	movs	r1, #0
 800b68c:	6039      	str	r1, [r7, #0]
 800b68e:	f003 0308 	and.w	r3, r3, #8
 800b692:	607b      	str	r3, [r7, #4]
 800b694:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b698:	460b      	mov	r3, r1
 800b69a:	4313      	orrs	r3, r2
 800b69c:	d036      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800b69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b6a6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b6aa:	d00d      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800b6ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b6b0:	d811      	bhi.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b6b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6b6:	d012      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b6b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6bc:	d80b      	bhi.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00d      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6c6:	d106      	bne.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b6c8:	4b14      	ldr	r3, [pc, #80]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6cc:	4a13      	ldr	r2, [pc, #76]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b6ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6d2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800b6d4:	e004      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b6dc:	e000      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800b6de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10d      	bne.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800b6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b6ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b6f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b6fa:	4908      	ldr	r1, [pc, #32]	@ (800b71c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b702:	e003      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b704:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b708:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b70c:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800b710:	4618      	mov	r0, r3
 800b712:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b716:	46bd      	mov	sp, r7
 800b718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b71c:	46020c00 	.word	0x46020c00

0800b720 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b720:	b480      	push	{r7}
 800b722:	b089      	sub	sp, #36	@ 0x24
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b728:	4ba6      	ldr	r3, [pc, #664]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b72a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b730:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b732:	4ba4      	ldr	r3, [pc, #656]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b73c:	4ba1      	ldr	r3, [pc, #644]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b740:	0a1b      	lsrs	r3, r3, #8
 800b742:	f003 030f 	and.w	r3, r3, #15
 800b746:	3301      	adds	r3, #1
 800b748:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b74a:	4b9e      	ldr	r3, [pc, #632]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b74c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74e:	091b      	lsrs	r3, r3, #4
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b756:	4b9b      	ldr	r3, [pc, #620]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b75a:	08db      	lsrs	r3, r3, #3
 800b75c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	fb02 f303 	mul.w	r3, r2, r3
 800b766:	ee07 3a90 	vmov	s15, r3
 800b76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2b03      	cmp	r3, #3
 800b776:	d062      	beq.n	800b83e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	f200 8081 	bhi.w	800b882 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d024      	beq.n	800b7d0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d17a      	bne.n	800b882 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	ee07 3a90 	vmov	s15, r3
 800b792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b796:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b79e:	4b89      	ldr	r3, [pc, #548]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a6:	ee07 3a90 	vmov	s15, r3
 800b7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7b2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7ce:	e08f      	b.n	800b8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b7d0:	4b7c      	ldr	r3, [pc, #496]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d005      	beq.n	800b7e8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800b7dc:	4b79      	ldr	r3, [pc, #484]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	0f1b      	lsrs	r3, r3, #28
 800b7e2:	f003 030f 	and.w	r3, r3, #15
 800b7e6:	e006      	b.n	800b7f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800b7e8:	4b76      	ldr	r3, [pc, #472]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7ee:	041b      	lsls	r3, r3, #16
 800b7f0:	0f1b      	lsrs	r3, r3, #28
 800b7f2:	f003 030f 	and.w	r3, r3, #15
 800b7f6:	4a76      	ldr	r2, [pc, #472]	@ (800b9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	ee07 3a90 	vmov	s15, r3
 800b80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b80e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b81c:	ed97 6a02 	vldr	s12, [r7, #8]
 800b820:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b82c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b830:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b834:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b838:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b83c:	e058      	b.n	800b8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	ee07 3a90 	vmov	s15, r3
 800b844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b848:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b84c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b850:	4b5c      	ldr	r3, [pc, #368]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b860:	ed97 6a02 	vldr	s12, [r7, #8]
 800b864:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b868:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b86c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b870:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b874:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b87c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b880:	e036      	b.n	800b8f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b882:	4b50      	ldr	r3, [pc, #320]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d005      	beq.n	800b89a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800b88e:	4b4d      	ldr	r3, [pc, #308]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	0f1b      	lsrs	r3, r3, #28
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	e006      	b.n	800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800b89a:	4b4a      	ldr	r3, [pc, #296]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b89c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b8a0:	041b      	lsls	r3, r3, #16
 800b8a2:	0f1b      	lsrs	r3, r3, #28
 800b8a4:	f003 030f 	and.w	r3, r3, #15
 800b8a8:	4a49      	ldr	r2, [pc, #292]	@ (800b9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ae:	ee07 3a90 	vmov	s15, r3
 800b8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	ee07 3a90 	vmov	s15, r3
 800b8bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	ee07 3a90 	vmov	s15, r3
 800b8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8d2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b9cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8ee:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800b8f0:	4b34      	ldr	r3, [pc, #208]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d017      	beq.n	800b92c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b8fc:	4b31      	ldr	r3, [pc, #196]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b900:	0a5b      	lsrs	r3, r3, #9
 800b902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b906:	ee07 3a90 	vmov	s15, r3
 800b90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800b90e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b912:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b916:	edd7 6a07 	vldr	s13, [r7, #28]
 800b91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b91e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b922:	ee17 2a90 	vmov	r2, s15
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	e002      	b.n	800b932 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b932:	4b24      	ldr	r3, [pc, #144]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d017      	beq.n	800b96e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b93e:	4b21      	ldr	r3, [pc, #132]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b942:	0c1b      	lsrs	r3, r3, #16
 800b944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b948:	ee07 3a90 	vmov	s15, r3
 800b94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b950:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b954:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b958:	edd7 6a07 	vldr	s13, [r7, #28]
 800b95c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b964:	ee17 2a90 	vmov	r2, s15
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	605a      	str	r2, [r3, #4]
 800b96c:	e002      	b.n	800b974 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b974:	4b13      	ldr	r3, [pc, #76]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b978:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d017      	beq.n	800b9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b980:	4b10      	ldr	r3, [pc, #64]	@ (800b9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b984:	0e1b      	lsrs	r3, r3, #24
 800b986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800b992:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b996:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b99a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b99e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a6:	ee17 2a90 	vmov	r2, s15
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b9ae:	e002      	b.n	800b9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	609a      	str	r2, [r3, #8]
}
 800b9b6:	bf00      	nop
 800b9b8:	3724      	adds	r7, #36	@ 0x24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	46020c00 	.word	0x46020c00
 800b9c8:	4b742400 	.word	0x4b742400
 800b9cc:	46000000 	.word	0x46000000
 800b9d0:	080115e8 	.word	0x080115e8

0800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b089      	sub	sp, #36	@ 0x24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b9dc:	4ba6      	ldr	r3, [pc, #664]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b9e6:	4ba4      	ldr	r3, [pc, #656]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ea:	f003 0303 	and.w	r3, r3, #3
 800b9ee:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800b9f0:	4ba1      	ldr	r3, [pc, #644]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f4:	0a1b      	lsrs	r3, r3, #8
 800b9f6:	f003 030f 	and.w	r3, r3, #15
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800b9fe:	4b9e      	ldr	r3, [pc, #632]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba02:	091b      	lsrs	r3, r3, #4
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800ba0a:	4b9b      	ldr	r3, [pc, #620]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba0e:	08db      	lsrs	r3, r3, #3
 800ba10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	fb02 f303 	mul.w	r3, r2, r3
 800ba1a:	ee07 3a90 	vmov	s15, r3
 800ba1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba22:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2b03      	cmp	r3, #3
 800ba2a:	d062      	beq.n	800baf2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	f200 8081 	bhi.w	800bb36 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d024      	beq.n	800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d17a      	bne.n	800bb36 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800ba4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba52:	4b89      	ldr	r3, [pc, #548]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba62:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba66:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ba6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba82:	e08f      	b.n	800bba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ba84:	4b7c      	ldr	r3, [pc, #496]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d005      	beq.n	800ba9c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800ba90:	4b79      	ldr	r3, [pc, #484]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	0f1b      	lsrs	r3, r3, #28
 800ba96:	f003 030f 	and.w	r3, r3, #15
 800ba9a:	e006      	b.n	800baaa <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800ba9c:	4b76      	ldr	r3, [pc, #472]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800baa2:	041b      	lsls	r3, r3, #16
 800baa4:	0f1b      	lsrs	r3, r3, #28
 800baa6:	f003 030f 	and.w	r3, r3, #15
 800baaa:	4a76      	ldr	r2, [pc, #472]	@ (800bc84 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800baac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bab0:	ee07 3a90 	vmov	s15, r3
 800bab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	ee07 3a90 	vmov	s15, r3
 800babe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	ee07 3a90 	vmov	s15, r3
 800bacc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad0:	ed97 6a02 	vldr	s12, [r7, #8]
 800bad4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800badc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800bae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baf0:	e058      	b.n	800bba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	ee07 3a90 	vmov	s15, r3
 800baf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bafc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800bb00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb04:	4b5c      	ldr	r3, [pc, #368]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb0c:	ee07 3a90 	vmov	s15, r3
 800bb10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb14:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb18:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bb1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bb20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb28:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bb2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb34:	e036      	b.n	800bba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800bb36:	4b50      	ldr	r3, [pc, #320]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d005      	beq.n	800bb4e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800bb42:	4b4d      	ldr	r3, [pc, #308]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	0f1b      	lsrs	r3, r3, #28
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	e006      	b.n	800bb5c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800bb4e:	4b4a      	ldr	r3, [pc, #296]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb54:	041b      	lsls	r3, r3, #16
 800bb56:	0f1b      	lsrs	r3, r3, #28
 800bb58:	f003 030f 	and.w	r3, r3, #15
 800bb5c:	4a49      	ldr	r2, [pc, #292]	@ (800bc84 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800bb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb62:	ee07 3a90 	vmov	s15, r3
 800bb66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	ee07 3a90 	vmov	s15, r3
 800bb70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	ee07 3a90 	vmov	s15, r3
 800bb7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb82:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb86:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bb8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb96:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800bb9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bba2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800bba4:	4b34      	ldr	r3, [pc, #208]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d017      	beq.n	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bbb0:	4b31      	ldr	r3, [pc, #196]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bbb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbb4:	0a5b      	lsrs	r3, r3, #9
 800bbb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800bbc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbc6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bbca:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbd6:	ee17 2a90 	vmov	r2, s15
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	e002      	b.n	800bbe6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800bbe6:	4b24      	ldr	r3, [pc, #144]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bbe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d017      	beq.n	800bc22 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bbf2:	4b21      	ldr	r3, [pc, #132]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bbf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf6:	0c1b      	lsrs	r3, r3, #16
 800bbf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbfc:	ee07 3a90 	vmov	s15, r3
 800bc00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800bc04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc08:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bc0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc18:	ee17 2a90 	vmov	r2, s15
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	605a      	str	r2, [r3, #4]
 800bc20:	e002      	b.n	800bc28 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800bc28:	4b13      	ldr	r3, [pc, #76]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d017      	beq.n	800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bc34:	4b10      	ldr	r3, [pc, #64]	@ (800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bc36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc38:	0e1b      	lsrs	r3, r3, #24
 800bc3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800bc46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc4a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bc4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc5a:	ee17 2a90 	vmov	r2, s15
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc62:	e002      	b.n	800bc6a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	609a      	str	r2, [r3, #8]
}
 800bc6a:	bf00      	nop
 800bc6c:	3724      	adds	r7, #36	@ 0x24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	46020c00 	.word	0x46020c00
 800bc7c:	4b742400 	.word	0x4b742400
 800bc80:	46000000 	.word	0x46000000
 800bc84:	080115e8 	.word	0x080115e8

0800bc88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b089      	sub	sp, #36	@ 0x24
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800bc90:	4ba6      	ldr	r3, [pc, #664]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc98:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800bc9a:	4ba4      	ldr	r3, [pc, #656]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc9e:	f003 0303 	and.w	r3, r3, #3
 800bca2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800bca4:	4ba1      	ldr	r3, [pc, #644]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca8:	0a1b      	lsrs	r3, r3, #8
 800bcaa:	f003 030f 	and.w	r3, r3, #15
 800bcae:	3301      	adds	r3, #1
 800bcb0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800bcb2:	4b9e      	ldr	r3, [pc, #632]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bcb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcb6:	091b      	lsrs	r3, r3, #4
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800bcbe:	4b9b      	ldr	r3, [pc, #620]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bcc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcc2:	08db      	lsrs	r3, r3, #3
 800bcc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	fb02 f303 	mul.w	r3, r2, r3
 800bcce:	ee07 3a90 	vmov	s15, r3
 800bcd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	d062      	beq.n	800bda6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	f200 8081 	bhi.w	800bdea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d024      	beq.n	800bd38 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d17a      	bne.n	800bdea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	ee07 3a90 	vmov	s15, r3
 800bcfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcfe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bd02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd06:	4b89      	ldr	r3, [pc, #548]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd0e:	ee07 3a90 	vmov	s15, r3
 800bd12:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd16:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd1a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bd1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bd22:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd32:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800bd36:	e08f      	b.n	800be58 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bd38:	4b7c      	ldr	r3, [pc, #496]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d005      	beq.n	800bd50 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800bd44:	4b79      	ldr	r3, [pc, #484]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	0f1b      	lsrs	r3, r3, #28
 800bd4a:	f003 030f 	and.w	r3, r3, #15
 800bd4e:	e006      	b.n	800bd5e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800bd50:	4b76      	ldr	r3, [pc, #472]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd56:	041b      	lsls	r3, r3, #16
 800bd58:	0f1b      	lsrs	r3, r3, #28
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	4a76      	ldr	r2, [pc, #472]	@ (800bf38 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd64:	ee07 3a90 	vmov	s15, r3
 800bd68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	ee07 3a90 	vmov	s15, r3
 800bd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd84:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd88:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bd8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd98:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bd9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bda0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bda4:	e058      	b.n	800be58 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	ee07 3a90 	vmov	s15, r3
 800bdac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bdb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdb8:	4b5c      	ldr	r3, [pc, #368]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bdba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdc0:	ee07 3a90 	vmov	s15, r3
 800bdc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdc8:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdcc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bdd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bdd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bde0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bde4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bde8:	e036      	b.n	800be58 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bdea:	4b50      	ldr	r3, [pc, #320]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d005      	beq.n	800be02 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800bdf6:	4b4d      	ldr	r3, [pc, #308]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	0f1b      	lsrs	r3, r3, #28
 800bdfc:	f003 030f 	and.w	r3, r3, #15
 800be00:	e006      	b.n	800be10 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800be02:	4b4a      	ldr	r3, [pc, #296]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be08:	041b      	lsls	r3, r3, #16
 800be0a:	0f1b      	lsrs	r3, r3, #28
 800be0c:	f003 030f 	and.w	r3, r3, #15
 800be10:	4a49      	ldr	r2, [pc, #292]	@ (800bf38 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800be12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be16:	ee07 3a90 	vmov	s15, r3
 800be1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	ee07 3a90 	vmov	s15, r3
 800be24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	ee07 3a90 	vmov	s15, r3
 800be32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be36:	ed97 6a02 	vldr	s12, [r7, #8]
 800be3a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800be3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800be4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be56:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800be58:	4b34      	ldr	r3, [pc, #208]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d017      	beq.n	800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be64:	4b31      	ldr	r3, [pc, #196]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be68:	0a5b      	lsrs	r3, r3, #9
 800be6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be6e:	ee07 3a90 	vmov	s15, r3
 800be72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800be76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be7a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be8a:	ee17 2a90 	vmov	r2, s15
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	601a      	str	r2, [r3, #0]
 800be92:	e002      	b.n	800be9a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800be9a:	4b24      	ldr	r3, [pc, #144]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d017      	beq.n	800bed6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bea6:	4b21      	ldr	r3, [pc, #132]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beaa:	0c1b      	lsrs	r3, r3, #16
 800beac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beb0:	ee07 3a90 	vmov	s15, r3
 800beb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800beb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bebc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bec0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800becc:	ee17 2a90 	vmov	r2, s15
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	605a      	str	r2, [r3, #4]
 800bed4:	e002      	b.n	800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800bedc:	4b13      	ldr	r3, [pc, #76]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d017      	beq.n	800bf18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bee8:	4b10      	ldr	r3, [pc, #64]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800beea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beec:	0e1b      	lsrs	r3, r3, #24
 800beee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bef2:	ee07 3a90 	vmov	s15, r3
 800bef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800befa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800befe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bf02:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf0e:	ee17 2a90 	vmov	r2, s15
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf16:	e002      	b.n	800bf1e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	609a      	str	r2, [r3, #8]
}
 800bf1e:	bf00      	nop
 800bf20:	3724      	adds	r7, #36	@ 0x24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	46020c00 	.word	0x46020c00
 800bf30:	4b742400 	.word	0x4b742400
 800bf34:	46000000 	.word	0x46000000
 800bf38:	080115e8 	.word	0x080115e8

0800bf3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08e      	sub	sp, #56	@ 0x38
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800bf46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf4a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800bf4e:	430b      	orrs	r3, r1
 800bf50:	d145      	bne.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800bf52:	4ba7      	ldr	r3, [pc, #668]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf5c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800bf5e:	4ba4      	ldr	r3, [pc, #656]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf64:	f003 0302 	and.w	r3, r3, #2
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d108      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf72:	d104      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800bf74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf78:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf7a:	f001 bb5a 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800bf7e:	4b9c      	ldr	r3, [pc, #624]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf8c:	d114      	bne.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf94:	d110      	bne.n	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf96:	4b96      	ldr	r3, [pc, #600]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bfa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfa4:	d103      	bne.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800bfa6:	23fa      	movs	r3, #250	@ 0xfa
 800bfa8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bfaa:	f001 bb42 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bfae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bfb2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bfb4:	f001 bb3d 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800bfb8:	4b8d      	ldr	r3, [pc, #564]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bfc4:	d107      	bne.n	800bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfcc:	d103      	bne.n	800bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800bfce:	4b89      	ldr	r3, [pc, #548]	@ (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800bfd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfd2:	f001 bb2e 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfda:	f001 bb2a 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bfde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bfe6:	430b      	orrs	r3, r1
 800bfe8:	d151      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800bfea:	4b81      	ldr	r3, [pc, #516]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bfec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bff0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800bff4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff8:	2b80      	cmp	r3, #128	@ 0x80
 800bffa:	d035      	beq.n	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800bffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffe:	2b80      	cmp	r3, #128	@ 0x80
 800c000:	d841      	bhi.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c004:	2b60      	cmp	r3, #96	@ 0x60
 800c006:	d02a      	beq.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00a:	2b60      	cmp	r3, #96	@ 0x60
 800c00c:	d83b      	bhi.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c010:	2b40      	cmp	r3, #64	@ 0x40
 800c012:	d009      	beq.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c016:	2b40      	cmp	r3, #64	@ 0x40
 800c018:	d835      	bhi.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00c      	beq.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c022:	2b20      	cmp	r3, #32
 800c024:	d012      	beq.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c026:	e02e      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fb77 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c034:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c036:	f001 bafc 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c03a:	f107 0318 	add.w	r3, r7, #24
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff fcc8 	bl	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c048:	f001 baf3 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c04c:	f107 030c 	add.w	r3, r7, #12
 800c050:	4618      	mov	r0, r3
 800c052:	f7ff fe19 	bl	800bc88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c05a:	f001 baea 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c05e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c064:	f001 bae5 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c068:	4b61      	ldr	r3, [pc, #388]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c074:	d103      	bne.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c076:	4b60      	ldr	r3, [pc, #384]	@ (800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c078:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c07a:	f001 bada 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c07e:	2300      	movs	r3, #0
 800c080:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c082:	f001 bad6 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c086:	2300      	movs	r3, #0
 800c088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c08a:	f001 bad2 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c092:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c096:	430b      	orrs	r3, r1
 800c098:	d158      	bne.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c09a:	4b55      	ldr	r3, [pc, #340]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c09c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c0a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0ac:	d03b      	beq.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0b4:	d846      	bhi.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c0bc:	d02e      	beq.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c0c4:	d83e      	bhi.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0cc:	d00b      	beq.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0d4:	d836      	bhi.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00d      	beq.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0e2:	d012      	beq.n	800c10a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c0e4:	e02e      	b.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff fb18 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0f4:	f001 ba9d 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0f8:	f107 0318 	add.w	r3, r7, #24
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fc69 	bl	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c106:	f001 ba94 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c10a:	f107 030c 	add.w	r3, r7, #12
 800c10e:	4618      	mov	r0, r3
 800c110:	f7ff fdba 	bl	800bc88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c118:	f001 ba8b 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c11c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c120:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c122:	f001 ba86 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c126:	4b32      	ldr	r3, [pc, #200]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c12e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c132:	d103      	bne.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c134:	4b30      	ldr	r3, [pc, #192]	@ (800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c136:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c138:	f001 ba7b 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c13c:	2300      	movs	r3, #0
 800c13e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c140:	f001 ba77 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c144:	2300      	movs	r3, #0
 800c146:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c148:	f001 ba73 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c14c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c150:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c154:	430b      	orrs	r3, r1
 800c156:	d126      	bne.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c158:	4b25      	ldr	r3, [pc, #148]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c15a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c15e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c162:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c164:	4b22      	ldr	r3, [pc, #136]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c16c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c170:	d106      	bne.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c174:	2b00      	cmp	r3, #0
 800c176:	d103      	bne.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c178:	4b1f      	ldr	r3, [pc, #124]	@ (800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c17a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c17c:	f001 ba59 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c180:	4b1b      	ldr	r3, [pc, #108]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c18c:	d107      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c194:	d103      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c196:	4b19      	ldr	r3, [pc, #100]	@ (800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c198:	637b      	str	r3, [r7, #52]	@ 0x34
 800c19a:	f001 ba4a 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1a2:	f001 ba46 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c1a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1aa:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c1ae:	430b      	orrs	r3, r1
 800c1b0:	d16e      	bne.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c1b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c1b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1b8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c1bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c1c4:	d03d      	beq.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c1cc:	d85c      	bhi.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1d4:	d014      	beq.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1dc:	d854      	bhi.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d01f      	beq.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c1ea:	d012      	beq.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c1ec:	e04c      	b.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c1ee:	bf00      	nop
 800c1f0:	46020c00 	.word	0x46020c00
 800c1f4:	0007a120 	.word	0x0007a120
 800c1f8:	00f42400 	.word	0x00f42400
 800c1fc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff fa8b 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c20c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c20e:	f001 ba10 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c212:	f107 0318 	add.w	r3, r7, #24
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff fbdc 	bl	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c220:	f001 ba07 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c224:	4ba7      	ldr	r3, [pc, #668]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c22c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c230:	d103      	bne.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c232:	4ba5      	ldr	r3, [pc, #660]	@ (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c234:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c236:	f001 b9fc 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c23a:	2300      	movs	r3, #0
 800c23c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c23e:	f001 b9f8 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c242:	4ba0      	ldr	r3, [pc, #640]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f003 0320 	and.w	r3, r3, #32
 800c24a:	2b20      	cmp	r3, #32
 800c24c:	d118      	bne.n	800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c24e:	4b9d      	ldr	r3, [pc, #628]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c256:	2b00      	cmp	r3, #0
 800c258:	d005      	beq.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c25a:	4b9a      	ldr	r3, [pc, #616]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	0e1b      	lsrs	r3, r3, #24
 800c260:	f003 030f 	and.w	r3, r3, #15
 800c264:	e006      	b.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c266:	4b97      	ldr	r3, [pc, #604]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c268:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c26c:	041b      	lsls	r3, r3, #16
 800c26e:	0e1b      	lsrs	r3, r3, #24
 800c270:	f003 030f 	and.w	r3, r3, #15
 800c274:	4a95      	ldr	r2, [pc, #596]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c27a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c27c:	f001 b9d9 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c284:	f001 b9d5 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c288:	2300      	movs	r3, #0
 800c28a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c28c:	f001 b9d1 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c290:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c294:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c298:	430b      	orrs	r3, r1
 800c29a:	d17f      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c29c:	4b89      	ldr	r3, [pc, #548]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c29e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c2a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d165      	bne.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c2ae:	4b85      	ldr	r3, [pc, #532]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2b4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c2b8:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c2c0:	d034      	beq.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c2c8:	d853      	bhi.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2d0:	d00b      	beq.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2d8:	d84b      	bhi.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d016      	beq.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c2e6:	d009      	beq.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c2e8:	e043      	b.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7ff fa16 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c2f8:	f001 b99b 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2fc:	f107 0318 	add.w	r3, r7, #24
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff fb67 	bl	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c30a:	f001 b992 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c30e:	4b6d      	ldr	r3, [pc, #436]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c31a:	d103      	bne.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c31c:	4b6a      	ldr	r3, [pc, #424]	@ (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c31e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c320:	f001 b987 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c324:	2300      	movs	r3, #0
 800c326:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c328:	f001 b983 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c32c:	4b65      	ldr	r3, [pc, #404]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f003 0320 	and.w	r3, r3, #32
 800c334:	2b20      	cmp	r3, #32
 800c336:	d118      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c338:	4b62      	ldr	r3, [pc, #392]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d005      	beq.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c344:	4b5f      	ldr	r3, [pc, #380]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	0e1b      	lsrs	r3, r3, #24
 800c34a:	f003 030f 	and.w	r3, r3, #15
 800c34e:	e006      	b.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c350:	4b5c      	ldr	r3, [pc, #368]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c356:	041b      	lsls	r3, r3, #16
 800c358:	0e1b      	lsrs	r3, r3, #24
 800c35a:	f003 030f 	and.w	r3, r3, #15
 800c35e:	4a5b      	ldr	r2, [pc, #364]	@ (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c364:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c366:	f001 b964 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c36e:	f001 b960 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c372:	2300      	movs	r3, #0
 800c374:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c376:	f001 b95c 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c380:	d108      	bne.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c386:	4618      	mov	r0, r3
 800c388:	f7ff f9ca 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c390:	f001 b94f 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c394:	2300      	movs	r3, #0
 800c396:	637b      	str	r3, [r7, #52]	@ 0x34
 800c398:	f001 b94b 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3a0:	1e51      	subs	r1, r2, #1
 800c3a2:	430b      	orrs	r3, r1
 800c3a4:	d136      	bne.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c3a6:	4b47      	ldr	r3, [pc, #284]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c3a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3ac:	f003 0303 	and.w	r3, r3, #3
 800c3b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d104      	bne.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c3b8:	f7fe f9cc 	bl	800a754 <HAL_RCC_GetPCLK2Freq>
 800c3bc:	6378      	str	r0, [r7, #52]	@ 0x34
 800c3be:	f001 b938 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d104      	bne.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c3c8:	f7fe f894 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800c3cc:	6378      	str	r0, [r7, #52]	@ 0x34
 800c3ce:	f001 b930 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c3d2:	4b3c      	ldr	r3, [pc, #240]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3de:	d106      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d103      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c3e6:	4b3a      	ldr	r3, [pc, #232]	@ (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ea:	f001 b922 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c3ee:	4b35      	ldr	r3, [pc, #212]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c3f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c3f4:	f003 0302 	and.w	r3, r3, #2
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d107      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fe:	2b03      	cmp	r3, #3
 800c400:	d104      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c406:	637b      	str	r3, [r7, #52]	@ 0x34
 800c408:	f001 b913 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c40c:	2300      	movs	r3, #0
 800c40e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c410:	f001 b90f 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c418:	1e91      	subs	r1, r2, #2
 800c41a:	430b      	orrs	r3, r1
 800c41c:	d136      	bne.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c41e:	4b29      	ldr	r3, [pc, #164]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c424:	f003 030c 	and.w	r3, r3, #12
 800c428:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d104      	bne.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c430:	f7fe f97c 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800c434:	6378      	str	r0, [r7, #52]	@ 0x34
 800c436:	f001 b8fc 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43c:	2b04      	cmp	r3, #4
 800c43e:	d104      	bne.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c440:	f7fe f858 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800c444:	6378      	str	r0, [r7, #52]	@ 0x34
 800c446:	f001 b8f4 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c44a:	4b1e      	ldr	r3, [pc, #120]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c456:	d106      	bne.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45a:	2b08      	cmp	r3, #8
 800c45c:	d103      	bne.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c45e:	4b1c      	ldr	r3, [pc, #112]	@ (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c460:	637b      	str	r3, [r7, #52]	@ 0x34
 800c462:	f001 b8e6 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c466:	4b17      	ldr	r3, [pc, #92]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c46c:	f003 0302 	and.w	r3, r3, #2
 800c470:	2b02      	cmp	r3, #2
 800c472:	d107      	bne.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c476:	2b0c      	cmp	r3, #12
 800c478:	d104      	bne.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800c47a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c480:	f001 b8d7 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800c484:	2300      	movs	r3, #0
 800c486:	637b      	str	r3, [r7, #52]	@ 0x34
 800c488:	f001 b8d3 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800c48c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c490:	1f11      	subs	r1, r2, #4
 800c492:	430b      	orrs	r3, r1
 800c494:	d13f      	bne.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c496:	4b0b      	ldr	r3, [pc, #44]	@ (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c49c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c4a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d104      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c4a8:	f7fe f940 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800c4ac:	6378      	str	r0, [r7, #52]	@ 0x34
 800c4ae:	f001 b8c0 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b4:	2b10      	cmp	r3, #16
 800c4b6:	d10d      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c4b8:	f7fe f81c 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800c4bc:	6378      	str	r0, [r7, #52]	@ 0x34
 800c4be:	f001 b8b8 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c4c2:	bf00      	nop
 800c4c4:	46020c00 	.word	0x46020c00
 800c4c8:	02dc6c00 	.word	0x02dc6c00
 800c4cc:	080115e8 	.word	0x080115e8
 800c4d0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c4d4:	4ba8      	ldr	r3, [pc, #672]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4e0:	d106      	bne.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	2b20      	cmp	r3, #32
 800c4e6:	d103      	bne.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800c4e8:	4ba4      	ldr	r3, [pc, #656]	@ (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c4ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4ec:	f001 b8a1 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c4f0:	4ba1      	ldr	r3, [pc, #644]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4f6:	f003 0302 	and.w	r3, r3, #2
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d107      	bne.n	800c50e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	2b30      	cmp	r3, #48	@ 0x30
 800c502:	d104      	bne.n	800c50e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800c504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c508:	637b      	str	r3, [r7, #52]	@ 0x34
 800c50a:	f001 b892 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800c50e:	2300      	movs	r3, #0
 800c510:	637b      	str	r3, [r7, #52]	@ 0x34
 800c512:	f001 b88e 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800c516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c51a:	f1a2 0108 	sub.w	r1, r2, #8
 800c51e:	430b      	orrs	r3, r1
 800c520:	d136      	bne.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c522:	4b95      	ldr	r3, [pc, #596]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c528:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c52c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c530:	2b00      	cmp	r3, #0
 800c532:	d104      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c534:	f7fe f8fa 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800c538:	6378      	str	r0, [r7, #52]	@ 0x34
 800c53a:	f001 b87a 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800c53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c540:	2b40      	cmp	r3, #64	@ 0x40
 800c542:	d104      	bne.n	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c544:	f7fd ffd6 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800c548:	6378      	str	r0, [r7, #52]	@ 0x34
 800c54a:	f001 b872 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c54e:	4b8a      	ldr	r3, [pc, #552]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c55a:	d106      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800c55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55e:	2b80      	cmp	r3, #128	@ 0x80
 800c560:	d103      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800c562:	4b86      	ldr	r3, [pc, #536]	@ (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c564:	637b      	str	r3, [r7, #52]	@ 0x34
 800c566:	f001 b864 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c56a:	4b83      	ldr	r3, [pc, #524]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c56c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c570:	f003 0302 	and.w	r3, r3, #2
 800c574:	2b02      	cmp	r3, #2
 800c576:	d107      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c57c:	d104      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800c57e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c582:	637b      	str	r3, [r7, #52]	@ 0x34
 800c584:	f001 b855 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800c588:	2300      	movs	r3, #0
 800c58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c58c:	f001 b851 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800c590:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c594:	f1a2 0110 	sub.w	r1, r2, #16
 800c598:	430b      	orrs	r3, r1
 800c59a:	d139      	bne.n	800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c59c:	4b76      	ldr	r3, [pc, #472]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c59e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c5a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c5a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d104      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c5ae:	f7fe f8bd 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800c5b2:	6378      	str	r0, [r7, #52]	@ 0x34
 800c5b4:	f001 b83d 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5be:	d104      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c5c0:	f7fd ff98 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800c5c4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c5c6:	f001 b834 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c5ca:	4b6b      	ldr	r3, [pc, #428]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5d6:	d107      	bne.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5de:	d103      	bne.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800c5e0:	4b66      	ldr	r3, [pc, #408]	@ (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c5e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5e4:	f001 b825 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c5e8:	4b63      	ldr	r3, [pc, #396]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5ee:	f003 0302 	and.w	r3, r3, #2
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d108      	bne.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5fc:	d104      	bne.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800c5fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c602:	637b      	str	r3, [r7, #52]	@ 0x34
 800c604:	f001 b815 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c608:	2300      	movs	r3, #0
 800c60a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c60c:	f001 b811 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800c610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c614:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800c618:	430b      	orrs	r3, r1
 800c61a:	d139      	bne.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800c61c:	4b56      	ldr	r3, [pc, #344]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c61e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c622:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c626:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800c628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d104      	bne.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c62e:	f7fe f87d 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800c632:	6378      	str	r0, [r7, #52]	@ 0x34
 800c634:	f000 bffd 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800c638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c63e:	d104      	bne.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c640:	f7fd ff58 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800c644:	6378      	str	r0, [r7, #52]	@ 0x34
 800c646:	f000 bff4 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800c64a:	4b4b      	ldr	r3, [pc, #300]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c656:	d107      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800c658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c65e:	d103      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800c660:	4b46      	ldr	r3, [pc, #280]	@ (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c662:	637b      	str	r3, [r7, #52]	@ 0x34
 800c664:	f000 bfe5 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800c668:	4b43      	ldr	r3, [pc, #268]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c66a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c66e:	f003 0302 	and.w	r3, r3, #2
 800c672:	2b02      	cmp	r3, #2
 800c674:	d108      	bne.n	800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800c676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c678:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c67c:	d104      	bne.n	800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800c67e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c682:	637b      	str	r3, [r7, #52]	@ 0x34
 800c684:	f000 bfd5 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c688:	2300      	movs	r3, #0
 800c68a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c68c:	f000 bfd1 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800c690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c694:	f1a2 0120 	sub.w	r1, r2, #32
 800c698:	430b      	orrs	r3, r1
 800c69a:	d158      	bne.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c69c:	4b36      	ldr	r3, [pc, #216]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c69e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c6a2:	f003 0307 	and.w	r3, r3, #7
 800c6a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d104      	bne.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800c6ae:	f7fe f865 	bl	800a77c <HAL_RCC_GetPCLK3Freq>
 800c6b2:	6378      	str	r0, [r7, #52]	@ 0x34
 800c6b4:	f000 bfbd 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d104      	bne.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c6be:	f7fd ff19 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800c6c2:	6378      	str	r0, [r7, #52]	@ 0x34
 800c6c4:	f000 bfb5 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c6c8:	4b2b      	ldr	r3, [pc, #172]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6d4:	d106      	bne.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d103      	bne.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800c6dc:	4b27      	ldr	r3, [pc, #156]	@ (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c6de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6e0:	f000 bfa7 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c6e4:	4b24      	ldr	r3, [pc, #144]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6ea:	f003 0302 	and.w	r3, r3, #2
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d107      	bne.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	d104      	bne.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800c6f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6fe:	f000 bf98 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800c702:	4b1d      	ldr	r3, [pc, #116]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f003 0320 	and.w	r3, r3, #32
 800c70a:	2b20      	cmp	r3, #32
 800c70c:	d11b      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800c70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c710:	2b04      	cmp	r3, #4
 800c712:	d118      	bne.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c714:	4b18      	ldr	r3, [pc, #96]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800c720:	4b15      	ldr	r3, [pc, #84]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	0e1b      	lsrs	r3, r3, #24
 800c726:	f003 030f 	and.w	r3, r3, #15
 800c72a:	e006      	b.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800c72c:	4b12      	ldr	r3, [pc, #72]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c72e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c732:	041b      	lsls	r3, r3, #16
 800c734:	0e1b      	lsrs	r3, r3, #24
 800c736:	f003 030f 	and.w	r3, r3, #15
 800c73a:	4a11      	ldr	r2, [pc, #68]	@ (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c740:	637b      	str	r3, [r7, #52]	@ 0x34
 800c742:	f000 bf76 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800c746:	2300      	movs	r3, #0
 800c748:	637b      	str	r3, [r7, #52]	@ 0x34
 800c74a:	f000 bf72 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800c74e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c752:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c756:	430b      	orrs	r3, r1
 800c758:	d172      	bne.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c75a:	4b07      	ldr	r3, [pc, #28]	@ (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c75c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c760:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c764:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c76c:	d10a      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c76e:	f7fd fec1 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800c772:	6378      	str	r0, [r7, #52]	@ 0x34
 800c774:	f000 bf5d 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c778:	46020c00 	.word	0x46020c00
 800c77c:	00f42400 	.word	0x00f42400
 800c780:	080115e8 	.word	0x080115e8
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c78a:	d108      	bne.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c78c:	f107 0318 	add.w	r3, r7, #24
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff f91f 	bl	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c796:	6a3b      	ldr	r3, [r7, #32]
 800c798:	637b      	str	r3, [r7, #52]	@ 0x34
 800c79a:	f000 bf4a 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d104      	bne.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800c7a4:	f7fd ffa8 	bl	800a6f8 <HAL_RCC_GetHCLKFreq>
 800c7a8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c7aa:	f000 bf42 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c7b4:	d122      	bne.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c7b6:	4bb0      	ldr	r3, [pc, #704]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 0320 	and.w	r3, r3, #32
 800c7be:	2b20      	cmp	r3, #32
 800c7c0:	d118      	bne.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c7c2:	4bad      	ldr	r3, [pc, #692]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d005      	beq.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800c7ce:	4baa      	ldr	r3, [pc, #680]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	0e1b      	lsrs	r3, r3, #24
 800c7d4:	f003 030f 	and.w	r3, r3, #15
 800c7d8:	e006      	b.n	800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800c7da:	4ba7      	ldr	r3, [pc, #668]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c7e0:	041b      	lsls	r3, r3, #16
 800c7e2:	0e1b      	lsrs	r3, r3, #24
 800c7e4:	f003 030f 	and.w	r3, r3, #15
 800c7e8:	4aa4      	ldr	r2, [pc, #656]	@ (800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c7ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7f0:	f000 bf1f 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7f8:	f000 bf1b 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c7fc:	4b9e      	ldr	r3, [pc, #632]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c808:	d107      	bne.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c810:	d103      	bne.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800c812:	4b9b      	ldr	r3, [pc, #620]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c814:	637b      	str	r3, [r7, #52]	@ 0x34
 800c816:	f000 bf0c 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c81a:	4b97      	ldr	r3, [pc, #604]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c826:	d107      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800c828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c82e:	d103      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800c830:	4b93      	ldr	r3, [pc, #588]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c832:	637b      	str	r3, [r7, #52]	@ 0x34
 800c834:	f000 befd 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800c838:	2300      	movs	r3, #0
 800c83a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c83c:	f000 bef9 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800c840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c844:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c848:	430b      	orrs	r3, r1
 800c84a:	d158      	bne.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800c84c:	4b8a      	ldr	r3, [pc, #552]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c84e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c852:	f003 0307 	and.w	r3, r3, #7
 800c856:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85a:	2b04      	cmp	r3, #4
 800c85c:	d84b      	bhi.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800c85e:	a201      	add	r2, pc, #4	@ (adr r2, 800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800c860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c864:	0800c89d 	.word	0x0800c89d
 800c868:	0800c879 	.word	0x0800c879
 800c86c:	0800c88b 	.word	0x0800c88b
 800c870:	0800c8a7 	.word	0x0800c8a7
 800c874:	0800c8b1 	.word	0x0800c8b1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fe ff4f 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c884:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c886:	f000 bed4 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c88a:	f107 030c 	add.w	r3, r7, #12
 800c88e:	4618      	mov	r0, r3
 800c890:	f7ff f9fa 	bl	800bc88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c898:	f000 becb 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c89c:	f7fd ff2c 	bl	800a6f8 <HAL_RCC_GetHCLKFreq>
 800c8a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c8a2:	f000 bec6 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c8a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c8aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8ac:	f000 bec1 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c8b0:	4b71      	ldr	r3, [pc, #452]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 0320 	and.w	r3, r3, #32
 800c8b8:	2b20      	cmp	r3, #32
 800c8ba:	d118      	bne.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c8bc:	4b6e      	ldr	r3, [pc, #440]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d005      	beq.n	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800c8c8:	4b6b      	ldr	r3, [pc, #428]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	0e1b      	lsrs	r3, r3, #24
 800c8ce:	f003 030f 	and.w	r3, r3, #15
 800c8d2:	e006      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800c8d4:	4b68      	ldr	r3, [pc, #416]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c8d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8da:	041b      	lsls	r3, r3, #16
 800c8dc:	0e1b      	lsrs	r3, r3, #24
 800c8de:	f003 030f 	and.w	r3, r3, #15
 800c8e2:	4a66      	ldr	r2, [pc, #408]	@ (800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c8ea:	f000 bea2 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8f2:	f000 be9e 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8fa:	f000 be9a 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800c8fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c902:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800c906:	430b      	orrs	r3, r1
 800c908:	d167      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800c90a:	4b5b      	ldr	r3, [pc, #364]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c90c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c910:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c914:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c918:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c91c:	d036      	beq.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800c91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c920:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c924:	d855      	bhi.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c928:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c92c:	d029      	beq.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800c92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c930:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c934:	d84d      	bhi.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c93c:	d013      	beq.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c944:	d845      	bhi.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d015      	beq.n	800c978 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800c94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c94e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c952:	d13e      	bne.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fe fee1 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c960:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c962:	f000 be66 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c966:	f107 030c 	add.w	r3, r7, #12
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff f98c 	bl	800bc88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c974:	f000 be5d 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c978:	f7fd febe 	bl	800a6f8 <HAL_RCC_GetHCLKFreq>
 800c97c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c97e:	f000 be58 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c982:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c988:	f000 be53 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c98c:	4b3a      	ldr	r3, [pc, #232]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 0320 	and.w	r3, r3, #32
 800c994:	2b20      	cmp	r3, #32
 800c996:	d118      	bne.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c998:	4b37      	ldr	r3, [pc, #220]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d005      	beq.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800c9a4:	4b34      	ldr	r3, [pc, #208]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	0e1b      	lsrs	r3, r3, #24
 800c9aa:	f003 030f 	and.w	r3, r3, #15
 800c9ae:	e006      	b.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c9b0:	4b31      	ldr	r3, [pc, #196]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c9b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c9b6:	041b      	lsls	r3, r3, #16
 800c9b8:	0e1b      	lsrs	r3, r3, #24
 800c9ba:	f003 030f 	and.w	r3, r3, #15
 800c9be:	4a2f      	ldr	r2, [pc, #188]	@ (800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c9c6:	f000 be34 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9ce:	f000 be30 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9d6:	f000 be2c 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800c9da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9de:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800c9e2:	430b      	orrs	r3, r1
 800c9e4:	d152      	bne.n	800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c9e6:	4b24      	ldr	r3, [pc, #144]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c9e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c9f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d104      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c9f8:	f7fd fe98 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800c9fc:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9fe:	f000 be18 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ca02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca08:	d104      	bne.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca0a:	f7fd fd73 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800ca0e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca10:	f000 be0f 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ca14:	4b18      	ldr	r3, [pc, #96]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca20:	d107      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca28:	d103      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800ca2a:	4b15      	ldr	r3, [pc, #84]	@ (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ca2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca2e:	f000 be00 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ca32:	4b11      	ldr	r3, [pc, #68]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 0320 	and.w	r3, r3, #32
 800ca3a:	2b20      	cmp	r3, #32
 800ca3c:	d122      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ca44:	d11e      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca46:	4b0c      	ldr	r3, [pc, #48]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d005      	beq.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ca52:	4b09      	ldr	r3, [pc, #36]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	0e1b      	lsrs	r3, r3, #24
 800ca58:	f003 030f 	and.w	r3, r3, #15
 800ca5c:	e006      	b.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ca5e:	4b06      	ldr	r3, [pc, #24]	@ (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca64:	041b      	lsls	r3, r3, #16
 800ca66:	0e1b      	lsrs	r3, r3, #24
 800ca68:	f003 030f 	and.w	r3, r3, #15
 800ca6c:	4a03      	ldr	r2, [pc, #12]	@ (800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ca6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca74:	f000 bddd 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ca78:	46020c00 	.word	0x46020c00
 800ca7c:	080115e8 	.word	0x080115e8
 800ca80:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ca84:	2300      	movs	r3, #0
 800ca86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca88:	f000 bdd3 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ca8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca90:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ca94:	430b      	orrs	r3, r1
 800ca96:	d14c      	bne.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ca98:	4ba8      	ldr	r3, [pc, #672]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca9e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800caa2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800caa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d104      	bne.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800caaa:	f7fd fe3f 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800caae:	6378      	str	r0, [r7, #52]	@ 0x34
 800cab0:	f000 bdbf 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800cab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800caba:	d104      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cabc:	f7fd fd1a 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800cac0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cac2:	f000 bdb6 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800cac6:	4b9d      	ldr	r3, [pc, #628]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cad2:	d107      	bne.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800cad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cada:	d103      	bne.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800cadc:	4b98      	ldr	r3, [pc, #608]	@ (800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cade:	637b      	str	r3, [r7, #52]	@ 0x34
 800cae0:	f000 bda7 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800cae4:	4b95      	ldr	r3, [pc, #596]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 0320 	and.w	r3, r3, #32
 800caec:	2b20      	cmp	r3, #32
 800caee:	d11c      	bne.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800caf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800caf6:	d118      	bne.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800caf8:	4b90      	ldr	r3, [pc, #576]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d005      	beq.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800cb04:	4b8d      	ldr	r3, [pc, #564]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	0e1b      	lsrs	r3, r3, #24
 800cb0a:	f003 030f 	and.w	r3, r3, #15
 800cb0e:	e006      	b.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800cb10:	4b8a      	ldr	r3, [pc, #552]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb16:	041b      	lsls	r3, r3, #16
 800cb18:	0e1b      	lsrs	r3, r3, #24
 800cb1a:	f003 030f 	and.w	r3, r3, #15
 800cb1e:	4a89      	ldr	r2, [pc, #548]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb24:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb26:	f000 bd84 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb2e:	f000 bd80 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800cb32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb36:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cb3a:	430b      	orrs	r3, r1
 800cb3c:	d158      	bne.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cb3e:	4b7f      	ldr	r3, [pc, #508]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cb44:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cb48:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4c:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb4e:	d028      	beq.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800cb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb52:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb54:	d848      	bhi.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800cb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb58:	2b80      	cmp	r3, #128	@ 0x80
 800cb5a:	d00e      	beq.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5e:	2b80      	cmp	r3, #128	@ 0x80
 800cb60:	d842      	bhi.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800cb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d003      	beq.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800cb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6a:	2b40      	cmp	r3, #64	@ 0x40
 800cb6c:	d014      	beq.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800cb6e:	e03b      	b.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800cb70:	f7fd fe04 	bl	800a77c <HAL_RCC_GetPCLK3Freq>
 800cb74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cb76:	f000 bd5c 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb7a:	4b70      	ldr	r3, [pc, #448]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb86:	d103      	bne.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800cb88:	4b6d      	ldr	r3, [pc, #436]	@ (800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cb8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cb8c:	f000 bd51 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cb90:	2300      	movs	r3, #0
 800cb92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb94:	f000 bd4d 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800cb98:	f7fd fcac 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800cb9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cb9e:	f000 bd48 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cba2:	4b66      	ldr	r3, [pc, #408]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f003 0320 	and.w	r3, r3, #32
 800cbaa:	2b20      	cmp	r3, #32
 800cbac:	d118      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cbae:	4b63      	ldr	r3, [pc, #396]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d005      	beq.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800cbba:	4b60      	ldr	r3, [pc, #384]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	0e1b      	lsrs	r3, r3, #24
 800cbc0:	f003 030f 	and.w	r3, r3, #15
 800cbc4:	e006      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800cbc6:	4b5d      	ldr	r3, [pc, #372]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cbcc:	041b      	lsls	r3, r3, #16
 800cbce:	0e1b      	lsrs	r3, r3, #24
 800cbd0:	f003 030f 	and.w	r3, r3, #15
 800cbd4:	4a5b      	ldr	r2, [pc, #364]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cbd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cbdc:	f000 bd29 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbe4:	f000 bd25 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbec:	f000 bd21 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800cbf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbf4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800cbf8:	430b      	orrs	r3, r1
 800cbfa:	d14c      	bne.n	800cc96 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800cbfc:	4b4f      	ldr	r3, [pc, #316]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cc02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cc06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800cc08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d104      	bne.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc0e:	f7fd fd8d 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800cc12:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc14:	f000 bd0d 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800cc18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc1e:	d104      	bne.n	800cc2a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc20:	f7fd fc68 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800cc24:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc26:	f000 bd04 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800cc2a:	4b44      	ldr	r3, [pc, #272]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc36:	d107      	bne.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800cc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc3e:	d103      	bne.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800cc40:	4b3f      	ldr	r3, [pc, #252]	@ (800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cc42:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc44:	f000 bcf5 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800cc48:	4b3c      	ldr	r3, [pc, #240]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0320 	and.w	r3, r3, #32
 800cc50:	2b20      	cmp	r3, #32
 800cc52:	d11c      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800cc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc56:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cc5a:	d118      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cc5c:	4b37      	ldr	r3, [pc, #220]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d005      	beq.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800cc68:	4b34      	ldr	r3, [pc, #208]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	0e1b      	lsrs	r3, r3, #24
 800cc6e:	f003 030f 	and.w	r3, r3, #15
 800cc72:	e006      	b.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800cc74:	4b31      	ldr	r3, [pc, #196]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc7a:	041b      	lsls	r3, r3, #16
 800cc7c:	0e1b      	lsrs	r3, r3, #24
 800cc7e:	f003 030f 	and.w	r3, r3, #15
 800cc82:	4a30      	ldr	r2, [pc, #192]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cc84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc88:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc8a:	f000 bcd2 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc92:	f000 bcce 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800cc96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc9a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800cc9e:	430b      	orrs	r3, r1
 800cca0:	d152      	bne.n	800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800cca2:	4b26      	ldr	r3, [pc, #152]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cca4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cca8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800ccac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800ccae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d104      	bne.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ccb4:	f7fd fd3a 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800ccb8:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccba:	f000 bcba 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccc4:	d104      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccc6:	f7fd fc15 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800ccca:	6378      	str	r0, [r7, #52]	@ 0x34
 800cccc:	f000 bcb1 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800ccd0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccdc:	d107      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800ccde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cce4:	d103      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800cce6:	4b16      	ldr	r3, [pc, #88]	@ (800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cce8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccea:	f000 bca2 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800ccee:	4b13      	ldr	r3, [pc, #76]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 0320 	and.w	r3, r3, #32
 800ccf6:	2b20      	cmp	r3, #32
 800ccf8:	d11c      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cd00:	d118      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd02:	4b0e      	ldr	r3, [pc, #56]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d005      	beq.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800cd0e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd10:	689b      	ldr	r3, [r3, #8]
 800cd12:	0e1b      	lsrs	r3, r3, #24
 800cd14:	f003 030f 	and.w	r3, r3, #15
 800cd18:	e006      	b.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800cd1a:	4b08      	ldr	r3, [pc, #32]	@ (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cd1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd20:	041b      	lsls	r3, r3, #16
 800cd22:	0e1b      	lsrs	r3, r3, #24
 800cd24:	f003 030f 	and.w	r3, r3, #15
 800cd28:	4a06      	ldr	r2, [pc, #24]	@ (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cd2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd30:	f000 bc7f 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800cd34:	2300      	movs	r3, #0
 800cd36:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd38:	f000 bc7b 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd3c:	46020c00 	.word	0x46020c00
 800cd40:	00f42400 	.word	0x00f42400
 800cd44:	080115e8 	.word	0x080115e8
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800cd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd4c:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800cd50:	430b      	orrs	r3, r1
 800cd52:	d14c      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800cd54:	4ba6      	ldr	r3, [pc, #664]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cd5a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800cd5e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800cd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d104      	bne.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd66:	f7fd fce1 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800cd6a:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd6c:	f000 bc61 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800cd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cd76:	d104      	bne.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd78:	f7fd fbbc 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800cd7c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd7e:	f000 bc58 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800cd82:	4b9b      	ldr	r3, [pc, #620]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd8e:	d107      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800cd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd96:	d103      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800cd98:	4b96      	ldr	r3, [pc, #600]	@ (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cd9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd9c:	f000 bc49 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800cda0:	4b93      	ldr	r3, [pc, #588]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f003 0320 	and.w	r3, r3, #32
 800cda8:	2b20      	cmp	r3, #32
 800cdaa:	d11c      	bne.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800cdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cdb2:	d118      	bne.n	800cde6 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cdb4:	4b8e      	ldr	r3, [pc, #568]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d005      	beq.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800cdc0:	4b8b      	ldr	r3, [pc, #556]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	0e1b      	lsrs	r3, r3, #24
 800cdc6:	f003 030f 	and.w	r3, r3, #15
 800cdca:	e006      	b.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800cdcc:	4b88      	ldr	r3, [pc, #544]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cdd2:	041b      	lsls	r3, r3, #16
 800cdd4:	0e1b      	lsrs	r3, r3, #24
 800cdd6:	f003 030f 	and.w	r3, r3, #15
 800cdda:	4a87      	ldr	r2, [pc, #540]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cde2:	f000 bc26 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800cde6:	2300      	movs	r3, #0
 800cde8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdea:	f000 bc22 	b.w	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800cdee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cdf6:	430b      	orrs	r3, r1
 800cdf8:	d164      	bne.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800cdfa:	4b7d      	ldr	r3, [pc, #500]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ce00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800ce06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d120      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ce0c:	4b78      	ldr	r3, [pc, #480]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 0320 	and.w	r3, r3, #32
 800ce14:	2b20      	cmp	r3, #32
 800ce16:	d117      	bne.n	800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce18:	4b75      	ldr	r3, [pc, #468]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d005      	beq.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800ce24:	4b72      	ldr	r3, [pc, #456]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	0e1b      	lsrs	r3, r3, #24
 800ce2a:	f003 030f 	and.w	r3, r3, #15
 800ce2e:	e006      	b.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800ce30:	4b6f      	ldr	r3, [pc, #444]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce36:	041b      	lsls	r3, r3, #16
 800ce38:	0e1b      	lsrs	r3, r3, #24
 800ce3a:	f003 030f 	and.w	r3, r3, #15
 800ce3e:	4a6e      	ldr	r2, [pc, #440]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800ce40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce46:	e3f4      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce4c:	e3f1      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800ce4e:	4b68      	ldr	r3, [pc, #416]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce5c:	d112      	bne.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce64:	d10e      	bne.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce66:	4b62      	ldr	r3, [pc, #392]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce74:	d102      	bne.n	800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800ce76:	23fa      	movs	r3, #250	@ 0xfa
 800ce78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce7a:	e3da      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ce7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ce80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce82:	e3d6      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800ce84:	4b5a      	ldr	r3, [pc, #360]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce90:	d106      	bne.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800ce92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce98:	d102      	bne.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800ce9a:	4b56      	ldr	r3, [pc, #344]	@ (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ce9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce9e:	e3c8      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800cea0:	4b53      	ldr	r3, [pc, #332]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cea6:	f003 0302 	and.w	r3, r3, #2
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d107      	bne.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800ceae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ceb4:	d103      	bne.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800ceb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ceba:	637b      	str	r3, [r7, #52]	@ 0x34
 800cebc:	e3b9      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800cebe:	2300      	movs	r3, #0
 800cec0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec2:	e3b6      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800cec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cec8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800cecc:	430b      	orrs	r3, r1
 800cece:	d164      	bne.n	800cf9a <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ced0:	4b47      	ldr	r3, [pc, #284]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ced2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ced6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ceda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800cedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d120      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cee2:	4b43      	ldr	r3, [pc, #268]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0320 	and.w	r3, r3, #32
 800ceea:	2b20      	cmp	r3, #32
 800ceec:	d117      	bne.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ceee:	4b40      	ldr	r3, [pc, #256]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d005      	beq.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800cefa:	4b3d      	ldr	r3, [pc, #244]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	0e1b      	lsrs	r3, r3, #24
 800cf00:	f003 030f 	and.w	r3, r3, #15
 800cf04:	e006      	b.n	800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800cf06:	4b3a      	ldr	r3, [pc, #232]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf0c:	041b      	lsls	r3, r3, #16
 800cf0e:	0e1b      	lsrs	r3, r3, #24
 800cf10:	f003 030f 	and.w	r3, r3, #15
 800cf14:	4a38      	ldr	r2, [pc, #224]	@ (800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cf16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf1c:	e389      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf22:	e386      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800cf24:	4b32      	ldr	r3, [pc, #200]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf32:	d112      	bne.n	800cf5a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800cf34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf3a:	d10e      	bne.n	800cf5a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cf3c:	4b2c      	ldr	r3, [pc, #176]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf4a:	d102      	bne.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800cf4c:	23fa      	movs	r3, #250	@ 0xfa
 800cf4e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cf50:	e36f      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800cf52:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cf56:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cf58:	e36b      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800cf5a:	4b25      	ldr	r3, [pc, #148]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf66:	d106      	bne.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800cf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf6e:	d102      	bne.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800cf70:	4b20      	ldr	r3, [pc, #128]	@ (800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cf72:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf74:	e35d      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800cf76:	4b1e      	ldr	r3, [pc, #120]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf7c:	f003 0302 	and.w	r3, r3, #2
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d107      	bne.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800cf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf8a:	d103      	bne.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800cf8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf92:	e34e      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800cf94:	2300      	movs	r3, #0
 800cf96:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf98:	e34b      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800cf9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf9e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cfa2:	430b      	orrs	r3, r1
 800cfa4:	d14e      	bne.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800cfa6:	4b12      	ldr	r3, [pc, #72]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cfa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cfac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800cfb0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d103      	bne.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cfb8:	f7fd fbb8 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800cfbc:	6378      	str	r0, [r7, #52]	@ 0x34
 800cfbe:	e338      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800cfc0:	4b0b      	ldr	r3, [pc, #44]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cfc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfce:	d119      	bne.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800cfd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cfd6:	d115      	bne.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cfd8:	4b05      	ldr	r3, [pc, #20]	@ (800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cfda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cfe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfe6:	d109      	bne.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800cfe8:	23fa      	movs	r3, #250	@ 0xfa
 800cfea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cfec:	e321      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cfee:	bf00      	nop
 800cff0:	46020c00 	.word	0x46020c00
 800cff4:	00f42400 	.word	0x00f42400
 800cff8:	080115e8 	.word	0x080115e8
      }
      else
      {
        frequency = LSI_VALUE;
 800cffc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d000:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d002:	e316      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d004:	4ba8      	ldr	r3, [pc, #672]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d00c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d010:	d106      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d014:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d018:	d102      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d01a:	4ba4      	ldr	r3, [pc, #656]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d01c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d01e:	e308      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d020:	4ba1      	ldr	r3, [pc, #644]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d026:	f003 0302 	and.w	r3, r3, #2
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d107      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d030:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d034:	d103      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d03a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d03c:	e2f9      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d03e:	2300      	movs	r3, #0
 800d040:	637b      	str	r3, [r7, #52]	@ 0x34
 800d042:	e2f6      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d044:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d048:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d04c:	430b      	orrs	r3, r1
 800d04e:	d12d      	bne.n	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d050:	4b95      	ldr	r3, [pc, #596]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d056:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d05a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d05c:	4b92      	ldr	r3, [pc, #584]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d064:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d068:	d105      	bne.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d070:	4b8e      	ldr	r3, [pc, #568]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d072:	637b      	str	r3, [r7, #52]	@ 0x34
 800d074:	e2dd      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d07c:	d107      	bne.n	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d07e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d082:	4618      	mov	r0, r3
 800d084:	f7fe fb4c 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d08c:	e2d1      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d094:	d107      	bne.n	800d0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d096:	f107 0318 	add.w	r3, r7, #24
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fe fc9a 	bl	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0a4:	e2c5      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0aa:	e2c2      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d0ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0b0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d0b4:	430b      	orrs	r3, r1
 800d0b6:	d156      	bne.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d0b8:	4b7b      	ldr	r3, [pc, #492]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d0be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d0c2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d0ca:	d028      	beq.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d0d2:	d845      	bhi.n	800d160 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0da:	d013      	beq.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0e2:	d83d      	bhi.n	800d160 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d004      	beq.n	800d0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d0f0:	d004      	beq.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d0f2:	e035      	b.n	800d160 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d0f4:	f7fd fb2e 	bl	800a754 <HAL_RCC_GetPCLK2Freq>
 800d0f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d0fa:	e29a      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d0fc:	f7fd f9fa 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800d100:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d102:	e296      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d104:	4b68      	ldr	r3, [pc, #416]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d10c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d110:	d102      	bne.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d112:	4b66      	ldr	r3, [pc, #408]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d114:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d116:	e28c      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d118:	2300      	movs	r3, #0
 800d11a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d11c:	e289      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d11e:	4b62      	ldr	r3, [pc, #392]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 0320 	and.w	r3, r3, #32
 800d126:	2b20      	cmp	r3, #32
 800d128:	d117      	bne.n	800d15a <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d12a:	4b5f      	ldr	r3, [pc, #380]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d132:	2b00      	cmp	r3, #0
 800d134:	d005      	beq.n	800d142 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d136:	4b5c      	ldr	r3, [pc, #368]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	0e1b      	lsrs	r3, r3, #24
 800d13c:	f003 030f 	and.w	r3, r3, #15
 800d140:	e006      	b.n	800d150 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d142:	4b59      	ldr	r3, [pc, #356]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d148:	041b      	lsls	r3, r3, #16
 800d14a:	0e1b      	lsrs	r3, r3, #24
 800d14c:	f003 030f 	and.w	r3, r3, #15
 800d150:	4a57      	ldr	r2, [pc, #348]	@ (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d156:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d158:	e26b      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d15a:	2300      	movs	r3, #0
 800d15c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d15e:	e268      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d160:	2300      	movs	r3, #0
 800d162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d164:	e265      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d16a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d16e:	430b      	orrs	r3, r1
 800d170:	d156      	bne.n	800d220 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d172:	4b4d      	ldr	r3, [pc, #308]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d17c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d180:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d184:	d028      	beq.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d188:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d18c:	d845      	bhi.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d194:	d013      	beq.n	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d19c:	d83d      	bhi.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d004      	beq.n	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1aa:	d004      	beq.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d1ac:	e035      	b.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d1ae:	f7fd fabd 	bl	800a72c <HAL_RCC_GetPCLK1Freq>
 800d1b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d1b4:	e23d      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d1b6:	f7fd f99d 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800d1ba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d1bc:	e239      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1be:	4b3a      	ldr	r3, [pc, #232]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1ca:	d102      	bne.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d1cc:	4b37      	ldr	r3, [pc, #220]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d1ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1d0:	e22f      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1d6:	e22c      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d1d8:	4b33      	ldr	r3, [pc, #204]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f003 0320 	and.w	r3, r3, #32
 800d1e0:	2b20      	cmp	r3, #32
 800d1e2:	d117      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1e4:	4b30      	ldr	r3, [pc, #192]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d005      	beq.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d1f0:	4b2d      	ldr	r3, [pc, #180]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	0e1b      	lsrs	r3, r3, #24
 800d1f6:	f003 030f 	and.w	r3, r3, #15
 800d1fa:	e006      	b.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d1fc:	4b2a      	ldr	r3, [pc, #168]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d202:	041b      	lsls	r3, r3, #16
 800d204:	0e1b      	lsrs	r3, r3, #24
 800d206:	f003 030f 	and.w	r3, r3, #15
 800d20a:	4a29      	ldr	r2, [pc, #164]	@ (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d20c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d210:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d212:	e20e      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d214:	2300      	movs	r3, #0
 800d216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d218:	e20b      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d21a:	2300      	movs	r3, #0
 800d21c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d21e:	e208      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d220:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d224:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d228:	430b      	orrs	r3, r1
 800d22a:	d17c      	bne.n	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d22c:	4b1e      	ldr	r3, [pc, #120]	@ (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d22e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d232:	f003 0318 	and.w	r3, r3, #24
 800d236:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23a:	2b18      	cmp	r3, #24
 800d23c:	d870      	bhi.n	800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d23e:	a201      	add	r2, pc, #4	@ (adr r2, 800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d244:	0800d2b5 	.word	0x0800d2b5
 800d248:	0800d321 	.word	0x0800d321
 800d24c:	0800d321 	.word	0x0800d321
 800d250:	0800d321 	.word	0x0800d321
 800d254:	0800d321 	.word	0x0800d321
 800d258:	0800d321 	.word	0x0800d321
 800d25c:	0800d321 	.word	0x0800d321
 800d260:	0800d321 	.word	0x0800d321
 800d264:	0800d2bd 	.word	0x0800d2bd
 800d268:	0800d321 	.word	0x0800d321
 800d26c:	0800d321 	.word	0x0800d321
 800d270:	0800d321 	.word	0x0800d321
 800d274:	0800d321 	.word	0x0800d321
 800d278:	0800d321 	.word	0x0800d321
 800d27c:	0800d321 	.word	0x0800d321
 800d280:	0800d321 	.word	0x0800d321
 800d284:	0800d2c5 	.word	0x0800d2c5
 800d288:	0800d321 	.word	0x0800d321
 800d28c:	0800d321 	.word	0x0800d321
 800d290:	0800d321 	.word	0x0800d321
 800d294:	0800d321 	.word	0x0800d321
 800d298:	0800d321 	.word	0x0800d321
 800d29c:	0800d321 	.word	0x0800d321
 800d2a0:	0800d321 	.word	0x0800d321
 800d2a4:	0800d2df 	.word	0x0800d2df
 800d2a8:	46020c00 	.word	0x46020c00
 800d2ac:	00f42400 	.word	0x00f42400
 800d2b0:	080115e8 	.word	0x080115e8
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d2b4:	f7fd fa62 	bl	800a77c <HAL_RCC_GetPCLK3Freq>
 800d2b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d2ba:	e1ba      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d2bc:	f7fd f91a 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800d2c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d2c2:	e1b6      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d2c4:	4b9f      	ldr	r3, [pc, #636]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2d0:	d102      	bne.n	800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d2d2:	4b9d      	ldr	r3, [pc, #628]	@ (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d2d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d2d6:	e1ac      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2dc:	e1a9      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d2de:	4b99      	ldr	r3, [pc, #612]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f003 0320 	and.w	r3, r3, #32
 800d2e6:	2b20      	cmp	r3, #32
 800d2e8:	d117      	bne.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d2ea:	4b96      	ldr	r3, [pc, #600]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d005      	beq.n	800d302 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d2f6:	4b93      	ldr	r3, [pc, #588]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	0e1b      	lsrs	r3, r3, #24
 800d2fc:	f003 030f 	and.w	r3, r3, #15
 800d300:	e006      	b.n	800d310 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d302:	4b90      	ldr	r3, [pc, #576]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d304:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d308:	041b      	lsls	r3, r3, #16
 800d30a:	0e1b      	lsrs	r3, r3, #24
 800d30c:	f003 030f 	and.w	r3, r3, #15
 800d310:	4a8e      	ldr	r2, [pc, #568]	@ (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d316:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d318:	e18b      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d31a:	2300      	movs	r3, #0
 800d31c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d31e:	e188      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d320:	2300      	movs	r3, #0
 800d322:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d324:	e185      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d32a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d32e:	430b      	orrs	r3, r1
 800d330:	d155      	bne.n	800d3de <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d332:	4b84      	ldr	r3, [pc, #528]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d334:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d338:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d33c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d340:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d344:	d013      	beq.n	800d36e <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d348:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d34c:	d844      	bhi.n	800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d354:	d013      	beq.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d358:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d35c:	d83c      	bhi.n	800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d360:	2b00      	cmp	r3, #0
 800d362:	d014      	beq.n	800d38e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d36a:	d014      	beq.n	800d396 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d36c:	e034      	b.n	800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d36e:	f107 0318 	add.w	r3, r7, #24
 800d372:	4618      	mov	r0, r3
 800d374:	f7fe fb2e 	bl	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d37c:	e159      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d37e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe f9cc 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d38c:	e151      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d38e:	f7fd f8b1 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800d392:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d394:	e14d      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d396:	4b6b      	ldr	r3, [pc, #428]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f003 0320 	and.w	r3, r3, #32
 800d39e:	2b20      	cmp	r3, #32
 800d3a0:	d117      	bne.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3a2:	4b68      	ldr	r3, [pc, #416]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d005      	beq.n	800d3ba <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d3ae:	4b65      	ldr	r3, [pc, #404]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	0e1b      	lsrs	r3, r3, #24
 800d3b4:	f003 030f 	and.w	r3, r3, #15
 800d3b8:	e006      	b.n	800d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d3ba:	4b62      	ldr	r3, [pc, #392]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d3bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3c0:	041b      	lsls	r3, r3, #16
 800d3c2:	0e1b      	lsrs	r3, r3, #24
 800d3c4:	f003 030f 	and.w	r3, r3, #15
 800d3c8:	4a60      	ldr	r2, [pc, #384]	@ (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d3d0:	e12f      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3d6:	e12c      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3dc:	e129      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d3de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3e2:	1e59      	subs	r1, r3, #1
 800d3e4:	ea52 0301 	orrs.w	r3, r2, r1
 800d3e8:	d13c      	bne.n	800d464 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d3ea:	4b56      	ldr	r3, [pc, #344]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d3ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d3f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d3f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d3fc:	d027      	beq.n	800d44e <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d400:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d404:	d82b      	bhi.n	800d45e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d408:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d40c:	d017      	beq.n	800d43e <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d410:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d414:	d823      	bhi.n	800d45e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d004      	beq.n	800d426 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d422:	d004      	beq.n	800d42e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d424:	e01b      	b.n	800d45e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d426:	f7fd f865 	bl	800a4f4 <HAL_RCC_GetSysClockFreq>
 800d42a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d42c:	e101      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d42e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d432:	4618      	mov	r0, r3
 800d434:	f7fe f974 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d43a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d43c:	e0f9      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d43e:	f107 0318 	add.w	r3, r7, #24
 800d442:	4618      	mov	r0, r3
 800d444:	f7fe fac6 	bl	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d44c:	e0f1      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d44e:	f107 030c 	add.w	r3, r7, #12
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fc18 	bl	800bc88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d45c:	e0e9      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d45e:	2300      	movs	r3, #0
 800d460:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d462:	e0e6      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d464:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d468:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800d46c:	430b      	orrs	r3, r1
 800d46e:	d131      	bne.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800d470:	4b34      	ldr	r3, [pc, #208]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d47a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800d47c:	4b31      	ldr	r3, [pc, #196]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d47e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d482:	f003 0302 	and.w	r3, r3, #2
 800d486:	2b02      	cmp	r3, #2
 800d488:	d106      	bne.n	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800d48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d103      	bne.n	800d498 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800d490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d494:	637b      	str	r3, [r7, #52]	@ 0x34
 800d496:	e0cc      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800d498:	4b2a      	ldr	r3, [pc, #168]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d49a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d49e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4a6:	d112      	bne.n	800d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800d4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4ae:	d10e      	bne.n	800d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4b0:	4b24      	ldr	r3, [pc, #144]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d4b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4be:	d102      	bne.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800d4c0:	23fa      	movs	r3, #250	@ 0xfa
 800d4c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4c4:	e0b5      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d4c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d4ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4cc:	e0b1      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4d2:	e0ae      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800d4d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4d8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d4dc:	430b      	orrs	r3, r1
 800d4de:	d13b      	bne.n	800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d4e0:	4b18      	ldr	r3, [pc, #96]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d4e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d4e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d4ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d4ec:	4b15      	ldr	r3, [pc, #84]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d4f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4f8:	d105      	bne.n	800d506 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800d500:	4b13      	ldr	r3, [pc, #76]	@ (800d550 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800d502:	637b      	str	r3, [r7, #52]	@ 0x34
 800d504:	e095      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800d506:	4b0f      	ldr	r3, [pc, #60]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d50e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d512:	d106      	bne.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800d514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d51a:	d102      	bne.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800d51c:	4b0d      	ldr	r3, [pc, #52]	@ (800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800d51e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d520:	e087      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800d522:	4b08      	ldr	r3, [pc, #32]	@ (800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d52a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d52e:	d106      	bne.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800d530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d536:	d102      	bne.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800d538:	4b03      	ldr	r3, [pc, #12]	@ (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d53c:	e079      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800d53e:	2300      	movs	r3, #0
 800d540:	637b      	str	r3, [r7, #52]	@ 0x34
 800d542:	e076      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d544:	46020c00 	.word	0x46020c00
 800d548:	00f42400 	.word	0x00f42400
 800d54c:	080115e8 	.word	0x080115e8
 800d550:	02dc6c00 	.word	0x02dc6c00
 800d554:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800d558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d55c:	1e99      	subs	r1, r3, #2
 800d55e:	ea52 0301 	orrs.w	r3, r2, r1
 800d562:	d120      	bne.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800d564:	4b35      	ldr	r3, [pc, #212]	@ (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d566:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d56a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d56e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d572:	2b00      	cmp	r3, #0
 800d574:	d004      	beq.n	800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800d576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d578:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d57c:	d008      	beq.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800d57e:	e00f      	b.n	800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d580:	f107 030c 	add.w	r3, r7, #12
 800d584:	4618      	mov	r0, r3
 800d586:	f7fe fb7f 	bl	800bc88 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d58e:	e050      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d590:	f107 0318 	add.w	r3, r7, #24
 800d594:	4618      	mov	r0, r3
 800d596:	f7fe fa1d 	bl	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d59e:	e048      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5a4:	e045      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800d5a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5aa:	f1a3 0108 	sub.w	r1, r3, #8
 800d5ae:	ea52 0301 	orrs.w	r3, r2, r1
 800d5b2:	d13c      	bne.n	800d62e <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800d5b4:	4b21      	ldr	r3, [pc, #132]	@ (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d5b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d5ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d5be:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800d5c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5cc:	d105      	bne.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d102      	bne.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800d5d4:	4b1a      	ldr	r3, [pc, #104]	@ (800d640 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800d5d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5d8:	e02b      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800d5da:	4b18      	ldr	r3, [pc, #96]	@ (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5e6:	d106      	bne.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5ee:	d102      	bne.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800d5f0:	4b14      	ldr	r3, [pc, #80]	@ (800d644 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800d5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5f4:	e01d      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5fc:	d107      	bne.n	800d60e <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d602:	4618      	mov	r0, r3
 800d604:	f7fe f88c 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d60c:	e011      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800d60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d610:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800d614:	d108      	bne.n	800d628 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fe f880 	bl	800b720 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800d620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d622:	085b      	lsrs	r3, r3, #1
 800d624:	637b      	str	r3, [r7, #52]	@ 0x34
 800d626:	e004      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800d628:	2300      	movs	r3, #0
 800d62a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d62c:	e001      	b.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800d632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d634:	4618      	mov	r0, r3
 800d636:	3738      	adds	r7, #56	@ 0x38
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	46020c00 	.word	0x46020c00
 800d640:	00f42400 	.word	0x00f42400
 800d644:	007a1200 	.word	0x007a1200

0800d648 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800d650:	4b47      	ldr	r3, [pc, #284]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a46      	ldr	r2, [pc, #280]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d65a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d65c:	f7f5 fb0e 	bl	8002c7c <HAL_GetTick>
 800d660:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d662:	e008      	b.n	800d676 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d664:	f7f5 fb0a 	bl	8002c7c <HAL_GetTick>
 800d668:	4602      	mov	r2, r0
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	2b02      	cmp	r3, #2
 800d670:	d901      	bls.n	800d676 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d672:	2303      	movs	r3, #3
 800d674:	e077      	b.n	800d766 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d676:	4b3e      	ldr	r3, [pc, #248]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1f0      	bne.n	800d664 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d682:	4b3b      	ldr	r3, [pc, #236]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d686:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d68a:	f023 0303 	bic.w	r3, r3, #3
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	6811      	ldr	r1, [r2, #0]
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	6852      	ldr	r2, [r2, #4]
 800d696:	3a01      	subs	r2, #1
 800d698:	0212      	lsls	r2, r2, #8
 800d69a:	430a      	orrs	r2, r1
 800d69c:	4934      	ldr	r1, [pc, #208]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d6a2:	4b33      	ldr	r3, [pc, #204]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d6a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6a6:	4b33      	ldr	r3, [pc, #204]	@ (800d774 <RCCEx_PLL2_Config+0x12c>)
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	6892      	ldr	r2, [r2, #8]
 800d6ae:	3a01      	subs	r2, #1
 800d6b0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	68d2      	ldr	r2, [r2, #12]
 800d6b8:	3a01      	subs	r2, #1
 800d6ba:	0252      	lsls	r2, r2, #9
 800d6bc:	b292      	uxth	r2, r2
 800d6be:	4311      	orrs	r1, r2
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	6912      	ldr	r2, [r2, #16]
 800d6c4:	3a01      	subs	r2, #1
 800d6c6:	0412      	lsls	r2, r2, #16
 800d6c8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d6cc:	4311      	orrs	r1, r2
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	6952      	ldr	r2, [r2, #20]
 800d6d2:	3a01      	subs	r2, #1
 800d6d4:	0612      	lsls	r2, r2, #24
 800d6d6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	4924      	ldr	r1, [pc, #144]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d6e2:	4b23      	ldr	r3, [pc, #140]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6e6:	f023 020c 	bic.w	r2, r3, #12
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	699b      	ldr	r3, [r3, #24]
 800d6ee:	4920      	ldr	r1, [pc, #128]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d6f4:	4b1e      	ldr	r3, [pc, #120]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d6f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a1b      	ldr	r3, [r3, #32]
 800d6fc:	491c      	ldr	r1, [pc, #112]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d6fe:	4313      	orrs	r3, r2
 800d700:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800d702:	4b1b      	ldr	r3, [pc, #108]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d706:	4a1a      	ldr	r2, [pc, #104]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d708:	f023 0310 	bic.w	r3, r3, #16
 800d70c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d70e:	4b18      	ldr	r3, [pc, #96]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d716:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	69d2      	ldr	r2, [r2, #28]
 800d71e:	00d2      	lsls	r2, r2, #3
 800d720:	4913      	ldr	r1, [pc, #76]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d722:	4313      	orrs	r3, r2
 800d724:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800d726:	4b12      	ldr	r3, [pc, #72]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d72a:	4a11      	ldr	r2, [pc, #68]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d72c:	f043 0310 	orr.w	r3, r3, #16
 800d730:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800d732:	4b0f      	ldr	r3, [pc, #60]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a0e      	ldr	r2, [pc, #56]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d738:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d73c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d73e:	f7f5 fa9d 	bl	8002c7c <HAL_GetTick>
 800d742:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d744:	e008      	b.n	800d758 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d746:	f7f5 fa99 	bl	8002c7c <HAL_GetTick>
 800d74a:	4602      	mov	r2, r0
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	2b02      	cmp	r3, #2
 800d752:	d901      	bls.n	800d758 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d754:	2303      	movs	r3, #3
 800d756:	e006      	b.n	800d766 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d758:	4b05      	ldr	r3, [pc, #20]	@ (800d770 <RCCEx_PLL2_Config+0x128>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d760:	2b00      	cmp	r3, #0
 800d762:	d0f0      	beq.n	800d746 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800d764:	2300      	movs	r3, #0

}
 800d766:	4618      	mov	r0, r3
 800d768:	3710      	adds	r7, #16
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	46020c00 	.word	0x46020c00
 800d774:	80800000 	.word	0x80800000

0800d778 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800d780:	4b47      	ldr	r3, [pc, #284]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a46      	ldr	r2, [pc, #280]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d78a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d78c:	f7f5 fa76 	bl	8002c7c <HAL_GetTick>
 800d790:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d792:	e008      	b.n	800d7a6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d794:	f7f5 fa72 	bl	8002c7c <HAL_GetTick>
 800d798:	4602      	mov	r2, r0
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	1ad3      	subs	r3, r2, r3
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	d901      	bls.n	800d7a6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d7a2:	2303      	movs	r3, #3
 800d7a4:	e077      	b.n	800d896 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d7a6:	4b3e      	ldr	r3, [pc, #248]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1f0      	bne.n	800d794 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d7b2:	4b3b      	ldr	r3, [pc, #236]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d7ba:	f023 0303 	bic.w	r3, r3, #3
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	6811      	ldr	r1, [r2, #0]
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	6852      	ldr	r2, [r2, #4]
 800d7c6:	3a01      	subs	r2, #1
 800d7c8:	0212      	lsls	r2, r2, #8
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	4934      	ldr	r1, [pc, #208]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	630b      	str	r3, [r1, #48]	@ 0x30
 800d7d2:	4b33      	ldr	r3, [pc, #204]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d7d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7d6:	4b33      	ldr	r3, [pc, #204]	@ (800d8a4 <RCCEx_PLL3_Config+0x12c>)
 800d7d8:	4013      	ands	r3, r2
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	6892      	ldr	r2, [r2, #8]
 800d7de:	3a01      	subs	r2, #1
 800d7e0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	68d2      	ldr	r2, [r2, #12]
 800d7e8:	3a01      	subs	r2, #1
 800d7ea:	0252      	lsls	r2, r2, #9
 800d7ec:	b292      	uxth	r2, r2
 800d7ee:	4311      	orrs	r1, r2
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	6912      	ldr	r2, [r2, #16]
 800d7f4:	3a01      	subs	r2, #1
 800d7f6:	0412      	lsls	r2, r2, #16
 800d7f8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d7fc:	4311      	orrs	r1, r2
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	6952      	ldr	r2, [r2, #20]
 800d802:	3a01      	subs	r2, #1
 800d804:	0612      	lsls	r2, r2, #24
 800d806:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d80a:	430a      	orrs	r2, r1
 800d80c:	4924      	ldr	r1, [pc, #144]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d80e:	4313      	orrs	r3, r2
 800d810:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800d812:	4b23      	ldr	r3, [pc, #140]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d816:	f023 020c 	bic.w	r2, r3, #12
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	699b      	ldr	r3, [r3, #24]
 800d81e:	4920      	ldr	r1, [pc, #128]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d820:	4313      	orrs	r3, r2
 800d822:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d824:	4b1e      	ldr	r3, [pc, #120]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6a1b      	ldr	r3, [r3, #32]
 800d82c:	491c      	ldr	r1, [pc, #112]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d82e:	4313      	orrs	r3, r2
 800d830:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800d832:	4b1b      	ldr	r3, [pc, #108]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d836:	4a1a      	ldr	r2, [pc, #104]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d838:	f023 0310 	bic.w	r3, r3, #16
 800d83c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d83e:	4b18      	ldr	r3, [pc, #96]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d846:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	69d2      	ldr	r2, [r2, #28]
 800d84e:	00d2      	lsls	r2, r2, #3
 800d850:	4913      	ldr	r1, [pc, #76]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d852:	4313      	orrs	r3, r2
 800d854:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800d856:	4b12      	ldr	r3, [pc, #72]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d85a:	4a11      	ldr	r2, [pc, #68]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d85c:	f043 0310 	orr.w	r3, r3, #16
 800d860:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800d862:	4b0f      	ldr	r3, [pc, #60]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4a0e      	ldr	r2, [pc, #56]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d86c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d86e:	f7f5 fa05 	bl	8002c7c <HAL_GetTick>
 800d872:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d874:	e008      	b.n	800d888 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d876:	f7f5 fa01 	bl	8002c7c <HAL_GetTick>
 800d87a:	4602      	mov	r2, r0
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	2b02      	cmp	r3, #2
 800d882:	d901      	bls.n	800d888 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d884:	2303      	movs	r3, #3
 800d886:	e006      	b.n	800d896 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d888:	4b05      	ldr	r3, [pc, #20]	@ (800d8a0 <RCCEx_PLL3_Config+0x128>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d890:	2b00      	cmp	r3, #0
 800d892:	d0f0      	beq.n	800d876 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	46020c00 	.word	0x46020c00
 800d8a4:	80800000 	.word	0x80800000

0800d8a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d071      	beq.n	800d99e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d106      	bne.n	800d8d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7f4 fc7a 	bl	80021c8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d8dc:	4b32      	ldr	r3, [pc, #200]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	f003 0310 	and.w	r3, r3, #16
 800d8e4:	2b10      	cmp	r3, #16
 800d8e6:	d051      	beq.n	800d98c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d8e8:	4b2f      	ldr	r3, [pc, #188]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d8ea:	22ca      	movs	r2, #202	@ 0xca
 800d8ec:	625a      	str	r2, [r3, #36]	@ 0x24
 800d8ee:	4b2e      	ldr	r3, [pc, #184]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d8f0:	2253      	movs	r2, #83	@ 0x53
 800d8f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 f88b 	bl	800da10 <RTC_EnterInitMode>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d8fe:	7bfb      	ldrb	r3, [r7, #15]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d13f      	bne.n	800d984 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800d904:	4b28      	ldr	r3, [pc, #160]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	4a27      	ldr	r2, [pc, #156]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d90a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800d90e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d912:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800d914:	4b24      	ldr	r3, [pc, #144]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d916:	699a      	ldr	r2, [r3, #24]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6859      	ldr	r1, [r3, #4]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	4319      	orrs	r1, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	699b      	ldr	r3, [r3, #24]
 800d926:	430b      	orrs	r3, r1
 800d928:	491f      	ldr	r1, [pc, #124]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d92a:	4313      	orrs	r3, r2
 800d92c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	68da      	ldr	r2, [r3, #12]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	041b      	lsls	r3, r3, #16
 800d938:	491b      	ldr	r1, [pc, #108]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d93a:	4313      	orrs	r3, r2
 800d93c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800d93e:	4b1a      	ldr	r3, [pc, #104]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d94e:	430b      	orrs	r3, r1
 800d950:	4915      	ldr	r1, [pc, #84]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d952:	4313      	orrs	r3, r2
 800d954:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f896 	bl	800da88 <RTC_ExitInitMode>
 800d95c:	4603      	mov	r3, r0
 800d95e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800d960:	7bfb      	ldrb	r3, [r7, #15]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10e      	bne.n	800d984 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800d966:	4b10      	ldr	r3, [pc, #64]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a19      	ldr	r1, [r3, #32]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	69db      	ldr	r3, [r3, #28]
 800d976:	4319      	orrs	r1, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	695b      	ldr	r3, [r3, #20]
 800d97c:	430b      	orrs	r3, r1
 800d97e:	490a      	ldr	r1, [pc, #40]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d980:	4313      	orrs	r3, r2
 800d982:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d984:	4b08      	ldr	r3, [pc, #32]	@ (800d9a8 <HAL_RTC_Init+0x100>)
 800d986:	22ff      	movs	r2, #255	@ 0xff
 800d988:	625a      	str	r2, [r3, #36]	@ 0x24
 800d98a:	e001      	b.n	800d990 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d990:	7bfb      	ldrb	r3, [r7, #15]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d103      	bne.n	800d99e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2201      	movs	r2, #1
 800d99a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800d99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	46007800 	.word	0x46007800

0800d9ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800d9b4:	4b15      	ldr	r3, [pc, #84]	@ (800da0c <HAL_RTC_WaitForSynchro+0x60>)
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	4a14      	ldr	r2, [pc, #80]	@ (800da0c <HAL_RTC_WaitForSynchro+0x60>)
 800d9ba:	f023 0320 	bic.w	r3, r3, #32
 800d9be:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800d9c0:	f7f5 f95c 	bl	8002c7c <HAL_GetTick>
 800d9c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d9c6:	e013      	b.n	800d9f0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d9c8:	f7f5 f958 	bl	8002c7c <HAL_GetTick>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d9d6:	d90b      	bls.n	800d9f0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d9d8:	4b0c      	ldr	r3, [pc, #48]	@ (800da0c <HAL_RTC_WaitForSynchro+0x60>)
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	f003 0320 	and.w	r3, r3, #32
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10c      	bne.n	800d9fe <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2203      	movs	r2, #3
 800d9e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	e008      	b.n	800da02 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d9f0:	4b06      	ldr	r3, [pc, #24]	@ (800da0c <HAL_RTC_WaitForSynchro+0x60>)
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	f003 0320 	and.w	r3, r3, #32
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d0e5      	beq.n	800d9c8 <HAL_RTC_WaitForSynchro+0x1c>
 800d9fc:	e000      	b.n	800da00 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800d9fe:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	46007800 	.word	0x46007800

0800da10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800da18:	2300      	movs	r3, #0
 800da1a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800da1c:	4b19      	ldr	r3, [pc, #100]	@ (800da84 <RTC_EnterInitMode+0x74>)
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da24:	2b00      	cmp	r3, #0
 800da26:	d128      	bne.n	800da7a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800da28:	4b16      	ldr	r3, [pc, #88]	@ (800da84 <RTC_EnterInitMode+0x74>)
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	4a15      	ldr	r2, [pc, #84]	@ (800da84 <RTC_EnterInitMode+0x74>)
 800da2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da32:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800da34:	f7f5 f922 	bl	8002c7c <HAL_GetTick>
 800da38:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800da3a:	e013      	b.n	800da64 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800da3c:	f7f5 f91e 	bl	8002c7c <HAL_GetTick>
 800da40:	4602      	mov	r2, r0
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	1ad3      	subs	r3, r2, r3
 800da46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800da4a:	d90b      	bls.n	800da64 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800da4c:	4b0d      	ldr	r3, [pc, #52]	@ (800da84 <RTC_EnterInitMode+0x74>)
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da54:	2b00      	cmp	r3, #0
 800da56:	d10f      	bne.n	800da78 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800da58:	2303      	movs	r3, #3
 800da5a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2203      	movs	r2, #3
 800da60:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800da64:	4b07      	ldr	r3, [pc, #28]	@ (800da84 <RTC_EnterInitMode+0x74>)
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d104      	bne.n	800da7a <RTC_EnterInitMode+0x6a>
 800da70:	7bfb      	ldrb	r3, [r7, #15]
 800da72:	2b03      	cmp	r3, #3
 800da74:	d1e2      	bne.n	800da3c <RTC_EnterInitMode+0x2c>
 800da76:	e000      	b.n	800da7a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800da78:	bf00      	nop
        }
      }
    }
  }

  return status;
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	46007800 	.word	0x46007800

0800da88 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da90:	2300      	movs	r3, #0
 800da92:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800da94:	4b1a      	ldr	r3, [pc, #104]	@ (800db00 <RTC_ExitInitMode+0x78>)
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	4a19      	ldr	r2, [pc, #100]	@ (800db00 <RTC_ExitInitMode+0x78>)
 800da9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da9e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800daa0:	4b17      	ldr	r3, [pc, #92]	@ (800db00 <RTC_ExitInitMode+0x78>)
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	f003 0320 	and.w	r3, r3, #32
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10c      	bne.n	800dac6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff ff7d 	bl	800d9ac <HAL_RTC_WaitForSynchro>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01e      	beq.n	800daf6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2203      	movs	r2, #3
 800dabc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800dac0:	2303      	movs	r3, #3
 800dac2:	73fb      	strb	r3, [r7, #15]
 800dac4:	e017      	b.n	800daf6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dac6:	4b0e      	ldr	r3, [pc, #56]	@ (800db00 <RTC_ExitInitMode+0x78>)
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	4a0d      	ldr	r2, [pc, #52]	@ (800db00 <RTC_ExitInitMode+0x78>)
 800dacc:	f023 0320 	bic.w	r3, r3, #32
 800dad0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7ff ff6a 	bl	800d9ac <HAL_RTC_WaitForSynchro>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d005      	beq.n	800daea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2203      	movs	r2, #3
 800dae2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800dae6:	2303      	movs	r3, #3
 800dae8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800daea:	4b05      	ldr	r3, [pc, #20]	@ (800db00 <RTC_ExitInitMode+0x78>)
 800daec:	699b      	ldr	r3, [r3, #24]
 800daee:	4a04      	ldr	r2, [pc, #16]	@ (800db00 <RTC_ExitInitMode+0x78>)
 800daf0:	f043 0320 	orr.w	r3, r3, #32
 800daf4:	6193      	str	r3, [r2, #24]
  }
  return status;
 800daf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	46007800 	.word	0x46007800

0800db04 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	4910      	ldr	r1, [pc, #64]	@ (800db58 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800db18:	4313      	orrs	r3, r2
 800db1a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	689a      	ldr	r2, [r3, #8]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	431a      	orrs	r2, r3
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	699b      	ldr	r3, [r3, #24]
 800db2a:	490c      	ldr	r1, [pc, #48]	@ (800db5c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800db2c:	4313      	orrs	r3, r2
 800db2e:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800db30:	4b0a      	ldr	r3, [pc, #40]	@ (800db5c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800db32:	6a1b      	ldr	r3, [r3, #32]
 800db34:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	6919      	ldr	r1, [r3, #16]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	695b      	ldr	r3, [r3, #20]
 800db40:	041b      	lsls	r3, r3, #16
 800db42:	430b      	orrs	r3, r1
 800db44:	4905      	ldr	r1, [pc, #20]	@ (800db5c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800db46:	4313      	orrs	r3, r2
 800db48:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	46007800 	.word	0x46007800
 800db5c:	46007c00 	.word	0x46007c00

0800db60 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
 800db6c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	2b02      	cmp	r3, #2
 800db72:	d904      	bls.n	800db7e <HAL_SAI_InitProtocol+0x1e>
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	3b03      	subs	r3, #3
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d812      	bhi.n	800dba2 <HAL_SAI_InitProtocol+0x42>
 800db7c:	e008      	b.n	800db90 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	68b9      	ldr	r1, [r7, #8]
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f000 fc01 	bl	800e38c <SAI_InitI2S>
 800db8a:	4603      	mov	r3, r0
 800db8c:	75fb      	strb	r3, [r7, #23]
      break;
 800db8e:	e00b      	b.n	800dba8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	68b9      	ldr	r1, [r7, #8]
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f000 fcaa 	bl	800e4f0 <SAI_InitPCM>
 800db9c:	4603      	mov	r3, r0
 800db9e:	75fb      	strb	r3, [r7, #23]
      break;
 800dba0:	e002      	b.n	800dba8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	75fb      	strb	r3, [r7, #23]
      break;
 800dba6:	bf00      	nop
  }

  if (status == HAL_OK)
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d104      	bne.n	800dbb8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f000 f808 	bl	800dbc4 <HAL_SAI_Init>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800dbb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3718      	adds	r7, #24
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
	...

0800dbc4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08a      	sub	sp, #40	@ 0x28
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d101      	bne.n	800dbd6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e1ce      	b.n	800df74 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d10e      	bne.n	800dbfe <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4a83      	ldr	r2, [pc, #524]	@ (800ddf4 <HAL_SAI_Init+0x230>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d107      	bne.n	800dbfa <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d103      	bne.n	800dbfa <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e1ba      	b.n	800df74 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d106      	bne.n	800dc18 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7f4 fcaa 	bl	800256c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 fd23 	bl	800e664 <SAI_Disable>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e1a5      	b.n	800df74 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2202      	movs	r2, #2
 800dc2c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	d00c      	beq.n	800dc52 <HAL_SAI_Init+0x8e>
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d80d      	bhi.n	800dc58 <HAL_SAI_Init+0x94>
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <HAL_SAI_Init+0x82>
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d003      	beq.n	800dc4c <HAL_SAI_Init+0x88>
 800dc44:	e008      	b.n	800dc58 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc4a:	e008      	b.n	800dc5e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800dc4c:	2310      	movs	r3, #16
 800dc4e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc50:	e005      	b.n	800dc5e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800dc52:	2320      	movs	r3, #32
 800dc54:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc56:	e002      	b.n	800dc5e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc5c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	2b03      	cmp	r3, #3
 800dc64:	d81d      	bhi.n	800dca2 <HAL_SAI_Init+0xde>
 800dc66:	a201      	add	r2, pc, #4	@ (adr r2, 800dc6c <HAL_SAI_Init+0xa8>)
 800dc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6c:	0800dc7d 	.word	0x0800dc7d
 800dc70:	0800dc83 	.word	0x0800dc83
 800dc74:	0800dc8b 	.word	0x0800dc8b
 800dc78:	0800dc93 	.word	0x0800dc93
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	61fb      	str	r3, [r7, #28]
      break;
 800dc80:	e012      	b.n	800dca8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800dc82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc86:	61fb      	str	r3, [r7, #28]
      break;
 800dc88:	e00e      	b.n	800dca8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dc8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc8e:	61fb      	str	r3, [r7, #28]
      break;
 800dc90:	e00a      	b.n	800dca8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dc92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc96:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800dc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9a:	f043 0301 	orr.w	r3, r3, #1
 800dc9e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dca0:	e002      	b.n	800dca8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	61fb      	str	r3, [r7, #28]
      break;
 800dca6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a51      	ldr	r2, [pc, #324]	@ (800ddf4 <HAL_SAI_Init+0x230>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d004      	beq.n	800dcbc <HAL_SAI_Init+0xf8>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a50      	ldr	r2, [pc, #320]	@ (800ddf8 <HAL_SAI_Init+0x234>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d103      	bne.n	800dcc4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800dcbc:	4a4f      	ldr	r2, [pc, #316]	@ (800ddfc <HAL_SAI_Init+0x238>)
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc0:	6013      	str	r3, [r2, #0]
 800dcc2:	e002      	b.n	800dcca <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800dcc4:	4a4e      	ldr	r2, [pc, #312]	@ (800de00 <HAL_SAI_Init+0x23c>)
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc8:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a1b      	ldr	r3, [r3, #32]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d077      	beq.n	800ddc2 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a47      	ldr	r2, [pc, #284]	@ (800ddf4 <HAL_SAI_Init+0x230>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d004      	beq.n	800dce6 <HAL_SAI_Init+0x122>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a45      	ldr	r2, [pc, #276]	@ (800ddf8 <HAL_SAI_Init+0x234>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d107      	bne.n	800dcf6 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800dce6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dcea:	f04f 0100 	mov.w	r1, #0
 800dcee:	f7fe f925 	bl	800bf3c <HAL_RCCEx_GetPeriphCLKFreq>
 800dcf2:	61b8      	str	r0, [r7, #24]
 800dcf4:	e006      	b.n	800dd04 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800dcf6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dcfa:	f04f 0100 	mov.w	r1, #0
 800dcfe:	f7fe f91d 	bl	800bf3c <HAL_RCCEx_GetPeriphCLKFreq>
 800dd02:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	699b      	ldr	r3, [r3, #24]
 800dd08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800dd0c:	d120      	bne.n	800dd50 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd12:	2b04      	cmp	r3, #4
 800dd14:	d102      	bne.n	800dd1c <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800dd16:	2340      	movs	r3, #64	@ 0x40
 800dd18:	613b      	str	r3, [r7, #16]
 800dd1a:	e00a      	b.n	800dd32 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd20:	2b08      	cmp	r3, #8
 800dd22:	d103      	bne.n	800dd2c <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800dd24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd28:	613b      	str	r3, [r7, #16]
 800dd2a:	e002      	b.n	800dd32 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd30:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800dd32:	69ba      	ldr	r2, [r7, #24]
 800dd34:	4613      	mov	r3, r2
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	693a      	ldr	r2, [r7, #16]
 800dd44:	fb02 f303 	mul.w	r3, r2, r3
 800dd48:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd4c:	617b      	str	r3, [r7, #20]
 800dd4e:	e017      	b.n	800dd80 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dd58:	d101      	bne.n	800dd5e <HAL_SAI_Init+0x19a>
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	e000      	b.n	800dd60 <HAL_SAI_Init+0x19c>
 800dd5e:	2301      	movs	r3, #1
 800dd60:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800dd62:	69ba      	ldr	r2, [r7, #24]
 800dd64:	4613      	mov	r3, r2
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	4413      	add	r3, r2
 800dd6a:	005b      	lsls	r3, r3, #1
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6a1b      	ldr	r3, [r3, #32]
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	fb02 f303 	mul.w	r3, r2, r3
 800dd78:	021b      	lsls	r3, r3, #8
 800dd7a:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd7e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	4a20      	ldr	r2, [pc, #128]	@ (800de04 <HAL_SAI_Init+0x240>)
 800dd84:	fba2 2303 	umull	r2, r3, r2, r3
 800dd88:	08da      	lsrs	r2, r3, #3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800dd8e:	6979      	ldr	r1, [r7, #20]
 800dd90:	4b1c      	ldr	r3, [pc, #112]	@ (800de04 <HAL_SAI_Init+0x240>)
 800dd92:	fba3 2301 	umull	r2, r3, r3, r1
 800dd96:	08da      	lsrs	r2, r3, #3
 800dd98:	4613      	mov	r3, r2
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	4413      	add	r3, r2
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	1aca      	subs	r2, r1, r3
 800dda2:	2a08      	cmp	r2, #8
 800dda4:	d904      	bls.n	800ddb0 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddaa:	1c5a      	adds	r2, r3, #1
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddb4:	2b04      	cmp	r3, #4
 800ddb6:	d104      	bne.n	800ddc2 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddbc:	085a      	lsrs	r2, r3, #1
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d003      	beq.n	800ddd2 <HAL_SAI_Init+0x20e>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d109      	bne.n	800dde6 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d101      	bne.n	800ddde <HAL_SAI_Init+0x21a>
 800ddda:	2300      	movs	r3, #0
 800dddc:	e001      	b.n	800dde2 <HAL_SAI_Init+0x21e>
 800ddde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dde2:	623b      	str	r3, [r7, #32]
 800dde4:	e012      	b.n	800de0c <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d10c      	bne.n	800de08 <HAL_SAI_Init+0x244>
 800ddee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddf2:	e00a      	b.n	800de0a <HAL_SAI_Init+0x246>
 800ddf4:	40015404 	.word	0x40015404
 800ddf8:	40015424 	.word	0x40015424
 800ddfc:	40015400 	.word	0x40015400
 800de00:	40015800 	.word	0x40015800
 800de04:	cccccccd 	.word	0xcccccccd
 800de08:	2300      	movs	r3, #0
 800de0a:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	6819      	ldr	r1, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	4b59      	ldr	r3, [pc, #356]	@ (800df7c <HAL_SAI_Init+0x3b8>)
 800de18:	400b      	ands	r3, r1
 800de1a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6819      	ldr	r1, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	685a      	ldr	r2, [r3, #4]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de2a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800de30:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de36:	431a      	orrs	r2, r3
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800de44:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800de50:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de56:	051b      	lsls	r3, r3, #20
 800de58:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800de5e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	430a      	orrs	r2, r1
 800de6c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	6812      	ldr	r2, [r2, #0]
 800de78:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800de7c:	f023 030f 	bic.w	r3, r3, #15
 800de80:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6859      	ldr	r1, [r3, #4]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	69da      	ldr	r2, [r3, #28]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de90:	431a      	orrs	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de96:	431a      	orrs	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	430a      	orrs	r2, r1
 800de9e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	6899      	ldr	r1, [r3, #8]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	4b35      	ldr	r3, [pc, #212]	@ (800df80 <HAL_SAI_Init+0x3bc>)
 800deac:	400b      	ands	r3, r1
 800deae:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	6899      	ldr	r1, [r3, #8]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deba:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dec0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800dec6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800decc:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ded2:	3b01      	subs	r3, #1
 800ded4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ded6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	430a      	orrs	r2, r1
 800dede:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68d9      	ldr	r1, [r3, #12]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800deee:	400b      	ands	r3, r1
 800def0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68d9      	ldr	r1, [r3, #12]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df00:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df06:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800df08:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df0e:	3b01      	subs	r3, #1
 800df10:	021b      	lsls	r3, r3, #8
 800df12:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	430a      	orrs	r2, r1
 800df1a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a18      	ldr	r2, [pc, #96]	@ (800df84 <HAL_SAI_Init+0x3c0>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d119      	bne.n	800df5a <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800df26:	4b18      	ldr	r3, [pc, #96]	@ (800df88 <HAL_SAI_Init+0x3c4>)
 800df28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df2a:	4a17      	ldr	r2, [pc, #92]	@ (800df88 <HAL_SAI_Init+0x3c4>)
 800df2c:	f023 0301 	bic.w	r3, r3, #1
 800df30:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d10e      	bne.n	800df5a <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df44:	3b01      	subs	r3, #1
 800df46:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800df48:	490f      	ldr	r1, [pc, #60]	@ (800df88 <HAL_SAI_Init+0x3c4>)
 800df4a:	4313      	orrs	r3, r2
 800df4c:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800df4e:	4b0e      	ldr	r3, [pc, #56]	@ (800df88 <HAL_SAI_Init+0x3c4>)
 800df50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df52:	4a0d      	ldr	r2, [pc, #52]	@ (800df88 <HAL_SAI_Init+0x3c4>)
 800df54:	f043 0301 	orr.w	r3, r3, #1
 800df58:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2201      	movs	r2, #1
 800df66:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	3728      	adds	r7, #40	@ 0x28
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	f005c010 	.word	0xf005c010
 800df80:	fff88000 	.word	0xfff88000
 800df84:	40015404 	.word	0x40015404
 800df88:	40015400 	.word	0x40015400

0800df8c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b088      	sub	sp, #32
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	4613      	mov	r3, r2
 800df98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800df9a:	f7f4 fe6f 	bl	8002c7c <HAL_GetTick>
 800df9e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d002      	beq.n	800dfac <HAL_SAI_Transmit_DMA+0x20>
 800dfa6:	88fb      	ldrh	r3, [r7, #6]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d101      	bne.n	800dfb0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800dfac:	2301      	movs	r3, #1
 800dfae:	e0e4      	b.n	800e17a <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	f040 80dd 	bne.w	800e178 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d101      	bne.n	800dfcc <HAL_SAI_Transmit_DMA+0x40>
 800dfc8:	2302      	movs	r3, #2
 800dfca:	e0d6      	b.n	800e17a <HAL_SAI_Transmit_DMA+0x1ee>
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	68ba      	ldr	r2, [r7, #8]
 800dfd8:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	88fa      	ldrh	r2, [r7, #6]
 800dfde:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	88fa      	ldrh	r2, [r7, #6]
 800dfe6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2212      	movs	r2, #18
 800dff6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e000:	4a60      	ldr	r2, [pc, #384]	@ (800e184 <HAL_SAI_Transmit_DMA+0x1f8>)
 800e002:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e00a:	4a5f      	ldr	r2, [pc, #380]	@ (800e188 <HAL_SAI_Transmit_DMA+0x1fc>)
 800e00c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e014:	4a5d      	ldr	r2, [pc, #372]	@ (800e18c <HAL_SAI_Transmit_DMA+0x200>)
 800e016:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e01e:	2200      	movs	r2, #0
 800e020:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e026:	2b40      	cmp	r3, #64	@ 0x40
 800e028:	d106      	bne.n	800e038 <HAL_SAI_Transmit_DMA+0xac>
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d102      	bne.n	800e038 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800e032:	88fb      	ldrh	r3, [r7, #6]
 800e034:	61bb      	str	r3, [r7, #24]
 800e036:	e00a      	b.n	800e04e <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e03c:	2b80      	cmp	r3, #128	@ 0x80
 800e03e:	d803      	bhi.n	800e048 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e040:	88fb      	ldrh	r3, [r7, #6]
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	61bb      	str	r3, [r7, #24]
 800e046:	e002      	b.n	800e04e <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e048:	88fb      	ldrh	r3, [r7, #6]
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d02d      	beq.n	800e0ba <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e066:	2b00      	cmp	r3, #0
 800e068:	d021      	beq.n	800e0ae <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	69ba      	ldr	r2, [r7, #24]
 800e076:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f103 021c 	add.w	r2, r3, #28
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7f8 fa8c 	bl	80065c0 <HAL_DMAEx_List_Start_IT>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	77fb      	strb	r3, [r7, #31]
 800e0ac:	e014      	b.n	800e0d8 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e05f      	b.n	800e17a <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	331c      	adds	r3, #28
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	f7f7 fae4 	bl	800569c <HAL_DMA_Start_IT>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800e0d8:	7ffb      	ldrb	r3, [r7, #31]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d005      	beq.n	800e0ea <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e047      	b.n	800e17a <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 fa81 	bl	800e5f4 <SAI_InterruptFlag>
 800e0f2:	4601      	mov	r1, r0
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	691a      	ldr	r2, [r3, #16]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	430a      	orrs	r2, r1
 800e100:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e110:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e112:	e015      	b.n	800e140 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e114:	f7f4 fdb2 	bl	8002c7c <HAL_GetTick>
 800e118:	4602      	mov	r2, r0
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e122:	d90d      	bls.n	800e140 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e12a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2200      	movs	r2, #0
 800e138:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800e13c:	2303      	movs	r3, #3
 800e13e:	e01c      	b.n	800e17a <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	695b      	ldr	r3, [r3, #20]
 800e146:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d0e2      	beq.n	800e114 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d107      	bne.n	800e16c <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e16a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e174:	2300      	movs	r3, #0
 800e176:	e000      	b.n	800e17a <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800e178:	2302      	movs	r3, #2
  }
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3720      	adds	r7, #32
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	0800e737 	.word	0x0800e737
 800e188:	0800e6d9 	.word	0x0800e6d9
 800e18c:	0800e7cd 	.word	0x0800e7cd

0800e190 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b086      	sub	sp, #24
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	4613      	mov	r3, r2
 800e19c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <HAL_SAI_Receive_DMA+0x1a>
 800e1a4:	88fb      	ldrh	r3, [r7, #6]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e0c6      	b.n	800e33c <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	f040 80bf 	bne.w	800e33a <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d101      	bne.n	800e1ca <HAL_SAI_Receive_DMA+0x3a>
 800e1c6:	2302      	movs	r3, #2
 800e1c8:	e0b8      	b.n	800e33c <HAL_SAI_Receive_DMA+0x1ac>
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	88fa      	ldrh	r2, [r7, #6]
 800e1dc:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	88fa      	ldrh	r2, [r7, #6]
 800e1e4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2222      	movs	r2, #34	@ 0x22
 800e1f4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1fe:	4a51      	ldr	r2, [pc, #324]	@ (800e344 <HAL_SAI_Receive_DMA+0x1b4>)
 800e200:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e208:	4a4f      	ldr	r2, [pc, #316]	@ (800e348 <HAL_SAI_Receive_DMA+0x1b8>)
 800e20a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e212:	4a4e      	ldr	r2, [pc, #312]	@ (800e34c <HAL_SAI_Receive_DMA+0x1bc>)
 800e214:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e21c:	2200      	movs	r2, #0
 800e21e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e224:	2b40      	cmp	r3, #64	@ 0x40
 800e226:	d106      	bne.n	800e236 <HAL_SAI_Receive_DMA+0xa6>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d102      	bne.n	800e236 <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e230:	88fb      	ldrh	r3, [r7, #6]
 800e232:	613b      	str	r3, [r7, #16]
 800e234:	e00a      	b.n	800e24c <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e23a:	2b80      	cmp	r3, #128	@ 0x80
 800e23c:	d803      	bhi.n	800e246 <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e23e:	88fb      	ldrh	r3, [r7, #6]
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	613b      	str	r3, [r7, #16]
 800e244:	e002      	b.n	800e24c <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e246:	88fb      	ldrh	r3, [r7, #6]
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d02d      	beq.n	800e2b8 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e264:	2b00      	cmp	r3, #0
 800e266:	d021      	beq.n	800e2ac <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e26e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	693a      	ldr	r2, [r7, #16]
 800e274:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f103 021c 	add.w	r2, r3, #28
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7f8 f98d 	bl	80065c0 <HAL_DMAEx_List_Start_IT>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	75fb      	strb	r3, [r7, #23]
 800e2aa:	e014      	b.n	800e2d6 <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	e041      	b.n	800e33c <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	331c      	adds	r3, #28
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	f7f7 f9e5 	bl	800569c <HAL_DMA_Start_IT>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e2d6:	7dfb      	ldrb	r3, [r7, #23]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d005      	beq.n	800e2e8 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e029      	b.n	800e33c <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f000 f982 	bl	800e5f4 <SAI_InterruptFlag>
 800e2f0:	4601      	mov	r1, r0
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	691a      	ldr	r2, [r3, #16]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	430a      	orrs	r2, r1
 800e2fe:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e30e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d107      	bne.n	800e32e <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e32c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e336:	2300      	movs	r3, #0
 800e338:	e000      	b.n	800e33c <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e33a:	2302      	movs	r3, #2
  }
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	0800e7b1 	.word	0x0800e7b1
 800e348:	0800e753 	.word	0x0800e753
 800e34c:	0800e7cd 	.word	0x0800e7cd

0800e350 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800e358:	bf00      	nop
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e36c:	bf00      	nop
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e380:	bf00      	nop
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e38c:	b480      	push	{r7}
 800e38e:	b087      	sub	sp, #28
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	607a      	str	r2, [r7, #4]
 800e398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e39a:	2300      	movs	r3, #0
 800e39c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <SAI_InitI2S+0x2e>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d103      	bne.n	800e3c2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	651a      	str	r2, [r3, #80]	@ 0x50
 800e3c0:	e002      	b.n	800e3c8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e3ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3d6:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	683a      	ldr	r2, [r7, #0]
 800e3e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	f003 0301 	and.w	r3, r3, #1
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e077      	b.n	800e4e2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d107      	bne.n	800e408 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e404:	665a      	str	r2, [r3, #100]	@ 0x64
 800e406:	e006      	b.n	800e416 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e40e:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2b03      	cmp	r3, #3
 800e41a:	d84f      	bhi.n	800e4bc <SAI_InitI2S+0x130>
 800e41c:	a201      	add	r2, pc, #4	@ (adr r2, 800e424 <SAI_InitI2S+0x98>)
 800e41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e422:	bf00      	nop
 800e424:	0800e435 	.word	0x0800e435
 800e428:	0800e457 	.word	0x0800e457
 800e42c:	0800e479 	.word	0x0800e479
 800e430:	0800e49b 	.word	0x0800e49b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2280      	movs	r2, #128	@ 0x80
 800e438:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	085b      	lsrs	r3, r3, #1
 800e43e:	015a      	lsls	r2, r3, #5
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	085b      	lsrs	r3, r3, #1
 800e448:	011a      	lsls	r2, r3, #4
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2240      	movs	r2, #64	@ 0x40
 800e452:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e454:	e035      	b.n	800e4c2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2280      	movs	r2, #128	@ 0x80
 800e45a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	085b      	lsrs	r3, r3, #1
 800e460:	019a      	lsls	r2, r3, #6
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	085b      	lsrs	r3, r3, #1
 800e46a:	015a      	lsls	r2, r3, #5
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2280      	movs	r2, #128	@ 0x80
 800e474:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e476:	e024      	b.n	800e4c2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	22c0      	movs	r2, #192	@ 0xc0
 800e47c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	085b      	lsrs	r3, r3, #1
 800e482:	019a      	lsls	r2, r3, #6
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	085b      	lsrs	r3, r3, #1
 800e48c:	015a      	lsls	r2, r3, #5
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2280      	movs	r2, #128	@ 0x80
 800e496:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e498:	e013      	b.n	800e4c2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	22e0      	movs	r2, #224	@ 0xe0
 800e49e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	085b      	lsrs	r3, r3, #1
 800e4a4:	019a      	lsls	r2, r3, #6
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	085b      	lsrs	r3, r3, #1
 800e4ae:	015a      	lsls	r2, r3, #5
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2280      	movs	r2, #128	@ 0x80
 800e4b8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e4ba:	e002      	b.n	800e4c2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	75fb      	strb	r3, [r7, #23]
      break;
 800e4c0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d10b      	bne.n	800e4e0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d102      	bne.n	800e4d4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2210      	movs	r2, #16
 800e4d2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b02      	cmp	r3, #2
 800e4d8:	d102      	bne.n	800e4e0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2208      	movs	r2, #8
 800e4de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	371c      	adds	r7, #28
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop

0800e4f0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b087      	sub	sp, #28
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4fe:	2300      	movs	r3, #0
 800e500:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2200      	movs	r2, #0
 800e506:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d003      	beq.n	800e51e <SAI_InitPCM+0x2e>
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d103      	bne.n	800e526 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2201      	movs	r2, #1
 800e522:	651a      	str	r2, [r3, #80]	@ 0x50
 800e524:	e002      	b.n	800e52c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2200      	movs	r2, #0
 800e530:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e538:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e540:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e554:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	2b04      	cmp	r3, #4
 800e55a:	d103      	bne.n	800e564 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2201      	movs	r2, #1
 800e560:	659a      	str	r2, [r3, #88]	@ 0x58
 800e562:	e002      	b.n	800e56a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	220d      	movs	r2, #13
 800e568:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	d837      	bhi.n	800e5e0 <SAI_InitPCM+0xf0>
 800e570:	a201      	add	r2, pc, #4	@ (adr r2, 800e578 <SAI_InitPCM+0x88>)
 800e572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e576:	bf00      	nop
 800e578:	0800e589 	.word	0x0800e589
 800e57c:	0800e59f 	.word	0x0800e59f
 800e580:	0800e5b5 	.word	0x0800e5b5
 800e584:	0800e5cb 	.word	0x0800e5cb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2280      	movs	r2, #128	@ 0x80
 800e58c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	011a      	lsls	r2, r3, #4
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2240      	movs	r2, #64	@ 0x40
 800e59a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e59c:	e023      	b.n	800e5e6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2280      	movs	r2, #128	@ 0x80
 800e5a2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	015a      	lsls	r2, r3, #5
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2280      	movs	r2, #128	@ 0x80
 800e5b0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5b2:	e018      	b.n	800e5e6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	22c0      	movs	r2, #192	@ 0xc0
 800e5b8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	015a      	lsls	r2, r3, #5
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2280      	movs	r2, #128	@ 0x80
 800e5c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5c8:	e00d      	b.n	800e5e6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	22e0      	movs	r2, #224	@ 0xe0
 800e5ce:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2280      	movs	r2, #128	@ 0x80
 800e5dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5de:	e002      	b.n	800e5e6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	75fb      	strb	r3, [r7, #23]
      break;
 800e5e4:	bf00      	nop
  }

  return status;
 800e5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	371c      	adds	r7, #28
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e600:	2301      	movs	r3, #1
 800e602:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e604:	78fb      	ldrb	r3, [r7, #3]
 800e606:	2b01      	cmp	r3, #1
 800e608:	d103      	bne.n	800e612 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f043 0308 	orr.w	r3, r3, #8
 800e610:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e616:	2b08      	cmp	r3, #8
 800e618:	d10b      	bne.n	800e632 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d003      	beq.n	800e62a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	2b01      	cmp	r3, #1
 800e628:	d103      	bne.n	800e632 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f043 0310 	orr.w	r3, r3, #16
 800e630:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	2b03      	cmp	r3, #3
 800e638:	d003      	beq.n	800e642 <SAI_InterruptFlag+0x4e>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	2b02      	cmp	r3, #2
 800e640:	d104      	bne.n	800e64c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e648:	60fb      	str	r3, [r7, #12]
 800e64a:	e003      	b.n	800e654 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f043 0304 	orr.w	r3, r3, #4
 800e652:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e654:	68fb      	ldr	r3, [r7, #12]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3714      	adds	r7, #20
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr
	...

0800e664 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e66c:	4b18      	ldr	r3, [pc, #96]	@ (800e6d0 <SAI_Disable+0x6c>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4a18      	ldr	r2, [pc, #96]	@ (800e6d4 <SAI_Disable+0x70>)
 800e672:	fba2 2303 	umull	r2, r3, r2, r3
 800e676:	0b1b      	lsrs	r3, r3, #12
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800e68e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10a      	bne.n	800e6ac <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e69c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	72fb      	strb	r3, [r7, #11]
      break;
 800e6aa:	e009      	b.n	800e6c0 <SAI_Disable+0x5c>
    }
    count--;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1e7      	bne.n	800e690 <SAI_Disable+0x2c>

  return status;
 800e6c0:	7afb      	ldrb	r3, [r7, #11]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3714      	adds	r7, #20
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	20000000 	.word	0x20000000
 800e6d4:	95cbec1b 	.word	0x95cbec1b

0800e6d8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e6e4:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6ea:	2b81      	cmp	r3, #129	@ 0x81
 800e6ec:	d01c      	beq.n	800e728 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e704:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e706:	2100      	movs	r1, #0
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f7ff ff73 	bl	800e5f4 <SAI_InterruptFlag>
 800e70e:	4603      	mov	r3, r0
 800e710:	43d9      	mvns	r1, r3
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	691a      	ldr	r2, [r3, #16]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	400a      	ands	r2, r1
 800e71e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2201      	movs	r2, #1
 800e724:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f7ff fe11 	bl	800e350 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e72e:	bf00      	nop
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b084      	sub	sp, #16
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e742:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f7ff fe0d 	bl	800e364 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e74a:	bf00      	nop
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b084      	sub	sp, #16
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e75e:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e764:	2b81      	cmp	r3, #129	@ 0x81
 800e766:	d01c      	beq.n	800e7a2 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e776:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e780:	2100      	movs	r1, #0
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f7ff ff36 	bl	800e5f4 <SAI_InterruptFlag>
 800e788:	4603      	mov	r3, r0
 800e78a:	43d9      	mvns	r1, r3
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	691a      	ldr	r2, [r3, #16]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	400a      	ands	r2, r1
 800e798:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2201      	movs	r2, #1
 800e79e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f7f2 ffa0 	bl	80016e8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e7a8:	bf00      	nop
 800e7aa:	3710      	adds	r7, #16
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7f2 ff42 	bl	8001648 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e7c4:	bf00      	nop
 800e7c6:	3710      	adds	r7, #16
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b084      	sub	sp, #16
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7d8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e7e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e7f8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800e7fa:	68f8      	ldr	r0, [r7, #12]
 800e7fc:	f7ff ff32 	bl	800e664 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2200      	movs	r2, #0
 800e80c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f7ff fdb1 	bl	800e378 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e816:	bf00      	nop
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b082      	sub	sp, #8
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d101      	bne.n	800e830 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e82c:	2301      	movs	r3, #1
 800e82e:	e049      	b.n	800e8c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e836:	b2db      	uxtb	r3, r3
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d106      	bne.n	800e84a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7f3 fd2d 	bl	80022a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2202      	movs	r2, #2
 800e84e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	3304      	adds	r3, #4
 800e85a:	4619      	mov	r1, r3
 800e85c:	4610      	mov	r0, r2
 800e85e:	f000 fb3b 	bl	800eed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2201      	movs	r2, #1
 800e866:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2201      	movs	r2, #1
 800e86e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2201      	movs	r2, #1
 800e876:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2201      	movs	r2, #1
 800e87e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2201      	movs	r2, #1
 800e88e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2201      	movs	r2, #1
 800e896:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b085      	sub	sp, #20
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d001      	beq.n	800e8e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e06a      	b.n	800e9ba <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2202      	movs	r2, #2
 800e8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a35      	ldr	r2, [pc, #212]	@ (800e9c8 <HAL_TIM_Base_Start+0xfc>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d040      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a34      	ldr	r2, [pc, #208]	@ (800e9cc <HAL_TIM_Base_Start+0x100>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d03b      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e908:	d036      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e912:	d031      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a2d      	ldr	r2, [pc, #180]	@ (800e9d0 <HAL_TIM_Base_Start+0x104>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d02c      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a2c      	ldr	r2, [pc, #176]	@ (800e9d4 <HAL_TIM_Base_Start+0x108>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d027      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4a2a      	ldr	r2, [pc, #168]	@ (800e9d8 <HAL_TIM_Base_Start+0x10c>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d022      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a29      	ldr	r2, [pc, #164]	@ (800e9dc <HAL_TIM_Base_Start+0x110>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d01d      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a27      	ldr	r2, [pc, #156]	@ (800e9e0 <HAL_TIM_Base_Start+0x114>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d018      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a26      	ldr	r2, [pc, #152]	@ (800e9e4 <HAL_TIM_Base_Start+0x118>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d013      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a24      	ldr	r2, [pc, #144]	@ (800e9e8 <HAL_TIM_Base_Start+0x11c>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d00e      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4a23      	ldr	r2, [pc, #140]	@ (800e9ec <HAL_TIM_Base_Start+0x120>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d009      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a21      	ldr	r2, [pc, #132]	@ (800e9f0 <HAL_TIM_Base_Start+0x124>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d004      	beq.n	800e978 <HAL_TIM_Base_Start+0xac>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a20      	ldr	r2, [pc, #128]	@ (800e9f4 <HAL_TIM_Base_Start+0x128>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d115      	bne.n	800e9a4 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	689a      	ldr	r2, [r3, #8]
 800e97e:	4b1e      	ldr	r3, [pc, #120]	@ (800e9f8 <HAL_TIM_Base_Start+0x12c>)
 800e980:	4013      	ands	r3, r2
 800e982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b06      	cmp	r3, #6
 800e988:	d015      	beq.n	800e9b6 <HAL_TIM_Base_Start+0xea>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e990:	d011      	beq.n	800e9b6 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f042 0201 	orr.w	r2, r2, #1
 800e9a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9a2:	e008      	b.n	800e9b6 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f042 0201 	orr.w	r2, r2, #1
 800e9b2:	601a      	str	r2, [r3, #0]
 800e9b4:	e000      	b.n	800e9b8 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3714      	adds	r7, #20
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	40012c00 	.word	0x40012c00
 800e9cc:	50012c00 	.word	0x50012c00
 800e9d0:	40000400 	.word	0x40000400
 800e9d4:	50000400 	.word	0x50000400
 800e9d8:	40000800 	.word	0x40000800
 800e9dc:	50000800 	.word	0x50000800
 800e9e0:	40000c00 	.word	0x40000c00
 800e9e4:	50000c00 	.word	0x50000c00
 800e9e8:	40013400 	.word	0x40013400
 800e9ec:	50013400 	.word	0x50013400
 800e9f0:	40014000 	.word	0x40014000
 800e9f4:	50014000 	.word	0x50014000
 800e9f8:	00010007 	.word	0x00010007

0800e9fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d101      	bne.n	800ea0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e049      	b.n	800eaa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d106      	bne.n	800ea28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7f3 fc1c 	bl	8002260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2202      	movs	r2, #2
 800ea2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	3304      	adds	r3, #4
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4610      	mov	r0, r2
 800ea3c:	f000 fa4c 	bl	800eed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2201      	movs	r2, #1
 800ea44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2201      	movs	r2, #1
 800ea54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2201      	movs	r2, #1
 800ea64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2201      	movs	r2, #1
 800ea74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2201      	movs	r2, #1
 800ea94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3708      	adds	r7, #8
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
	...

0800eaac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eab8:	2300      	movs	r3, #0
 800eaba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d101      	bne.n	800eaca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eac6:	2302      	movs	r3, #2
 800eac8:	e0ff      	b.n	800ecca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2201      	movs	r2, #1
 800eace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2b14      	cmp	r3, #20
 800ead6:	f200 80f0 	bhi.w	800ecba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eada:	a201      	add	r2, pc, #4	@ (adr r2, 800eae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae0:	0800eb35 	.word	0x0800eb35
 800eae4:	0800ecbb 	.word	0x0800ecbb
 800eae8:	0800ecbb 	.word	0x0800ecbb
 800eaec:	0800ecbb 	.word	0x0800ecbb
 800eaf0:	0800eb75 	.word	0x0800eb75
 800eaf4:	0800ecbb 	.word	0x0800ecbb
 800eaf8:	0800ecbb 	.word	0x0800ecbb
 800eafc:	0800ecbb 	.word	0x0800ecbb
 800eb00:	0800ebb7 	.word	0x0800ebb7
 800eb04:	0800ecbb 	.word	0x0800ecbb
 800eb08:	0800ecbb 	.word	0x0800ecbb
 800eb0c:	0800ecbb 	.word	0x0800ecbb
 800eb10:	0800ebf7 	.word	0x0800ebf7
 800eb14:	0800ecbb 	.word	0x0800ecbb
 800eb18:	0800ecbb 	.word	0x0800ecbb
 800eb1c:	0800ecbb 	.word	0x0800ecbb
 800eb20:	0800ec39 	.word	0x0800ec39
 800eb24:	0800ecbb 	.word	0x0800ecbb
 800eb28:	0800ecbb 	.word	0x0800ecbb
 800eb2c:	0800ecbb 	.word	0x0800ecbb
 800eb30:	0800ec79 	.word	0x0800ec79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68b9      	ldr	r1, [r7, #8]
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 fad2 	bl	800f0e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	699a      	ldr	r2, [r3, #24]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f042 0208 	orr.w	r2, r2, #8
 800eb4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	699a      	ldr	r2, [r3, #24]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f022 0204 	bic.w	r2, r2, #4
 800eb5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	6999      	ldr	r1, [r3, #24]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	691a      	ldr	r2, [r3, #16]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	430a      	orrs	r2, r1
 800eb70:	619a      	str	r2, [r3, #24]
      break;
 800eb72:	e0a5      	b.n	800ecc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	68b9      	ldr	r1, [r7, #8]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f000 fb74 	bl	800f268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	699a      	ldr	r2, [r3, #24]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eb8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	699a      	ldr	r2, [r3, #24]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eb9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	6999      	ldr	r1, [r3, #24]
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	021a      	lsls	r2, r3, #8
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	430a      	orrs	r2, r1
 800ebb2:	619a      	str	r2, [r3, #24]
      break;
 800ebb4:	e084      	b.n	800ecc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68b9      	ldr	r1, [r7, #8]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f000 fc03 	bl	800f3c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	69da      	ldr	r2, [r3, #28]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f042 0208 	orr.w	r2, r2, #8
 800ebd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	69da      	ldr	r2, [r3, #28]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f022 0204 	bic.w	r2, r2, #4
 800ebe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	69d9      	ldr	r1, [r3, #28]
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	691a      	ldr	r2, [r3, #16]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	430a      	orrs	r2, r1
 800ebf2:	61da      	str	r2, [r3, #28]
      break;
 800ebf4:	e064      	b.n	800ecc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68b9      	ldr	r1, [r7, #8]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f000 fc91 	bl	800f524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	69da      	ldr	r2, [r3, #28]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	69da      	ldr	r2, [r3, #28]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	69d9      	ldr	r1, [r3, #28]
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	021a      	lsls	r2, r3, #8
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	430a      	orrs	r2, r1
 800ec34:	61da      	str	r2, [r3, #28]
      break;
 800ec36:	e043      	b.n	800ecc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68b9      	ldr	r1, [r7, #8]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 fd20 	bl	800f684 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f042 0208 	orr.w	r2, r2, #8
 800ec52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f022 0204 	bic.w	r2, r2, #4
 800ec62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	691a      	ldr	r2, [r3, #16]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	430a      	orrs	r2, r1
 800ec74:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ec76:	e023      	b.n	800ecc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	68b9      	ldr	r1, [r7, #8]
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f000 fd82 	bl	800f788 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eca2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	691b      	ldr	r3, [r3, #16]
 800ecae:	021a      	lsls	r2, r3, #8
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	430a      	orrs	r2, r1
 800ecb6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ecb8:	e002      	b.n	800ecc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	75fb      	strb	r3, [r7, #23]
      break;
 800ecbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ecc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3718      	adds	r7, #24
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop

0800ecd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecde:	2300      	movs	r3, #0
 800ece0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d101      	bne.n	800ecf0 <HAL_TIM_ConfigClockSource+0x1c>
 800ecec:	2302      	movs	r3, #2
 800ecee:	e0e6      	b.n	800eebe <HAL_TIM_ConfigClockSource+0x1ea>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ed0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ed12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ed1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a67      	ldr	r2, [pc, #412]	@ (800eec8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	f000 80b1 	beq.w	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800ed30:	4a65      	ldr	r2, [pc, #404]	@ (800eec8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	f200 80b6 	bhi.w	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed38:	4a64      	ldr	r2, [pc, #400]	@ (800eecc <HAL_TIM_ConfigClockSource+0x1f8>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	f000 80a9 	beq.w	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800ed40:	4a62      	ldr	r2, [pc, #392]	@ (800eecc <HAL_TIM_ConfigClockSource+0x1f8>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	f200 80ae 	bhi.w	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed48:	4a61      	ldr	r2, [pc, #388]	@ (800eed0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	f000 80a1 	beq.w	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800ed50:	4a5f      	ldr	r2, [pc, #380]	@ (800eed0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	f200 80a6 	bhi.w	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed58:	4a5e      	ldr	r2, [pc, #376]	@ (800eed4 <HAL_TIM_ConfigClockSource+0x200>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	f000 8099 	beq.w	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800ed60:	4a5c      	ldr	r2, [pc, #368]	@ (800eed4 <HAL_TIM_ConfigClockSource+0x200>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	f200 809e 	bhi.w	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ed6c:	f000 8091 	beq.w	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800ed70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ed74:	f200 8096 	bhi.w	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed7c:	f000 8089 	beq.w	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800ed80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed84:	f200 808e 	bhi.w	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed8c:	d03e      	beq.n	800ee0c <HAL_TIM_ConfigClockSource+0x138>
 800ed8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed92:	f200 8087 	bhi.w	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed9a:	f000 8086 	beq.w	800eeaa <HAL_TIM_ConfigClockSource+0x1d6>
 800ed9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eda2:	d87f      	bhi.n	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800eda4:	2b70      	cmp	r3, #112	@ 0x70
 800eda6:	d01a      	beq.n	800edde <HAL_TIM_ConfigClockSource+0x10a>
 800eda8:	2b70      	cmp	r3, #112	@ 0x70
 800edaa:	d87b      	bhi.n	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800edac:	2b60      	cmp	r3, #96	@ 0x60
 800edae:	d050      	beq.n	800ee52 <HAL_TIM_ConfigClockSource+0x17e>
 800edb0:	2b60      	cmp	r3, #96	@ 0x60
 800edb2:	d877      	bhi.n	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800edb4:	2b50      	cmp	r3, #80	@ 0x50
 800edb6:	d03c      	beq.n	800ee32 <HAL_TIM_ConfigClockSource+0x15e>
 800edb8:	2b50      	cmp	r3, #80	@ 0x50
 800edba:	d873      	bhi.n	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800edbc:	2b40      	cmp	r3, #64	@ 0x40
 800edbe:	d058      	beq.n	800ee72 <HAL_TIM_ConfigClockSource+0x19e>
 800edc0:	2b40      	cmp	r3, #64	@ 0x40
 800edc2:	d86f      	bhi.n	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800edc4:	2b30      	cmp	r3, #48	@ 0x30
 800edc6:	d064      	beq.n	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800edc8:	2b30      	cmp	r3, #48	@ 0x30
 800edca:	d86b      	bhi.n	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800edcc:	2b20      	cmp	r3, #32
 800edce:	d060      	beq.n	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800edd0:	2b20      	cmp	r3, #32
 800edd2:	d867      	bhi.n	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d05c      	beq.n	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800edd8:	2b10      	cmp	r3, #16
 800edda:	d05a      	beq.n	800ee92 <HAL_TIM_ConfigClockSource+0x1be>
 800eddc:	e062      	b.n	800eea4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800edee:	f000 fdcb 	bl	800f988 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ee00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	609a      	str	r2, [r3, #8]
      break;
 800ee0a:	e04f      	b.n	800eeac <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ee1c:	f000 fdb4 	bl	800f988 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	689a      	ldr	r2, [r3, #8]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ee2e:	609a      	str	r2, [r3, #8]
      break;
 800ee30:	e03c      	b.n	800eeac <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee3e:	461a      	mov	r2, r3
 800ee40:	f000 fd26 	bl	800f890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2150      	movs	r1, #80	@ 0x50
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f000 fd7f 	bl	800f94e <TIM_ITRx_SetConfig>
      break;
 800ee50:	e02c      	b.n	800eeac <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee5e:	461a      	mov	r2, r3
 800ee60:	f000 fd45 	bl	800f8ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2160      	movs	r1, #96	@ 0x60
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f000 fd6f 	bl	800f94e <TIM_ITRx_SetConfig>
      break;
 800ee70:	e01c      	b.n	800eeac <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee7e:	461a      	mov	r2, r3
 800ee80:	f000 fd06 	bl	800f890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2140      	movs	r1, #64	@ 0x40
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f000 fd5f 	bl	800f94e <TIM_ITRx_SetConfig>
      break;
 800ee90:	e00c      	b.n	800eeac <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	4610      	mov	r0, r2
 800ee9e:	f000 fd56 	bl	800f94e <TIM_ITRx_SetConfig>
      break;
 800eea2:	e003      	b.n	800eeac <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800eea4:	2301      	movs	r3, #1
 800eea6:	73fb      	strb	r3, [r7, #15]
      break;
 800eea8:	e000      	b.n	800eeac <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800eeaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	00100070 	.word	0x00100070
 800eecc:	00100040 	.word	0x00100040
 800eed0:	00100030 	.word	0x00100030
 800eed4:	00100020 	.word	0x00100020

0800eed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b085      	sub	sp, #20
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a6e      	ldr	r2, [pc, #440]	@ (800f0a4 <TIM_Base_SetConfig+0x1cc>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d02b      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4a6d      	ldr	r2, [pc, #436]	@ (800f0a8 <TIM_Base_SetConfig+0x1d0>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d027      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eefe:	d023      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef06:	d01f      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4a68      	ldr	r2, [pc, #416]	@ (800f0ac <TIM_Base_SetConfig+0x1d4>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d01b      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	4a67      	ldr	r2, [pc, #412]	@ (800f0b0 <TIM_Base_SetConfig+0x1d8>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d017      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4a66      	ldr	r2, [pc, #408]	@ (800f0b4 <TIM_Base_SetConfig+0x1dc>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d013      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	4a65      	ldr	r2, [pc, #404]	@ (800f0b8 <TIM_Base_SetConfig+0x1e0>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d00f      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	4a64      	ldr	r2, [pc, #400]	@ (800f0bc <TIM_Base_SetConfig+0x1e4>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d00b      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4a63      	ldr	r2, [pc, #396]	@ (800f0c0 <TIM_Base_SetConfig+0x1e8>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d007      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4a62      	ldr	r2, [pc, #392]	@ (800f0c4 <TIM_Base_SetConfig+0x1ec>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d003      	beq.n	800ef48 <TIM_Base_SetConfig+0x70>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a61      	ldr	r2, [pc, #388]	@ (800f0c8 <TIM_Base_SetConfig+0x1f0>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d108      	bne.n	800ef5a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	68fa      	ldr	r2, [r7, #12]
 800ef56:	4313      	orrs	r3, r2
 800ef58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4a51      	ldr	r2, [pc, #324]	@ (800f0a4 <TIM_Base_SetConfig+0x1cc>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d043      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a50      	ldr	r2, [pc, #320]	@ (800f0a8 <TIM_Base_SetConfig+0x1d0>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d03f      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef70:	d03b      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef78:	d037      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4a4b      	ldr	r2, [pc, #300]	@ (800f0ac <TIM_Base_SetConfig+0x1d4>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d033      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4a4a      	ldr	r2, [pc, #296]	@ (800f0b0 <TIM_Base_SetConfig+0x1d8>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d02f      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4a49      	ldr	r2, [pc, #292]	@ (800f0b4 <TIM_Base_SetConfig+0x1dc>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d02b      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	4a48      	ldr	r2, [pc, #288]	@ (800f0b8 <TIM_Base_SetConfig+0x1e0>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d027      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4a47      	ldr	r2, [pc, #284]	@ (800f0bc <TIM_Base_SetConfig+0x1e4>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d023      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4a46      	ldr	r2, [pc, #280]	@ (800f0c0 <TIM_Base_SetConfig+0x1e8>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d01f      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4a45      	ldr	r2, [pc, #276]	@ (800f0c4 <TIM_Base_SetConfig+0x1ec>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d01b      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4a44      	ldr	r2, [pc, #272]	@ (800f0c8 <TIM_Base_SetConfig+0x1f0>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d017      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4a43      	ldr	r2, [pc, #268]	@ (800f0cc <TIM_Base_SetConfig+0x1f4>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d013      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	4a42      	ldr	r2, [pc, #264]	@ (800f0d0 <TIM_Base_SetConfig+0x1f8>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d00f      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4a41      	ldr	r2, [pc, #260]	@ (800f0d4 <TIM_Base_SetConfig+0x1fc>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d00b      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4a40      	ldr	r2, [pc, #256]	@ (800f0d8 <TIM_Base_SetConfig+0x200>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d007      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4a3f      	ldr	r2, [pc, #252]	@ (800f0dc <TIM_Base_SetConfig+0x204>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d003      	beq.n	800efea <TIM_Base_SetConfig+0x112>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	4a3e      	ldr	r2, [pc, #248]	@ (800f0e0 <TIM_Base_SetConfig+0x208>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d108      	bne.n	800effc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	4313      	orrs	r3, r2
 800effa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	4313      	orrs	r3, r2
 800f008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	689a      	ldr	r2, [r3, #8]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a20      	ldr	r2, [pc, #128]	@ (800f0a4 <TIM_Base_SetConfig+0x1cc>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d023      	beq.n	800f070 <TIM_Base_SetConfig+0x198>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a1f      	ldr	r2, [pc, #124]	@ (800f0a8 <TIM_Base_SetConfig+0x1d0>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d01f      	beq.n	800f070 <TIM_Base_SetConfig+0x198>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a24      	ldr	r2, [pc, #144]	@ (800f0c4 <TIM_Base_SetConfig+0x1ec>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d01b      	beq.n	800f070 <TIM_Base_SetConfig+0x198>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a23      	ldr	r2, [pc, #140]	@ (800f0c8 <TIM_Base_SetConfig+0x1f0>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d017      	beq.n	800f070 <TIM_Base_SetConfig+0x198>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4a22      	ldr	r2, [pc, #136]	@ (800f0cc <TIM_Base_SetConfig+0x1f4>)
 800f044:	4293      	cmp	r3, r2
 800f046:	d013      	beq.n	800f070 <TIM_Base_SetConfig+0x198>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a21      	ldr	r2, [pc, #132]	@ (800f0d0 <TIM_Base_SetConfig+0x1f8>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d00f      	beq.n	800f070 <TIM_Base_SetConfig+0x198>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4a20      	ldr	r2, [pc, #128]	@ (800f0d4 <TIM_Base_SetConfig+0x1fc>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d00b      	beq.n	800f070 <TIM_Base_SetConfig+0x198>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4a1f      	ldr	r2, [pc, #124]	@ (800f0d8 <TIM_Base_SetConfig+0x200>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d007      	beq.n	800f070 <TIM_Base_SetConfig+0x198>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4a1e      	ldr	r2, [pc, #120]	@ (800f0dc <TIM_Base_SetConfig+0x204>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d003      	beq.n	800f070 <TIM_Base_SetConfig+0x198>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4a1d      	ldr	r2, [pc, #116]	@ (800f0e0 <TIM_Base_SetConfig+0x208>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d103      	bne.n	800f078 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	691a      	ldr	r2, [r3, #16]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2201      	movs	r2, #1
 800f07c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	691b      	ldr	r3, [r3, #16]
 800f082:	f003 0301 	and.w	r3, r3, #1
 800f086:	2b01      	cmp	r3, #1
 800f088:	d105      	bne.n	800f096 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	f023 0201 	bic.w	r2, r3, #1
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	611a      	str	r2, [r3, #16]
  }
}
 800f096:	bf00      	nop
 800f098:	3714      	adds	r7, #20
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop
 800f0a4:	40012c00 	.word	0x40012c00
 800f0a8:	50012c00 	.word	0x50012c00
 800f0ac:	40000400 	.word	0x40000400
 800f0b0:	50000400 	.word	0x50000400
 800f0b4:	40000800 	.word	0x40000800
 800f0b8:	50000800 	.word	0x50000800
 800f0bc:	40000c00 	.word	0x40000c00
 800f0c0:	50000c00 	.word	0x50000c00
 800f0c4:	40013400 	.word	0x40013400
 800f0c8:	50013400 	.word	0x50013400
 800f0cc:	40014000 	.word	0x40014000
 800f0d0:	50014000 	.word	0x50014000
 800f0d4:	40014400 	.word	0x40014400
 800f0d8:	50014400 	.word	0x50014400
 800f0dc:	40014800 	.word	0x40014800
 800f0e0:	50014800 	.word	0x50014800

0800f0e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b087      	sub	sp, #28
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6a1b      	ldr	r3, [r3, #32]
 800f0f8:	f023 0201 	bic.w	r2, r3, #1
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	699b      	ldr	r3, [r3, #24]
 800f10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 0303 	bic.w	r3, r3, #3
 800f11e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	4313      	orrs	r3, r2
 800f128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f023 0302 	bic.w	r3, r3, #2
 800f130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	697a      	ldr	r2, [r7, #20]
 800f138:	4313      	orrs	r3, r2
 800f13a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4a40      	ldr	r2, [pc, #256]	@ (800f240 <TIM_OC1_SetConfig+0x15c>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d023      	beq.n	800f18c <TIM_OC1_SetConfig+0xa8>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a3f      	ldr	r2, [pc, #252]	@ (800f244 <TIM_OC1_SetConfig+0x160>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d01f      	beq.n	800f18c <TIM_OC1_SetConfig+0xa8>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a3e      	ldr	r2, [pc, #248]	@ (800f248 <TIM_OC1_SetConfig+0x164>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d01b      	beq.n	800f18c <TIM_OC1_SetConfig+0xa8>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a3d      	ldr	r2, [pc, #244]	@ (800f24c <TIM_OC1_SetConfig+0x168>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d017      	beq.n	800f18c <TIM_OC1_SetConfig+0xa8>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a3c      	ldr	r2, [pc, #240]	@ (800f250 <TIM_OC1_SetConfig+0x16c>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d013      	beq.n	800f18c <TIM_OC1_SetConfig+0xa8>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	4a3b      	ldr	r2, [pc, #236]	@ (800f254 <TIM_OC1_SetConfig+0x170>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d00f      	beq.n	800f18c <TIM_OC1_SetConfig+0xa8>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4a3a      	ldr	r2, [pc, #232]	@ (800f258 <TIM_OC1_SetConfig+0x174>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d00b      	beq.n	800f18c <TIM_OC1_SetConfig+0xa8>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a39      	ldr	r2, [pc, #228]	@ (800f25c <TIM_OC1_SetConfig+0x178>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d007      	beq.n	800f18c <TIM_OC1_SetConfig+0xa8>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	4a38      	ldr	r2, [pc, #224]	@ (800f260 <TIM_OC1_SetConfig+0x17c>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d003      	beq.n	800f18c <TIM_OC1_SetConfig+0xa8>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a37      	ldr	r2, [pc, #220]	@ (800f264 <TIM_OC1_SetConfig+0x180>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d10c      	bne.n	800f1a6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	f023 0308 	bic.w	r3, r3, #8
 800f192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	697a      	ldr	r2, [r7, #20]
 800f19a:	4313      	orrs	r3, r2
 800f19c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	f023 0304 	bic.w	r3, r3, #4
 800f1a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a25      	ldr	r2, [pc, #148]	@ (800f240 <TIM_OC1_SetConfig+0x15c>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d023      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x112>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a24      	ldr	r2, [pc, #144]	@ (800f244 <TIM_OC1_SetConfig+0x160>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d01f      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x112>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a23      	ldr	r2, [pc, #140]	@ (800f248 <TIM_OC1_SetConfig+0x164>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d01b      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x112>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a22      	ldr	r2, [pc, #136]	@ (800f24c <TIM_OC1_SetConfig+0x168>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d017      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x112>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a21      	ldr	r2, [pc, #132]	@ (800f250 <TIM_OC1_SetConfig+0x16c>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d013      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x112>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a20      	ldr	r2, [pc, #128]	@ (800f254 <TIM_OC1_SetConfig+0x170>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d00f      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x112>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a1f      	ldr	r2, [pc, #124]	@ (800f258 <TIM_OC1_SetConfig+0x174>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d00b      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x112>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4a1e      	ldr	r2, [pc, #120]	@ (800f25c <TIM_OC1_SetConfig+0x178>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d007      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x112>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f260 <TIM_OC1_SetConfig+0x17c>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d003      	beq.n	800f1f6 <TIM_OC1_SetConfig+0x112>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a1c      	ldr	r2, [pc, #112]	@ (800f264 <TIM_OC1_SetConfig+0x180>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d111      	bne.n	800f21a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	695b      	ldr	r3, [r3, #20]
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	4313      	orrs	r3, r2
 800f20e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	693a      	ldr	r2, [r7, #16]
 800f216:	4313      	orrs	r3, r2
 800f218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	693a      	ldr	r2, [r7, #16]
 800f21e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	685a      	ldr	r2, [r3, #4]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	697a      	ldr	r2, [r7, #20]
 800f232:	621a      	str	r2, [r3, #32]
}
 800f234:	bf00      	nop
 800f236:	371c      	adds	r7, #28
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	40012c00 	.word	0x40012c00
 800f244:	50012c00 	.word	0x50012c00
 800f248:	40013400 	.word	0x40013400
 800f24c:	50013400 	.word	0x50013400
 800f250:	40014000 	.word	0x40014000
 800f254:	50014000 	.word	0x50014000
 800f258:	40014400 	.word	0x40014400
 800f25c:	50014400 	.word	0x50014400
 800f260:	40014800 	.word	0x40014800
 800f264:	50014800 	.word	0x50014800

0800f268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f268:	b480      	push	{r7}
 800f26a:	b087      	sub	sp, #28
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a1b      	ldr	r3, [r3, #32]
 800f276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a1b      	ldr	r3, [r3, #32]
 800f27c:	f023 0210 	bic.w	r2, r3, #16
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	699b      	ldr	r3, [r3, #24]
 800f28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f29a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f2a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	021b      	lsls	r3, r3, #8
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	f023 0320 	bic.w	r3, r3, #32
 800f2b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	011b      	lsls	r3, r3, #4
 800f2be:	697a      	ldr	r2, [r7, #20]
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a36      	ldr	r2, [pc, #216]	@ (800f3a0 <TIM_OC2_SetConfig+0x138>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d00b      	beq.n	800f2e4 <TIM_OC2_SetConfig+0x7c>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4a35      	ldr	r2, [pc, #212]	@ (800f3a4 <TIM_OC2_SetConfig+0x13c>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d007      	beq.n	800f2e4 <TIM_OC2_SetConfig+0x7c>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a34      	ldr	r2, [pc, #208]	@ (800f3a8 <TIM_OC2_SetConfig+0x140>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d003      	beq.n	800f2e4 <TIM_OC2_SetConfig+0x7c>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	4a33      	ldr	r2, [pc, #204]	@ (800f3ac <TIM_OC2_SetConfig+0x144>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d10d      	bne.n	800f300 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f2ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	011b      	lsls	r3, r3, #4
 800f2f2:	697a      	ldr	r2, [r7, #20]
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f2fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4a27      	ldr	r2, [pc, #156]	@ (800f3a0 <TIM_OC2_SetConfig+0x138>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d023      	beq.n	800f350 <TIM_OC2_SetConfig+0xe8>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4a26      	ldr	r2, [pc, #152]	@ (800f3a4 <TIM_OC2_SetConfig+0x13c>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d01f      	beq.n	800f350 <TIM_OC2_SetConfig+0xe8>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4a25      	ldr	r2, [pc, #148]	@ (800f3a8 <TIM_OC2_SetConfig+0x140>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d01b      	beq.n	800f350 <TIM_OC2_SetConfig+0xe8>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4a24      	ldr	r2, [pc, #144]	@ (800f3ac <TIM_OC2_SetConfig+0x144>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d017      	beq.n	800f350 <TIM_OC2_SetConfig+0xe8>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4a23      	ldr	r2, [pc, #140]	@ (800f3b0 <TIM_OC2_SetConfig+0x148>)
 800f324:	4293      	cmp	r3, r2
 800f326:	d013      	beq.n	800f350 <TIM_OC2_SetConfig+0xe8>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4a22      	ldr	r2, [pc, #136]	@ (800f3b4 <TIM_OC2_SetConfig+0x14c>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d00f      	beq.n	800f350 <TIM_OC2_SetConfig+0xe8>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	4a21      	ldr	r2, [pc, #132]	@ (800f3b8 <TIM_OC2_SetConfig+0x150>)
 800f334:	4293      	cmp	r3, r2
 800f336:	d00b      	beq.n	800f350 <TIM_OC2_SetConfig+0xe8>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4a20      	ldr	r2, [pc, #128]	@ (800f3bc <TIM_OC2_SetConfig+0x154>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d007      	beq.n	800f350 <TIM_OC2_SetConfig+0xe8>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a1f      	ldr	r2, [pc, #124]	@ (800f3c0 <TIM_OC2_SetConfig+0x158>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d003      	beq.n	800f350 <TIM_OC2_SetConfig+0xe8>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4a1e      	ldr	r2, [pc, #120]	@ (800f3c4 <TIM_OC2_SetConfig+0x15c>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d113      	bne.n	800f378 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f35e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	693a      	ldr	r2, [r7, #16]
 800f368:	4313      	orrs	r3, r2
 800f36a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	699b      	ldr	r3, [r3, #24]
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	693a      	ldr	r2, [r7, #16]
 800f374:	4313      	orrs	r3, r2
 800f376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	693a      	ldr	r2, [r7, #16]
 800f37c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	685a      	ldr	r2, [r3, #4]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	621a      	str	r2, [r3, #32]
}
 800f392:	bf00      	nop
 800f394:	371c      	adds	r7, #28
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	40012c00 	.word	0x40012c00
 800f3a4:	50012c00 	.word	0x50012c00
 800f3a8:	40013400 	.word	0x40013400
 800f3ac:	50013400 	.word	0x50013400
 800f3b0:	40014000 	.word	0x40014000
 800f3b4:	50014000 	.word	0x50014000
 800f3b8:	40014400 	.word	0x40014400
 800f3bc:	50014400 	.word	0x50014400
 800f3c0:	40014800 	.word	0x40014800
 800f3c4:	50014800 	.word	0x50014800

0800f3c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b087      	sub	sp, #28
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6a1b      	ldr	r3, [r3, #32]
 800f3d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6a1b      	ldr	r3, [r3, #32]
 800f3dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	69db      	ldr	r3, [r3, #28]
 800f3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f3f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f023 0303 	bic.w	r3, r3, #3
 800f402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	4313      	orrs	r3, r2
 800f40c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	021b      	lsls	r3, r3, #8
 800f41c:	697a      	ldr	r2, [r7, #20]
 800f41e:	4313      	orrs	r3, r2
 800f420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4a35      	ldr	r2, [pc, #212]	@ (800f4fc <TIM_OC3_SetConfig+0x134>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d00b      	beq.n	800f442 <TIM_OC3_SetConfig+0x7a>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	4a34      	ldr	r2, [pc, #208]	@ (800f500 <TIM_OC3_SetConfig+0x138>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d007      	beq.n	800f442 <TIM_OC3_SetConfig+0x7a>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	4a33      	ldr	r2, [pc, #204]	@ (800f504 <TIM_OC3_SetConfig+0x13c>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d003      	beq.n	800f442 <TIM_OC3_SetConfig+0x7a>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4a32      	ldr	r2, [pc, #200]	@ (800f508 <TIM_OC3_SetConfig+0x140>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d10d      	bne.n	800f45e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	021b      	lsls	r3, r3, #8
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	4313      	orrs	r3, r2
 800f454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f45c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4a26      	ldr	r2, [pc, #152]	@ (800f4fc <TIM_OC3_SetConfig+0x134>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d023      	beq.n	800f4ae <TIM_OC3_SetConfig+0xe6>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4a25      	ldr	r2, [pc, #148]	@ (800f500 <TIM_OC3_SetConfig+0x138>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d01f      	beq.n	800f4ae <TIM_OC3_SetConfig+0xe6>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4a24      	ldr	r2, [pc, #144]	@ (800f504 <TIM_OC3_SetConfig+0x13c>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d01b      	beq.n	800f4ae <TIM_OC3_SetConfig+0xe6>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4a23      	ldr	r2, [pc, #140]	@ (800f508 <TIM_OC3_SetConfig+0x140>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d017      	beq.n	800f4ae <TIM_OC3_SetConfig+0xe6>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4a22      	ldr	r2, [pc, #136]	@ (800f50c <TIM_OC3_SetConfig+0x144>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d013      	beq.n	800f4ae <TIM_OC3_SetConfig+0xe6>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4a21      	ldr	r2, [pc, #132]	@ (800f510 <TIM_OC3_SetConfig+0x148>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d00f      	beq.n	800f4ae <TIM_OC3_SetConfig+0xe6>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4a20      	ldr	r2, [pc, #128]	@ (800f514 <TIM_OC3_SetConfig+0x14c>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d00b      	beq.n	800f4ae <TIM_OC3_SetConfig+0xe6>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4a1f      	ldr	r2, [pc, #124]	@ (800f518 <TIM_OC3_SetConfig+0x150>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d007      	beq.n	800f4ae <TIM_OC3_SetConfig+0xe6>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4a1e      	ldr	r2, [pc, #120]	@ (800f51c <TIM_OC3_SetConfig+0x154>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d003      	beq.n	800f4ae <TIM_OC3_SetConfig+0xe6>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4a1d      	ldr	r2, [pc, #116]	@ (800f520 <TIM_OC3_SetConfig+0x158>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d113      	bne.n	800f4d6 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f4b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f4bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	695b      	ldr	r3, [r3, #20]
 800f4c2:	011b      	lsls	r3, r3, #4
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	699b      	ldr	r3, [r3, #24]
 800f4ce:	011b      	lsls	r3, r3, #4
 800f4d0:	693a      	ldr	r2, [r7, #16]
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	68fa      	ldr	r2, [r7, #12]
 800f4e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	685a      	ldr	r2, [r3, #4]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	697a      	ldr	r2, [r7, #20]
 800f4ee:	621a      	str	r2, [r3, #32]
}
 800f4f0:	bf00      	nop
 800f4f2:	371c      	adds	r7, #28
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	40012c00 	.word	0x40012c00
 800f500:	50012c00 	.word	0x50012c00
 800f504:	40013400 	.word	0x40013400
 800f508:	50013400 	.word	0x50013400
 800f50c:	40014000 	.word	0x40014000
 800f510:	50014000 	.word	0x50014000
 800f514:	40014400 	.word	0x40014400
 800f518:	50014400 	.word	0x50014400
 800f51c:	40014800 	.word	0x40014800
 800f520:	50014800 	.word	0x50014800

0800f524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f524:	b480      	push	{r7}
 800f526:	b087      	sub	sp, #28
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6a1b      	ldr	r3, [r3, #32]
 800f532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a1b      	ldr	r3, [r3, #32]
 800f538:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	69db      	ldr	r3, [r3, #28]
 800f54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f55e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	021b      	lsls	r3, r3, #8
 800f566:	68fa      	ldr	r2, [r7, #12]
 800f568:	4313      	orrs	r3, r2
 800f56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	689b      	ldr	r3, [r3, #8]
 800f578:	031b      	lsls	r3, r3, #12
 800f57a:	697a      	ldr	r2, [r7, #20]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a36      	ldr	r2, [pc, #216]	@ (800f65c <TIM_OC4_SetConfig+0x138>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d00b      	beq.n	800f5a0 <TIM_OC4_SetConfig+0x7c>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a35      	ldr	r2, [pc, #212]	@ (800f660 <TIM_OC4_SetConfig+0x13c>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d007      	beq.n	800f5a0 <TIM_OC4_SetConfig+0x7c>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a34      	ldr	r2, [pc, #208]	@ (800f664 <TIM_OC4_SetConfig+0x140>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d003      	beq.n	800f5a0 <TIM_OC4_SetConfig+0x7c>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a33      	ldr	r2, [pc, #204]	@ (800f668 <TIM_OC4_SetConfig+0x144>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d10d      	bne.n	800f5bc <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f5a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	031b      	lsls	r3, r3, #12
 800f5ae:	697a      	ldr	r2, [r7, #20]
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f5ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a27      	ldr	r2, [pc, #156]	@ (800f65c <TIM_OC4_SetConfig+0x138>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d023      	beq.n	800f60c <TIM_OC4_SetConfig+0xe8>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4a26      	ldr	r2, [pc, #152]	@ (800f660 <TIM_OC4_SetConfig+0x13c>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d01f      	beq.n	800f60c <TIM_OC4_SetConfig+0xe8>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a25      	ldr	r2, [pc, #148]	@ (800f664 <TIM_OC4_SetConfig+0x140>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d01b      	beq.n	800f60c <TIM_OC4_SetConfig+0xe8>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a24      	ldr	r2, [pc, #144]	@ (800f668 <TIM_OC4_SetConfig+0x144>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d017      	beq.n	800f60c <TIM_OC4_SetConfig+0xe8>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4a23      	ldr	r2, [pc, #140]	@ (800f66c <TIM_OC4_SetConfig+0x148>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d013      	beq.n	800f60c <TIM_OC4_SetConfig+0xe8>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a22      	ldr	r2, [pc, #136]	@ (800f670 <TIM_OC4_SetConfig+0x14c>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d00f      	beq.n	800f60c <TIM_OC4_SetConfig+0xe8>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4a21      	ldr	r2, [pc, #132]	@ (800f674 <TIM_OC4_SetConfig+0x150>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d00b      	beq.n	800f60c <TIM_OC4_SetConfig+0xe8>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a20      	ldr	r2, [pc, #128]	@ (800f678 <TIM_OC4_SetConfig+0x154>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d007      	beq.n	800f60c <TIM_OC4_SetConfig+0xe8>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a1f      	ldr	r2, [pc, #124]	@ (800f67c <TIM_OC4_SetConfig+0x158>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d003      	beq.n	800f60c <TIM_OC4_SetConfig+0xe8>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a1e      	ldr	r2, [pc, #120]	@ (800f680 <TIM_OC4_SetConfig+0x15c>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d113      	bne.n	800f634 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f612:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f61a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	695b      	ldr	r3, [r3, #20]
 800f620:	019b      	lsls	r3, r3, #6
 800f622:	693a      	ldr	r2, [r7, #16]
 800f624:	4313      	orrs	r3, r2
 800f626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	699b      	ldr	r3, [r3, #24]
 800f62c:	019b      	lsls	r3, r3, #6
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	4313      	orrs	r3, r2
 800f632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	693a      	ldr	r2, [r7, #16]
 800f638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	685a      	ldr	r2, [r3, #4]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	621a      	str	r2, [r3, #32]
}
 800f64e:	bf00      	nop
 800f650:	371c      	adds	r7, #28
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr
 800f65a:	bf00      	nop
 800f65c:	40012c00 	.word	0x40012c00
 800f660:	50012c00 	.word	0x50012c00
 800f664:	40013400 	.word	0x40013400
 800f668:	50013400 	.word	0x50013400
 800f66c:	40014000 	.word	0x40014000
 800f670:	50014000 	.word	0x50014000
 800f674:	40014400 	.word	0x40014400
 800f678:	50014400 	.word	0x50014400
 800f67c:	40014800 	.word	0x40014800
 800f680:	50014800 	.word	0x50014800

0800f684 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f684:	b480      	push	{r7}
 800f686:	b087      	sub	sp, #28
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a1b      	ldr	r3, [r3, #32]
 800f692:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a1b      	ldr	r3, [r3, #32]
 800f698:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f6b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f6c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	041b      	lsls	r3, r3, #16
 800f6d0:	693a      	ldr	r2, [r7, #16]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a21      	ldr	r2, [pc, #132]	@ (800f760 <TIM_OC5_SetConfig+0xdc>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d023      	beq.n	800f726 <TIM_OC5_SetConfig+0xa2>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4a20      	ldr	r2, [pc, #128]	@ (800f764 <TIM_OC5_SetConfig+0xe0>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d01f      	beq.n	800f726 <TIM_OC5_SetConfig+0xa2>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4a1f      	ldr	r2, [pc, #124]	@ (800f768 <TIM_OC5_SetConfig+0xe4>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d01b      	beq.n	800f726 <TIM_OC5_SetConfig+0xa2>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4a1e      	ldr	r2, [pc, #120]	@ (800f76c <TIM_OC5_SetConfig+0xe8>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d017      	beq.n	800f726 <TIM_OC5_SetConfig+0xa2>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a1d      	ldr	r2, [pc, #116]	@ (800f770 <TIM_OC5_SetConfig+0xec>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d013      	beq.n	800f726 <TIM_OC5_SetConfig+0xa2>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4a1c      	ldr	r2, [pc, #112]	@ (800f774 <TIM_OC5_SetConfig+0xf0>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d00f      	beq.n	800f726 <TIM_OC5_SetConfig+0xa2>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4a1b      	ldr	r2, [pc, #108]	@ (800f778 <TIM_OC5_SetConfig+0xf4>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d00b      	beq.n	800f726 <TIM_OC5_SetConfig+0xa2>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4a1a      	ldr	r2, [pc, #104]	@ (800f77c <TIM_OC5_SetConfig+0xf8>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d007      	beq.n	800f726 <TIM_OC5_SetConfig+0xa2>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4a19      	ldr	r2, [pc, #100]	@ (800f780 <TIM_OC5_SetConfig+0xfc>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d003      	beq.n	800f726 <TIM_OC5_SetConfig+0xa2>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4a18      	ldr	r2, [pc, #96]	@ (800f784 <TIM_OC5_SetConfig+0x100>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d109      	bne.n	800f73a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f72c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	695b      	ldr	r3, [r3, #20]
 800f732:	021b      	lsls	r3, r3, #8
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	4313      	orrs	r3, r2
 800f738:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	697a      	ldr	r2, [r7, #20]
 800f73e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	685a      	ldr	r2, [r3, #4]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	621a      	str	r2, [r3, #32]
}
 800f754:	bf00      	nop
 800f756:	371c      	adds	r7, #28
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr
 800f760:	40012c00 	.word	0x40012c00
 800f764:	50012c00 	.word	0x50012c00
 800f768:	40013400 	.word	0x40013400
 800f76c:	50013400 	.word	0x50013400
 800f770:	40014000 	.word	0x40014000
 800f774:	50014000 	.word	0x50014000
 800f778:	40014400 	.word	0x40014400
 800f77c:	50014400 	.word	0x50014400
 800f780:	40014800 	.word	0x40014800
 800f784:	50014800 	.word	0x50014800

0800f788 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f788:	b480      	push	{r7}
 800f78a:	b087      	sub	sp, #28
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6a1b      	ldr	r3, [r3, #32]
 800f79c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f7b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	021b      	lsls	r3, r3, #8
 800f7c2:	68fa      	ldr	r2, [r7, #12]
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f7ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	689b      	ldr	r3, [r3, #8]
 800f7d4:	051b      	lsls	r3, r3, #20
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4a22      	ldr	r2, [pc, #136]	@ (800f868 <TIM_OC6_SetConfig+0xe0>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d023      	beq.n	800f82c <TIM_OC6_SetConfig+0xa4>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	4a21      	ldr	r2, [pc, #132]	@ (800f86c <TIM_OC6_SetConfig+0xe4>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d01f      	beq.n	800f82c <TIM_OC6_SetConfig+0xa4>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4a20      	ldr	r2, [pc, #128]	@ (800f870 <TIM_OC6_SetConfig+0xe8>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d01b      	beq.n	800f82c <TIM_OC6_SetConfig+0xa4>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4a1f      	ldr	r2, [pc, #124]	@ (800f874 <TIM_OC6_SetConfig+0xec>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d017      	beq.n	800f82c <TIM_OC6_SetConfig+0xa4>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4a1e      	ldr	r2, [pc, #120]	@ (800f878 <TIM_OC6_SetConfig+0xf0>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d013      	beq.n	800f82c <TIM_OC6_SetConfig+0xa4>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4a1d      	ldr	r2, [pc, #116]	@ (800f87c <TIM_OC6_SetConfig+0xf4>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d00f      	beq.n	800f82c <TIM_OC6_SetConfig+0xa4>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4a1c      	ldr	r2, [pc, #112]	@ (800f880 <TIM_OC6_SetConfig+0xf8>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d00b      	beq.n	800f82c <TIM_OC6_SetConfig+0xa4>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4a1b      	ldr	r2, [pc, #108]	@ (800f884 <TIM_OC6_SetConfig+0xfc>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d007      	beq.n	800f82c <TIM_OC6_SetConfig+0xa4>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4a1a      	ldr	r2, [pc, #104]	@ (800f888 <TIM_OC6_SetConfig+0x100>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d003      	beq.n	800f82c <TIM_OC6_SetConfig+0xa4>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4a19      	ldr	r2, [pc, #100]	@ (800f88c <TIM_OC6_SetConfig+0x104>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d109      	bne.n	800f840 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	695b      	ldr	r3, [r3, #20]
 800f838:	029b      	lsls	r3, r3, #10
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	697a      	ldr	r2, [r7, #20]
 800f844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	685a      	ldr	r2, [r3, #4]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	693a      	ldr	r2, [r7, #16]
 800f858:	621a      	str	r2, [r3, #32]
}
 800f85a:	bf00      	nop
 800f85c:	371c      	adds	r7, #28
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	40012c00 	.word	0x40012c00
 800f86c:	50012c00 	.word	0x50012c00
 800f870:	40013400 	.word	0x40013400
 800f874:	50013400 	.word	0x50013400
 800f878:	40014000 	.word	0x40014000
 800f87c:	50014000 	.word	0x50014000
 800f880:	40014400 	.word	0x40014400
 800f884:	50014400 	.word	0x50014400
 800f888:	40014800 	.word	0x40014800
 800f88c:	50014800 	.word	0x50014800

0800f890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f890:	b480      	push	{r7}
 800f892:	b087      	sub	sp, #28
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6a1b      	ldr	r3, [r3, #32]
 800f8a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	6a1b      	ldr	r3, [r3, #32]
 800f8a6:	f023 0201 	bic.w	r2, r3, #1
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	699b      	ldr	r3, [r3, #24]
 800f8b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f8ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	011b      	lsls	r3, r3, #4
 800f8c0:	693a      	ldr	r2, [r7, #16]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	f023 030a 	bic.w	r3, r3, #10
 800f8cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f8ce:	697a      	ldr	r2, [r7, #20]
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	693a      	ldr	r2, [r7, #16]
 800f8da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	697a      	ldr	r2, [r7, #20]
 800f8e0:	621a      	str	r2, [r3, #32]
}
 800f8e2:	bf00      	nop
 800f8e4:	371c      	adds	r7, #28
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr

0800f8ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f8ee:	b480      	push	{r7}
 800f8f0:	b087      	sub	sp, #28
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	60f8      	str	r0, [r7, #12]
 800f8f6:	60b9      	str	r1, [r7, #8]
 800f8f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	6a1b      	ldr	r3, [r3, #32]
 800f8fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6a1b      	ldr	r3, [r3, #32]
 800f904:	f023 0210 	bic.w	r2, r3, #16
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	699b      	ldr	r3, [r3, #24]
 800f910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	031b      	lsls	r3, r3, #12
 800f91e:	693a      	ldr	r2, [r7, #16]
 800f920:	4313      	orrs	r3, r2
 800f922:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f92a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	011b      	lsls	r3, r3, #4
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	4313      	orrs	r3, r2
 800f934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	697a      	ldr	r2, [r7, #20]
 800f940:	621a      	str	r2, [r3, #32]
}
 800f942:	bf00      	nop
 800f944:	371c      	adds	r7, #28
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f94e:	b480      	push	{r7}
 800f950:	b085      	sub	sp, #20
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
 800f956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f96a:	683a      	ldr	r2, [r7, #0]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	4313      	orrs	r3, r2
 800f970:	f043 0307 	orr.w	r3, r3, #7
 800f974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	609a      	str	r2, [r3, #8]
}
 800f97c:	bf00      	nop
 800f97e:	3714      	adds	r7, #20
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f988:	b480      	push	{r7}
 800f98a:	b087      	sub	sp, #28
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	689b      	ldr	r3, [r3, #8]
 800f99a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f9a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	021a      	lsls	r2, r3, #8
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	431a      	orrs	r2, r3
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	697a      	ldr	r2, [r7, #20]
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	697a      	ldr	r2, [r7, #20]
 800f9ba:	609a      	str	r2, [r3, #8]
}
 800f9bc:	bf00      	nop
 800f9be:	371c      	adds	r7, #28
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d101      	bne.n	800f9e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f9dc:	2302      	movs	r3, #2
 800f9de:	e097      	b.n	800fb10 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2202      	movs	r2, #2
 800f9ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	689b      	ldr	r3, [r3, #8]
 800f9fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a45      	ldr	r2, [pc, #276]	@ (800fb1c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d00e      	beq.n	800fa28 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	4a44      	ldr	r2, [pc, #272]	@ (800fb20 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d009      	beq.n	800fa28 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a42      	ldr	r2, [pc, #264]	@ (800fb24 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d004      	beq.n	800fa28 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4a41      	ldr	r2, [pc, #260]	@ (800fb28 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d108      	bne.n	800fa3a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fa2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	4313      	orrs	r3, r2
 800fa38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fa40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a2f      	ldr	r2, [pc, #188]	@ (800fb1c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d040      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4a2e      	ldr	r2, [pc, #184]	@ (800fb20 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d03b      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa74:	d036      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fa7e:	d031      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4a29      	ldr	r2, [pc, #164]	@ (800fb2c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d02c      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a28      	ldr	r2, [pc, #160]	@ (800fb30 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d027      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a26      	ldr	r2, [pc, #152]	@ (800fb34 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d022      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	4a25      	ldr	r2, [pc, #148]	@ (800fb38 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d01d      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	4a23      	ldr	r2, [pc, #140]	@ (800fb3c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d018      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a22      	ldr	r2, [pc, #136]	@ (800fb40 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d013      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4a18      	ldr	r2, [pc, #96]	@ (800fb24 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d00e      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a17      	ldr	r2, [pc, #92]	@ (800fb28 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800facc:	4293      	cmp	r3, r2
 800face:	d009      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a1b      	ldr	r2, [pc, #108]	@ (800fb44 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d004      	beq.n	800fae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4a1a      	ldr	r2, [pc, #104]	@ (800fb48 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d10c      	bne.n	800fafe <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800faea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	689b      	ldr	r3, [r3, #8]
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	4313      	orrs	r3, r2
 800faf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	68ba      	ldr	r2, [r7, #8]
 800fafc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2201      	movs	r2, #1
 800fb02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fb0e:	2300      	movs	r3, #0
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3714      	adds	r7, #20
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr
 800fb1c:	40012c00 	.word	0x40012c00
 800fb20:	50012c00 	.word	0x50012c00
 800fb24:	40013400 	.word	0x40013400
 800fb28:	50013400 	.word	0x50013400
 800fb2c:	40000400 	.word	0x40000400
 800fb30:	50000400 	.word	0x50000400
 800fb34:	40000800 	.word	0x40000800
 800fb38:	50000800 	.word	0x50000800
 800fb3c:	40000c00 	.word	0x40000c00
 800fb40:	50000c00 	.word	0x50000c00
 800fb44:	40014000 	.word	0x40014000
 800fb48:	50014000 	.word	0x50014000

0800fb4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d101      	bne.n	800fb5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e042      	b.n	800fbe4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d106      	bne.n	800fb76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7f2 fbf3 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2224      	movs	r2, #36	@ 0x24
 800fb7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f022 0201 	bic.w	r2, r2, #1
 800fb8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d002      	beq.n	800fb9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 fd02 	bl	80105a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f000 fb51 	bl	8010244 <UART_SetConfig>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d101      	bne.n	800fbac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	e01b      	b.n	800fbe4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	685a      	ldr	r2, [r3, #4]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fbba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	689a      	ldr	r2, [r3, #8]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fbca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f042 0201 	orr.w	r2, r2, #1
 800fbda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 fd81 	bl	80106e4 <UART_CheckIdleState>
 800fbe2:	4603      	mov	r3, r0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b0ba      	sub	sp, #232	@ 0xe8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	69db      	ldr	r3, [r3, #28]
 800fbfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fc12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fc16:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fc1a:	4013      	ands	r3, r2
 800fc1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fc20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d11b      	bne.n	800fc60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fc28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc2c:	f003 0320 	and.w	r3, r3, #32
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d015      	beq.n	800fc60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fc34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc38:	f003 0320 	and.w	r3, r3, #32
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d105      	bne.n	800fc4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fc40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d009      	beq.n	800fc60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f000 82cb 	beq.w	80101ec <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	4798      	blx	r3
      }
      return;
 800fc5e:	e2c5      	b.n	80101ec <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fc60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f000 8123 	beq.w	800feb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fc6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fc6e:	4b8d      	ldr	r3, [pc, #564]	@ (800fea4 <HAL_UART_IRQHandler+0x2b8>)
 800fc70:	4013      	ands	r3, r2
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d106      	bne.n	800fc84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fc76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fc7a:	4b8b      	ldr	r3, [pc, #556]	@ (800fea8 <HAL_UART_IRQHandler+0x2bc>)
 800fc7c:	4013      	ands	r3, r2
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	f000 8116 	beq.w	800feb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc88:	f003 0301 	and.w	r3, r3, #1
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d011      	beq.n	800fcb4 <HAL_UART_IRQHandler+0xc8>
 800fc90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00b      	beq.n	800fcb4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2201      	movs	r2, #1
 800fca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcaa:	f043 0201 	orr.w	r2, r3, #1
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcb8:	f003 0302 	and.w	r3, r3, #2
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d011      	beq.n	800fce4 <HAL_UART_IRQHandler+0xf8>
 800fcc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcc4:	f003 0301 	and.w	r3, r3, #1
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d00b      	beq.n	800fce4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2202      	movs	r2, #2
 800fcd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcda:	f043 0204 	orr.w	r2, r3, #4
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fce8:	f003 0304 	and.w	r3, r3, #4
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d011      	beq.n	800fd14 <HAL_UART_IRQHandler+0x128>
 800fcf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcf4:	f003 0301 	and.w	r3, r3, #1
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d00b      	beq.n	800fd14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2204      	movs	r2, #4
 800fd02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd0a:	f043 0202 	orr.w	r2, r3, #2
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fd14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd18:	f003 0308 	and.w	r3, r3, #8
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d017      	beq.n	800fd50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd24:	f003 0320 	and.w	r3, r3, #32
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d105      	bne.n	800fd38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fd2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fd30:	4b5c      	ldr	r3, [pc, #368]	@ (800fea4 <HAL_UART_IRQHandler+0x2b8>)
 800fd32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00b      	beq.n	800fd50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2208      	movs	r2, #8
 800fd3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd46:	f043 0208 	orr.w	r2, r3, #8
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fd50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d012      	beq.n	800fd82 <HAL_UART_IRQHandler+0x196>
 800fd5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00c      	beq.n	800fd82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd78:	f043 0220 	orr.w	r2, r3, #32
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	f000 8231 	beq.w	80101f0 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd92:	f003 0320 	and.w	r3, r3, #32
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d013      	beq.n	800fdc2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd9e:	f003 0320 	and.w	r3, r3, #32
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d105      	bne.n	800fdb2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fda6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fdaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d007      	beq.n	800fdc2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d003      	beq.n	800fdc2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	689b      	ldr	r3, [r3, #8]
 800fdd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdd6:	2b40      	cmp	r3, #64	@ 0x40
 800fdd8:	d005      	beq.n	800fde6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fdda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fdde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d054      	beq.n	800fe90 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 fd93 	bl	8010912 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	689b      	ldr	r3, [r3, #8]
 800fdf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdf6:	2b40      	cmp	r3, #64	@ 0x40
 800fdf8:	d146      	bne.n	800fe88 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	3308      	adds	r3, #8
 800fe00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fe08:	e853 3f00 	ldrex	r3, [r3]
 800fe0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fe10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fe14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	3308      	adds	r3, #8
 800fe22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fe26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fe2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fe32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fe36:	e841 2300 	strex	r3, r2, [r1]
 800fe3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fe3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1d9      	bne.n	800fdfa <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d017      	beq.n	800fe80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe56:	4a15      	ldr	r2, [pc, #84]	@ (800feac <HAL_UART_IRQHandler+0x2c0>)
 800fe58:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7f5 fcf7 	bl	8005854 <HAL_DMA_Abort_IT>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d019      	beq.n	800fea0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fe7a:	4610      	mov	r0, r2
 800fe7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe7e:	e00f      	b.n	800fea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 f9c9 	bl	8010218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe86:	e00b      	b.n	800fea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 f9c5 	bl	8010218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe8e:	e007      	b.n	800fea0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f000 f9c1 	bl	8010218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fe9e:	e1a7      	b.n	80101f0 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fea0:	bf00      	nop
    return;
 800fea2:	e1a5      	b.n	80101f0 <HAL_UART_IRQHandler+0x604>
 800fea4:	10000001 	.word	0x10000001
 800fea8:	04000120 	.word	0x04000120
 800feac:	080109df 	.word	0x080109df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	f040 8150 	bne.w	801015a <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800feba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800febe:	f003 0310 	and.w	r3, r3, #16
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f000 8149 	beq.w	801015a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fecc:	f003 0310 	and.w	r3, r3, #16
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	f000 8142 	beq.w	801015a <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2210      	movs	r2, #16
 800fedc:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	689b      	ldr	r3, [r3, #8]
 800fee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fee8:	2b40      	cmp	r3, #64	@ 0x40
 800feea:	f040 80b8 	bne.w	801005e <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fef8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fefc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 8177 	beq.w	80101f4 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff10:	429a      	cmp	r2, r3
 800ff12:	f080 816f 	bcs.w	80101f4 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff28:	2b81      	cmp	r3, #129	@ 0x81
 800ff2a:	f000 8087 	beq.w	801003c <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ff3a:	e853 3f00 	ldrex	r3, [r3]
 800ff3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ff42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ff46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ff4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ff58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ff5c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ff64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff68:	e841 2300 	strex	r3, r2, [r1]
 800ff6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ff70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1da      	bne.n	800ff2e <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3308      	adds	r3, #8
 800ff7e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ff82:	e853 3f00 	ldrex	r3, [r3]
 800ff86:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ff88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ff8a:	f023 0301 	bic.w	r3, r3, #1
 800ff8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	3308      	adds	r3, #8
 800ff98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ff9c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ffa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ffa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ffa8:	e841 2300 	strex	r3, r2, [r1]
 800ffac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ffae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1e1      	bne.n	800ff78 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	3308      	adds	r3, #8
 800ffba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ffbe:	e853 3f00 	ldrex	r3, [r3]
 800ffc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ffc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ffca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	3308      	adds	r3, #8
 800ffd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ffd8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ffda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffdc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ffde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ffe0:	e841 2300 	strex	r3, r2, [r1]
 800ffe4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ffe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1e3      	bne.n	800ffb4 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2220      	movs	r2, #32
 800fff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2200      	movs	r2, #0
 800fff8:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010002:	e853 3f00 	ldrex	r3, [r3]
 8010006:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801000a:	f023 0310 	bic.w	r3, r3, #16
 801000e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	461a      	mov	r2, r3
 8010018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801001c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801001e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010020:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010022:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010024:	e841 2300 	strex	r3, r2, [r1]
 8010028:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801002a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801002c:	2b00      	cmp	r3, #0
 801002e:	d1e4      	bne.n	800fffa <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010036:	4618      	mov	r0, r3
 8010038:	f7f5 fb90 	bl	800575c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2202      	movs	r2, #2
 8010040:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801004e:	b29b      	uxth	r3, r3
 8010050:	1ad3      	subs	r3, r2, r3
 8010052:	b29b      	uxth	r3, r3
 8010054:	4619      	mov	r1, r3
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 f8e8 	bl	801022c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801005c:	e0ca      	b.n	80101f4 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801006a:	b29b      	uxth	r3, r3
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010078:	b29b      	uxth	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	f000 80bc 	beq.w	80101f8 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8010080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010084:	2b00      	cmp	r3, #0
 8010086:	f000 80b7 	beq.w	80101f8 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010092:	e853 3f00 	ldrex	r3, [r3]
 8010096:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801009a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801009e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	461a      	mov	r2, r3
 80100a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80100ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80100ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80100b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80100b4:	e841 2300 	strex	r3, r2, [r1]
 80100b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80100ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d1e4      	bne.n	801008a <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	3308      	adds	r3, #8
 80100c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ca:	e853 3f00 	ldrex	r3, [r3]
 80100ce:	623b      	str	r3, [r7, #32]
   return(result);
 80100d0:	6a3b      	ldr	r3, [r7, #32]
 80100d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80100d6:	f023 0301 	bic.w	r3, r3, #1
 80100da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	3308      	adds	r3, #8
 80100e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80100e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80100ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100f0:	e841 2300 	strex	r3, r2, [r1]
 80100f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80100f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1e1      	bne.n	80100c0 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2220      	movs	r2, #32
 8010100:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	e853 3f00 	ldrex	r3, [r3]
 801011c:	60fb      	str	r3, [r7, #12]
   return(result);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f023 0310 	bic.w	r3, r3, #16
 8010124:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	461a      	mov	r2, r3
 801012e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010132:	61fb      	str	r3, [r7, #28]
 8010134:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010136:	69b9      	ldr	r1, [r7, #24]
 8010138:	69fa      	ldr	r2, [r7, #28]
 801013a:	e841 2300 	strex	r3, r2, [r1]
 801013e:	617b      	str	r3, [r7, #20]
   return(result);
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1e4      	bne.n	8010110 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2202      	movs	r2, #2
 801014a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801014c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010150:	4619      	mov	r1, r3
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 f86a 	bl	801022c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010158:	e04e      	b.n	80101f8 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801015a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801015e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010162:	2b00      	cmp	r3, #0
 8010164:	d014      	beq.n	8010190 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801016a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801016e:	2b00      	cmp	r3, #0
 8010170:	d105      	bne.n	801017e <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801017a:	2b00      	cmp	r3, #0
 801017c:	d008      	beq.n	8010190 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010182:	2b00      	cmp	r3, #0
 8010184:	d03a      	beq.n	80101fc <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	4798      	blx	r3
    }
    return;
 801018e:	e035      	b.n	80101fc <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010198:	2b00      	cmp	r3, #0
 801019a:	d009      	beq.n	80101b0 <HAL_UART_IRQHandler+0x5c4>
 801019c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d003      	beq.n	80101b0 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f000 fc2e 	bl	8010a0a <UART_EndTransmit_IT>
    return;
 80101ae:	e026      	b.n	80101fe <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80101b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d009      	beq.n	80101d0 <HAL_UART_IRQHandler+0x5e4>
 80101bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d003      	beq.n	80101d0 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 fc53 	bl	8010a74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101ce:	e016      	b.n	80101fe <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80101d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d010      	beq.n	80101fe <HAL_UART_IRQHandler+0x612>
 80101dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	da0c      	bge.n	80101fe <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 fc3b 	bl	8010a60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101ea:	e008      	b.n	80101fe <HAL_UART_IRQHandler+0x612>
      return;
 80101ec:	bf00      	nop
 80101ee:	e006      	b.n	80101fe <HAL_UART_IRQHandler+0x612>
    return;
 80101f0:	bf00      	nop
 80101f2:	e004      	b.n	80101fe <HAL_UART_IRQHandler+0x612>
      return;
 80101f4:	bf00      	nop
 80101f6:	e002      	b.n	80101fe <HAL_UART_IRQHandler+0x612>
      return;
 80101f8:	bf00      	nop
 80101fa:	e000      	b.n	80101fe <HAL_UART_IRQHandler+0x612>
    return;
 80101fc:	bf00      	nop
  }
}
 80101fe:	37e8      	adds	r7, #232	@ 0xe8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010204:	b480      	push	{r7}
 8010206:	b083      	sub	sp, #12
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801020c:	bf00      	nop
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010218:	b480      	push	{r7}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010220:	bf00      	nop
 8010222:	370c      	adds	r7, #12
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr

0801022c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	460b      	mov	r3, r1
 8010236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010238:	bf00      	nop
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr

08010244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010248:	b094      	sub	sp, #80	@ 0x50
 801024a:	af00      	add	r7, sp, #0
 801024c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801024e:	2300      	movs	r3, #0
 8010250:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	4b83      	ldr	r3, [pc, #524]	@ (8010468 <UART_SetConfig+0x224>)
 801025a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801025c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801025e:	689a      	ldr	r2, [r3, #8]
 8010260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010262:	691b      	ldr	r3, [r3, #16]
 8010264:	431a      	orrs	r2, r3
 8010266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010268:	695b      	ldr	r3, [r3, #20]
 801026a:	431a      	orrs	r2, r3
 801026c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026e:	69db      	ldr	r3, [r3, #28]
 8010270:	4313      	orrs	r3, r2
 8010272:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	497c      	ldr	r1, [pc, #496]	@ (801046c <UART_SetConfig+0x228>)
 801027c:	4019      	ands	r1, r3
 801027e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010284:	430b      	orrs	r3, r1
 8010286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010294:	68d9      	ldr	r1, [r3, #12]
 8010296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	ea40 0301 	orr.w	r3, r0, r1
 801029e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80102a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a2:	699b      	ldr	r3, [r3, #24]
 80102a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80102a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	4b6f      	ldr	r3, [pc, #444]	@ (8010468 <UART_SetConfig+0x224>)
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d009      	beq.n	80102c4 <UART_SetConfig+0x80>
 80102b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	4b6e      	ldr	r3, [pc, #440]	@ (8010470 <UART_SetConfig+0x22c>)
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d004      	beq.n	80102c4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80102ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102bc:	6a1a      	ldr	r2, [r3, #32]
 80102be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102c0:	4313      	orrs	r3, r2
 80102c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80102c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80102ce:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80102d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102d8:	430b      	orrs	r3, r1
 80102da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80102dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102e2:	f023 000f 	bic.w	r0, r3, #15
 80102e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80102ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	ea40 0301 	orr.w	r3, r0, r1
 80102f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	4b5e      	ldr	r3, [pc, #376]	@ (8010474 <UART_SetConfig+0x230>)
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d102      	bne.n	8010304 <UART_SetConfig+0xc0>
 80102fe:	2301      	movs	r3, #1
 8010300:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010302:	e032      	b.n	801036a <UART_SetConfig+0x126>
 8010304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	4b5b      	ldr	r3, [pc, #364]	@ (8010478 <UART_SetConfig+0x234>)
 801030a:	429a      	cmp	r2, r3
 801030c:	d102      	bne.n	8010314 <UART_SetConfig+0xd0>
 801030e:	2302      	movs	r3, #2
 8010310:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010312:	e02a      	b.n	801036a <UART_SetConfig+0x126>
 8010314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	4b58      	ldr	r3, [pc, #352]	@ (801047c <UART_SetConfig+0x238>)
 801031a:	429a      	cmp	r2, r3
 801031c:	d102      	bne.n	8010324 <UART_SetConfig+0xe0>
 801031e:	2304      	movs	r3, #4
 8010320:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010322:	e022      	b.n	801036a <UART_SetConfig+0x126>
 8010324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	4b55      	ldr	r3, [pc, #340]	@ (8010480 <UART_SetConfig+0x23c>)
 801032a:	429a      	cmp	r2, r3
 801032c:	d102      	bne.n	8010334 <UART_SetConfig+0xf0>
 801032e:	2308      	movs	r3, #8
 8010330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010332:	e01a      	b.n	801036a <UART_SetConfig+0x126>
 8010334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	4b52      	ldr	r3, [pc, #328]	@ (8010484 <UART_SetConfig+0x240>)
 801033a:	429a      	cmp	r2, r3
 801033c:	d102      	bne.n	8010344 <UART_SetConfig+0x100>
 801033e:	2310      	movs	r3, #16
 8010340:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010342:	e012      	b.n	801036a <UART_SetConfig+0x126>
 8010344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	4b4f      	ldr	r3, [pc, #316]	@ (8010488 <UART_SetConfig+0x244>)
 801034a:	429a      	cmp	r2, r3
 801034c:	d103      	bne.n	8010356 <UART_SetConfig+0x112>
 801034e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8010352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010354:	e009      	b.n	801036a <UART_SetConfig+0x126>
 8010356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	4b43      	ldr	r3, [pc, #268]	@ (8010468 <UART_SetConfig+0x224>)
 801035c:	429a      	cmp	r2, r3
 801035e:	d102      	bne.n	8010366 <UART_SetConfig+0x122>
 8010360:	2320      	movs	r3, #32
 8010362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010364:	e001      	b.n	801036a <UART_SetConfig+0x126>
 8010366:	2300      	movs	r3, #0
 8010368:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801036a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	4b3e      	ldr	r3, [pc, #248]	@ (8010468 <UART_SetConfig+0x224>)
 8010370:	429a      	cmp	r2, r3
 8010372:	d005      	beq.n	8010380 <UART_SetConfig+0x13c>
 8010374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010376:	681a      	ldr	r2, [r3, #0]
 8010378:	4b3d      	ldr	r3, [pc, #244]	@ (8010470 <UART_SetConfig+0x22c>)
 801037a:	429a      	cmp	r2, r3
 801037c:	f040 8088 	bne.w	8010490 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010382:	2200      	movs	r2, #0
 8010384:	623b      	str	r3, [r7, #32]
 8010386:	627a      	str	r2, [r7, #36]	@ 0x24
 8010388:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801038c:	f7fb fdd6 	bl	800bf3c <HAL_RCCEx_GetPeriphCLKFreq>
 8010390:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8010392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010394:	2b00      	cmp	r3, #0
 8010396:	f000 80eb 	beq.w	8010570 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801039a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801039e:	4a3b      	ldr	r2, [pc, #236]	@ (801048c <UART_SetConfig+0x248>)
 80103a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103a4:	461a      	mov	r2, r3
 80103a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80103ac:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103b0:	685a      	ldr	r2, [r3, #4]
 80103b2:	4613      	mov	r3, r2
 80103b4:	005b      	lsls	r3, r3, #1
 80103b6:	4413      	add	r3, r2
 80103b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d305      	bcc.n	80103ca <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80103be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d903      	bls.n	80103d2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80103ca:	2301      	movs	r3, #1
 80103cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80103d0:	e048      	b.n	8010464 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103d4:	2200      	movs	r2, #0
 80103d6:	61bb      	str	r3, [r7, #24]
 80103d8:	61fa      	str	r2, [r7, #28]
 80103da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103de:	4a2b      	ldr	r2, [pc, #172]	@ (801048c <UART_SetConfig+0x248>)
 80103e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	2200      	movs	r2, #0
 80103e8:	613b      	str	r3, [r7, #16]
 80103ea:	617a      	str	r2, [r7, #20]
 80103ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80103f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80103f4:	f7ef ff5e 	bl	80002b4 <__aeabi_uldivmod>
 80103f8:	4602      	mov	r2, r0
 80103fa:	460b      	mov	r3, r1
 80103fc:	4610      	mov	r0, r2
 80103fe:	4619      	mov	r1, r3
 8010400:	f04f 0200 	mov.w	r2, #0
 8010404:	f04f 0300 	mov.w	r3, #0
 8010408:	020b      	lsls	r3, r1, #8
 801040a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801040e:	0202      	lsls	r2, r0, #8
 8010410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010412:	6849      	ldr	r1, [r1, #4]
 8010414:	0849      	lsrs	r1, r1, #1
 8010416:	2000      	movs	r0, #0
 8010418:	460c      	mov	r4, r1
 801041a:	4605      	mov	r5, r0
 801041c:	eb12 0804 	adds.w	r8, r2, r4
 8010420:	eb43 0905 	adc.w	r9, r3, r5
 8010424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	2200      	movs	r2, #0
 801042a:	60bb      	str	r3, [r7, #8]
 801042c:	60fa      	str	r2, [r7, #12]
 801042e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010432:	4640      	mov	r0, r8
 8010434:	4649      	mov	r1, r9
 8010436:	f7ef ff3d 	bl	80002b4 <__aeabi_uldivmod>
 801043a:	4602      	mov	r2, r0
 801043c:	460b      	mov	r3, r1
 801043e:	4613      	mov	r3, r2
 8010440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010444:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010448:	d308      	bcc.n	801045c <UART_SetConfig+0x218>
 801044a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801044c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010450:	d204      	bcs.n	801045c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8010452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010458:	60da      	str	r2, [r3, #12]
 801045a:	e003      	b.n	8010464 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 801045c:	2301      	movs	r3, #1
 801045e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8010462:	e085      	b.n	8010570 <UART_SetConfig+0x32c>
 8010464:	e084      	b.n	8010570 <UART_SetConfig+0x32c>
 8010466:	bf00      	nop
 8010468:	46002400 	.word	0x46002400
 801046c:	cfff69f3 	.word	0xcfff69f3
 8010470:	56002400 	.word	0x56002400
 8010474:	40013800 	.word	0x40013800
 8010478:	40004400 	.word	0x40004400
 801047c:	40004800 	.word	0x40004800
 8010480:	40004c00 	.word	0x40004c00
 8010484:	40005000 	.word	0x40005000
 8010488:	40006400 	.word	0x40006400
 801048c:	080116a8 	.word	0x080116a8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010492:	69db      	ldr	r3, [r3, #28]
 8010494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010498:	d13c      	bne.n	8010514 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801049a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801049c:	2200      	movs	r2, #0
 801049e:	603b      	str	r3, [r7, #0]
 80104a0:	607a      	str	r2, [r7, #4]
 80104a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80104a6:	f7fb fd49 	bl	800bf3c <HAL_RCCEx_GetPeriphCLKFreq>
 80104aa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80104ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d05e      	beq.n	8010570 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104b6:	4a39      	ldr	r2, [pc, #228]	@ (801059c <UART_SetConfig+0x358>)
 80104b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104bc:	461a      	mov	r2, r3
 80104be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80104c4:	005a      	lsls	r2, r3, #1
 80104c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	085b      	lsrs	r3, r3, #1
 80104cc:	441a      	add	r2, r3
 80104ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80104d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80104d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104da:	2b0f      	cmp	r3, #15
 80104dc:	d916      	bls.n	801050c <UART_SetConfig+0x2c8>
 80104de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104e4:	d212      	bcs.n	801050c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80104e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	f023 030f 	bic.w	r3, r3, #15
 80104ee:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80104f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104f2:	085b      	lsrs	r3, r3, #1
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	f003 0307 	and.w	r3, r3, #7
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80104fe:	4313      	orrs	r3, r2
 8010500:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010508:	60da      	str	r2, [r3, #12]
 801050a:	e031      	b.n	8010570 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801050c:	2301      	movs	r3, #1
 801050e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010512:	e02d      	b.n	8010570 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010516:	2200      	movs	r2, #0
 8010518:	469a      	mov	sl, r3
 801051a:	4693      	mov	fp, r2
 801051c:	4650      	mov	r0, sl
 801051e:	4659      	mov	r1, fp
 8010520:	f7fb fd0c 	bl	800bf3c <HAL_RCCEx_GetPeriphCLKFreq>
 8010524:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010528:	2b00      	cmp	r3, #0
 801052a:	d021      	beq.n	8010570 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801052c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801052e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010530:	4a1a      	ldr	r2, [pc, #104]	@ (801059c <UART_SetConfig+0x358>)
 8010532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010536:	461a      	mov	r2, r3
 8010538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801053a:	fbb3 f2f2 	udiv	r2, r3, r2
 801053e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	085b      	lsrs	r3, r3, #1
 8010544:	441a      	add	r2, r3
 8010546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	fbb2 f3f3 	udiv	r3, r2, r3
 801054e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010552:	2b0f      	cmp	r3, #15
 8010554:	d909      	bls.n	801056a <UART_SetConfig+0x326>
 8010556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801055c:	d205      	bcs.n	801056a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801055e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010560:	b29a      	uxth	r2, r3
 8010562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	60da      	str	r2, [r3, #12]
 8010568:	e002      	b.n	8010570 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801056a:	2301      	movs	r3, #1
 801056c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010572:	2201      	movs	r2, #1
 8010574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801057a:	2201      	movs	r2, #1
 801057c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010582:	2200      	movs	r2, #0
 8010584:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010588:	2200      	movs	r2, #0
 801058a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801058c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010590:	4618      	mov	r0, r3
 8010592:	3750      	adds	r7, #80	@ 0x50
 8010594:	46bd      	mov	sp, r7
 8010596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801059a:	bf00      	nop
 801059c:	080116a8 	.word	0x080116a8

080105a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ac:	f003 0308 	and.w	r3, r3, #8
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00a      	beq.n	80105ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	430a      	orrs	r2, r1
 80105c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ce:	f003 0301 	and.w	r3, r3, #1
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00a      	beq.n	80105ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	430a      	orrs	r2, r1
 80105ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f0:	f003 0302 	and.w	r3, r3, #2
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d00a      	beq.n	801060e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	430a      	orrs	r2, r1
 801060c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010612:	f003 0304 	and.w	r3, r3, #4
 8010616:	2b00      	cmp	r3, #0
 8010618:	d00a      	beq.n	8010630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	430a      	orrs	r2, r1
 801062e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010634:	f003 0310 	and.w	r3, r3, #16
 8010638:	2b00      	cmp	r3, #0
 801063a:	d00a      	beq.n	8010652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	689b      	ldr	r3, [r3, #8]
 8010642:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	430a      	orrs	r2, r1
 8010650:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010656:	f003 0320 	and.w	r3, r3, #32
 801065a:	2b00      	cmp	r3, #0
 801065c:	d00a      	beq.n	8010674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	689b      	ldr	r3, [r3, #8]
 8010664:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	430a      	orrs	r2, r1
 8010672:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801067c:	2b00      	cmp	r3, #0
 801067e:	d01a      	beq.n	80106b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	430a      	orrs	r2, r1
 8010694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801069a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801069e:	d10a      	bne.n	80106b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	430a      	orrs	r2, r1
 80106b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00a      	beq.n	80106d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	430a      	orrs	r2, r1
 80106d6:	605a      	str	r2, [r3, #4]
  }
}
 80106d8:	bf00      	nop
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b098      	sub	sp, #96	@ 0x60
 80106e8:	af02      	add	r7, sp, #8
 80106ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2200      	movs	r2, #0
 80106f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106f4:	f7f2 fac2 	bl	8002c7c <HAL_GetTick>
 80106f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f003 0308 	and.w	r3, r3, #8
 8010704:	2b08      	cmp	r3, #8
 8010706:	d12f      	bne.n	8010768 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010708:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801070c:	9300      	str	r3, [sp, #0]
 801070e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010710:	2200      	movs	r2, #0
 8010712:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 f88e 	bl	8010838 <UART_WaitOnFlagUntilTimeout>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d022      	beq.n	8010768 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072a:	e853 3f00 	ldrex	r3, [r3]
 801072e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010736:	653b      	str	r3, [r7, #80]	@ 0x50
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	461a      	mov	r2, r3
 801073e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010740:	647b      	str	r3, [r7, #68]	@ 0x44
 8010742:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010744:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010748:	e841 2300 	strex	r3, r2, [r1]
 801074c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801074e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010750:	2b00      	cmp	r3, #0
 8010752:	d1e6      	bne.n	8010722 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2220      	movs	r2, #32
 8010758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010764:	2303      	movs	r3, #3
 8010766:	e063      	b.n	8010830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f003 0304 	and.w	r3, r3, #4
 8010772:	2b04      	cmp	r3, #4
 8010774:	d149      	bne.n	801080a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010776:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801077a:	9300      	str	r3, [sp, #0]
 801077c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801077e:	2200      	movs	r2, #0
 8010780:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 f857 	bl	8010838 <UART_WaitOnFlagUntilTimeout>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d03c      	beq.n	801080a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010798:	e853 3f00 	ldrex	r3, [r3]
 801079c:	623b      	str	r3, [r7, #32]
   return(result);
 801079e:	6a3b      	ldr	r3, [r7, #32]
 80107a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80107a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	461a      	mov	r2, r3
 80107ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80107b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107b6:	e841 2300 	strex	r3, r2, [r1]
 80107ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1e6      	bne.n	8010790 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	3308      	adds	r3, #8
 80107c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	e853 3f00 	ldrex	r3, [r3]
 80107d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	f023 0301 	bic.w	r3, r3, #1
 80107d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	3308      	adds	r3, #8
 80107e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107e2:	61fa      	str	r2, [r7, #28]
 80107e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e6:	69b9      	ldr	r1, [r7, #24]
 80107e8:	69fa      	ldr	r2, [r7, #28]
 80107ea:	e841 2300 	strex	r3, r2, [r1]
 80107ee:	617b      	str	r3, [r7, #20]
   return(result);
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d1e5      	bne.n	80107c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2220      	movs	r2, #32
 80107fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2200      	movs	r2, #0
 8010802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010806:	2303      	movs	r3, #3
 8010808:	e012      	b.n	8010830 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2220      	movs	r2, #32
 801080e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2220      	movs	r2, #32
 8010816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2200      	movs	r2, #0
 801082a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3758      	adds	r7, #88	@ 0x58
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	603b      	str	r3, [r7, #0]
 8010844:	4613      	mov	r3, r2
 8010846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010848:	e04f      	b.n	80108ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801084a:	69bb      	ldr	r3, [r7, #24]
 801084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010850:	d04b      	beq.n	80108ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010852:	f7f2 fa13 	bl	8002c7c <HAL_GetTick>
 8010856:	4602      	mov	r2, r0
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	1ad3      	subs	r3, r2, r3
 801085c:	69ba      	ldr	r2, [r7, #24]
 801085e:	429a      	cmp	r2, r3
 8010860:	d302      	bcc.n	8010868 <UART_WaitOnFlagUntilTimeout+0x30>
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d101      	bne.n	801086c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010868:	2303      	movs	r3, #3
 801086a:	e04e      	b.n	801090a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f003 0304 	and.w	r3, r3, #4
 8010876:	2b00      	cmp	r3, #0
 8010878:	d037      	beq.n	80108ea <UART_WaitOnFlagUntilTimeout+0xb2>
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	2b80      	cmp	r3, #128	@ 0x80
 801087e:	d034      	beq.n	80108ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	2b40      	cmp	r3, #64	@ 0x40
 8010884:	d031      	beq.n	80108ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	69db      	ldr	r3, [r3, #28]
 801088c:	f003 0308 	and.w	r3, r3, #8
 8010890:	2b08      	cmp	r3, #8
 8010892:	d110      	bne.n	80108b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2208      	movs	r2, #8
 801089a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f000 f838 	bl	8010912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2208      	movs	r2, #8
 80108a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2200      	movs	r2, #0
 80108ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80108b2:	2301      	movs	r3, #1
 80108b4:	e029      	b.n	801090a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	69db      	ldr	r3, [r3, #28]
 80108bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80108c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108c4:	d111      	bne.n	80108ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80108ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108d0:	68f8      	ldr	r0, [r7, #12]
 80108d2:	f000 f81e 	bl	8010912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2220      	movs	r2, #32
 80108da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2200      	movs	r2, #0
 80108e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80108e6:	2303      	movs	r3, #3
 80108e8:	e00f      	b.n	801090a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	69da      	ldr	r2, [r3, #28]
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	4013      	ands	r3, r2
 80108f4:	68ba      	ldr	r2, [r7, #8]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	bf0c      	ite	eq
 80108fa:	2301      	moveq	r3, #1
 80108fc:	2300      	movne	r3, #0
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	461a      	mov	r2, r3
 8010902:	79fb      	ldrb	r3, [r7, #7]
 8010904:	429a      	cmp	r2, r3
 8010906:	d0a0      	beq.n	801084a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010912:	b480      	push	{r7}
 8010914:	b095      	sub	sp, #84	@ 0x54
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010922:	e853 3f00 	ldrex	r3, [r3]
 8010926:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801092e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	461a      	mov	r2, r3
 8010936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010938:	643b      	str	r3, [r7, #64]	@ 0x40
 801093a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801093c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801093e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010940:	e841 2300 	strex	r3, r2, [r1]
 8010944:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1e6      	bne.n	801091a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	3308      	adds	r3, #8
 8010952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	e853 3f00 	ldrex	r3, [r3]
 801095a:	61fb      	str	r3, [r7, #28]
   return(result);
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010962:	f023 0301 	bic.w	r3, r3, #1
 8010966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	3308      	adds	r3, #8
 801096e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010970:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010974:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010978:	e841 2300 	strex	r3, r2, [r1]
 801097c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801097e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010980:	2b00      	cmp	r3, #0
 8010982:	d1e3      	bne.n	801094c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010988:	2b01      	cmp	r3, #1
 801098a:	d118      	bne.n	80109be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	e853 3f00 	ldrex	r3, [r3]
 8010998:	60bb      	str	r3, [r7, #8]
   return(result);
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	f023 0310 	bic.w	r3, r3, #16
 80109a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	461a      	mov	r2, r3
 80109a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109aa:	61bb      	str	r3, [r7, #24]
 80109ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ae:	6979      	ldr	r1, [r7, #20]
 80109b0:	69ba      	ldr	r2, [r7, #24]
 80109b2:	e841 2300 	strex	r3, r2, [r1]
 80109b6:	613b      	str	r3, [r7, #16]
   return(result);
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d1e6      	bne.n	801098c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2220      	movs	r2, #32
 80109c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2200      	movs	r2, #0
 80109ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2200      	movs	r2, #0
 80109d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80109d2:	bf00      	nop
 80109d4:	3754      	adds	r7, #84	@ 0x54
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr

080109de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109de:	b580      	push	{r7, lr}
 80109e0:	b084      	sub	sp, #16
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2200      	movs	r2, #0
 80109f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109fc:	68f8      	ldr	r0, [r7, #12]
 80109fe:	f7ff fc0b 	bl	8010218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a02:	bf00      	nop
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	b088      	sub	sp, #32
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	e853 3f00 	ldrex	r3, [r3]
 8010a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a26:	61fb      	str	r3, [r7, #28]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	69fb      	ldr	r3, [r7, #28]
 8010a30:	61bb      	str	r3, [r7, #24]
 8010a32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a34:	6979      	ldr	r1, [r7, #20]
 8010a36:	69ba      	ldr	r2, [r7, #24]
 8010a38:	e841 2300 	strex	r3, r2, [r1]
 8010a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d1e6      	bne.n	8010a12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2220      	movs	r2, #32
 8010a48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7ff fbd6 	bl	8010204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a58:	bf00      	nop
 8010a5a:	3720      	adds	r7, #32
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b083      	sub	sp, #12
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a68:	bf00      	nop
 8010a6a:	370c      	adds	r7, #12
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b083      	sub	sp, #12
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010a7c:	bf00      	nop
 8010a7e:	370c      	adds	r7, #12
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr

08010a88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d101      	bne.n	8010a9e <HAL_UARTEx_DisableFifoMode+0x16>
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	e027      	b.n	8010aee <HAL_UARTEx_DisableFifoMode+0x66>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2224      	movs	r2, #36	@ 0x24
 8010aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f022 0201 	bic.w	r2, r2, #1
 8010ac4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010acc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	68fa      	ldr	r2, [r7, #12]
 8010ada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2220      	movs	r2, #32
 8010ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010aec:	2300      	movs	r3, #0
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3714      	adds	r7, #20
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr

08010afa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b084      	sub	sp, #16
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
 8010b02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b0a:	2b01      	cmp	r3, #1
 8010b0c:	d101      	bne.n	8010b12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010b0e:	2302      	movs	r3, #2
 8010b10:	e02d      	b.n	8010b6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2201      	movs	r2, #1
 8010b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2224      	movs	r2, #36	@ 0x24
 8010b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f022 0201 	bic.w	r2, r2, #1
 8010b38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	689b      	ldr	r3, [r3, #8]
 8010b40:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	683a      	ldr	r2, [r7, #0]
 8010b4a:	430a      	orrs	r2, r1
 8010b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 f850 	bl	8010bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2220      	movs	r2, #32
 8010b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b6c:	2300      	movs	r3, #0
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3710      	adds	r7, #16
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b084      	sub	sp, #16
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
 8010b7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d101      	bne.n	8010b8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b8a:	2302      	movs	r3, #2
 8010b8c:	e02d      	b.n	8010bea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2201      	movs	r2, #1
 8010b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2224      	movs	r2, #36	@ 0x24
 8010b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	f022 0201 	bic.w	r2, r2, #1
 8010bb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	683a      	ldr	r2, [r7, #0]
 8010bc6:	430a      	orrs	r2, r1
 8010bc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 f812 	bl	8010bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	68fa      	ldr	r2, [r7, #12]
 8010bd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2220      	movs	r2, #32
 8010bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2200      	movs	r2, #0
 8010be4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010be8:	2300      	movs	r3, #0
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3710      	adds	r7, #16
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
	...

08010bf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b085      	sub	sp, #20
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d108      	bne.n	8010c16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2201      	movs	r2, #1
 8010c08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2201      	movs	r2, #1
 8010c10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010c14:	e031      	b.n	8010c7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010c16:	2308      	movs	r3, #8
 8010c18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010c1a:	2308      	movs	r3, #8
 8010c1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	0e5b      	lsrs	r3, r3, #25
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	f003 0307 	and.w	r3, r3, #7
 8010c2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	689b      	ldr	r3, [r3, #8]
 8010c34:	0f5b      	lsrs	r3, r3, #29
 8010c36:	b2db      	uxtb	r3, r3
 8010c38:	f003 0307 	and.w	r3, r3, #7
 8010c3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c3e:	7bbb      	ldrb	r3, [r7, #14]
 8010c40:	7b3a      	ldrb	r2, [r7, #12]
 8010c42:	4911      	ldr	r1, [pc, #68]	@ (8010c88 <UARTEx_SetNbDataToProcess+0x94>)
 8010c44:	5c8a      	ldrb	r2, [r1, r2]
 8010c46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010c4a:	7b3a      	ldrb	r2, [r7, #12]
 8010c4c:	490f      	ldr	r1, [pc, #60]	@ (8010c8c <UARTEx_SetNbDataToProcess+0x98>)
 8010c4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c50:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c54:	b29a      	uxth	r2, r3
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c5c:	7bfb      	ldrb	r3, [r7, #15]
 8010c5e:	7b7a      	ldrb	r2, [r7, #13]
 8010c60:	4909      	ldr	r1, [pc, #36]	@ (8010c88 <UARTEx_SetNbDataToProcess+0x94>)
 8010c62:	5c8a      	ldrb	r2, [r1, r2]
 8010c64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010c68:	7b7a      	ldrb	r2, [r7, #13]
 8010c6a:	4908      	ldr	r1, [pc, #32]	@ (8010c8c <UARTEx_SetNbDataToProcess+0x98>)
 8010c6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010c7a:	bf00      	nop
 8010c7c:	3714      	adds	r7, #20
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	080116c0 	.word	0x080116c0
 8010c8c:	080116c8 	.word	0x080116c8

08010c90 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b086      	sub	sp, #24
 8010c94:	af02      	add	r7, sp, #8
 8010c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010c9c:	f7f1 ffee 	bl	8002c7c <HAL_GetTick>
 8010ca0:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d102      	bne.n	8010cae <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	73fb      	strb	r3, [r7, #15]
 8010cac:	e137      	b.n	8010f1e <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4a76      	ldr	r2, [pc, #472]	@ (8010e8c <HAL_XSPI_Init+0x1fc>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d008      	beq.n	8010cca <HAL_XSPI_Init+0x3a>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	4a74      	ldr	r2, [pc, #464]	@ (8010e90 <HAL_XSPI_Init+0x200>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d003      	beq.n	8010cca <HAL_XSPI_Init+0x3a>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	4a73      	ldr	r2, [pc, #460]	@ (8010e94 <HAL_XSPI_Init+0x204>)
 8010cc8:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	4a72      	ldr	r2, [pc, #456]	@ (8010e98 <HAL_XSPI_Init+0x208>)
 8010cd0:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4a6d      	ldr	r2, [pc, #436]	@ (8010e8c <HAL_XSPI_Init+0x1fc>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d008      	beq.n	8010cee <HAL_XSPI_Init+0x5e>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8010e90 <HAL_XSPI_Init+0x200>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d003      	beq.n	8010cee <HAL_XSPI_Init+0x5e>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4a6a      	ldr	r2, [pc, #424]	@ (8010e94 <HAL_XSPI_Init+0x204>)
 8010cec:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	4a66      	ldr	r2, [pc, #408]	@ (8010e8c <HAL_XSPI_Init+0x1fc>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d008      	beq.n	8010d0a <HAL_XSPI_Init+0x7a>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	4a64      	ldr	r2, [pc, #400]	@ (8010e90 <HAL_XSPI_Init+0x200>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d003      	beq.n	8010d0a <HAL_XSPI_Init+0x7a>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4a63      	ldr	r2, [pc, #396]	@ (8010e94 <HAL_XSPI_Init+0x204>)
 8010d08:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	f040 8102 	bne.w	8010f1e <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f7f0 ffac 	bl	8001c78 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8010d20:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 f8ff 	bl	8010f28 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	689a      	ldr	r2, [r3, #8]
 8010d30:	4b5a      	ldr	r3, [pc, #360]	@ (8010e9c <HAL_XSPI_Init+0x20c>)
 8010d32:	4013      	ands	r3, r2
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	68d1      	ldr	r1, [r2, #12]
 8010d38:	687a      	ldr	r2, [r7, #4]
 8010d3a:	6912      	ldr	r2, [r2, #16]
 8010d3c:	0412      	lsls	r2, r2, #16
 8010d3e:	4311      	orrs	r1, r2
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	6952      	ldr	r2, [r2, #20]
 8010d44:	3a01      	subs	r2, #1
 8010d46:	0212      	lsls	r2, r2, #8
 8010d48:	4311      	orrs	r1, r2
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	69d2      	ldr	r2, [r2, #28]
 8010d4e:	4311      	orrs	r1, r2
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	6812      	ldr	r2, [r2, #0]
 8010d54:	430b      	orrs	r3, r1
 8010d56:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8010e8c <HAL_XSPI_Init+0x1fc>)
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d00e      	beq.n	8010d80 <HAL_XSPI_Init+0xf0>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	4a4a      	ldr	r2, [pc, #296]	@ (8010e90 <HAL_XSPI_Init+0x200>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d009      	beq.n	8010d80 <HAL_XSPI_Init+0xf0>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a48      	ldr	r2, [pc, #288]	@ (8010e94 <HAL_XSPI_Init+0x204>)
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d004      	beq.n	8010d80 <HAL_XSPI_Init+0xf0>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4a49      	ldr	r2, [pc, #292]	@ (8010ea0 <HAL_XSPI_Init+0x210>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d10a      	bne.n	8010d96 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	689b      	ldr	r3, [r3, #8]
 8010d86:	f023 0108 	bic.w	r1, r3, #8
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	430a      	orrs	r2, r1
 8010d94:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6a1a      	ldr	r2, [r3, #32]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	430a      	orrs	r2, r1
 8010daa:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dba:	041a      	lsls	r2, r3, #16
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	430a      	orrs	r2, r1
 8010dc2:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	4a30      	ldr	r2, [pc, #192]	@ (8010e8c <HAL_XSPI_Init+0x1fc>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d00e      	beq.n	8010dec <HAL_XSPI_Init+0x15c>
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8010e90 <HAL_XSPI_Init+0x200>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d009      	beq.n	8010dec <HAL_XSPI_Init+0x15c>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8010e94 <HAL_XSPI_Init+0x204>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d004      	beq.n	8010dec <HAL_XSPI_Init+0x15c>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a2e      	ldr	r2, [pc, #184]	@ (8010ea0 <HAL_XSPI_Init+0x210>)
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d10a      	bne.n	8010e02 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	691b      	ldr	r3, [r3, #16]
 8010df2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	430a      	orrs	r2, r1
 8010e00:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010e0a:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	3b01      	subs	r3, #1
 8010e1c:	021a      	lsls	r2, r3, #8
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	430a      	orrs	r2, r1
 8010e24:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e2a:	9300      	str	r3, [sp, #0]
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	2120      	movs	r1, #32
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 f887 	bl	8010f46 <XSPI_WaitFlagStateUntilTimeout>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010e3c:	7bfb      	ldrb	r3, [r7, #15]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d16d      	bne.n	8010f1e <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	430a      	orrs	r2, r1
 8010e56:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8010e98 <HAL_XSPI_Init+0x208>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d004      	beq.n	8010e6c <HAL_XSPI_Init+0x1dc>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	4a0f      	ldr	r2, [pc, #60]	@ (8010ea4 <HAL_XSPI_Init+0x214>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d11d      	bne.n	8010ea8 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e70:	9300      	str	r3, [sp, #0]
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	2200      	movs	r2, #0
 8010e76:	2120      	movs	r1, #32
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 f864 	bl	8010f46 <XSPI_WaitFlagStateUntilTimeout>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8010e82:	7bfb      	ldrb	r3, [r7, #15]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d00f      	beq.n	8010ea8 <HAL_XSPI_Init+0x218>
          {
            return status;
 8010e88:	7bfb      	ldrb	r3, [r7, #15]
 8010e8a:	e049      	b.n	8010f20 <HAL_XSPI_Init+0x290>
 8010e8c:	420d1400 	.word	0x420d1400
 8010e90:	520d1400 	.word	0x520d1400
 8010e94:	420d2400 	.word	0x420d2400
 8010e98:	420d3400 	.word	0x420d3400
 8010e9c:	f8e0c0fc 	.word	0xf8e0c0fc
 8010ea0:	520d2400 	.word	0x520d2400
 8010ea4:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	689a      	ldr	r2, [r3, #8]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	430a      	orrs	r2, r1
 8010ebc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010ec6:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ed2:	431a      	orrs	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	430a      	orrs	r2, r1
 8010eda:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f042 0201 	orr.w	r2, r2, #1
 8010eec:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	699b      	ldr	r3, [r3, #24]
 8010ef2:	2b02      	cmp	r3, #2
 8010ef4:	d107      	bne.n	8010f06 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	689a      	ldr	r2, [r3, #8]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f042 0202 	orr.w	r2, r2, #2
 8010f04:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010f0e:	d103      	bne.n	8010f18 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2201      	movs	r2, #1
 8010f14:	655a      	str	r2, [r3, #84]	@ 0x54
 8010f16:	e002      	b.n	8010f1e <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2202      	movs	r2, #2
 8010f1c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8010f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3710      	adds	r7, #16
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	683a      	ldr	r2, [r7, #0]
 8010f36:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	370c      	adds	r7, #12
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr

08010f46 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b084      	sub	sp, #16
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	60f8      	str	r0, [r7, #12]
 8010f4e:	60b9      	str	r1, [r7, #8]
 8010f50:	603b      	str	r3, [r7, #0]
 8010f52:	4613      	mov	r3, r2
 8010f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010f56:	e01a      	b.n	8010f8e <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f5e:	d016      	beq.n	8010f8e <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f60:	f7f1 fe8c 	bl	8002c7c <HAL_GetTick>
 8010f64:	4602      	mov	r2, r0
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	1ad3      	subs	r3, r2, r3
 8010f6a:	69ba      	ldr	r2, [r7, #24]
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	d302      	bcc.n	8010f76 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8010f70:	69bb      	ldr	r3, [r7, #24]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d10b      	bne.n	8010f8e <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f7c:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f82:	f043 0201 	orr.w	r2, r3, #1
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8010f8a:	2303      	movs	r3, #3
 8010f8c:	e00e      	b.n	8010fac <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6a1a      	ldr	r2, [r3, #32]
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	4013      	ands	r3, r2
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	bf14      	ite	ne
 8010f9c:	2301      	movne	r3, #1
 8010f9e:	2300      	moveq	r3, #0
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	79fb      	ldrb	r3, [r7, #7]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d1d6      	bne.n	8010f58 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010faa:	2300      	movs	r3, #0
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3710      	adds	r7, #16
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010fb4:	b084      	sub	sp, #16
 8010fb6:	b580      	push	{r7, lr}
 8010fb8:	b084      	sub	sp, #16
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
 8010fbe:	f107 001c 	add.w	r0, r7, #28
 8010fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010fc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010fca:	2b03      	cmp	r3, #3
 8010fcc:	d105      	bne.n	8010fda <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 fa8e 	bl	80114fc <USB_CoreReset>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8010fe4:	7fbb      	ldrb	r3, [r7, #30]
 8010fe6:	2b01      	cmp	r3, #1
 8010fe8:	d10b      	bne.n	8011002 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	689b      	ldr	r3, [r3, #8]
 8010fee:	f043 0208 	orr.w	r2, r3, #8
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	689b      	ldr	r3, [r3, #8]
 8010ffa:	f043 0220 	orr.w	r2, r3, #32
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8011002:	7bfb      	ldrb	r3, [r7, #15]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3710      	adds	r7, #16
 8011008:	46bd      	mov	sp, r7
 801100a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801100e:	b004      	add	sp, #16
 8011010:	4770      	bx	lr

08011012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011012:	b480      	push	{r7}
 8011014:	b083      	sub	sp, #12
 8011016:	af00      	add	r7, sp, #0
 8011018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	689b      	ldr	r3, [r3, #8]
 801101e:	f023 0201 	bic.w	r2, r3, #1
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011026:	2300      	movs	r3, #0
}
 8011028:	4618      	mov	r0, r3
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b084      	sub	sp, #16
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	460b      	mov	r3, r1
 801103e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011040:	2300      	movs	r3, #0
 8011042:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011050:	78fb      	ldrb	r3, [r7, #3]
 8011052:	2b01      	cmp	r3, #1
 8011054:	d115      	bne.n	8011082 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011062:	200a      	movs	r0, #10
 8011064:	f7f1 fe16 	bl	8002c94 <HAL_Delay>
      ms += 10U;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	330a      	adds	r3, #10
 801106c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 fa36 	bl	80114e0 <USB_GetMode>
 8011074:	4603      	mov	r3, r0
 8011076:	2b01      	cmp	r3, #1
 8011078:	d01e      	beq.n	80110b8 <USB_SetCurrentMode+0x84>
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2bc7      	cmp	r3, #199	@ 0xc7
 801107e:	d9f0      	bls.n	8011062 <USB_SetCurrentMode+0x2e>
 8011080:	e01a      	b.n	80110b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011082:	78fb      	ldrb	r3, [r7, #3]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d115      	bne.n	80110b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011094:	200a      	movs	r0, #10
 8011096:	f7f1 fdfd 	bl	8002c94 <HAL_Delay>
      ms += 10U;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	330a      	adds	r3, #10
 801109e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 fa1d 	bl	80114e0 <USB_GetMode>
 80110a6:	4603      	mov	r3, r0
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d005      	beq.n	80110b8 <USB_SetCurrentMode+0x84>
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80110b0:	d9f0      	bls.n	8011094 <USB_SetCurrentMode+0x60>
 80110b2:	e001      	b.n	80110b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80110b4:	2301      	movs	r3, #1
 80110b6:	e005      	b.n	80110c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80110bc:	d101      	bne.n	80110c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80110be:	2301      	movs	r3, #1
 80110c0:	e000      	b.n	80110c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80110c2:	2300      	movs	r3, #0
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3710      	adds	r7, #16
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80110cc:	b084      	sub	sp, #16
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b086      	sub	sp, #24
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
 80110d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80110da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80110de:	2300      	movs	r3, #0
 80110e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80110e6:	2300      	movs	r3, #0
 80110e8:	613b      	str	r3, [r7, #16]
 80110ea:	e009      	b.n	8011100 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	3340      	adds	r3, #64	@ 0x40
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	4413      	add	r3, r2
 80110f6:	2200      	movs	r2, #0
 80110f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	3301      	adds	r3, #1
 80110fe:	613b      	str	r3, [r7, #16]
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	2b0e      	cmp	r3, #14
 8011104:	d9f2      	bls.n	80110ec <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801110a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011112:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011116:	2b00      	cmp	r3, #0
 8011118:	d11c      	bne.n	8011154 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	68fa      	ldr	r2, [r7, #12]
 8011124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011128:	f043 0302 	orr.w	r3, r3, #2
 801112c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011132:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801113e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801114a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	639a      	str	r2, [r3, #56]	@ 0x38
 8011152:	e011      	b.n	8011178 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011158:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011164:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011170:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801117e:	461a      	mov	r2, r3
 8011180:	2300      	movs	r3, #0
 8011182:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8011184:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011188:	2b03      	cmp	r3, #3
 801118a:	d10d      	bne.n	80111a8 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801118c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011190:	2b00      	cmp	r3, #0
 8011192:	d104      	bne.n	801119e <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011194:	2100      	movs	r1, #0
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f968 	bl	801146c <USB_SetDevSpeed>
 801119c:	e008      	b.n	80111b0 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801119e:	2101      	movs	r1, #1
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 f963 	bl	801146c <USB_SetDevSpeed>
 80111a6:	e003      	b.n	80111b0 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80111a8:	2103      	movs	r1, #3
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f000 f95e 	bl	801146c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80111b0:	2110      	movs	r1, #16
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f000 f8fa 	bl	80113ac <USB_FlushTxFifo>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d001      	beq.n	80111c2 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80111be:	2301      	movs	r3, #1
 80111c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f000 f924 	bl	8011410 <USB_FlushRxFifo>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d001      	beq.n	80111d2 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80111ce:	2301      	movs	r3, #1
 80111d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111d8:	461a      	mov	r2, r3
 80111da:	2300      	movs	r3, #0
 80111dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111e4:	461a      	mov	r2, r3
 80111e6:	2300      	movs	r3, #0
 80111e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111f0:	461a      	mov	r2, r3
 80111f2:	2300      	movs	r3, #0
 80111f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80111f6:	2300      	movs	r3, #0
 80111f8:	613b      	str	r3, [r7, #16]
 80111fa:	e043      	b.n	8011284 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	015a      	lsls	r2, r3, #5
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	4413      	add	r3, r2
 8011204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801120e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011212:	d118      	bne.n	8011246 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d10a      	bne.n	8011230 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	015a      	lsls	r2, r3, #5
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	4413      	add	r3, r2
 8011222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011226:	461a      	mov	r2, r3
 8011228:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801122c:	6013      	str	r3, [r2, #0]
 801122e:	e013      	b.n	8011258 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	015a      	lsls	r2, r3, #5
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	4413      	add	r3, r2
 8011238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801123c:	461a      	mov	r2, r3
 801123e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011242:	6013      	str	r3, [r2, #0]
 8011244:	e008      	b.n	8011258 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	015a      	lsls	r2, r3, #5
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	4413      	add	r3, r2
 801124e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011252:	461a      	mov	r2, r3
 8011254:	2300      	movs	r3, #0
 8011256:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	015a      	lsls	r2, r3, #5
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	4413      	add	r3, r2
 8011260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011264:	461a      	mov	r2, r3
 8011266:	2300      	movs	r3, #0
 8011268:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	015a      	lsls	r2, r3, #5
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	4413      	add	r3, r2
 8011272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011276:	461a      	mov	r2, r3
 8011278:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801127c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	3301      	adds	r3, #1
 8011282:	613b      	str	r3, [r7, #16]
 8011284:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011288:	461a      	mov	r2, r3
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	4293      	cmp	r3, r2
 801128e:	d3b5      	bcc.n	80111fc <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011290:	2300      	movs	r3, #0
 8011292:	613b      	str	r3, [r7, #16]
 8011294:	e043      	b.n	801131e <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	015a      	lsls	r2, r3, #5
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	4413      	add	r3, r2
 801129e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80112a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80112ac:	d118      	bne.n	80112e0 <USB_DevInit+0x214>
    {
      if (i == 0U)
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10a      	bne.n	80112ca <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	015a      	lsls	r2, r3, #5
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	4413      	add	r3, r2
 80112bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112c0:	461a      	mov	r2, r3
 80112c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80112c6:	6013      	str	r3, [r2, #0]
 80112c8:	e013      	b.n	80112f2 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	015a      	lsls	r2, r3, #5
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	4413      	add	r3, r2
 80112d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112d6:	461a      	mov	r2, r3
 80112d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80112dc:	6013      	str	r3, [r2, #0]
 80112de:	e008      	b.n	80112f2 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	015a      	lsls	r2, r3, #5
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	4413      	add	r3, r2
 80112e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112ec:	461a      	mov	r2, r3
 80112ee:	2300      	movs	r3, #0
 80112f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	015a      	lsls	r2, r3, #5
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	4413      	add	r3, r2
 80112fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112fe:	461a      	mov	r2, r3
 8011300:	2300      	movs	r3, #0
 8011302:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	015a      	lsls	r2, r3, #5
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	4413      	add	r3, r2
 801130c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011310:	461a      	mov	r2, r3
 8011312:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011316:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	3301      	adds	r3, #1
 801131c:	613b      	str	r3, [r7, #16]
 801131e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011322:	461a      	mov	r2, r3
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	4293      	cmp	r3, r2
 8011328:	d3b5      	bcc.n	8011296 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011330:	691b      	ldr	r3, [r3, #16]
 8011332:	68fa      	ldr	r2, [r7, #12]
 8011334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801133c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801134a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801134c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011350:	2b00      	cmp	r3, #0
 8011352:	d105      	bne.n	8011360 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	699b      	ldr	r3, [r3, #24]
 8011358:	f043 0210 	orr.w	r2, r3, #16
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	699a      	ldr	r2, [r3, #24]
 8011364:	4b10      	ldr	r3, [pc, #64]	@ (80113a8 <USB_DevInit+0x2dc>)
 8011366:	4313      	orrs	r3, r2
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801136c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011370:	2b00      	cmp	r3, #0
 8011372:	d005      	beq.n	8011380 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	699b      	ldr	r3, [r3, #24]
 8011378:	f043 0208 	orr.w	r2, r3, #8
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011380:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011384:	2b01      	cmp	r3, #1
 8011386:	d107      	bne.n	8011398 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	699b      	ldr	r3, [r3, #24]
 801138c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011390:	f043 0304 	orr.w	r3, r3, #4
 8011394:	687a      	ldr	r2, [r7, #4]
 8011396:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011398:	7dfb      	ldrb	r3, [r7, #23]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3718      	adds	r7, #24
 801139e:	46bd      	mov	sp, r7
 80113a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80113a4:	b004      	add	sp, #16
 80113a6:	4770      	bx	lr
 80113a8:	803c3800 	.word	0x803c3800

080113ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80113b6:	2300      	movs	r3, #0
 80113b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	3301      	adds	r3, #1
 80113be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113c6:	d901      	bls.n	80113cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80113c8:	2303      	movs	r3, #3
 80113ca:	e01b      	b.n	8011404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	691b      	ldr	r3, [r3, #16]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	daf2      	bge.n	80113ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80113d4:	2300      	movs	r3, #0
 80113d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	019b      	lsls	r3, r3, #6
 80113dc:	f043 0220 	orr.w	r2, r3, #32
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	3301      	adds	r3, #1
 80113e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113f0:	d901      	bls.n	80113f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80113f2:	2303      	movs	r3, #3
 80113f4:	e006      	b.n	8011404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	691b      	ldr	r3, [r3, #16]
 80113fa:	f003 0320 	and.w	r3, r3, #32
 80113fe:	2b20      	cmp	r3, #32
 8011400:	d0f0      	beq.n	80113e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011402:	2300      	movs	r3, #0
}
 8011404:	4618      	mov	r0, r3
 8011406:	3714      	adds	r7, #20
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr

08011410 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011410:	b480      	push	{r7}
 8011412:	b085      	sub	sp, #20
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011418:	2300      	movs	r3, #0
 801141a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	3301      	adds	r3, #1
 8011420:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011428:	d901      	bls.n	801142e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801142a:	2303      	movs	r3, #3
 801142c:	e018      	b.n	8011460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	2b00      	cmp	r3, #0
 8011434:	daf2      	bge.n	801141c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011436:	2300      	movs	r3, #0
 8011438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2210      	movs	r2, #16
 801143e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	3301      	adds	r3, #1
 8011444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801144c:	d901      	bls.n	8011452 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801144e:	2303      	movs	r3, #3
 8011450:	e006      	b.n	8011460 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	691b      	ldr	r3, [r3, #16]
 8011456:	f003 0310 	and.w	r3, r3, #16
 801145a:	2b10      	cmp	r3, #16
 801145c:	d0f0      	beq.n	8011440 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801145e:	2300      	movs	r3, #0
}
 8011460:	4618      	mov	r0, r3
 8011462:	3714      	adds	r7, #20
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr

0801146c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801146c:	b480      	push	{r7}
 801146e:	b085      	sub	sp, #20
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	460b      	mov	r3, r1
 8011476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011482:	681a      	ldr	r2, [r3, #0]
 8011484:	78fb      	ldrb	r3, [r7, #3]
 8011486:	68f9      	ldr	r1, [r7, #12]
 8011488:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801148c:	4313      	orrs	r3, r2
 801148e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	3714      	adds	r7, #20
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr

0801149e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801149e:	b480      	push	{r7}
 80114a0:	b085      	sub	sp, #20
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80114b8:	f023 0303 	bic.w	r3, r3, #3
 80114bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	68fa      	ldr	r2, [r7, #12]
 80114c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80114cc:	f043 0302 	orr.w	r3, r3, #2
 80114d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80114d2:	2300      	movs	r3, #0
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3714      	adds	r7, #20
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr

080114e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b083      	sub	sp, #12
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	695b      	ldr	r3, [r3, #20]
 80114ec:	f003 0301 	and.w	r3, r3, #1
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	370c      	adds	r7, #12
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr

080114fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b085      	sub	sp, #20
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011504:	2300      	movs	r3, #0
 8011506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	3301      	adds	r3, #1
 801150c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011514:	d901      	bls.n	801151a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011516:	2303      	movs	r3, #3
 8011518:	e01b      	b.n	8011552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	691b      	ldr	r3, [r3, #16]
 801151e:	2b00      	cmp	r3, #0
 8011520:	daf2      	bge.n	8011508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011522:	2300      	movs	r3, #0
 8011524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	f043 0201 	orr.w	r2, r3, #1
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	3301      	adds	r3, #1
 8011536:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801153e:	d901      	bls.n	8011544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011540:	2303      	movs	r3, #3
 8011542:	e006      	b.n	8011552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	691b      	ldr	r3, [r3, #16]
 8011548:	f003 0301 	and.w	r3, r3, #1
 801154c:	2b01      	cmp	r3, #1
 801154e:	d0f0      	beq.n	8011532 <USB_CoreReset+0x36>

  return HAL_OK;
 8011550:	2300      	movs	r3, #0
}
 8011552:	4618      	mov	r0, r3
 8011554:	3714      	adds	r7, #20
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr

0801155e <memset>:
 801155e:	4402      	add	r2, r0
 8011560:	4603      	mov	r3, r0
 8011562:	4293      	cmp	r3, r2
 8011564:	d100      	bne.n	8011568 <memset+0xa>
 8011566:	4770      	bx	lr
 8011568:	f803 1b01 	strb.w	r1, [r3], #1
 801156c:	e7f9      	b.n	8011562 <memset+0x4>
	...

08011570 <__libc_init_array>:
 8011570:	b570      	push	{r4, r5, r6, lr}
 8011572:	4d0d      	ldr	r5, [pc, #52]	@ (80115a8 <__libc_init_array+0x38>)
 8011574:	2600      	movs	r6, #0
 8011576:	4c0d      	ldr	r4, [pc, #52]	@ (80115ac <__libc_init_array+0x3c>)
 8011578:	1b64      	subs	r4, r4, r5
 801157a:	10a4      	asrs	r4, r4, #2
 801157c:	42a6      	cmp	r6, r4
 801157e:	d109      	bne.n	8011594 <__libc_init_array+0x24>
 8011580:	4d0b      	ldr	r5, [pc, #44]	@ (80115b0 <__libc_init_array+0x40>)
 8011582:	2600      	movs	r6, #0
 8011584:	4c0b      	ldr	r4, [pc, #44]	@ (80115b4 <__libc_init_array+0x44>)
 8011586:	f000 f817 	bl	80115b8 <_init>
 801158a:	1b64      	subs	r4, r4, r5
 801158c:	10a4      	asrs	r4, r4, #2
 801158e:	42a6      	cmp	r6, r4
 8011590:	d105      	bne.n	801159e <__libc_init_array+0x2e>
 8011592:	bd70      	pop	{r4, r5, r6, pc}
 8011594:	f855 3b04 	ldr.w	r3, [r5], #4
 8011598:	3601      	adds	r6, #1
 801159a:	4798      	blx	r3
 801159c:	e7ee      	b.n	801157c <__libc_init_array+0xc>
 801159e:	f855 3b04 	ldr.w	r3, [r5], #4
 80115a2:	3601      	adds	r6, #1
 80115a4:	4798      	blx	r3
 80115a6:	e7f2      	b.n	801158e <__libc_init_array+0x1e>
 80115a8:	080116d8 	.word	0x080116d8
 80115ac:	080116d8 	.word	0x080116d8
 80115b0:	080116d8 	.word	0x080116d8
 80115b4:	080116dc 	.word	0x080116dc

080115b8 <_init>:
 80115b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ba:	bf00      	nop
 80115bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115be:	bc08      	pop	{r3}
 80115c0:	469e      	mov	lr, r3
 80115c2:	4770      	bx	lr

080115c4 <_fini>:
 80115c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115c6:	bf00      	nop
 80115c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ca:	bc08      	pop	{r3}
 80115cc:	469e      	mov	lr, r3
 80115ce:	4770      	bx	lr
