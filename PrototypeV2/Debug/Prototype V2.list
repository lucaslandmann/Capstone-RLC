
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012530  08000278  08000278  00001278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080127a8  080127a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128a8  080128a8  00014028  2**0
                  CONTENTS
  4 .ARM          00000008  080128a8  080128a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128b0  080128b0  00014028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128b0  080128b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080128b4  080128b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080128b8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001684  20000028  080128e0  00014028  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200016ac  080128e0  000146ac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031be7  00000000  00000000  0001405e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ceb  00000000  00000000  00045c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a98  00000000  00000000  0004a930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000216b  00000000  00000000  0004d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047320  00000000  00000000  0004f533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035c68  00000000  00000000  00096853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9a4  00000000  00000000  000cc4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00288e5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf48  00000000  00000000  00288ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00294dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000278 <__do_global_dtors_aux>:
 8000278:	b510      	push	{r4, lr}
 800027a:	4c05      	ldr	r4, [pc, #20]	@ (8000290 <__do_global_dtors_aux+0x18>)
 800027c:	7823      	ldrb	r3, [r4, #0]
 800027e:	b933      	cbnz	r3, 800028e <__do_global_dtors_aux+0x16>
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x1c>)
 8000282:	b113      	cbz	r3, 800028a <__do_global_dtors_aux+0x12>
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <__do_global_dtors_aux+0x20>)
 8000286:	f3af 8000 	nop.w
 800028a:	2301      	movs	r3, #1
 800028c:	7023      	strb	r3, [r4, #0]
 800028e:	bd10      	pop	{r4, pc}
 8000290:	20000028 	.word	0x20000028
 8000294:	00000000 	.word	0x00000000
 8000298:	08012790 	.word	0x08012790

0800029c <frame_dummy>:
 800029c:	b508      	push	{r3, lr}
 800029e:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <frame_dummy+0x10>)
 80002a0:	b11b      	cbz	r3, 80002aa <frame_dummy+0xe>
 80002a2:	4903      	ldr	r1, [pc, #12]	@ (80002b0 <frame_dummy+0x14>)
 80002a4:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <frame_dummy+0x18>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	bd08      	pop	{r3, pc}
 80002ac:	00000000 	.word	0x00000000
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	08012790 	.word	0x08012790

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2f>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b6c:	bf24      	itt	cs
 8000b6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b76:	d90d      	bls.n	8000b94 <__aeabi_d2f+0x30>
 8000b78:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b84:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b8c:	bf08      	it	eq
 8000b8e:	f020 0001 	biceq.w	r0, r0, #1
 8000b92:	4770      	bx	lr
 8000b94:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b98:	d121      	bne.n	8000bde <__aeabi_d2f+0x7a>
 8000b9a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b9e:	bfbc      	itt	lt
 8000ba0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba4:	4770      	bxlt	lr
 8000ba6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000baa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bae:	f1c2 0218 	rsb	r2, r2, #24
 8000bb2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bba:	fa20 f002 	lsr.w	r0, r0, r2
 8000bbe:	bf18      	it	ne
 8000bc0:	f040 0001 	orrne.w	r0, r0, #1
 8000bc4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bcc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd0:	ea40 000c 	orr.w	r0, r0, ip
 8000bd4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bdc:	e7cc      	b.n	8000b78 <__aeabi_d2f+0x14>
 8000bde:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be2:	d107      	bne.n	8000bf4 <__aeabi_d2f+0x90>
 8000be4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be8:	bf1e      	ittt	ne
 8000bea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf2:	4770      	bxne	lr
 8000bf4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_uldivmod>:
 8000c04:	b953      	cbnz	r3, 8000c1c <__aeabi_uldivmod+0x18>
 8000c06:	b94a      	cbnz	r2, 8000c1c <__aeabi_uldivmod+0x18>
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	bf08      	it	eq
 8000c0c:	2800      	cmpeq	r0, #0
 8000c0e:	bf1c      	itt	ne
 8000c10:	f04f 31ff 	movne.w	r1, #4294967295
 8000c14:	f04f 30ff 	movne.w	r0, #4294967295
 8000c18:	f000 b97e 	b.w	8000f18 <__aeabi_idiv0>
 8000c1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c24:	f000 f806 	bl	8000c34 <__udivmoddi4>
 8000c28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c30:	b004      	add	sp, #16
 8000c32:	4770      	bx	lr

08000c34 <__udivmoddi4>:
 8000c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c38:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c3a:	460c      	mov	r4, r1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d14d      	bne.n	8000cdc <__udivmoddi4+0xa8>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	460f      	mov	r7, r1
 8000c44:	4684      	mov	ip, r0
 8000c46:	4696      	mov	lr, r2
 8000c48:	fab2 f382 	clz	r3, r2
 8000c4c:	d960      	bls.n	8000d10 <__udivmoddi4+0xdc>
 8000c4e:	b14b      	cbz	r3, 8000c64 <__udivmoddi4+0x30>
 8000c50:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c54:	f1c3 0220 	rsb	r2, r3, #32
 8000c58:	409f      	lsls	r7, r3
 8000c5a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c68:	fa1f f48e 	uxth.w	r4, lr
 8000c6c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c70:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c74:	fb06 7711 	mls	r7, r6, r1, r7
 8000c78:	fb01 f004 	mul.w	r0, r1, r4
 8000c7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x62>
 8000c84:	eb1e 0202 	adds.w	r2, lr, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x60>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 812d 	bhi.w	8000eee <__udivmoddi4+0x2ba>
 8000c94:	4639      	mov	r1, r7
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fa1f fc8c 	uxth.w	ip, ip
 8000c9c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000ca0:	fb06 2210 	mls	r2, r6, r0, r2
 8000ca4:	fb00 f404 	mul.w	r4, r0, r4
 8000ca8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000cac:	4564      	cmp	r4, ip
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x8e>
 8000cb0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	d202      	bcs.n	8000cc0 <__udivmoddi4+0x8c>
 8000cba:	4564      	cmp	r4, ip
 8000cbc:	f200 811a 	bhi.w	8000ef4 <__udivmoddi4+0x2c0>
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc6:	ebac 0c04 	sub.w	ip, ip, r4
 8000cca:	2100      	movs	r1, #0
 8000ccc:	b125      	cbz	r5, 8000cd8 <__udivmoddi4+0xa4>
 8000cce:	fa2c f303 	lsr.w	r3, ip, r3
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d905      	bls.n	8000cec <__udivmoddi4+0xb8>
 8000ce0:	b10d      	cbz	r5, 8000ce6 <__udivmoddi4+0xb2>
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4608      	mov	r0, r1
 8000cea:	e7f5      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000cec:	fab3 f183 	clz	r1, r3
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d14d      	bne.n	8000d90 <__udivmoddi4+0x15c>
 8000cf4:	42a3      	cmp	r3, r4
 8000cf6:	f0c0 80f2 	bcc.w	8000ede <__udivmoddi4+0x2aa>
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	f080 80ef 	bcs.w	8000ede <__udivmoddi4+0x2aa>
 8000d00:	4606      	mov	r6, r0
 8000d02:	4623      	mov	r3, r4
 8000d04:	4608      	mov	r0, r1
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e6      	beq.n	8000cd8 <__udivmoddi4+0xa4>
 8000d0a:	e9c5 6300 	strd	r6, r3, [r5]
 8000d0e:	e7e3      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 80a2 	bne.w	8000e5a <__udivmoddi4+0x226>
 8000d16:	1a8a      	subs	r2, r1, r2
 8000d18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000d1c:	fa1f f68e 	uxth.w	r6, lr
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 f4f7 	udiv	r4, r2, r7
 8000d26:	fb07 2014 	mls	r0, r7, r4, r2
 8000d2a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb06 f004 	mul.w	r0, r6, r4
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d90f      	bls.n	8000d5a <__udivmoddi4+0x126>
 8000d3a:	eb1e 0202 	adds.w	r2, lr, r2
 8000d3e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000d42:	bf2c      	ite	cs
 8000d44:	f04f 0901 	movcs.w	r9, #1
 8000d48:	f04f 0900 	movcc.w	r9, #0
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	d903      	bls.n	8000d58 <__udivmoddi4+0x124>
 8000d50:	f1b9 0f00 	cmp.w	r9, #0
 8000d54:	f000 80c8 	beq.w	8000ee8 <__udivmoddi4+0x2b4>
 8000d58:	4644      	mov	r4, r8
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	fa1f fc8c 	uxth.w	ip, ip
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	fb00 f606 	mul.w	r6, r0, r6
 8000d6c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d70:	4566      	cmp	r6, ip
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x152>
 8000d74:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x150>
 8000d7e:	4566      	cmp	r6, ip
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c6>
 8000d84:	4610      	mov	r0, r2
 8000d86:	ebac 0c06 	sub.w	ip, ip, r6
 8000d8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d8e:	e79d      	b.n	8000ccc <__udivmoddi4+0x98>
 8000d90:	f1c1 0620 	rsb	r6, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da2:	40f4      	lsrs	r4, r6
 8000da4:	408a      	lsls	r2, r1
 8000da6:	431f      	orrs	r7, r3
 8000da8:	ea4e 030c 	orr.w	r3, lr, ip
 8000dac:	fa00 fe01 	lsl.w	lr, r0, r1
 8000db0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dc0:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc8:	fb00 f90c 	mul.w	r9, r0, ip
 8000dcc:	45a1      	cmp	r9, r4
 8000dce:	d90e      	bls.n	8000dee <__udivmoddi4+0x1ba>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dd6:	bf2c      	ite	cs
 8000dd8:	f04f 0b01 	movcs.w	fp, #1
 8000ddc:	f04f 0b00 	movcc.w	fp, #0
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	d903      	bls.n	8000dec <__udivmoddi4+0x1b8>
 8000de4:	f1bb 0f00 	cmp.w	fp, #0
 8000de8:	f000 8093 	beq.w	8000f12 <__udivmoddi4+0x2de>
 8000dec:	4650      	mov	r0, sl
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f8 	udiv	r3, r4, r8
 8000dfa:	fb08 4413 	mls	r4, r8, r3, r4
 8000dfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d906      	bls.n	8000e18 <__udivmoddi4+0x1e4>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e10:	d201      	bcs.n	8000e16 <__udivmoddi4+0x1e2>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d87a      	bhi.n	8000f0c <__udivmoddi4+0x2d8>
 8000e16:	4643      	mov	r3, r8
 8000e18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	fba0 9802 	umull	r9, r8, r0, r2
 8000e24:	4544      	cmp	r4, r8
 8000e26:	46cc      	mov	ip, r9
 8000e28:	4643      	mov	r3, r8
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0x1fe>
 8000e2c:	d106      	bne.n	8000e3c <__udivmoddi4+0x208>
 8000e2e:	45ce      	cmp	lr, r9
 8000e30:	d204      	bcs.n	8000e3c <__udivmoddi4+0x208>
 8000e32:	3801      	subs	r0, #1
 8000e34:	ebb9 0c02 	subs.w	ip, r9, r2
 8000e38:	eb68 0307 	sbc.w	r3, r8, r7
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x222>
 8000e3e:	ebbe 020c 	subs.w	r2, lr, ip
 8000e42:	eb64 0403 	sbc.w	r4, r4, r3
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4e:	40cc      	lsrs	r4, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	e9c5 6400 	strd	r6, r4, [r5]
 8000e56:	2100      	movs	r1, #0
 8000e58:	e73e      	b.n	8000cd8 <__udivmoddi4+0xa4>
 8000e5a:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e5e:	f1c3 0120 	rsb	r1, r3, #32
 8000e62:	fa04 f203 	lsl.w	r2, r4, r3
 8000e66:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e6a:	40cc      	lsrs	r4, r1
 8000e6c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e70:	fa20 f101 	lsr.w	r1, r0, r1
 8000e74:	fa1f f68e 	uxth.w	r6, lr
 8000e78:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	fb07 4410 	mls	r4, r7, r0, r4
 8000e82:	0c11      	lsrs	r1, r2, #16
 8000e84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e88:	fb00 f406 	mul.w	r4, r0, r6
 8000e8c:	428c      	cmp	r4, r1
 8000e8e:	d90e      	bls.n	8000eae <__udivmoddi4+0x27a>
 8000e90:	eb1e 0101 	adds.w	r1, lr, r1
 8000e94:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e98:	bf2c      	ite	cs
 8000e9a:	f04f 0901 	movcs.w	r9, #1
 8000e9e:	f04f 0900 	movcc.w	r9, #0
 8000ea2:	428c      	cmp	r4, r1
 8000ea4:	d902      	bls.n	8000eac <__udivmoddi4+0x278>
 8000ea6:	f1b9 0f00 	cmp.w	r9, #0
 8000eaa:	d02c      	beq.n	8000f06 <__udivmoddi4+0x2d2>
 8000eac:	4640      	mov	r0, r8
 8000eae:	1b09      	subs	r1, r1, r4
 8000eb0:	b292      	uxth	r2, r2
 8000eb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000eb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000eba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ebe:	fb04 f106 	mul.w	r1, r4, r6
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x2a2>
 8000ec6:	eb1e 0202 	adds.w	r2, lr, r2
 8000eca:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ece:	d201      	bcs.n	8000ed4 <__udivmoddi4+0x2a0>
 8000ed0:	4291      	cmp	r1, r2
 8000ed2:	d815      	bhi.n	8000f00 <__udivmoddi4+0x2cc>
 8000ed4:	4644      	mov	r4, r8
 8000ed6:	1a52      	subs	r2, r2, r1
 8000ed8:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000edc:	e721      	b.n	8000d22 <__udivmoddi4+0xee>
 8000ede:	1a86      	subs	r6, r0, r2
 8000ee0:	eb64 0303 	sbc.w	r3, r4, r3
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	e70e      	b.n	8000d06 <__udivmoddi4+0xd2>
 8000ee8:	3c02      	subs	r4, #2
 8000eea:	4472      	add	r2, lr
 8000eec:	e735      	b.n	8000d5a <__udivmoddi4+0x126>
 8000eee:	3902      	subs	r1, #2
 8000ef0:	4472      	add	r2, lr
 8000ef2:	e6d0      	b.n	8000c96 <__udivmoddi4+0x62>
 8000ef4:	44f4      	add	ip, lr
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	e6e3      	b.n	8000cc2 <__udivmoddi4+0x8e>
 8000efa:	44f4      	add	ip, lr
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x152>
 8000f00:	3c02      	subs	r4, #2
 8000f02:	4472      	add	r2, lr
 8000f04:	e7e7      	b.n	8000ed6 <__udivmoddi4+0x2a2>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4471      	add	r1, lr
 8000f0a:	e7d0      	b.n	8000eae <__udivmoddi4+0x27a>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	443c      	add	r4, r7
 8000f10:	e782      	b.n	8000e18 <__udivmoddi4+0x1e4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	e76a      	b.n	8000dee <__udivmoddi4+0x1ba>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f22:	f002 fb73 	bl	800360c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f26:	f000 f96d 	bl	8001204 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f2a:	f000 f9d7 	bl	80012dc <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000f2e:	f000 fa0c 	bl	800134a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f32:	f000 ff7b 	bl	8001e2c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000f36:	f000 fc09 	bl	800174c <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 8000f3a:	f000 fbc9 	bl	80016d0 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 8000f3e:	f000 fc3d 	bl	80017bc <MX_HSPI1_Init>
  MX_I2C2_Init();
 8000f42:	f000 fcb9 	bl	80018b8 <MX_I2C2_Init>
  MX_ICACHE_Init();
 8000f46:	f000 fcf7 	bl	8001938 <MX_ICACHE_Init>
  MX_LTDC_Init();
 8000f4a:	f000 fd09 	bl	8001960 <MX_LTDC_Init>
  MX_RTC_Init();
 8000f4e:	f000 fd87 	bl	8001a60 <MX_RTC_Init>
  MX_TIM3_Init();
 8000f52:	f000 fe3f 	bl	8001bd4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000f56:	f000 fa07 	bl	8001368 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f5a:	f000 feed 	bl	8001d38 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 8000f5e:	f000 fdcd 	bl	8001afc <MX_SAI2_Init>
  MX_ADC4_Init();
 8000f62:	f000 fb3b 	bl	80015dc <MX_ADC4_Init>
  MX_I2C1_Init();
 8000f66:	f000 fc67 	bl	8001838 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000f6a:	f000 ff31 	bl	8001dd0 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 8000f6e:	f000 fe93 	bl	8001c98 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 8000f72:	220d      	movs	r2, #13
 8000f74:	4996      	ldr	r1, [pc, #600]	@ (80011d0 <main+0x2b4>)
 8000f76:	4897      	ldr	r0, [pc, #604]	@ (80011d4 <main+0x2b8>)
 8000f78:	f003 fa94 	bl	80044a4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4996      	ldr	r1, [pc, #600]	@ (80011d8 <main+0x2bc>)
 8000f80:	4896      	ldr	r0, [pc, #600]	@ (80011dc <main+0x2c0>)
 8000f82:	f003 fa8f 	bl	80044a4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000f86:	4896      	ldr	r0, [pc, #600]	@ (80011e0 <main+0x2c4>)
 8000f88:	f00e fd0c 	bl	800f9a4 <HAL_TIM_Base_Start>

  HAL_Delay(2000);
 8000f8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f90:	f002 fc02 	bl	8003798 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000f94:	2201      	movs	r2, #1
 8000f96:	2104      	movs	r1, #4
 8000f98:	4892      	ldr	r0, [pc, #584]	@ (80011e4 <main+0x2c8>)
 8000f9a:	f007 f9eb 	bl	8008374 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000f9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fa2:	f002 fbf9 	bl	8003798 <HAL_Delay>

  //Transmits each instruction sequentially from pcm6260Config array
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	e010      	b.n	8000fce <main+0xb2>
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4a8d      	ldr	r2, [pc, #564]	@ (80011e8 <main+0x2cc>)
 8000fb2:	441a      	add	r2, r3
 8000fb4:	2364      	movs	r3, #100	@ 0x64
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2302      	movs	r3, #2
 8000fba:	2190      	movs	r1, #144	@ 0x90
 8000fbc:	488b      	ldr	r0, [pc, #556]	@ (80011ec <main+0x2d0>)
 8000fbe:	f007 fac9 	bl	8008554 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	@ 0x64
 8000fc4:	f002 fbe8 	bl	8003798 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b19      	cmp	r3, #25
 8000fd2:	d9eb      	bls.n	8000fac <main+0x90>
  }

  HAL_Delay(100);
 8000fd4:	2064      	movs	r0, #100	@ 0x64
 8000fd6:	f002 fbdf 	bl	8003798 <HAL_Delay>
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
 8000fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fde:	4984      	ldr	r1, [pc, #528]	@ (80011f0 <main+0x2d4>)
 8000fe0:	4884      	ldr	r0, [pc, #528]	@ (80011f4 <main+0x2d8>)
 8000fe2:	f00e f941 	bl	800f268 <HAL_SAI_Receive_DMA>
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacData, DIM(dacData));
 8000fe6:	2240      	movs	r2, #64	@ 0x40
 8000fe8:	4983      	ldr	r1, [pc, #524]	@ (80011f8 <main+0x2dc>)
 8000fea:	4884      	ldr	r0, [pc, #528]	@ (80011fc <main+0x2e0>)
 8000fec:	f00e f83a 	bl	800f064 <HAL_SAI_Transmit_DMA>

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	e07a      	b.n	80010ec <main+0x1d0>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	e00c      	b.n	8001016 <main+0xfa>
	  {
		  channels[i].channelData[s] = 0;
 8000ffc:	4980      	ldr	r1, [pc, #512]	@ (8001200 <main+0x2e4>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	222b      	movs	r2, #43	@ 0x2b
 8001002:	fb03 f202 	mul.w	r2, r3, r2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	2200      	movs	r2, #0
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3301      	adds	r3, #1
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b7f      	cmp	r3, #127	@ 0x7f
 800101a:	d9ef      	bls.n	8000ffc <main+0xe0>
	  }
	  channels[i].channelNum = i;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	b2d8      	uxtb	r0, r3
 8001020:	4a77      	ldr	r2, [pc, #476]	@ (8001200 <main+0x2e4>)
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	21ac      	movs	r1, #172	@ 0xac
 8001026:	fb01 f303 	mul.w	r3, r1, r3
 800102a:	4413      	add	r3, r2
 800102c:	3380      	adds	r3, #128	@ 0x80
 800102e:	4602      	mov	r2, r0
 8001030:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 8001032:	4a73      	ldr	r2, [pc, #460]	@ (8001200 <main+0x2e4>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	21ac      	movs	r1, #172	@ 0xac
 8001038:	fb01 f303 	mul.w	r3, r1, r3
 800103c:	4413      	add	r3, r2
 800103e:	3384      	adds	r3, #132	@ 0x84
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 8001046:	4a6e      	ldr	r2, [pc, #440]	@ (8001200 <main+0x2e4>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	21ac      	movs	r1, #172	@ 0xac
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	4413      	add	r3, r2
 8001052:	3388      	adds	r3, #136	@ 0x88
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 800105a:	4a69      	ldr	r2, [pc, #420]	@ (8001200 <main+0x2e4>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	21ac      	movs	r1, #172	@ 0xac
 8001060:	fb01 f303 	mul.w	r3, r1, r3
 8001064:	4413      	add	r3, r2
 8001066:	338c      	adds	r3, #140	@ 0x8c
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 800106c:	4a64      	ldr	r2, [pc, #400]	@ (8001200 <main+0x2e4>)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	21ac      	movs	r1, #172	@ 0xac
 8001072:	fb01 f303 	mul.w	r3, r1, r3
 8001076:	4413      	add	r3, r2
 8001078:	338d      	adds	r3, #141	@ 0x8d
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 800107e:	4a60      	ldr	r2, [pc, #384]	@ (8001200 <main+0x2e4>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	21ac      	movs	r1, #172	@ 0xac
 8001084:	fb01 f303 	mul.w	r3, r1, r3
 8001088:	4413      	add	r3, r2
 800108a:	338e      	adds	r3, #142	@ 0x8e
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 8001090:	4a5b      	ldr	r2, [pc, #364]	@ (8001200 <main+0x2e4>)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	21ac      	movs	r1, #172	@ 0xac
 8001096:	fb01 f303 	mul.w	r3, r1, r3
 800109a:	4413      	add	r3, r2
 800109c:	3390      	adds	r3, #144	@ 0x90
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	e010      	b.n	80010cc <main+0x1b0>
	  {
		  channels[i].eqLevels[r] = 0.0;
 80010aa:	4955      	ldr	r1, [pc, #340]	@ (8001200 <main+0x2e4>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	222b      	movs	r2, #43	@ 0x2b
 80010b0:	fb03 f202 	mul.w	r2, r3, r2
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	3324      	adds	r3, #36	@ 0x24
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	3304      	adds	r3, #4
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b13      	cmp	r3, #19
 80010d0:	d9eb      	bls.n	80010aa <main+0x18e>
	  }
	  channels[i].distortionStrength = 0.0;
 80010d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001200 <main+0x2e4>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	21ac      	movs	r1, #172	@ 0xac
 80010d8:	fb01 f303 	mul.w	r3, r1, r3
 80010dc:	4413      	add	r3, r2
 80010de:	33a8      	adds	r3, #168	@ 0xa8
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 80010f2:	d380      	bcc.n	8000ff6 <main+0xda>
  /* USER CODE BEGIN WHILE */
while (1)
  {

	  //Reads and sets the position of each volume slider
	  channels[0].volume = (float)(adcGroup1[c1Vol]);
 80010f4:	4b36      	ldr	r3, [pc, #216]	@ (80011d0 <main+0x2b4>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001100:	4b3f      	ldr	r3, [pc, #252]	@ (8001200 <main+0x2e4>)
 8001102:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
	  channels[1].volume = (float)(adcGroup1[c2Vol]);
 8001106:	4b32      	ldr	r3, [pc, #200]	@ (80011d0 <main+0x2b4>)
 8001108:	885b      	ldrh	r3, [r3, #2]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001112:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <main+0x2e4>)
 8001114:	edc3 7a4c 	vstr	s15, [r3, #304]	@ 0x130
	  channels[2].volume = (float)(adcGroup1[c3Vol]);
 8001118:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <main+0x2b4>)
 800111a:	889b      	ldrh	r3, [r3, #4]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001124:	4b36      	ldr	r3, [pc, #216]	@ (8001200 <main+0x2e4>)
 8001126:	edc3 7a77 	vstr	s15, [r3, #476]	@ 0x1dc
	  channels[3].volume = (float)(adcGroup1[c4Vol]);
 800112a:	4b29      	ldr	r3, [pc, #164]	@ (80011d0 <main+0x2b4>)
 800112c:	88db      	ldrh	r3, [r3, #6]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001136:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <main+0x2e4>)
 8001138:	edc3 7aa2 	vstr	s15, [r3, #648]	@ 0x288
	  channels[4].volume = (float)(adcGroup1[c5Vol]);
 800113c:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <main+0x2b4>)
 800113e:	891b      	ldrh	r3, [r3, #8]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001148:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <main+0x2e4>)
 800114a:	edc3 7acd 	vstr	s15, [r3, #820]	@ 0x334
	  channels[5].volume = (float)(adcGroup1[c6Vol]);
 800114e:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <main+0x2b4>)
 8001150:	895b      	ldrh	r3, [r3, #10]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <main+0x2e4>)
 800115c:	edc3 7af8 	vstr	s15, [r3, #992]	@ 0x3e0

	  //Reads and sets the position of each LR Knob
	  channels[0].LRPan = (float)(adcGroup1[c1LR]);
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <main+0x2b4>)
 8001162:	89db      	ldrh	r3, [r3, #14]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800116c:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <main+0x2e4>)
 800116e:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	  channels[1].LRPan = (float)(adcGroup1[c2LR]);
 8001172:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <main+0x2b4>)
 8001174:	8a1b      	ldrh	r3, [r3, #16]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <main+0x2e4>)
 8001180:	edc3 7a4d 	vstr	s15, [r3, #308]	@ 0x134
	  channels[2].LRPan = (float)(adcGroup1[c3LR]);
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <main+0x2b4>)
 8001186:	8a5b      	ldrh	r3, [r3, #18]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <main+0x2e4>)
 8001192:	edc3 7a78 	vstr	s15, [r3, #480]	@ 0x1e0
	  channels[3].LRPan = (float)(adcGroup1[c4LR]);
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <main+0x2b4>)
 8001198:	8a9b      	ldrh	r3, [r3, #20]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <main+0x2e4>)
 80011a4:	edc3 7aa3 	vstr	s15, [r3, #652]	@ 0x28c
	  channels[4].LRPan = (float)(adcGroup4[c5LR]);
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <main+0x2bc>)
 80011aa:	8adb      	ldrh	r3, [r3, #22]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <main+0x2e4>)
 80011b6:	edc3 7ace 	vstr	s15, [r3, #824]	@ 0x338
	  channels[5].LRPan = (float)(adcGroup4[c6LR]);
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <main+0x2bc>)
 80011bc:	8b1b      	ldrh	r3, [r3, #24]
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <main+0x2e4>)
 80011c8:	edc3 7af9 	vstr	s15, [r3, #996]	@ 0x3e4
	  channels[0].volume = (float)(adcGroup1[c1Vol]);
 80011cc:	bf00      	nop
 80011ce:	e791      	b.n	80010f4 <main+0x1d8>
 80011d0:	20000d78 	.word	0x20000d78
 80011d4:	20000044 	.word	0x20000044
 80011d8:	20000d94 	.word	0x20000d94
 80011dc:	200000d0 	.word	0x200000d0
 80011e0:	200007b4 	.word	0x200007b4
 80011e4:	42021000 	.word	0x42021000
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000350 	.word	0x20000350
 80011f0:	20000d98 	.word	0x20000d98
 80011f4:	20000568 	.word	0x20000568
 80011f8:	20001198 	.word	0x20001198
 80011fc:	200004d0 	.word	0x200004d0
 8001200:	2000129c 	.word	0x2000129c

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b09e      	sub	sp, #120	@ 0x78
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	2260      	movs	r2, #96	@ 0x60
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f011 fa0f 	bl	8012636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001228:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800122c:	f008 ffd6 	bl	800a1dc <HAL_PWREx_ControlVoltageScaling>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001236:	f001 f82b 	bl	8002290 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800123a:	f008 ffbf 	bl	800a1bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800123e:	4b26      	ldr	r3, [pc, #152]	@ (80012d8 <SystemClock_Config+0xd4>)
 8001240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001244:	4a24      	ldr	r2, [pc, #144]	@ (80012d8 <SystemClock_Config+0xd4>)
 8001246:	f023 0318 	bic.w	r3, r3, #24
 800124a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800124e:	2307      	movs	r3, #7
 8001250:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001252:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001256:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001258:	2381      	movs	r3, #129	@ 0x81
 800125a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001262:	2310      	movs	r3, #16
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126a:	2303      	movs	r3, #3
 800126c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001276:	2308      	movs	r3, #8
 8001278:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800127a:	2308      	movs	r3, #8
 800127c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800127e:	2302      	movs	r3, #2
 8001280:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001286:	230c      	movs	r3, #12
 8001288:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	4618      	mov	r0, r3
 8001294:	f009 f8cc 	bl	800a430 <HAL_RCC_OscConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800129e:	f000 fff7 	bl	8002290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a2:	231f      	movs	r3, #31
 80012a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a6:	2303      	movs	r3, #3
 80012a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	2103      	movs	r1, #3
 80012be:	4618      	mov	r0, r3
 80012c0:	f009 ff92 	bl	800b1e8 <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012ca:	f000 ffe1 	bl	8002290 <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3778      	adds	r7, #120	@ 0x78
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	46020c00 	.word	0x46020c00

080012dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0b8      	sub	sp, #224	@ 0xe0
 80012e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e2:	463b      	mov	r3, r7
 80012e4:	22e0      	movs	r2, #224	@ 0xe0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f011 f9a4 	bl	8012636 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80012ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012f2:	f04f 0301 	mov.w	r3, #1
 80012f6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8001300:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001304:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001308:	2303      	movs	r3, #3
 800130a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8001310:	230c      	movs	r3, #12
 8001312:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8001318:	2303      	movs	r3, #3
 800131a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 800131c:	2304      	movs	r3, #4
 800131e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001320:	230c      	movs	r3, #12
 8001322:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8001324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 800132a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4618      	mov	r0, r3
 8001334:	f00a fb28 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 800133e:	f000 ffa7 	bl	8002290 <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	37e0      	adds	r7, #224	@ 0xe0
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800134e:	f009 f831 	bl	800a3b4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001352:	2002      	movs	r0, #2
 8001354:	f008 ffce 	bl	800a2f4 <HAL_PWREx_ConfigSupply>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800135e:	f000 ff97 	bl	8002290 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136e:	463b      	mov	r3, r7
 8001370:	2220      	movs	r2, #32
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f011 f95e 	bl	8012636 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800137a:	4b89      	ldr	r3, [pc, #548]	@ (80015a0 <MX_ADC1_Init+0x238>)
 800137c:	4a89      	ldr	r2, [pc, #548]	@ (80015a4 <MX_ADC1_Init+0x23c>)
 800137e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001380:	4b87      	ldr	r3, [pc, #540]	@ (80015a0 <MX_ADC1_Init+0x238>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001386:	4b86      	ldr	r3, [pc, #536]	@ (80015a0 <MX_ADC1_Init+0x238>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800138c:	4b84      	ldr	r3, [pc, #528]	@ (80015a0 <MX_ADC1_Init+0x238>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	4b83      	ldr	r3, [pc, #524]	@ (80015a0 <MX_ADC1_Init+0x238>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001398:	4b81      	ldr	r3, [pc, #516]	@ (80015a0 <MX_ADC1_Init+0x238>)
 800139a:	2201      	movs	r2, #1
 800139c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800139e:	4b80      	ldr	r3, [pc, #512]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013a0:	2204      	movs	r2, #4
 80013a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80013a4:	4b7e      	ldr	r3, [pc, #504]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013aa:	4b7d      	ldr	r3, [pc, #500]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 80013b2:	4b7b      	ldr	r3, [pc, #492]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013b4:	220d      	movs	r2, #13
 80013b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b8:	4b79      	ldr	r3, [pc, #484]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80013c0:	4b77      	ldr	r3, [pc, #476]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013c2:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80013c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013c8:	4b75      	ldr	r3, [pc, #468]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013d0:	4b73      	ldr	r3, [pc, #460]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80013d8:	4b71      	ldr	r3, [pc, #452]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013da:	2200      	movs	r2, #0
 80013dc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013de:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013e4:	4b6e      	ldr	r3, [pc, #440]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013ea:	4b6d      	ldr	r3, [pc, #436]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013ec:	2203      	movs	r2, #3
 80013ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f8:	4869      	ldr	r0, [pc, #420]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80013fa:	f002 fd6b 	bl	8003ed4 <HAL_ADC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001404:	f000 ff44 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001408:	4b67      	ldr	r3, [pc, #412]	@ (80015a8 <MX_ADC1_Init+0x240>)
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800140c:	2306      	movs	r3, #6
 800140e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001414:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001418:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800141a:	2304      	movs	r3, #4
 800141c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	485e      	ldr	r0, [pc, #376]	@ (80015a0 <MX_ADC1_Init+0x238>)
 8001428:	f003 fc82 	bl	8004d30 <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001432:	f000 ff2d 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001436:	4b5d      	ldr	r3, [pc, #372]	@ (80015ac <MX_ADC1_Init+0x244>)
 8001438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800143a:	230c      	movs	r3, #12
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4857      	ldr	r0, [pc, #348]	@ (80015a0 <MX_ADC1_Init+0x238>)
 8001444:	f003 fc74 	bl	8004d30 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800144e:	f000 ff1f 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001452:	4b57      	ldr	r3, [pc, #348]	@ (80015b0 <MX_ADC1_Init+0x248>)
 8001454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001456:	2312      	movs	r3, #18
 8001458:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4850      	ldr	r0, [pc, #320]	@ (80015a0 <MX_ADC1_Init+0x238>)
 8001460:	f003 fc66 	bl	8004d30 <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800146a:	f000 ff11 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800146e:	4b51      	ldr	r3, [pc, #324]	@ (80015b4 <MX_ADC1_Init+0x24c>)
 8001470:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001472:	2318      	movs	r3, #24
 8001474:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	4619      	mov	r1, r3
 800147a:	4849      	ldr	r0, [pc, #292]	@ (80015a0 <MX_ADC1_Init+0x238>)
 800147c:	f003 fc58 	bl	8004d30 <HAL_ADC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8001486:	f000 ff03 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800148a:	4b4b      	ldr	r3, [pc, #300]	@ (80015b8 <MX_ADC1_Init+0x250>)
 800148c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800148e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4841      	ldr	r0, [pc, #260]	@ (80015a0 <MX_ADC1_Init+0x238>)
 800149a:	f003 fc49 	bl	8004d30 <HAL_ADC_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 80014a4:	f000 fef4 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014a8:	4b44      	ldr	r3, [pc, #272]	@ (80015bc <MX_ADC1_Init+0x254>)
 80014aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80014ac:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80014b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	483a      	ldr	r0, [pc, #232]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80014b8:	f003 fc3a 	bl	8004d30 <HAL_ADC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80014c2:	f000 fee5 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014c6:	4b3e      	ldr	r3, [pc, #248]	@ (80015c0 <MX_ADC1_Init+0x258>)
 80014c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80014ca:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80014ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4832      	ldr	r0, [pc, #200]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80014d6:	f003 fc2b 	bl	8004d30 <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 80014e0:	f000 fed6 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014e4:	4b37      	ldr	r3, [pc, #220]	@ (80015c4 <MX_ADC1_Init+0x25c>)
 80014e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80014e8:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80014ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	4619      	mov	r1, r3
 80014f2:	482b      	ldr	r0, [pc, #172]	@ (80015a0 <MX_ADC1_Init+0x238>)
 80014f4:	f003 fc1c 	bl	8004d30 <HAL_ADC_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 80014fe:	f000 fec7 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001502:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <MX_ADC1_Init+0x260>)
 8001504:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001506:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800150a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150c:	463b      	mov	r3, r7
 800150e:	4619      	mov	r1, r3
 8001510:	4823      	ldr	r0, [pc, #140]	@ (80015a0 <MX_ADC1_Init+0x238>)
 8001512:	f003 fc0d 	bl	8004d30 <HAL_ADC_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 800151c:	f000 feb8 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001520:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <MX_ADC1_Init+0x264>)
 8001522:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001528:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	4619      	mov	r1, r3
 800152e:	481c      	ldr	r0, [pc, #112]	@ (80015a0 <MX_ADC1_Init+0x238>)
 8001530:	f003 fbfe 	bl	8004d30 <HAL_ADC_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 800153a:	f000 fea9 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800153e:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <MX_ADC1_Init+0x268>)
 8001540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001542:	f240 2306 	movw	r3, #518	@ 0x206
 8001546:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4814      	ldr	r0, [pc, #80]	@ (80015a0 <MX_ADC1_Init+0x238>)
 800154e:	f003 fbef 	bl	8004d30 <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8001558:	f000 fe9a 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <MX_ADC1_Init+0x26c>)
 800155e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001560:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8001564:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <MX_ADC1_Init+0x238>)
 800156c:	f003 fbe0 	bl	8004d30 <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8001576:	f000 fe8b 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800157a:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <MX_ADC1_Init+0x270>)
 800157c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800157e:	f240 2312 	movw	r3, #530	@ 0x212
 8001582:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001584:	463b      	mov	r3, r7
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <MX_ADC1_Init+0x238>)
 800158a:	f003 fbd1 	bl	8004d30 <HAL_ADC_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8001594:	f000 fe7c 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000044 	.word	0x20000044
 80015a4:	42028000 	.word	0x42028000
 80015a8:	04000002 	.word	0x04000002
 80015ac:	08000004 	.word	0x08000004
 80015b0:	0c000008 	.word	0x0c000008
 80015b4:	10000010 	.word	0x10000010
 80015b8:	14000020 	.word	0x14000020
 80015bc:	1c000080 	.word	0x1c000080
 80015c0:	20000100 	.word	0x20000100
 80015c4:	2a000400 	.word	0x2a000400
 80015c8:	2e000800 	.word	0x2e000800
 80015cc:	32001000 	.word	0x32001000
 80015d0:	3e008000 	.word	0x3e008000
 80015d4:	42010000 	.word	0x42010000
 80015d8:	ce080000 	.word	0xce080000

080015dc <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2220      	movs	r2, #32
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f011 f824 	bl	8012636 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80015ee:	4b34      	ldr	r3, [pc, #208]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 80015f0:	4a34      	ldr	r2, [pc, #208]	@ (80016c4 <MX_ADC4_Init+0xe8>)
 80015f2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015f4:	4b32      	ldr	r3, [pc, #200]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80015fa:	4b31      	ldr	r3, [pc, #196]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 80015fc:	2204      	movs	r2, #4
 80015fe:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001600:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8001606:	4b2e      	ldr	r3, [pc, #184]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001608:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800160c:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800160e:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001610:	2204      	movs	r2, #4
 8001612:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8001614:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800161a:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001620:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8001628:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 800162a:	2202      	movs	r2, #2
 800162c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800162e:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001630:	2200      	movs	r2, #0
 8001632:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001634:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001636:	2200      	movs	r2, #0
 8001638:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001644:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001648:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164a:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 800164c:	2200      	movs	r2, #0
 800164e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001652:	2200      	movs	r2, #0
 8001654:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001658:	2200      	movs	r2, #0
 800165a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001664:	4816      	ldr	r0, [pc, #88]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 8001666:	f002 fc35 	bl	8003ed4 <HAL_ADC_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8001670:	f000 fe0e 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_ADC4_Init+0xec>)
 8001676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001680:	2304      	movs	r3, #4
 8001682:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 800168e:	f003 fb4f 	bl	8004d30 <HAL_ADC_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8001698:	f000 fdfa 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800169c:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_ADC4_Init+0xf0>)
 800169e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 80016a0:	2304      	movs	r3, #4
 80016a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_ADC4_Init+0xe4>)
 80016aa:	f003 fb41 	bl	8004d30 <HAL_ADC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 80016b4:	f000 fdec 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200000d0 	.word	0x200000d0
 80016c4:	46021000 	.word	0x46021000
 80016c8:	1c000080 	.word	0x1c000080
 80016cc:	20000100 	.word	0x20000100

080016d0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <MX_DMA2D_Init+0x74>)
 80016d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <MX_DMA2D_Init+0x78>)
 80016d8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_DMA2D_Init+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_DMA2D_Init+0x74>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_DMA2D_Init+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <MX_DMA2D_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_DMA2D_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_DMA2D_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_DMA2D_Init+0x74>)
 8001700:	2201      	movs	r2, #1
 8001702:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_DMA2D_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_DMA2D_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_DMA2D_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001716:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <MX_DMA2D_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800171c:	4809      	ldr	r0, [pc, #36]	@ (8001744 <MX_DMA2D_Init+0x74>)
 800171e:	f005 fa95 	bl	8006c4c <HAL_DMA2D_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001728:	f000 fdb2 	bl	8002290 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800172c:	2101      	movs	r1, #1
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <MX_DMA2D_Init+0x74>)
 8001730:	f005 faee 	bl	8006d10 <HAL_DMA2D_ConfigLayer>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 800173a:	f000 fda9 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000288 	.word	0x20000288
 8001748:	4002b000 	.word	0x4002b000

0800174c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001752:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <MX_GPDMA1_Init+0x6c>)
 8001754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001758:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <MX_GPDMA1_Init+0x6c>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <MX_GPDMA1_Init+0x6c>)
 8001764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	201d      	movs	r0, #29
 8001776:	f004 fb0b 	bl	8005d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800177a:	201d      	movs	r0, #29
 800177c:	f004 fb22 	bl	8005dc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	201e      	movs	r0, #30
 8001786:	f004 fb03 	bl	8005d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800178a:	201e      	movs	r0, #30
 800178c:	f004 fb1a 	bl	8005dc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	201f      	movs	r0, #31
 8001796:	f004 fafb 	bl	8005d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 800179a:	201f      	movs	r0, #31
 800179c:	f004 fb12 	bl	8005dc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2020      	movs	r0, #32
 80017a6:	f004 faf3 	bl	8005d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 80017aa:	2020      	movs	r0, #32
 80017ac:	f004 fb0a 	bl	8005dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	46020c00 	.word	0x46020c00

080017bc <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <MX_HSPI1_Init+0x78>)
 80017c4:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017c8:	2204      	movs	r2, #4
 80017ca:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 80017d2:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017d8:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017dc:	221a      	movs	r2, #26
 80017de:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 80017ec:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <MX_HSPI1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_HSPI1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_HSPI1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_HSPI1_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MX_HSPI1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_HSPI1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_HSPI1_Init+0x74>)
 800181e:	f010 faa3 	bl	8011d68 <HAL_XSPI_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8001828:	f000 fd32 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200002f0 	.word	0x200002f0
 8001834:	420d3400 	.word	0x420d3400

08001838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <MX_I2C1_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <MX_I2C1_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001844:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <MX_I2C1_Init+0x7c>)
 8001846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <MX_I2C1_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001850:	2201      	movs	r2, #1
 8001852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_I2C1_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_I2C1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001872:	480e      	ldr	r0, [pc, #56]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001874:	f006 fdd2 	bl	800841c <HAL_I2C_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800187e:	f000 fd07 	bl	8002290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4809      	ldr	r0, [pc, #36]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001886:	f007 ff5d 	bl	8009744 <HAL_I2CEx_ConfigAnalogFilter>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001890:	f000 fcfe 	bl	8002290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001898:	f007 ff9f 	bl	80097da <HAL_I2CEx_ConfigDigitalFilter>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 fcf5 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000350 	.word	0x20000350
 80018b0:	40005400 	.word	0x40005400
 80018b4:	20a0c4df 	.word	0x20a0c4df

080018b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <MX_I2C2_Init+0x74>)
 80018be:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <MX_I2C2_Init+0x78>)
 80018c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <MX_I2C2_Init+0x74>)
 80018c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <MX_I2C2_Init+0x7c>)
 80018c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <MX_I2C2_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ce:	4b17      	ldr	r3, [pc, #92]	@ (800192c <MX_I2C2_Init+0x74>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <MX_I2C2_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018da:	4b14      	ldr	r3, [pc, #80]	@ (800192c <MX_I2C2_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <MX_I2C2_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <MX_I2C2_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <MX_I2C2_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018f2:	480e      	ldr	r0, [pc, #56]	@ (800192c <MX_I2C2_Init+0x74>)
 80018f4:	f006 fd92 	bl	800841c <HAL_I2C_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018fe:	f000 fcc7 	bl	8002290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001902:	2100      	movs	r1, #0
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <MX_I2C2_Init+0x74>)
 8001906:	f007 ff1d 	bl	8009744 <HAL_I2CEx_ConfigAnalogFilter>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001910:	f000 fcbe 	bl	8002290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001914:	2100      	movs	r1, #0
 8001916:	4805      	ldr	r0, [pc, #20]	@ (800192c <MX_I2C2_Init+0x74>)
 8001918:	f007 ff5f 	bl	80097da <HAL_I2CEx_ConfigDigitalFilter>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001922:	f000 fcb5 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200003a4 	.word	0x200003a4
 8001930:	40005800 	.word	0x40005800
 8001934:	20a0c4df 	.word	0x20a0c4df

08001938 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800193c:	2000      	movs	r0, #0
 800193e:	f007 ff99 	bl	8009874 <HAL_ICACHE_ConfigAssociativityMode>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001948:	f000 fca2 	bl	8002290 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800194c:	f007 ffb2 	bl	80098b4 <HAL_ICACHE_Enable>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001956:	f000 fc9b 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2234      	movs	r2, #52	@ 0x34
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f010 fe62 	bl	8012636 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001972:	4b39      	ldr	r3, [pc, #228]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 8001974:	4a39      	ldr	r2, [pc, #228]	@ (8001a5c <MX_LTDC_Init+0xfc>)
 8001976:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001978:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800197e:	4b36      	ldr	r3, [pc, #216]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001984:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800198a:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 8001992:	2203      	movs	r2, #3
 8001994:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001996:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 8001998:	2203      	movs	r2, #3
 800199a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 800199c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 800199e:	220b      	movs	r2, #11
 80019a0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80019a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 80019a4:	220b      	movs	r2, #11
 80019a6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 80019aa:	f240 322b 	movw	r2, #811	@ 0x32b
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 80019b0:	4b29      	ldr	r3, [pc, #164]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 80019b2:	f240 12eb 	movw	r2, #491	@ 0x1eb
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 80019b8:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 80019ba:	f240 3233 	movw	r2, #819	@ 0x333
 80019be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 80019c2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80019c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80019c8:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80019d0:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80019e0:	481d      	ldr	r0, [pc, #116]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 80019e2:	f007 ff77 	bl	80098d4 <HAL_LTDC_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80019ec:	f000 fc50 	bl	8002290 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80019f4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80019f8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80019fe:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001a02:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001a04:	2301      	movs	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001a08:	23ff      	movs	r3, #255	@ 0xff
 8001a0a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001a10:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a14:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001a16:	2307      	movs	r3, #7
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <MX_LTDC_Init+0xf8>)
 8001a40:	f008 f8da 	bl	8009bf8 <HAL_LTDC_ConfigLayer>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001a4a:	f000 fc21 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3738      	adds	r7, #56	@ 0x38
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200003f8 	.word	0x200003f8
 8001a5c:	40016800 	.word	0x40016800

08001a60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	615a      	str	r2, [r3, #20]
 8001a76:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001af8 <MX_RTC_Init+0x98>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001a86:	227f      	movs	r2, #127	@ 0x7f
 8001a88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001a8c:	22ff      	movs	r2, #255	@ 0xff
 8001a8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a96:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aa2:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001aa4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aa8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ab6:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001ab8:	f00c ff62 	bl	800e980 <HAL_RTC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001ac2:	f000 fbe5 	bl	8002290 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	@ (8001af4 <MX_RTC_Init+0x94>)
 8001adc:	f00d f87e 	bl	800ebdc <HAL_RTCEx_PrivilegeModeSet>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001ae6:	f000 fbd3 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200004a0 	.word	0x200004a0
 8001af8:	46007800 	.word	0x46007800

08001afc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b00:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b02:	4a30      	ldr	r2, [pc, #192]	@ (8001bc4 <MX_SAI2_Init+0xc8>)
 8001b04:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b06:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b12:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b18:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b26:	4a28      	ldr	r2, [pc, #160]	@ (8001bc8 <MX_SAI2_Init+0xcc>)
 8001b28:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b2a:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001b30:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b36:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b38:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 8001b44:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b46:	2210      	movs	r2, #16
 8001b48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	2101      	movs	r1, #1
 8001b50:	481b      	ldr	r0, [pc, #108]	@ (8001bc0 <MX_SAI2_Init+0xc4>)
 8001b52:	f00d f871 	bl	800ec38 <HAL_SAI_InitProtocol>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001b5c:	f000 fb98 	bl	8002290 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b62:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd0 <MX_SAI2_Init+0xd4>)
 8001b64:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b72:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b78:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001b7e:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b80:	2202      	movs	r2, #2
 8001b82:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b86:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <MX_SAI2_Init+0xcc>)
 8001b88:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b96:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4808      	ldr	r0, [pc, #32]	@ (8001bcc <MX_SAI2_Init+0xd0>)
 8001bac:	f00d f844 	bl	800ec38 <HAL_SAI_InitProtocol>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 8001bb6:	f000 fb6b 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200004d0 	.word	0x200004d0
 8001bc4:	40015804 	.word	0x40015804
 8001bc8:	00017700 	.word	0x00017700
 8001bcc:	20000568 	.word	0x20000568
 8001bd0:	40015824 	.word	0x40015824

08001bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	@ 0x28
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001bfa:	4a26      	ldr	r2, [pc, #152]	@ (8001c94 <MX_TIM3_Init+0xc0>)
 8001bfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8001bfe:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c00:	22a0      	movs	r2, #160	@ 0xa0
 8001c02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c04:	4b22      	ldr	r3, [pc, #136]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001c0a:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c0c:	2264      	movs	r2, #100	@ 0x64
 8001c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c1c:	481c      	ldr	r0, [pc, #112]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c1e:	f00d ff59 	bl	800fad4 <HAL_TIM_PWM_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c28:	f000 fb32 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4815      	ldr	r0, [pc, #84]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c3c:	f00e ff30 	bl	8010aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c46:	f000 fb23 	bl	8002290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4a:	2360      	movs	r3, #96	@ 0x60
 8001c4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001c4e:	234b      	movs	r3, #75	@ 0x4b
 8001c50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480b      	ldr	r0, [pc, #44]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c62:	f00d ff8f 	bl	800fb84 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c6c:	f000 fb10 	bl	8002290 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001c70:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c7e:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c80:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <MX_TIM3_Init+0xbc>)
 8001c82:	f001 f8b3 	bl	8002dec <HAL_TIM_MspPostInit>

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	@ 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000768 	.word	0x20000768
 8001c94:	40000400 	.word	0x40000400

08001c98 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d34 <MX_TIM15_Init+0x9c>)
 8001cba:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001cbe:	221a      	movs	r2, #26
 8001cc0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001cca:	2231      	movs	r2, #49	@ 0x31
 8001ccc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001cd4:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001ce0:	4813      	ldr	r0, [pc, #76]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001ce2:	f00d fe08 	bl	800f8f6 <HAL_TIM_Base_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001cec:	f000 fad0 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001cfe:	f00e f855 	bl	800fdac <HAL_TIM_ConfigClockSource>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001d08:	f000 fac2 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <MX_TIM15_Init+0x98>)
 8001d1a:	f00e fec1 	bl	8010aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001d24:	f000 fab4 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200007b4 	.word	0x200007b4
 8001d34:	40014000 	.word	0x40014000

08001d38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d3c:	4b22      	ldr	r3, [pc, #136]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d3e:	4a23      	ldr	r2, [pc, #140]	@ (8001dcc <MX_USART1_UART_Init+0x94>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d42:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b17      	ldr	r3, [pc, #92]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6e:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d74:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d80:	4811      	ldr	r0, [pc, #68]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d82:	f00e ff4f 	bl	8010c24 <HAL_UART_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d8c:	f000 fa80 	bl	8002290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d90:	2100      	movs	r1, #0
 8001d92:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001d94:	f00f ff1d 	bl	8011bd2 <HAL_UARTEx_SetTxFifoThreshold>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d9e:	f000 fa77 	bl	8002290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4808      	ldr	r0, [pc, #32]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001da6:	f00f ff52 	bl	8011c4e <HAL_UARTEx_SetRxFifoThreshold>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001db0:	f000 fa6e 	bl	8002290 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	@ (8001dc8 <MX_USART1_UART_Init+0x90>)
 8001db6:	f00f fed3 	bl	8011b60 <HAL_UARTEx_DisableFifoMode>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001dc0:	f000 fa66 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000800 	.word	0x20000800
 8001dcc:	40013800 	.word	0x40013800

08001dd0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001dd4:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001dd6:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001ddc:	2209      	movs	r2, #9
 8001dde:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001de0:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001de6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001de8:	2203      	movs	r2, #3
 8001dea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	@ (8001e24 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001e12:	f008 f8a2 	bl	8009f5a <HAL_PCD_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001e1c:	f000 fa38 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000894 	.word	0x20000894
 8001e28:	42040000 	.word	0x42040000

08001e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	@ 0x38
 8001e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e42:	4b8c      	ldr	r3, [pc, #560]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e48:	4a8a      	ldr	r2, [pc, #552]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e4a:	f043 0310 	orr.w	r3, r3, #16
 8001e4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e52:	4b88      	ldr	r3, [pc, #544]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	623b      	str	r3, [r7, #32]
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e60:	4b84      	ldr	r3, [pc, #528]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e66:	4a83      	ldr	r2, [pc, #524]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e70:	4b80      	ldr	r3, [pc, #512]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e84:	4a7b      	ldr	r2, [pc, #492]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e86:	f043 0320 	orr.w	r3, r3, #32
 8001e8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e8e:	4b79      	ldr	r3, [pc, #484]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9c:	4b75      	ldr	r3, [pc, #468]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ea2:	4a74      	ldr	r2, [pc, #464]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eac:	4b71      	ldr	r3, [pc, #452]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b6e      	ldr	r3, [pc, #440]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ec0:	4a6c      	ldr	r2, [pc, #432]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eca:	4b6a      	ldr	r3, [pc, #424]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed8:	4b66      	ldr	r3, [pc, #408]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ede:	4a65      	ldr	r2, [pc, #404]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ee8:	4b62      	ldr	r3, [pc, #392]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001efc:	4a5d      	ldr	r2, [pc, #372]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f06:	4b5b      	ldr	r3, [pc, #364]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f14:	4b57      	ldr	r3, [pc, #348]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f1a:	4a56      	ldr	r2, [pc, #344]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f24:	4b53      	ldr	r3, [pc, #332]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f32:	4b50      	ldr	r3, [pc, #320]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f38:	4a4e      	ldr	r2, [pc, #312]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f42:	4b4c      	ldr	r3, [pc, #304]	@ (8002074 <MX_GPIO_Init+0x248>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2104      	movs	r1, #4
 8001f54:	4848      	ldr	r0, [pc, #288]	@ (8002078 <MX_GPIO_Init+0x24c>)
 8001f56:	f006 fa0d 	bl	8008374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2110      	movs	r1, #16
 8001f5e:	4846      	ldr	r0, [pc, #280]	@ (8002078 <MX_GPIO_Init+0x24c>)
 8001f60:	f006 fa08 	bl	8008374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2114      	movs	r1, #20
 8001f68:	4844      	ldr	r0, [pc, #272]	@ (800207c <MX_GPIO_Init+0x250>)
 8001f6a:	f006 fa03 	bl	8008374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001f6e:	2314      	movs	r3, #20
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f82:	4619      	mov	r1, r3
 8001f84:	483c      	ldr	r0, [pc, #240]	@ (8002078 <MX_GPIO_Init+0x24c>)
 8001f86:	f006 f81d 	bl	8007fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002080 <MX_GPIO_Init+0x254>)
 8001f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4836      	ldr	r0, [pc, #216]	@ (8002078 <MX_GPIO_Init+0x24c>)
 8001f9e:	f006 f811 	bl	8007fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001fa6:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <MX_GPIO_Init+0x258>)
 8001fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4834      	ldr	r0, [pc, #208]	@ (8002088 <MX_GPIO_Init+0x25c>)
 8001fb6:	f006 f805 	bl	8007fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001fba:	2310      	movs	r3, #16
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fbe:	4b33      	ldr	r3, [pc, #204]	@ (800208c <MX_GPIO_Init+0x260>)
 8001fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	482e      	ldr	r0, [pc, #184]	@ (8002088 <MX_GPIO_Init+0x25c>)
 8001fce:	f005 fff9 	bl	8007fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001fd2:	2314      	movs	r3, #20
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4824      	ldr	r0, [pc, #144]	@ (800207c <MX_GPIO_Init+0x250>)
 8001fea:	f005 ffeb 	bl	8007fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	481e      	ldr	r0, [pc, #120]	@ (800207c <MX_GPIO_Init+0x250>)
 8002002:	f005 ffdf 	bl	8007fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8002006:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	481d      	ldr	r0, [pc, #116]	@ (8002090 <MX_GPIO_Init+0x264>)
 800201c:	f005 ffd2 	bl	8007fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8002020:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002032:	4619      	mov	r1, r3
 8002034:	4817      	ldr	r0, [pc, #92]	@ (8002094 <MX_GPIO_Init+0x268>)
 8002036:	f005 ffc5 	bl	8007fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	200c      	movs	r0, #12
 8002040:	f003 fea6 	bl	8005d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002044:	200c      	movs	r0, #12
 8002046:	f003 febd 	bl	8005dc4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	200f      	movs	r0, #15
 8002050:	f003 fe9e 	bl	8005d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002054:	200f      	movs	r0, #15
 8002056:	f003 feb5 	bl	8005dc4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	2010      	movs	r0, #16
 8002060:	f003 fe96 	bl	8005d90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8002064:	2010      	movs	r0, #16
 8002066:	f003 fead 	bl	8005dc4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800206a:	bf00      	nop
 800206c:	3738      	adds	r7, #56	@ 0x38
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	46020c00 	.word	0x46020c00
 8002078:	42021000 	.word	0x42021000
 800207c:	42020c00 	.word	0x42020c00
 8002080:	10110000 	.word	0x10110000
 8002084:	10310000 	.word	0x10310000
 8002088:	42020000 	.word	0x42020000
 800208c:	10210000 	.word	0x10210000
 8002090:	42021800 	.word	0x42021800
 8002094:	42020400 	.word	0x42020400

08002098 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	ch1Vol = floor((((float)(adcGroup1[0] >> 6)) / 128.0f) * 100.0f) / 100.0f;
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <HAL_SAI_RxHalfCpltCallback+0xd8>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002174 <HAL_SAI_RxHalfCpltCallback+0xdc>
 80020b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002178 <HAL_SAI_RxHalfCpltCallback+0xe0>
 80020bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c0:	ee17 0a90 	vmov	r0, s15
 80020c4:	f7fe fa5c 	bl	8000580 <__aeabi_f2d>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	ec43 2b10 	vmov	d0, r2, r3
 80020d0:	f010 fade 	bl	8012690 <floor>
 80020d4:	ec51 0b10 	vmov	r0, r1, d0
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	4b27      	ldr	r3, [pc, #156]	@ (800217c <HAL_SAI_RxHalfCpltCallback+0xe4>)
 80020de:	f7fe fbd1 	bl	8000884 <__aeabi_ddiv>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fd3b 	bl	8000b64 <__aeabi_d2f>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a23      	ldr	r2, [pc, #140]	@ (8002180 <HAL_SAI_RxHalfCpltCallback+0xe8>)
 80020f2:	6013      	str	r3, [r2, #0]
	uint16_t dacSlot = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	82fb      	strh	r3, [r7, #22]
	for(int i = 4; i < (sampleSize * 8 ) / 2; i += 8)
 80020f8:	2304      	movs	r3, #4
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e02f      	b.n	800215e <HAL_SAI_RxHalfCpltCallback+0xc6>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 80020fe:	4a21      	ldr	r2, [pc, #132]	@ (8002184 <HAL_SAI_RxHalfCpltCallback+0xec>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800210e:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002188 <HAL_SAI_RxHalfCpltCallback+0xf0>
 8002112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002116:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800211a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800211e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002122:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 8002126:	edd7 7a03 	vldr	s15, [r7, #12]
 800212a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800218c <HAL_SAI_RxHalfCpltCallback+0xf4>
 800212e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002136:	ee17 3a90 	vmov	r3, s15
 800213a:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 800213c:	8afb      	ldrh	r3, [r7, #22]
 800213e:	4914      	ldr	r1, [pc, #80]	@ (8002190 <HAL_SAI_RxHalfCpltCallback+0xf8>)
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 8002146:	8afb      	ldrh	r3, [r7, #22]
 8002148:	3301      	adds	r3, #1
 800214a:	4911      	ldr	r1, [pc, #68]	@ (8002190 <HAL_SAI_RxHalfCpltCallback+0xf8>)
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 8002152:	8afb      	ldrh	r3, [r7, #22]
 8002154:	3302      	adds	r3, #2
 8002156:	82fb      	strh	r3, [r7, #22]
	for(int i = 4; i < (sampleSize * 8 ) / 2; i += 8)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	3308      	adds	r3, #8
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b7f      	cmp	r3, #127	@ 0x7f
 8002162:	ddcc      	ble.n	80020fe <HAL_SAI_RxHalfCpltCallback+0x66>
	}
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000d78 	.word	0x20000d78
 8002174:	43000000 	.word	0x43000000
 8002178:	42c80000 	.word	0x42c80000
 800217c:	40590000 	.word	0x40590000
 8002180:	20001298 	.word	0x20001298
 8002184:	20000d98 	.word	0x20000d98
 8002188:	4b800000 	.word	0x4b800000
 800218c:	4b000000 	.word	0x4b000000
 8002190:	20001198 	.word	0x20001198

08002194 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	ch1Vol = floor((((float)(adcGroup1[0] >> 6)) / 128.0f) * 100.0f) / 100.0f;
 800219c:	4b33      	ldr	r3, [pc, #204]	@ (800226c <HAL_SAI_RxCpltCallback+0xd8>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ac:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002270 <HAL_SAI_RxCpltCallback+0xdc>
 80021b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002274 <HAL_SAI_RxCpltCallback+0xe0>
 80021b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021bc:	ee17 0a90 	vmov	r0, s15
 80021c0:	f7fe f9de 	bl	8000580 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	ec43 2b10 	vmov	d0, r2, r3
 80021cc:	f010 fa60 	bl	8012690 <floor>
 80021d0:	ec51 0b10 	vmov	r0, r1, d0
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <HAL_SAI_RxCpltCallback+0xe4>)
 80021da:	f7fe fb53 	bl	8000884 <__aeabi_ddiv>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe fcbd 	bl	8000b64 <__aeabi_d2f>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a23      	ldr	r2, [pc, #140]	@ (800227c <HAL_SAI_RxCpltCallback+0xe8>)
 80021ee:	6013      	str	r3, [r2, #0]
	uint16_t dacSlot = sampleSize;
 80021f0:	2320      	movs	r3, #32
 80021f2:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8) / 2) + 4; i < sampleSize * 8; i += 8)
 80021f4:	2384      	movs	r3, #132	@ 0x84
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	e02f      	b.n	800225a <HAL_SAI_RxCpltCallback+0xc6>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 80021fa:	4a21      	ldr	r2, [pc, #132]	@ (8002280 <HAL_SAI_RxCpltCallback+0xec>)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800220a:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002284 <HAL_SAI_RxCpltCallback+0xf0>
 800220e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002212:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800221a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800221e:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 8002222:	edd7 7a03 	vldr	s15, [r7, #12]
 8002226:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002288 <HAL_SAI_RxCpltCallback+0xf4>
 800222a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002232:	ee17 3a90 	vmov	r3, s15
 8002236:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 8002238:	8afb      	ldrh	r3, [r7, #22]
 800223a:	4914      	ldr	r1, [pc, #80]	@ (800228c <HAL_SAI_RxCpltCallback+0xf8>)
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 8002242:	8afb      	ldrh	r3, [r7, #22]
 8002244:	3301      	adds	r3, #1
 8002246:	4911      	ldr	r1, [pc, #68]	@ (800228c <HAL_SAI_RxCpltCallback+0xf8>)
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 800224e:	8afb      	ldrh	r3, [r7, #22]
 8002250:	3302      	adds	r3, #2
 8002252:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8) / 2) + 4; i < sampleSize * 8; i += 8)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	3308      	adds	r3, #8
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2bff      	cmp	r3, #255	@ 0xff
 800225e:	ddcc      	ble.n	80021fa <HAL_SAI_RxCpltCallback+0x66>
	}
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000d78 	.word	0x20000d78
 8002270:	43000000 	.word	0x43000000
 8002274:	42c80000 	.word	0x42c80000
 8002278:	40590000 	.word	0x40590000
 800227c:	20001298 	.word	0x20001298
 8002280:	20000d98 	.word	0x20000d98
 8002284:	4b800000 	.word	0x4b800000
 8002288:	4b000000 	.word	0x4b000000
 800228c:	20001198 	.word	0x20001198

08002290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <Error_Handler+0x8>

0800229c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_MspInit+0x30>)
 80022a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a8:	4a08      	ldr	r2, [pc, #32]	@ (80022cc <HAL_MspInit+0x30>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_MspInit+0x30>)
 80022b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80022c0:	f008 f888 	bl	800a3d4 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	46020c00 	.word	0x46020c00

080022d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0e0      	sub	sp, #384	@ 0x180
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80022da:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80022de:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80022f4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80022f8:	4618      	mov	r0, r3
 80022fa:	23e0      	movs	r3, #224	@ 0xe0
 80022fc:	461a      	mov	r2, r3
 80022fe:	2100      	movs	r1, #0
 8002300:	f010 f999 	bl	8012636 <memset>
  if(hadc->Instance==ADC1)
 8002304:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002308:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4aa1      	ldr	r2, [pc, #644]	@ (8002598 <HAL_ADC_MspInit+0x2c8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 8152 	bne.w	80025bc <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002318:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800231c:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8002320:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800232c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002330:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002334:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002338:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800233c:	f107 0320 	add.w	r3, r7, #32
 8002340:	4618      	mov	r0, r3
 8002342:	f009 fb21 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 800234c:	f7ff ffa0 	bl	8002290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002350:	4b92      	ldr	r3, [pc, #584]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 8002352:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002356:	4a91      	ldr	r2, [pc, #580]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 8002358:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800235c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002360:	4b8e      	ldr	r3, [pc, #568]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 8002362:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002366:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800236a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800236e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002378:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800237c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800237e:	4b87      	ldr	r3, [pc, #540]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 8002380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002384:	4a85      	ldr	r2, [pc, #532]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800238e:	4b83      	ldr	r3, [pc, #524]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 8002390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002394:	f003 0204 	and.w	r2, r3, #4
 8002398:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800239c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023aa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b7b      	ldr	r3, [pc, #492]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 80023ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b2:	4a7a      	ldr	r2, [pc, #488]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023bc:	4b77      	ldr	r3, [pc, #476]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 80023be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c2:	f003 0201 	and.w	r2, r3, #1
 80023c6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023ca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023d4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023d8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023da:	4b70      	ldr	r3, [pc, #448]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 80023dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e0:	4a6e      	ldr	r2, [pc, #440]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023ea:	4b6c      	ldr	r3, [pc, #432]	@ (800259c <HAL_ADC_MspInit+0x2cc>)
 80023ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023f0:	f003 0202 	and.w	r2, r3, #2
 80023f4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023f8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002402:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002406:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8002408:	230f      	movs	r3, #15
 800240a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800240e:	2303      	movs	r3, #3
 8002410:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800241a:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800241e:	4619      	mov	r1, r3
 8002420:	485f      	ldr	r0, [pc, #380]	@ (80025a0 <HAL_ADC_MspInit+0x2d0>)
 8002422:	f005 fdcf 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8002426:	23ed      	movs	r3, #237	@ 0xed
 8002428:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800242c:	2303      	movs	r3, #3
 800242e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002438:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800243c:	4619      	mov	r1, r3
 800243e:	4859      	ldr	r0, [pc, #356]	@ (80025a4 <HAL_ADC_MspInit+0x2d4>)
 8002440:	f005 fdc0 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8002444:	2303      	movs	r3, #3
 8002446:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800244a:	2303      	movs	r3, #3
 800244c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002456:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800245a:	4619      	mov	r1, r3
 800245c:	4852      	ldr	r0, [pc, #328]	@ (80025a8 <HAL_ADC_MspInit+0x2d8>)
 800245e:	f005 fdb1 	bl	8007fc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002462:	2321      	movs	r3, #33	@ 0x21
 8002464:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002480:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002484:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002488:	2301      	movs	r3, #1
 800248a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800248e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002492:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 8002496:	2301      	movs	r3, #1
 8002498:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 800249c:	2301      	movs	r3, #1
 800249e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80024a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80024bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024c0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80024c4:	232b      	movs	r3, #43	@ 0x2b
 80024c6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80024d6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80024da:	4934      	ldr	r1, [pc, #208]	@ (80025ac <HAL_ADC_MspInit+0x2dc>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 fe85 	bl	80071ec <HAL_DMAEx_List_BuildNode>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 80024e8:	f7ff fed2 	bl	8002290 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80024ec:	4a2f      	ldr	r2, [pc, #188]	@ (80025ac <HAL_ADC_MspInit+0x2dc>)
 80024ee:	2100      	movs	r1, #0
 80024f0:	482f      	ldr	r0, [pc, #188]	@ (80025b0 <HAL_ADC_MspInit+0x2e0>)
 80024f2:	f004 fea7 	bl	8007244 <HAL_DMAEx_List_InsertNode>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80024fc:	f7ff fec8 	bl	8002290 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8002500:	482b      	ldr	r0, [pc, #172]	@ (80025b0 <HAL_ADC_MspInit+0x2e0>)
 8002502:	f004 ff68 	bl	80073d6 <HAL_DMAEx_List_SetCircularMode>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 800250c:	f7ff fec0 	bl	8002290 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8002510:	4b28      	ldr	r3, [pc, #160]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 8002512:	4a29      	ldr	r2, [pc, #164]	@ (80025b8 <HAL_ADC_MspInit+0x2e8>)
 8002514:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002516:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 8002518:	2200      	movs	r2, #0
 800251a:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800251c:	4b25      	ldr	r3, [pc, #148]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 800251e:	2200      	movs	r2, #0
 8002520:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 8002524:	2200      	movs	r2, #0
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002528:	4b22      	ldr	r3, [pc, #136]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800252e:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 8002530:	2281      	movs	r2, #129	@ 0x81
 8002532:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002534:	481f      	ldr	r0, [pc, #124]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 8002536:	f004 fc99 	bl	8006e6c <HAL_DMAEx_List_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8002540:	f7ff fea6 	bl	8002290 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002544:	491a      	ldr	r1, [pc, #104]	@ (80025b0 <HAL_ADC_MspInit+0x2e0>)
 8002546:	481b      	ldr	r0, [pc, #108]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 8002548:	f004 ffa6 	bl	8007498 <HAL_DMAEx_List_LinkQ>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8002552:	f7ff fe9d 	bl	8002290 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8002556:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800255a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 8002562:	671a      	str	r2, [r3, #112]	@ 0x70
 8002564:	4a13      	ldr	r2, [pc, #76]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 8002566:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800256a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002572:	2110      	movs	r1, #16
 8002574:	480f      	ldr	r0, [pc, #60]	@ (80025b4 <HAL_ADC_MspInit+0x2e4>)
 8002576:	f004 f887 	bl	8006688 <HAL_DMA_ConfigChannelAttributes>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8002580:	f7ff fe86 	bl	8002290 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2100      	movs	r1, #0
 8002588:	2025      	movs	r0, #37	@ 0x25
 800258a:	f003 fc01 	bl	8005d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800258e:	2025      	movs	r0, #37	@ 0x25
 8002590:	f003 fc18 	bl	8005dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8002594:	e0c0      	b.n	8002718 <HAL_ADC_MspInit+0x448>
 8002596:	bf00      	nop
 8002598:	42028000 	.word	0x42028000
 800259c:	46020c00 	.word	0x46020c00
 80025a0:	42020800 	.word	0x42020800
 80025a4:	42020000 	.word	0x42020000
 80025a8:	42020400 	.word	0x42020400
 80025ac:	2000015c 	.word	0x2000015c
 80025b0:	20000180 	.word	0x20000180
 80025b4:	20000198 	.word	0x20000198
 80025b8:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 80025bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80025c0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a56      	ldr	r2, [pc, #344]	@ (8002724 <HAL_ADC_MspInit+0x454>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f040 80a4 	bne.w	8002718 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80025d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80025d4:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80025d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80025e4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80025e8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f4:	f107 0320 	add.w	r3, r7, #32
 80025f8:	4618      	mov	r0, r3
 80025fa:	f009 f9c5 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8002604:	f7ff fe44 	bl	8002290 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8002608:	4b47      	ldr	r3, [pc, #284]	@ (8002728 <HAL_ADC_MspInit+0x458>)
 800260a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260e:	4a46      	ldr	r2, [pc, #280]	@ (8002728 <HAL_ADC_MspInit+0x458>)
 8002610:	f043 0320 	orr.w	r3, r3, #32
 8002614:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002618:	4b43      	ldr	r3, [pc, #268]	@ (8002728 <HAL_ADC_MspInit+0x458>)
 800261a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800261e:	f003 0220 	and.w	r2, r3, #32
 8002622:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002626:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002630:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002634:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002636:	4b3c      	ldr	r3, [pc, #240]	@ (8002728 <HAL_ADC_MspInit+0x458>)
 8002638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800263c:	4a3a      	ldr	r2, [pc, #232]	@ (8002728 <HAL_ADC_MspInit+0x458>)
 800263e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002642:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002646:	4b38      	ldr	r3, [pc, #224]	@ (8002728 <HAL_ADC_MspInit+0x458>)
 8002648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800264c:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002650:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002654:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800265e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002662:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8002664:	2303      	movs	r3, #3
 8002666:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800266a:	2303      	movs	r3, #3
 800266c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002676:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800267a:	4619      	mov	r1, r3
 800267c:	482b      	ldr	r0, [pc, #172]	@ (800272c <HAL_ADC_MspInit+0x45c>)
 800267e:	f005 fca1 	bl	8007fc4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8002682:	4b2b      	ldr	r3, [pc, #172]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 8002684:	4a2b      	ldr	r2, [pc, #172]	@ (8002734 <HAL_ADC_MspInit+0x464>)
 8002686:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8002688:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 800268a:	2201      	movs	r2, #1
 800268c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800268e:	4b28      	ldr	r3, [pc, #160]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002694:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800269a:	4b25      	ldr	r3, [pc, #148]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 80026a0:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026a6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80026a8:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80026ae:	4b20      	ldr	r3, [pc, #128]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026b4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026be:	2201      	movs	r2, #1
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80026c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80026c8:	4b19      	ldr	r3, [pc, #100]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026ce:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80026d4:	4b16      	ldr	r3, [pc, #88]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80026da:	4815      	ldr	r0, [pc, #84]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026dc:	f003 fc34 	bl	8005f48 <HAL_DMA_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 80026e6:	f7ff fdd3 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 80026ea:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80026ee:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80026f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 80026fa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80026fe:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002706:	2110      	movs	r1, #16
 8002708:	4809      	ldr	r0, [pc, #36]	@ (8002730 <HAL_ADC_MspInit+0x460>)
 800270a:	f003 ffbd 	bl	8006688 <HAL_DMA_ConfigChannelAttributes>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8002714:	f7ff fdbc 	bl	8002290 <Error_Handler>
}
 8002718:	bf00      	nop
 800271a:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	46021000 	.word	0x46021000
 8002728:	46020c00 	.word	0x46020c00
 800272c:	42021800 	.word	0x42021800
 8002730:	20000210 	.word	0x20000210
 8002734:	40020150 	.word	0x40020150

08002738 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <HAL_DMA2D_MspInit+0x3c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10e      	bne.n	8002768 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800274a:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <HAL_DMA2D_MspInit+0x40>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002750:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <HAL_DMA2D_MspInit+0x40>)
 8002752:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002756:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800275a:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <HAL_DMA2D_MspInit+0x40>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	4002b000 	.word	0x4002b000
 8002778:	46020c00 	.word	0x46020c00

0800277c <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	@ 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a2a      	ldr	r2, [pc, #168]	@ (8002844 <HAL_XSPI_MspInit+0xc8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d14d      	bne.n	800283a <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 800279e:	4b2a      	ldr	r3, [pc, #168]	@ (8002848 <HAL_XSPI_MspInit+0xcc>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a4:	4a28      	ldr	r2, [pc, #160]	@ (8002848 <HAL_XSPI_MspInit+0xcc>)
 80027a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027ae:	4b26      	ldr	r3, [pc, #152]	@ (8002848 <HAL_XSPI_MspInit+0xcc>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80027bc:	4b22      	ldr	r3, [pc, #136]	@ (8002848 <HAL_XSPI_MspInit+0xcc>)
 80027be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027c2:	4a21      	ldr	r2, [pc, #132]	@ (8002848 <HAL_XSPI_MspInit+0xcc>)
 80027c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002848 <HAL_XSPI_MspInit+0xcc>)
 80027ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80027da:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_XSPI_MspInit+0xcc>)
 80027dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027e0:	4a19      	ldr	r2, [pc, #100]	@ (8002848 <HAL_XSPI_MspInit+0xcc>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027ea:	4b17      	ldr	r3, [pc, #92]	@ (8002848 <HAL_XSPI_MspInit+0xcc>)
 80027ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80027f8:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 80027fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 800280a:	2308      	movs	r3, #8
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	480d      	ldr	r0, [pc, #52]	@ (800284c <HAL_XSPI_MspInit+0xd0>)
 8002816:	f005 fbd5 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800281a:	230f      	movs	r3, #15
 800281c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 800282a:	2308      	movs	r3, #8
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4806      	ldr	r0, [pc, #24]	@ (8002850 <HAL_XSPI_MspInit+0xd4>)
 8002836:	f005 fbc5 	bl	8007fc4 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 800283a:	bf00      	nop
 800283c:	3728      	adds	r7, #40	@ 0x28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	420d3400 	.word	0x420d3400
 8002848:	46020c00 	.word	0x46020c00
 800284c:	42021c00 	.word	0x42021c00
 8002850:	42022000 	.word	0x42022000

08002854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b0c4      	sub	sp, #272	@ 0x110
 8002858:	af00      	add	r7, sp, #0
 800285a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800285e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002862:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002874:	f107 0318 	add.w	r3, r7, #24
 8002878:	22e0      	movs	r2, #224	@ 0xe0
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f00f feda 	bl	8012636 <memset>
  if(hi2c->Instance==I2C1)
 8002882:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002886:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a63      	ldr	r2, [pc, #396]	@ (8002a1c <HAL_I2C_MspInit+0x1c8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d14f      	bne.n	8002934 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002894:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028a6:	f107 0318 	add.w	r3, r7, #24
 80028aa:	4618      	mov	r0, r3
 80028ac:	f009 f86c 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 80028b6:	f7ff fceb 	bl	8002290 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028ba:	4b59      	ldr	r3, [pc, #356]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 80028bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c0:	4a57      	ldr	r2, [pc, #348]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 80028c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028ca:	4b55      	ldr	r3, [pc, #340]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 80028cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80028d8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80028dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e0:	2312      	movs	r3, #18
 80028e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028f2:	2304      	movs	r3, #4
 80028f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028f8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80028fc:	4619      	mov	r1, r3
 80028fe:	4849      	ldr	r0, [pc, #292]	@ (8002a24 <HAL_I2C_MspInit+0x1d0>)
 8002900:	f005 fb60 	bl	8007fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002904:	4b46      	ldr	r3, [pc, #280]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 8002906:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800290a:	4a45      	ldr	r2, [pc, #276]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 800290c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002910:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002914:	4b42      	ldr	r3, [pc, #264]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 8002916:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800291a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800291e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002922:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800292c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002930:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002932:	e06e      	b.n	8002a12 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8002934:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002938:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a39      	ldr	r2, [pc, #228]	@ (8002a28 <HAL_I2C_MspInit+0x1d4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d165      	bne.n	8002a12 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002946:	f04f 0280 	mov.w	r2, #128	@ 0x80
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002958:	f107 0318 	add.w	r3, r7, #24
 800295c:	4618      	mov	r0, r3
 800295e:	f009 f813 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002968:	f7ff fc92 	bl	8002290 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800296c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 800296e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002972:	4a2b      	ldr	r2, [pc, #172]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800297c:	4b28      	ldr	r3, [pc, #160]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 800297e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002982:	f003 0220 	and.w	r2, r3, #32
 8002986:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800298a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002994:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002998:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800299a:	2303      	movs	r3, #3
 800299c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a0:	2312      	movs	r3, #18
 80029a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029b2:	2304      	movs	r3, #4
 80029b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029b8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80029bc:	4619      	mov	r1, r3
 80029be:	481b      	ldr	r0, [pc, #108]	@ (8002a2c <HAL_I2C_MspInit+0x1d8>)
 80029c0:	f005 fb00 	bl	8007fc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029c4:	4b16      	ldr	r3, [pc, #88]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 80029c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029ca:	4a15      	ldr	r2, [pc, #84]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 80029cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029d0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80029d4:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <HAL_I2C_MspInit+0x1cc>)
 80029d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029da:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029f0:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	2039      	movs	r0, #57	@ 0x39
 80029f8:	f003 f9ca 	bl	8005d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80029fc:	2039      	movs	r0, #57	@ 0x39
 80029fe:	f003 f9e1 	bl	8005dc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	203a      	movs	r0, #58	@ 0x3a
 8002a08:	f003 f9c2 	bl	8005d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002a0c:	203a      	movs	r0, #58	@ 0x3a
 8002a0e:	f003 f9d9 	bl	8005dc4 <HAL_NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40005400 	.word	0x40005400
 8002a20:	46020c00 	.word	0x46020c00
 8002a24:	42021800 	.word	0x42021800
 8002a28:	40005800 	.word	0x40005800
 8002a2c:	42021400 	.word	0x42021400

08002a30 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b0c6      	sub	sp, #280	@ 0x118
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a3e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a50:	f107 0320 	add.w	r3, r7, #32
 8002a54:	22e0      	movs	r2, #224	@ 0xe0
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00f fdec 	bl	8012636 <memset>
  if(hltdc->Instance==LTDC)
 8002a5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a92      	ldr	r2, [pc, #584]	@ (8002cb4 <HAL_LTDC_MspInit+0x284>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	f040 811b 	bne.w	8002ca8 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0302 	mov.w	r3, #2
 8002a7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8002a84:	2303      	movs	r3, #3
 8002a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8002a88:	2304      	movs	r3, #4
 8002a8a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8002a8c:	2332      	movs	r3, #50	@ 0x32
 8002a8e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8002a90:	2302      	movs	r3, #2
 8002a92:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8002a94:	2302      	movs	r3, #2
 8002a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8002aa4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aaa:	f107 0320 	add.w	r3, r7, #32
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f008 ff6a 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8002aba:	f7ff fbe9 	bl	8002290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002abe:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002ac0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ac4:	4a7c      	ldr	r2, [pc, #496]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002ac6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002aca:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002ace:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002ad0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ad4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002adc:	4b76      	ldr	r3, [pc, #472]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ae2:	4a75      	ldr	r2, [pc, #468]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aec:	4b72      	ldr	r3, [pc, #456]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002af2:	f003 0202 	and.w	r2, r3, #2
 8002af6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002afa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b08:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b10:	4a69      	ldr	r2, [pc, #420]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002b12:	f043 0310 	orr.w	r3, r3, #16
 8002b16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b1a:	4b67      	ldr	r3, [pc, #412]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b20:	f003 0210 	and.w	r2, r3, #16
 8002b24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b36:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b38:	4b5f      	ldr	r3, [pc, #380]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b48:	4b5b      	ldr	r3, [pc, #364]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b4e:	f003 0208 	and.w	r2, r3, #8
 8002b52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b64:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	4b54      	ldr	r3, [pc, #336]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b6c:	4a52      	ldr	r2, [pc, #328]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002b6e:	f043 0304 	orr.w	r3, r3, #4
 8002b72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b76:	4b50      	ldr	r3, [pc, #320]	@ (8002cb8 <HAL_LTDC_MspInit+0x288>)
 8002b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b7c:	f003 0204 	and.w	r2, r3, #4
 8002b80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b92:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b94:	2304      	movs	r3, #4
 8002b96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002bac:	2308      	movs	r3, #8
 8002bae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4840      	ldr	r0, [pc, #256]	@ (8002cbc <HAL_LTDC_MspInit+0x28c>)
 8002bba:	f005 fa03 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002bbe:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8002bc2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bde:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002be2:	4619      	mov	r1, r3
 8002be4:	4836      	ldr	r0, [pc, #216]	@ (8002cc0 <HAL_LTDC_MspInit+0x290>)
 8002be6:	f005 f9ed 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002bea:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8002bee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002c04:	2308      	movs	r3, #8
 8002c06:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c0a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002c0e:	4619      	mov	r1, r3
 8002c10:	482c      	ldr	r0, [pc, #176]	@ (8002cc4 <HAL_LTDC_MspInit+0x294>)
 8002c12:	f005 f9d7 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c16:	23c0      	movs	r3, #192	@ 0xc0
 8002c18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002c2e:	2307      	movs	r3, #7
 8002c30:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c34:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4823      	ldr	r0, [pc, #140]	@ (8002cc8 <HAL_LTDC_MspInit+0x298>)
 8002c3c:	f005 f9c2 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c60:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002c64:	4619      	mov	r1, r3
 8002c66:	4818      	ldr	r0, [pc, #96]	@ (8002cc8 <HAL_LTDC_MspInit+0x298>)
 8002c68:	f005 f9ac 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002c86:	2307      	movs	r3, #7
 8002c88:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002c90:	4619      	mov	r1, r3
 8002c92:	480a      	ldr	r0, [pc, #40]	@ (8002cbc <HAL_LTDC_MspInit+0x28c>)
 8002c94:	f005 f996 	bl	8007fc4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	2087      	movs	r0, #135	@ 0x87
 8002c9e:	f003 f877 	bl	8005d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ca2:	2087      	movs	r0, #135	@ 0x87
 8002ca4:	f003 f88e 	bl	8005dc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002ca8:	bf00      	nop
 8002caa:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40016800 	.word	0x40016800
 8002cb8:	46020c00 	.word	0x46020c00
 8002cbc:	42020400 	.word	0x42020400
 8002cc0:	42021000 	.word	0x42021000
 8002cc4:	42020c00 	.word	0x42020c00
 8002cc8:	42020800 	.word	0x42020800

08002ccc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b0bc      	sub	sp, #240	@ 0xf0
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cd4:	f107 0310 	add.w	r3, r7, #16
 8002cd8:	22e0      	movs	r2, #224	@ 0xe0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f00f fcaa 	bl	8012636 <memset>
  if(hrtc->Instance==RTC)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d5c <HAL_RTC_MspInit+0x90>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d132      	bne.n	8002d52 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002cf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	4618      	mov	r0, r3
 8002d06:	f008 fe3f 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002d10:	f7ff fabe 	bl	8002290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d14:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_RTC_MspInit+0x94>)
 8002d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d1a:	4a11      	ldr	r2, [pc, #68]	@ (8002d60 <HAL_RTC_MspInit+0x94>)
 8002d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002d24:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <HAL_RTC_MspInit+0x94>)
 8002d26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <HAL_RTC_MspInit+0x94>)
 8002d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d30:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002d34:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_RTC_MspInit+0x94>)
 8002d36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002d42:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <HAL_RTC_MspInit+0x94>)
 8002d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d48:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <HAL_RTC_MspInit+0x94>)
 8002d4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002d52:	bf00      	nop
 8002d54:	37f0      	adds	r7, #240	@ 0xf0
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	46007800 	.word	0x46007800
 8002d60:	46020c00 	.word	0x46020c00

08002d64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0b      	ldr	r2, [pc, #44]	@ (8002da0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d76:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x40>)
 8002d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d7c:	4a09      	ldr	r2, [pc, #36]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x40>)
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002d86:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x40>)
 8002d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40000400 	.word	0x40000400
 8002da4:	46020c00 	.word	0x46020c00

08002da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0b      	ldr	r2, [pc, #44]	@ (8002de4 <HAL_TIM_Base_MspInit+0x3c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10e      	bne.n	8002dd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002dba:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <HAL_TIM_Base_MspInit+0x40>)
 8002dbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002dc0:	4a09      	ldr	r2, [pc, #36]	@ (8002de8 <HAL_TIM_Base_MspInit+0x40>)
 8002dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002dca:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_TIM_Base_MspInit+0x40>)
 8002dcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40014000 	.word	0x40014000
 8002de8:	46020c00 	.word	0x46020c00

08002dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <HAL_TIM_MspPostInit+0x68>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d11e      	bne.n	8002e4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e0e:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <HAL_TIM_MspPostInit+0x6c>)
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e14:	4a10      	ldr	r2, [pc, #64]	@ (8002e58 <HAL_TIM_MspPostInit+0x6c>)
 8002e16:	f043 0310 	orr.w	r3, r3, #16
 8002e1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <HAL_TIM_MspPostInit+0x6c>)
 8002e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002e2c:	2340      	movs	r3, #64	@ 0x40
 8002e2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	4619      	mov	r1, r3
 8002e46:	4805      	ldr	r0, [pc, #20]	@ (8002e5c <HAL_TIM_MspPostInit+0x70>)
 8002e48:	f005 f8bc 	bl	8007fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40000400 	.word	0x40000400
 8002e58:	46020c00 	.word	0x46020c00
 8002e5c:	42021000 	.word	0x42021000

08002e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b0c2      	sub	sp, #264	@ 0x108
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e6e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e80:	f107 0310 	add.w	r3, r7, #16
 8002e84:	22e0      	movs	r2, #224	@ 0xe0
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f00f fbd4 	bl	8012636 <memset>
  if(huart->Instance==USART1)
 8002e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f58 <HAL_UART_MspInit+0xf8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d155      	bne.n	8002f4c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ea0:	f04f 0201 	mov.w	r2, #1
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002eac:	2300      	movs	r3, #0
 8002eae:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb0:	f107 0310 	add.w	r3, r7, #16
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f008 fd67 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002ec0:	f7ff f9e6 	bl	8002290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ec4:	4b25      	ldr	r3, [pc, #148]	@ (8002f5c <HAL_UART_MspInit+0xfc>)
 8002ec6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eca:	4a24      	ldr	r2, [pc, #144]	@ (8002f5c <HAL_UART_MspInit+0xfc>)
 8002ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002ed4:	4b21      	ldr	r3, [pc, #132]	@ (8002f5c <HAL_UART_MspInit+0xfc>)
 8002ed6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <HAL_UART_MspInit+0xfc>)
 8002ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f5c <HAL_UART_MspInit+0xfc>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f5c <HAL_UART_MspInit+0xfc>)
 8002ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ef8:	f003 0201 	and.w	r2, r3, #1
 8002efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f0a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f0e:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f10:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002f34:	4619      	mov	r1, r3
 8002f36:	480a      	ldr	r0, [pc, #40]	@ (8002f60 <HAL_UART_MspInit+0x100>)
 8002f38:	f005 f844 	bl	8007fc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2100      	movs	r1, #0
 8002f40:	203d      	movs	r0, #61	@ 0x3d
 8002f42:	f002 ff25 	bl	8005d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f46:	203d      	movs	r0, #61	@ 0x3d
 8002f48:	f002 ff3c 	bl	8005dc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002f4c:	bf00      	nop
 8002f4e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	46020c00 	.word	0x46020c00
 8002f60:	42020000 	.word	0x42020000

08002f64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b0be      	sub	sp, #248	@ 0xf8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f6c:	f107 0318 	add.w	r3, r7, #24
 8002f70:	22e0      	movs	r2, #224	@ 0xe0
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f00f fb5e 	bl	8012636 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8003068 <HAL_PCD_MspInit+0x104>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d16d      	bne.n	8003060 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f84:	4b39      	ldr	r3, [pc, #228]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8002f86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f8a:	4a38      	ldr	r2, [pc, #224]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002f94:	4b35      	ldr	r3, [pc, #212]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8002f96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0308 	mov.w	r3, #8
 8002faa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002fae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fb2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fb6:	f107 0318 	add.w	r3, r7, #24
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f008 fce4 	bl	800b988 <HAL_RCCEx_PeriphCLKConfig>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 8002fc6:	f7ff f963 	bl	8002290 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002fca:	200c      	movs	r0, #12
 8002fcc:	f000 fc1c 	bl	8003808 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002fd0:	4b26      	ldr	r3, [pc, #152]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8002fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fd6:	4a25      	ldr	r2, [pc, #148]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8002fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fdc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fe0:	4b22      	ldr	r3, [pc, #136]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8002fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002fee:	4b1f      	ldr	r3, [pc, #124]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8002ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8002ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ffa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8003000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300c:	4b17      	ldr	r3, [pc, #92]	@ (800306c <HAL_PCD_MspInit+0x108>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d11b      	bne.n	8003052 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	4b14      	ldr	r3, [pc, #80]	@ (800306c <HAL_PCD_MspInit+0x108>)
 800301c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003020:	4a12      	ldr	r2, [pc, #72]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800302a:	4b10      	ldr	r3, [pc, #64]	@ (800306c <HAL_PCD_MspInit+0x108>)
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003038:	f007 f9ac 	bl	800a394 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800303c:	f007 f9da 	bl	800a3f4 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003046:	4a09      	ldr	r2, [pc, #36]	@ (800306c <HAL_PCD_MspInit+0x108>)
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003050:	e003      	b.n	800305a <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8003052:	f007 f99f 	bl	800a394 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8003056:	f007 f9cd 	bl	800a3f4 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800305a:	2001      	movs	r0, #1
 800305c:	f000 fbc0 	bl	80037e0 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8003060:	bf00      	nop
 8003062:	37f8      	adds	r7, #248	@ 0xf8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	42040000 	.word	0x42040000
 800306c:	46020c00 	.word	0x46020c00

08003070 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b0a4      	sub	sp, #144	@ 0x90
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4abb      	ldr	r2, [pc, #748]	@ (800336c <HAL_SAI_MspInit+0x2fc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	f040 80ca 	bne.w	8003218 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003084:	4bba      	ldr	r3, [pc, #744]	@ (8003370 <HAL_SAI_MspInit+0x300>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10e      	bne.n	80030aa <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800308c:	4bb9      	ldr	r3, [pc, #740]	@ (8003374 <HAL_SAI_MspInit+0x304>)
 800308e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003092:	4ab8      	ldr	r2, [pc, #736]	@ (8003374 <HAL_SAI_MspInit+0x304>)
 8003094:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003098:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800309c:	4bb5      	ldr	r3, [pc, #724]	@ (8003374 <HAL_SAI_MspInit+0x304>)
 800309e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80030aa:	4bb1      	ldr	r3, [pc, #708]	@ (8003370 <HAL_SAI_MspInit+0x300>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3301      	adds	r3, #1
 80030b0:	4aaf      	ldr	r2, [pc, #700]	@ (8003370 <HAL_SAI_MspInit+0x300>)
 80030b2:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80030b4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80030b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ba:	2302      	movs	r3, #2
 80030bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80030cc:	230d      	movs	r3, #13
 80030ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80030d6:	4619      	mov	r1, r3
 80030d8:	48a7      	ldr	r0, [pc, #668]	@ (8003378 <HAL_SAI_MspInit+0x308>)
 80030da:	f004 ff73 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80030f6:	230d      	movs	r3, #13
 80030f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003100:	4619      	mov	r1, r3
 8003102:	489d      	ldr	r0, [pc, #628]	@ (8003378 <HAL_SAI_MspInit+0x308>)
 8003104:	f004 ff5e 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800310c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003120:	230d      	movs	r3, #13
 8003122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003126:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800312a:	4619      	mov	r1, r3
 800312c:	4893      	ldr	r0, [pc, #588]	@ (800337c <HAL_SAI_MspInit+0x30c>)
 800312e:	f004 ff49 	bl	8007fc4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8003132:	2321      	movs	r3, #33	@ 0x21
 8003134:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8003136:	2326      	movs	r3, #38	@ 0x26
 8003138:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800313e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003142:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003144:	2308      	movs	r3, #8
 8003146:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8003148:	2300      	movs	r3, #0
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 800314c:	2302      	movs	r3, #2
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8003150:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003154:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800315a:	2301      	movs	r3, #1
 800315c:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800315e:	2300      	movs	r3, #0
 8003160:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003162:	2300      	movs	r3, #0
 8003164:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8003166:	2300      	movs	r3, #0
 8003168:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800316a:	2300      	movs	r3, #0
 800316c:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800316e:	2300      	movs	r3, #0
 8003170:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8003172:	2300      	movs	r3, #0
 8003174:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	4981      	ldr	r1, [pc, #516]	@ (8003380 <HAL_SAI_MspInit+0x310>)
 800317c:	4618      	mov	r0, r3
 800317e:	f004 f835 	bl	80071ec <HAL_DMAEx_List_BuildNode>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8003188:	f7ff f882 	bl	8002290 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 800318c:	4a7c      	ldr	r2, [pc, #496]	@ (8003380 <HAL_SAI_MspInit+0x310>)
 800318e:	2100      	movs	r1, #0
 8003190:	487c      	ldr	r0, [pc, #496]	@ (8003384 <HAL_SAI_MspInit+0x314>)
 8003192:	f004 f857 	bl	8007244 <HAL_DMAEx_List_InsertNode>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 800319c:	f7ff f878 	bl	8002290 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 80031a0:	4878      	ldr	r0, [pc, #480]	@ (8003384 <HAL_SAI_MspInit+0x314>)
 80031a2:	f004 f918 	bl	80073d6 <HAL_DMAEx_List_SetCircularMode>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 80031ac:	f7ff f870 	bl	8002290 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80031b0:	4b75      	ldr	r3, [pc, #468]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 80031b2:	4a76      	ldr	r2, [pc, #472]	@ (800338c <HAL_SAI_MspInit+0x31c>)
 80031b4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80031b6:	4b74      	ldr	r3, [pc, #464]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 80031b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031bc:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80031be:	4b72      	ldr	r3, [pc, #456]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80031c4:	4b70      	ldr	r3, [pc, #448]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80031ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80031d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 80031d2:	2281      	movs	r2, #129	@ 0x81
 80031d4:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80031d6:	486c      	ldr	r0, [pc, #432]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 80031d8:	f003 fe48 	bl	8006e6c <HAL_DMAEx_List_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 80031e2:	f7ff f855 	bl	8002290 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 80031e6:	4967      	ldr	r1, [pc, #412]	@ (8003384 <HAL_SAI_MspInit+0x314>)
 80031e8:	4867      	ldr	r0, [pc, #412]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 80031ea:	f004 f955 	bl	8007498 <HAL_DMAEx_List_LinkQ>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 80031f4:	f7ff f84c 	bl	8002290 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a63      	ldr	r2, [pc, #396]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 80031fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003200:	4a61      	ldr	r2, [pc, #388]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003206:	2110      	movs	r1, #16
 8003208:	485f      	ldr	r0, [pc, #380]	@ (8003388 <HAL_SAI_MspInit+0x318>)
 800320a:	f003 fa3d 	bl	8006688 <HAL_DMA_ConfigChannelAttributes>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8003214:	f7ff f83c 	bl	8002290 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5c      	ldr	r2, [pc, #368]	@ (8003390 <HAL_SAI_MspInit+0x320>)
 800321e:	4293      	cmp	r3, r2
 8003220:	f040 80eb 	bne.w	80033fa <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003224:	4b52      	ldr	r3, [pc, #328]	@ (8003370 <HAL_SAI_MspInit+0x300>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10e      	bne.n	800324a <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800322c:	4b51      	ldr	r3, [pc, #324]	@ (8003374 <HAL_SAI_MspInit+0x304>)
 800322e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003232:	4a50      	ldr	r2, [pc, #320]	@ (8003374 <HAL_SAI_MspInit+0x304>)
 8003234:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003238:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800323c:	4b4d      	ldr	r3, [pc, #308]	@ (8003374 <HAL_SAI_MspInit+0x304>)
 800323e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800324a:	4b49      	ldr	r3, [pc, #292]	@ (8003370 <HAL_SAI_MspInit+0x300>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	4a47      	ldr	r2, [pc, #284]	@ (8003370 <HAL_SAI_MspInit+0x300>)
 8003252:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003254:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003258:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003266:	2303      	movs	r3, #3
 8003268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800326c:	230d      	movs	r3, #13
 800326e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003276:	4619      	mov	r1, r3
 8003278:	4846      	ldr	r0, [pc, #280]	@ (8003394 <HAL_SAI_MspInit+0x324>)
 800327a:	f004 fea3 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800327e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003282:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003284:	2302      	movs	r3, #2
 8003286:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003290:	2303      	movs	r3, #3
 8003292:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003296:	230d      	movs	r3, #13
 8003298:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80032a0:	4619      	mov	r1, r3
 80032a2:	483d      	ldr	r0, [pc, #244]	@ (8003398 <HAL_SAI_MspInit+0x328>)
 80032a4:	f004 fe8e 	bl	8007fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80032ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80032c0:	230d      	movs	r3, #13
 80032c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80032ca:	4619      	mov	r1, r3
 80032cc:	4832      	ldr	r0, [pc, #200]	@ (8003398 <HAL_SAI_MspInit+0x328>)
 80032ce:	f004 fe79 	bl	8007fc4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80032d2:	2321      	movs	r3, #33	@ 0x21
 80032d4:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80032d6:	2327      	movs	r3, #39	@ 0x27
 80032d8:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80032e6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80032ec:	2302      	movs	r3, #2
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80032f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80032f6:	2301      	movs	r3, #1
 80032f8:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80032fe:	2300      	movs	r3, #0
 8003300:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003302:	2300      	movs	r3, #0
 8003304:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8003306:	2300      	movs	r3, #0
 8003308:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800330a:	2300      	movs	r3, #0
 800330c:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800330e:	2300      	movs	r3, #0
 8003310:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8003312:	2300      	movs	r3, #0
 8003314:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	4920      	ldr	r1, [pc, #128]	@ (800339c <HAL_SAI_MspInit+0x32c>)
 800331c:	4618      	mov	r0, r3
 800331e:	f003 ff65 	bl	80071ec <HAL_DMAEx_List_BuildNode>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8003328:	f7fe ffb2 	bl	8002290 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800332c:	4a1b      	ldr	r2, [pc, #108]	@ (800339c <HAL_SAI_MspInit+0x32c>)
 800332e:	2100      	movs	r1, #0
 8003330:	481b      	ldr	r0, [pc, #108]	@ (80033a0 <HAL_SAI_MspInit+0x330>)
 8003332:	f003 ff87 	bl	8007244 <HAL_DMAEx_List_InsertNode>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 800333c:	f7fe ffa8 	bl	8002290 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8003340:	4817      	ldr	r0, [pc, #92]	@ (80033a0 <HAL_SAI_MspInit+0x330>)
 8003342:	f004 f848 	bl	80073d6 <HAL_DMAEx_List_SetCircularMode>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 800334c:	f7fe ffa0 	bl	8002290 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8003350:	4b14      	ldr	r3, [pc, #80]	@ (80033a4 <HAL_SAI_MspInit+0x334>)
 8003352:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <HAL_SAI_MspInit+0x338>)
 8003354:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8003356:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <HAL_SAI_MspInit+0x334>)
 8003358:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800335c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800335e:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <HAL_SAI_MspInit+0x334>)
 8003360:	2200      	movs	r2, #0
 8003362:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8003364:	4b0f      	ldr	r3, [pc, #60]	@ (80033a4 <HAL_SAI_MspInit+0x334>)
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
 800336a:	e01f      	b.n	80033ac <HAL_SAI_MspInit+0x33c>
 800336c:	40015804 	.word	0x40015804
 8003370:	200016a4 	.word	0x200016a4
 8003374:	46020c00 	.word	0x46020c00
 8003378:	42020400 	.word	0x42020400
 800337c:	42021800 	.word	0x42021800
 8003380:	20000600 	.word	0x20000600
 8003384:	20000624 	.word	0x20000624
 8003388:	2000063c 	.word	0x2000063c
 800338c:	400201d0 	.word	0x400201d0
 8003390:	40015824 	.word	0x40015824
 8003394:	42020000 	.word	0x42020000
 8003398:	42020800 	.word	0x42020800
 800339c:	200006b4 	.word	0x200006b4
 80033a0:	200006d8 	.word	0x200006d8
 80033a4:	200006f0 	.word	0x200006f0
 80033a8:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80033ac:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <HAL_SAI_MspInit+0x394>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80033b2:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <HAL_SAI_MspInit+0x394>)
 80033b4:	2281      	movs	r2, #129	@ 0x81
 80033b6:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80033b8:	4812      	ldr	r0, [pc, #72]	@ (8003404 <HAL_SAI_MspInit+0x394>)
 80033ba:	f003 fd57 	bl	8006e6c <HAL_DMAEx_List_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 80033c4:	f7fe ff64 	bl	8002290 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80033c8:	490f      	ldr	r1, [pc, #60]	@ (8003408 <HAL_SAI_MspInit+0x398>)
 80033ca:	480e      	ldr	r0, [pc, #56]	@ (8003404 <HAL_SAI_MspInit+0x394>)
 80033cc:	f004 f864 	bl	8007498 <HAL_DMAEx_List_LinkQ>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80033d6:	f7fe ff5b 	bl	8002290 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a09      	ldr	r2, [pc, #36]	@ (8003404 <HAL_SAI_MspInit+0x394>)
 80033de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80033e2:	4a08      	ldr	r2, [pc, #32]	@ (8003404 <HAL_SAI_MspInit+0x394>)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80033e8:	2110      	movs	r1, #16
 80033ea:	4806      	ldr	r0, [pc, #24]	@ (8003404 <HAL_SAI_MspInit+0x394>)
 80033ec:	f003 f94c 	bl	8006688 <HAL_DMA_ConfigChannelAttributes>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 80033f6:	f7fe ff4b 	bl	8002290 <Error_Handler>
    }

    }
}
 80033fa:	bf00      	nop
 80033fc:	3790      	adds	r7, #144	@ 0x90
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	200006f0 	.word	0x200006f0
 8003408:	200006d8 	.word	0x200006d8

0800340c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003410:	bf00      	nop
 8003412:	e7fd      	b.n	8003410 <NMI_Handler+0x4>

08003414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <HardFault_Handler+0x4>

0800341c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <MemManage_Handler+0x4>

08003424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <BusFault_Handler+0x4>

0800342c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <UsageFault_Handler+0x4>

08003434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003442:	b480      	push	{r7}
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003462:	f000 f979 	bl	8003758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}

0800346a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 800346e:	2002      	movs	r0, #2
 8003470:	f004 ff98 	bl	80083a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003474:	bf00      	nop
 8003476:	bd80      	pop	{r7, pc}

08003478 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 800347c:	2010      	movs	r0, #16
 800347e:	f004 ff91 	bl	80083a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}

08003486 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 800348a:	2020      	movs	r0, #32
 800348c:	f004 ff8a 	bl	80083a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}

08003494 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003498:	4802      	ldr	r0, [pc, #8]	@ (80034a4 <GPDMA1_Channel0_IRQHandler+0x10>)
 800349a:	f002 ff86 	bl	80063aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000198 	.word	0x20000198

080034a8 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80034ac:	4802      	ldr	r0, [pc, #8]	@ (80034b8 <GPDMA1_Channel1_IRQHandler+0x10>)
 80034ae:	f002 ff7c 	bl	80063aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200006f0 	.word	0x200006f0

080034bc <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80034c0:	4802      	ldr	r0, [pc, #8]	@ (80034cc <GPDMA1_Channel2_IRQHandler+0x10>)
 80034c2:	f002 ff72 	bl	80063aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000210 	.word	0x20000210

080034d0 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80034d4:	4802      	ldr	r0, [pc, #8]	@ (80034e0 <GPDMA1_Channel3_IRQHandler+0x10>)
 80034d6:	f002 ff68 	bl	80063aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	2000063c 	.word	0x2000063c

080034e4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80034e8:	4802      	ldr	r0, [pc, #8]	@ (80034f4 <ADC1_2_IRQHandler+0x10>)
 80034ea:	f001 f925 	bl	8004738 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000044 	.word	0x20000044

080034f8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80034fc:	4802      	ldr	r0, [pc, #8]	@ (8003508 <I2C2_EV_IRQHandler+0x10>)
 80034fe:	f005 f91d 	bl	800873c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200003a4 	.word	0x200003a4

0800350c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003510:	4802      	ldr	r0, [pc, #8]	@ (800351c <I2C2_ER_IRQHandler+0x10>)
 8003512:	f005 f92d 	bl	8008770 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200003a4 	.word	0x200003a4

08003520 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003524:	4802      	ldr	r0, [pc, #8]	@ (8003530 <USART1_IRQHandler+0x10>)
 8003526:	f00d fbcd 	bl	8010cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000800 	.word	0x20000800

08003534 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003538:	4802      	ldr	r0, [pc, #8]	@ (8003544 <LTDC_IRQHandler+0x10>)
 800353a:	f006 fa9b 	bl	8009a74 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200003f8 	.word	0x200003f8

08003548 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800354c:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <SystemInit+0x68>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003552:	4a17      	ldr	r2, [pc, #92]	@ (80035b0 <SystemInit+0x68>)
 8003554:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003558:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800355c:	4b15      	ldr	r3, [pc, #84]	@ (80035b4 <SystemInit+0x6c>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003562:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <SystemInit+0x6c>)
 8003564:	2200      	movs	r2, #0
 8003566:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003568:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <SystemInit+0x6c>)
 800356a:	2200      	movs	r2, #0
 800356c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800356e:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <SystemInit+0x6c>)
 8003570:	2200      	movs	r2, #0
 8003572:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003574:	4b0f      	ldr	r3, [pc, #60]	@ (80035b4 <SystemInit+0x6c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0e      	ldr	r2, [pc, #56]	@ (80035b4 <SystemInit+0x6c>)
 800357a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800357e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003582:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003584:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <SystemInit+0x6c>)
 8003586:	2200      	movs	r2, #0
 8003588:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800358a:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <SystemInit+0x6c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a09      	ldr	r2, [pc, #36]	@ (80035b4 <SystemInit+0x6c>)
 8003590:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003594:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003596:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <SystemInit+0x6c>)
 8003598:	2200      	movs	r2, #0
 800359a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800359c:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <SystemInit+0x68>)
 800359e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80035a2:	609a      	str	r2, [r3, #8]
  #endif
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed00 	.word	0xe000ed00
 80035b4:	46020c00 	.word	0x46020c00

080035b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80035b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035f0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80035bc:	f7ff ffc4 	bl	8003548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035c2:	e003      	b.n	80035cc <LoopCopyDataInit>

080035c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80035c4:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80035c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035ca:	3104      	adds	r1, #4

080035cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035cc:	480a      	ldr	r0, [pc, #40]	@ (80035f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80035ce:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80035d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035d4:	d3f6      	bcc.n	80035c4 <CopyDataInit>
	ldr	r2, =_sbss
 80035d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <LoopForever+0x12>)
	b	LoopFillZerobss
 80035d8:	e002      	b.n	80035e0 <LoopFillZerobss>

080035da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035dc:	f842 3b04 	str.w	r3, [r2], #4

080035e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035e0:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <LoopForever+0x16>)
	cmp	r2, r3
 80035e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80035e4:	d3f9      	bcc.n	80035da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035e6:	f00f f82f 	bl	8012648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ea:	f7fd fc97 	bl	8000f1c <main>

080035ee <LoopForever>:

LoopForever:
    b LoopForever
 80035ee:	e7fe      	b.n	80035ee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80035f0:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80035f4:	080128b8 	.word	0x080128b8
	ldr	r0, =_sdata
 80035f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80035fc:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 8003600:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 8003604:	200016ac 	.word	0x200016ac

08003608 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003608:	e7fe      	b.n	8003608 <ADC4_IRQHandler>
	...

0800360c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003610:	4b12      	ldr	r3, [pc, #72]	@ (800365c <HAL_Init+0x50>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a11      	ldr	r2, [pc, #68]	@ (800365c <HAL_Init+0x50>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361c:	2003      	movs	r0, #3
 800361e:	f002 fbac 	bl	8005d7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003622:	f007 ffd3 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 8003626:	4602      	mov	r2, r0
 8003628:	4b0d      	ldr	r3, [pc, #52]	@ (8003660 <HAL_Init+0x54>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	490c      	ldr	r1, [pc, #48]	@ (8003664 <HAL_Init+0x58>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	4a0b      	ldr	r2, [pc, #44]	@ (8003668 <HAL_Init+0x5c>)
 800363a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800363c:	2004      	movs	r0, #4
 800363e:	f002 fbf1 	bl	8005e24 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003642:	200f      	movs	r0, #15
 8003644:	f000 f812 	bl	800366c <HAL_InitTick>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e002      	b.n	8003658 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003652:	f7fe fe23 	bl	800229c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40022000 	.word	0x40022000
 8003660:	46020c00 	.word	0x46020c00
 8003664:	080127a8 	.word	0x080127a8
 8003668:	2000001c 	.word	0x2000001c

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003678:	4b33      	ldr	r3, [pc, #204]	@ (8003748 <HAL_InitTick+0xdc>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e05c      	b.n	800373e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003684:	4b31      	ldr	r3, [pc, #196]	@ (800374c <HAL_InitTick+0xe0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d10c      	bne.n	80036aa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003690:	4b2f      	ldr	r3, [pc, #188]	@ (8003750 <HAL_InitTick+0xe4>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b2c      	ldr	r3, [pc, #176]	@ (8003748 <HAL_InitTick+0xdc>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800369e:	fbb3 f3f1 	udiv	r3, r3, r1
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e037      	b.n	800371a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80036aa:	f002 fc13 	bl	8005ed4 <HAL_SYSTICK_GetCLKSourceConfig>
 80036ae:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d023      	beq.n	80036fe <HAL_InitTick+0x92>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d82d      	bhi.n	8003718 <HAL_InitTick+0xac>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_InitTick+0x5e>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d00d      	beq.n	80036e4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80036c8:	e026      	b.n	8003718 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80036ca:	4b21      	ldr	r3, [pc, #132]	@ (8003750 <HAL_InitTick+0xe4>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003748 <HAL_InitTick+0xdc>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80036d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	60fb      	str	r3, [r7, #12]
        break;
 80036e2:	e01a      	b.n	800371a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80036e4:	4b18      	ldr	r3, [pc, #96]	@ (8003748 <HAL_InitTick+0xdc>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80036f2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	60fb      	str	r3, [r7, #12]
        break;
 80036fc:	e00d      	b.n	800371a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <HAL_InitTick+0xdc>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003708:	fbb3 f3f2 	udiv	r3, r3, r2
 800370c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003710:	fbb2 f3f3 	udiv	r3, r2, r3
 8003714:	60fb      	str	r3, [r7, #12]
        break;
 8003716:	e000      	b.n	800371a <HAL_InitTick+0xae>
        break;
 8003718:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f002 fb60 	bl	8005de0 <HAL_SYSTICK_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e009      	b.n	800373e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372a:	2200      	movs	r2, #0
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	f04f 30ff 	mov.w	r0, #4294967295
 8003732:	f002 fb2d 	bl	8005d90 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003736:	4a07      	ldr	r2, [pc, #28]	@ (8003754 <HAL_InitTick+0xe8>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000024 	.word	0x20000024
 800374c:	e000e010 	.word	0xe000e010
 8003750:	2000001c 	.word	0x2000001c
 8003754:	20000020 	.word	0x20000020

08003758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <HAL_IncTick+0x20>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <HAL_IncTick+0x24>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a04      	ldr	r2, [pc, #16]	@ (800377c <HAL_IncTick+0x24>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000024 	.word	0x20000024
 800377c:	200016a8 	.word	0x200016a8

08003780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return uwTick;
 8003784:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <HAL_GetTick+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	200016a8 	.word	0x200016a8

08003798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff ffee 	bl	8003780 <HAL_GetTick>
 80037a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d005      	beq.n	80037be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037b2:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <HAL_Delay+0x44>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037be:	bf00      	nop
 80037c0:	f7ff ffde 	bl	8003780 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d8f7      	bhi.n	80037c0 <HAL_Delay+0x28>
  {
  }
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000024 	.word	0x20000024

080037e0 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80037ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ec:	f023 0201 	bic.w	r2, r3, #1
 80037f0:	4904      	ldr	r1, [pc, #16]	@ (8003804 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	46000400 	.word	0x46000400

08003808 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8003812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003814:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8003818:	4904      	ldr	r1, [pc, #16]	@ (800382c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4313      	orrs	r3, r2
 800381e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	46000400 	.word	0x46000400

08003830 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	609a      	str	r2, [r3, #8]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	609a      	str	r2, [r3, #8]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	@ (80038d4 <LL_ADC_SetResolution+0x3c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d104      	bne.n	80038b8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f023 020c 	bic.w	r2, r3, #12
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	60da      	str	r2, [r3, #12]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	46021000 	.word	0x46021000

080038d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3360      	adds	r3, #96	@ 0x60
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	430b      	orrs	r3, r1
 8003908:	431a      	orrs	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3360      	adds	r3, #96	@ 0x60
 8003928:	461a      	mov	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003946:	b480      	push	{r7}
 8003948:	b087      	sub	sp, #28
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3360      	adds	r3, #96	@ 0x60
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	431a      	orrs	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	601a      	str	r2, [r3, #0]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3360      	adds	r3, #96	@ 0x60
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b087      	sub	sp, #28
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3360      	adds	r3, #96	@ 0x60
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	601a      	str	r2, [r3, #0]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80039fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	2a00      	cmp	r2, #0
 8003a12:	d002      	beq.n	8003a1a <LL_ADC_SetGainCompensation+0x32>
 8003a14:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003a18:	e000      	b.n	8003a1c <LL_ADC_SetGainCompensation+0x34>
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b085      	sub	sp, #20
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2107      	movs	r1, #7
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	@ 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b50 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d020      	beq.n	8003aea <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3330      	adds	r3, #48	@ 0x30
 8003aac:	461a      	mov	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	0a1b      	lsrs	r3, r3, #8
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	4413      	add	r3, r2
 8003aba:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	211f      	movs	r1, #31
 8003ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	401a      	ands	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0e9b      	lsrs	r3, r3, #26
 8003ad4:	f003 011f 	and.w	r1, r3, #31
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003ae8:	e02b      	b.n	8003b42 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	210f      	movs	r1, #15
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	401a      	ands	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0e9b      	lsrs	r3, r3, #26
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	e010      	b.n	8003b34 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	613b      	str	r3, [r7, #16]
  return result;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e003      	b.n	8003b34 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	f001 011f 	and.w	r1, r1, #31
 8003b3a:	408b      	lsls	r3, r1
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b42:	bf00      	nop
 8003b44:	3724      	adds	r7, #36	@ 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	46021000 	.word	0x46021000

08003b54 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	0e9b      	lsrs	r3, r3, #26
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2201      	movs	r2, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	e015      	b.n	8003ba4 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	60fb      	str	r3, [r7, #12]
  return result;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003b8e:	2320      	movs	r3, #32
 8003b90:	e003      	b.n	8003b9a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	0e9b      	lsrs	r3, r3, #26
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	401a      	ands	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b08b      	sub	sp, #44	@ 0x2c
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf0 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d042      	beq.n	8003cc6 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <LL_ADC_SetChannelSamplingTime+0x28>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	0e9b      	lsrs	r3, r3, #26
 8003c4e:	f003 021f 	and.w	r2, r3, #31
 8003c52:	e011      	b.n	8003c78 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	617b      	str	r3, [r7, #20]
  return result;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	e003      	b.n	8003c76 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	0e5b      	lsrs	r3, r3, #25
 8003c7c:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003c80:	460b      	mov	r3, r1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	1ad2      	subs	r2, r2, r3
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3314      	adds	r3, #20
 8003c96:	461a      	mov	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0e5b      	lsrs	r3, r3, #25
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	4413      	add	r3, r2
 8003ca4:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	2107      	movs	r1, #7
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003cc4:	e00e      	b.n	8003ce4 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	401a      	ands	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	0219      	lsls	r1, r3, #8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	400b      	ands	r3, r1
 8003cda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	615a      	str	r2, [r3, #20]
}
 8003ce4:	bf00      	nop
 8003ce6:	372c      	adds	r7, #44	@ 0x2c
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	46021000 	.word	0x46021000

08003cf4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	401a      	ands	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0318 	and.w	r3, r3, #24
 8003d16:	4908      	ldr	r1, [pc, #32]	@ (8003d38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d18:	40d9      	lsrs	r1, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	400b      	ands	r3, r1
 8003d1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	000fffff 	.word	0x000fffff

08003d3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 031f 	and.w	r3, r3, #31
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003d84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6093      	str	r3, [r2, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dac:	d101      	bne.n	8003db2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003dd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dfc:	d101      	bne.n	8003e02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e24:	f043 0201 	orr.w	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <LL_ADC_IsEnabled+0x18>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <LL_ADC_IsEnabled+0x1a>
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e6e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d101      	bne.n	8003e9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d101      	bne.n	8003ec4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b08b      	sub	sp, #44	@ 0x2c
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e2ce      	b.n	8004492 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a95      	ldr	r2, [pc, #596]	@ (8004158 <HAL_ADC_Init+0x284>)
 8003f02:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fe f9df 	bl	80022d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff37 	bl	8003d98 <LL_ADC_IsDeepPowerDownEnabled>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff1d 	bl	8003d74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff52 	bl	8003de8 <LL_ADC_IsInternalRegulatorEnabled>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d115      	bne.n	8003f76 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ff36 	bl	8003dc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f54:	4b81      	ldr	r3, [pc, #516]	@ (800415c <HAL_ADC_Init+0x288>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	4a81      	ldr	r2, [pc, #516]	@ (8004160 <HAL_ADC_Init+0x28c>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	3301      	adds	r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f68:	e002      	b.n	8003f70 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f9      	bne.n	8003f6a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ff34 	bl	8003de8 <LL_ADC_IsInternalRegulatorEnabled>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10e      	bne.n	8003fa4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f8a:	f043 0210 	orr.w	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff6c 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8003fae:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 825f 	bne.w	800447c <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 825b 	bne.w	800447c <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff ff2c 	bl	8003e38 <LL_ADC_IsEnabled>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d14f      	bne.n	8004086 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a5b      	ldr	r2, [pc, #364]	@ (8004158 <HAL_ADC_Init+0x284>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d037      	beq.n	8004060 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a5b      	ldr	r2, [pc, #364]	@ (8004164 <HAL_ADC_Init+0x290>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_ADC_Init+0x130>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a5a      	ldr	r2, [pc, #360]	@ (8004168 <HAL_ADC_Init+0x294>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10e      	bne.n	8004022 <HAL_ADC_Init+0x14e>
 8004004:	4857      	ldr	r0, [pc, #348]	@ (8004164 <HAL_ADC_Init+0x290>)
 8004006:	f7ff ff17 	bl	8003e38 <LL_ADC_IsEnabled>
 800400a:	4604      	mov	r4, r0
 800400c:	4856      	ldr	r0, [pc, #344]	@ (8004168 <HAL_ADC_Init+0x294>)
 800400e:	f7ff ff13 	bl	8003e38 <LL_ADC_IsEnabled>
 8004012:	4603      	mov	r3, r0
 8004014:	4323      	orrs	r3, r4
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	e008      	b.n	8004034 <HAL_ADC_Init+0x160>
 8004022:	484d      	ldr	r0, [pc, #308]	@ (8004158 <HAL_ADC_Init+0x284>)
 8004024:	f7ff ff08 	bl	8003e38 <LL_ADC_IsEnabled>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d026      	beq.n	8004086 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a49      	ldr	r2, [pc, #292]	@ (8004164 <HAL_ADC_Init+0x290>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_ADC_Init+0x178>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a48      	ldr	r2, [pc, #288]	@ (8004168 <HAL_ADC_Init+0x294>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_ADC_Init+0x17c>
 800404c:	4a47      	ldr	r2, [pc, #284]	@ (800416c <HAL_ADC_Init+0x298>)
 800404e:	e000      	b.n	8004052 <HAL_ADC_Init+0x17e>
 8004050:	4a47      	ldr	r2, [pc, #284]	@ (8004170 <HAL_ADC_Init+0x29c>)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f7ff fbe9 	bl	8003830 <LL_ADC_SetCommonClock>
 800405e:	e012      	b.n	8004086 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f7ff fc14 	bl	8003898 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8004070:	4b3f      	ldr	r3, [pc, #252]	@ (8004170 <HAL_ADC_Init+0x29c>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004080:	493b      	ldr	r1, [pc, #236]	@ (8004170 <HAL_ADC_Init+0x29c>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a33      	ldr	r2, [pc, #204]	@ (8004158 <HAL_ADC_Init+0x284>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d010      	beq.n	80040b2 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004096:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800409c:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80040a2:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80040aa:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80040ac:	4313      	orrs	r3, r2
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	e035      	b.n	800411e <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	7f1b      	ldrb	r3, [r3, #28]
 80040b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040be:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040c0:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80040c6:	2a00      	cmp	r2, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_ADC_Init+0x1fc>
 80040ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040ce:	e000      	b.n	80040d2 <HAL_ADC_Init+0x1fe>
 80040d0:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040d2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80040d8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	da04      	bge.n	80040ec <HAL_ADC_Init+0x218>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ea:	e001      	b.n	80040f0 <HAL_ADC_Init+0x21c>
 80040ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80040f0:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	491b      	ldr	r1, [pc, #108]	@ (8004164 <HAL_ADC_Init+0x290>)
 80040f8:	428b      	cmp	r3, r1
 80040fa:	d004      	beq.n	8004106 <HAL_ADC_Init+0x232>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4919      	ldr	r1, [pc, #100]	@ (8004168 <HAL_ADC_Init+0x294>)
 8004102:	428b      	cmp	r3, r1
 8004104:	d103      	bne.n	800410e <HAL_ADC_Init+0x23a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800410c:	e003      	b.n	8004116 <HAL_ADC_Init+0x242>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004114:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8004116:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	4313      	orrs	r3, r2
 800411c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d131      	bne.n	800418c <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0a      	ldr	r2, [pc, #40]	@ (8004158 <HAL_ADC_Init+0x284>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	3b01      	subs	r3, #1
 8004138:	045b      	lsls	r3, r3, #17
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	4313      	orrs	r3, r2
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	e024      	b.n	800418c <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	d113      	bne.n	8004174 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004152:	623b      	str	r3, [r7, #32]
 8004154:	e01a      	b.n	800418c <HAL_ADC_Init+0x2b8>
 8004156:	bf00      	nop
 8004158:	46021000 	.word	0x46021000
 800415c:	2000001c 	.word	0x2000001c
 8004160:	053e2d63 	.word	0x053e2d63
 8004164:	42028000 	.word	0x42028000
 8004168:	42028100 	.word	0x42028100
 800416c:	42028300 	.word	0x42028300
 8004170:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a75      	ldr	r2, [pc, #468]	@ (8004368 <HAL_ADC_Init+0x494>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	4313      	orrs	r3, r2
 80041ac:	6a3a      	ldr	r2, [r7, #32]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	4b6c      	ldr	r3, [pc, #432]	@ (800436c <HAL_ADC_Init+0x498>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	60d3      	str	r3, [r2, #12]
 80041c6:	e031      	b.n	800422c <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041dc:	4313      	orrs	r3, r2
 80041de:	6a3a      	ldr	r2, [r7, #32]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	4b61      	ldr	r3, [pc, #388]	@ (8004370 <HAL_ADC_Init+0x49c>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	6a39      	ldr	r1, [r7, #32]
 80041f4:	430b      	orrs	r3, r1
 80041f6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1a      	ldr	r2, [r3, #32]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a4d      	ldr	r2, [pc, #308]	@ (8004368 <HAL_ADC_Init+0x494>)
 8004232:	4293      	cmp	r3, r2
 8004234:	f000 80a4 	beq.w	8004380 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fe22 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8004242:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fe2f 	bl	8003eac <LL_ADC_INJ_IsConversionOngoing>
 800424e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d166      	bne.n	8004324 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d163      	bne.n	8004324 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7f1b      	ldrb	r3, [r3, #28]
 8004260:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4943      	ldr	r1, [pc, #268]	@ (8004374 <HAL_ADC_Init+0x4a0>)
 8004268:	428b      	cmp	r3, r1
 800426a:	d004      	beq.n	8004276 <HAL_ADC_Init+0x3a2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4941      	ldr	r1, [pc, #260]	@ (8004378 <HAL_ADC_Init+0x4a4>)
 8004272:	428b      	cmp	r3, r1
 8004274:	d102      	bne.n	800427c <HAL_ADC_Init+0x3a8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	e002      	b.n	8004282 <HAL_ADC_Init+0x3ae>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004280:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004282:	4313      	orrs	r3, r2
 8004284:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004290:	f023 0303 	bic.w	r3, r3, #3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	430b      	orrs	r3, r1
 800429c:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7ff fb99 	bl	80039e8 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d11e      	bne.n	80042fe <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c4:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <HAL_ADC_Init+0x4a8>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80042d4:	0411      	lsls	r1, r2, #16
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80042e0:	4311      	orrs	r1, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80042e6:	4311      	orrs	r1, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042ec:	0892      	lsrs	r2, r2, #2
 80042ee:	430a      	orrs	r2, r1
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	611a      	str	r2, [r3, #16]
 80042fc:	e007      	b.n	800430e <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d10c      	bne.n	8004346 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	f023 010f 	bic.w	r1, r3, #15
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433a:	1e5a      	subs	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
 8004344:	e007      	b.n	8004356 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 020f 	bic.w	r2, r2, #15
 8004354:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	f043 0201 	orr.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004366:	e092      	b.n	800448e <HAL_ADC_Init+0x5ba>
 8004368:	46021000 	.word	0x46021000
 800436c:	fff0c013 	.word	0xfff0c013
 8004370:	ffde800d 	.word	0xffde800d
 8004374:	42028000 	.word	0x42028000
 8004378:	42028100 	.word	0x42028100
 800437c:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004386:	2b01      	cmp	r3, #1
 8004388:	d111      	bne.n	80043ae <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8004392:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8004398:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800439e:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	4b39      	ldr	r3, [pc, #228]	@ (800449c <HAL_ADC_Init+0x5c8>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	69f9      	ldr	r1, [r7, #28]
 80043be:	430b      	orrs	r3, r1
 80043c0:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ca:	461a      	mov	r2, r3
 80043cc:	2100      	movs	r1, #0
 80043ce:	f7ff fb2e 	bl	8003a2e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043da:	461a      	mov	r2, r3
 80043dc:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80043e0:	f7ff fb25 	bl	8003a2e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d108      	bne.n	80043fe <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f062 020f 	orn	r2, r2, #15
 80043fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80043fc:	e018      	b.n	8004430 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004406:	d113      	bne.n	8004430 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	3b01      	subs	r3, #1
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	f003 031c 	and.w	r3, r3, #28
 800441a:	f06f 020f 	mvn.w	r2, #15
 800441e:	fa02 f103 	lsl.w	r1, r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	4b1a      	ldr	r3, [pc, #104]	@ (80044a0 <HAL_ADC_Init+0x5cc>)
 8004438:	4013      	ands	r3, r2
 800443a:	6a3a      	ldr	r2, [r7, #32]
 800443c:	429a      	cmp	r2, r3
 800443e:	d10b      	bne.n	8004458 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004456:	e01a      	b.n	800448e <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800445c:	f023 0312 	bic.w	r3, r3, #18
 8004460:	f043 0210 	orr.w	r2, r3, #16
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800446c:	f043 0201 	orr.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800447a:	e008      	b.n	800448e <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004480:	f043 0210 	orr.w	r2, r3, #16
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800448e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004492:	4618      	mov	r0, r3
 8004494:	372c      	adds	r7, #44	@ 0x2c
 8004496:	46bd      	mov	sp, r7
 8004498:	bd90      	pop	{r4, r7, pc}
 800449a:	bf00      	nop
 800449c:	f7fffc02 	.word	0xf7fffc02
 80044a0:	833ffff3 	.word	0x833ffff3

080044a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b0a2      	sub	sp, #136	@ 0x88
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a98      	ldr	r2, [pc, #608]	@ (8004718 <HAL_ADC_Start_DMA+0x274>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_ADC_Start_DMA+0x20>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a97      	ldr	r2, [pc, #604]	@ (800471c <HAL_ADC_Start_DMA+0x278>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_ADC_Start_DMA+0x24>
 80044c4:	4b96      	ldr	r3, [pc, #600]	@ (8004720 <HAL_ADC_Start_DMA+0x27c>)
 80044c6:	e000      	b.n	80044ca <HAL_ADC_Start_DMA+0x26>
 80044c8:	4b96      	ldr	r3, [pc, #600]	@ (8004724 <HAL_ADC_Start_DMA+0x280>)
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fc36 	bl	8003d3c <LL_ADC_GetMultimode>
 80044d0:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fcd5 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 8111 	bne.w	8004706 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_ADC_Start_DMA+0x4e>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e10e      	b.n	8004710 <HAL_ADC_Start_DMA+0x26c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004500:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004502:	2b05      	cmp	r3, #5
 8004504:	d003      	beq.n	800450e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004508:	2b09      	cmp	r3, #9
 800450a:	f040 80f4 	bne.w	80046f6 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f001 fa2c 	bl	800596c <ADC_Enable>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800451a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800451e:	2b00      	cmp	r3, #0
 8004520:	f040 80e4 	bne.w	80046ec <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004528:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a7a      	ldr	r2, [pc, #488]	@ (8004728 <HAL_ADC_Start_DMA+0x284>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d026      	beq.n	8004590 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a75      	ldr	r2, [pc, #468]	@ (800471c <HAL_ADC_Start_DMA+0x278>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d002      	beq.n	8004552 <HAL_ADC_Start_DMA+0xae>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	e000      	b.n	8004554 <HAL_ADC_Start_DMA+0xb0>
 8004552:	4b71      	ldr	r3, [pc, #452]	@ (8004718 <HAL_ADC_Start_DMA+0x274>)
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	4293      	cmp	r3, r2
 800455a:	d002      	beq.n	8004562 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800455c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d105      	bne.n	800456e <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004566:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d006      	beq.n	8004588 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800457e:	f023 0206 	bic.w	r2, r3, #6
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004586:	e006      	b.n	8004596 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800458e:	e002      	b.n	8004596 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	4a64      	ldr	r2, [pc, #400]	@ (800472c <HAL_ADC_Start_DMA+0x288>)
 800459c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a2:	4a63      	ldr	r2, [pc, #396]	@ (8004730 <HAL_ADC_Start_DMA+0x28c>)
 80045a4:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	4a62      	ldr	r2, [pc, #392]	@ (8004734 <HAL_ADC_Start_DMA+0x290>)
 80045ac:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	221c      	movs	r2, #28
 80045b4:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0210 	orr.w	r2, r2, #16
 80045cc:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a55      	ldr	r2, [pc, #340]	@ (8004728 <HAL_ADC_Start_DMA+0x284>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d107      	bne.n	80045e8 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d04f      	beq.n	8004696 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d046      	beq.n	800468e <HAL_ADC_Start_DMA+0x1ea>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d040      	beq.n	800468e <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	f107 0310 	add.w	r3, r7, #16
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f002 fdfc 	bl	8007218 <HAL_DMAEx_List_GetNodeConfig>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e072      	b.n	8004710 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462c:	2b02      	cmp	r3, #2
 800462e:	d104      	bne.n	800463a <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004638:	e00a      	b.n	8004650 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800463a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463c:	2b01      	cmp	r3, #1
 800463e:	d104      	bne.n	800464a <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004648:	e002      	b.n	8004650 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800465c:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	4618      	mov	r0, r3
 8004682:	f002 fd1f 	bl	80070c4 <HAL_DMAEx_List_Start_IT>
 8004686:	4603      	mov	r3, r0
 8004688:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800468c:	e028      	b.n	80046e0 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004694:	e024      	b.n	80046e0 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d104      	bne.n	80046aa <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046a8:	e00c      	b.n	80046c4 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d104      	bne.n	80046be <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046bc:	e002      	b.n	80046c4 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3340      	adds	r3, #64	@ 0x40
 80046ce:	4619      	mov	r1, r3
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046d6:	f001 fd63 	bl	80061a0 <HAL_DMA_Start_IT>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fbba 	bl	8003e5e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80046ea:	e00f      	b.n	800470c <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 80046f4:	e00a      	b.n	800470c <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8004704:	e002      	b.n	800470c <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004706:	2302      	movs	r3, #2
 8004708:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 800470c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004710:	4618      	mov	r0, r3
 8004712:	3788      	adds	r7, #136	@ 0x88
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	42028000 	.word	0x42028000
 800471c:	42028100 	.word	0x42028100
 8004720:	42028300 	.word	0x42028300
 8004724:	46021300 	.word	0x46021300
 8004728:	46021000 	.word	0x46021000
 800472c:	08005aa1 	.word	0x08005aa1
 8004730:	08005b7f 	.word	0x08005b7f
 8004734:	08005b9b 	.word	0x08005b9b

08004738 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	@ 0x28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004740:	2300      	movs	r3, #0
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a77      	ldr	r2, [pc, #476]	@ (8004938 <HAL_ADC_IRQHandler+0x200>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_ADC_IRQHandler+0x30>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a76      	ldr	r2, [pc, #472]	@ (800493c <HAL_ADC_IRQHandler+0x204>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_ADC_IRQHandler+0x34>
 8004768:	4b75      	ldr	r3, [pc, #468]	@ (8004940 <HAL_ADC_IRQHandler+0x208>)
 800476a:	e000      	b.n	800476e <HAL_ADC_IRQHandler+0x36>
 800476c:	4b75      	ldr	r3, [pc, #468]	@ (8004944 <HAL_ADC_IRQHandler+0x20c>)
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fae4 	bl	8003d3c <LL_ADC_GetMultimode>
 8004774:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d017      	beq.n	80047b0 <HAL_ADC_IRQHandler+0x78>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d012      	beq.n	80047b0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800479a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f001 fa31 	bl	8005c0a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2202      	movs	r2, #2
 80047ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <HAL_ADC_IRQHandler+0x8c>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80d1 	beq.w	8004972 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80cb 	beq.w	8004972 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d105      	bne.n	80047f4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a53      	ldr	r2, [pc, #332]	@ (8004948 <HAL_ADC_IRQHandler+0x210>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d06c      	beq.n	80048d8 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff f932 	bl	8003a6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80aa 	beq.w	8004964 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a49      	ldr	r2, [pc, #292]	@ (800493c <HAL_ADC_IRQHandler+0x204>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d002      	beq.n	8004820 <HAL_ADC_IRQHandler+0xe8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	e000      	b.n	8004822 <HAL_ADC_IRQHandler+0xea>
 8004820:	4b45      	ldr	r3, [pc, #276]	@ (8004938 <HAL_ADC_IRQHandler+0x200>)
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	4293      	cmp	r3, r2
 8004828:	d008      	beq.n	800483c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d002      	beq.n	800483c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b09      	cmp	r3, #9
 800483a:	d104      	bne.n	8004846 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	623b      	str	r3, [r7, #32]
 8004844:	e00c      	b.n	8004860 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3c      	ldr	r2, [pc, #240]	@ (800493c <HAL_ADC_IRQHandler+0x204>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d002      	beq.n	8004856 <HAL_ADC_IRQHandler+0x11e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	e000      	b.n	8004858 <HAL_ADC_IRQHandler+0x120>
 8004856:	4b38      	ldr	r3, [pc, #224]	@ (8004938 <HAL_ADC_IRQHandler+0x200>)
 8004858:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d17c      	bne.n	8004964 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d175      	bne.n	8004964 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fb02 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d11a      	bne.n	80048be <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 020c 	bic.w	r2, r2, #12
 8004896:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800489c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d159      	bne.n	8004964 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048b4:	f043 0201 	orr.w	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	679a      	str	r2, [r3, #120]	@ 0x78
 80048bc:	e052      	b.n	8004964 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048c2:	f043 0210 	orr.w	r2, r3, #16
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048ce:	f043 0201 	orr.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80048d6:	e045      	b.n	8004964 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff f8c5 	bl	8003a6c <LL_ADC_REG_IsTriggerSourceSWStart>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d03d      	beq.n	8004964 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d138      	bne.n	8004964 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d131      	bne.n	8004964 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fabe 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11d      	bne.n	800494c <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 020c 	bic.w	r2, r2, #12
 800491e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	f043 0201 	orr.w	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	679a      	str	r2, [r3, #120]	@ 0x78
 8004934:	e016      	b.n	8004964 <HAL_ADC_IRQHandler+0x22c>
 8004936:	bf00      	nop
 8004938:	42028000 	.word	0x42028000
 800493c:	42028100 	.word	0x42028100
 8004940:	42028300 	.word	0x42028300
 8004944:	46021300 	.word	0x46021300
 8004948:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800495c:	f043 0201 	orr.w	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f99d 	bl	8004ca4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	220c      	movs	r2, #12
 8004970:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a8c      	ldr	r2, [pc, #560]	@ (8004ba8 <HAL_ADC_IRQHandler+0x470>)
 8004978:	4293      	cmp	r3, r2
 800497a:	f000 8095 	beq.w	8004aa8 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <HAL_ADC_IRQHandler+0x25a>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8085 	beq.w	8004aa8 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d07f      	beq.n	8004aa8 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff f91e 	bl	8003c06 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80049ca:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff f84b 	bl	8003a6c <LL_ADC_REG_IsTriggerSourceSWStart>
 80049d6:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a73      	ldr	r2, [pc, #460]	@ (8004bac <HAL_ADC_IRQHandler+0x474>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d002      	beq.n	80049e8 <HAL_ADC_IRQHandler+0x2b0>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	e000      	b.n	80049ea <HAL_ADC_IRQHandler+0x2b2>
 80049e8:	4b71      	ldr	r3, [pc, #452]	@ (8004bb0 <HAL_ADC_IRQHandler+0x478>)
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6812      	ldr	r2, [r2, #0]
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d008      	beq.n	8004a04 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d002      	beq.n	8004a04 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b07      	cmp	r3, #7
 8004a02:	d104      	bne.n	8004a0e <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	623b      	str	r3, [r7, #32]
 8004a0c:	e00c      	b.n	8004a28 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a66      	ldr	r2, [pc, #408]	@ (8004bac <HAL_ADC_IRQHandler+0x474>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d002      	beq.n	8004a1e <HAL_ADC_IRQHandler+0x2e6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	e000      	b.n	8004a20 <HAL_ADC_IRQHandler+0x2e8>
 8004a1e:	4b64      	ldr	r3, [pc, #400]	@ (8004bb0 <HAL_ADC_IRQHandler+0x478>)
 8004a20:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d035      	beq.n	8004a9a <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_ADC_IRQHandler+0x310>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d02d      	beq.n	8004a9a <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d128      	bne.n	8004a9a <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b40      	cmp	r3, #64	@ 0x40
 8004a54:	d121      	bne.n	8004a9a <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fa26 	bl	8003eac <LL_ADC_INJ_IsConversionOngoing>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d119      	bne.n	8004a9a <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a74:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d105      	bne.n	8004a9a <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 f897 	bl	8005bce <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2260      	movs	r2, #96	@ 0x60
 8004aa6:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d011      	beq.n	8004ad6 <HAL_ADC_IRQHandler+0x39e>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00c      	beq.n	8004ad6 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ac0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8ff 	bl	8004ccc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2280      	movs	r2, #128	@ 0x80
 8004ad4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d012      	beq.n	8004b06 <HAL_ADC_IRQHandler+0x3ce>
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 f873 	bl	8005be2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d012      	beq.n	8004b36 <HAL_ADC_IRQHandler+0x3fe>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f001 f865 	bl	8005bf6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05d      	beq.n	8004bfc <HAL_ADC_IRQHandler+0x4c4>
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d058      	beq.n	8004bfc <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8004b52:	2301      	movs	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b56:	e03b      	b.n	8004bd0 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a12      	ldr	r2, [pc, #72]	@ (8004ba8 <HAL_ADC_IRQHandler+0x470>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d02c      	beq.n	8004bbc <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d015      	beq.n	8004b94 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a10      	ldr	r2, [pc, #64]	@ (8004bb0 <HAL_ADC_IRQHandler+0x478>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_ADC_IRQHandler+0x444>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a0d      	ldr	r2, [pc, #52]	@ (8004bac <HAL_ADC_IRQHandler+0x474>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <HAL_ADC_IRQHandler+0x448>
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <HAL_ADC_IRQHandler+0x47c>)
 8004b7e:	e000      	b.n	8004b82 <HAL_ADC_IRQHandler+0x44a>
 8004b80:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <HAL_ADC_IRQHandler+0x480>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff f8e8 	bl	8003d58 <LL_ADC_GetMultiDMATransfer>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d020      	beq.n	8004bd0 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b92:	e01d      	b.n	8004bd0 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d016      	beq.n	8004bd0 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba6:	e013      	b.n	8004bd0 <HAL_ADC_IRQHandler+0x498>
 8004ba8:	46021000 	.word	0x46021000
 8004bac:	42028100 	.word	0x42028100
 8004bb0:	42028000 	.word	0x42028000
 8004bb4:	42028300 	.word	0x42028300
 8004bb8:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff f812 	bl	8003bea <LL_ADC_REG_GetDMATransfer>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bda:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004be6:	f043 0202 	orr.w	r2, r3, #2
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f876 	bl	8004ce0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2210      	movs	r2, #16
 8004bfa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01b      	beq.n	8004c3e <HAL_ADC_IRQHandler+0x506>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d016      	beq.n	8004c3e <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c20:	f043 0201 	orr.w	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f877 	bl	8004d1c <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <HAL_ADC_IRQHandler+0x568>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d126      	bne.n	8004c96 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <HAL_ADC_IRQHandler+0x534>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f849 	bl	8004cf4 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c6a:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00f      	beq.n	8004c96 <HAL_ADC_IRQHandler+0x55e>
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f841 	bl	8004d08 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c94:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004c96:	bf00      	nop
 8004c98:	3728      	adds	r7, #40	@ 0x28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	46021000 	.word	0x46021000

08004ca4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b0b7      	sub	sp, #220	@ 0xdc
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4aa8      	ldr	r2, [pc, #672]	@ (8004fec <HAL_ADC_ConfigChannel+0x2bc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d103      	bne.n	8004d56 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d102      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x36>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f000 bdfe 	b.w	8005962 <HAL_ADC_ConfigChannel+0xc32>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff f887 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 85c1 	bne.w	8005902 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a99      	ldr	r2, [pc, #612]	@ (8004fec <HAL_ADC_ConfigChannel+0x2bc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	f000 8409 	beq.w	800559e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d108      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x7a>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	0e9b      	lsrs	r3, r3, #26
 8004d9e:	f003 031f 	and.w	r3, r3, #31
 8004da2:	2201      	movs	r2, #1
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	e01d      	b.n	8004de6 <HAL_ADC_ConfigChannel+0xb6>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004dce:	2320      	movs	r3, #32
 8004dd0:	e004      	b.n	8004ddc <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004dd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	2201      	movs	r2, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	69d1      	ldr	r1, [r2, #28]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	430b      	orrs	r3, r1
 8004df2:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	6859      	ldr	r1, [r3, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	f7fe fe47 	bl	8003a94 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff f83b 	bl	8003e86 <LL_ADC_REG_IsConversionOngoing>
 8004e10:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff f847 	bl	8003eac <LL_ADC_INJ_IsConversionOngoing>
 8004e1e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 81df 	bne.w	80051ea <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 81da 	bne.w	80051ea <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	461a      	mov	r2, r3
 8004e44:	f7fe fef2 	bl	8003c2c <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d046      	beq.n	8004ef8 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6919      	ldr	r1, [r3, #16]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e7a:	f7fe fd2d 	bl	80038d8 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6919      	ldr	r1, [r3, #16]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f7fe fd5b 	bl	8003946 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	7e9b      	ldrb	r3, [r3, #26]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d11e      	bne.n	8004ed6 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <HAL_ADC_ConfigChannel+0x17e>
 8004ea8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eac:	e000      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x180>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f7fe fd7e 	bl	80039b2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x19c>
 8004ec6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004eca:	e000      	b.n	8004ece <HAL_ADC_ConfigChannel+0x19e>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f7fe fd54 	bl	800397c <LL_ADC_SetOffsetSignedSaturation>
 8004ed4:	e189      	b.n	80051ea <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f7fe fd66 	bl	80039b2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f7fe fd43 	bl	800397c <LL_ADC_SetOffsetSignedSaturation>
 8004ef6:	e178      	b.n	80051ea <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fd0b 	bl	800391a <LL_ADC_GetOffsetChannel>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x1f4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fd00 	bl	800391a <LL_ADC_GetOffsetChannel>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	0e9b      	lsrs	r3, r3, #26
 8004f1e:	f003 021f 	and.w	r2, r3, #31
 8004f22:	e01e      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x232>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fcf5 	bl	800391a <LL_ADC_GetOffsetChannel>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f3a:	fa93 f3a3 	rbit	r3, r3
 8004f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004f4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004f52:	2320      	movs	r3, #32
 8004f54:	e004      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004f56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004f5a:	fab3 f383 	clz	r3, r3
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d105      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x24a>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	0e9b      	lsrs	r3, r3, #26
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	e018      	b.n	8004fac <HAL_ADC_ConfigChannel+0x27c>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004f96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004f9e:	2320      	movs	r3, #32
 8004fa0:	e004      	b.n	8004fac <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fa6:	fab3 f383 	clz	r3, r3
 8004faa:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f7fe fc8c 	bl	80038d8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fca7 	bl	800391a <LL_ADC_GetOffsetChannel>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x2c0>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2101      	movs	r1, #1
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe fc9c 	bl	800391a <LL_ADC_GetOffsetChannel>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	0e9b      	lsrs	r3, r3, #26
 8004fe6:	f003 021f 	and.w	r2, r3, #31
 8004fea:	e020      	b.n	800502e <HAL_ADC_ConfigChannel+0x2fe>
 8004fec:	46021000 	.word	0x46021000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fc8f 	bl	800391a <LL_ADC_GetOffsetChannel>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005006:	fa93 f3a3 	rbit	r3, r3
 800500a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800500e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005012:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005016:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800501e:	2320      	movs	r3, #32
 8005020:	e004      	b.n	800502c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8005022:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005026:	fab3 f383 	clz	r3, r3
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x316>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	0e9b      	lsrs	r3, r3, #26
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	e018      	b.n	8005078 <HAL_ADC_ConfigChannel+0x348>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005052:	fa93 f3a3 	rbit	r3, r3
 8005056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800505a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800505e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800506a:	2320      	movs	r3, #32
 800506c:	e004      	b.n	8005078 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800506e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005078:	429a      	cmp	r2, r3
 800507a:	d107      	bne.n	800508c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	2300      	movs	r3, #0
 8005086:	2101      	movs	r1, #1
 8005088:	f7fe fc26 	bl	80038d8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2102      	movs	r1, #2
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe fc41 	bl	800391a <LL_ADC_GetOffsetChannel>
 8005098:	4603      	mov	r3, r0
 800509a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x388>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2102      	movs	r1, #2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fc36 	bl	800391a <LL_ADC_GetOffsetChannel>
 80050ae:	4603      	mov	r3, r0
 80050b0:	0e9b      	lsrs	r3, r3, #26
 80050b2:	f003 021f 	and.w	r2, r3, #31
 80050b6:	e01a      	b.n	80050ee <HAL_ADC_ConfigChannel+0x3be>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2102      	movs	r1, #2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fc2b 	bl	800391a <LL_ADC_GetOffsetChannel>
 80050c4:	4603      	mov	r3, r0
 80050c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050ca:	fa93 f3a3 	rbit	r3, r3
 80050ce:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80050d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80050d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80050de:	2320      	movs	r3, #32
 80050e0:	e004      	b.n	80050ec <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80050e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x3d6>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	0e9b      	lsrs	r3, r3, #26
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	e011      	b.n	800512a <HAL_ADC_ConfigChannel+0x3fa>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800510e:	fa93 f3a3 	rbit	r3, r3
 8005112:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005116:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800511e:	2320      	movs	r3, #32
 8005120:	e003      	b.n	800512a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8005122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005124:	fab3 f383 	clz	r3, r3
 8005128:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800512a:	429a      	cmp	r2, r3
 800512c:	d107      	bne.n	800513e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	2300      	movs	r3, #0
 8005138:	2102      	movs	r1, #2
 800513a:	f7fe fbcd 	bl	80038d8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2103      	movs	r1, #3
 8005144:	4618      	mov	r0, r3
 8005146:	f7fe fbe8 	bl	800391a <LL_ADC_GetOffsetChannel>
 800514a:	4603      	mov	r3, r0
 800514c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <HAL_ADC_ConfigChannel+0x43a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2103      	movs	r1, #3
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe fbdd 	bl	800391a <LL_ADC_GetOffsetChannel>
 8005160:	4603      	mov	r3, r0
 8005162:	0e9b      	lsrs	r3, r3, #26
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	e017      	b.n	800519a <HAL_ADC_ConfigChannel+0x46a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2103      	movs	r1, #3
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fbd2 	bl	800391a <LL_ADC_GetOffsetChannel>
 8005176:	4603      	mov	r3, r0
 8005178:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005184:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 800518c:	2320      	movs	r3, #32
 800518e:	e003      	b.n	8005198 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8005190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005192:	fab3 f383 	clz	r3, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x482>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	0e9b      	lsrs	r3, r3, #26
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	e011      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x4a6>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80051c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80051c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80051ca:	2320      	movs	r3, #32
 80051cc:	e003      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80051ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051d0:	fab3 f383 	clz	r3, r3
 80051d4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d107      	bne.n	80051ea <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	2300      	movs	r3, #0
 80051e4:	2103      	movs	r1, #3
 80051e6:	f7fe fb77 	bl	80038d8 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fe22 	bl	8003e38 <LL_ADC_IsEnabled>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f040 83ad 	bne.w	8005956 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	461a      	mov	r2, r3
 800520a:	f7fe fd73 	bl	8003cf4 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005216:	f040 80d6 	bne.w	80053c6 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10b      	bne.n	800523e <HAL_ADC_ConfigChannel+0x50e>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	0e9b      	lsrs	r3, r3, #26
 800522c:	3301      	adds	r3, #1
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	2b09      	cmp	r3, #9
 8005234:	bf94      	ite	ls
 8005236:	2301      	movls	r3, #1
 8005238:	2300      	movhi	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e019      	b.n	8005272 <HAL_ADC_ConfigChannel+0x542>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005246:	fa93 f3a3 	rbit	r3, r3
 800524a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800524c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800524e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005256:	2320      	movs	r3, #32
 8005258:	e003      	b.n	8005262 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800525a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800525c:	fab3 f383 	clz	r3, r3
 8005260:	b2db      	uxtb	r3, r3
 8005262:	3301      	adds	r3, #1
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	2b09      	cmp	r3, #9
 800526a:	bf94      	ite	ls
 800526c:	2301      	movls	r3, #1
 800526e:	2300      	movhi	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04d      	beq.n	8005312 <HAL_ADC_ConfigChannel+0x5e2>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d107      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x562>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	0e9b      	lsrs	r3, r3, #26
 8005288:	3301      	adds	r3, #1
 800528a:	069b      	lsls	r3, r3, #26
 800528c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005290:	e015      	b.n	80052be <HAL_ADC_ConfigChannel+0x58e>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800529a:	fa93 f3a3 	rbit	r3, r3
 800529e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80052a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80052a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80052aa:	2320      	movs	r3, #32
 80052ac:	e003      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80052ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b0:	fab3 f383 	clz	r3, r3
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	3301      	adds	r3, #1
 80052b8:	069b      	lsls	r3, r3, #26
 80052ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <HAL_ADC_ConfigChannel+0x5ae>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	0e9b      	lsrs	r3, r3, #26
 80052d0:	3301      	adds	r3, #1
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	2101      	movs	r1, #1
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	e017      	b.n	800530e <HAL_ADC_ConfigChannel+0x5de>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e6:	fa93 f3a3 	rbit	r3, r3
 80052ea:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80052ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80052f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80052f6:	2320      	movs	r3, #32
 80052f8:	e003      	b.n	8005302 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80052fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fc:	fab3 f383 	clz	r3, r3
 8005300:	b2db      	uxtb	r3, r3
 8005302:	3301      	adds	r3, #1
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2101      	movs	r1, #1
 800530a:	fa01 f303 	lsl.w	r3, r1, r3
 800530e:	4313      	orrs	r3, r2
 8005310:	e04e      	b.n	80053b0 <HAL_ADC_ConfigChannel+0x680>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d107      	bne.n	800532e <HAL_ADC_ConfigChannel+0x5fe>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	0e9b      	lsrs	r3, r3, #26
 8005324:	3301      	adds	r3, #1
 8005326:	069b      	lsls	r3, r3, #26
 8005328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800532c:	e015      	b.n	800535a <HAL_ADC_ConfigChannel+0x62a>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8005346:	2320      	movs	r3, #32
 8005348:	e003      	b.n	8005352 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534c:	fab3 f383 	clz	r3, r3
 8005350:	b2db      	uxtb	r3, r3
 8005352:	3301      	adds	r3, #1
 8005354:	069b      	lsls	r3, r3, #26
 8005356:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_ADC_ConfigChannel+0x64a>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	0e9b      	lsrs	r3, r3, #26
 800536c:	3301      	adds	r3, #1
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	2101      	movs	r1, #1
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	e017      	b.n	80053aa <HAL_ADC_ConfigChannel+0x67a>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	61bb      	str	r3, [r7, #24]
  return result;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8005392:	2320      	movs	r3, #32
 8005394:	e003      	b.n	800539e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	fab3 f383 	clz	r3, r3
 800539c:	b2db      	uxtb	r3, r3
 800539e:	3301      	adds	r3, #1
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	2101      	movs	r1, #1
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	461a      	mov	r2, r3
 80053be:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80053c2:	f7fe fc33 	bl	8003c2c <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f280 82c3 	bge.w	8005956 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a92      	ldr	r2, [pc, #584]	@ (8005620 <HAL_ADC_ConfigChannel+0x8f0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_ADC_ConfigChannel+0x6b4>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a91      	ldr	r2, [pc, #580]	@ (8005624 <HAL_ADC_ConfigChannel+0x8f4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d101      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x6b8>
 80053e4:	4b90      	ldr	r3, [pc, #576]	@ (8005628 <HAL_ADC_ConfigChannel+0x8f8>)
 80053e6:	e000      	b.n	80053ea <HAL_ADC_ConfigChannel+0x6ba>
 80053e8:	4b90      	ldr	r3, [pc, #576]	@ (800562c <HAL_ADC_ConfigChannel+0x8fc>)
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fa46 	bl	800387c <LL_ADC_GetCommonPathInternalCh>
 80053f0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a89      	ldr	r2, [pc, #548]	@ (8005620 <HAL_ADC_ConfigChannel+0x8f0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_ADC_ConfigChannel+0x6d8>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a88      	ldr	r2, [pc, #544]	@ (8005624 <HAL_ADC_ConfigChannel+0x8f4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d10e      	bne.n	8005426 <HAL_ADC_ConfigChannel+0x6f6>
 8005408:	4885      	ldr	r0, [pc, #532]	@ (8005620 <HAL_ADC_ConfigChannel+0x8f0>)
 800540a:	f7fe fd15 	bl	8003e38 <LL_ADC_IsEnabled>
 800540e:	4604      	mov	r4, r0
 8005410:	4884      	ldr	r0, [pc, #528]	@ (8005624 <HAL_ADC_ConfigChannel+0x8f4>)
 8005412:	f7fe fd11 	bl	8003e38 <LL_ADC_IsEnabled>
 8005416:	4603      	mov	r3, r0
 8005418:	4323      	orrs	r3, r4
 800541a:	2b00      	cmp	r3, #0
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	e008      	b.n	8005438 <HAL_ADC_ConfigChannel+0x708>
 8005426:	4882      	ldr	r0, [pc, #520]	@ (8005630 <HAL_ADC_ConfigChannel+0x900>)
 8005428:	f7fe fd06 	bl	8003e38 <LL_ADC_IsEnabled>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80a6 	beq.w	800558a <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a7c      	ldr	r2, [pc, #496]	@ (8005634 <HAL_ADC_ConfigChannel+0x904>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d13c      	bne.n	80054c2 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005448:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800544c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d136      	bne.n	80054c2 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a71      	ldr	r2, [pc, #452]	@ (8005620 <HAL_ADC_ConfigChannel+0x8f0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00a      	beq.n	8005474 <HAL_ADC_ConfigChannel+0x744>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a70      	ldr	r2, [pc, #448]	@ (8005624 <HAL_ADC_ConfigChannel+0x8f4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d005      	beq.n	8005474 <HAL_ADC_ConfigChannel+0x744>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a70      	ldr	r2, [pc, #448]	@ (8005630 <HAL_ADC_ConfigChannel+0x900>)
 800546e:	4293      	cmp	r3, r2
 8005470:	f040 826e 	bne.w	8005950 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a69      	ldr	r2, [pc, #420]	@ (8005620 <HAL_ADC_ConfigChannel+0x8f0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_ADC_ConfigChannel+0x758>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a68      	ldr	r2, [pc, #416]	@ (8005624 <HAL_ADC_ConfigChannel+0x8f4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d101      	bne.n	800548c <HAL_ADC_ConfigChannel+0x75c>
 8005488:	4a67      	ldr	r2, [pc, #412]	@ (8005628 <HAL_ADC_ConfigChannel+0x8f8>)
 800548a:	e000      	b.n	800548e <HAL_ADC_ConfigChannel+0x75e>
 800548c:	4a67      	ldr	r2, [pc, #412]	@ (800562c <HAL_ADC_ConfigChannel+0x8fc>)
 800548e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005492:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f7fe f9dc 	bl	8003856 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800549e:	4b66      	ldr	r3, [pc, #408]	@ (8005638 <HAL_ADC_ConfigChannel+0x908>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	4a65      	ldr	r2, [pc, #404]	@ (800563c <HAL_ADC_ConfigChannel+0x90c>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	099b      	lsrs	r3, r3, #6
 80054ac:	3301      	adds	r3, #1
 80054ae:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80054b0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80054b2:	e002      	b.n	80054ba <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f9      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054c0:	e246      	b.n	8005950 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005640 <HAL_ADC_ConfigChannel+0x910>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d12b      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d125      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a50      	ldr	r2, [pc, #320]	@ (8005620 <HAL_ADC_ConfigChannel+0x8f0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00a      	beq.n	80054f8 <HAL_ADC_ConfigChannel+0x7c8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a4f      	ldr	r2, [pc, #316]	@ (8005624 <HAL_ADC_ConfigChannel+0x8f4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d005      	beq.n	80054f8 <HAL_ADC_ConfigChannel+0x7c8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005630 <HAL_ADC_ConfigChannel+0x900>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	f040 822e 	bne.w	8005954 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a48      	ldr	r2, [pc, #288]	@ (8005620 <HAL_ADC_ConfigChannel+0x8f0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_ADC_ConfigChannel+0x7dc>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a47      	ldr	r2, [pc, #284]	@ (8005624 <HAL_ADC_ConfigChannel+0x8f4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d101      	bne.n	8005510 <HAL_ADC_ConfigChannel+0x7e0>
 800550c:	4a46      	ldr	r2, [pc, #280]	@ (8005628 <HAL_ADC_ConfigChannel+0x8f8>)
 800550e:	e000      	b.n	8005512 <HAL_ADC_ConfigChannel+0x7e2>
 8005510:	4a46      	ldr	r2, [pc, #280]	@ (800562c <HAL_ADC_ConfigChannel+0x8fc>)
 8005512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800551a:	4619      	mov	r1, r3
 800551c:	4610      	mov	r0, r2
 800551e:	f7fe f99a 	bl	8003856 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005522:	e217      	b.n	8005954 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a46      	ldr	r2, [pc, #280]	@ (8005644 <HAL_ADC_ConfigChannel+0x914>)
 800552a:	4293      	cmp	r3, r2
 800552c:	f040 8213 	bne.w	8005956 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005538:	2b00      	cmp	r3, #0
 800553a:	f040 820c 	bne.w	8005956 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a37      	ldr	r2, [pc, #220]	@ (8005620 <HAL_ADC_ConfigChannel+0x8f0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00a      	beq.n	800555e <HAL_ADC_ConfigChannel+0x82e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a35      	ldr	r2, [pc, #212]	@ (8005624 <HAL_ADC_ConfigChannel+0x8f4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d005      	beq.n	800555e <HAL_ADC_ConfigChannel+0x82e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a36      	ldr	r2, [pc, #216]	@ (8005630 <HAL_ADC_ConfigChannel+0x900>)
 8005558:	4293      	cmp	r3, r2
 800555a:	f040 81fc 	bne.w	8005956 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a2f      	ldr	r2, [pc, #188]	@ (8005620 <HAL_ADC_ConfigChannel+0x8f0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d004      	beq.n	8005572 <HAL_ADC_ConfigChannel+0x842>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2d      	ldr	r2, [pc, #180]	@ (8005624 <HAL_ADC_ConfigChannel+0x8f4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d101      	bne.n	8005576 <HAL_ADC_ConfigChannel+0x846>
 8005572:	4a2d      	ldr	r2, [pc, #180]	@ (8005628 <HAL_ADC_ConfigChannel+0x8f8>)
 8005574:	e000      	b.n	8005578 <HAL_ADC_ConfigChannel+0x848>
 8005576:	4a2d      	ldr	r2, [pc, #180]	@ (800562c <HAL_ADC_ConfigChannel+0x8fc>)
 8005578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800557c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f7fe f967 	bl	8003856 <LL_ADC_SetCommonPathInternalCh>
 8005588:	e1e5      	b.n	8005956 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800558e:	f043 0220 	orr.w	r2, r3, #32
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800559c:	e1db      	b.n	8005956 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	f000 811b 	beq.w	80057e6 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055b8:	d004      	beq.n	80055c4 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80055be:	4a22      	ldr	r2, [pc, #136]	@ (8005648 <HAL_ADC_ConfigChannel+0x918>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d107      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe fac1 	bl	8003b54 <LL_ADC_REG_SetSequencerChAdd>
 80055d2:	e059      	b.n	8005688 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	210f      	movs	r1, #15
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	401a      	ands	r2, r3
 80055ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80055f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x8d4>
 80055f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80055fc:	0e9b      	lsrs	r3, r3, #26
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	e027      	b.n	8005654 <HAL_ADC_ConfigChannel+0x924>
 8005604:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005608:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	60fb      	str	r3, [r7, #12]
  return result;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d117      	bne.n	800564c <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 800561c:	2320      	movs	r3, #32
 800561e:	e019      	b.n	8005654 <HAL_ADC_ConfigChannel+0x924>
 8005620:	42028000 	.word	0x42028000
 8005624:	42028100 	.word	0x42028100
 8005628:	42028300 	.word	0x42028300
 800562c:	46021300 	.word	0x46021300
 8005630:	46021000 	.word	0x46021000
 8005634:	ce080000 	.word	0xce080000
 8005638:	2000001c 	.word	0x2000001c
 800563c:	053e2d63 	.word	0x053e2d63
 8005640:	ca040000 	.word	0xca040000
 8005644:	80000001 	.word	0x80000001
 8005648:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6849      	ldr	r1, [r1, #4]
 8005658:	f001 011f 	and.w	r1, r1, #31
 800565c:	408b      	lsls	r3, r1
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	089b      	lsrs	r3, r3, #2
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	429a      	cmp	r2, r3
 8005674:	d808      	bhi.n	8005688 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005682:	4619      	mov	r1, r3
 8005684:	f7fe fa06 	bl	8003a94 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	461a      	mov	r2, r3
 8005692:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005696:	f7fe fac9 	bl	8003c2c <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f280 8159 	bge.w	8005956 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a9b      	ldr	r2, [pc, #620]	@ (8005918 <HAL_ADC_ConfigChannel+0xbe8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_ADC_ConfigChannel+0x988>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a9a      	ldr	r2, [pc, #616]	@ (800591c <HAL_ADC_ConfigChannel+0xbec>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x98c>
 80056b8:	4b99      	ldr	r3, [pc, #612]	@ (8005920 <HAL_ADC_ConfigChannel+0xbf0>)
 80056ba:	e000      	b.n	80056be <HAL_ADC_ConfigChannel+0x98e>
 80056bc:	4b99      	ldr	r3, [pc, #612]	@ (8005924 <HAL_ADC_ConfigChannel+0xbf4>)
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe f8dc 	bl	800387c <LL_ADC_GetCommonPathInternalCh>
 80056c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a96      	ldr	r2, [pc, #600]	@ (8005928 <HAL_ADC_ConfigChannel+0xbf8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d12b      	bne.n	800572a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d125      	bne.n	800572a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a8d      	ldr	r2, [pc, #564]	@ (8005918 <HAL_ADC_ConfigChannel+0xbe8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_ADC_ConfigChannel+0x9c2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a8b      	ldr	r2, [pc, #556]	@ (800591c <HAL_ADC_ConfigChannel+0xbec>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d101      	bne.n	80056f6 <HAL_ADC_ConfigChannel+0x9c6>
 80056f2:	4a8b      	ldr	r2, [pc, #556]	@ (8005920 <HAL_ADC_ConfigChannel+0xbf0>)
 80056f4:	e000      	b.n	80056f8 <HAL_ADC_ConfigChannel+0x9c8>
 80056f6:	4a8b      	ldr	r2, [pc, #556]	@ (8005924 <HAL_ADC_ConfigChannel+0xbf4>)
 80056f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7fe f8a7 	bl	8003856 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005708:	4b88      	ldr	r3, [pc, #544]	@ (800592c <HAL_ADC_ConfigChannel+0xbfc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	099b      	lsrs	r3, r3, #6
 800570e:	4a88      	ldr	r2, [pc, #544]	@ (8005930 <HAL_ADC_ConfigChannel+0xc00>)
 8005710:	fba2 2303 	umull	r2, r3, r2, r3
 8005714:	099b      	lsrs	r3, r3, #6
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800571a:	e002      	b.n	8005722 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	3b01      	subs	r3, #1
 8005720:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f9      	bne.n	800571c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8005728:	e045      	b.n	80057b6 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a81      	ldr	r2, [pc, #516]	@ (8005934 <HAL_ADC_ConfigChannel+0xc04>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d11b      	bne.n	800576c <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800573c:	2b00      	cmp	r3, #0
 800573e:	d115      	bne.n	800576c <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a74      	ldr	r2, [pc, #464]	@ (8005918 <HAL_ADC_ConfigChannel+0xbe8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_ADC_ConfigChannel+0xa24>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a73      	ldr	r2, [pc, #460]	@ (800591c <HAL_ADC_ConfigChannel+0xbec>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d101      	bne.n	8005758 <HAL_ADC_ConfigChannel+0xa28>
 8005754:	4a72      	ldr	r2, [pc, #456]	@ (8005920 <HAL_ADC_ConfigChannel+0xbf0>)
 8005756:	e000      	b.n	800575a <HAL_ADC_ConfigChannel+0xa2a>
 8005758:	4a72      	ldr	r2, [pc, #456]	@ (8005924 <HAL_ADC_ConfigChannel+0xbf4>)
 800575a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800575e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f7fe f876 	bl	8003856 <LL_ADC_SetCommonPathInternalCh>
 800576a:	e024      	b.n	80057b6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a71      	ldr	r2, [pc, #452]	@ (8005938 <HAL_ADC_ConfigChannel+0xc08>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d11f      	bne.n	80057b6 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800577a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d115      	bne.n	80057ae <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a64      	ldr	r2, [pc, #400]	@ (8005918 <HAL_ADC_ConfigChannel+0xbe8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <HAL_ADC_ConfigChannel+0xa66>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a62      	ldr	r2, [pc, #392]	@ (800591c <HAL_ADC_ConfigChannel+0xbec>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d101      	bne.n	800579a <HAL_ADC_ConfigChannel+0xa6a>
 8005796:	4a62      	ldr	r2, [pc, #392]	@ (8005920 <HAL_ADC_ConfigChannel+0xbf0>)
 8005798:	e000      	b.n	800579c <HAL_ADC_ConfigChannel+0xa6c>
 800579a:	4a62      	ldr	r2, [pc, #392]	@ (8005924 <HAL_ADC_ConfigChannel+0xbf4>)
 800579c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f7fe f855 	bl	8003856 <LL_ADC_SetCommonPathInternalCh>
 80057ac:	e003      	b.n	80057b6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a62      	ldr	r2, [pc, #392]	@ (800593c <HAL_ADC_ConfigChannel+0xc0c>)
 80057b4:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a61      	ldr	r2, [pc, #388]	@ (8005940 <HAL_ADC_ConfigChannel+0xc10>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	f040 80ca 	bne.w	8005956 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80057c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f040 80c3 	bne.w	8005956 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80057e4:	e0b7      	b.n	8005956 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057ee:	d004      	beq.n	80057fa <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80057f4:	4a53      	ldr	r2, [pc, #332]	@ (8005944 <HAL_ADC_ConfigChannel+0xc14>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d106      	bne.n	8005808 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005802:	4618      	mov	r0, r3
 8005804:	f7fe f9d9 	bl	8003bba <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f280 80a2 	bge.w	8005956 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a40      	ldr	r2, [pc, #256]	@ (8005918 <HAL_ADC_ConfigChannel+0xbe8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_ADC_ConfigChannel+0xaf6>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a3e      	ldr	r2, [pc, #248]	@ (800591c <HAL_ADC_ConfigChannel+0xbec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d101      	bne.n	800582a <HAL_ADC_ConfigChannel+0xafa>
 8005826:	4b3e      	ldr	r3, [pc, #248]	@ (8005920 <HAL_ADC_ConfigChannel+0xbf0>)
 8005828:	e000      	b.n	800582c <HAL_ADC_ConfigChannel+0xafc>
 800582a:	4b3e      	ldr	r3, [pc, #248]	@ (8005924 <HAL_ADC_ConfigChannel+0xbf4>)
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe f825 	bl	800387c <LL_ADC_GetCommonPathInternalCh>
 8005832:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a43      	ldr	r2, [pc, #268]	@ (8005948 <HAL_ADC_ConfigChannel+0xc18>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d115      	bne.n	800586c <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a34      	ldr	r2, [pc, #208]	@ (8005918 <HAL_ADC_ConfigChannel+0xbe8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_ADC_ConfigChannel+0xb24>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a33      	ldr	r2, [pc, #204]	@ (800591c <HAL_ADC_ConfigChannel+0xbec>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_ADC_ConfigChannel+0xb28>
 8005854:	4a32      	ldr	r2, [pc, #200]	@ (8005920 <HAL_ADC_ConfigChannel+0xbf0>)
 8005856:	e000      	b.n	800585a <HAL_ADC_ConfigChannel+0xb2a>
 8005858:	4a32      	ldr	r2, [pc, #200]	@ (8005924 <HAL_ADC_ConfigChannel+0xbf4>)
 800585a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800585e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7fd fff6 	bl	8003856 <LL_ADC_SetCommonPathInternalCh>
 800586a:	e034      	b.n	80058d6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a36      	ldr	r2, [pc, #216]	@ (800594c <HAL_ADC_ConfigChannel+0xc1c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d115      	bne.n	80058a2 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a27      	ldr	r2, [pc, #156]	@ (8005918 <HAL_ADC_ConfigChannel+0xbe8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_ADC_ConfigChannel+0xb5a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a25      	ldr	r2, [pc, #148]	@ (800591c <HAL_ADC_ConfigChannel+0xbec>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <HAL_ADC_ConfigChannel+0xb5e>
 800588a:	4a25      	ldr	r2, [pc, #148]	@ (8005920 <HAL_ADC_ConfigChannel+0xbf0>)
 800588c:	e000      	b.n	8005890 <HAL_ADC_ConfigChannel+0xb60>
 800588e:	4a25      	ldr	r2, [pc, #148]	@ (8005924 <HAL_ADC_ConfigChannel+0xbf4>)
 8005890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005894:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f7fd ffdb 	bl	8003856 <LL_ADC_SetCommonPathInternalCh>
 80058a0:	e019      	b.n	80058d6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a24      	ldr	r2, [pc, #144]	@ (8005938 <HAL_ADC_ConfigChannel+0xc08>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d114      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a19      	ldr	r2, [pc, #100]	@ (8005918 <HAL_ADC_ConfigChannel+0xbe8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_ADC_ConfigChannel+0xb90>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a18      	ldr	r2, [pc, #96]	@ (800591c <HAL_ADC_ConfigChannel+0xbec>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d101      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0xb94>
 80058c0:	4a17      	ldr	r2, [pc, #92]	@ (8005920 <HAL_ADC_ConfigChannel+0xbf0>)
 80058c2:	e000      	b.n	80058c6 <HAL_ADC_ConfigChannel+0xb96>
 80058c4:	4a17      	ldr	r2, [pc, #92]	@ (8005924 <HAL_ADC_ConfigChannel+0xbf4>)
 80058c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058ca:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f7fd ffc0 	bl	8003856 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a19      	ldr	r2, [pc, #100]	@ (8005940 <HAL_ADC_ConfigChannel+0xc10>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d13a      	bne.n	8005956 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d134      	bne.n	8005956 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0201 	orr.w	r2, r2, #1
 80058fc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8005900:	e029      	b.n	8005956 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005914:	e01f      	b.n	8005956 <HAL_ADC_ConfigChannel+0xc26>
 8005916:	bf00      	nop
 8005918:	42028000 	.word	0x42028000
 800591c:	42028100 	.word	0x42028100
 8005920:	42028300 	.word	0x42028300
 8005924:	46021300 	.word	0x46021300
 8005928:	b6002000 	.word	0xb6002000
 800592c:	2000001c 	.word	0x2000001c
 8005930:	053e2d63 	.word	0x053e2d63
 8005934:	ba004000 	.word	0xba004000
 8005938:	80000001 	.word	0x80000001
 800593c:	b2001000 	.word	0xb2001000
 8005940:	d7200000 	.word	0xd7200000
 8005944:	80000010 	.word	0x80000010
 8005948:	ce080000 	.word	0xce080000
 800594c:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005954:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 800595e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005962:	4618      	mov	r0, r3
 8005964:	37dc      	adds	r7, #220	@ 0xdc
 8005966:	46bd      	mov	sp, r7
 8005968:	bd90      	pop	{r4, r7, pc}
 800596a:	bf00      	nop

0800596c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fa5d 	bl	8003e38 <LL_ADC_IsEnabled>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d17b      	bne.n	8005a7c <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a88 <ADC_Enable+0x11c>)
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00d      	beq.n	80059ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005996:	f043 0210 	orr.w	r2, r3, #16
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e067      	b.n	8005a7e <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2201      	movs	r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fa28 	bl	8003e10 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <ADC_Enable+0x66>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a2f      	ldr	r2, [pc, #188]	@ (8005a8c <ADC_Enable+0x120>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d054      	beq.n	8005a7c <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80059d2:	f7fd fed5 	bl	8003780 <HAL_GetTick>
 80059d6:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005a90 <ADC_Enable+0x124>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <ADC_Enable+0x80>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005a94 <ADC_Enable+0x128>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d101      	bne.n	80059f0 <ADC_Enable+0x84>
 80059ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005a98 <ADC_Enable+0x12c>)
 80059ee:	e000      	b.n	80059f2 <ADC_Enable+0x86>
 80059f0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a9c <ADC_Enable+0x130>)
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe f9a2 	bl	8003d3c <LL_ADC_GetMultimode>
 80059f8:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a25      	ldr	r2, [pc, #148]	@ (8005a94 <ADC_Enable+0x128>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d002      	beq.n	8005a0a <ADC_Enable+0x9e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	e000      	b.n	8005a0c <ADC_Enable+0xa0>
 8005a0a:	4b21      	ldr	r3, [pc, #132]	@ (8005a90 <ADC_Enable+0x124>)
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d02c      	beq.n	8005a6e <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d130      	bne.n	8005a7c <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a1a:	e028      	b.n	8005a6e <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fa09 	bl	8003e38 <LL_ADC_IsEnabled>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe f9ed 	bl	8003e10 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a36:	f7fd fea3 	bl	8003780 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d914      	bls.n	8005a6e <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d00d      	beq.n	8005a6e <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a56:	f043 0210 	orr.w	r2, r3, #16
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a62:	f043 0201 	orr.w	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e007      	b.n	8005a7e <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d1cf      	bne.n	8005a1c <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	8000003f 	.word	0x8000003f
 8005a8c:	46021000 	.word	0x46021000
 8005a90:	42028000 	.word	0x42028000
 8005a94:	42028100 	.word	0x42028100
 8005a98:	42028300 	.word	0x42028300
 8005a9c:	46021300 	.word	0x46021300

08005aa0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ab2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d14b      	bne.n	8005b52 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005abe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d021      	beq.n	8005b18 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fd ffc7 	bl	8003a6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d032      	beq.n	8005b4a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d12b      	bne.n	8005b4a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005af6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d11f      	bne.n	8005b4a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b0e:	f043 0201 	orr.w	r2, r3, #1
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	679a      	str	r2, [r3, #120]	@ 0x78
 8005b16:	e018      	b.n	8005b4a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d111      	bne.n	8005b4a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d105      	bne.n	8005b4a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b42:	f043 0201 	orr.w	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff f8aa 	bl	8004ca4 <HAL_ADC_ConvCpltCallback>
      /* Call ADC DMA error callback */
        HAL_ADC_ConvCpltCallback(hadc);
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b50:	e011      	b.n	8005b76 <ADC_DMAConvCplt+0xd6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff f8be 	bl	8004ce0 <HAL_ADC_ErrorCallback>
}
 8005b64:	e007      	b.n	8005b76 <ADC_DMAConvCplt+0xd6>
        HAL_ADC_ConvCpltCallback(hadc);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff f89c 	bl	8004ca4 <HAL_ADC_ConvCpltCallback>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	4798      	blx	r3
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff f893 	bl	8004cb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bb8:	f043 0204 	orr.w	r2, r3, #4
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff f88d 	bl	8004ce0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c30:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <__NVIC_SetPriorityGrouping+0x44>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c52:	4a04      	ldr	r2, [pc, #16]	@ (8005c64 <__NVIC_SetPriorityGrouping+0x44>)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	60d3      	str	r3, [r2, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c6c:	4b04      	ldr	r3, [pc, #16]	@ (8005c80 <__NVIC_GetPriorityGrouping+0x18>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	0a1b      	lsrs	r3, r3, #8
 8005c72:	f003 0307 	and.w	r3, r3, #7
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	e000ed00 	.word	0xe000ed00

08005c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	db0b      	blt.n	8005cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	f003 021f 	and.w	r2, r3, #31
 8005c9c:	4907      	ldr	r1, [pc, #28]	@ (8005cbc <__NVIC_EnableIRQ+0x38>)
 8005c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8005caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	e000e100 	.word	0xe000e100

08005cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	6039      	str	r1, [r7, #0]
 8005cca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	db0a      	blt.n	8005cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	490c      	ldr	r1, [pc, #48]	@ (8005d0c <__NVIC_SetPriority+0x4c>)
 8005cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cde:	0112      	lsls	r2, r2, #4
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ce8:	e00a      	b.n	8005d00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	4908      	ldr	r1, [pc, #32]	@ (8005d10 <__NVIC_SetPriority+0x50>)
 8005cf0:	88fb      	ldrh	r3, [r7, #6]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	3b04      	subs	r3, #4
 8005cf8:	0112      	lsls	r2, r2, #4
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	761a      	strb	r2, [r3, #24]
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	e000e100 	.word	0xe000e100
 8005d10:	e000ed00 	.word	0xe000ed00

08005d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b089      	sub	sp, #36	@ 0x24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f1c3 0307 	rsb	r3, r3, #7
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	bf28      	it	cs
 8005d32:	2304      	movcs	r3, #4
 8005d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	2b06      	cmp	r3, #6
 8005d3c:	d902      	bls.n	8005d44 <NVIC_EncodePriority+0x30>
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	3b03      	subs	r3, #3
 8005d42:	e000      	b.n	8005d46 <NVIC_EncodePriority+0x32>
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d48:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43da      	mvns	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	401a      	ands	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	fa01 f303 	lsl.w	r3, r1, r3
 8005d66:	43d9      	mvns	r1, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d6c:	4313      	orrs	r3, r2
         );
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3724      	adds	r7, #36	@ 0x24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff ff4c 	bl	8005c20 <__NVIC_SetPriorityGrouping>
}
 8005d88:	bf00      	nop
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d9e:	f7ff ff63 	bl	8005c68 <__NVIC_GetPriorityGrouping>
 8005da2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	6978      	ldr	r0, [r7, #20]
 8005daa:	f7ff ffb3 	bl	8005d14 <NVIC_EncodePriority>
 8005dae:	4602      	mov	r2, r0
 8005db0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff ff82 	bl	8005cc0 <__NVIC_SetPriority>
}
 8005dbc:	bf00      	nop
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff ff56 	bl	8005c84 <__NVIC_EnableIRQ>
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005df0:	d301      	bcc.n	8005df6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005df2:	2301      	movs	r3, #1
 8005df4:	e00d      	b.n	8005e12 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005df6:	4a0a      	ldr	r2, [pc, #40]	@ (8005e20 <HAL_SYSTICK_Config+0x40>)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005dfe:	4b08      	ldr	r3, [pc, #32]	@ (8005e20 <HAL_SYSTICK_Config+0x40>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005e04:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <HAL_SYSTICK_Config+0x40>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a05      	ldr	r2, [pc, #20]	@ (8005e20 <HAL_SYSTICK_Config+0x40>)
 8005e0a:	f043 0303 	orr.w	r3, r3, #3
 8005e0e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e010 	.word	0xe000e010

08005e24 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d844      	bhi.n	8005ebc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005e32:	a201      	add	r2, pc, #4	@ (adr r2, 8005e38 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e5b 	.word	0x08005e5b
 8005e3c:	08005e79 	.word	0x08005e79
 8005e40:	08005e9b 	.word	0x08005e9b
 8005e44:	08005ebd 	.word	0x08005ebd
 8005e48:	08005e4d 	.word	0x08005e4d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005ecc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1e      	ldr	r2, [pc, #120]	@ (8005ecc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005e52:	f043 0304 	orr.w	r3, r3, #4
 8005e56:	6013      	str	r3, [r2, #0]
      break;
 8005e58:	e031      	b.n	8005ebe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8005ecc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ecc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005e60:	f023 0304 	bic.w	r3, r3, #4
 8005e64:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005e66:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e6c:	4a18      	ldr	r2, [pc, #96]	@ (8005ed0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005e6e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005e76:	e022      	b.n	8005ebe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005e78:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	@ (8005ecc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005e7e:	f023 0304 	bic.w	r3, r3, #4
 8005e82:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005e84:	4b12      	ldr	r3, [pc, #72]	@ (8005ed0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e8a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005e8e:	4a10      	ldr	r2, [pc, #64]	@ (8005ed0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005e90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005e98:	e011      	b.n	8005ebe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ecc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8005ecc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005ea0:	f023 0304 	bic.w	r3, r3, #4
 8005ea4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eac:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005eb0:	4a07      	ldr	r2, [pc, #28]	@ (8005ed0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005eb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005eba:	e000      	b.n	8005ebe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005ebc:	bf00      	nop
  }
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	e000e010 	.word	0xe000e010
 8005ed0:	46020c00 	.word	0x46020c00

08005ed4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005eda:	4b19      	ldr	r3, [pc, #100]	@ (8005f40 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	607b      	str	r3, [r7, #4]
 8005eea:	e021      	b.n	8005f30 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005eec:	4b15      	ldr	r3, [pc, #84]	@ (8005f44 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8005eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ef2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005ef6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005efe:	d011      	beq.n	8005f24 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f06:	d810      	bhi.n	8005f2a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d004      	beq.n	8005f18 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f14:	d003      	beq.n	8005f1e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005f16:	e008      	b.n	8005f2a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	607b      	str	r3, [r7, #4]
        break;
 8005f1c:	e008      	b.n	8005f30 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	607b      	str	r3, [r7, #4]
        break;
 8005f22:	e005      	b.n	8005f30 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005f24:	2302      	movs	r3, #2
 8005f26:	607b      	str	r3, [r7, #4]
        break;
 8005f28:	e002      	b.n	8005f30 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
        break;
 8005f2e:	bf00      	nop
    }
  }
  return systick_source;
 8005f30:	687b      	ldr	r3, [r7, #4]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	e000e010 	.word	0xe000e010
 8005f44:	46020c00 	.word	0x46020c00

08005f48 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005f50:	f7fd fc16 	bl	8003780 <HAL_GetTick>
 8005f54:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0db      	b.n	8006118 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a6e      	ldr	r2, [pc, #440]	@ (8006120 <HAL_DMA_Init+0x1d8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	f000 809f 	beq.w	80060aa <HAL_DMA_Init+0x162>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a6c      	ldr	r2, [pc, #432]	@ (8006124 <HAL_DMA_Init+0x1dc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	f000 8099 	beq.w	80060aa <HAL_DMA_Init+0x162>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8006128 <HAL_DMA_Init+0x1e0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	f000 8093 	beq.w	80060aa <HAL_DMA_Init+0x162>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a68      	ldr	r2, [pc, #416]	@ (800612c <HAL_DMA_Init+0x1e4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	f000 808d 	beq.w	80060aa <HAL_DMA_Init+0x162>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a66      	ldr	r2, [pc, #408]	@ (8006130 <HAL_DMA_Init+0x1e8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	f000 8087 	beq.w	80060aa <HAL_DMA_Init+0x162>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a64      	ldr	r2, [pc, #400]	@ (8006134 <HAL_DMA_Init+0x1ec>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	f000 8081 	beq.w	80060aa <HAL_DMA_Init+0x162>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a62      	ldr	r2, [pc, #392]	@ (8006138 <HAL_DMA_Init+0x1f0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d07b      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a61      	ldr	r2, [pc, #388]	@ (800613c <HAL_DMA_Init+0x1f4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d076      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5f      	ldr	r2, [pc, #380]	@ (8006140 <HAL_DMA_Init+0x1f8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d071      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5e      	ldr	r2, [pc, #376]	@ (8006144 <HAL_DMA_Init+0x1fc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d06c      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5c      	ldr	r2, [pc, #368]	@ (8006148 <HAL_DMA_Init+0x200>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d067      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5b      	ldr	r2, [pc, #364]	@ (800614c <HAL_DMA_Init+0x204>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d062      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a59      	ldr	r2, [pc, #356]	@ (8006150 <HAL_DMA_Init+0x208>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d05d      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a58      	ldr	r2, [pc, #352]	@ (8006154 <HAL_DMA_Init+0x20c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d058      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a56      	ldr	r2, [pc, #344]	@ (8006158 <HAL_DMA_Init+0x210>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d053      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a55      	ldr	r2, [pc, #340]	@ (800615c <HAL_DMA_Init+0x214>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d04e      	beq.n	80060aa <HAL_DMA_Init+0x162>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a53      	ldr	r2, [pc, #332]	@ (8006160 <HAL_DMA_Init+0x218>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d049      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a52      	ldr	r2, [pc, #328]	@ (8006164 <HAL_DMA_Init+0x21c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d044      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a50      	ldr	r2, [pc, #320]	@ (8006168 <HAL_DMA_Init+0x220>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d03f      	beq.n	80060aa <HAL_DMA_Init+0x162>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a4f      	ldr	r2, [pc, #316]	@ (800616c <HAL_DMA_Init+0x224>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d03a      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a4d      	ldr	r2, [pc, #308]	@ (8006170 <HAL_DMA_Init+0x228>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d035      	beq.n	80060aa <HAL_DMA_Init+0x162>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4c      	ldr	r2, [pc, #304]	@ (8006174 <HAL_DMA_Init+0x22c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d030      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a4a      	ldr	r2, [pc, #296]	@ (8006178 <HAL_DMA_Init+0x230>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02b      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a49      	ldr	r2, [pc, #292]	@ (800617c <HAL_DMA_Init+0x234>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d026      	beq.n	80060aa <HAL_DMA_Init+0x162>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a47      	ldr	r2, [pc, #284]	@ (8006180 <HAL_DMA_Init+0x238>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d021      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a46      	ldr	r2, [pc, #280]	@ (8006184 <HAL_DMA_Init+0x23c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01c      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a44      	ldr	r2, [pc, #272]	@ (8006188 <HAL_DMA_Init+0x240>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d017      	beq.n	80060aa <HAL_DMA_Init+0x162>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a43      	ldr	r2, [pc, #268]	@ (800618c <HAL_DMA_Init+0x244>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d012      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a41      	ldr	r2, [pc, #260]	@ (8006190 <HAL_DMA_Init+0x248>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00d      	beq.n	80060aa <HAL_DMA_Init+0x162>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a40      	ldr	r2, [pc, #256]	@ (8006194 <HAL_DMA_Init+0x24c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d008      	beq.n	80060aa <HAL_DMA_Init+0x162>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a3e      	ldr	r2, [pc, #248]	@ (8006198 <HAL_DMA_Init+0x250>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <HAL_DMA_Init+0x162>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a3d      	ldr	r2, [pc, #244]	@ (800619c <HAL_DMA_Init+0x254>)
 80060a8:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0206 	orr.w	r2, r2, #6
 80060c8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80060ca:	e00f      	b.n	80060ec <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80060cc:	f7fd fb58 	bl	8003780 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d908      	bls.n	80060ec <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2210      	movs	r2, #16
 80060de:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2203      	movs	r2, #3
 80060e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e015      	b.n	8006118 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e8      	bne.n	80060cc <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fb26 	bl	800674c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40020050 	.word	0x40020050
 8006124:	50020050 	.word	0x50020050
 8006128:	400200d0 	.word	0x400200d0
 800612c:	500200d0 	.word	0x500200d0
 8006130:	40020150 	.word	0x40020150
 8006134:	50020150 	.word	0x50020150
 8006138:	400201d0 	.word	0x400201d0
 800613c:	500201d0 	.word	0x500201d0
 8006140:	40020250 	.word	0x40020250
 8006144:	50020250 	.word	0x50020250
 8006148:	400202d0 	.word	0x400202d0
 800614c:	500202d0 	.word	0x500202d0
 8006150:	40020350 	.word	0x40020350
 8006154:	50020350 	.word	0x50020350
 8006158:	400203d0 	.word	0x400203d0
 800615c:	500203d0 	.word	0x500203d0
 8006160:	40020450 	.word	0x40020450
 8006164:	50020450 	.word	0x50020450
 8006168:	400204d0 	.word	0x400204d0
 800616c:	500204d0 	.word	0x500204d0
 8006170:	40020550 	.word	0x40020550
 8006174:	50020550 	.word	0x50020550
 8006178:	400205d0 	.word	0x400205d0
 800617c:	500205d0 	.word	0x500205d0
 8006180:	40020650 	.word	0x40020650
 8006184:	50020650 	.word	0x50020650
 8006188:	400206d0 	.word	0x400206d0
 800618c:	500206d0 	.word	0x500206d0
 8006190:	40020750 	.word	0x40020750
 8006194:	50020750 	.word	0x50020750
 8006198:	400207d0 	.word	0x400207d0
 800619c:	500207d0 	.word	0x500207d0

080061a0 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e04f      	b.n	8006258 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_DMA_Start_IT+0x26>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e048      	b.n	8006258 <HAL_DMA_Start_IT+0xb8>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d136      	bne.n	8006248 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2202      	movs	r2, #2
 80061de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fa86 	bl	8006700 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006202:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800621a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695a      	ldr	r2, [r3, #20]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006232:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	e007      	b.n	8006258 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2240      	movs	r2, #64	@ 0x40
 800624c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8006268:	f7fd fa8a 	bl	8003780 <HAL_GetTick>
 800626c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e06b      	b.n	8006350 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d008      	beq.n	8006296 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e05c      	b.n	8006350 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0204 	orr.w	r2, r2, #4
 80062a4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2205      	movs	r2, #5
 80062aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80062ae:	e020      	b.n	80062f2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80062b0:	f7fd fa66 	bl	8003780 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	d919      	bls.n	80062f2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c2:	f043 0210 	orr.w	r2, r3, #16
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2203      	movs	r2, #3
 80062ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e2:	2201      	movs	r2, #1
 80062e4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e02e      	b.n	8006350 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0d7      	beq.n	80062b0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0202 	orr.w	r2, r2, #2
 800630e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2204      	movs	r2, #4
 8006314:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8006320:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d007      	beq.n	8006346 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800633a:	2201      	movs	r2, #1
 800633c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2200      	movs	r2, #0
 8006344:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e019      	b.n	800639e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d004      	beq.n	8006380 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e00e      	b.n	800639e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2204      	movs	r2, #4
 8006384:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6812      	ldr	r2, [r2, #0]
 8006392:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006396:	f043 0304 	orr.w	r3, r3, #4
 800639a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80063ba:	f023 030f 	bic.w	r3, r3, #15
 80063be:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c8:	3b50      	subs	r3, #80	@ 0x50
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2201      	movs	r2, #1
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4013      	ands	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 813b 	beq.w	8006660 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d011      	beq.n	800641c <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800640e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006414:	f043 0201 	orr.w	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006426:	2b00      	cmp	r3, #0
 8006428:	d011      	beq.n	800644e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006440:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006446:	f043 0202 	orr.w	r2, r3, #2
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d011      	beq.n	8006480 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006472:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006478:	f043 0204 	orr.w	r2, r3, #4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d011      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80064a4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064aa:	f043 0208 	orr.w	r2, r3, #8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d013      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064d6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d04c      	beq.n	8006590 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d045      	beq.n	8006590 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800650c:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b04      	cmp	r3, #4
 8006518:	d12e      	bne.n	8006578 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695a      	ldr	r2, [r3, #20]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006528:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695a      	ldr	r2, [r3, #20]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0202 	orr.w	r2, r2, #2
 8006538:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006552:	2201      	movs	r2, #1
 8006554:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d07a      	beq.n	8006664 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
        }

        return;
 8006576:	e075      	b.n	8006664 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2205      	movs	r2, #5
 800657c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d039      	beq.n	8006612 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d032      	beq.n	8006612 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d012      	beq.n	80065de <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d116      	bne.n	80065f0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d111      	bne.n	80065f0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d8:	2201      	movs	r2, #1
 80065da:	731a      	strb	r2, [r3, #12]
 80065dc:	e008      	b.n	80065f0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d103      	bne.n	80065f0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80065f8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006616:	2b00      	cmp	r3, #0
 8006618:	d025      	beq.n	8006666 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0202 	orr.w	r2, r2, #2
 8006628:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006642:	2201      	movs	r2, #1
 8006644:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006652:	2b00      	cmp	r3, #0
 8006654:	d007      	beq.n	8006666 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
 800665e:	e002      	b.n	8006666 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8006664:	bf00      	nop
    }
  }
}
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800667a:	b2db      	uxtb	r3, r3
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e02b      	b.n	80066f4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80066a4:	f023 030f 	bic.w	r3, r3, #15
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b2:	3b50      	subs	r3, #80	@ 0x50
 80066b4:	09db      	lsrs	r3, r3, #7
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2201      	movs	r2, #1
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d012      	beq.n	80066f2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	f003 0311 	and.w	r3, r3, #17
 80066d2:	2b11      	cmp	r3, #17
 80066d4:	d106      	bne.n	80066e4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	431a      	orrs	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	e006      	b.n	80066f2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	401a      	ands	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	b291      	uxth	r1, r2
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	430b      	orrs	r3, r1
 8006722:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800672c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	430a      	orrs	r2, r1
 800676c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a53      	ldr	r2, [pc, #332]	@ (80068d8 <DMA_Init+0x18c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	f000 80a0 	beq.w	80068d2 <DMA_Init+0x186>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a51      	ldr	r2, [pc, #324]	@ (80068dc <DMA_Init+0x190>)
 8006798:	4293      	cmp	r3, r2
 800679a:	f000 809a 	beq.w	80068d2 <DMA_Init+0x186>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a4f      	ldr	r2, [pc, #316]	@ (80068e0 <DMA_Init+0x194>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	f000 8094 	beq.w	80068d2 <DMA_Init+0x186>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a4d      	ldr	r2, [pc, #308]	@ (80068e4 <DMA_Init+0x198>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	f000 808e 	beq.w	80068d2 <DMA_Init+0x186>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a4b      	ldr	r2, [pc, #300]	@ (80068e8 <DMA_Init+0x19c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	f000 8088 	beq.w	80068d2 <DMA_Init+0x186>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a49      	ldr	r2, [pc, #292]	@ (80068ec <DMA_Init+0x1a0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	f000 8082 	beq.w	80068d2 <DMA_Init+0x186>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a47      	ldr	r2, [pc, #284]	@ (80068f0 <DMA_Init+0x1a4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d07c      	beq.n	80068d2 <DMA_Init+0x186>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a45      	ldr	r2, [pc, #276]	@ (80068f4 <DMA_Init+0x1a8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d077      	beq.n	80068d2 <DMA_Init+0x186>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a44      	ldr	r2, [pc, #272]	@ (80068f8 <DMA_Init+0x1ac>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d072      	beq.n	80068d2 <DMA_Init+0x186>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a42      	ldr	r2, [pc, #264]	@ (80068fc <DMA_Init+0x1b0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d06d      	beq.n	80068d2 <DMA_Init+0x186>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a41      	ldr	r2, [pc, #260]	@ (8006900 <DMA_Init+0x1b4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d068      	beq.n	80068d2 <DMA_Init+0x186>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a3f      	ldr	r2, [pc, #252]	@ (8006904 <DMA_Init+0x1b8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d063      	beq.n	80068d2 <DMA_Init+0x186>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a3e      	ldr	r2, [pc, #248]	@ (8006908 <DMA_Init+0x1bc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d05e      	beq.n	80068d2 <DMA_Init+0x186>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a3c      	ldr	r2, [pc, #240]	@ (800690c <DMA_Init+0x1c0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d059      	beq.n	80068d2 <DMA_Init+0x186>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3b      	ldr	r2, [pc, #236]	@ (8006910 <DMA_Init+0x1c4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d054      	beq.n	80068d2 <DMA_Init+0x186>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a39      	ldr	r2, [pc, #228]	@ (8006914 <DMA_Init+0x1c8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d04f      	beq.n	80068d2 <DMA_Init+0x186>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a38      	ldr	r2, [pc, #224]	@ (8006918 <DMA_Init+0x1cc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d04a      	beq.n	80068d2 <DMA_Init+0x186>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a36      	ldr	r2, [pc, #216]	@ (800691c <DMA_Init+0x1d0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d045      	beq.n	80068d2 <DMA_Init+0x186>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a35      	ldr	r2, [pc, #212]	@ (8006920 <DMA_Init+0x1d4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d040      	beq.n	80068d2 <DMA_Init+0x186>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a33      	ldr	r2, [pc, #204]	@ (8006924 <DMA_Init+0x1d8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d03b      	beq.n	80068d2 <DMA_Init+0x186>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a32      	ldr	r2, [pc, #200]	@ (8006928 <DMA_Init+0x1dc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d036      	beq.n	80068d2 <DMA_Init+0x186>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a30      	ldr	r2, [pc, #192]	@ (800692c <DMA_Init+0x1e0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d031      	beq.n	80068d2 <DMA_Init+0x186>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a2f      	ldr	r2, [pc, #188]	@ (8006930 <DMA_Init+0x1e4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d02c      	beq.n	80068d2 <DMA_Init+0x186>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a2d      	ldr	r2, [pc, #180]	@ (8006934 <DMA_Init+0x1e8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d027      	beq.n	80068d2 <DMA_Init+0x186>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a2c      	ldr	r2, [pc, #176]	@ (8006938 <DMA_Init+0x1ec>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d022      	beq.n	80068d2 <DMA_Init+0x186>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2a      	ldr	r2, [pc, #168]	@ (800693c <DMA_Init+0x1f0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01d      	beq.n	80068d2 <DMA_Init+0x186>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a29      	ldr	r2, [pc, #164]	@ (8006940 <DMA_Init+0x1f4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d018      	beq.n	80068d2 <DMA_Init+0x186>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a27      	ldr	r2, [pc, #156]	@ (8006944 <DMA_Init+0x1f8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <DMA_Init+0x186>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a26      	ldr	r2, [pc, #152]	@ (8006948 <DMA_Init+0x1fc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <DMA_Init+0x186>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a24      	ldr	r2, [pc, #144]	@ (800694c <DMA_Init+0x200>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <DMA_Init+0x186>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a23      	ldr	r2, [pc, #140]	@ (8006950 <DMA_Init+0x204>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <DMA_Init+0x186>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a21      	ldr	r2, [pc, #132]	@ (8006954 <DMA_Init+0x208>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d142      	bne.n	8006958 <DMA_Init+0x20c>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e041      	b.n	800695a <DMA_Init+0x20e>
 80068d6:	bf00      	nop
 80068d8:	40020050 	.word	0x40020050
 80068dc:	50020050 	.word	0x50020050
 80068e0:	400200d0 	.word	0x400200d0
 80068e4:	500200d0 	.word	0x500200d0
 80068e8:	40020150 	.word	0x40020150
 80068ec:	50020150 	.word	0x50020150
 80068f0:	400201d0 	.word	0x400201d0
 80068f4:	500201d0 	.word	0x500201d0
 80068f8:	40020250 	.word	0x40020250
 80068fc:	50020250 	.word	0x50020250
 8006900:	400202d0 	.word	0x400202d0
 8006904:	500202d0 	.word	0x500202d0
 8006908:	40020350 	.word	0x40020350
 800690c:	50020350 	.word	0x50020350
 8006910:	400203d0 	.word	0x400203d0
 8006914:	500203d0 	.word	0x500203d0
 8006918:	40020450 	.word	0x40020450
 800691c:	50020450 	.word	0x50020450
 8006920:	400204d0 	.word	0x400204d0
 8006924:	500204d0 	.word	0x500204d0
 8006928:	40020550 	.word	0x40020550
 800692c:	50020550 	.word	0x50020550
 8006930:	400205d0 	.word	0x400205d0
 8006934:	500205d0 	.word	0x500205d0
 8006938:	40020650 	.word	0x40020650
 800693c:	50020650 	.word	0x50020650
 8006940:	400206d0 	.word	0x400206d0
 8006944:	500206d0 	.word	0x500206d0
 8006948:	40020750 	.word	0x40020750
 800694c:	50020750 	.word	0x50020750
 8006950:	400207d0 	.word	0x400207d0
 8006954:	500207d0 	.word	0x500207d0
 8006958:	2300      	movs	r3, #0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d012      	beq.n	8006984 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006966:	3b01      	subs	r3, #1
 8006968:	051b      	lsls	r3, r3, #20
 800696a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800696e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	3b01      	subs	r3, #1
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800697c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	430a      	orrs	r2, r1
 8006996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b6:	f040 80b0 	bne.w	8006b1a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a82      	ldr	r2, [pc, #520]	@ (8006bc8 <DMA_Init+0x47c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	f000 80a0 	beq.w	8006b06 <DMA_Init+0x3ba>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a80      	ldr	r2, [pc, #512]	@ (8006bcc <DMA_Init+0x480>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	f000 809a 	beq.w	8006b06 <DMA_Init+0x3ba>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a7e      	ldr	r2, [pc, #504]	@ (8006bd0 <DMA_Init+0x484>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	f000 8094 	beq.w	8006b06 <DMA_Init+0x3ba>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a7c      	ldr	r2, [pc, #496]	@ (8006bd4 <DMA_Init+0x488>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	f000 808e 	beq.w	8006b06 <DMA_Init+0x3ba>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a7a      	ldr	r2, [pc, #488]	@ (8006bd8 <DMA_Init+0x48c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	f000 8088 	beq.w	8006b06 <DMA_Init+0x3ba>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a78      	ldr	r2, [pc, #480]	@ (8006bdc <DMA_Init+0x490>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	f000 8082 	beq.w	8006b06 <DMA_Init+0x3ba>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a76      	ldr	r2, [pc, #472]	@ (8006be0 <DMA_Init+0x494>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d07c      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a74      	ldr	r2, [pc, #464]	@ (8006be4 <DMA_Init+0x498>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d077      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a73      	ldr	r2, [pc, #460]	@ (8006be8 <DMA_Init+0x49c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d072      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a71      	ldr	r2, [pc, #452]	@ (8006bec <DMA_Init+0x4a0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d06d      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a70      	ldr	r2, [pc, #448]	@ (8006bf0 <DMA_Init+0x4a4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d068      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a6e      	ldr	r2, [pc, #440]	@ (8006bf4 <DMA_Init+0x4a8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d063      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a6d      	ldr	r2, [pc, #436]	@ (8006bf8 <DMA_Init+0x4ac>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d05e      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a6b      	ldr	r2, [pc, #428]	@ (8006bfc <DMA_Init+0x4b0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d059      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a6a      	ldr	r2, [pc, #424]	@ (8006c00 <DMA_Init+0x4b4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d054      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a68      	ldr	r2, [pc, #416]	@ (8006c04 <DMA_Init+0x4b8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d04f      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a67      	ldr	r2, [pc, #412]	@ (8006c08 <DMA_Init+0x4bc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d04a      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a65      	ldr	r2, [pc, #404]	@ (8006c0c <DMA_Init+0x4c0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d045      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a64      	ldr	r2, [pc, #400]	@ (8006c10 <DMA_Init+0x4c4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d040      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a62      	ldr	r2, [pc, #392]	@ (8006c14 <DMA_Init+0x4c8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d03b      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a61      	ldr	r2, [pc, #388]	@ (8006c18 <DMA_Init+0x4cc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d036      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8006c1c <DMA_Init+0x4d0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d031      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8006c20 <DMA_Init+0x4d4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d02c      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a5c      	ldr	r2, [pc, #368]	@ (8006c24 <DMA_Init+0x4d8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d027      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a5b      	ldr	r2, [pc, #364]	@ (8006c28 <DMA_Init+0x4dc>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d022      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a59      	ldr	r2, [pc, #356]	@ (8006c2c <DMA_Init+0x4e0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d01d      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a58      	ldr	r2, [pc, #352]	@ (8006c30 <DMA_Init+0x4e4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d018      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a56      	ldr	r2, [pc, #344]	@ (8006c34 <DMA_Init+0x4e8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a55      	ldr	r2, [pc, #340]	@ (8006c38 <DMA_Init+0x4ec>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00e      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a53      	ldr	r2, [pc, #332]	@ (8006c3c <DMA_Init+0x4f0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d009      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a52      	ldr	r2, [pc, #328]	@ (8006c40 <DMA_Init+0x4f4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d004      	beq.n	8006b06 <DMA_Init+0x3ba>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a50      	ldr	r2, [pc, #320]	@ (8006c44 <DMA_Init+0x4f8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d101      	bne.n	8006b0a <DMA_Init+0x3be>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <DMA_Init+0x3c0>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00d      	beq.n	8006b2c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e008      	b.n	8006b2c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b22:	d103      	bne.n	8006b2c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b2a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b32:	4b45      	ldr	r3, [pc, #276]	@ (8006c48 <DMA_Init+0x4fc>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	68f9      	ldr	r1, [r7, #12]
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2200      	movs	r2, #0
 8006b46:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a36      	ldr	r2, [pc, #216]	@ (8006c28 <DMA_Init+0x4dc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d022      	beq.n	8006b98 <DMA_Init+0x44c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a35      	ldr	r2, [pc, #212]	@ (8006c2c <DMA_Init+0x4e0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d01d      	beq.n	8006b98 <DMA_Init+0x44c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a33      	ldr	r2, [pc, #204]	@ (8006c30 <DMA_Init+0x4e4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d018      	beq.n	8006b98 <DMA_Init+0x44c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a32      	ldr	r2, [pc, #200]	@ (8006c34 <DMA_Init+0x4e8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <DMA_Init+0x44c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a30      	ldr	r2, [pc, #192]	@ (8006c38 <DMA_Init+0x4ec>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00e      	beq.n	8006b98 <DMA_Init+0x44c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8006c3c <DMA_Init+0x4f0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d009      	beq.n	8006b98 <DMA_Init+0x44c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a2d      	ldr	r2, [pc, #180]	@ (8006c40 <DMA_Init+0x4f4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <DMA_Init+0x44c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a2c      	ldr	r2, [pc, #176]	@ (8006c44 <DMA_Init+0x4f8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d101      	bne.n	8006b9c <DMA_Init+0x450>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <DMA_Init+0x452>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40020050 	.word	0x40020050
 8006bcc:	50020050 	.word	0x50020050
 8006bd0:	400200d0 	.word	0x400200d0
 8006bd4:	500200d0 	.word	0x500200d0
 8006bd8:	40020150 	.word	0x40020150
 8006bdc:	50020150 	.word	0x50020150
 8006be0:	400201d0 	.word	0x400201d0
 8006be4:	500201d0 	.word	0x500201d0
 8006be8:	40020250 	.word	0x40020250
 8006bec:	50020250 	.word	0x50020250
 8006bf0:	400202d0 	.word	0x400202d0
 8006bf4:	500202d0 	.word	0x500202d0
 8006bf8:	40020350 	.word	0x40020350
 8006bfc:	50020350 	.word	0x50020350
 8006c00:	400203d0 	.word	0x400203d0
 8006c04:	500203d0 	.word	0x500203d0
 8006c08:	40020450 	.word	0x40020450
 8006c0c:	50020450 	.word	0x50020450
 8006c10:	400204d0 	.word	0x400204d0
 8006c14:	500204d0 	.word	0x500204d0
 8006c18:	40020550 	.word	0x40020550
 8006c1c:	50020550 	.word	0x50020550
 8006c20:	400205d0 	.word	0x400205d0
 8006c24:	500205d0 	.word	0x500205d0
 8006c28:	40020650 	.word	0x40020650
 8006c2c:	50020650 	.word	0x50020650
 8006c30:	400206d0 	.word	0x400206d0
 8006c34:	500206d0 	.word	0x500206d0
 8006c38:	40020750 	.word	0x40020750
 8006c3c:	50020750 	.word	0x50020750
 8006c40:	400207d0 	.word	0x400207d0
 8006c44:	500207d0 	.word	0x500207d0
 8006c48:	3c803180 	.word	0x3c803180

08006c4c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e053      	b.n	8006d06 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fb fd60 	bl	8002738 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6851      	ldr	r1, [r2, #4]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	69d2      	ldr	r2, [r2, #28]
 8006c96:	4311      	orrs	r1, r2
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6812      	ldr	r2, [r2, #0]
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca6:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6891      	ldr	r1, [r2, #8]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6992      	ldr	r2, [r2, #24]
 8006cb6:	4311      	orrs	r1, r2
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6812      	ldr	r2, [r2, #0]
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc6:	0c1b      	lsrs	r3, r3, #16
 8006cc8:	041b      	lsls	r3, r3, #16
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68d1      	ldr	r1, [r2, #12]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6812      	ldr	r2, [r2, #0]
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cdc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	051a      	lsls	r2, r3, #20
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	055b      	lsls	r3, r3, #21
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_DMA2D_ConfigLayer+0x24>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e092      	b.n	8006e5a <HAL_DMA2D_ConfigLayer+0x14a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	4613      	mov	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	3328      	adds	r3, #40	@ 0x28
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	4413      	add	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	041b      	lsls	r3, r3, #16
 8006d60:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006d68:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006d74:	4b3c      	ldr	r3, [pc, #240]	@ (8006e68 <HAL_DMA2D_ConfigLayer+0x158>)
 8006d76:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b0a      	cmp	r3, #10
 8006d7e:	d003      	beq.n	8006d88 <HAL_DMA2D_ConfigLayer+0x78>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b09      	cmp	r3, #9
 8006d86:	d107      	bne.n	8006d98 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	e005      	b.n	8006da4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	061b      	lsls	r3, r3, #24
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d120      	bne.n	8006dec <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	43db      	mvns	r3, r3
 8006db4:	ea02 0103 	and.w	r1, r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	6812      	ldr	r2, [r2, #0]
 8006dca:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b0a      	cmp	r3, #10
 8006dd2:	d003      	beq.n	8006ddc <HAL_DMA2D_ConfigLayer+0xcc>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b09      	cmp	r3, #9
 8006dda:	d135      	bne.n	8006e48 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006de8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dea:	e02d      	b.n	8006e48 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b0b      	cmp	r3, #11
 8006df2:	d109      	bne.n	8006e08 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	049b      	lsls	r3, r3, #18
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006e06:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69da      	ldr	r2, [r3, #28]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	ea02 0103 	and.w	r1, r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b0a      	cmp	r3, #10
 8006e30:	d003      	beq.n	8006e3a <HAL_DMA2D_ConfigLayer+0x12a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b09      	cmp	r3, #9
 8006e38:	d106      	bne.n	8006e48 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006e46:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	ff33000f 	.word	0xff33000f

08006e6c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006e74:	f7fc fc84 	bl	8003780 <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0db      	b.n	800703c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a6e      	ldr	r2, [pc, #440]	@ (8007044 <HAL_DMAEx_List_Init+0x1d8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	f000 809f 	beq.w	8006fce <HAL_DMAEx_List_Init+0x162>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a6c      	ldr	r2, [pc, #432]	@ (8007048 <HAL_DMAEx_List_Init+0x1dc>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	f000 8099 	beq.w	8006fce <HAL_DMAEx_List_Init+0x162>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a6a      	ldr	r2, [pc, #424]	@ (800704c <HAL_DMAEx_List_Init+0x1e0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	f000 8093 	beq.w	8006fce <HAL_DMAEx_List_Init+0x162>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a68      	ldr	r2, [pc, #416]	@ (8007050 <HAL_DMAEx_List_Init+0x1e4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	f000 808d 	beq.w	8006fce <HAL_DMAEx_List_Init+0x162>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a66      	ldr	r2, [pc, #408]	@ (8007054 <HAL_DMAEx_List_Init+0x1e8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	f000 8087 	beq.w	8006fce <HAL_DMAEx_List_Init+0x162>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a64      	ldr	r2, [pc, #400]	@ (8007058 <HAL_DMAEx_List_Init+0x1ec>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f000 8081 	beq.w	8006fce <HAL_DMAEx_List_Init+0x162>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a62      	ldr	r2, [pc, #392]	@ (800705c <HAL_DMAEx_List_Init+0x1f0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d07b      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a61      	ldr	r2, [pc, #388]	@ (8007060 <HAL_DMAEx_List_Init+0x1f4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d076      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8007064 <HAL_DMAEx_List_Init+0x1f8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d071      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a5e      	ldr	r2, [pc, #376]	@ (8007068 <HAL_DMAEx_List_Init+0x1fc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d06c      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a5c      	ldr	r2, [pc, #368]	@ (800706c <HAL_DMAEx_List_Init+0x200>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d067      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a5b      	ldr	r2, [pc, #364]	@ (8007070 <HAL_DMAEx_List_Init+0x204>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d062      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a59      	ldr	r2, [pc, #356]	@ (8007074 <HAL_DMAEx_List_Init+0x208>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d05d      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a58      	ldr	r2, [pc, #352]	@ (8007078 <HAL_DMAEx_List_Init+0x20c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d058      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a56      	ldr	r2, [pc, #344]	@ (800707c <HAL_DMAEx_List_Init+0x210>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d053      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a55      	ldr	r2, [pc, #340]	@ (8007080 <HAL_DMAEx_List_Init+0x214>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d04e      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a53      	ldr	r2, [pc, #332]	@ (8007084 <HAL_DMAEx_List_Init+0x218>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d049      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a52      	ldr	r2, [pc, #328]	@ (8007088 <HAL_DMAEx_List_Init+0x21c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d044      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a50      	ldr	r2, [pc, #320]	@ (800708c <HAL_DMAEx_List_Init+0x220>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d03f      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a4f      	ldr	r2, [pc, #316]	@ (8007090 <HAL_DMAEx_List_Init+0x224>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d03a      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a4d      	ldr	r2, [pc, #308]	@ (8007094 <HAL_DMAEx_List_Init+0x228>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d035      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a4c      	ldr	r2, [pc, #304]	@ (8007098 <HAL_DMAEx_List_Init+0x22c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d030      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a4a      	ldr	r2, [pc, #296]	@ (800709c <HAL_DMAEx_List_Init+0x230>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d02b      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a49      	ldr	r2, [pc, #292]	@ (80070a0 <HAL_DMAEx_List_Init+0x234>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d026      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a47      	ldr	r2, [pc, #284]	@ (80070a4 <HAL_DMAEx_List_Init+0x238>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d021      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a46      	ldr	r2, [pc, #280]	@ (80070a8 <HAL_DMAEx_List_Init+0x23c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d01c      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a44      	ldr	r2, [pc, #272]	@ (80070ac <HAL_DMAEx_List_Init+0x240>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d017      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a43      	ldr	r2, [pc, #268]	@ (80070b0 <HAL_DMAEx_List_Init+0x244>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d012      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a41      	ldr	r2, [pc, #260]	@ (80070b4 <HAL_DMAEx_List_Init+0x248>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00d      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a40      	ldr	r2, [pc, #256]	@ (80070b8 <HAL_DMAEx_List_Init+0x24c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d008      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a3e      	ldr	r2, [pc, #248]	@ (80070bc <HAL_DMAEx_List_Init+0x250>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d003      	beq.n	8006fce <HAL_DMAEx_List_Init+0x162>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3d      	ldr	r2, [pc, #244]	@ (80070c0 <HAL_DMAEx_List_Init+0x254>)
 8006fcc:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695a      	ldr	r2, [r3, #20]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0206 	orr.w	r2, r2, #6
 8006fec:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006fee:	e00f      	b.n	8007010 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006ff0:	f7fc fbc6 	bl	8003780 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b05      	cmp	r3, #5
 8006ffc:	d908      	bls.n	8007010 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2210      	movs	r2, #16
 8007002:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2203      	movs	r2, #3
 8007008:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e015      	b.n	800703c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e8      	bne.n	8006ff0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fae0 	bl	80075e4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40020050 	.word	0x40020050
 8007048:	50020050 	.word	0x50020050
 800704c:	400200d0 	.word	0x400200d0
 8007050:	500200d0 	.word	0x500200d0
 8007054:	40020150 	.word	0x40020150
 8007058:	50020150 	.word	0x50020150
 800705c:	400201d0 	.word	0x400201d0
 8007060:	500201d0 	.word	0x500201d0
 8007064:	40020250 	.word	0x40020250
 8007068:	50020250 	.word	0x50020250
 800706c:	400202d0 	.word	0x400202d0
 8007070:	500202d0 	.word	0x500202d0
 8007074:	40020350 	.word	0x40020350
 8007078:	50020350 	.word	0x50020350
 800707c:	400203d0 	.word	0x400203d0
 8007080:	500203d0 	.word	0x500203d0
 8007084:	40020450 	.word	0x40020450
 8007088:	50020450 	.word	0x50020450
 800708c:	400204d0 	.word	0x400204d0
 8007090:	500204d0 	.word	0x500204d0
 8007094:	40020550 	.word	0x40020550
 8007098:	50020550 	.word	0x50020550
 800709c:	400205d0 	.word	0x400205d0
 80070a0:	500205d0 	.word	0x500205d0
 80070a4:	40020650 	.word	0x40020650
 80070a8:	50020650 	.word	0x50020650
 80070ac:	400206d0 	.word	0x400206d0
 80070b0:	500206d0 	.word	0x500206d0
 80070b4:	40020750 	.word	0x40020750
 80070b8:	50020750 	.word	0x50020750
 80070bc:	400207d0 	.word	0x400207d0
 80070c0:	500207d0 	.word	0x500207d0

080070c4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_DMAEx_List_Start_IT+0x16>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e082      	b.n	80071e4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80070e4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070f0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d005      	beq.n	8007104 <HAL_DMAEx_List_Start_IT+0x40>
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d16a      	bne.n	80071d4 <HAL_DMAEx_List_Start_IT+0x110>
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d067      	beq.n	80071d4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d157      	bne.n	80071c0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_DMAEx_List_Start_IT+0x5a>
 800711a:	2302      	movs	r3, #2
 800711c:	e062      	b.n	80071e4 <HAL_DMAEx_List_Start_IT+0x120>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007132:	2202      	movs	r2, #2
 8007134:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007140:	2200      	movs	r2, #0
 8007142:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695a      	ldr	r2, [r3, #20]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8007152:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800716a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007182:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f107 010c 	add.w	r1, r7, #12
 800718e:	2200      	movs	r2, #0
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fe47 	bl	8007e24 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	0c0b      	lsrs	r3, r1, #16
 80071a4:	041b      	lsls	r3, r3, #16
 80071a6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80071b4:	4013      	ands	r3, r2
 80071b6:	68f9      	ldr	r1, [r7, #12]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	430b      	orrs	r3, r1
 80071be:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695a      	ldr	r2, [r3, #20]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	e007      	b.n	80071e4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2240      	movs	r2, #64	@ 0x40
 80071d8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <HAL_DMAEx_List_BuildNode+0x16>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e004      	b.n	8007210 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fb43 	bl	8007894 <DMA_List_BuildNode>

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e004      	b.n	800723c <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fc7f 	bl	8007b38 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08c      	sub	sp, #48	@ 0x30
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_DMAEx_List_InsertNode+0x18>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e0b6      	b.n	80073ce <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d104      	bne.n	8007272 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2204      	movs	r2, #4
 800726c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e0ad      	b.n	80073ce <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fd66 	bl	8007d4c <DMA_List_CheckNodesBaseAddresses>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d004      	beq.n	8007290 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2205      	movs	r2, #5
 800728a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e09e      	b.n	80073ce <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fd87 	bl	8007dac <DMA_List_CheckNodesTypes>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d004      	beq.n	80072ae <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2204      	movs	r2, #4
 80072a8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e08f      	b.n	80073ce <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2202      	movs	r2, #2
 80072b2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80072ba:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80072be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fdad 	bl	8007e24 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d11a      	bne.n	8007308 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d106      	bne.n	80072e6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	609a      	str	r2, [r3, #8]
 80072e4:	e06c      	b.n	80073c0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80072f2:	4013      	ands	r3, r2
 80072f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072f8:	4319      	orrs	r1, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2202      	movs	r2, #2
 8007304:	609a      	str	r2, [r3, #8]
 8007306:	e05b      	b.n	80073c0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10f      	bne.n	800732e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007318:	4013      	ands	r3, r2
 800731a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800731c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800731e:	4319      	orrs	r1, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	e043      	b.n	80073b6 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800732e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007330:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8007332:	f107 0314 	add.w	r3, r7, #20
 8007336:	461a      	mov	r2, r3
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fda2 	bl	8007e84 <DMA_List_FindNode>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d132      	bne.n	80073ac <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	429a      	cmp	r2, r3
 800734e:	d11a      	bne.n	8007386 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	461a      	mov	r2, r3
 800735e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007362:	4013      	ands	r3, r2
 8007364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007368:	4319      	orrs	r1, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007376:	4013      	ands	r3, r2
 8007378:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800737a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800737c:	4319      	orrs	r1, r3
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007384:	e017      	b.n	80073b6 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8007386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800739c:	4013      	ands	r3, r2
 800739e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073a2:	4319      	orrs	r1, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80073aa:	e004      	b.n	80073b6 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2206      	movs	r2, #6
 80073b0:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e00b      	b.n	80073ce <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3730      	adds	r7, #48	@ 0x30
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b08a      	sub	sp, #40	@ 0x28
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e052      	b.n	800748e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d104      	bne.n	80073fa <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e049      	b.n	800748e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00c      	beq.n	800741c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d101      	bne.n	8007412 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	e03d      	b.n	800748e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2204      	movs	r2, #4
 8007416:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e038      	b.n	800748e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d104      	bne.n	800742e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2204      	movs	r2, #4
 8007428:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e02f      	b.n	800748e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f107 0220 	add.w	r2, r7, #32
 8007442:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fcec 	bl	8007e24 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8007450:	f107 030c 	add.w	r3, r7, #12
 8007454:	461a      	mov	r2, r3
 8007456:	2100      	movs	r1, #0
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fd13 	bl	8007e84 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007468:	4013      	ands	r3, r2
 800746a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	4610      	mov	r0, r2
 8007470:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8007472:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007474:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3728      	adds	r7, #40	@ 0x28
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <HAL_DMAEx_List_LinkQ+0x16>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e072      	b.n	8007598 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80074b8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d002      	beq.n	80074cc <HAL_DMAEx_List_LinkQ+0x34>
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	d108      	bne.n	80074de <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2240      	movs	r2, #64	@ 0x40
 80074d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e05c      	b.n	8007598 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	7b1b      	ldrb	r3, [r3, #12]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d104      	bne.n	80074f2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2201      	movs	r2, #1
 80074ec:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e052      	b.n	8007598 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2b      	ldr	r2, [pc, #172]	@ (80075a4 <HAL_DMAEx_List_LinkQ+0x10c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d022      	beq.n	8007542 <HAL_DMAEx_List_LinkQ+0xaa>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a29      	ldr	r2, [pc, #164]	@ (80075a8 <HAL_DMAEx_List_LinkQ+0x110>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01d      	beq.n	8007542 <HAL_DMAEx_List_LinkQ+0xaa>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a28      	ldr	r2, [pc, #160]	@ (80075ac <HAL_DMAEx_List_LinkQ+0x114>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d018      	beq.n	8007542 <HAL_DMAEx_List_LinkQ+0xaa>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a26      	ldr	r2, [pc, #152]	@ (80075b0 <HAL_DMAEx_List_LinkQ+0x118>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <HAL_DMAEx_List_LinkQ+0xaa>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a25      	ldr	r2, [pc, #148]	@ (80075b4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00e      	beq.n	8007542 <HAL_DMAEx_List_LinkQ+0xaa>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a23      	ldr	r2, [pc, #140]	@ (80075b8 <HAL_DMAEx_List_LinkQ+0x120>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d009      	beq.n	8007542 <HAL_DMAEx_List_LinkQ+0xaa>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a22      	ldr	r2, [pc, #136]	@ (80075bc <HAL_DMAEx_List_LinkQ+0x124>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <HAL_DMAEx_List_LinkQ+0xaa>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a20      	ldr	r2, [pc, #128]	@ (80075c0 <HAL_DMAEx_List_LinkQ+0x128>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d101      	bne.n	8007546 <HAL_DMAEx_List_LinkQ+0xae>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <HAL_DMAEx_List_LinkQ+0xb0>
 8007546:	2300      	movs	r3, #0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10b      	bne.n	8007564 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8007556:	2b00      	cmp	r3, #0
 8007558:	d004      	beq.n	8007564 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2203      	movs	r2, #3
 800755e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e019      	b.n	8007598 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007568:	2b81      	cmp	r3, #129	@ 0x81
 800756a:	d108      	bne.n	800757e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10d      	bne.n	8007590 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2204      	movs	r2, #4
 8007578:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e00c      	b.n	8007598 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d004      	beq.n	8007590 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2204      	movs	r2, #4
 800758a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e003      	b.n	8007598 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	40020650 	.word	0x40020650
 80075a8:	50020650 	.word	0x50020650
 80075ac:	400206d0 	.word	0x400206d0
 80075b0:	500206d0 	.word	0x500206d0
 80075b4:	40020750 	.word	0x40020750
 80075b8:	50020750 	.word	0x50020750
 80075bc:	400207d0 	.word	0x400207d0
 80075c0:	500207d0 	.word	0x500207d0

080075c4 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	0c1b      	lsrs	r3, r3, #16
 80075d4:	b2db      	uxtb	r3, r3
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
	...

080075e4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a85      	ldr	r2, [pc, #532]	@ (8007814 <DMA_List_Init+0x230>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	f000 80a0 	beq.w	8007744 <DMA_List_Init+0x160>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a83      	ldr	r2, [pc, #524]	@ (8007818 <DMA_List_Init+0x234>)
 800760a:	4293      	cmp	r3, r2
 800760c:	f000 809a 	beq.w	8007744 <DMA_List_Init+0x160>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a81      	ldr	r2, [pc, #516]	@ (800781c <DMA_List_Init+0x238>)
 8007616:	4293      	cmp	r3, r2
 8007618:	f000 8094 	beq.w	8007744 <DMA_List_Init+0x160>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a7f      	ldr	r2, [pc, #508]	@ (8007820 <DMA_List_Init+0x23c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	f000 808e 	beq.w	8007744 <DMA_List_Init+0x160>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a7d      	ldr	r2, [pc, #500]	@ (8007824 <DMA_List_Init+0x240>)
 800762e:	4293      	cmp	r3, r2
 8007630:	f000 8088 	beq.w	8007744 <DMA_List_Init+0x160>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a7b      	ldr	r2, [pc, #492]	@ (8007828 <DMA_List_Init+0x244>)
 800763a:	4293      	cmp	r3, r2
 800763c:	f000 8082 	beq.w	8007744 <DMA_List_Init+0x160>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a79      	ldr	r2, [pc, #484]	@ (800782c <DMA_List_Init+0x248>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d07c      	beq.n	8007744 <DMA_List_Init+0x160>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a78      	ldr	r2, [pc, #480]	@ (8007830 <DMA_List_Init+0x24c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d077      	beq.n	8007744 <DMA_List_Init+0x160>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a76      	ldr	r2, [pc, #472]	@ (8007834 <DMA_List_Init+0x250>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d072      	beq.n	8007744 <DMA_List_Init+0x160>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a75      	ldr	r2, [pc, #468]	@ (8007838 <DMA_List_Init+0x254>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d06d      	beq.n	8007744 <DMA_List_Init+0x160>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a73      	ldr	r2, [pc, #460]	@ (800783c <DMA_List_Init+0x258>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d068      	beq.n	8007744 <DMA_List_Init+0x160>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a72      	ldr	r2, [pc, #456]	@ (8007840 <DMA_List_Init+0x25c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d063      	beq.n	8007744 <DMA_List_Init+0x160>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a70      	ldr	r2, [pc, #448]	@ (8007844 <DMA_List_Init+0x260>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d05e      	beq.n	8007744 <DMA_List_Init+0x160>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a6f      	ldr	r2, [pc, #444]	@ (8007848 <DMA_List_Init+0x264>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d059      	beq.n	8007744 <DMA_List_Init+0x160>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a6d      	ldr	r2, [pc, #436]	@ (800784c <DMA_List_Init+0x268>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d054      	beq.n	8007744 <DMA_List_Init+0x160>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a6c      	ldr	r2, [pc, #432]	@ (8007850 <DMA_List_Init+0x26c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d04f      	beq.n	8007744 <DMA_List_Init+0x160>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a6a      	ldr	r2, [pc, #424]	@ (8007854 <DMA_List_Init+0x270>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d04a      	beq.n	8007744 <DMA_List_Init+0x160>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a69      	ldr	r2, [pc, #420]	@ (8007858 <DMA_List_Init+0x274>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d045      	beq.n	8007744 <DMA_List_Init+0x160>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a67      	ldr	r2, [pc, #412]	@ (800785c <DMA_List_Init+0x278>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d040      	beq.n	8007744 <DMA_List_Init+0x160>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a66      	ldr	r2, [pc, #408]	@ (8007860 <DMA_List_Init+0x27c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d03b      	beq.n	8007744 <DMA_List_Init+0x160>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a64      	ldr	r2, [pc, #400]	@ (8007864 <DMA_List_Init+0x280>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d036      	beq.n	8007744 <DMA_List_Init+0x160>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a63      	ldr	r2, [pc, #396]	@ (8007868 <DMA_List_Init+0x284>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d031      	beq.n	8007744 <DMA_List_Init+0x160>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a61      	ldr	r2, [pc, #388]	@ (800786c <DMA_List_Init+0x288>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d02c      	beq.n	8007744 <DMA_List_Init+0x160>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a60      	ldr	r2, [pc, #384]	@ (8007870 <DMA_List_Init+0x28c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d027      	beq.n	8007744 <DMA_List_Init+0x160>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a5e      	ldr	r2, [pc, #376]	@ (8007874 <DMA_List_Init+0x290>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d022      	beq.n	8007744 <DMA_List_Init+0x160>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a5d      	ldr	r2, [pc, #372]	@ (8007878 <DMA_List_Init+0x294>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d01d      	beq.n	8007744 <DMA_List_Init+0x160>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a5b      	ldr	r2, [pc, #364]	@ (800787c <DMA_List_Init+0x298>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d018      	beq.n	8007744 <DMA_List_Init+0x160>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a5a      	ldr	r2, [pc, #360]	@ (8007880 <DMA_List_Init+0x29c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d013      	beq.n	8007744 <DMA_List_Init+0x160>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a58      	ldr	r2, [pc, #352]	@ (8007884 <DMA_List_Init+0x2a0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00e      	beq.n	8007744 <DMA_List_Init+0x160>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a57      	ldr	r2, [pc, #348]	@ (8007888 <DMA_List_Init+0x2a4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d009      	beq.n	8007744 <DMA_List_Init+0x160>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a55      	ldr	r2, [pc, #340]	@ (800788c <DMA_List_Init+0x2a8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <DMA_List_Init+0x160>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a54      	ldr	r2, [pc, #336]	@ (8007890 <DMA_List_Init+0x2ac>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d101      	bne.n	8007748 <DMA_List_Init+0x164>
 8007744:	2301      	movs	r3, #1
 8007746:	e000      	b.n	800774a <DMA_List_Init+0x166>
 8007748:	2300      	movs	r3, #0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	430a      	orrs	r2, r1
 800776a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2200      	movs	r2, #0
 8007772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800777c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2200      	movs	r2, #0
 8007784:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2200      	movs	r2, #0
 800778c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a36      	ldr	r2, [pc, #216]	@ (8007874 <DMA_List_Init+0x290>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d022      	beq.n	80077e6 <DMA_List_Init+0x202>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a34      	ldr	r2, [pc, #208]	@ (8007878 <DMA_List_Init+0x294>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01d      	beq.n	80077e6 <DMA_List_Init+0x202>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a33      	ldr	r2, [pc, #204]	@ (800787c <DMA_List_Init+0x298>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d018      	beq.n	80077e6 <DMA_List_Init+0x202>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a31      	ldr	r2, [pc, #196]	@ (8007880 <DMA_List_Init+0x29c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d013      	beq.n	80077e6 <DMA_List_Init+0x202>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a30      	ldr	r2, [pc, #192]	@ (8007884 <DMA_List_Init+0x2a0>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00e      	beq.n	80077e6 <DMA_List_Init+0x202>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007888 <DMA_List_Init+0x2a4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d009      	beq.n	80077e6 <DMA_List_Init+0x202>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a2d      	ldr	r2, [pc, #180]	@ (800788c <DMA_List_Init+0x2a8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d004      	beq.n	80077e6 <DMA_List_Init+0x202>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007890 <DMA_List_Init+0x2ac>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d101      	bne.n	80077ea <DMA_List_Init+0x206>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <DMA_List_Init+0x208>
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2200      	movs	r2, #0
 80077f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2200      	movs	r2, #0
 80077fe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2200      	movs	r2, #0
 8007806:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007808:	bf00      	nop
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	40020050 	.word	0x40020050
 8007818:	50020050 	.word	0x50020050
 800781c:	400200d0 	.word	0x400200d0
 8007820:	500200d0 	.word	0x500200d0
 8007824:	40020150 	.word	0x40020150
 8007828:	50020150 	.word	0x50020150
 800782c:	400201d0 	.word	0x400201d0
 8007830:	500201d0 	.word	0x500201d0
 8007834:	40020250 	.word	0x40020250
 8007838:	50020250 	.word	0x50020250
 800783c:	400202d0 	.word	0x400202d0
 8007840:	500202d0 	.word	0x500202d0
 8007844:	40020350 	.word	0x40020350
 8007848:	50020350 	.word	0x50020350
 800784c:	400203d0 	.word	0x400203d0
 8007850:	500203d0 	.word	0x500203d0
 8007854:	40020450 	.word	0x40020450
 8007858:	50020450 	.word	0x50020450
 800785c:	400204d0 	.word	0x400204d0
 8007860:	500204d0 	.word	0x500204d0
 8007864:	40020550 	.word	0x40020550
 8007868:	50020550 	.word	0x50020550
 800786c:	400205d0 	.word	0x400205d0
 8007870:	500205d0 	.word	0x500205d0
 8007874:	40020650 	.word	0x40020650
 8007878:	50020650 	.word	0x50020650
 800787c:	400206d0 	.word	0x400206d0
 8007880:	500206d0 	.word	0x500206d0
 8007884:	40020750 	.word	0x40020750
 8007888:	50020750 	.word	0x50020750
 800788c:	400207d0 	.word	0x400207d0
 8007890:	500207d0 	.word	0x500207d0

08007894 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80078a6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80078ac:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80078b2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80078b8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d017      	beq.n	80078fa <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	3b01      	subs	r3, #1
 80078de:	051b      	lsls	r3, r3, #20
 80078e0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80078e4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ea:	3b01      	subs	r3, #1
 80078ec:	011b      	lsls	r3, r3, #4
 80078ee:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80078f2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80078f4:	431a      	orrs	r2, r3
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6859      	ldr	r1, [r3, #4]
 8007902:	f240 237f 	movw	r3, #639	@ 0x27f
 8007906:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8007908:	431a      	orrs	r2, r3
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007916:	d10c      	bne.n	8007932 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b00      	cmp	r3, #0
 8007922:	d011      	beq.n	8007948 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	605a      	str	r2, [r3, #4]
 8007930:	e00a      	b.n	8007948 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800793a:	d105      	bne.n	8007948 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00f      	beq.n	8007970 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007962:	041b      	lsls	r3, r3, #16
 8007964:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007968:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800796a:	431a      	orrs	r2, r3
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007974:	b29a      	uxth	r2, r3
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d04e      	beq.n	8007a24 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800798e:	3b01      	subs	r3, #1
 8007990:	0419      	lsls	r1, r3, #16
 8007992:	4b67      	ldr	r3, [pc, #412]	@ (8007b30 <DMA_List_BuildNode+0x29c>)
 8007994:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007996:	431a      	orrs	r2, r3
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	da06      	bge.n	80079b2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	609a      	str	r2, [r3, #8]
 80079b0:	e005      	b.n	80079be <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da06      	bge.n	80079d4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	609a      	str	r2, [r3, #8]
 80079d2:	e005      	b.n	80079e0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da06      	bge.n	80079f6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	609a      	str	r2, [r3, #8]
 80079f4:	e005      	b.n	8007a02 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da06      	bge.n	8007a18 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	609a      	str	r2, [r3, #8]
 8007a16:	e005      	b.n	8007a24 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d059      	beq.n	8007af4 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da09      	bge.n	8007a5c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a4c:	425b      	negs	r3, r3
 8007a4e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	615a      	str	r2, [r3, #20]
 8007a5a:	e005      	b.n	8007a68 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a60:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	da0d      	bge.n	8007a8c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a74:	425b      	negs	r3, r3
 8007a76:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	0419      	lsls	r1, r3, #16
 8007a80:	4b2c      	ldr	r3, [pc, #176]	@ (8007b34 <DMA_List_BuildNode+0x2a0>)
 8007a82:	400b      	ands	r3, r1
 8007a84:	431a      	orrs	r2, r3
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	615a      	str	r2, [r3, #20]
 8007a8a:	e009      	b.n	8007aa0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a94:	0419      	lsls	r1, r3, #16
 8007a96:	4b27      	ldr	r3, [pc, #156]	@ (8007b34 <DMA_List_BuildNode+0x2a0>)
 8007a98:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da08      	bge.n	8007aba <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aac:	425b      	negs	r3, r3
 8007aae:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	619a      	str	r2, [r3, #24]
 8007ab8:	e004      	b.n	8007ac4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007abe:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da0b      	bge.n	8007ae4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ad0:	425b      	negs	r3, r3
 8007ad2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007adc:	431a      	orrs	r2, r3
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	619a      	str	r2, [r3, #24]
 8007ae2:	e007      	b.n	8007af4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aec:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007aee:	431a      	orrs	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d006      	beq.n	8007b16 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007b14:	e005      	b.n	8007b22 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	07ff0000 	.word	0x07ff0000
 8007b34:	1fff0000 	.word	0x1fff0000

08007b38 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0208 	and.w	r2, r3, #8
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0203 	and.w	r2, r3, #3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007b80:	091b      	lsrs	r3, r3, #4
 8007b82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b86:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8007b90:	0d1b      	lsrs	r3, r3, #20
 8007b92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b96:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	4b66      	ldr	r3, [pc, #408]	@ (8007d48 <DMA_List_GetNodeConfig+0x210>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bd2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bda:	60da      	str	r2, [r3, #12]
 8007bdc:	e013      	b.n	8007c06 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d004      	beq.n	8007c00 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007bfc:	60da      	str	r2, [r3, #12]
 8007bfe:	e002      	b.n	8007c06 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8007c2e:	0c1b      	lsrs	r3, r3, #16
 8007c30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d008      	beq.n	8007c6c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	0c1b      	lsrs	r3, r3, #16
 8007c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c64:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007c6a:	e002      	b.n	8007c72 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d04a      	beq.n	8007d24 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c98:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007c9a:	89fa      	ldrh	r2, [r7, #14]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cac:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8007cae:	89fa      	ldrh	r2, [r7, #14]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc4:	425a      	negs	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d004      	beq.n	8007ce0 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cda:	425a      	negs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007ce6:	89fa      	ldrh	r2, [r7, #14]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	0c1b      	lsrs	r3, r3, #16
 8007cf2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007cf4:	89fa      	ldrh	r2, [r7, #14]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d0a:	425a      	negs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	da11      	bge.n	8007d3c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d1c:	425a      	negs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007d22:	e00b      	b.n	8007d3c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	0c002000 	.word	0x0c002000

08007d4c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	0c1b      	lsrs	r3, r3, #16
 8007d64:	041b      	lsls	r3, r3, #16
 8007d66:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	e00a      	b.n	8007d8e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	e004      	b.n	8007d8e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	0c1b      	lsrs	r3, r3, #16
 8007d92:	041b      	lsls	r3, r3, #16
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d001      	beq.n	8007d9e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d004      	beq.n	8007dcc <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	e00e      	b.n	8007dea <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d004      	beq.n	8007ddc <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	e006      	b.n	8007dea <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d001      	beq.n	8007e00 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e00b      	b.n	8007e18 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d001      	beq.n	8007e16 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e000      	b.n	8007e18 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00c      	beq.n	8007e56 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	4a0d      	ldr	r2, [pc, #52]	@ (8007e7c <DMA_List_GetCLLRNodeInfo+0x58>)
 8007e46:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00f      	beq.n	8007e6e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2207      	movs	r2, #7
 8007e52:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007e54:	e00b      	b.n	8007e6e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4a08      	ldr	r2, [pc, #32]	@ (8007e80 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007e60:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2205      	movs	r2, #5
 8007e6c:	601a      	str	r2, [r3, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	fe010000 	.word	0xfe010000
 8007e80:	f8010000 	.word	0xf8010000

08007e84 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b089      	sub	sp, #36	@ 0x24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d142      	bne.n	8007f2e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007ea8:	e01d      	b.n	8007ee6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d107      	bne.n	8007ec0 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007eba:	4013      	ands	r3, r2
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	e00f      	b.n	8007ee0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	0c1b      	lsrs	r3, r3, #16
 8007eca:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	4413      	add	r3, r2
 8007ed0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007ed8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007edc:	4013      	ands	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d3dc      	bcc.n	8007eaa <DMA_List_FindNode+0x26>
 8007ef0:	e029      	b.n	8007f46 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d107      	bne.n	8007f08 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007f02:	4013      	ands	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	e00f      	b.n	8007f28 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	0c1b      	lsrs	r3, r3, #16
 8007f12:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4413      	add	r3, r2
 8007f18:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007f20:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007f24:	4013      	ands	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d206      	bcs.n	8007f46 <DMA_List_FindNode+0xc2>
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007f3e:	4013      	ands	r3, r2
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d1d5      	bne.n	8007ef2 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d008      	beq.n	8007f5e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007f52:	4013      	ands	r3, r2
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d001      	beq.n	8007f5e <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e02b      	b.n	8007fb6 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	0c1b      	lsrs	r3, r3, #16
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	0c1b      	lsrs	r3, r3, #16
 8007f7a:	041b      	lsls	r3, r3, #16
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00f      	beq.n	8007fb4 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007fa4:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	0c1b      	lsrs	r3, r3, #16
 8007fac:	041b      	lsls	r3, r3, #16
 8007fae:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3724      	adds	r7, #36	@ 0x24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b089      	sub	sp, #36	@ 0x24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007fd6:	e1ba      	b.n	800834e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	2101      	movs	r1, #1
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 81aa 	beq.w	8008348 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a55      	ldr	r2, [pc, #340]	@ (800814c <HAL_GPIO_Init+0x188>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d15d      	bne.n	80080b8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8008002:	2201      	movs	r2, #1
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	43db      	mvns	r3, r3
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	4013      	ands	r3, r2
 8008010:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f003 0201 	and.w	r2, r3, #1
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	4313      	orrs	r3, r2
 8008024:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800802c:	4a48      	ldr	r2, [pc, #288]	@ (8008150 <HAL_GPIO_Init+0x18c>)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008034:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8008036:	4a46      	ldr	r2, [pc, #280]	@ (8008150 <HAL_GPIO_Init+0x18c>)
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	4413      	add	r3, r2
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	08da      	lsrs	r2, r3, #3
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	3208      	adds	r2, #8
 800804a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	220f      	movs	r2, #15
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43db      	mvns	r3, r3
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	4013      	ands	r3, r2
 8008064:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	220b      	movs	r2, #11
 8008070:	fa02 f303 	lsl.w	r3, r2, r3
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	4313      	orrs	r3, r2
 8008078:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	08da      	lsrs	r2, r3, #3
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	3208      	adds	r2, #8
 8008082:	69f9      	ldr	r1, [r7, #28]
 8008084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	2203      	movs	r2, #3
 8008094:	fa02 f303 	lsl.w	r3, r2, r3
 8008098:	43db      	mvns	r3, r3
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	4013      	ands	r3, r2
 800809e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	2202      	movs	r2, #2
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	e067      	b.n	8008188 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d003      	beq.n	80080c8 <HAL_GPIO_Init+0x104>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b12      	cmp	r3, #18
 80080c6:	d145      	bne.n	8008154 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	08da      	lsrs	r2, r3, #3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3208      	adds	r2, #8
 80080d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	220f      	movs	r2, #15
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	43db      	mvns	r3, r3
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	4013      	ands	r3, r2
 80080ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	f003 020f 	and.w	r2, r3, #15
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	4313      	orrs	r3, r2
 8008104:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	08da      	lsrs	r2, r3, #3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3208      	adds	r2, #8
 800810e:	69f9      	ldr	r1, [r7, #28]
 8008110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	2203      	movs	r2, #3
 8008120:	fa02 f303 	lsl.w	r3, r2, r3
 8008124:	43db      	mvns	r3, r3
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	4013      	ands	r3, r2
 800812a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f003 0203 	and.w	r2, r3, #3
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	fa02 f303 	lsl.w	r3, r2, r3
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	4313      	orrs	r3, r2
 8008140:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	e01e      	b.n	8008188 <HAL_GPIO_Init+0x1c4>
 800814a:	bf00      	nop
 800814c:	46020000 	.word	0x46020000
 8008150:	08012800 	.word	0x08012800
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	2203      	movs	r2, #3
 8008160:	fa02 f303 	lsl.w	r3, r2, r3
 8008164:	43db      	mvns	r3, r3
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	4013      	ands	r3, r2
 800816a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f003 0203 	and.w	r2, r3, #3
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	fa02 f303 	lsl.w	r3, r2, r3
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	4313      	orrs	r3, r2
 8008180:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d00b      	beq.n	80081a8 <HAL_GPIO_Init+0x1e4>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2b02      	cmp	r3, #2
 8008196:	d007      	beq.n	80081a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800819c:	2b11      	cmp	r3, #17
 800819e:	d003      	beq.n	80081a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2b12      	cmp	r3, #18
 80081a6:	d130      	bne.n	800820a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	005b      	lsls	r3, r3, #1
 80081b2:	2203      	movs	r2, #3
 80081b4:	fa02 f303 	lsl.w	r3, r2, r3
 80081b8:	43db      	mvns	r3, r3
 80081ba:	69fa      	ldr	r2, [r7, #28]
 80081bc:	4013      	ands	r3, r2
 80081be:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	fa02 f303 	lsl.w	r3, r2, r3
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	69fa      	ldr	r2, [r7, #28]
 80081d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80081de:	2201      	movs	r2, #1
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	fa02 f303 	lsl.w	r3, r2, r3
 80081e6:	43db      	mvns	r3, r3
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	4013      	ands	r3, r2
 80081ec:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	091b      	lsrs	r3, r3, #4
 80081f4:	f003 0201 	and.w	r2, r3, #1
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	fa02 f303 	lsl.w	r3, r2, r3
 80081fe:	69fa      	ldr	r2, [r7, #28]
 8008200:	4313      	orrs	r3, r2
 8008202:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2b03      	cmp	r3, #3
 8008210:	d017      	beq.n	8008242 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	2203      	movs	r2, #3
 800821e:	fa02 f303 	lsl.w	r3, r2, r3
 8008222:	43db      	mvns	r3, r3
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	4013      	ands	r3, r2
 8008228:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	005b      	lsls	r3, r3, #1
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	4313      	orrs	r3, r2
 800823a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d07c      	beq.n	8008348 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800824e:	4a47      	ldr	r2, [pc, #284]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	089b      	lsrs	r3, r3, #2
 8008254:	3318      	adds	r3, #24
 8008256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800825a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	220f      	movs	r2, #15
 8008266:	fa02 f303 	lsl.w	r3, r2, r3
 800826a:	43db      	mvns	r3, r3
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	4013      	ands	r3, r2
 8008270:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	0a9a      	lsrs	r2, r3, #10
 8008276:	4b3e      	ldr	r3, [pc, #248]	@ (8008370 <HAL_GPIO_Init+0x3ac>)
 8008278:	4013      	ands	r3, r2
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	f002 0203 	and.w	r2, r2, #3
 8008280:	00d2      	lsls	r2, r2, #3
 8008282:	4093      	lsls	r3, r2
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	4313      	orrs	r3, r2
 8008288:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800828a:	4938      	ldr	r1, [pc, #224]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	089b      	lsrs	r3, r3, #2
 8008290:	3318      	adds	r3, #24
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8008298:	4b34      	ldr	r3, [pc, #208]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	43db      	mvns	r3, r3
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	4013      	ands	r3, r2
 80082a6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80082bc:	4a2b      	ldr	r2, [pc, #172]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80082c2:	4b2a      	ldr	r3, [pc, #168]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	43db      	mvns	r3, r3
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	4013      	ands	r3, r2
 80082d0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80082e6:	4a21      	ldr	r2, [pc, #132]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80082ec:	4b1f      	ldr	r3, [pc, #124]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 80082ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	43db      	mvns	r3, r3
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	4013      	ands	r3, r2
 80082fc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8008312:	4a16      	ldr	r2, [pc, #88]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800831a:	4b14      	ldr	r3, [pc, #80]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 800831c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008320:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	43db      	mvns	r3, r3
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	4013      	ands	r3, r2
 800832a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8008340:	4a0a      	ldr	r2, [pc, #40]	@ (800836c <HAL_GPIO_Init+0x3a8>)
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	3301      	adds	r3, #1
 800834c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	fa22 f303 	lsr.w	r3, r2, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	f47f ae3d 	bne.w	8007fd8 <HAL_GPIO_Init+0x14>
  }
}
 800835e:	bf00      	nop
 8008360:	bf00      	nop
 8008362:	3724      	adds	r7, #36	@ 0x24
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	46022000 	.word	0x46022000
 8008370:	002f7f7f 	.word	0x002f7f7f

08008374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	807b      	strh	r3, [r7, #2]
 8008380:	4613      	mov	r3, r2
 8008382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008384:	787b      	ldrb	r3, [r7, #1]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800838a:	887a      	ldrh	r2, [r7, #2]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8008390:	e002      	b.n	8008398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8008392:	887a      	ldrh	r2, [r7, #2]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80083ae:	4b0f      	ldr	r3, [pc, #60]	@ (80083ec <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	88fb      	ldrh	r3, [r7, #6]
 80083b4:	4013      	ands	r3, r2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d006      	beq.n	80083c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80083ba:	4a0c      	ldr	r2, [pc, #48]	@ (80083ec <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80083bc:	88fb      	ldrh	r3, [r7, #6]
 80083be:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80083c0:	88fb      	ldrh	r3, [r7, #6]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f814 	bl	80083f0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80083c8:	4b08      	ldr	r3, [pc, #32]	@ (80083ec <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	4013      	ands	r3, r2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d006      	beq.n	80083e2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80083d4:	4a05      	ldr	r2, [pc, #20]	@ (80083ec <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f812 	bl	8008406 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80083e2:	bf00      	nop
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	46022000 	.word	0x46022000

080083f0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	4603      	mov	r3, r0
 800840e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e08d      	b.n	800854a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7fa fa06 	bl	8002854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2224      	movs	r2, #36	@ 0x24
 800844c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0201 	bic.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800846c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800847c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d107      	bne.n	8008496 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008492:	609a      	str	r2, [r3, #8]
 8008494:	e006      	b.n	80084a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80084a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d108      	bne.n	80084be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084ba:	605a      	str	r2, [r3, #4]
 80084bc:	e007      	b.n	80084ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80084dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68da      	ldr	r2, [r3, #12]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691a      	ldr	r2, [r3, #16]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	69d9      	ldr	r1, [r3, #28]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a1a      	ldr	r2, [r3, #32]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0201 	orr.w	r2, r2, #1
 800852a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af02      	add	r7, sp, #8
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	607a      	str	r2, [r7, #4]
 800855e:	461a      	mov	r2, r3
 8008560:	460b      	mov	r3, r1
 8008562:	817b      	strh	r3, [r7, #10]
 8008564:	4613      	mov	r3, r2
 8008566:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b20      	cmp	r3, #32
 8008572:	f040 80da 	bne.w	800872a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <HAL_I2C_Master_Transmit+0x30>
 8008580:	2302      	movs	r3, #2
 8008582:	e0d3      	b.n	800872c <HAL_I2C_Master_Transmit+0x1d8>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800858c:	f7fb f8f8 	bl	8003780 <HAL_GetTick>
 8008590:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	2319      	movs	r3, #25
 8008598:	2201      	movs	r2, #1
 800859a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 fe7d 	bl	800929e <I2C_WaitOnFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e0be      	b.n	800872c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2221      	movs	r2, #33	@ 0x21
 80085b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2210      	movs	r2, #16
 80085ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	893a      	ldrh	r2, [r7, #8]
 80085ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085da:	b29b      	uxth	r3, r3
 80085dc:	2bff      	cmp	r3, #255	@ 0xff
 80085de:	d90e      	bls.n	80085fe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	22ff      	movs	r2, #255	@ 0xff
 80085e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	8979      	ldrh	r1, [r7, #10]
 80085ee:	4b51      	ldr	r3, [pc, #324]	@ (8008734 <HAL_I2C_Master_Transmit+0x1e0>)
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f001 f814 	bl	8009624 <I2C_TransferConfig>
 80085fc:	e06c      	b.n	80086d8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800860c:	b2da      	uxtb	r2, r3
 800860e:	8979      	ldrh	r1, [r7, #10]
 8008610:	4b48      	ldr	r3, [pc, #288]	@ (8008734 <HAL_I2C_Master_Transmit+0x1e0>)
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f001 f803 	bl	8009624 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800861e:	e05b      	b.n	80086d8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	6a39      	ldr	r1, [r7, #32]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fe93 	bl	8009350 <I2C_WaitOnTXISFlagUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e07b      	b.n	800872c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800864e:	b29b      	uxth	r3, r3
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800865c:	3b01      	subs	r3, #1
 800865e:	b29a      	uxth	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008668:	b29b      	uxth	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d034      	beq.n	80086d8 <HAL_I2C_Master_Transmit+0x184>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008672:	2b00      	cmp	r3, #0
 8008674:	d130      	bne.n	80086d8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	2200      	movs	r2, #0
 800867e:	2180      	movs	r1, #128	@ 0x80
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 fe0c 	bl	800929e <I2C_WaitOnFlagUntilTimeout>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e04d      	b.n	800872c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008694:	b29b      	uxth	r3, r3
 8008696:	2bff      	cmp	r3, #255	@ 0xff
 8008698:	d90e      	bls.n	80086b8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	22ff      	movs	r2, #255	@ 0xff
 800869e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	8979      	ldrh	r1, [r7, #10]
 80086a8:	2300      	movs	r3, #0
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 ffb7 	bl	8009624 <I2C_TransferConfig>
 80086b6:	e00f      	b.n	80086d8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086bc:	b29a      	uxth	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	8979      	ldrh	r1, [r7, #10]
 80086ca:	2300      	movs	r3, #0
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 ffa6 	bl	8009624 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d19e      	bne.n	8008620 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	6a39      	ldr	r1, [r7, #32]
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f000 fe79 	bl	80093de <I2C_WaitOnSTOPFlagUntilTimeout>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e01a      	b.n	800872c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2220      	movs	r2, #32
 80086fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6859      	ldr	r1, [r3, #4]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	4b0b      	ldr	r3, [pc, #44]	@ (8008738 <HAL_I2C_Master_Transmit+0x1e4>)
 800870a:	400b      	ands	r3, r1
 800870c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2220      	movs	r2, #32
 8008712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	e000      	b.n	800872c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800872a:	2302      	movs	r3, #2
  }
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	80002000 	.word	0x80002000
 8008738:	fe00e800 	.word	0xfe00e800

0800873c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008758:	2b00      	cmp	r3, #0
 800875a:	d005      	beq.n	8008768 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
  }
}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00f      	beq.n	80087b2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00a      	beq.n	80087b2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a0:	f043 0201 	orr.w	r2, r3, #1
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00f      	beq.n	80087dc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ca:	f043 0208 	orr.w	r2, r3, #8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80087da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00f      	beq.n	8008806 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f4:	f043 0202 	orr.w	r2, r3, #2
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008804:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800880a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f003 030b 	and.w	r3, r3, #11
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8008816:	68f9      	ldr	r1, [r7, #12]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fbe7 	bl	8008fec <I2C_ITError>
  }
}
 800881e:	bf00      	nop
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	460b      	mov	r3, r1
 8008858:	70fb      	strb	r3, [r7, #3]
 800885a:	4613      	mov	r3, r2
 800885c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b086      	sub	sp, #24
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d101      	bne.n	80088ca <I2C_Slave_ISR_IT+0x24>
 80088c6:	2302      	movs	r3, #2
 80088c8:	e0e2      	b.n	8008a90 <I2C_Slave_ISR_IT+0x1ea>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f003 0320 	and.w	r3, r3, #32
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d009      	beq.n	80088f0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80088e6:	6939      	ldr	r1, [r7, #16]
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f9b5 	bl	8008c58 <I2C_ITSlaveCplt>
 80088ee:	e0ca      	b.n	8008a86 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f003 0310 	and.w	r3, r3, #16
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d04b      	beq.n	8008992 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008900:	2b00      	cmp	r3, #0
 8008902:	d046      	beq.n	8008992 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008908:	b29b      	uxth	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d128      	bne.n	8008960 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b28      	cmp	r3, #40	@ 0x28
 8008918:	d108      	bne.n	800892c <I2C_Slave_ISR_IT+0x86>
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008920:	d104      	bne.n	800892c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008922:	6939      	ldr	r1, [r7, #16]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 fb0d 	bl	8008f44 <I2C_ITListenCplt>
 800892a:	e031      	b.n	8008990 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b29      	cmp	r3, #41	@ 0x29
 8008936:	d10e      	bne.n	8008956 <I2C_Slave_ISR_IT+0xb0>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800893e:	d00a      	beq.n	8008956 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2210      	movs	r2, #16
 8008946:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fc66 	bl	800921a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 f926 	bl	8008ba0 <I2C_ITSlaveSeqCplt>
 8008954:	e01c      	b.n	8008990 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2210      	movs	r2, #16
 800895c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800895e:	e08f      	b.n	8008a80 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2210      	movs	r2, #16
 8008966:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800896c:	f043 0204 	orr.w	r2, r3, #4
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <I2C_Slave_ISR_IT+0xdc>
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008980:	d17e      	bne.n	8008a80 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008986:	4619      	mov	r1, r3
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fb2f 	bl	8008fec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800898e:	e077      	b.n	8008a80 <I2C_Slave_ISR_IT+0x1da>
 8008990:	e076      	b.n	8008a80 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d02f      	beq.n	80089fc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d02a      	beq.n	80089fc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d018      	beq.n	80089e2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ba:	b2d2      	uxtb	r2, r2
 80089bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089cc:	3b01      	subs	r3, #1
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3b01      	subs	r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d14b      	bne.n	8008a84 <I2C_Slave_ISR_IT+0x1de>
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089f2:	d047      	beq.n	8008a84 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 f8d3 	bl	8008ba0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80089fa:	e043      	b.n	8008a84 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f003 0308 	and.w	r3, r3, #8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d009      	beq.n	8008a1a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d004      	beq.n	8008a1a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008a10:	6939      	ldr	r1, [r7, #16]
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 f840 	bl	8008a98 <I2C_ITAddrCplt>
 8008a18:	e035      	b.n	8008a86 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d030      	beq.n	8008a86 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d02b      	beq.n	8008a86 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d018      	beq.n	8008a6a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	781a      	ldrb	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008a68:	e00d      	b.n	8008a86 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a70:	d002      	beq.n	8008a78 <I2C_Slave_ISR_IT+0x1d2>
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d106      	bne.n	8008a86 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 f891 	bl	8008ba0 <I2C_ITSlaveSeqCplt>
 8008a7e:	e002      	b.n	8008a86 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8008a80:	bf00      	nop
 8008a82:	e000      	b.n	8008a86 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8008a84:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008aae:	2b28      	cmp	r3, #40	@ 0x28
 8008ab0:	d16a      	bne.n	8008b88 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	0c1b      	lsrs	r3, r3, #16
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	0c1b      	lsrs	r3, r3, #16
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008ad0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ade:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008aec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d138      	bne.n	8008b68 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008af6:	897b      	ldrh	r3, [r7, #10]
 8008af8:	09db      	lsrs	r3, r3, #7
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	89bb      	ldrh	r3, [r7, #12]
 8008afe:	4053      	eors	r3, r2
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	f003 0306 	and.w	r3, r3, #6
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d11c      	bne.n	8008b44 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008b0a:	897b      	ldrh	r3, [r7, #10]
 8008b0c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d13b      	bne.n	8008b98 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2208      	movs	r2, #8
 8008b2c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b36:	89ba      	ldrh	r2, [r7, #12]
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff fe86 	bl	800884e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008b42:	e029      	b.n	8008b98 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008b44:	893b      	ldrh	r3, [r7, #8]
 8008b46:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008b48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fd9b 	bl	8009688 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b5a:	89ba      	ldrh	r2, [r7, #12]
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff fe74 	bl	800884e <HAL_I2C_AddrCallback>
}
 8008b66:	e017      	b.n	8008b98 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008b68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fd8b 	bl	8009688 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008b7a:	89ba      	ldrh	r2, [r7, #12]
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff fe64 	bl	800884e <HAL_I2C_AddrCallback>
}
 8008b86:	e007      	b.n	8008b98 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2208      	movs	r2, #8
 8008b8e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d008      	beq.n	8008bd4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	e00c      	b.n	8008bee <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d007      	beq.n	8008bee <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008bec:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b29      	cmp	r3, #41	@ 0x29
 8008bf8:	d112      	bne.n	8008c20 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2228      	movs	r2, #40	@ 0x28
 8008bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2221      	movs	r2, #33	@ 0x21
 8008c06:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008c08:	2101      	movs	r1, #1
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fd3c 	bl	8009688 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff fe04 	bl	8008826 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c1e:	e017      	b.n	8008c50 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c2a:	d111      	bne.n	8008c50 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2228      	movs	r2, #40	@ 0x28
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2222      	movs	r2, #34	@ 0x22
 8008c38:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008c3a:	2102      	movs	r1, #2
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fd23 	bl	8009688 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff fdf5 	bl	800883a <HAL_I2C_SlaveRxCpltCallback>
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c58:	b590      	push	{r4, r7, lr}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c72:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c7a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2220      	movs	r2, #32
 8008c82:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c84:	7afb      	ldrb	r3, [r7, #11]
 8008c86:	2b21      	cmp	r3, #33	@ 0x21
 8008c88:	d002      	beq.n	8008c90 <I2C_ITSlaveCplt+0x38>
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	2b29      	cmp	r3, #41	@ 0x29
 8008c8e:	d108      	bne.n	8008ca2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008c90:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fcf7 	bl	8009688 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2221      	movs	r2, #33	@ 0x21
 8008c9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ca0:	e019      	b.n	8008cd6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008ca2:	7afb      	ldrb	r3, [r7, #11]
 8008ca4:	2b22      	cmp	r3, #34	@ 0x22
 8008ca6:	d002      	beq.n	8008cae <I2C_ITSlaveCplt+0x56>
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cac:	d108      	bne.n	8008cc0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008cae:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fce8 	bl	8009688 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2222      	movs	r2, #34	@ 0x22
 8008cbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cbe:	e00a      	b.n	8008cd6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	2b28      	cmp	r3, #40	@ 0x28
 8008cc4:	d107      	bne.n	8008cd6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008cc6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fcdc 	bl	8009688 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ce4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6859      	ldr	r1, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	4b92      	ldr	r3, [pc, #584]	@ (8008f3c <I2C_ITSlaveCplt+0x2e4>)
 8008cf2:	400b      	ands	r3, r1
 8008cf4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa8f 	bl	800921a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d01c      	beq.n	8008d40 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d031      	beq.n	8008d82 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d26:	b29c      	uxth	r4, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe fc49 	bl	80075c4 <HAL_DMAEx_GetFifoLevel>
 8008d32:	4603      	mov	r3, r0
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4423      	add	r3, r4
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d3e:	e020      	b.n	8008d82 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01b      	beq.n	8008d82 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00f      	beq.n	8008d82 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d6a:	b29c      	uxth	r4, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fc27 	bl	80075c4 <HAL_DMAEx_GetFifoLevel>
 8008d76:	4603      	mov	r3, r0
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	4423      	add	r3, r4
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d020      	beq.n	8008dce <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f023 0304 	bic.w	r3, r3, #4
 8008d92:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9e:	b2d2      	uxtb	r2, r2
 8008da0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00c      	beq.n	8008dce <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ddc:	f043 0204 	orr.w	r2, r3, #4
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f003 0310 	and.w	r3, r3, #16
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d049      	beq.n	8008e82 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d044      	beq.n	8008e82 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d128      	bne.n	8008e54 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b28      	cmp	r3, #40	@ 0x28
 8008e0c:	d108      	bne.n	8008e20 <I2C_ITSlaveCplt+0x1c8>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e14:	d104      	bne.n	8008e20 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008e16:	6979      	ldr	r1, [r7, #20]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f893 	bl	8008f44 <I2C_ITListenCplt>
 8008e1e:	e030      	b.n	8008e82 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b29      	cmp	r3, #41	@ 0x29
 8008e2a:	d10e      	bne.n	8008e4a <I2C_ITSlaveCplt+0x1f2>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008e32:	d00a      	beq.n	8008e4a <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2210      	movs	r2, #16
 8008e3a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f9ec 	bl	800921a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff feac 	bl	8008ba0 <I2C_ITSlaveSeqCplt>
 8008e48:	e01b      	b.n	8008e82 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	61da      	str	r2, [r3, #28]
 8008e52:	e016      	b.n	8008e82 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2210      	movs	r2, #16
 8008e5a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e60:	f043 0204 	orr.w	r2, r3, #4
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <I2C_ITSlaveCplt+0x21e>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e74:	d105      	bne.n	8008e82 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f8b5 	bl	8008fec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d010      	beq.n	8008eba <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f8a4 	bl	8008fec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b28      	cmp	r3, #40	@ 0x28
 8008eae:	d141      	bne.n	8008f34 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008eb0:	6979      	ldr	r1, [r7, #20]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f846 	bl	8008f44 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008eb8:	e03c      	b.n	8008f34 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ebe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ec2:	d014      	beq.n	8008eee <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff fe6b 	bl	8008ba0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8008f40 <I2C_ITSlaveCplt+0x2e8>)
 8008ece:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff fcbf 	bl	800886a <HAL_I2C_ListenCpltCallback>
}
 8008eec:	e022      	b.n	8008f34 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b22      	cmp	r3, #34	@ 0x22
 8008ef8:	d10e      	bne.n	8008f18 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff fc92 	bl	800883a <HAL_I2C_SlaveRxCpltCallback>
}
 8008f16:	e00d      	b.n	8008f34 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff fc79 	bl	8008826 <HAL_I2C_SlaveTxCpltCallback>
}
 8008f34:	bf00      	nop
 8008f36:	371c      	adds	r7, #28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd90      	pop	{r4, r7, pc}
 8008f3c:	fe00e800 	.word	0xfe00e800
 8008f40:	ffff0000 	.word	0xffff0000

08008f44 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a25      	ldr	r2, [pc, #148]	@ (8008fe8 <I2C_ITListenCplt+0xa4>)
 8008f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d022      	beq.n	8008fc0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f84:	b2d2      	uxtb	r2, r2
 8008f86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d012      	beq.n	8008fc0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	3b01      	subs	r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb8:	f043 0204 	orr.w	r2, r3, #4
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008fc0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fb5f 	bl	8009688 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2210      	movs	r2, #16
 8008fd0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff fc45 	bl	800886a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	ffff0000 	.word	0xffff0000

08008fec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ffc:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a6d      	ldr	r2, [pc, #436]	@ (80091c0 <I2C_ITError+0x1d4>)
 800900a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	431a      	orrs	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	2b28      	cmp	r3, #40	@ 0x28
 8009022:	d005      	beq.n	8009030 <I2C_ITError+0x44>
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	2b29      	cmp	r3, #41	@ 0x29
 8009028:	d002      	beq.n	8009030 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	2b2a      	cmp	r3, #42	@ 0x2a
 800902e:	d10b      	bne.n	8009048 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009030:	2103      	movs	r1, #3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb28 	bl	8009688 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2228      	movs	r2, #40	@ 0x28
 800903c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a60      	ldr	r2, [pc, #384]	@ (80091c4 <I2C_ITError+0x1d8>)
 8009044:	635a      	str	r2, [r3, #52]	@ 0x34
 8009046:	e030      	b.n	80090aa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009048:	f248 0103 	movw	r1, #32771	@ 0x8003
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fb1b 	bl	8009688 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f8e1 	bl	800921a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b60      	cmp	r3, #96	@ 0x60
 8009062:	d01f      	beq.n	80090a4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b20      	cmp	r3, #32
 8009078:	d114      	bne.n	80090a4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b10      	cmp	r3, #16
 8009086:	d109      	bne.n	800909c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2210      	movs	r2, #16
 800908e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009094:	f043 0204 	orr.w	r2, r3, #4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2220      	movs	r2, #32
 80090a2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d039      	beq.n	800912c <I2C_ITError+0x140>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b11      	cmp	r3, #17
 80090bc:	d002      	beq.n	80090c4 <I2C_ITError+0xd8>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b21      	cmp	r3, #33	@ 0x21
 80090c2:	d133      	bne.n	800912c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090d2:	d107      	bne.n	80090e4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80090e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fd fabf 	bl	800666c <HAL_DMA_GetState>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d017      	beq.n	8009124 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f8:	4a33      	ldr	r2, [pc, #204]	@ (80091c8 <I2C_ITError+0x1dc>)
 80090fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009108:	4618      	mov	r0, r3
 800910a:	f7fd f925 	bl	8006358 <HAL_DMA_Abort_IT>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d04d      	beq.n	80091b0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800911e:	4610      	mov	r0, r2
 8009120:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009122:	e045      	b.n	80091b0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f851 	bl	80091cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800912a:	e041      	b.n	80091b0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009130:	2b00      	cmp	r3, #0
 8009132:	d039      	beq.n	80091a8 <I2C_ITError+0x1bc>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b12      	cmp	r3, #18
 8009138:	d002      	beq.n	8009140 <I2C_ITError+0x154>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b22      	cmp	r3, #34	@ 0x22
 800913e:	d133      	bne.n	80091a8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800914a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800914e:	d107      	bne.n	8009160 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800915e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd fa81 	bl	800666c <HAL_DMA_GetState>
 800916a:	4603      	mov	r3, r0
 800916c:	2b01      	cmp	r3, #1
 800916e:	d017      	beq.n	80091a0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009174:	4a14      	ldr	r2, [pc, #80]	@ (80091c8 <I2C_ITError+0x1dc>)
 8009176:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009184:	4618      	mov	r0, r3
 8009186:	f7fd f8e7 	bl	8006358 <HAL_DMA_Abort_IT>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d011      	beq.n	80091b4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800919a:	4610      	mov	r0, r2
 800919c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800919e:	e009      	b.n	80091b4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f813 	bl	80091cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091a6:	e005      	b.n	80091b4 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f80f 	bl	80091cc <I2C_TreatErrorCallback>
  }
}
 80091ae:	e002      	b.n	80091b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80091b0:	bf00      	nop
 80091b2:	e000      	b.n	80091b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091b4:	bf00      	nop
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	ffff0000 	.word	0xffff0000
 80091c4:	080088a7 	.word	0x080088a7
 80091c8:	08009263 	.word	0x08009263

080091cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b60      	cmp	r3, #96	@ 0x60
 80091de:	d10e      	bne.n	80091fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff fb4b 	bl	8008892 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80091fc:	e009      	b.n	8009212 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff fb36 	bl	800887e <HAL_I2C_ErrorCallback>
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800921a:	b480      	push	{r7}
 800921c:	b083      	sub	sp, #12
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b02      	cmp	r3, #2
 800922e:	d103      	bne.n	8009238 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2200      	movs	r2, #0
 8009236:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b01      	cmp	r3, #1
 8009244:	d007      	beq.n	8009256 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	699a      	ldr	r2, [r3, #24]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0201 	orr.w	r2, r2, #1
 8009254:	619a      	str	r2, [r3, #24]
  }
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800926e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927c:	2200      	movs	r2, #0
 800927e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800928c:	2200      	movs	r2, #0
 800928e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff ff9b 	bl	80091cc <I2C_TreatErrorCallback>
}
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4613      	mov	r3, r2
 80092ac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092ae:	e03b      	b.n	8009328 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f8d5 	bl	8009464 <I2C_IsErrorOccurred>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e041      	b.n	8009348 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ca:	d02d      	beq.n	8009328 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092cc:	f7fa fa58 	bl	8003780 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d302      	bcc.n	80092e2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d122      	bne.n	8009328 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	699a      	ldr	r2, [r3, #24]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4013      	ands	r3, r2
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	bf0c      	ite	eq
 80092f2:	2301      	moveq	r3, #1
 80092f4:	2300      	movne	r3, #0
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	461a      	mov	r2, r3
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d113      	bne.n	8009328 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009304:	f043 0220 	orr.w	r2, r3, #32
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2220      	movs	r2, #32
 8009310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e00f      	b.n	8009348 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699a      	ldr	r2, [r3, #24]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	4013      	ands	r3, r2
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	429a      	cmp	r2, r3
 8009336:	bf0c      	ite	eq
 8009338:	2301      	moveq	r3, #1
 800933a:	2300      	movne	r3, #0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	461a      	mov	r2, r3
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	429a      	cmp	r2, r3
 8009344:	d0b4      	beq.n	80092b0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800935c:	e033      	b.n	80093c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 f87e 	bl	8009464 <I2C_IsErrorOccurred>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e031      	b.n	80093d6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d025      	beq.n	80093c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800937a:	f7fa fa01 	bl	8003780 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	429a      	cmp	r2, r3
 8009388:	d302      	bcc.n	8009390 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d11a      	bne.n	80093c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b02      	cmp	r3, #2
 800939c:	d013      	beq.n	80093c6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a2:	f043 0220 	orr.w	r2, r3, #32
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2220      	movs	r2, #32
 80093ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e007      	b.n	80093d6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d1c4      	bne.n	800935e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093ea:	e02f      	b.n	800944c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 f837 	bl	8009464 <I2C_IsErrorOccurred>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e02d      	b.n	800945c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009400:	f7fa f9be 	bl	8003780 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	429a      	cmp	r2, r3
 800940e:	d302      	bcc.n	8009416 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d11a      	bne.n	800944c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b20      	cmp	r3, #32
 8009422:	d013      	beq.n	800944c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009428:	f043 0220 	orr.w	r2, r3, #32
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2220      	movs	r2, #32
 8009434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e007      	b.n	800945c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b20      	cmp	r3, #32
 8009458:	d1c8      	bne.n	80093ec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08a      	sub	sp, #40	@ 0x28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	f003 0310 	and.w	r3, r3, #16
 800948c:	2b00      	cmp	r3, #0
 800948e:	d068      	beq.n	8009562 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2210      	movs	r2, #16
 8009496:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009498:	e049      	b.n	800952e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a0:	d045      	beq.n	800952e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80094a2:	f7fa f96d 	bl	8003780 <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d302      	bcc.n	80094b8 <I2C_IsErrorOccurred+0x54>
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d13a      	bne.n	800952e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094da:	d121      	bne.n	8009520 <I2C_IsErrorOccurred+0xbc>
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094e2:	d01d      	beq.n	8009520 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80094e4:	7cfb      	ldrb	r3, [r7, #19]
 80094e6:	2b20      	cmp	r3, #32
 80094e8:	d01a      	beq.n	8009520 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80094fa:	f7fa f941 	bl	8003780 <HAL_GetTick>
 80094fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009500:	e00e      	b.n	8009520 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009502:	f7fa f93d 	bl	8003780 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	2b19      	cmp	r3, #25
 800950e:	d907      	bls.n	8009520 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	f043 0320 	orr.w	r3, r3, #32
 8009516:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800951e:	e006      	b.n	800952e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b20      	cmp	r3, #32
 800952c:	d1e9      	bne.n	8009502 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b20      	cmp	r3, #32
 800953a:	d003      	beq.n	8009544 <I2C_IsErrorOccurred+0xe0>
 800953c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0aa      	beq.n	800949a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009548:	2b00      	cmp	r3, #0
 800954a:	d103      	bne.n	8009554 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2220      	movs	r2, #32
 8009552:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	f043 0304 	orr.w	r3, r3, #4
 800955a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00b      	beq.n	800958c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	f043 0301 	orr.w	r3, r3, #1
 800957a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009584:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	f043 0308 	orr.w	r3, r3, #8
 800959c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80095a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00b      	beq.n	80095d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	f043 0302 	orr.w	r3, r3, #2
 80095be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80095d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d01c      	beq.n	8009612 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7ff fe1e 	bl	800921a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6859      	ldr	r1, [r3, #4]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009620 <I2C_IsErrorOccurred+0x1bc>)
 80095ea:	400b      	ands	r3, r1
 80095ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	431a      	orrs	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2220      	movs	r2, #32
 80095fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009616:	4618      	mov	r0, r3
 8009618:	3728      	adds	r7, #40	@ 0x28
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	fe00e800 	.word	0xfe00e800

08009624 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	607b      	str	r3, [r7, #4]
 800962e:	460b      	mov	r3, r1
 8009630:	817b      	strh	r3, [r7, #10]
 8009632:	4613      	mov	r3, r2
 8009634:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009636:	897b      	ldrh	r3, [r7, #10]
 8009638:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800963c:	7a7b      	ldrb	r3, [r7, #9]
 800963e:	041b      	lsls	r3, r3, #16
 8009640:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009644:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	4313      	orrs	r3, r2
 800964e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009652:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	0d5b      	lsrs	r3, r3, #21
 800965e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009662:	4b08      	ldr	r3, [pc, #32]	@ (8009684 <I2C_TransferConfig+0x60>)
 8009664:	430b      	orrs	r3, r1
 8009666:	43db      	mvns	r3, r3
 8009668:	ea02 0103 	and.w	r1, r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	430a      	orrs	r2, r1
 8009674:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009676:	bf00      	nop
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	03ff63ff 	.word	0x03ff63ff

08009688 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009698:	887b      	ldrh	r3, [r7, #2]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00f      	beq.n	80096c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80096a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80096b6:	2b28      	cmp	r3, #40	@ 0x28
 80096b8:	d003      	beq.n	80096c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80096c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80096c2:	887b      	ldrh	r3, [r7, #2]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00f      	beq.n	80096ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80096d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80096e0:	2b28      	cmp	r3, #40	@ 0x28
 80096e2:	d003      	beq.n	80096ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80096ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80096ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	da03      	bge.n	80096fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80096fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80096fc:	887b      	ldrh	r3, [r7, #2]
 80096fe:	2b10      	cmp	r3, #16
 8009700:	d103      	bne.n	800970a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009708:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800970a:	887b      	ldrh	r3, [r7, #2]
 800970c:	2b20      	cmp	r3, #32
 800970e:	d103      	bne.n	8009718 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f043 0320 	orr.w	r3, r3, #32
 8009716:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009718:	887b      	ldrh	r3, [r7, #2]
 800971a:	2b40      	cmp	r3, #64	@ 0x40
 800971c:	d103      	bne.n	8009726 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009724:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6819      	ldr	r1, [r3, #0]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	43da      	mvns	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	400a      	ands	r2, r1
 8009736:	601a      	str	r2, [r3, #0]
}
 8009738:	bf00      	nop
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b20      	cmp	r3, #32
 8009758:	d138      	bne.n	80097cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009760:	2b01      	cmp	r3, #1
 8009762:	d101      	bne.n	8009768 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009764:	2302      	movs	r3, #2
 8009766:	e032      	b.n	80097ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2224      	movs	r2, #36	@ 0x24
 8009774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f022 0201 	bic.w	r2, r2, #1
 8009786:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009796:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6819      	ldr	r1, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f042 0201 	orr.w	r2, r2, #1
 80097b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	e000      	b.n	80097ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097cc:	2302      	movs	r3, #2
  }
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80097da:	b480      	push	{r7}
 80097dc:	b085      	sub	sp, #20
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b20      	cmp	r3, #32
 80097ee:	d139      	bne.n	8009864 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d101      	bne.n	80097fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097fa:	2302      	movs	r3, #2
 80097fc:	e033      	b.n	8009866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2224      	movs	r2, #36	@ 0x24
 800980a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f022 0201 	bic.w	r2, r2, #1
 800981c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800982c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	4313      	orrs	r3, r2
 8009836:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f042 0201 	orr.w	r2, r2, #1
 800984e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	e000      	b.n	8009866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009864:	2302      	movs	r3, #2
  }
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
	...

08009874 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8009880:	4b0b      	ldr	r3, [pc, #44]	@ (80098b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	73fb      	strb	r3, [r7, #15]
 8009890:	e007      	b.n	80098a2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8009892:	4b07      	ldr	r3, [pc, #28]	@ (80098b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f023 0204 	bic.w	r2, r3, #4
 800989a:	4905      	ldr	r1, [pc, #20]	@ (80098b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4313      	orrs	r3, r2
 80098a0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	40030400 	.word	0x40030400

080098b4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80098b4:	b480      	push	{r7}
 80098b6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80098b8:	4b05      	ldr	r3, [pc, #20]	@ (80098d0 <HAL_ICACHE_Enable+0x1c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a04      	ldr	r2, [pc, #16]	@ (80098d0 <HAL_ICACHE_Enable+0x1c>)
 80098be:	f043 0301 	orr.w	r3, r3, #1
 80098c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	40030400 	.word	0x40030400

080098d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e0bf      	b.n	8009a66 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d106      	bne.n	8009900 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7f9 f898 	bl	8002a30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699a      	ldr	r2, [r3, #24]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009916:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6999      	ldr	r1, [r3, #24]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800992c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6899      	ldr	r1, [r3, #8]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	4b4a      	ldr	r3, [pc, #296]	@ (8009a70 <HAL_LTDC_Init+0x19c>)
 8009948:	400b      	ands	r3, r1
 800994a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	041b      	lsls	r3, r3, #16
 8009952:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6899      	ldr	r1, [r3, #8]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	431a      	orrs	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68d9      	ldr	r1, [r3, #12]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	4b3e      	ldr	r3, [pc, #248]	@ (8009a70 <HAL_LTDC_Init+0x19c>)
 8009976:	400b      	ands	r3, r1
 8009978:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	041b      	lsls	r3, r3, #16
 8009980:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68d9      	ldr	r1, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a1a      	ldr	r2, [r3, #32]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	431a      	orrs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6919      	ldr	r1, [r3, #16]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	4b33      	ldr	r3, [pc, #204]	@ (8009a70 <HAL_LTDC_Init+0x19c>)
 80099a4:	400b      	ands	r3, r1
 80099a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ac:	041b      	lsls	r3, r3, #16
 80099ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6919      	ldr	r1, [r3, #16]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6959      	ldr	r1, [r3, #20]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	4b27      	ldr	r3, [pc, #156]	@ (8009a70 <HAL_LTDC_Init+0x19c>)
 80099d2:	400b      	ands	r3, r1
 80099d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099da:	041b      	lsls	r3, r3, #16
 80099dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6959      	ldr	r1, [r3, #20]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	431a      	orrs	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	430a      	orrs	r2, r1
 80099f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80099fa:	021b      	lsls	r3, r3, #8
 80099fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009a04:	041b      	lsls	r3, r3, #16
 8009a06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	430a      	orrs	r2, r1
 8009a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f042 0206 	orr.w	r2, r2, #6
 8009a42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699a      	ldr	r2, [r3, #24]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0201 	orr.w	r2, r2, #1
 8009a52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	f000f800 	.word	0xf000f800

08009a74 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a8a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d023      	beq.n	8009ade <HAL_LTDC_IRQHandler+0x6a>
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f003 0304 	and.w	r3, r3, #4
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d01e      	beq.n	8009ade <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f022 0204 	bic.w	r2, r2, #4
 8009aae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2204      	movs	r2, #4
 8009ab6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009abe:	f043 0201 	orr.w	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2204      	movs	r2, #4
 8009acc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f86f 	bl	8009bbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f003 0302 	and.w	r3, r3, #2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d023      	beq.n	8009b30 <HAL_LTDC_IRQHandler+0xbc>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d01e      	beq.n	8009b30 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0202 	bic.w	r2, r2, #2
 8009b00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2202      	movs	r2, #2
 8009b08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b10:	f043 0202 	orr.w	r2, r3, #2
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2204      	movs	r2, #4
 8009b1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f846 	bl	8009bbc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d01b      	beq.n	8009b72 <HAL_LTDC_IRQHandler+0xfe>
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d016      	beq.n	8009b72 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f022 0201 	bic.w	r2, r2, #1
 8009b52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f82f 	bl	8009bd0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f003 0308 	and.w	r3, r3, #8
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d01b      	beq.n	8009bb4 <HAL_LTDC_IRQHandler+0x140>
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f003 0308 	and.w	r3, r3, #8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d016      	beq.n	8009bb4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f022 0208 	bic.w	r2, r2, #8
 8009b94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f818 	bl	8009be4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009bf8:	b5b0      	push	{r4, r5, r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d101      	bne.n	8009c12 <HAL_LTDC_ConfigLayer+0x1a>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e02c      	b.n	8009c6c <HAL_LTDC_ConfigLayer+0x74>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2134      	movs	r1, #52	@ 0x34
 8009c28:	fb01 f303 	mul.w	r3, r1, r3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	4614      	mov	r4, r2
 8009c36:	461d      	mov	r5, r3
 8009c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f811 	bl	8009c74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2201      	movs	r2, #1
 8009c58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bdb0      	pop	{r4, r5, r7, pc}

08009c74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b089      	sub	sp, #36	@ 0x24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	0c1b      	lsrs	r3, r3, #16
 8009c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c90:	4413      	add	r3, r2
 8009c92:	041b      	lsls	r3, r3, #16
 8009c94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	01db      	lsls	r3, r3, #7
 8009ca0:	4413      	add	r3, r2
 8009ca2:	3384      	adds	r3, #132	@ 0x84
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	6812      	ldr	r2, [r2, #0]
 8009caa:	4611      	mov	r1, r2
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	01d2      	lsls	r2, r2, #7
 8009cb0:	440a      	add	r2, r1
 8009cb2:	3284      	adds	r2, #132	@ 0x84
 8009cb4:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009cb8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	0c1b      	lsrs	r3, r3, #16
 8009cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009ccc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	01db      	lsls	r3, r3, #7
 8009cd8:	440b      	add	r3, r1
 8009cda:	3384      	adds	r3, #132	@ 0x84
 8009cdc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009ce2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	68da      	ldr	r2, [r3, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cf2:	4413      	add	r3, r2
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	01db      	lsls	r3, r3, #7
 8009d02:	4413      	add	r3, r2
 8009d04:	3384      	adds	r3, #132	@ 0x84
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	6812      	ldr	r2, [r2, #0]
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	01d2      	lsls	r2, r2, #7
 8009d12:	440a      	add	r2, r1
 8009d14:	3284      	adds	r2, #132	@ 0x84
 8009d16:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009d1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d2a:	4413      	add	r3, r2
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4619      	mov	r1, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	01db      	lsls	r3, r3, #7
 8009d38:	440b      	add	r3, r1
 8009d3a:	3384      	adds	r3, #132	@ 0x84
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	01db      	lsls	r3, r3, #7
 8009d4e:	4413      	add	r3, r2
 8009d50:	3384      	adds	r3, #132	@ 0x84
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	6812      	ldr	r2, [r2, #0]
 8009d58:	4611      	mov	r1, r2
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	01d2      	lsls	r2, r2, #7
 8009d5e:	440a      	add	r2, r1
 8009d60:	3284      	adds	r2, #132	@ 0x84
 8009d62:	f023 0307 	bic.w	r3, r3, #7
 8009d66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	01db      	lsls	r3, r3, #7
 8009d72:	4413      	add	r3, r2
 8009d74:	3384      	adds	r3, #132	@ 0x84
 8009d76:	461a      	mov	r2, r3
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009d84:	021b      	lsls	r3, r3, #8
 8009d86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009d8e:	041b      	lsls	r3, r3, #16
 8009d90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	061b      	lsls	r3, r3, #24
 8009d98:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009da0:	461a      	mov	r2, r3
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	431a      	orrs	r2, r3
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	431a      	orrs	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4619      	mov	r1, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	01db      	lsls	r3, r3, #7
 8009db4:	440b      	add	r3, r1
 8009db6:	3384      	adds	r3, #132	@ 0x84
 8009db8:	4619      	mov	r1, r3
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	01db      	lsls	r3, r3, #7
 8009dca:	4413      	add	r3, r2
 8009dcc:	3384      	adds	r3, #132	@ 0x84
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	6812      	ldr	r2, [r2, #0]
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	01d2      	lsls	r2, r2, #7
 8009dda:	440a      	add	r2, r1
 8009ddc:	3284      	adds	r2, #132	@ 0x84
 8009dde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009de2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	01db      	lsls	r3, r3, #7
 8009dee:	4413      	add	r3, r2
 8009df0:	3384      	adds	r3, #132	@ 0x84
 8009df2:	461a      	mov	r2, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	01db      	lsls	r3, r3, #7
 8009e04:	4413      	add	r3, r2
 8009e06:	3384      	adds	r3, #132	@ 0x84
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	6812      	ldr	r2, [r2, #0]
 8009e0e:	4611      	mov	r1, r2
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	01d2      	lsls	r2, r2, #7
 8009e14:	440a      	add	r2, r1
 8009e16:	3284      	adds	r2, #132	@ 0x84
 8009e18:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009e1c:	f023 0307 	bic.w	r3, r3, #7
 8009e20:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	69da      	ldr	r2, [r3, #28]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	68f9      	ldr	r1, [r7, #12]
 8009e2c:	6809      	ldr	r1, [r1, #0]
 8009e2e:	4608      	mov	r0, r1
 8009e30:	6879      	ldr	r1, [r7, #4]
 8009e32:	01c9      	lsls	r1, r1, #7
 8009e34:	4401      	add	r1, r0
 8009e36:	3184      	adds	r1, #132	@ 0x84
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	01db      	lsls	r3, r3, #7
 8009e46:	4413      	add	r3, r2
 8009e48:	3384      	adds	r3, #132	@ 0x84
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e50:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d102      	bne.n	8009e60 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	61fb      	str	r3, [r7, #28]
 8009e5e:	e01b      	b.n	8009e98 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d102      	bne.n	8009e6e <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	61fb      	str	r3, [r7, #28]
 8009e6c:	e014      	b.n	8009e98 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	d00b      	beq.n	8009e8e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d007      	beq.n	8009e8e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d003      	beq.n	8009e8e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009e8a:	2b07      	cmp	r3, #7
 8009e8c:	d102      	bne.n	8009e94 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	61fb      	str	r3, [r7, #28]
 8009e92:	e001      	b.n	8009e98 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8009e94:	2301      	movs	r3, #1
 8009e96:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	01db      	lsls	r3, r3, #7
 8009ea2:	4413      	add	r3, r2
 8009ea4:	3384      	adds	r3, #132	@ 0x84
 8009ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	6812      	ldr	r2, [r2, #0]
 8009eac:	4611      	mov	r1, r2
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	01d2      	lsls	r2, r2, #7
 8009eb2:	440a      	add	r2, r1
 8009eb4:	3284      	adds	r2, #132	@ 0x84
 8009eb6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009eba:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec0:	69fa      	ldr	r2, [r7, #28]
 8009ec2:	fb02 f303 	mul.w	r3, r2, r3
 8009ec6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	6859      	ldr	r1, [r3, #4]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	1acb      	subs	r3, r1, r3
 8009ed2:	69f9      	ldr	r1, [r7, #28]
 8009ed4:	fb01 f303 	mul.w	r3, r1, r3
 8009ed8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009eda:	68f9      	ldr	r1, [r7, #12]
 8009edc:	6809      	ldr	r1, [r1, #0]
 8009ede:	4608      	mov	r0, r1
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	01c9      	lsls	r1, r1, #7
 8009ee4:	4401      	add	r1, r0
 8009ee6:	3184      	adds	r1, #132	@ 0x84
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	01db      	lsls	r3, r3, #7
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3384      	adds	r3, #132	@ 0x84
 8009efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	6812      	ldr	r2, [r2, #0]
 8009f00:	4611      	mov	r1, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	01d2      	lsls	r2, r2, #7
 8009f06:	440a      	add	r2, r1
 8009f08:	3284      	adds	r2, #132	@ 0x84
 8009f0a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009f0e:	f023 0307 	bic.w	r3, r3, #7
 8009f12:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	01db      	lsls	r3, r3, #7
 8009f1e:	4413      	add	r3, r2
 8009f20:	3384      	adds	r3, #132	@ 0x84
 8009f22:	461a      	mov	r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	01db      	lsls	r3, r3, #7
 8009f34:	4413      	add	r3, r2
 8009f36:	3384      	adds	r3, #132	@ 0x84
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	4611      	mov	r1, r2
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	01d2      	lsls	r2, r2, #7
 8009f44:	440a      	add	r2, r1
 8009f46:	3284      	adds	r2, #132	@ 0x84
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	6013      	str	r3, [r2, #0]
}
 8009f4e:	bf00      	nop
 8009f50:	3724      	adds	r7, #36	@ 0x24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b086      	sub	sp, #24
 8009f5e:	af02      	add	r7, sp, #8
 8009f60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e0fe      	b.n	800a16a <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d106      	bne.n	8009f86 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7f8 ffef 	bl	8002f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2203      	movs	r2, #3
 8009f8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f008 f8a9 	bl	80120ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7c1a      	ldrb	r2, [r3, #16]
 8009fa0:	f88d 2000 	strb.w	r2, [sp]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009fa8:	f008 f870 	bl	801208c <USB_CoreInit>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e0d5      	b.n	800a16a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f008 f8a1 	bl	801210c <USB_SetCurrentMode>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d005      	beq.n	8009fdc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e0c6      	b.n	800a16a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]
 8009fe0:	e04a      	b.n	800a078 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009fe2:	7bfa      	ldrb	r2, [r7, #15]
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	4413      	add	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	440b      	add	r3, r1
 8009ff0:	3315      	adds	r3, #21
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009ff6:	7bfa      	ldrb	r2, [r7, #15]
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4413      	add	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	440b      	add	r3, r1
 800a004:	3314      	adds	r3, #20
 800a006:	7bfa      	ldrb	r2, [r7, #15]
 800a008:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a00a:	7bfa      	ldrb	r2, [r7, #15]
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	b298      	uxth	r0, r3
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4613      	mov	r3, r2
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	4413      	add	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	440b      	add	r3, r1
 800a01c:	332e      	adds	r3, #46	@ 0x2e
 800a01e:	4602      	mov	r2, r0
 800a020:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a022:	7bfa      	ldrb	r2, [r7, #15]
 800a024:	6879      	ldr	r1, [r7, #4]
 800a026:	4613      	mov	r3, r2
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	440b      	add	r3, r1
 800a030:	3318      	adds	r3, #24
 800a032:	2200      	movs	r2, #0
 800a034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a036:	7bfa      	ldrb	r2, [r7, #15]
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	4613      	mov	r3, r2
 800a03c:	00db      	lsls	r3, r3, #3
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	331c      	adds	r3, #28
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a04a:	7bfa      	ldrb	r2, [r7, #15]
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	4613      	mov	r3, r2
 800a050:	00db      	lsls	r3, r3, #3
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	440b      	add	r3, r1
 800a058:	3320      	adds	r3, #32
 800a05a:	2200      	movs	r2, #0
 800a05c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a05e:	7bfa      	ldrb	r2, [r7, #15]
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	3324      	adds	r3, #36	@ 0x24
 800a06e:	2200      	movs	r2, #0
 800a070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	3301      	adds	r3, #1
 800a076:	73fb      	strb	r3, [r7, #15]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	791b      	ldrb	r3, [r3, #4]
 800a07c:	7bfa      	ldrb	r2, [r7, #15]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d3af      	bcc.n	8009fe2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a082:	2300      	movs	r3, #0
 800a084:	73fb      	strb	r3, [r7, #15]
 800a086:	e044      	b.n	800a112 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a088:	7bfa      	ldrb	r2, [r7, #15]
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	4613      	mov	r3, r2
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	440b      	add	r3, r1
 800a096:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a09a:	2200      	movs	r2, #0
 800a09c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a09e:	7bfa      	ldrb	r2, [r7, #15]
 800a0a0:	6879      	ldr	r1, [r7, #4]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	00db      	lsls	r3, r3, #3
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	440b      	add	r3, r1
 800a0ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a0b0:	7bfa      	ldrb	r2, [r7, #15]
 800a0b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a0b4:	7bfa      	ldrb	r2, [r7, #15]
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	440b      	add	r3, r1
 800a0c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a0ca:	7bfa      	ldrb	r2, [r7, #15]
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	4413      	add	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	440b      	add	r3, r1
 800a0d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a0e0:	7bfa      	ldrb	r2, [r7, #15]
 800a0e2:	6879      	ldr	r1, [r7, #4]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a0f6:	7bfa      	ldrb	r2, [r7, #15]
 800a0f8:	6879      	ldr	r1, [r7, #4]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	00db      	lsls	r3, r3, #3
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	440b      	add	r3, r1
 800a104:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
 800a10e:	3301      	adds	r3, #1
 800a110:	73fb      	strb	r3, [r7, #15]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	791b      	ldrb	r3, [r3, #4]
 800a116:	7bfa      	ldrb	r2, [r7, #15]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d3b5      	bcc.n	800a088 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6818      	ldr	r0, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	7c1a      	ldrb	r2, [r3, #16]
 800a124:	f88d 2000 	strb.w	r2, [sp]
 800a128:	3304      	adds	r3, #4
 800a12a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a12c:	f008 f83a 	bl	80121a4 <USB_DevInit>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d005      	beq.n	800a142 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2202      	movs	r2, #2
 800a13a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e013      	b.n	800a16a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	7b1b      	ldrb	r3, [r3, #12]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d102      	bne.n	800a15e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f80a 	bl	800a172 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4618      	mov	r0, r3
 800a164:	f008 fa07 	bl	8012576 <USB_DevDisconnect>

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a172:	b480      	push	{r7}
 800a174:	b085      	sub	sp, #20
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1a4:	f043 0303 	orr.w	r3, r3, #3
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
	...

0800a1bc <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a1c0:	4b05      	ldr	r3, [pc, #20]	@ (800a1d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c4:	4a04      	ldr	r2, [pc, #16]	@ (800a1d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a1c6:	f043 0301 	orr.w	r3, r3, #1
 800a1ca:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800a1cc:	bf00      	nop
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	46020800 	.word	0x46020800

0800a1dc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800a1e4:	4b39      	ldr	r3, [pc, #228]	@ (800a2cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a1ec:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d10b      	bne.n	800a20e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1fc:	d905      	bls.n	800a20a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a1fe:	4b33      	ldr	r3, [pc, #204]	@ (800a2cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	4a32      	ldr	r2, [pc, #200]	@ (800a2cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a208:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	e057      	b.n	800a2be <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a214:	d90a      	bls.n	800a22c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800a216:	4b2d      	ldr	r3, [pc, #180]	@ (800a2cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4313      	orrs	r3, r2
 800a222:	4a2a      	ldr	r2, [pc, #168]	@ (800a2cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a228:	60d3      	str	r3, [r2, #12]
 800a22a:	e007      	b.n	800a23c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800a22c:	4b27      	ldr	r3, [pc, #156]	@ (800a2cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a234:	4925      	ldr	r1, [pc, #148]	@ (800a2cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a23c:	4b24      	ldr	r3, [pc, #144]	@ (800a2d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a24      	ldr	r2, [pc, #144]	@ (800a2d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	099b      	lsrs	r3, r3, #6
 800a248:	2232      	movs	r2, #50	@ 0x32
 800a24a:	fb02 f303 	mul.w	r3, r2, r3
 800a24e:	4a21      	ldr	r2, [pc, #132]	@ (800a2d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a250:	fba2 2303 	umull	r2, r3, r2, r3
 800a254:	099b      	lsrs	r3, r3, #6
 800a256:	3301      	adds	r3, #1
 800a258:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a25a:	e002      	b.n	800a262 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3b01      	subs	r3, #1
 800a260:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800a262:	4b1a      	ldr	r3, [pc, #104]	@ (800a2cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <HAL_PWREx_ControlVoltageScaling+0x98>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1f3      	bne.n	800a25c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01b      	beq.n	800a2b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a27a:	4b15      	ldr	r3, [pc, #84]	@ (800a2d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a15      	ldr	r2, [pc, #84]	@ (800a2d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a280:	fba2 2303 	umull	r2, r3, r2, r3
 800a284:	099b      	lsrs	r3, r3, #6
 800a286:	2232      	movs	r2, #50	@ 0x32
 800a288:	fb02 f303 	mul.w	r3, r2, r3
 800a28c:	4a11      	ldr	r2, [pc, #68]	@ (800a2d4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800a28e:	fba2 2303 	umull	r2, r3, r2, r3
 800a292:	099b      	lsrs	r3, r3, #6
 800a294:	3301      	adds	r3, #1
 800a296:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a298:	e002      	b.n	800a2a0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800a2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f3      	bne.n	800a29a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e000      	b.n	800a2be <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	46020800 	.word	0x46020800
 800a2d0:	2000001c 	.word	0x2000001c
 800a2d4:	10624dd3 	.word	0x10624dd3

0800a2d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800a2dc:	4b04      	ldr	r3, [pc, #16]	@ (800a2f0 <HAL_PWREx_GetVoltageRange+0x18>)
 800a2de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	46020800 	.word	0x46020800

0800a2f4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800a2fc:	4b22      	ldr	r3, [pc, #136]	@ (800a388 <HAL_PWREx_ConfigSupply+0x94>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a22      	ldr	r2, [pc, #136]	@ (800a38c <HAL_PWREx_ConfigSupply+0x98>)
 800a302:	fba2 2303 	umull	r2, r3, r2, r3
 800a306:	099b      	lsrs	r3, r3, #6
 800a308:	2232      	movs	r2, #50	@ 0x32
 800a30a:	fb02 f303 	mul.w	r3, r2, r3
 800a30e:	4a1f      	ldr	r2, [pc, #124]	@ (800a38c <HAL_PWREx_ConfigSupply+0x98>)
 800a310:	fba2 2303 	umull	r2, r3, r2, r3
 800a314:	099b      	lsrs	r3, r3, #6
 800a316:	3301      	adds	r3, #1
 800a318:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d113      	bne.n	800a348 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a320:	4b1b      	ldr	r3, [pc, #108]	@ (800a390 <HAL_PWREx_ConfigSupply+0x9c>)
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	4a1a      	ldr	r2, [pc, #104]	@ (800a390 <HAL_PWREx_ConfigSupply+0x9c>)
 800a326:	f023 0302 	bic.w	r3, r3, #2
 800a32a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a32c:	e002      	b.n	800a334 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3b01      	subs	r3, #1
 800a332:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a334:	4b16      	ldr	r3, [pc, #88]	@ (800a390 <HAL_PWREx_ConfigSupply+0x9c>)
 800a336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d116      	bne.n	800a36e <HAL_PWREx_ConfigSupply+0x7a>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1f3      	bne.n	800a32e <HAL_PWREx_ConfigSupply+0x3a>
 800a346:	e012      	b.n	800a36e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800a348:	4b11      	ldr	r3, [pc, #68]	@ (800a390 <HAL_PWREx_ConfigSupply+0x9c>)
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	4a10      	ldr	r2, [pc, #64]	@ (800a390 <HAL_PWREx_ConfigSupply+0x9c>)
 800a34e:	f043 0302 	orr.w	r3, r3, #2
 800a352:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a354:	e002      	b.n	800a35c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3b01      	subs	r3, #1
 800a35a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800a35c:	4b0c      	ldr	r3, [pc, #48]	@ (800a390 <HAL_PWREx_ConfigSupply+0x9c>)
 800a35e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a360:	f003 0302 	and.w	r3, r3, #2
 800a364:	2b00      	cmp	r3, #0
 800a366:	d102      	bne.n	800a36e <HAL_PWREx_ConfigSupply+0x7a>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1f3      	bne.n	800a356 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e000      	b.n	800a37a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	2000001c 	.word	0x2000001c
 800a38c:	10624dd3 	.word	0x10624dd3
 800a390:	46020800 	.word	0x46020800

0800a394 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a394:	b480      	push	{r7}
 800a396:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800a398:	4b05      	ldr	r3, [pc, #20]	@ (800a3b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	4a04      	ldr	r2, [pc, #16]	@ (800a3b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a39e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3a2:	6113      	str	r3, [r2, #16]
}
 800a3a4:	bf00      	nop
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	46020800 	.word	0x46020800

0800a3b4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800a3b8:	4b05      	ldr	r3, [pc, #20]	@ (800a3d0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	4a04      	ldr	r2, [pc, #16]	@ (800a3d0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a3be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3c2:	6113      	str	r3, [r2, #16]
}
 800a3c4:	bf00      	nop
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	46020800 	.word	0x46020800

0800a3d4 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800a3d8:	4b05      	ldr	r3, [pc, #20]	@ (800a3f0 <HAL_PWREx_EnableVddA+0x1c>)
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	4a04      	ldr	r2, [pc, #16]	@ (800a3f0 <HAL_PWREx_EnableVddA+0x1c>)
 800a3de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3e2:	6113      	str	r3, [r2, #16]
}
 800a3e4:	bf00      	nop
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	46020800 	.word	0x46020800

0800a3f4 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800a3fa:	f7ff ff6d 	bl	800a2d8 <HAL_PWREx_GetVoltageRange>
 800a3fe:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a406:	d003      	beq.n	800a410 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a40e:	d107      	bne.n	800a420 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800a410:	4b06      	ldr	r3, [pc, #24]	@ (800a42c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	4a05      	ldr	r2, [pc, #20]	@ (800a42c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800a416:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800a41a:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	e000      	b.n	800a422 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	46020800 	.word	0x46020800

0800a430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08e      	sub	sp, #56	@ 0x38
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	f000 bec8 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a44a:	4b99      	ldr	r3, [pc, #612]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	f003 030c 	and.w	r3, r3, #12
 800a452:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a454:	4b96      	ldr	r3, [pc, #600]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0310 	and.w	r3, r3, #16
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 816c 	beq.w	800a744 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d007      	beq.n	800a482 <HAL_RCC_OscConfig+0x52>
 800a472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a474:	2b0c      	cmp	r3, #12
 800a476:	f040 80de 	bne.w	800a636 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	f040 80da 	bne.w	800a636 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d102      	bne.n	800a490 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	f000 bea5 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a494:	4b86      	ldr	r3, [pc, #536]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d004      	beq.n	800a4aa <HAL_RCC_OscConfig+0x7a>
 800a4a0:	4b83      	ldr	r3, [pc, #524]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a4a8:	e005      	b.n	800a4b6 <HAL_RCC_OscConfig+0x86>
 800a4aa:	4b81      	ldr	r3, [pc, #516]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a4ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4b0:	041b      	lsls	r3, r3, #16
 800a4b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d255      	bcs.n	800a566 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f001 f9d9 	bl	800b87c <RCC_SetFlashLatencyFromMSIRange>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	f000 be82 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a4d6:	4b76      	ldr	r3, [pc, #472]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	4a75      	ldr	r2, [pc, #468]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a4dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4e0:	6093      	str	r3, [r2, #8]
 800a4e2:	4b73      	ldr	r3, [pc, #460]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ee:	4970      	ldr	r1, [pc, #448]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a4fc:	d309      	bcc.n	800a512 <HAL_RCC_OscConfig+0xe2>
 800a4fe:	4b6c      	ldr	r3, [pc, #432]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	f023 021f 	bic.w	r2, r3, #31
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a1b      	ldr	r3, [r3, #32]
 800a50a:	4969      	ldr	r1, [pc, #420]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60cb      	str	r3, [r1, #12]
 800a510:	e07e      	b.n	800a610 <HAL_RCC_OscConfig+0x1e0>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a516:	2b00      	cmp	r3, #0
 800a518:	da0a      	bge.n	800a530 <HAL_RCC_OscConfig+0x100>
 800a51a:	4b65      	ldr	r3, [pc, #404]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	015b      	lsls	r3, r3, #5
 800a528:	4961      	ldr	r1, [pc, #388]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60cb      	str	r3, [r1, #12]
 800a52e:	e06f      	b.n	800a610 <HAL_RCC_OscConfig+0x1e0>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a538:	d30a      	bcc.n	800a550 <HAL_RCC_OscConfig+0x120>
 800a53a:	4b5d      	ldr	r3, [pc, #372]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	029b      	lsls	r3, r3, #10
 800a548:	4959      	ldr	r1, [pc, #356]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60cb      	str	r3, [r1, #12]
 800a54e:	e05f      	b.n	800a610 <HAL_RCC_OscConfig+0x1e0>
 800a550:	4b57      	ldr	r3, [pc, #348]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	03db      	lsls	r3, r3, #15
 800a55e:	4954      	ldr	r1, [pc, #336]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a560:	4313      	orrs	r3, r2
 800a562:	60cb      	str	r3, [r1, #12]
 800a564:	e054      	b.n	800a610 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a566:	4b52      	ldr	r3, [pc, #328]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	4a51      	ldr	r2, [pc, #324]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a56c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a570:	6093      	str	r3, [r2, #8]
 800a572:	4b4f      	ldr	r3, [pc, #316]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a57e:	494c      	ldr	r1, [pc, #304]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a580:	4313      	orrs	r3, r2
 800a582:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a588:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a58c:	d309      	bcc.n	800a5a2 <HAL_RCC_OscConfig+0x172>
 800a58e:	4b48      	ldr	r3, [pc, #288]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	f023 021f 	bic.w	r2, r3, #31
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	4945      	ldr	r1, [pc, #276]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	60cb      	str	r3, [r1, #12]
 800a5a0:	e028      	b.n	800a5f4 <HAL_RCC_OscConfig+0x1c4>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	da0a      	bge.n	800a5c0 <HAL_RCC_OscConfig+0x190>
 800a5aa:	4b41      	ldr	r3, [pc, #260]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	015b      	lsls	r3, r3, #5
 800a5b8:	493d      	ldr	r1, [pc, #244]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60cb      	str	r3, [r1, #12]
 800a5be:	e019      	b.n	800a5f4 <HAL_RCC_OscConfig+0x1c4>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5c8:	d30a      	bcc.n	800a5e0 <HAL_RCC_OscConfig+0x1b0>
 800a5ca:	4b39      	ldr	r3, [pc, #228]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	029b      	lsls	r3, r3, #10
 800a5d8:	4935      	ldr	r1, [pc, #212]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	60cb      	str	r3, [r1, #12]
 800a5de:	e009      	b.n	800a5f4 <HAL_RCC_OscConfig+0x1c4>
 800a5e0:	4b33      	ldr	r3, [pc, #204]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a1b      	ldr	r3, [r3, #32]
 800a5ec:	03db      	lsls	r3, r3, #15
 800a5ee:	4930      	ldr	r1, [pc, #192]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fe:	4618      	mov	r0, r3
 800a600:	f001 f93c 	bl	800b87c <RCC_SetFlashLatencyFromMSIRange>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	f000 bde5 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800a610:	f001 f8de 	bl	800b7d0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a614:	4b27      	ldr	r3, [pc, #156]	@ (800a6b4 <HAL_RCC_OscConfig+0x284>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7f9 f827 	bl	800366c <HAL_InitTick>
 800a61e:	4603      	mov	r3, r0
 800a620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800a624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 808a 	beq.w	800a742 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800a62e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a632:	f000 bdd2 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d066      	beq.n	800a70c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800a63e:	4b1c      	ldr	r3, [pc, #112]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a1b      	ldr	r2, [pc, #108]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a644:	f043 0301 	orr.w	r3, r3, #1
 800a648:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a64a:	f7f9 f899 	bl	8003780 <HAL_GetTick>
 800a64e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a650:	e009      	b.n	800a666 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a652:	f7f9 f895 	bl	8003780 <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d902      	bls.n	800a666 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	f000 bdba 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a666:	4b12      	ldr	r3, [pc, #72]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d0ef      	beq.n	800a652 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800a672:	4b0f      	ldr	r3, [pc, #60]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	4a0e      	ldr	r2, [pc, #56]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a678:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a67c:	6093      	str	r3, [r2, #8]
 800a67e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68a:	4909      	ldr	r1, [pc, #36]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a694:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a698:	d30e      	bcc.n	800a6b8 <HAL_RCC_OscConfig+0x288>
 800a69a:	4b05      	ldr	r3, [pc, #20]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	f023 021f 	bic.w	r2, r3, #31
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	4902      	ldr	r1, [pc, #8]	@ (800a6b0 <HAL_RCC_OscConfig+0x280>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	60cb      	str	r3, [r1, #12]
 800a6ac:	e04a      	b.n	800a744 <HAL_RCC_OscConfig+0x314>
 800a6ae:	bf00      	nop
 800a6b0:	46020c00 	.word	0x46020c00
 800a6b4:	20000020 	.word	0x20000020
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da0a      	bge.n	800a6d6 <HAL_RCC_OscConfig+0x2a6>
 800a6c0:	4b98      	ldr	r3, [pc, #608]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a1b      	ldr	r3, [r3, #32]
 800a6cc:	015b      	lsls	r3, r3, #5
 800a6ce:	4995      	ldr	r1, [pc, #596]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60cb      	str	r3, [r1, #12]
 800a6d4:	e036      	b.n	800a744 <HAL_RCC_OscConfig+0x314>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6de:	d30a      	bcc.n	800a6f6 <HAL_RCC_OscConfig+0x2c6>
 800a6e0:	4b90      	ldr	r3, [pc, #576]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	029b      	lsls	r3, r3, #10
 800a6ee:	498d      	ldr	r1, [pc, #564]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60cb      	str	r3, [r1, #12]
 800a6f4:	e026      	b.n	800a744 <HAL_RCC_OscConfig+0x314>
 800a6f6:	4b8b      	ldr	r3, [pc, #556]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	03db      	lsls	r3, r3, #15
 800a704:	4987      	ldr	r1, [pc, #540]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a706:	4313      	orrs	r3, r2
 800a708:	60cb      	str	r3, [r1, #12]
 800a70a:	e01b      	b.n	800a744 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800a70c:	4b85      	ldr	r3, [pc, #532]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a84      	ldr	r2, [pc, #528]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a712:	f023 0301 	bic.w	r3, r3, #1
 800a716:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a718:	f7f9 f832 	bl	8003780 <HAL_GetTick>
 800a71c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a71e:	e009      	b.n	800a734 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a720:	f7f9 f82e 	bl	8003780 <HAL_GetTick>
 800a724:	4602      	mov	r2, r0
 800a726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d902      	bls.n	800a734 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	f000 bd53 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800a734:	4b7b      	ldr	r3, [pc, #492]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1ef      	bne.n	800a720 <HAL_RCC_OscConfig+0x2f0>
 800a740:	e000      	b.n	800a744 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a742:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 808b 	beq.w	800a868 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a754:	2b08      	cmp	r3, #8
 800a756:	d005      	beq.n	800a764 <HAL_RCC_OscConfig+0x334>
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	2b0c      	cmp	r3, #12
 800a75c:	d109      	bne.n	800a772 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a760:	2b03      	cmp	r3, #3
 800a762:	d106      	bne.n	800a772 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d17d      	bne.n	800a868 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	f000 bd34 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a77a:	d106      	bne.n	800a78a <HAL_RCC_OscConfig+0x35a>
 800a77c:	4b69      	ldr	r3, [pc, #420]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a68      	ldr	r2, [pc, #416]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	e041      	b.n	800a80e <HAL_RCC_OscConfig+0x3de>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a792:	d112      	bne.n	800a7ba <HAL_RCC_OscConfig+0x38a>
 800a794:	4b63      	ldr	r3, [pc, #396]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a62      	ldr	r2, [pc, #392]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a79a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	4b60      	ldr	r3, [pc, #384]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a5f      	ldr	r2, [pc, #380]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7aa:	6013      	str	r3, [r2, #0]
 800a7ac:	4b5d      	ldr	r3, [pc, #372]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a5c      	ldr	r2, [pc, #368]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	e029      	b.n	800a80e <HAL_RCC_OscConfig+0x3de>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a7c2:	d112      	bne.n	800a7ea <HAL_RCC_OscConfig+0x3ba>
 800a7c4:	4b57      	ldr	r3, [pc, #348]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a56      	ldr	r2, [pc, #344]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	4b54      	ldr	r3, [pc, #336]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a53      	ldr	r2, [pc, #332]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	4b51      	ldr	r3, [pc, #324]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a50      	ldr	r2, [pc, #320]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	e011      	b.n	800a80e <HAL_RCC_OscConfig+0x3de>
 800a7ea:	4b4e      	ldr	r3, [pc, #312]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a4d      	ldr	r2, [pc, #308]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7f4:	6013      	str	r3, [r2, #0]
 800a7f6:	4b4b      	ldr	r3, [pc, #300]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a4a      	ldr	r2, [pc, #296]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a7fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a800:	6013      	str	r3, [r2, #0]
 800a802:	4b48      	ldr	r3, [pc, #288]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a47      	ldr	r2, [pc, #284]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a808:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a80c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d014      	beq.n	800a840 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800a816:	f7f8 ffb3 	bl	8003780 <HAL_GetTick>
 800a81a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a81c:	e009      	b.n	800a832 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a81e:	f7f8 ffaf 	bl	8003780 <HAL_GetTick>
 800a822:	4602      	mov	r2, r0
 800a824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	2b64      	cmp	r3, #100	@ 0x64
 800a82a:	d902      	bls.n	800a832 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	f000 bcd4 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a832:	4b3c      	ldr	r3, [pc, #240]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0ef      	beq.n	800a81e <HAL_RCC_OscConfig+0x3ee>
 800a83e:	e013      	b.n	800a868 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800a840:	f7f8 ff9e 	bl	8003780 <HAL_GetTick>
 800a844:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a846:	e009      	b.n	800a85c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a848:	f7f8 ff9a 	bl	8003780 <HAL_GetTick>
 800a84c:	4602      	mov	r2, r0
 800a84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	2b64      	cmp	r3, #100	@ 0x64
 800a854:	d902      	bls.n	800a85c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a856:	2303      	movs	r3, #3
 800a858:	f000 bcbf 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a85c:	4b31      	ldr	r3, [pc, #196]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1ef      	bne.n	800a848 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b00      	cmp	r3, #0
 800a872:	d05f      	beq.n	800a934 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a876:	2b04      	cmp	r3, #4
 800a878:	d005      	beq.n	800a886 <HAL_RCC_OscConfig+0x456>
 800a87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87c:	2b0c      	cmp	r3, #12
 800a87e:	d114      	bne.n	800a8aa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a882:	2b02      	cmp	r3, #2
 800a884:	d111      	bne.n	800a8aa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d102      	bne.n	800a894 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	f000 bca3 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a894:	4b23      	ldr	r3, [pc, #140]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	041b      	lsls	r3, r3, #16
 800a8a2:	4920      	ldr	r1, [pc, #128]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a8a8:	e044      	b.n	800a934 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d024      	beq.n	800a8fc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800a8b2:	4b1c      	ldr	r3, [pc, #112]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a1b      	ldr	r2, [pc, #108]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a8b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a8be:	f7f8 ff5f 	bl	8003780 <HAL_GetTick>
 800a8c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8c4:	e009      	b.n	800a8da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8c6:	f7f8 ff5b 	bl	8003780 <HAL_GetTick>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d902      	bls.n	800a8da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	f000 bc80 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8da:	4b12      	ldr	r3, [pc, #72]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0ef      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800a8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	041b      	lsls	r3, r3, #16
 800a8f4:	490b      	ldr	r1, [pc, #44]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	610b      	str	r3, [r1, #16]
 800a8fa:	e01b      	b.n	800a934 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800a8fc:	4b09      	ldr	r3, [pc, #36]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a08      	ldr	r2, [pc, #32]	@ (800a924 <HAL_RCC_OscConfig+0x4f4>)
 800a902:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a906:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a908:	f7f8 ff3a 	bl	8003780 <HAL_GetTick>
 800a90c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a90e:	e00b      	b.n	800a928 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a910:	f7f8 ff36 	bl	8003780 <HAL_GetTick>
 800a914:	4602      	mov	r2, r0
 800a916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d904      	bls.n	800a928 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	f000 bc5b 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
 800a924:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a928:	4baf      	ldr	r3, [pc, #700]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1ed      	bne.n	800a910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0308 	and.w	r3, r3, #8
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 80c8 	beq.w	800aad2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800a942:	2300      	movs	r3, #0
 800a944:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a948:	4ba7      	ldr	r3, [pc, #668]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800a94a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a94e:	f003 0304 	and.w	r3, r3, #4
 800a952:	2b00      	cmp	r3, #0
 800a954:	d111      	bne.n	800a97a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a956:	4ba4      	ldr	r3, [pc, #656]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800a958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a95c:	4aa2      	ldr	r2, [pc, #648]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800a95e:	f043 0304 	orr.w	r3, r3, #4
 800a962:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a966:	4ba0      	ldr	r3, [pc, #640]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800a968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a96c:	f003 0304 	and.w	r3, r3, #4
 800a970:	617b      	str	r3, [r7, #20]
 800a972:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800a974:	2301      	movs	r3, #1
 800a976:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a97a:	4b9c      	ldr	r3, [pc, #624]	@ (800abec <HAL_RCC_OscConfig+0x7bc>)
 800a97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	d119      	bne.n	800a9ba <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a986:	4b99      	ldr	r3, [pc, #612]	@ (800abec <HAL_RCC_OscConfig+0x7bc>)
 800a988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98a:	4a98      	ldr	r2, [pc, #608]	@ (800abec <HAL_RCC_OscConfig+0x7bc>)
 800a98c:	f043 0301 	orr.w	r3, r3, #1
 800a990:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a992:	f7f8 fef5 	bl	8003780 <HAL_GetTick>
 800a996:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a998:	e009      	b.n	800a9ae <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a99a:	f7f8 fef1 	bl	8003780 <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d902      	bls.n	800a9ae <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	f000 bc16 	b.w	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a9ae:	4b8f      	ldr	r3, [pc, #572]	@ (800abec <HAL_RCC_OscConfig+0x7bc>)
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d0ef      	beq.n	800a99a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d05f      	beq.n	800aa82 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800a9c2:	4b89      	ldr	r3, [pc, #548]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800a9c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9c8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	699a      	ldr	r2, [r3, #24]
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d037      	beq.n	800aa48 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d006      	beq.n	800a9f0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d101      	bne.n	800a9f0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e3f4      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01b      	beq.n	800aa32 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800a9fa:	4b7b      	ldr	r3, [pc, #492]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800a9fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa00:	4a79      	ldr	r2, [pc, #484]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aa02:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800aa06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800aa0a:	f7f8 feb9 	bl	8003780 <HAL_GetTick>
 800aa0e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800aa10:	e008      	b.n	800aa24 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa12:	f7f8 feb5 	bl	8003780 <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	2b05      	cmp	r3, #5
 800aa1e:	d901      	bls.n	800aa24 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e3da      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800aa24:	4b70      	ldr	r3, [pc, #448]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aa26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1ef      	bne.n	800aa12 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800aa32:	4b6d      	ldr	r3, [pc, #436]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aa34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa38:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	4969      	ldr	r1, [pc, #420]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800aa48:	4b67      	ldr	r3, [pc, #412]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aa4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa4e:	4a66      	ldr	r2, [pc, #408]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aa50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800aa58:	f7f8 fe92 	bl	8003780 <HAL_GetTick>
 800aa5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800aa5e:	e008      	b.n	800aa72 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa60:	f7f8 fe8e 	bl	8003780 <HAL_GetTick>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	2b05      	cmp	r3, #5
 800aa6c:	d901      	bls.n	800aa72 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e3b3      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800aa72:	4b5d      	ldr	r3, [pc, #372]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aa74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0ef      	beq.n	800aa60 <HAL_RCC_OscConfig+0x630>
 800aa80:	e01b      	b.n	800aaba <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800aa82:	4b59      	ldr	r3, [pc, #356]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aa84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa88:	4a57      	ldr	r2, [pc, #348]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aa8a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800aa8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800aa92:	f7f8 fe75 	bl	8003780 <HAL_GetTick>
 800aa96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800aa98:	e008      	b.n	800aaac <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa9a:	f7f8 fe71 	bl	8003780 <HAL_GetTick>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	2b05      	cmp	r3, #5
 800aaa6:	d901      	bls.n	800aaac <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e396      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800aaac:	4b4e      	ldr	r3, [pc, #312]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aaae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1ef      	bne.n	800aa9a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aaba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d107      	bne.n	800aad2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aac2:	4b49      	ldr	r3, [pc, #292]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aac8:	4a47      	ldr	r2, [pc, #284]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aaca:	f023 0304 	bic.w	r3, r3, #4
 800aace:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 0304 	and.w	r3, r3, #4
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 8111 	beq.w	800ad02 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800aae0:	2300      	movs	r3, #0
 800aae2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aae6:	4b40      	ldr	r3, [pc, #256]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaec:	f003 0304 	and.w	r3, r3, #4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d111      	bne.n	800ab18 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aaf4:	4b3c      	ldr	r3, [pc, #240]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aaf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aafa:	4a3b      	ldr	r2, [pc, #236]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aafc:	f043 0304 	orr.w	r3, r3, #4
 800ab00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ab04:	4b38      	ldr	r3, [pc, #224]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800ab06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab0a:	f003 0304 	and.w	r3, r3, #4
 800ab0e:	613b      	str	r3, [r7, #16]
 800ab10:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab18:	4b34      	ldr	r3, [pc, #208]	@ (800abec <HAL_RCC_OscConfig+0x7bc>)
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d118      	bne.n	800ab56 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ab24:	4b31      	ldr	r3, [pc, #196]	@ (800abec <HAL_RCC_OscConfig+0x7bc>)
 800ab26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab28:	4a30      	ldr	r2, [pc, #192]	@ (800abec <HAL_RCC_OscConfig+0x7bc>)
 800ab2a:	f043 0301 	orr.w	r3, r3, #1
 800ab2e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab30:	f7f8 fe26 	bl	8003780 <HAL_GetTick>
 800ab34:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab36:	e008      	b.n	800ab4a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab38:	f7f8 fe22 	bl	8003780 <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d901      	bls.n	800ab4a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e347      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ab4a:	4b28      	ldr	r3, [pc, #160]	@ (800abec <HAL_RCC_OscConfig+0x7bc>)
 800ab4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0f0      	beq.n	800ab38 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d01f      	beq.n	800aba2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f003 0304 	and.w	r3, r3, #4
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d010      	beq.n	800ab90 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800ab70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab74:	4a1c      	ldr	r2, [pc, #112]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800ab76:	f043 0304 	orr.w	r3, r3, #4
 800ab7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ab7e:	4b1a      	ldr	r3, [pc, #104]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800ab80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab84:	4a18      	ldr	r2, [pc, #96]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800ab86:	f043 0301 	orr.w	r3, r3, #1
 800ab8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ab8e:	e018      	b.n	800abc2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ab90:	4b15      	ldr	r3, [pc, #84]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800ab92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab96:	4a14      	ldr	r2, [pc, #80]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800ab98:	f043 0301 	orr.w	r3, r3, #1
 800ab9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800aba0:	e00f      	b.n	800abc2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800aba2:	4b11      	ldr	r3, [pc, #68]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800aba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aba8:	4a0f      	ldr	r2, [pc, #60]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800abaa:	f023 0301 	bic.w	r3, r3, #1
 800abae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800abb2:	4b0d      	ldr	r3, [pc, #52]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800abb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abb8:	4a0b      	ldr	r2, [pc, #44]	@ (800abe8 <HAL_RCC_OscConfig+0x7b8>)
 800abba:	f023 0304 	bic.w	r3, r3, #4
 800abbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d057      	beq.n	800ac7a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800abca:	f7f8 fdd9 	bl	8003780 <HAL_GetTick>
 800abce:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abd0:	e00e      	b.n	800abf0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abd2:	f7f8 fdd5 	bl	8003780 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d905      	bls.n	800abf0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800abe4:	2303      	movs	r3, #3
 800abe6:	e2f8      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
 800abe8:	46020c00 	.word	0x46020c00
 800abec:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abf0:	4b9c      	ldr	r3, [pc, #624]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800abf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abf6:	f003 0302 	and.w	r3, r3, #2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0e9      	beq.n	800abd2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d01b      	beq.n	800ac42 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ac0a:	4b96      	ldr	r3, [pc, #600]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ac0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac10:	4a94      	ldr	r2, [pc, #592]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ac12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800ac1a:	e00a      	b.n	800ac32 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac1c:	f7f8 fdb0 	bl	8003780 <HAL_GetTick>
 800ac20:	4602      	mov	r2, r0
 800ac22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d901      	bls.n	800ac32 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e2d3      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800ac32:	4b8c      	ldr	r3, [pc, #560]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ac34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0ed      	beq.n	800ac1c <HAL_RCC_OscConfig+0x7ec>
 800ac40:	e053      	b.n	800acea <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ac42:	4b88      	ldr	r3, [pc, #544]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ac44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac48:	4a86      	ldr	r2, [pc, #536]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ac4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ac52:	e00a      	b.n	800ac6a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac54:	f7f8 fd94 	bl	8003780 <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d901      	bls.n	800ac6a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e2b7      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ac6a:	4b7e      	ldr	r3, [pc, #504]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ac6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1ed      	bne.n	800ac54 <HAL_RCC_OscConfig+0x824>
 800ac78:	e037      	b.n	800acea <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800ac7a:	f7f8 fd81 	bl	8003780 <HAL_GetTick>
 800ac7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ac80:	e00a      	b.n	800ac98 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac82:	f7f8 fd7d 	bl	8003780 <HAL_GetTick>
 800ac86:	4602      	mov	r2, r0
 800ac88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d901      	bls.n	800ac98 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800ac94:	2303      	movs	r3, #3
 800ac96:	e2a0      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ac98:	4b72      	ldr	r3, [pc, #456]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ac9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac9e:	f003 0302 	and.w	r3, r3, #2
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1ed      	bne.n	800ac82 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800aca6:	4b6f      	ldr	r3, [pc, #444]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800aca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800acac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d01a      	beq.n	800acea <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800acb4:	4b6b      	ldr	r3, [pc, #428]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800acb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800acba:	4a6a      	ldr	r2, [pc, #424]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800acbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800acc4:	e00a      	b.n	800acdc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acc6:	f7f8 fd5b 	bl	8003780 <HAL_GetTick>
 800acca:	4602      	mov	r2, r0
 800accc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d901      	bls.n	800acdc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800acd8:	2303      	movs	r3, #3
 800acda:	e27e      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800acdc:	4b61      	ldr	r3, [pc, #388]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800acde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ace2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1ed      	bne.n	800acc6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800acea:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d107      	bne.n	800ad02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800acf2:	4b5c      	ldr	r3, [pc, #368]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800acf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acf8:	4a5a      	ldr	r2, [pc, #360]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800acfa:	f023 0304 	bic.w	r3, r3, #4
 800acfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0320 	and.w	r3, r3, #32
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d036      	beq.n	800ad7c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d019      	beq.n	800ad4a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800ad16:	4b53      	ldr	r3, [pc, #332]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a52      	ldr	r2, [pc, #328]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ad1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ad20:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ad22:	f7f8 fd2d 	bl	8003780 <HAL_GetTick>
 800ad26:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ad28:	e008      	b.n	800ad3c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad2a:	f7f8 fd29 	bl	8003780 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d901      	bls.n	800ad3c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e24e      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ad3c:	4b49      	ldr	r3, [pc, #292]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d0f0      	beq.n	800ad2a <HAL_RCC_OscConfig+0x8fa>
 800ad48:	e018      	b.n	800ad7c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800ad4a:	4b46      	ldr	r3, [pc, #280]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a45      	ldr	r2, [pc, #276]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ad50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad54:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ad56:	f7f8 fd13 	bl	8003780 <HAL_GetTick>
 800ad5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ad5c:	e008      	b.n	800ad70 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad5e:	f7f8 fd0f 	bl	8003780 <HAL_GetTick>
 800ad62:	4602      	mov	r2, r0
 800ad64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d901      	bls.n	800ad70 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	e234      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ad70:	4b3c      	ldr	r3, [pc, #240]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1f0      	bne.n	800ad5e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d036      	beq.n	800adf6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d019      	beq.n	800adc4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800ad90:	4b34      	ldr	r3, [pc, #208]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a33      	ldr	r2, [pc, #204]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ad96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ad9c:	f7f8 fcf0 	bl	8003780 <HAL_GetTick>
 800ada0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800ada2:	e008      	b.n	800adb6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ada4:	f7f8 fcec 	bl	8003780 <HAL_GetTick>
 800ada8:	4602      	mov	r2, r0
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d901      	bls.n	800adb6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e211      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800adb6:	4b2b      	ldr	r3, [pc, #172]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d0f0      	beq.n	800ada4 <HAL_RCC_OscConfig+0x974>
 800adc2:	e018      	b.n	800adf6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800adc4:	4b27      	ldr	r3, [pc, #156]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a26      	ldr	r2, [pc, #152]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800adca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800adce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800add0:	f7f8 fcd6 	bl	8003780 <HAL_GetTick>
 800add4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800add6:	e008      	b.n	800adea <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800add8:	f7f8 fcd2 	bl	8003780 <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d901      	bls.n	800adea <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e1f7      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800adea:	4b1e      	ldr	r3, [pc, #120]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1f0      	bne.n	800add8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d07f      	beq.n	800af02 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d062      	beq.n	800aed0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800ae0a:	4b16      	ldr	r3, [pc, #88]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	4a15      	ldr	r2, [pc, #84]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ae10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ae14:	6093      	str	r3, [r2, #8]
 800ae16:	4b13      	ldr	r3, [pc, #76]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae22:	4910      	ldr	r1, [pc, #64]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800ae30:	d309      	bcc.n	800ae46 <HAL_RCC_OscConfig+0xa16>
 800ae32:	4b0c      	ldr	r3, [pc, #48]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f023 021f 	bic.w	r2, r3, #31
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	4909      	ldr	r1, [pc, #36]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ae40:	4313      	orrs	r3, r2
 800ae42:	60cb      	str	r3, [r1, #12]
 800ae44:	e02a      	b.n	800ae9c <HAL_RCC_OscConfig+0xa6c>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	da0c      	bge.n	800ae68 <HAL_RCC_OscConfig+0xa38>
 800ae4e:	4b05      	ldr	r3, [pc, #20]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	015b      	lsls	r3, r3, #5
 800ae5c:	4901      	ldr	r1, [pc, #4]	@ (800ae64 <HAL_RCC_OscConfig+0xa34>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60cb      	str	r3, [r1, #12]
 800ae62:	e01b      	b.n	800ae9c <HAL_RCC_OscConfig+0xa6c>
 800ae64:	46020c00 	.word	0x46020c00
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae70:	d30a      	bcc.n	800ae88 <HAL_RCC_OscConfig+0xa58>
 800ae72:	4ba1      	ldr	r3, [pc, #644]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a1b      	ldr	r3, [r3, #32]
 800ae7e:	029b      	lsls	r3, r3, #10
 800ae80:	499d      	ldr	r1, [pc, #628]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	60cb      	str	r3, [r1, #12]
 800ae86:	e009      	b.n	800ae9c <HAL_RCC_OscConfig+0xa6c>
 800ae88:	4b9b      	ldr	r3, [pc, #620]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	03db      	lsls	r3, r3, #15
 800ae96:	4998      	ldr	r1, [pc, #608]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800ae9c:	4b96      	ldr	r3, [pc, #600]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a95      	ldr	r2, [pc, #596]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800aea2:	f043 0310 	orr.w	r3, r3, #16
 800aea6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aea8:	f7f8 fc6a 	bl	8003780 <HAL_GetTick>
 800aeac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800aeae:	e008      	b.n	800aec2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800aeb0:	f7f8 fc66 	bl	8003780 <HAL_GetTick>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d901      	bls.n	800aec2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e18b      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800aec2:	4b8d      	ldr	r3, [pc, #564]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 0320 	and.w	r3, r3, #32
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d0f0      	beq.n	800aeb0 <HAL_RCC_OscConfig+0xa80>
 800aece:	e018      	b.n	800af02 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800aed0:	4b89      	ldr	r3, [pc, #548]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a88      	ldr	r2, [pc, #544]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800aed6:	f023 0310 	bic.w	r3, r3, #16
 800aeda:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800aedc:	f7f8 fc50 	bl	8003780 <HAL_GetTick>
 800aee0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800aee2:	e008      	b.n	800aef6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800aee4:	f7f8 fc4c 	bl	8003780 <HAL_GetTick>
 800aee8:	4602      	mov	r2, r0
 800aeea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeec:	1ad3      	subs	r3, r2, r3
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d901      	bls.n	800aef6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e171      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800aef6:	4b80      	ldr	r3, [pc, #512]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1f0      	bne.n	800aee4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 8166 	beq.w	800b1d8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af12:	4b79      	ldr	r3, [pc, #484]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	f003 030c 	and.w	r3, r3, #12
 800af1a:	2b0c      	cmp	r3, #12
 800af1c:	f000 80f2 	beq.w	800b104 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af24:	2b02      	cmp	r3, #2
 800af26:	f040 80c5 	bne.w	800b0b4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800af2a:	4b73      	ldr	r3, [pc, #460]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a72      	ldr	r2, [pc, #456]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800af30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af34:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800af36:	f7f8 fc23 	bl	8003780 <HAL_GetTick>
 800af3a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800af3c:	e008      	b.n	800af50 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af3e:	f7f8 fc1f 	bl	8003780 <HAL_GetTick>
 800af42:	4602      	mov	r2, r0
 800af44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d901      	bls.n	800af50 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e144      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800af50:	4b69      	ldr	r3, [pc, #420]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1f0      	bne.n	800af3e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af5c:	4b66      	ldr	r3, [pc, #408]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800af5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	d111      	bne.n	800af8e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800af6a:	4b63      	ldr	r3, [pc, #396]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800af6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af70:	4a61      	ldr	r2, [pc, #388]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800af72:	f043 0304 	orr.w	r3, r3, #4
 800af76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800af7a:	4b5f      	ldr	r3, [pc, #380]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800af7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af80:	f003 0304 	and.w	r3, r3, #4
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800af88:	2301      	movs	r3, #1
 800af8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800af8e:	4b5b      	ldr	r3, [pc, #364]	@ (800b0fc <HAL_RCC_OscConfig+0xccc>)
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800af96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af9a:	d102      	bne.n	800afa2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800af9c:	2301      	movs	r3, #1
 800af9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800afa2:	4b56      	ldr	r3, [pc, #344]	@ (800b0fc <HAL_RCC_OscConfig+0xccc>)
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	4a55      	ldr	r2, [pc, #340]	@ (800b0fc <HAL_RCC_OscConfig+0xccc>)
 800afa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800afac:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800afae:	4b52      	ldr	r3, [pc, #328]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800afb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afb6:	f023 0303 	bic.w	r3, r3, #3
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800afc2:	3a01      	subs	r2, #1
 800afc4:	0212      	lsls	r2, r2, #8
 800afc6:	4311      	orrs	r1, r2
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800afcc:	430a      	orrs	r2, r1
 800afce:	494a      	ldr	r1, [pc, #296]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800afd0:	4313      	orrs	r3, r2
 800afd2:	628b      	str	r3, [r1, #40]	@ 0x28
 800afd4:	4b48      	ldr	r3, [pc, #288]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800afd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afd8:	4b49      	ldr	r3, [pc, #292]	@ (800b100 <HAL_RCC_OscConfig+0xcd0>)
 800afda:	4013      	ands	r3, r2
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800afe0:	3a01      	subs	r2, #1
 800afe2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800afea:	3a01      	subs	r2, #1
 800afec:	0252      	lsls	r2, r2, #9
 800afee:	b292      	uxth	r2, r2
 800aff0:	4311      	orrs	r1, r2
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800aff6:	3a01      	subs	r2, #1
 800aff8:	0412      	lsls	r2, r2, #16
 800affa:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800affe:	4311      	orrs	r1, r2
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800b004:	3a01      	subs	r2, #1
 800b006:	0612      	lsls	r2, r2, #24
 800b008:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b00c:	430a      	orrs	r2, r1
 800b00e:	493a      	ldr	r1, [pc, #232]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b010:	4313      	orrs	r3, r2
 800b012:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800b014:	4b38      	ldr	r3, [pc, #224]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b018:	4a37      	ldr	r2, [pc, #220]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b01a:	f023 0310 	bic.w	r3, r3, #16
 800b01e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b024:	4a34      	ldr	r2, [pc, #208]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800b02a:	4b33      	ldr	r3, [pc, #204]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b02e:	4a32      	ldr	r2, [pc, #200]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b030:	f043 0310 	orr.w	r3, r3, #16
 800b034:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800b036:	4b30      	ldr	r3, [pc, #192]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b03a:	f023 020c 	bic.w	r2, r3, #12
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b042:	492d      	ldr	r1, [pc, #180]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b044:	4313      	orrs	r3, r2
 800b046:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800b048:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d105      	bne.n	800b05c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800b050:	4b2a      	ldr	r3, [pc, #168]	@ (800b0fc <HAL_RCC_OscConfig+0xccc>)
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	4a29      	ldr	r2, [pc, #164]	@ (800b0fc <HAL_RCC_OscConfig+0xccc>)
 800b056:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b05a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800b05c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b060:	2b01      	cmp	r3, #1
 800b062:	d107      	bne.n	800b074 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800b064:	4b24      	ldr	r3, [pc, #144]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b06a:	4a23      	ldr	r2, [pc, #140]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b06c:	f023 0304 	bic.w	r3, r3, #4
 800b070:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800b074:	4b20      	ldr	r3, [pc, #128]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a1f      	ldr	r2, [pc, #124]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b07a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b07e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b080:	f7f8 fb7e 	bl	8003780 <HAL_GetTick>
 800b084:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b086:	e008      	b.n	800b09a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b088:	f7f8 fb7a 	bl	8003780 <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	2b02      	cmp	r3, #2
 800b094:	d901      	bls.n	800b09a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e09f      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b09a:	4b17      	ldr	r3, [pc, #92]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d0f0      	beq.n	800b088 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b0a6:	4b14      	ldr	r3, [pc, #80]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0aa:	4a13      	ldr	r2, [pc, #76]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b0ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b0b0:	6293      	str	r3, [r2, #40]	@ 0x28
 800b0b2:	e091      	b.n	800b1d8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800b0b4:	4b10      	ldr	r3, [pc, #64]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a0f      	ldr	r2, [pc, #60]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b0ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800b0c0:	f7f8 fb5e 	bl	8003780 <HAL_GetTick>
 800b0c4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b0c6:	e008      	b.n	800b0da <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0c8:	f7f8 fb5a 	bl	8003780 <HAL_GetTick>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d901      	bls.n	800b0da <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e07f      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800b0da:	4b07      	ldr	r3, [pc, #28]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1f0      	bne.n	800b0c8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800b0e6:	4b04      	ldr	r3, [pc, #16]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ea:	4a03      	ldr	r2, [pc, #12]	@ (800b0f8 <HAL_RCC_OscConfig+0xcc8>)
 800b0ec:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b0f0:	f023 0303 	bic.w	r3, r3, #3
 800b0f4:	6293      	str	r3, [r2, #40]	@ 0x28
 800b0f6:	e06f      	b.n	800b1d8 <HAL_RCC_OscConfig+0xda8>
 800b0f8:	46020c00 	.word	0x46020c00
 800b0fc:	46020800 	.word	0x46020800
 800b100:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800b104:	4b37      	ldr	r3, [pc, #220]	@ (800b1e4 <HAL_RCC_OscConfig+0xdb4>)
 800b106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b108:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b10a:	4b36      	ldr	r3, [pc, #216]	@ (800b1e4 <HAL_RCC_OscConfig+0xdb4>)
 800b10c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b10e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b114:	2b01      	cmp	r3, #1
 800b116:	d039      	beq.n	800b18c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	f003 0203 	and.w	r2, r3, #3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b122:	429a      	cmp	r2, r3
 800b124:	d132      	bne.n	800b18c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	0a1b      	lsrs	r3, r3, #8
 800b12a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b132:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800b134:	429a      	cmp	r2, r3
 800b136:	d129      	bne.n	800b18c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800b142:	429a      	cmp	r2, r3
 800b144:	d122      	bne.n	800b18c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b150:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800b152:	429a      	cmp	r2, r3
 800b154:	d11a      	bne.n	800b18c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	0a5b      	lsrs	r3, r3, #9
 800b15a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b162:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b164:	429a      	cmp	r2, r3
 800b166:	d111      	bne.n	800b18c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	0c1b      	lsrs	r3, r3, #16
 800b16c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b174:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b176:	429a      	cmp	r2, r3
 800b178:	d108      	bne.n	800b18c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	0e1b      	lsrs	r3, r3, #24
 800b17e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b186:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b188:	429a      	cmp	r2, r3
 800b18a:	d001      	beq.n	800b190 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e024      	b.n	800b1da <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800b190:	4b14      	ldr	r3, [pc, #80]	@ (800b1e4 <HAL_RCC_OscConfig+0xdb4>)
 800b192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b194:	08db      	lsrs	r3, r3, #3
 800b196:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d01a      	beq.n	800b1d8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800b1a2:	4b10      	ldr	r3, [pc, #64]	@ (800b1e4 <HAL_RCC_OscConfig+0xdb4>)
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a6:	4a0f      	ldr	r2, [pc, #60]	@ (800b1e4 <HAL_RCC_OscConfig+0xdb4>)
 800b1a8:	f023 0310 	bic.w	r3, r3, #16
 800b1ac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1ae:	f7f8 fae7 	bl	8003780 <HAL_GetTick>
 800b1b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800b1b4:	bf00      	nop
 800b1b6:	f7f8 fae3 	bl	8003780 <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d0f9      	beq.n	800b1b6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1c6:	4a07      	ldr	r2, [pc, #28]	@ (800b1e4 <HAL_RCC_OscConfig+0xdb4>)
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800b1cc:	4b05      	ldr	r3, [pc, #20]	@ (800b1e4 <HAL_RCC_OscConfig+0xdb4>)
 800b1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1d0:	4a04      	ldr	r2, [pc, #16]	@ (800b1e4 <HAL_RCC_OscConfig+0xdb4>)
 800b1d2:	f043 0310 	orr.w	r3, r3, #16
 800b1d6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3738      	adds	r7, #56	@ 0x38
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	46020c00 	.word	0x46020c00

0800b1e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e1d9      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1fc:	4b9b      	ldr	r3, [pc, #620]	@ (800b46c <HAL_RCC_ClockConfig+0x284>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 030f 	and.w	r3, r3, #15
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	d910      	bls.n	800b22c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b20a:	4b98      	ldr	r3, [pc, #608]	@ (800b46c <HAL_RCC_ClockConfig+0x284>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f023 020f 	bic.w	r2, r3, #15
 800b212:	4996      	ldr	r1, [pc, #600]	@ (800b46c <HAL_RCC_ClockConfig+0x284>)
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	4313      	orrs	r3, r2
 800b218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b21a:	4b94      	ldr	r3, [pc, #592]	@ (800b46c <HAL_RCC_ClockConfig+0x284>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 030f 	and.w	r3, r3, #15
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	429a      	cmp	r2, r3
 800b226:	d001      	beq.n	800b22c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e1c1      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 0310 	and.w	r3, r3, #16
 800b234:	2b00      	cmp	r3, #0
 800b236:	d010      	beq.n	800b25a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	695a      	ldr	r2, [r3, #20]
 800b23c:	4b8c      	ldr	r3, [pc, #560]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b240:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b244:	429a      	cmp	r2, r3
 800b246:	d908      	bls.n	800b25a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800b248:	4b89      	ldr	r3, [pc, #548]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	4986      	ldr	r1, [pc, #536]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b256:	4313      	orrs	r3, r2
 800b258:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0308 	and.w	r3, r3, #8
 800b262:	2b00      	cmp	r3, #0
 800b264:	d012      	beq.n	800b28c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	691a      	ldr	r2, [r3, #16]
 800b26a:	4b81      	ldr	r3, [pc, #516]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	091b      	lsrs	r3, r3, #4
 800b270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b274:	429a      	cmp	r2, r3
 800b276:	d909      	bls.n	800b28c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b278:	4b7d      	ldr	r3, [pc, #500]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	011b      	lsls	r3, r3, #4
 800b286:	497a      	ldr	r1, [pc, #488]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b288:	4313      	orrs	r3, r2
 800b28a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 0304 	and.w	r3, r3, #4
 800b294:	2b00      	cmp	r3, #0
 800b296:	d010      	beq.n	800b2ba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68da      	ldr	r2, [r3, #12]
 800b29c:	4b74      	ldr	r3, [pc, #464]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d908      	bls.n	800b2ba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b2a8:	4b71      	ldr	r3, [pc, #452]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b2aa:	6a1b      	ldr	r3, [r3, #32]
 800b2ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	496e      	ldr	r1, [pc, #440]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 0302 	and.w	r3, r3, #2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d010      	beq.n	800b2e8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	4b69      	ldr	r3, [pc, #420]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	f003 030f 	and.w	r3, r3, #15
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d908      	bls.n	800b2e8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b2d6:	4b66      	ldr	r3, [pc, #408]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	f023 020f 	bic.w	r2, r3, #15
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	4963      	ldr	r1, [pc, #396]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 80d2 	beq.w	800b49a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d143      	bne.n	800b38a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b302:	4b5b      	ldr	r3, [pc, #364]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d110      	bne.n	800b332 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b310:	4b57      	ldr	r3, [pc, #348]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b316:	4a56      	ldr	r2, [pc, #344]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b318:	f043 0304 	orr.w	r3, r3, #4
 800b31c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b320:	4b53      	ldr	r3, [pc, #332]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	60bb      	str	r3, [r7, #8]
 800b32c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800b32e:	2301      	movs	r3, #1
 800b330:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800b332:	f7f8 fa25 	bl	8003780 <HAL_GetTick>
 800b336:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800b338:	4b4e      	ldr	r3, [pc, #312]	@ (800b474 <HAL_RCC_ClockConfig+0x28c>)
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00f      	beq.n	800b364 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b344:	e008      	b.n	800b358 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800b346:	f7f8 fa1b 	bl	8003780 <HAL_GetTick>
 800b34a:	4602      	mov	r2, r0
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	2b02      	cmp	r3, #2
 800b352:	d901      	bls.n	800b358 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800b354:	2303      	movs	r3, #3
 800b356:	e12b      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800b358:	4b46      	ldr	r3, [pc, #280]	@ (800b474 <HAL_RCC_ClockConfig+0x28c>)
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d0f0      	beq.n	800b346 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b364:	7dfb      	ldrb	r3, [r7, #23]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d107      	bne.n	800b37a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b36a:	4b41      	ldr	r3, [pc, #260]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b36c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b370:	4a3f      	ldr	r2, [pc, #252]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b372:	f023 0304 	bic.w	r3, r3, #4
 800b376:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800b37a:	4b3d      	ldr	r3, [pc, #244]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d121      	bne.n	800b3ca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	e112      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d107      	bne.n	800b3a2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b392:	4b37      	ldr	r3, [pc, #220]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d115      	bne.n	800b3ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e106      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d107      	bne.n	800b3ba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800b3aa:	4b31      	ldr	r3, [pc, #196]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 0304 	and.w	r3, r3, #4
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d109      	bne.n	800b3ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e0fa      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b3ba:	4b2d      	ldr	r3, [pc, #180]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e0f2      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800b3ca:	4b29      	ldr	r3, [pc, #164]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	f023 0203 	bic.w	r2, r3, #3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	4926      	ldr	r1, [pc, #152]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800b3dc:	f7f8 f9d0 	bl	8003780 <HAL_GetTick>
 800b3e0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	2b03      	cmp	r3, #3
 800b3e8:	d112      	bne.n	800b410 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b3ea:	e00a      	b.n	800b402 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3ec:	f7f8 f9c8 	bl	8003780 <HAL_GetTick>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d901      	bls.n	800b402 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e0d6      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b402:	4b1b      	ldr	r3, [pc, #108]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	f003 030c 	and.w	r3, r3, #12
 800b40a:	2b0c      	cmp	r3, #12
 800b40c:	d1ee      	bne.n	800b3ec <HAL_RCC_ClockConfig+0x204>
 800b40e:	e044      	b.n	800b49a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	2b02      	cmp	r3, #2
 800b416:	d112      	bne.n	800b43e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b418:	e00a      	b.n	800b430 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b41a:	f7f8 f9b1 	bl	8003780 <HAL_GetTick>
 800b41e:	4602      	mov	r2, r0
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b428:	4293      	cmp	r3, r2
 800b42a:	d901      	bls.n	800b430 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b42c:	2303      	movs	r3, #3
 800b42e:	e0bf      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b430:	4b0f      	ldr	r3, [pc, #60]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b432:	69db      	ldr	r3, [r3, #28]
 800b434:	f003 030c 	and.w	r3, r3, #12
 800b438:	2b08      	cmp	r3, #8
 800b43a:	d1ee      	bne.n	800b41a <HAL_RCC_ClockConfig+0x232>
 800b43c:	e02d      	b.n	800b49a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d123      	bne.n	800b48e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b446:	e00a      	b.n	800b45e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b448:	f7f8 f99a 	bl	8003780 <HAL_GetTick>
 800b44c:	4602      	mov	r2, r0
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b456:	4293      	cmp	r3, r2
 800b458:	d901      	bls.n	800b45e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e0a8      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b45e:	4b04      	ldr	r3, [pc, #16]	@ (800b470 <HAL_RCC_ClockConfig+0x288>)
 800b460:	69db      	ldr	r3, [r3, #28]
 800b462:	f003 030c 	and.w	r3, r3, #12
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1ee      	bne.n	800b448 <HAL_RCC_ClockConfig+0x260>
 800b46a:	e016      	b.n	800b49a <HAL_RCC_ClockConfig+0x2b2>
 800b46c:	40022000 	.word	0x40022000
 800b470:	46020c00 	.word	0x46020c00
 800b474:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b478:	f7f8 f982 	bl	8003780 <HAL_GetTick>
 800b47c:	4602      	mov	r2, r0
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b486:	4293      	cmp	r3, r2
 800b488:	d901      	bls.n	800b48e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e090      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b48e:	4b4a      	ldr	r3, [pc, #296]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	f003 030c 	and.w	r3, r3, #12
 800b496:	2b04      	cmp	r3, #4
 800b498:	d1ee      	bne.n	800b478 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0302 	and.w	r3, r3, #2
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d010      	beq.n	800b4c8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	689a      	ldr	r2, [r3, #8]
 800b4aa:	4b43      	ldr	r3, [pc, #268]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	f003 030f 	and.w	r3, r3, #15
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d208      	bcs.n	800b4c8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800b4b6:	4b40      	ldr	r3, [pc, #256]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	f023 020f 	bic.w	r2, r3, #15
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	493d      	ldr	r1, [pc, #244]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b4c8:	4b3c      	ldr	r3, [pc, #240]	@ (800b5bc <HAL_RCC_ClockConfig+0x3d4>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 030f 	and.w	r3, r3, #15
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d210      	bcs.n	800b4f8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4d6:	4b39      	ldr	r3, [pc, #228]	@ (800b5bc <HAL_RCC_ClockConfig+0x3d4>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f023 020f 	bic.w	r2, r3, #15
 800b4de:	4937      	ldr	r1, [pc, #220]	@ (800b5bc <HAL_RCC_ClockConfig+0x3d4>)
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4e6:	4b35      	ldr	r3, [pc, #212]	@ (800b5bc <HAL_RCC_ClockConfig+0x3d4>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 030f 	and.w	r3, r3, #15
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d001      	beq.n	800b4f8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e05b      	b.n	800b5b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b00      	cmp	r3, #0
 800b502:	d010      	beq.n	800b526 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	68da      	ldr	r2, [r3, #12]
 800b508:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b510:	429a      	cmp	r2, r3
 800b512:	d208      	bcs.n	800b526 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800b514:	4b28      	ldr	r3, [pc, #160]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b516:	6a1b      	ldr	r3, [r3, #32]
 800b518:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	4925      	ldr	r1, [pc, #148]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b522:	4313      	orrs	r3, r2
 800b524:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f003 0308 	and.w	r3, r3, #8
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d012      	beq.n	800b558 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	691a      	ldr	r2, [r3, #16]
 800b536:	4b20      	ldr	r3, [pc, #128]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	091b      	lsrs	r3, r3, #4
 800b53c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b540:	429a      	cmp	r2, r3
 800b542:	d209      	bcs.n	800b558 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800b544:	4b1c      	ldr	r3, [pc, #112]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b546:	6a1b      	ldr	r3, [r3, #32]
 800b548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	011b      	lsls	r3, r3, #4
 800b552:	4919      	ldr	r1, [pc, #100]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b554:	4313      	orrs	r3, r2
 800b556:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0310 	and.w	r3, r3, #16
 800b560:	2b00      	cmp	r3, #0
 800b562:	d010      	beq.n	800b586 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	695a      	ldr	r2, [r3, #20]
 800b568:	4b13      	ldr	r3, [pc, #76]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b56c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b570:	429a      	cmp	r2, r3
 800b572:	d208      	bcs.n	800b586 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800b574:	4b10      	ldr	r3, [pc, #64]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b578:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	490d      	ldr	r1, [pc, #52]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b582:	4313      	orrs	r3, r2
 800b584:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b586:	f000 f821 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800b58a:	4602      	mov	r2, r0
 800b58c:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b8 <HAL_RCC_ClockConfig+0x3d0>)
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	f003 030f 	and.w	r3, r3, #15
 800b594:	490a      	ldr	r1, [pc, #40]	@ (800b5c0 <HAL_RCC_ClockConfig+0x3d8>)
 800b596:	5ccb      	ldrb	r3, [r1, r3]
 800b598:	fa22 f303 	lsr.w	r3, r2, r3
 800b59c:	4a09      	ldr	r2, [pc, #36]	@ (800b5c4 <HAL_RCC_ClockConfig+0x3dc>)
 800b59e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b5a0:	4b09      	ldr	r3, [pc, #36]	@ (800b5c8 <HAL_RCC_ClockConfig+0x3e0>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7f8 f861 	bl	800366c <HAL_InitTick>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73fb      	strb	r3, [r7, #15]

  return status;
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	46020c00 	.word	0x46020c00
 800b5bc:	40022000 	.word	0x40022000
 800b5c0:	080127a8 	.word	0x080127a8
 800b5c4:	2000001c 	.word	0x2000001c
 800b5c8:	20000020 	.word	0x20000020

0800b5cc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b08b      	sub	sp, #44	@ 0x2c
 800b5d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5da:	4b78      	ldr	r3, [pc, #480]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b5dc:	69db      	ldr	r3, [r3, #28]
 800b5de:	f003 030c 	and.w	r3, r3, #12
 800b5e2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b5e4:	4b75      	ldr	r3, [pc, #468]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e8:	f003 0303 	and.w	r3, r3, #3
 800b5ec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d005      	beq.n	800b600 <HAL_RCC_GetSysClockFreq+0x34>
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	2b0c      	cmp	r3, #12
 800b5f8:	d121      	bne.n	800b63e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d11e      	bne.n	800b63e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800b600:	4b6e      	ldr	r3, [pc, #440]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d107      	bne.n	800b61c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800b60c:	4b6b      	ldr	r3, [pc, #428]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b60e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b612:	0b1b      	lsrs	r3, r3, #12
 800b614:	f003 030f 	and.w	r3, r3, #15
 800b618:	627b      	str	r3, [r7, #36]	@ 0x24
 800b61a:	e005      	b.n	800b628 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800b61c:	4b67      	ldr	r3, [pc, #412]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	0f1b      	lsrs	r3, r3, #28
 800b622:	f003 030f 	and.w	r3, r3, #15
 800b626:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b628:	4a65      	ldr	r2, [pc, #404]	@ (800b7c0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b630:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d110      	bne.n	800b65a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b63c:	e00d      	b.n	800b65a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b63e:	4b5f      	ldr	r3, [pc, #380]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b640:	69db      	ldr	r3, [r3, #28]
 800b642:	f003 030c 	and.w	r3, r3, #12
 800b646:	2b04      	cmp	r3, #4
 800b648:	d102      	bne.n	800b650 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b64a:	4b5e      	ldr	r3, [pc, #376]	@ (800b7c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b64c:	623b      	str	r3, [r7, #32]
 800b64e:	e004      	b.n	800b65a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	2b08      	cmp	r3, #8
 800b654:	d101      	bne.n	800b65a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b656:	4b5b      	ldr	r3, [pc, #364]	@ (800b7c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800b658:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	2b0c      	cmp	r3, #12
 800b65e:	f040 80a5 	bne.w	800b7ac <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b662:	4b56      	ldr	r3, [pc, #344]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b666:	f003 0303 	and.w	r3, r3, #3
 800b66a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b66c:	4b53      	ldr	r3, [pc, #332]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b670:	0a1b      	lsrs	r3, r3, #8
 800b672:	f003 030f 	and.w	r3, r3, #15
 800b676:	3301      	adds	r3, #1
 800b678:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b67a:	4b50      	ldr	r3, [pc, #320]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b67e:	091b      	lsrs	r3, r3, #4
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b686:	4b4d      	ldr	r3, [pc, #308]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b68a:	08db      	lsrs	r3, r3, #3
 800b68c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	fb02 f303 	mul.w	r3, r2, r3
 800b696:	ee07 3a90 	vmov	s15, r3
 800b69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d003      	beq.n	800b6b0 <HAL_RCC_GetSysClockFreq+0xe4>
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	2b03      	cmp	r3, #3
 800b6ac:	d022      	beq.n	800b6f4 <HAL_RCC_GetSysClockFreq+0x128>
 800b6ae:	e043      	b.n	800b738 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	ee07 3a90 	vmov	s15, r3
 800b6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ba:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800b7c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 800b6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c2:	4b3e      	ldr	r3, [pc, #248]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b6c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ca:	ee07 3a90 	vmov	s15, r3
 800b6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b6d2:	ed97 6a01 	vldr	s12, [r7, #4]
 800b6d6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800b7cc <HAL_RCC_GetSysClockFreq+0x200>
 800b6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b6e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6f2:	e046      	b.n	800b782 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	ee07 3a90 	vmov	s15, r3
 800b6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6fe:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800b7c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 800b702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b706:	4b2d      	ldr	r3, [pc, #180]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b70e:	ee07 3a90 	vmov	s15, r3
 800b712:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b716:	ed97 6a01 	vldr	s12, [r7, #4]
 800b71a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800b7cc <HAL_RCC_GetSysClockFreq+0x200>
 800b71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b722:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b736:	e024      	b.n	800b782 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	ee07 3a90 	vmov	s15, r3
 800b748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b750:	4b1a      	ldr	r3, [pc, #104]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b758:	ee07 3a90 	vmov	s15, r3
 800b75c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b760:	ed97 6a01 	vldr	s12, [r7, #4]
 800b764:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800b7cc <HAL_RCC_GetSysClockFreq+0x200>
 800b768:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b76c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800b770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b774:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b780:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800b782:	4b0e      	ldr	r3, [pc, #56]	@ (800b7bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800b784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b786:	0e1b      	lsrs	r3, r3, #24
 800b788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b78c:	3301      	adds	r3, #1
 800b78e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	ee07 3a90 	vmov	s15, r3
 800b796:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b79a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b79e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7a6:	ee17 3a90 	vmov	r3, s15
 800b7aa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	372c      	adds	r7, #44	@ 0x2c
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	46020c00 	.word	0x46020c00
 800b7c0:	080127c0 	.word	0x080127c0
 800b7c4:	00f42400 	.word	0x00f42400
 800b7c8:	4b742400 	.word	0x4b742400
 800b7cc:	46000000 	.word	0x46000000

0800b7d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800b7d4:	f7ff fefa 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	4b07      	ldr	r3, [pc, #28]	@ (800b7f8 <HAL_RCC_GetHCLKFreq+0x28>)
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	f003 030f 	and.w	r3, r3, #15
 800b7e2:	4906      	ldr	r1, [pc, #24]	@ (800b7fc <HAL_RCC_GetHCLKFreq+0x2c>)
 800b7e4:	5ccb      	ldrb	r3, [r1, r3]
 800b7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ea:	4a05      	ldr	r2, [pc, #20]	@ (800b800 <HAL_RCC_GetHCLKFreq+0x30>)
 800b7ec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800b7ee:	4b04      	ldr	r3, [pc, #16]	@ (800b800 <HAL_RCC_GetHCLKFreq+0x30>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	46020c00 	.word	0x46020c00
 800b7fc:	080127a8 	.word	0x080127a8
 800b800:	2000001c 	.word	0x2000001c

0800b804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800b808:	f7ff ffe2 	bl	800b7d0 <HAL_RCC_GetHCLKFreq>
 800b80c:	4602      	mov	r2, r0
 800b80e:	4b05      	ldr	r3, [pc, #20]	@ (800b824 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	091b      	lsrs	r3, r3, #4
 800b814:	f003 0307 	and.w	r3, r3, #7
 800b818:	4903      	ldr	r1, [pc, #12]	@ (800b828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b81a:	5ccb      	ldrb	r3, [r1, r3]
 800b81c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b820:	4618      	mov	r0, r3
 800b822:	bd80      	pop	{r7, pc}
 800b824:	46020c00 	.word	0x46020c00
 800b828:	080127b8 	.word	0x080127b8

0800b82c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800b830:	f7ff ffce 	bl	800b7d0 <HAL_RCC_GetHCLKFreq>
 800b834:	4602      	mov	r2, r0
 800b836:	4b05      	ldr	r3, [pc, #20]	@ (800b84c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	0a1b      	lsrs	r3, r3, #8
 800b83c:	f003 0307 	and.w	r3, r3, #7
 800b840:	4903      	ldr	r1, [pc, #12]	@ (800b850 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b842:	5ccb      	ldrb	r3, [r1, r3]
 800b844:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b848:	4618      	mov	r0, r3
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	46020c00 	.word	0x46020c00
 800b850:	080127b8 	.word	0x080127b8

0800b854 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800b858:	f7ff ffba 	bl	800b7d0 <HAL_RCC_GetHCLKFreq>
 800b85c:	4602      	mov	r2, r0
 800b85e:	4b05      	ldr	r3, [pc, #20]	@ (800b874 <HAL_RCC_GetPCLK3Freq+0x20>)
 800b860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b862:	091b      	lsrs	r3, r3, #4
 800b864:	f003 0307 	and.w	r3, r3, #7
 800b868:	4903      	ldr	r1, [pc, #12]	@ (800b878 <HAL_RCC_GetPCLK3Freq+0x24>)
 800b86a:	5ccb      	ldrb	r3, [r1, r3]
 800b86c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b870:	4618      	mov	r0, r3
 800b872:	bd80      	pop	{r7, pc}
 800b874:	46020c00 	.word	0x46020c00
 800b878:	080127b8 	.word	0x080127b8

0800b87c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b884:	4b3e      	ldr	r3, [pc, #248]	@ (800b980 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b88a:	f003 0304 	and.w	r3, r3, #4
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d003      	beq.n	800b89a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b892:	f7fe fd21 	bl	800a2d8 <HAL_PWREx_GetVoltageRange>
 800b896:	6178      	str	r0, [r7, #20]
 800b898:	e019      	b.n	800b8ce <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b89a:	4b39      	ldr	r3, [pc, #228]	@ (800b980 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b89c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b8a0:	4a37      	ldr	r2, [pc, #220]	@ (800b980 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b8a2:	f043 0304 	orr.w	r3, r3, #4
 800b8a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b8aa:	4b35      	ldr	r3, [pc, #212]	@ (800b980 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b8ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	60fb      	str	r3, [r7, #12]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b8b8:	f7fe fd0e 	bl	800a2d8 <HAL_PWREx_GetVoltageRange>
 800b8bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b8be:	4b30      	ldr	r3, [pc, #192]	@ (800b980 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b8c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b8c4:	4a2e      	ldr	r2, [pc, #184]	@ (800b980 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800b8c6:	f023 0304 	bic.w	r3, r3, #4
 800b8ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8d4:	d003      	beq.n	800b8de <RCC_SetFlashLatencyFromMSIRange+0x62>
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8dc:	d109      	bne.n	800b8f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8e4:	d202      	bcs.n	800b8ec <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b8ea:	e033      	b.n	800b954 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800b8f0:	e030      	b.n	800b954 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8f8:	d208      	bcs.n	800b90c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b900:	d102      	bne.n	800b908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800b902:	2303      	movs	r3, #3
 800b904:	613b      	str	r3, [r7, #16]
 800b906:	e025      	b.n	800b954 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	e035      	b.n	800b978 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b912:	d90f      	bls.n	800b934 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d109      	bne.n	800b92e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b920:	d902      	bls.n	800b928 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800b922:	2300      	movs	r3, #0
 800b924:	613b      	str	r3, [r7, #16]
 800b926:	e015      	b.n	800b954 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800b928:	2301      	movs	r3, #1
 800b92a:	613b      	str	r3, [r7, #16]
 800b92c:	e012      	b.n	800b954 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800b92e:	2300      	movs	r3, #0
 800b930:	613b      	str	r3, [r7, #16]
 800b932:	e00f      	b.n	800b954 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b93a:	d109      	bne.n	800b950 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b942:	d102      	bne.n	800b94a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800b944:	2301      	movs	r3, #1
 800b946:	613b      	str	r3, [r7, #16]
 800b948:	e004      	b.n	800b954 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800b94a:	2302      	movs	r3, #2
 800b94c:	613b      	str	r3, [r7, #16]
 800b94e:	e001      	b.n	800b954 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800b950:	2301      	movs	r3, #1
 800b952:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b954:	4b0b      	ldr	r3, [pc, #44]	@ (800b984 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f023 020f 	bic.w	r2, r3, #15
 800b95c:	4909      	ldr	r1, [pc, #36]	@ (800b984 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	4313      	orrs	r3, r2
 800b962:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800b964:	4b07      	ldr	r3, [pc, #28]	@ (800b984 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 030f 	and.w	r3, r3, #15
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d001      	beq.n	800b976 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800b972:	2301      	movs	r3, #1
 800b974:	e000      	b.n	800b978 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3718      	adds	r7, #24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	46020c00 	.word	0x46020c00
 800b984:	40022000 	.word	0x40022000

0800b988 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800b988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b98c:	b0c8      	sub	sp, #288	@ 0x120
 800b98e:	af00      	add	r7, sp, #0
 800b990:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b994:	2300      	movs	r3, #0
 800b996:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b99a:	2300      	movs	r3, #0
 800b99c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b9a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a8:	f002 0401 	and.w	r4, r2, #1
 800b9ac:	2500      	movs	r5, #0
 800b9ae:	ea54 0305 	orrs.w	r3, r4, r5
 800b9b2:	d00b      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800b9b4:	4bd5      	ldr	r3, [pc, #852]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9ba:	f023 0103 	bic.w	r1, r3, #3
 800b9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9c4:	4ad1      	ldr	r2, [pc, #836]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9c6:	430b      	orrs	r3, r1
 800b9c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b9cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d4:	f002 0802 	and.w	r8, r2, #2
 800b9d8:	f04f 0900 	mov.w	r9, #0
 800b9dc:	ea58 0309 	orrs.w	r3, r8, r9
 800b9e0:	d00b      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800b9e2:	4bca      	ldr	r3, [pc, #808]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9e8:	f023 010c 	bic.w	r1, r3, #12
 800b9ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9f2:	4ac6      	ldr	r2, [pc, #792]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b9f4:	430b      	orrs	r3, r1
 800b9f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	f002 0a04 	and.w	sl, r2, #4
 800ba06:	f04f 0b00 	mov.w	fp, #0
 800ba0a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ba0e:	d00b      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800ba10:	4bbe      	ldr	r3, [pc, #760]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba16:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ba1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba20:	4aba      	ldr	r2, [pc, #744]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba22:	430b      	orrs	r3, r1
 800ba24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ba28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	f002 0308 	and.w	r3, r2, #8
 800ba34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ba3e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ba42:	460b      	mov	r3, r1
 800ba44:	4313      	orrs	r3, r2
 800ba46:	d00b      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800ba48:	4bb0      	ldr	r3, [pc, #704]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ba52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba58:	4aac      	ldr	r2, [pc, #688]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba5a:	430b      	orrs	r3, r1
 800ba5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ba60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	f002 0310 	and.w	r3, r2, #16
 800ba6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ba70:	2300      	movs	r3, #0
 800ba72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ba76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	d00b      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800ba80:	4ba2      	ldr	r3, [pc, #648]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ba8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba90:	4a9e      	ldr	r2, [pc, #632]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ba92:	430b      	orrs	r3, r1
 800ba94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ba98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800baa4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800baa8:	2300      	movs	r3, #0
 800baaa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800baae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bab2:	460b      	mov	r3, r1
 800bab4:	4313      	orrs	r3, r2
 800bab6:	d00b      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800bab8:	4b94      	ldr	r3, [pc, #592]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800baba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800babe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800bac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bac8:	4a90      	ldr	r2, [pc, #576]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800baca:	430b      	orrs	r3, r1
 800bacc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f002 0320 	and.w	r3, r2, #32
 800badc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bae0:	2300      	movs	r3, #0
 800bae2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bae6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800baea:	460b      	mov	r3, r1
 800baec:	4313      	orrs	r3, r2
 800baee:	d00b      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800baf0:	4b86      	ldr	r3, [pc, #536]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800baf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800baf6:	f023 0107 	bic.w	r1, r3, #7
 800bafa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bafe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb00:	4a82      	ldr	r2, [pc, #520]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb02:	430b      	orrs	r3, r1
 800bb04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bb08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800bb14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bb1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4313      	orrs	r3, r2
 800bb26:	d00b      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800bb28:	4b78      	ldr	r3, [pc, #480]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb2e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800bb32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb38:	4a74      	ldr	r2, [pc, #464]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb3a:	430b      	orrs	r3, r1
 800bb3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bb40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800bb4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bb50:	2300      	movs	r3, #0
 800bb52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bb56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	d00b      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800bb60:	4b6a      	ldr	r3, [pc, #424]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bb6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb70:	4a66      	ldr	r2, [pc, #408]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb72:	430b      	orrs	r3, r1
 800bb74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bb78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800bb84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bb88:	2300      	movs	r3, #0
 800bb8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bb8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4313      	orrs	r3, r2
 800bb96:	d00b      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800bb98:	4b5c      	ldr	r3, [pc, #368]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bb9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800bba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bba8:	4a58      	ldr	r2, [pc, #352]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbaa:	430b      	orrs	r3, r1
 800bbac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bbb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bbbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bbc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	d00b      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800bbd0:	4b4e      	ldr	r3, [pc, #312]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbd6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800bbda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bbe0:	4a4a      	ldr	r2, [pc, #296]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bbe2:	430b      	orrs	r3, r1
 800bbe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800bbe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bbf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bbfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bc02:	460b      	mov	r3, r1
 800bc04:	4313      	orrs	r3, r2
 800bc06:	d00b      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800bc08:	4b40      	ldr	r3, [pc, #256]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc0e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800bc12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc18:	4a3c      	ldr	r2, [pc, #240]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc1a:	430b      	orrs	r3, r1
 800bc1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800bc20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bc2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc30:	2300      	movs	r3, #0
 800bc32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bc36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	d00c      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800bc40:	4b32      	ldr	r3, [pc, #200]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc46:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800bc4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc52:	4a2e      	ldr	r2, [pc, #184]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc54:	430b      	orrs	r3, r1
 800bc56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bc5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800bc66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc70:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bc74:	460b      	mov	r3, r1
 800bc76:	4313      	orrs	r3, r2
 800bc78:	d00c      	beq.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800bc7a:	4b24      	ldr	r3, [pc, #144]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc80:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800bc84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc8c:	4a1f      	ldr	r2, [pc, #124]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bc8e:	430b      	orrs	r3, r1
 800bc90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bc94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800bca0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bca4:	2300      	movs	r3, #0
 800bca6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bcaa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	d00c      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800bcb4:	4b15      	ldr	r3, [pc, #84]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcba:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800bcbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcc6:	4a11      	ldr	r2, [pc, #68]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcc8:	430b      	orrs	r3, r1
 800bcca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800bcce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bcda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bcde:	2300      	movs	r3, #0
 800bce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bce4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800bce8:	460b      	mov	r3, r1
 800bcea:	4313      	orrs	r3, r2
 800bcec:	d010      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800bcee:	4b07      	ldr	r3, [pc, #28]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bcf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bcf4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bcf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd00:	4a02      	ldr	r2, [pc, #8]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800bd02:	430b      	orrs	r3, r1
 800bd04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bd08:	e002      	b.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800bd0a:	bf00      	nop
 800bd0c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bd10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bd1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bd20:	2300      	movs	r3, #0
 800bd22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bd26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	d04c      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800bd30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bd38:	2b80      	cmp	r3, #128	@ 0x80
 800bd3a:	d02d      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bd3c:	2b80      	cmp	r3, #128	@ 0x80
 800bd3e:	d827      	bhi.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bd40:	2b60      	cmp	r3, #96	@ 0x60
 800bd42:	d02b      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800bd44:	2b60      	cmp	r3, #96	@ 0x60
 800bd46:	d823      	bhi.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bd48:	2b40      	cmp	r3, #64	@ 0x40
 800bd4a:	d006      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800bd4c:	2b40      	cmp	r3, #64	@ 0x40
 800bd4e:	d81f      	bhi.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d009      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bd54:	2b20      	cmp	r3, #32
 800bd56:	d011      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800bd58:	e01a      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bd5a:	4bc0      	ldr	r3, [pc, #768]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd5e:	4abf      	ldr	r2, [pc, #764]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bd60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd64:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bd66:	e01a      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bd68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f002 fcd6 	bl	800e720 <RCCEx_PLL2_Config>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bd7a:	e010      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bd7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd80:	332c      	adds	r3, #44	@ 0x2c
 800bd82:	4618      	mov	r0, r3
 800bd84:	f002 fd64 	bl	800e850 <RCCEx_PLL3_Config>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bd8e:	e006      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bd96:	e002      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bd98:	bf00      	nop
 800bd9a:	e000      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800bd9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd9e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10d      	bne.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800bda6:	4bad      	ldr	r3, [pc, #692]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bda8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bdac:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800bdb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bdb8:	4aa8      	ldr	r2, [pc, #672]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bdba:	430b      	orrs	r3, r1
 800bdbc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bdc0:	e003      	b.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bdc6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bdca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bdd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bdda:	2300      	movs	r3, #0
 800bddc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bde0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800bde4:	460b      	mov	r3, r1
 800bde6:	4313      	orrs	r3, r2
 800bde8:	d053      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800bdea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bdf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdf6:	d033      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800bdf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdfc:	d82c      	bhi.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bdfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be02:	d02f      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800be04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be08:	d826      	bhi.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800be0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be0e:	d008      	beq.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800be10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be14:	d820      	bhi.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00a      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800be1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be1e:	d011      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800be20:	e01a      	b.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800be22:	4b8e      	ldr	r3, [pc, #568]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be26:	4a8d      	ldr	r2, [pc, #564]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be2c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800be2e:	e01a      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800be30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be34:	3308      	adds	r3, #8
 800be36:	4618      	mov	r0, r3
 800be38:	f002 fc72 	bl	800e720 <RCCEx_PLL2_Config>
 800be3c:	4603      	mov	r3, r0
 800be3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800be42:	e010      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800be44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be48:	332c      	adds	r3, #44	@ 0x2c
 800be4a:	4618      	mov	r0, r3
 800be4c:	f002 fd00 	bl	800e850 <RCCEx_PLL3_Config>
 800be50:	4603      	mov	r3, r0
 800be52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800be56:	e006      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800be5e:	e002      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800be60:	bf00      	nop
 800be62:	e000      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800be64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be66:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10d      	bne.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800be6e:	4b7b      	ldr	r3, [pc, #492]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be74:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800be78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be80:	4a76      	ldr	r2, [pc, #472]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800be82:	430b      	orrs	r3, r1
 800be84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800be88:	e003      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be8a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800be8e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800be92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800be9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bea2:	2300      	movs	r3, #0
 800bea4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bea8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800beac:	460b      	mov	r3, r1
 800beae:	4313      	orrs	r3, r2
 800beb0:	d046      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800beb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800beba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bebe:	d028      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bec0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bec4:	d821      	bhi.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bec6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800beca:	d022      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800becc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bed0:	d81b      	bhi.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bed2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bed6:	d01c      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bed8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bedc:	d815      	bhi.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bee2:	d008      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800bee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bee8:	d80f      	bhi.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d011      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800beee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bef2:	d00e      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800bef4:	e009      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800befa:	3308      	adds	r3, #8
 800befc:	4618      	mov	r0, r3
 800befe:	f002 fc0f 	bl	800e720 <RCCEx_PLL2_Config>
 800bf02:	4603      	mov	r3, r0
 800bf04:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bf08:	e004      	b.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bf10:	e000      	b.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800bf12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf14:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10d      	bne.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800bf1c:	4b4f      	ldr	r3, [pc, #316]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bf22:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bf26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf2e:	4a4b      	ldr	r2, [pc, #300]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf30:	430b      	orrs	r3, r1
 800bf32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bf36:	e003      	b.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf38:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bf3c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800bf40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800bf4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bf50:	2300      	movs	r3, #0
 800bf52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bf56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	d03f      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800bf60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bf68:	2b04      	cmp	r3, #4
 800bf6a:	d81e      	bhi.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x622>
 800bf6c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800bf6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf72:	bf00      	nop
 800bf74:	0800bfb3 	.word	0x0800bfb3
 800bf78:	0800bf89 	.word	0x0800bf89
 800bf7c:	0800bf97 	.word	0x0800bf97
 800bf80:	0800bfb3 	.word	0x0800bfb3
 800bf84:	0800bfb3 	.word	0x0800bfb3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bf88:	4b34      	ldr	r3, [pc, #208]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf8c:	4a33      	ldr	r2, [pc, #204]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bf8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf92:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bf94:	e00e      	b.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bf96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf9a:	332c      	adds	r3, #44	@ 0x2c
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f002 fc57 	bl	800e850 <RCCEx_PLL3_Config>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bfa8:	e004      	b.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bfb0:	e000      	b.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800bfb2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bfb4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10d      	bne.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800bfbc:	4b27      	ldr	r3, [pc, #156]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bfbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bfc2:	f023 0107 	bic.w	r1, r3, #7
 800bfc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bfce:	4a23      	ldr	r2, [pc, #140]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800bfd0:	430b      	orrs	r3, r1
 800bfd2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bfd6:	e003      	b.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfd8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bfdc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800bfe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bfec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bfee:	2300      	movs	r3, #0
 800bff0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bff2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800bff6:	460b      	mov	r3, r1
 800bff8:	4313      	orrs	r3, r2
 800bffa:	d04c      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800bffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c000:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c004:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c008:	d02a      	beq.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800c00a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c00e:	d821      	bhi.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c010:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c014:	d026      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800c016:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c01a:	d81b      	bhi.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c01c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c020:	d00e      	beq.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800c022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c026:	d815      	bhi.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d01d      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800c02c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c030:	d110      	bne.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c032:	4b0a      	ldr	r3, [pc, #40]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c036:	4a09      	ldr	r2, [pc, #36]	@ (800c05c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800c038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c03c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c03e:	e014      	b.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c044:	332c      	adds	r3, #44	@ 0x2c
 800c046:	4618      	mov	r0, r3
 800c048:	f002 fc02 	bl	800e850 <RCCEx_PLL3_Config>
 800c04c:	4603      	mov	r3, r0
 800c04e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c052:	e00a      	b.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c05a:	e006      	b.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800c05c:	46020c00 	.word	0x46020c00
        break;
 800c060:	bf00      	nop
 800c062:	e002      	b.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800c064:	bf00      	nop
 800c066:	e000      	b.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800c068:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c06a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10d      	bne.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800c072:	4baf      	ldr	r3, [pc, #700]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c078:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c07c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c080:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c084:	4aaa      	ldr	r2, [pc, #680]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c086:	430b      	orrs	r3, r1
 800c088:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800c08c:	e003      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c08e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c092:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c096:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c0a2:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c0a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	f000 80b5 	beq.w	800c21e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c0ba:	4b9d      	ldr	r3, [pc, #628]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c0bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c0c0:	f003 0304 	and.w	r3, r3, #4
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d113      	bne.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c0c8:	4b99      	ldr	r3, [pc, #612]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c0ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c0ce:	4a98      	ldr	r2, [pc, #608]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c0d0:	f043 0304 	orr.w	r3, r3, #4
 800c0d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c0d8:	4b95      	ldr	r3, [pc, #596]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c0da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c0de:	f003 0304 	and.w	r3, r3, #4
 800c0e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800c0e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c0f0:	4b90      	ldr	r3, [pc, #576]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0f4:	4a8f      	ldr	r2, [pc, #572]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c0f6:	f043 0301 	orr.w	r3, r3, #1
 800c0fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c0fc:	f7f7 fb40 	bl	8003780 <HAL_GetTick>
 800c100:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c104:	e00b      	b.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c106:	f7f7 fb3b 	bl	8003780 <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	2b02      	cmp	r3, #2
 800c114:	d903      	bls.n	800c11e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800c116:	2303      	movs	r3, #3
 800c118:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c11c:	e005      	b.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c11e:	4b85      	ldr	r3, [pc, #532]	@ (800c334 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d0ed      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800c12a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d165      	bne.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c132:	4b7f      	ldr	r3, [pc, #508]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c13c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800c140:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c144:	2b00      	cmp	r3, #0
 800c146:	d023      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800c148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c14c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800c150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c154:	4293      	cmp	r3, r2
 800c156:	d01b      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c158:	4b75      	ldr	r3, [pc, #468]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c15a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c15e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c162:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c166:	4b72      	ldr	r3, [pc, #456]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c16c:	4a70      	ldr	r2, [pc, #448]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c16e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c172:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c176:	4b6e      	ldr	r3, [pc, #440]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c17c:	4a6c      	ldr	r2, [pc, #432]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c17e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c182:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c186:	4a6a      	ldr	r2, [pc, #424]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c18c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d019      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c19c:	f7f7 faf0 	bl	8003780 <HAL_GetTick>
 800c1a0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c1a4:	e00d      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1a6:	f7f7 faeb 	bl	8003780 <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1b0:	1ad2      	subs	r2, r2, r3
 800c1b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d903      	bls.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800c1c0:	e006      	b.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c1c2:	4b5b      	ldr	r3, [pc, #364]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c1c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1c8:	f003 0302 	and.w	r3, r3, #2
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d0ea      	beq.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800c1d0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10d      	bne.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800c1d8:	4b55      	ldr	r3, [pc, #340]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c1da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c1e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1e6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800c1ea:	4a51      	ldr	r2, [pc, #324]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c1ec:	430b      	orrs	r3, r1
 800c1ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800c1f2:	e008      	b.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c1f4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c1f8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800c1fc:	e003      	b.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1fe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c202:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c206:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d107      	bne.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c20e:	4b48      	ldr	r3, [pc, #288]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c214:	4a46      	ldr	r2, [pc, #280]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c216:	f023 0304 	bic.w	r3, r3, #4
 800c21a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800c21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c22a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c22c:	2300      	movs	r3, #0
 800c22e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c230:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c234:	460b      	mov	r3, r1
 800c236:	4313      	orrs	r3, r2
 800c238:	d042      	beq.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800c23a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c23e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c242:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c246:	d022      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800c248:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c24c:	d81b      	bhi.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c24e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c252:	d011      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800c254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c258:	d815      	bhi.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d019      	beq.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800c25e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c262:	d110      	bne.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c268:	3308      	adds	r3, #8
 800c26a:	4618      	mov	r0, r3
 800c26c:	f002 fa58 	bl	800e720 <RCCEx_PLL2_Config>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c276:	e00d      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c278:	4b2d      	ldr	r3, [pc, #180]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c27c:	4a2c      	ldr	r2, [pc, #176]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c27e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c282:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c284:	e006      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c28c:	e002      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c28e:	bf00      	nop
 800c290:	e000      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800c292:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c294:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d10d      	bne.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800c29c:	4b24      	ldr	r3, [pc, #144]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c29e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800c2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c2ae:	4a20      	ldr	r2, [pc, #128]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c2b0:	430b      	orrs	r3, r1
 800c2b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c2b6:	e003      	b.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c2bc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c2c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c2cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c2d2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	d031      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800c2dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c2e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2e8:	d00b      	beq.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800c2ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2ee:	d804      	bhi.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x972>
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d008      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800c2f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2f8:	d007      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c300:	e004      	b.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c302:	bf00      	nop
 800c304:	e002      	b.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c306:	bf00      	nop
 800c308:	e000      	b.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800c30a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c30c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c310:	2b00      	cmp	r3, #0
 800c312:	d111      	bne.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800c314:	4b06      	ldr	r3, [pc, #24]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c316:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c31a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c326:	4a02      	ldr	r2, [pc, #8]	@ (800c330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c328:	430b      	orrs	r3, r1
 800c32a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c32e:	e007      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800c330:	46020c00 	.word	0x46020c00
 800c334:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c338:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c33c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800c340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c34c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c34e:	2300      	movs	r3, #0
 800c350:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c352:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c356:	460b      	mov	r3, r1
 800c358:	4313      	orrs	r3, r2
 800c35a:	d00c      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800c35c:	4bb2      	ldr	r3, [pc, #712]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c35e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c362:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800c366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c36a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c36e:	4aae      	ldr	r2, [pc, #696]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c370:	430b      	orrs	r3, r1
 800c372:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800c376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c382:	653b      	str	r3, [r7, #80]	@ 0x50
 800c384:	2300      	movs	r3, #0
 800c386:	657b      	str	r3, [r7, #84]	@ 0x54
 800c388:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c38c:	460b      	mov	r3, r1
 800c38e:	4313      	orrs	r3, r2
 800c390:	d019      	beq.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800c392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c396:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c39a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c39e:	d105      	bne.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c3a0:	4ba1      	ldr	r3, [pc, #644]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a4:	4aa0      	ldr	r2, [pc, #640]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3aa:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800c3ac:	4b9e      	ldr	r3, [pc, #632]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c3b2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800c3b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c3be:	4a9a      	ldr	r2, [pc, #616]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3c0:	430b      	orrs	r3, r1
 800c3c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800c3c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c3d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	d00c      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800c3e2:	4b91      	ldr	r3, [pc, #580]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3e8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c3ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c3f4:	4a8c      	ldr	r2, [pc, #560]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3f6:	430b      	orrs	r3, r1
 800c3f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800c3fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c408:	643b      	str	r3, [r7, #64]	@ 0x40
 800c40a:	2300      	movs	r3, #0
 800c40c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c40e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c412:	460b      	mov	r3, r1
 800c414:	4313      	orrs	r3, r2
 800c416:	d00c      	beq.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800c418:	4b83      	ldr	r3, [pc, #524]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c41a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c41e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c426:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c42a:	4a7f      	ldr	r2, [pc, #508]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c42c:	430b      	orrs	r3, r1
 800c42e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800c432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c43e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c440:	2300      	movs	r3, #0
 800c442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c444:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c448:	460b      	mov	r3, r1
 800c44a:	4313      	orrs	r3, r2
 800c44c:	d00c      	beq.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800c44e:	4b76      	ldr	r3, [pc, #472]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c454:	f023 0118 	bic.w	r1, r3, #24
 800c458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c45c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800c460:	4a71      	ldr	r2, [pc, #452]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c462:	430b      	orrs	r3, r1
 800c464:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800c474:	633b      	str	r3, [r7, #48]	@ 0x30
 800c476:	2300      	movs	r3, #0
 800c478:	637b      	str	r3, [r7, #52]	@ 0x34
 800c47a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c47e:	460b      	mov	r3, r1
 800c480:	4313      	orrs	r3, r2
 800c482:	d032      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800c484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c488:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c48c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c490:	d105      	bne.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c492:	4b65      	ldr	r3, [pc, #404]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c496:	4a64      	ldr	r2, [pc, #400]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c49c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800c49e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c4a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c4aa:	d108      	bne.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c4ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4b0:	3308      	adds	r3, #8
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f002 f934 	bl	800e720 <RCCEx_PLL2_Config>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800c4be:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10d      	bne.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800c4c6:	4b58      	ldr	r3, [pc, #352]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c4cc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c4d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c4d8:	4a53      	ldr	r2, [pc, #332]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4da:	430b      	orrs	r3, r1
 800c4dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800c4e0:	e003      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c4e6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800c4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c500:	460b      	mov	r3, r1
 800c502:	4313      	orrs	r3, r2
 800c504:	d04a      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800c506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c50a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c50e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c512:	d01e      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800c514:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c518:	d825      	bhi.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c51a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c51e:	d00e      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800c520:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c524:	d81f      	bhi.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d021      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800c52a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c52e:	d11a      	bne.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c530:	4b3d      	ldr	r3, [pc, #244]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c534:	4a3c      	ldr	r2, [pc, #240]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c53a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c53c:	e018      	b.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c53e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c542:	3308      	adds	r3, #8
 800c544:	4618      	mov	r0, r3
 800c546:	f002 f8eb 	bl	800e720 <RCCEx_PLL2_Config>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c550:	e00e      	b.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c556:	332c      	adds	r3, #44	@ 0x2c
 800c558:	4618      	mov	r0, r3
 800c55a:	f002 f979 	bl	800e850 <RCCEx_PLL3_Config>
 800c55e:	4603      	mov	r3, r0
 800c560:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800c564:	e004      	b.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c56c:	e000      	b.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800c56e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c570:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10d      	bne.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800c578:	4b2b      	ldr	r3, [pc, #172]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c57a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c57e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c586:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c58a:	4927      	ldr	r1, [pc, #156]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c58c:	4313      	orrs	r3, r2
 800c58e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c592:	e003      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c594:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c598:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800c59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800c5a8:	623b      	str	r3, [r7, #32]
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	d03d      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800c5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c5c4:	d00e      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800c5c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c5ca:	d815      	bhi.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d017      	beq.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c5d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5d4:	d110      	bne.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5d6:	4b14      	ldr	r3, [pc, #80]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5da:	4a13      	ldr	r2, [pc, #76]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c5dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c5e2:	e00e      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f002 f898 	bl	800e720 <RCCEx_PLL2_Config>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800c5f6:	e004      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c5fe:	e000      	b.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c600:	bf00      	nop
    }
    if (ret == HAL_OK)
 800c602:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c606:	2b00      	cmp	r3, #0
 800c608:	d110      	bne.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800c60a:	4b07      	ldr	r3, [pc, #28]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c60c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c610:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c61c:	4902      	ldr	r1, [pc, #8]	@ (800c628 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c61e:	4313      	orrs	r3, r2
 800c620:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800c624:	e006      	b.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c626:	bf00      	nop
 800c628:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c62c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c630:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800c634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c640:	61bb      	str	r3, [r7, #24]
 800c642:	2300      	movs	r3, #0
 800c644:	61fb      	str	r3, [r7, #28]
 800c646:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c64a:	460b      	mov	r3, r1
 800c64c:	4313      	orrs	r3, r2
 800c64e:	d00c      	beq.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800c650:	4b68      	ldr	r3, [pc, #416]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c656:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c65a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c65e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c662:	4964      	ldr	r1, [pc, #400]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c664:	4313      	orrs	r3, r2
 800c666:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c66a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c672:	2100      	movs	r1, #0
 800c674:	6139      	str	r1, [r7, #16]
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	617b      	str	r3, [r7, #20]
 800c67c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c680:	460b      	mov	r3, r1
 800c682:	4313      	orrs	r3, r2
 800c684:	d036      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800c686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c68a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00c      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c692:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c696:	d113      	bne.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c698:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c69c:	3308      	adds	r3, #8
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f002 f83e 	bl	800e720 <RCCEx_PLL2_Config>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c6aa:	e00d      	b.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6b0:	332c      	adds	r3, #44	@ 0x2c
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f002 f8cc 	bl	800e850 <RCCEx_PLL3_Config>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800c6be:	e003      	b.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c6c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10d      	bne.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800c6d0:	4b48      	ldr	r3, [pc, #288]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c6d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c6d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800c6da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c6e2:	4944      	ldr	r1, [pc, #272]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c6ea:	e003      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c6f0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800c6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	60b9      	str	r1, [r7, #8]
 800c700:	f003 0304 	and.w	r3, r3, #4
 800c704:	60fb      	str	r3, [r7, #12]
 800c706:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c70a:	460b      	mov	r3, r1
 800c70c:	4313      	orrs	r3, r2
 800c70e:	d024      	beq.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800c710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c714:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d108      	bne.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c71c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c720:	332c      	adds	r3, #44	@ 0x2c
 800c722:	4618      	mov	r0, r3
 800c724:	f002 f894 	bl	800e850 <RCCEx_PLL3_Config>
 800c728:	4603      	mov	r3, r0
 800c72a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800c72e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10d      	bne.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800c736:	4b2f      	ldr	r3, [pc, #188]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c738:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c73c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c744:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c748:	492a      	ldr	r1, [pc, #168]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c74a:	4313      	orrs	r3, r2
 800c74c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c750:	e003      	b.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c752:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c756:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800c75a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	2100      	movs	r1, #0
 800c764:	6039      	str	r1, [r7, #0]
 800c766:	f003 0308 	and.w	r3, r3, #8
 800c76a:	607b      	str	r3, [r7, #4]
 800c76c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c770:	460b      	mov	r3, r1
 800c772:	4313      	orrs	r3, r2
 800c774:	d036      	beq.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800c776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c77a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c77e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c782:	d00d      	beq.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800c784:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c788:	d811      	bhi.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c78a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c78e:	d012      	beq.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c794:	d80b      	bhi.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00d      	beq.n	800c7b6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800c79a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c79e:	d106      	bne.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c7a0:	4b14      	ldr	r3, [pc, #80]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c7a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7a4:	4a13      	ldr	r2, [pc, #76]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c7a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c7aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800c7ac:	e004      	b.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800c7b4:	e000      	b.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800c7b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10d      	bne.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800c7c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c7c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c7c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c7ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c7d2:	4908      	ldr	r1, [pc, #32]	@ (800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c7da:	e003      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7dc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800c7e0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800c7e4:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7f4:	46020c00 	.word	0x46020c00

0800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b089      	sub	sp, #36	@ 0x24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800c800:	4ba6      	ldr	r3, [pc, #664]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c808:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c80a:	4ba4      	ldr	r3, [pc, #656]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c80c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c80e:	f003 0303 	and.w	r3, r3, #3
 800c812:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800c814:	4ba1      	ldr	r3, [pc, #644]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c818:	0a1b      	lsrs	r3, r3, #8
 800c81a:	f003 030f 	and.w	r3, r3, #15
 800c81e:	3301      	adds	r3, #1
 800c820:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c822:	4b9e      	ldr	r3, [pc, #632]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c826:	091b      	lsrs	r3, r3, #4
 800c828:	f003 0301 	and.w	r3, r3, #1
 800c82c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800c82e:	4b9b      	ldr	r3, [pc, #620]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c832:	08db      	lsrs	r3, r3, #3
 800c834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	fb02 f303 	mul.w	r3, r2, r3
 800c83e:	ee07 3a90 	vmov	s15, r3
 800c842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c846:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2b03      	cmp	r3, #3
 800c84e:	d062      	beq.n	800c916 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	2b03      	cmp	r3, #3
 800c854:	f200 8081 	bhi.w	800c95a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d024      	beq.n	800c8a8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	2b02      	cmp	r3, #2
 800c862:	d17a      	bne.n	800c95a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	ee07 3a90 	vmov	s15, r3
 800c86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c86e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800caa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c876:	4b89      	ldr	r3, [pc, #548]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c87a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c87e:	ee07 3a90 	vmov	s15, r3
 800c882:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c886:	ed97 6a02 	vldr	s12, [r7, #8]
 800c88a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800caa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c88e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c892:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c89a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c89e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8a6:	e08f      	b.n	800c9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c8a8:	4b7c      	ldr	r3, [pc, #496]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d005      	beq.n	800c8c0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800c8b4:	4b79      	ldr	r3, [pc, #484]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	0f1b      	lsrs	r3, r3, #28
 800c8ba:	f003 030f 	and.w	r3, r3, #15
 800c8be:	e006      	b.n	800c8ce <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800c8c0:	4b76      	ldr	r3, [pc, #472]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c8c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8c6:	041b      	lsls	r3, r3, #16
 800c8c8:	0f1b      	lsrs	r3, r3, #28
 800c8ca:	f003 030f 	and.w	r3, r3, #15
 800c8ce:	4a76      	ldr	r2, [pc, #472]	@ (800caa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8d4:	ee07 3a90 	vmov	s15, r3
 800c8d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	ee07 3a90 	vmov	s15, r3
 800c8f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f4:	ed97 6a02 	vldr	s12, [r7, #8]
 800c8f8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800caa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c8fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c904:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c908:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c90c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c910:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c914:	e058      	b.n	800c9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	ee07 3a90 	vmov	s15, r3
 800c91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c920:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800caa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800c924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c928:	4b5c      	ldr	r3, [pc, #368]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c92a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c930:	ee07 3a90 	vmov	s15, r3
 800c934:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c938:	ed97 6a02 	vldr	s12, [r7, #8]
 800c93c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800caa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c940:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c944:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800c948:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c94c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800c950:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c954:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c958:	e036      	b.n	800c9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c95a:	4b50      	ldr	r3, [pc, #320]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c962:	2b00      	cmp	r3, #0
 800c964:	d005      	beq.n	800c972 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800c966:	4b4d      	ldr	r3, [pc, #308]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	0f1b      	lsrs	r3, r3, #28
 800c96c:	f003 030f 	and.w	r3, r3, #15
 800c970:	e006      	b.n	800c980 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800c972:	4b4a      	ldr	r3, [pc, #296]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c978:	041b      	lsls	r3, r3, #16
 800c97a:	0f1b      	lsrs	r3, r3, #28
 800c97c:	f003 030f 	and.w	r3, r3, #15
 800c980:	4a49      	ldr	r2, [pc, #292]	@ (800caa8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800c982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c986:	ee07 3a90 	vmov	s15, r3
 800c98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	ee07 3a90 	vmov	s15, r3
 800c994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	ee07 3a90 	vmov	s15, r3
 800c9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9aa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800caa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800c9ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800c9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9c6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c9c8:	4b34      	ldr	r3, [pc, #208]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d017      	beq.n	800ca04 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c9d4:	4b31      	ldr	r3, [pc, #196]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800c9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9d8:	0a5b      	lsrs	r3, r3, #9
 800c9da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9de:	ee07 3a90 	vmov	s15, r3
 800c9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800c9e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c9ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c9ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9fa:	ee17 2a90 	vmov	r2, s15
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	601a      	str	r2, [r3, #0]
 800ca02:	e002      	b.n	800ca0a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800ca0a:	4b24      	ldr	r3, [pc, #144]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d017      	beq.n	800ca46 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ca16:	4b21      	ldr	r3, [pc, #132]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca1a:	0c1b      	lsrs	r3, r3, #16
 800ca1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca20:	ee07 3a90 	vmov	s15, r3
 800ca24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800ca28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca2c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ca30:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca3c:	ee17 2a90 	vmov	r2, s15
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	605a      	str	r2, [r3, #4]
 800ca44:	e002      	b.n	800ca4c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800ca4c:	4b13      	ldr	r3, [pc, #76]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d017      	beq.n	800ca88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ca58:	4b10      	ldr	r3, [pc, #64]	@ (800ca9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800ca5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca5c:	0e1b      	lsrs	r3, r3, #24
 800ca5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca62:	ee07 3a90 	vmov	s15, r3
 800ca66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800ca6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca6e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ca72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca7e:	ee17 2a90 	vmov	r2, s15
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ca86:	e002      	b.n	800ca8e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	609a      	str	r2, [r3, #8]
}
 800ca8e:	bf00      	nop
 800ca90:	3724      	adds	r7, #36	@ 0x24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	46020c00 	.word	0x46020c00
 800caa0:	4b742400 	.word	0x4b742400
 800caa4:	46000000 	.word	0x46000000
 800caa8:	080127c0 	.word	0x080127c0

0800caac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800caac:	b480      	push	{r7}
 800caae:	b089      	sub	sp, #36	@ 0x24
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800cab4:	4ba6      	ldr	r3, [pc, #664]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cabc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800cabe:	4ba4      	ldr	r3, [pc, #656]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cac2:	f003 0303 	and.w	r3, r3, #3
 800cac6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800cac8:	4ba1      	ldr	r3, [pc, #644]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800caca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cacc:	0a1b      	lsrs	r3, r3, #8
 800cace:	f003 030f 	and.w	r3, r3, #15
 800cad2:	3301      	adds	r3, #1
 800cad4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800cad6:	4b9e      	ldr	r3, [pc, #632]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cada:	091b      	lsrs	r3, r3, #4
 800cadc:	f003 0301 	and.w	r3, r3, #1
 800cae0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800cae2:	4b9b      	ldr	r3, [pc, #620]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cae6:	08db      	lsrs	r3, r3, #3
 800cae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	fb02 f303 	mul.w	r3, r2, r3
 800caf2:	ee07 3a90 	vmov	s15, r3
 800caf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cafa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2b03      	cmp	r3, #3
 800cb02:	d062      	beq.n	800cbca <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2b03      	cmp	r3, #3
 800cb08:	f200 8081 	bhi.w	800cc0e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d024      	beq.n	800cb5c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d17a      	bne.n	800cc0e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	ee07 3a90 	vmov	s15, r3
 800cb1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb22:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800cd54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800cb26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb2a:	4b89      	ldr	r3, [pc, #548]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb3e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800cd58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cb42:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cb46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cb52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb5a:	e08f      	b.n	800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800cb5c:	4b7c      	ldr	r3, [pc, #496]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d005      	beq.n	800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800cb68:	4b79      	ldr	r3, [pc, #484]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	0f1b      	lsrs	r3, r3, #28
 800cb6e:	f003 030f 	and.w	r3, r3, #15
 800cb72:	e006      	b.n	800cb82 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800cb74:	4b76      	ldr	r3, [pc, #472]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cb76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb7a:	041b      	lsls	r3, r3, #16
 800cb7c:	0f1b      	lsrs	r3, r3, #28
 800cb7e:	f003 030f 	and.w	r3, r3, #15
 800cb82:	4a76      	ldr	r2, [pc, #472]	@ (800cd5c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800cb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb88:	ee07 3a90 	vmov	s15, r3
 800cb8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	ee07 3a90 	vmov	s15, r3
 800cb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	ee07 3a90 	vmov	s15, r3
 800cba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba8:	ed97 6a02 	vldr	s12, [r7, #8]
 800cbac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800cd58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cbb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800cbc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbc8:	e058      	b.n	800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	ee07 3a90 	vmov	s15, r3
 800cbd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cd54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800cbd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbdc:	4b5c      	ldr	r3, [pc, #368]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cbde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe4:	ee07 3a90 	vmov	s15, r3
 800cbe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbec:	ed97 6a02 	vldr	s12, [r7, #8]
 800cbf0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cd58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cbf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cbf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800cc04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc0c:	e036      	b.n	800cc7c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800cc0e:	4b50      	ldr	r3, [pc, #320]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d005      	beq.n	800cc26 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800cc1a:	4b4d      	ldr	r3, [pc, #308]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	0f1b      	lsrs	r3, r3, #28
 800cc20:	f003 030f 	and.w	r3, r3, #15
 800cc24:	e006      	b.n	800cc34 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800cc26:	4b4a      	ldr	r3, [pc, #296]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc2c:	041b      	lsls	r3, r3, #16
 800cc2e:	0f1b      	lsrs	r3, r3, #28
 800cc30:	f003 030f 	and.w	r3, r3, #15
 800cc34:	4a49      	ldr	r2, [pc, #292]	@ (800cd5c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800cc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	ee07 3a90 	vmov	s15, r3
 800cc48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800cc5e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800cd58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800cc62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800cc72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc7a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800cc7c:	4b34      	ldr	r3, [pc, #208]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d017      	beq.n	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cc88:	4b31      	ldr	r3, [pc, #196]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cc8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc8c:	0a5b      	lsrs	r3, r3, #9
 800cc8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc92:	ee07 3a90 	vmov	s15, r3
 800cc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800cc9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cca2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccae:	ee17 2a90 	vmov	r2, s15
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	e002      	b.n	800ccbe <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ccbe:	4b24      	ldr	r3, [pc, #144]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ccc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d017      	beq.n	800ccfa <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ccca:	4b21      	ldr	r3, [pc, #132]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccce:	0c1b      	lsrs	r3, r3, #16
 800ccd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccd4:	ee07 3a90 	vmov	s15, r3
 800ccd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ccdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cce0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cce4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccf0:	ee17 2a90 	vmov	r2, s15
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	605a      	str	r2, [r3, #4]
 800ccf8:	e002      	b.n	800cd00 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800cd00:	4b13      	ldr	r3, [pc, #76]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cd02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d017      	beq.n	800cd3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cd0c:	4b10      	ldr	r3, [pc, #64]	@ (800cd50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800cd0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd10:	0e1b      	lsrs	r3, r3, #24
 800cd12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd16:	ee07 3a90 	vmov	s15, r3
 800cd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800cd1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800cd26:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd32:	ee17 2a90 	vmov	r2, s15
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cd3a:	e002      	b.n	800cd42 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	609a      	str	r2, [r3, #8]
}
 800cd42:	bf00      	nop
 800cd44:	3724      	adds	r7, #36	@ 0x24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	46020c00 	.word	0x46020c00
 800cd54:	4b742400 	.word	0x4b742400
 800cd58:	46000000 	.word	0x46000000
 800cd5c:	080127c0 	.word	0x080127c0

0800cd60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b089      	sub	sp, #36	@ 0x24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800cd68:	4ba6      	ldr	r3, [pc, #664]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd70:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800cd72:	4ba4      	ldr	r3, [pc, #656]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd76:	f003 0303 	and.w	r3, r3, #3
 800cd7a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800cd7c:	4ba1      	ldr	r3, [pc, #644]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd80:	0a1b      	lsrs	r3, r3, #8
 800cd82:	f003 030f 	and.w	r3, r3, #15
 800cd86:	3301      	adds	r3, #1
 800cd88:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800cd8a:	4b9e      	ldr	r3, [pc, #632]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd8e:	091b      	lsrs	r3, r3, #4
 800cd90:	f003 0301 	and.w	r3, r3, #1
 800cd94:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800cd96:	4b9b      	ldr	r3, [pc, #620]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cd98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd9a:	08db      	lsrs	r3, r3, #3
 800cd9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	fb02 f303 	mul.w	r3, r2, r3
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	d062      	beq.n	800ce7e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	f200 8081 	bhi.w	800cec2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d024      	beq.n	800ce10 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d17a      	bne.n	800cec2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	ee07 3a90 	vmov	s15, r3
 800cdd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800d008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800cdda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdde:	4b89      	ldr	r3, [pc, #548]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cde0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cde6:	ee07 3a90 	vmov	s15, r3
 800cdea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdee:	ed97 6a02 	vldr	s12, [r7, #8]
 800cdf2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800d00c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cdf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800cdfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce02:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ce06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce0a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800ce0e:	e08f      	b.n	800cf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ce10:	4b7c      	ldr	r3, [pc, #496]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d005      	beq.n	800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800ce1c:	4b79      	ldr	r3, [pc, #484]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	0f1b      	lsrs	r3, r3, #28
 800ce22:	f003 030f 	and.w	r3, r3, #15
 800ce26:	e006      	b.n	800ce36 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800ce28:	4b76      	ldr	r3, [pc, #472]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ce2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce2e:	041b      	lsls	r3, r3, #16
 800ce30:	0f1b      	lsrs	r3, r3, #28
 800ce32:	f003 030f 	and.w	r3, r3, #15
 800ce36:	4a76      	ldr	r2, [pc, #472]	@ (800d010 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ce38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce3c:	ee07 3a90 	vmov	s15, r3
 800ce40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	ee07 3a90 	vmov	s15, r3
 800ce4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	ee07 3a90 	vmov	s15, r3
 800ce58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce5c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ce60:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800d00c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ce64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ce74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce7c:	e058      	b.n	800cf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	ee07 3a90 	vmov	s15, r3
 800ce84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce88:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ce8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce90:	4b5c      	ldr	r3, [pc, #368]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ce92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce98:	ee07 3a90 	vmov	s15, r3
 800ce9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800cea0:	ed97 6a02 	vldr	s12, [r7, #8]
 800cea4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800d00c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ceac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ceb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ceb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ceb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cebc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cec0:	e036      	b.n	800cf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cec2:	4b50      	ldr	r3, [pc, #320]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d005      	beq.n	800ceda <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800cece:	4b4d      	ldr	r3, [pc, #308]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	0f1b      	lsrs	r3, r3, #28
 800ced4:	f003 030f 	and.w	r3, r3, #15
 800ced8:	e006      	b.n	800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800ceda:	4b4a      	ldr	r3, [pc, #296]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cedc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cee0:	041b      	lsls	r3, r3, #16
 800cee2:	0f1b      	lsrs	r3, r3, #28
 800cee4:	f003 030f 	and.w	r3, r3, #15
 800cee8:	4a49      	ldr	r2, [pc, #292]	@ (800d010 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ceea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceee:	ee07 3a90 	vmov	s15, r3
 800cef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	ee07 3a90 	vmov	s15, r3
 800cefc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	ee07 3a90 	vmov	s15, r3
 800cf0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf12:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800d00c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800cf16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800cf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cf2e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800cf30:	4b34      	ldr	r3, [pc, #208]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d017      	beq.n	800cf6c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cf3c:	4b31      	ldr	r3, [pc, #196]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf40:	0a5b      	lsrs	r3, r3, #9
 800cf42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf46:	ee07 3a90 	vmov	s15, r3
 800cf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800cf4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf52:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cf56:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf62:	ee17 2a90 	vmov	r2, s15
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	601a      	str	r2, [r3, #0]
 800cf6a:	e002      	b.n	800cf72 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800cf72:	4b24      	ldr	r3, [pc, #144]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d017      	beq.n	800cfae <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cf7e:	4b21      	ldr	r3, [pc, #132]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cf80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf82:	0c1b      	lsrs	r3, r3, #16
 800cf84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf88:	ee07 3a90 	vmov	s15, r3
 800cf8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800cf90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf94:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cf98:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfa4:	ee17 2a90 	vmov	r2, s15
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	605a      	str	r2, [r3, #4]
 800cfac:	e002      	b.n	800cfb4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800cfb4:	4b13      	ldr	r3, [pc, #76]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cfb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d017      	beq.n	800cff0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cfc0:	4b10      	ldr	r3, [pc, #64]	@ (800d004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800cfc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfc4:	0e1b      	lsrs	r3, r3, #24
 800cfc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfca:	ee07 3a90 	vmov	s15, r3
 800cfce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800cfd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cfd6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cfda:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfe6:	ee17 2a90 	vmov	r2, s15
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cfee:	e002      	b.n	800cff6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	609a      	str	r2, [r3, #8]
}
 800cff6:	bf00      	nop
 800cff8:	3724      	adds	r7, #36	@ 0x24
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	46020c00 	.word	0x46020c00
 800d008:	4b742400 	.word	0x4b742400
 800d00c:	46000000 	.word	0x46000000
 800d010:	080127c0 	.word	0x080127c0

0800d014 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08e      	sub	sp, #56	@ 0x38
 800d018:	af00      	add	r7, sp, #0
 800d01a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800d01e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d022:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800d026:	430b      	orrs	r3, r1
 800d028:	d145      	bne.n	800d0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800d02a:	4ba7      	ldr	r3, [pc, #668]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d02c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d034:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800d036:	4ba4      	ldr	r3, [pc, #656]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d03c:	f003 0302 	and.w	r3, r3, #2
 800d040:	2b02      	cmp	r3, #2
 800d042:	d108      	bne.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800d044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d04a:	d104      	bne.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800d04c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d050:	637b      	str	r3, [r7, #52]	@ 0x34
 800d052:	f001 bb5a 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800d056:	4b9c      	ldr	r3, [pc, #624]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d05c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d060:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d064:	d114      	bne.n	800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800d066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d06c:	d110      	bne.n	800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d06e:	4b96      	ldr	r3, [pc, #600]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d07c:	d103      	bne.n	800d086 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800d07e:	23fa      	movs	r3, #250	@ 0xfa
 800d080:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d082:	f001 bb42 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d086:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d08a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d08c:	f001 bb3d 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800d090:	4b8d      	ldr	r3, [pc, #564]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d09c:	d107      	bne.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800d09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d0a4:	d103      	bne.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800d0a6:	4b89      	ldr	r3, [pc, #548]	@ (800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800d0a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0aa:	f001 bb2e 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0b2:	f001 bb2a 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d0b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0ba:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d0be:	430b      	orrs	r3, r1
 800d0c0:	d151      	bne.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d0c2:	4b81      	ldr	r3, [pc, #516]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d0c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d0c8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800d0cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d0:	2b80      	cmp	r3, #128	@ 0x80
 800d0d2:	d035      	beq.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d6:	2b80      	cmp	r3, #128	@ 0x80
 800d0d8:	d841      	bhi.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0dc:	2b60      	cmp	r3, #96	@ 0x60
 800d0de:	d02a      	beq.n	800d136 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e2:	2b60      	cmp	r3, #96	@ 0x60
 800d0e4:	d83b      	bhi.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e8:	2b40      	cmp	r3, #64	@ 0x40
 800d0ea:	d009      	beq.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ee:	2b40      	cmp	r3, #64	@ 0x40
 800d0f0:	d835      	bhi.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00c      	beq.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0fa:	2b20      	cmp	r3, #32
 800d0fc:	d012      	beq.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d0fe:	e02e      	b.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d104:	4618      	mov	r0, r3
 800d106:	f7ff fb77 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d10e:	f001 bafc 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d112:	f107 0318 	add.w	r3, r7, #24
 800d116:	4618      	mov	r0, r3
 800d118:	f7ff fcc8 	bl	800caac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d120:	f001 baf3 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d124:	f107 030c 	add.w	r3, r7, #12
 800d128:	4618      	mov	r0, r3
 800d12a:	f7ff fe19 	bl	800cd60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d132:	f001 baea 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d136:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d13a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d13c:	f001 bae5 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d140:	4b61      	ldr	r3, [pc, #388]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d14c:	d103      	bne.n	800d156 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800d14e:	4b60      	ldr	r3, [pc, #384]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d150:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d152:	f001 bada 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d156:	2300      	movs	r3, #0
 800d158:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d15a:	f001 bad6 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800d15e:	2300      	movs	r3, #0
 800d160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d162:	f001 bad2 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d16a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d16e:	430b      	orrs	r3, r1
 800d170:	d158      	bne.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d172:	4b55      	ldr	r3, [pc, #340]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d174:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d178:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d17c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d184:	d03b      	beq.n	800d1fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800d186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d18c:	d846      	bhi.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d194:	d02e      	beq.n	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800d196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d198:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d19c:	d83e      	bhi.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1a4:	d00b      	beq.n	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1ac:	d836      	bhi.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00d      	beq.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1ba:	d012      	beq.n	800d1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800d1bc:	e02e      	b.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7ff fb18 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1cc:	f001 ba9d 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1d0:	f107 0318 	add.w	r3, r7, #24
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7ff fc69 	bl	800caac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1de:	f001 ba94 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1e2:	f107 030c 	add.w	r3, r7, #12
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7ff fdba 	bl	800cd60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1f0:	f001 ba8b 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d1f4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d1f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1fa:	f001 ba86 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1fe:	4b32      	ldr	r3, [pc, #200]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d20a:	d103      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800d20c:	4b30      	ldr	r3, [pc, #192]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d20e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d210:	f001 ba7b 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d214:	2300      	movs	r3, #0
 800d216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d218:	f001 ba77 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d220:	f001 ba73 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800d224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d228:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d22c:	430b      	orrs	r3, r1
 800d22e:	d126      	bne.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800d230:	4b25      	ldr	r3, [pc, #148]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d23a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800d23c:	4b22      	ldr	r3, [pc, #136]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d248:	d106      	bne.n	800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800d24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d103      	bne.n	800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800d250:	4b1f      	ldr	r3, [pc, #124]	@ (800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800d252:	637b      	str	r3, [r7, #52]	@ 0x34
 800d254:	f001 ba59 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800d258:	4b1b      	ldr	r3, [pc, #108]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d264:	d107      	bne.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800d266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d26c:	d103      	bne.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800d26e:	4b19      	ldr	r3, [pc, #100]	@ (800d2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800d270:	637b      	str	r3, [r7, #52]	@ 0x34
 800d272:	f001 ba4a 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800d276:	2300      	movs	r3, #0
 800d278:	637b      	str	r3, [r7, #52]	@ 0x34
 800d27a:	f001 ba46 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800d27e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d282:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800d286:	430b      	orrs	r3, r1
 800d288:	d16e      	bne.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d28a:	4b0f      	ldr	r3, [pc, #60]	@ (800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800d28c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d290:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d294:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d29c:	d03d      	beq.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800d29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d2a4:	d85c      	bhi.n	800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2ac:	d014      	beq.n	800d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2b4:	d854      	bhi.n	800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d01f      	beq.n	800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800d2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d2c2:	d012      	beq.n	800d2ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d2c4:	e04c      	b.n	800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800d2c6:	bf00      	nop
 800d2c8:	46020c00 	.word	0x46020c00
 800d2cc:	0007a120 	.word	0x0007a120
 800d2d0:	00f42400 	.word	0x00f42400
 800d2d4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff fa8b 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2e6:	f001 ba10 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2ea:	f107 0318 	add.w	r3, r7, #24
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7ff fbdc 	bl	800caac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2f8:	f001 ba07 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d2fc:	4ba7      	ldr	r3, [pc, #668]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d308:	d103      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800d30a:	4ba5      	ldr	r3, [pc, #660]	@ (800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d30c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d30e:	f001 b9fc 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d312:	2300      	movs	r3, #0
 800d314:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d316:	f001 b9f8 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d31a:	4ba0      	ldr	r3, [pc, #640]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f003 0320 	and.w	r3, r3, #32
 800d322:	2b20      	cmp	r3, #32
 800d324:	d118      	bne.n	800d358 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d326:	4b9d      	ldr	r3, [pc, #628]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d005      	beq.n	800d33e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800d332:	4b9a      	ldr	r3, [pc, #616]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	0e1b      	lsrs	r3, r3, #24
 800d338:	f003 030f 	and.w	r3, r3, #15
 800d33c:	e006      	b.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800d33e:	4b97      	ldr	r3, [pc, #604]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d344:	041b      	lsls	r3, r3, #16
 800d346:	0e1b      	lsrs	r3, r3, #24
 800d348:	f003 030f 	and.w	r3, r3, #15
 800d34c:	4a95      	ldr	r2, [pc, #596]	@ (800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d352:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d354:	f001 b9d9 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d358:	2300      	movs	r3, #0
 800d35a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d35c:	f001 b9d5 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800d360:	2300      	movs	r3, #0
 800d362:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d364:	f001 b9d1 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d36c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800d370:	430b      	orrs	r3, r1
 800d372:	d17f      	bne.n	800d474 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d374:	4b89      	ldr	r3, [pc, #548]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d376:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d37a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d37e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800d380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d382:	2b00      	cmp	r3, #0
 800d384:	d165      	bne.n	800d452 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800d386:	4b85      	ldr	r3, [pc, #532]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d38c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d390:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800d392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d394:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d398:	d034      	beq.n	800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d3a0:	d853      	bhi.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3a8:	d00b      	beq.n	800d3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3b0:	d84b      	bhi.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d016      	beq.n	800d3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d3be:	d009      	beq.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800d3c0:	e043      	b.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff fa16 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d3d0:	f001 b99b 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3d4:	f107 0318 	add.w	r3, r7, #24
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7ff fb67 	bl	800caac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d3e2:	f001 b992 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800d3e6:	4b6d      	ldr	r3, [pc, #436]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d3ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d3f2:	d103      	bne.n	800d3fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800d3f4:	4b6a      	ldr	r3, [pc, #424]	@ (800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d3f6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d3f8:	f001 b987 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d400:	f001 b983 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d404:	4b65      	ldr	r3, [pc, #404]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 0320 	and.w	r3, r3, #32
 800d40c:	2b20      	cmp	r3, #32
 800d40e:	d118      	bne.n	800d442 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d410:	4b62      	ldr	r3, [pc, #392]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d005      	beq.n	800d428 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800d41c:	4b5f      	ldr	r3, [pc, #380]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	0e1b      	lsrs	r3, r3, #24
 800d422:	f003 030f 	and.w	r3, r3, #15
 800d426:	e006      	b.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800d428:	4b5c      	ldr	r3, [pc, #368]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d42a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d42e:	041b      	lsls	r3, r3, #16
 800d430:	0e1b      	lsrs	r3, r3, #24
 800d432:	f003 030f 	and.w	r3, r3, #15
 800d436:	4a5b      	ldr	r2, [pc, #364]	@ (800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d43c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800d43e:	f001 b964 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800d442:	2300      	movs	r3, #0
 800d444:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d446:	f001 b960 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800d44a:	2300      	movs	r3, #0
 800d44c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d44e:	f001 b95c 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800d452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d458:	d108      	bne.n	800d46c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d45a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d45e:	4618      	mov	r0, r3
 800d460:	f7ff f9ca 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d466:	637b      	str	r3, [r7, #52]	@ 0x34
 800d468:	f001 b94f 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800d46c:	2300      	movs	r3, #0
 800d46e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d470:	f001 b94b 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800d474:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d478:	1e51      	subs	r1, r2, #1
 800d47a:	430b      	orrs	r3, r1
 800d47c:	d136      	bne.n	800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800d47e:	4b47      	ldr	r3, [pc, #284]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d484:	f003 0303 	and.w	r3, r3, #3
 800d488:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800d48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d104      	bne.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800d490:	f7fe f9cc 	bl	800b82c <HAL_RCC_GetPCLK2Freq>
 800d494:	6378      	str	r0, [r7, #52]	@ 0x34
 800d496:	f001 b938 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800d49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d104      	bne.n	800d4aa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d4a0:	f7fe f894 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800d4a4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d4a6:	f001 b930 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800d4aa:	4b3c      	ldr	r3, [pc, #240]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4b6:	d106      	bne.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d103      	bne.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800d4be:	4b3a      	ldr	r3, [pc, #232]	@ (800d5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d4c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4c2:	f001 b922 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800d4c6:	4b35      	ldr	r3, [pc, #212]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4cc:	f003 0302 	and.w	r3, r3, #2
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	d107      	bne.n	800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	d104      	bne.n	800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800d4da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e0:	f001 b913 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e8:	f001 b90f 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800d4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4f0:	1e91      	subs	r1, r2, #2
 800d4f2:	430b      	orrs	r3, r1
 800d4f4:	d136      	bne.n	800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800d4f6:	4b29      	ldr	r3, [pc, #164]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d4f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d4fc:	f003 030c 	and.w	r3, r3, #12
 800d500:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800d502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d504:	2b00      	cmp	r3, #0
 800d506:	d104      	bne.n	800d512 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d508:	f7fe f97c 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800d50c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d50e:	f001 b8fc 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800d512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d514:	2b04      	cmp	r3, #4
 800d516:	d104      	bne.n	800d522 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d518:	f7fe f858 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800d51c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d51e:	f001 b8f4 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800d522:	4b1e      	ldr	r3, [pc, #120]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d52a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d52e:	d106      	bne.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800d530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d532:	2b08      	cmp	r3, #8
 800d534:	d103      	bne.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800d536:	4b1c      	ldr	r3, [pc, #112]	@ (800d5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d538:	637b      	str	r3, [r7, #52]	@ 0x34
 800d53a:	f001 b8e6 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800d53e:	4b17      	ldr	r3, [pc, #92]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d107      	bne.n	800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800d54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d54e:	2b0c      	cmp	r3, #12
 800d550:	d104      	bne.n	800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800d552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d556:	637b      	str	r3, [r7, #52]	@ 0x34
 800d558:	f001 b8d7 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800d55c:	2300      	movs	r3, #0
 800d55e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d560:	f001 b8d3 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800d564:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d568:	1f11      	subs	r1, r2, #4
 800d56a:	430b      	orrs	r3, r1
 800d56c:	d13f      	bne.n	800d5ee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800d56e:	4b0b      	ldr	r3, [pc, #44]	@ (800d59c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d574:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d578:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800d57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d104      	bne.n	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d580:	f7fe f940 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800d584:	6378      	str	r0, [r7, #52]	@ 0x34
 800d586:	f001 b8c0 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800d58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d58c:	2b10      	cmp	r3, #16
 800d58e:	d10d      	bne.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d590:	f7fe f81c 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800d594:	6378      	str	r0, [r7, #52]	@ 0x34
 800d596:	f001 b8b8 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d59a:	bf00      	nop
 800d59c:	46020c00 	.word	0x46020c00
 800d5a0:	02dc6c00 	.word	0x02dc6c00
 800d5a4:	080127c0 	.word	0x080127c0
 800d5a8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800d5ac:	4ba8      	ldr	r3, [pc, #672]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5b8:	d106      	bne.n	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5bc:	2b20      	cmp	r3, #32
 800d5be:	d103      	bne.n	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800d5c0:	4ba4      	ldr	r3, [pc, #656]	@ (800d854 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d5c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5c4:	f001 b8a1 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800d5c8:	4ba1      	ldr	r3, [pc, #644]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d5ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5ce:	f003 0302 	and.w	r3, r3, #2
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d107      	bne.n	800d5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d8:	2b30      	cmp	r3, #48	@ 0x30
 800d5da:	d104      	bne.n	800d5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800d5dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5e2:	f001 b892 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5ea:	f001 b88e 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800d5ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5f2:	f1a2 0108 	sub.w	r1, r2, #8
 800d5f6:	430b      	orrs	r3, r1
 800d5f8:	d136      	bne.n	800d668 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d5fa:	4b95      	ldr	r3, [pc, #596]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d5fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d600:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d604:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800d606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d104      	bne.n	800d616 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d60c:	f7fe f8fa 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800d610:	6378      	str	r0, [r7, #52]	@ 0x34
 800d612:	f001 b87a 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800d616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d618:	2b40      	cmp	r3, #64	@ 0x40
 800d61a:	d104      	bne.n	800d626 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d61c:	f7fd ffd6 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800d620:	6378      	str	r0, [r7, #52]	@ 0x34
 800d622:	f001 b872 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800d626:	4b8a      	ldr	r3, [pc, #552]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d62e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d632:	d106      	bne.n	800d642 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800d634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d636:	2b80      	cmp	r3, #128	@ 0x80
 800d638:	d103      	bne.n	800d642 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800d63a:	4b86      	ldr	r3, [pc, #536]	@ (800d854 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d63c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d63e:	f001 b864 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800d642:	4b83      	ldr	r3, [pc, #524]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d648:	f003 0302 	and.w	r3, r3, #2
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d107      	bne.n	800d660 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800d650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d652:	2bc0      	cmp	r3, #192	@ 0xc0
 800d654:	d104      	bne.n	800d660 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800d656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d65a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d65c:	f001 b855 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800d660:	2300      	movs	r3, #0
 800d662:	637b      	str	r3, [r7, #52]	@ 0x34
 800d664:	f001 b851 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800d668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d66c:	f1a2 0110 	sub.w	r1, r2, #16
 800d670:	430b      	orrs	r3, r1
 800d672:	d139      	bne.n	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d674:	4b76      	ldr	r3, [pc, #472]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d67a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d67e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800d680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d682:	2b00      	cmp	r3, #0
 800d684:	d104      	bne.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d686:	f7fe f8bd 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800d68a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d68c:	f001 b83d 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800d690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d696:	d104      	bne.n	800d6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d698:	f7fd ff98 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800d69c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d69e:	f001 b834 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800d6a2:	4b6b      	ldr	r3, [pc, #428]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6ae:	d107      	bne.n	800d6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6b6:	d103      	bne.n	800d6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800d6b8:	4b66      	ldr	r3, [pc, #408]	@ (800d854 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d6ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6bc:	f001 b825 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800d6c0:	4b63      	ldr	r3, [pc, #396]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d6c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6c6:	f003 0302 	and.w	r3, r3, #2
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d108      	bne.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d6d4:	d104      	bne.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800d6d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d6da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6dc:	f001 b815 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6e4:	f001 b811 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800d6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ec:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800d6f0:	430b      	orrs	r3, r1
 800d6f2:	d139      	bne.n	800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800d6f4:	4b56      	ldr	r3, [pc, #344]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d6f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d6fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d6fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800d700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d702:	2b00      	cmp	r3, #0
 800d704:	d104      	bne.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d706:	f7fe f87d 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800d70a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d70c:	f000 bffd 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800d710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d716:	d104      	bne.n	800d722 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d718:	f7fd ff58 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800d71c:	6378      	str	r0, [r7, #52]	@ 0x34
 800d71e:	f000 bff4 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800d722:	4b4b      	ldr	r3, [pc, #300]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d72a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d72e:	d107      	bne.n	800d740 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d732:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d736:	d103      	bne.n	800d740 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800d738:	4b46      	ldr	r3, [pc, #280]	@ (800d854 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d73a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d73c:	f000 bfe5 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800d740:	4b43      	ldr	r3, [pc, #268]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d746:	f003 0302 	and.w	r3, r3, #2
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d108      	bne.n	800d760 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800d74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d750:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d754:	d104      	bne.n	800d760 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800d756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d75a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d75c:	f000 bfd5 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800d760:	2300      	movs	r3, #0
 800d762:	637b      	str	r3, [r7, #52]	@ 0x34
 800d764:	f000 bfd1 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800d768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d76c:	f1a2 0120 	sub.w	r1, r2, #32
 800d770:	430b      	orrs	r3, r1
 800d772:	d158      	bne.n	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800d774:	4b36      	ldr	r3, [pc, #216]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d77a:	f003 0307 	and.w	r3, r3, #7
 800d77e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800d780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d782:	2b00      	cmp	r3, #0
 800d784:	d104      	bne.n	800d790 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800d786:	f7fe f865 	bl	800b854 <HAL_RCC_GetPCLK3Freq>
 800d78a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d78c:	f000 bfbd 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800d790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d792:	2b01      	cmp	r3, #1
 800d794:	d104      	bne.n	800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d796:	f7fd ff19 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800d79a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d79c:	f000 bfb5 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800d7a0:	4b2b      	ldr	r3, [pc, #172]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7ac:	d106      	bne.n	800d7bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d103      	bne.n	800d7bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800d7b4:	4b27      	ldr	r3, [pc, #156]	@ (800d854 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7b8:	f000 bfa7 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800d7bc:	4b24      	ldr	r3, [pc, #144]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7c2:	f003 0302 	and.w	r3, r3, #2
 800d7c6:	2b02      	cmp	r3, #2
 800d7c8:	d107      	bne.n	800d7da <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7cc:	2b03      	cmp	r3, #3
 800d7ce:	d104      	bne.n	800d7da <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800d7d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7d6:	f000 bf98 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800d7da:	4b1d      	ldr	r3, [pc, #116]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f003 0320 	and.w	r3, r3, #32
 800d7e2:	2b20      	cmp	r3, #32
 800d7e4:	d11b      	bne.n	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e8:	2b04      	cmp	r3, #4
 800d7ea:	d118      	bne.n	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d7ec:	4b18      	ldr	r3, [pc, #96]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d005      	beq.n	800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800d7f8:	4b15      	ldr	r3, [pc, #84]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	0e1b      	lsrs	r3, r3, #24
 800d7fe:	f003 030f 	and.w	r3, r3, #15
 800d802:	e006      	b.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800d804:	4b12      	ldr	r3, [pc, #72]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d80a:	041b      	lsls	r3, r3, #16
 800d80c:	0e1b      	lsrs	r3, r3, #24
 800d80e:	f003 030f 	and.w	r3, r3, #15
 800d812:	4a11      	ldr	r2, [pc, #68]	@ (800d858 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d818:	637b      	str	r3, [r7, #52]	@ 0x34
 800d81a:	f000 bf76 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800d81e:	2300      	movs	r3, #0
 800d820:	637b      	str	r3, [r7, #52]	@ 0x34
 800d822:	f000 bf72 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800d826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d82a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d82e:	430b      	orrs	r3, r1
 800d830:	d172      	bne.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800d832:	4b07      	ldr	r3, [pc, #28]	@ (800d850 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800d834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d838:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d83c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800d83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d844:	d10a      	bne.n	800d85c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d846:	f7fd fec1 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800d84a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d84c:	f000 bf5d 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d850:	46020c00 	.word	0x46020c00
 800d854:	00f42400 	.word	0x00f42400
 800d858:	080127c0 	.word	0x080127c0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800d85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d862:	d108      	bne.n	800d876 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d864:	f107 0318 	add.w	r3, r7, #24
 800d868:	4618      	mov	r0, r3
 800d86a:	f7ff f91f 	bl	800caac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	637b      	str	r3, [r7, #52]	@ 0x34
 800d872:	f000 bf4a 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800d876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d104      	bne.n	800d886 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800d87c:	f7fd ffa8 	bl	800b7d0 <HAL_RCC_GetHCLKFreq>
 800d880:	6378      	str	r0, [r7, #52]	@ 0x34
 800d882:	f000 bf42 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800d886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d888:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d88c:	d122      	bne.n	800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d88e:	4bb0      	ldr	r3, [pc, #704]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f003 0320 	and.w	r3, r3, #32
 800d896:	2b20      	cmp	r3, #32
 800d898:	d118      	bne.n	800d8cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d89a:	4bad      	ldr	r3, [pc, #692]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d89c:	689b      	ldr	r3, [r3, #8]
 800d89e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d005      	beq.n	800d8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800d8a6:	4baa      	ldr	r3, [pc, #680]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	0e1b      	lsrs	r3, r3, #24
 800d8ac:	f003 030f 	and.w	r3, r3, #15
 800d8b0:	e006      	b.n	800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800d8b2:	4ba7      	ldr	r3, [pc, #668]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d8b8:	041b      	lsls	r3, r3, #16
 800d8ba:	0e1b      	lsrs	r3, r3, #24
 800d8bc:	f003 030f 	and.w	r3, r3, #15
 800d8c0:	4aa4      	ldr	r2, [pc, #656]	@ (800db54 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8c8:	f000 bf1f 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8d0:	f000 bf1b 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800d8d4:	4b9e      	ldr	r3, [pc, #632]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8e0:	d107      	bne.n	800d8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d8e8:	d103      	bne.n	800d8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800d8ea:	4b9b      	ldr	r3, [pc, #620]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d8ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8ee:	f000 bf0c 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800d8f2:	4b97      	ldr	r3, [pc, #604]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8fe:	d107      	bne.n	800d910 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d906:	d103      	bne.n	800d910 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800d908:	4b93      	ldr	r3, [pc, #588]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d90a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d90c:	f000 befd 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800d910:	2300      	movs	r3, #0
 800d912:	637b      	str	r3, [r7, #52]	@ 0x34
 800d914:	f000 bef9 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800d918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d91c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d920:	430b      	orrs	r3, r1
 800d922:	d158      	bne.n	800d9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800d924:	4b8a      	ldr	r3, [pc, #552]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d926:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d92a:	f003 0307 	and.w	r3, r3, #7
 800d92e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d932:	2b04      	cmp	r3, #4
 800d934:	d84b      	bhi.n	800d9ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800d936:	a201      	add	r2, pc, #4	@ (adr r2, 800d93c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800d938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93c:	0800d975 	.word	0x0800d975
 800d940:	0800d951 	.word	0x0800d951
 800d944:	0800d963 	.word	0x0800d963
 800d948:	0800d97f 	.word	0x0800d97f
 800d94c:	0800d989 	.word	0x0800d989
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe ff4f 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800d95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d95c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d95e:	f000 bed4 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d962:	f107 030c 	add.w	r3, r7, #12
 800d966:	4618      	mov	r0, r3
 800d968:	f7ff f9fa 	bl	800cd60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d970:	f000 becb 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800d974:	f7fd ff2c 	bl	800b7d0 <HAL_RCC_GetHCLKFreq>
 800d978:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d97a:	f000 bec6 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d97e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d984:	f000 bec1 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d988:	4b71      	ldr	r3, [pc, #452]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f003 0320 	and.w	r3, r3, #32
 800d990:	2b20      	cmp	r3, #32
 800d992:	d118      	bne.n	800d9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d994:	4b6e      	ldr	r3, [pc, #440]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d005      	beq.n	800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800d9a0:	4b6b      	ldr	r3, [pc, #428]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	0e1b      	lsrs	r3, r3, #24
 800d9a6:	f003 030f 	and.w	r3, r3, #15
 800d9aa:	e006      	b.n	800d9ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800d9ac:	4b68      	ldr	r3, [pc, #416]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d9ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9b2:	041b      	lsls	r3, r3, #16
 800d9b4:	0e1b      	lsrs	r3, r3, #24
 800d9b6:	f003 030f 	and.w	r3, r3, #15
 800d9ba:	4a66      	ldr	r2, [pc, #408]	@ (800db54 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d9c2:	f000 bea2 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9ca:	f000 be9e 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9d2:	f000 be9a 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800d9d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9da:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800d9de:	430b      	orrs	r3, r1
 800d9e0:	d167      	bne.n	800dab2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800d9e2:	4b5b      	ldr	r3, [pc, #364]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d9e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d9e8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d9ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9f4:	d036      	beq.n	800da64 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9fc:	d855      	bhi.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800da04:	d029      	beq.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800da06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800da0c:	d84d      	bhi.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da14:	d013      	beq.n	800da3e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800da16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da1c:	d845      	bhi.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da20:	2b00      	cmp	r3, #0
 800da22:	d015      	beq.n	800da50 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800da24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da2a:	d13e      	bne.n	800daaa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da30:	4618      	mov	r0, r3
 800da32:	f7fe fee1 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800da36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da3a:	f000 be66 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da3e:	f107 030c 	add.w	r3, r7, #12
 800da42:	4618      	mov	r0, r3
 800da44:	f7ff f98c 	bl	800cd60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da4c:	f000 be5d 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800da50:	f7fd febe 	bl	800b7d0 <HAL_RCC_GetHCLKFreq>
 800da54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da56:	f000 be58 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800da5a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800da5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da60:	f000 be53 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800da64:	4b3a      	ldr	r3, [pc, #232]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f003 0320 	and.w	r3, r3, #32
 800da6c:	2b20      	cmp	r3, #32
 800da6e:	d118      	bne.n	800daa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800da70:	4b37      	ldr	r3, [pc, #220]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d005      	beq.n	800da88 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800da7c:	4b34      	ldr	r3, [pc, #208]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	0e1b      	lsrs	r3, r3, #24
 800da82:	f003 030f 	and.w	r3, r3, #15
 800da86:	e006      	b.n	800da96 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800da88:	4b31      	ldr	r3, [pc, #196]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800da8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da8e:	041b      	lsls	r3, r3, #16
 800da90:	0e1b      	lsrs	r3, r3, #24
 800da92:	f003 030f 	and.w	r3, r3, #15
 800da96:	4a2f      	ldr	r2, [pc, #188]	@ (800db54 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800da98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da9c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800da9e:	f000 be34 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800daa2:	2300      	movs	r3, #0
 800daa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daa6:	f000 be30 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800daaa:	2300      	movs	r3, #0
 800daac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daae:	f000 be2c 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800dab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dab6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800daba:	430b      	orrs	r3, r1
 800dabc:	d152      	bne.n	800db64 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800dabe:	4b24      	ldr	r3, [pc, #144]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800dac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dac4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800dac8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800daca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d104      	bne.n	800dada <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dad0:	f7fd fe98 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800dad4:	6378      	str	r0, [r7, #52]	@ 0x34
 800dad6:	f000 be18 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800dada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dadc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dae0:	d104      	bne.n	800daec <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dae2:	f7fd fd73 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800dae6:	6378      	str	r0, [r7, #52]	@ 0x34
 800dae8:	f000 be0f 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800daec:	4b18      	ldr	r3, [pc, #96]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800daf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800daf8:	d107      	bne.n	800db0a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800dafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db00:	d103      	bne.n	800db0a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800db02:	4b15      	ldr	r3, [pc, #84]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800db04:	637b      	str	r3, [r7, #52]	@ 0x34
 800db06:	f000 be00 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800db0a:	4b11      	ldr	r3, [pc, #68]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f003 0320 	and.w	r3, r3, #32
 800db12:	2b20      	cmp	r3, #32
 800db14:	d122      	bne.n	800db5c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800db16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800db1c:	d11e      	bne.n	800db5c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800db1e:	4b0c      	ldr	r3, [pc, #48]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db26:	2b00      	cmp	r3, #0
 800db28:	d005      	beq.n	800db36 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800db2a:	4b09      	ldr	r3, [pc, #36]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	0e1b      	lsrs	r3, r3, #24
 800db30:	f003 030f 	and.w	r3, r3, #15
 800db34:	e006      	b.n	800db44 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800db36:	4b06      	ldr	r3, [pc, #24]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800db38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800db3c:	041b      	lsls	r3, r3, #16
 800db3e:	0e1b      	lsrs	r3, r3, #24
 800db40:	f003 030f 	and.w	r3, r3, #15
 800db44:	4a03      	ldr	r2, [pc, #12]	@ (800db54 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800db46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db4c:	f000 bddd 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800db50:	46020c00 	.word	0x46020c00
 800db54:	080127c0 	.word	0x080127c0
 800db58:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800db5c:	2300      	movs	r3, #0
 800db5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db60:	f000 bdd3 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800db64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db68:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800db6c:	430b      	orrs	r3, r1
 800db6e:	d14c      	bne.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800db70:	4ba8      	ldr	r3, [pc, #672]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800db72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800db76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800db7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800db7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d104      	bne.n	800db8c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800db82:	f7fd fe3f 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800db86:	6378      	str	r0, [r7, #52]	@ 0x34
 800db88:	f000 bdbf 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800db8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db92:	d104      	bne.n	800db9e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800db94:	f7fd fd1a 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800db98:	6378      	str	r0, [r7, #52]	@ 0x34
 800db9a:	f000 bdb6 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800db9e:	4b9d      	ldr	r3, [pc, #628]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dbaa:	d107      	bne.n	800dbbc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800dbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dbb2:	d103      	bne.n	800dbbc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800dbb4:	4b98      	ldr	r3, [pc, #608]	@ (800de18 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dbb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbb8:	f000 bda7 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800dbbc:	4b95      	ldr	r3, [pc, #596]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 0320 	and.w	r3, r3, #32
 800dbc4:	2b20      	cmp	r3, #32
 800dbc6:	d11c      	bne.n	800dc02 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dbce:	d118      	bne.n	800dc02 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dbd0:	4b90      	ldr	r3, [pc, #576]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d005      	beq.n	800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800dbdc:	4b8d      	ldr	r3, [pc, #564]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	0e1b      	lsrs	r3, r3, #24
 800dbe2:	f003 030f 	and.w	r3, r3, #15
 800dbe6:	e006      	b.n	800dbf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800dbe8:	4b8a      	ldr	r3, [pc, #552]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dbea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dbee:	041b      	lsls	r3, r3, #16
 800dbf0:	0e1b      	lsrs	r3, r3, #24
 800dbf2:	f003 030f 	and.w	r3, r3, #15
 800dbf6:	4a89      	ldr	r2, [pc, #548]	@ (800de1c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbfe:	f000 bd84 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800dc02:	2300      	movs	r3, #0
 800dc04:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc06:	f000 bd80 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800dc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc0e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800dc12:	430b      	orrs	r3, r1
 800dc14:	d158      	bne.n	800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800dc16:	4b7f      	ldr	r3, [pc, #508]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dc1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dc20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc24:	2bc0      	cmp	r3, #192	@ 0xc0
 800dc26:	d028      	beq.n	800dc7a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800dc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2a:	2bc0      	cmp	r3, #192	@ 0xc0
 800dc2c:	d848      	bhi.n	800dcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc30:	2b80      	cmp	r3, #128	@ 0x80
 800dc32:	d00e      	beq.n	800dc52 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800dc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc36:	2b80      	cmp	r3, #128	@ 0x80
 800dc38:	d842      	bhi.n	800dcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800dc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d003      	beq.n	800dc48 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800dc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc42:	2b40      	cmp	r3, #64	@ 0x40
 800dc44:	d014      	beq.n	800dc70 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800dc46:	e03b      	b.n	800dcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800dc48:	f7fd fe04 	bl	800b854 <HAL_RCC_GetPCLK3Freq>
 800dc4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dc4e:	f000 bd5c 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dc52:	4b70      	ldr	r3, [pc, #448]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dc5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc5e:	d103      	bne.n	800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800dc60:	4b6d      	ldr	r3, [pc, #436]	@ (800de18 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dc62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dc64:	f000 bd51 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc6c:	f000 bd4d 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800dc70:	f7fd fcac 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800dc74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800dc76:	f000 bd48 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dc7a:	4b66      	ldr	r3, [pc, #408]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0320 	and.w	r3, r3, #32
 800dc82:	2b20      	cmp	r3, #32
 800dc84:	d118      	bne.n	800dcb8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dc86:	4b63      	ldr	r3, [pc, #396]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d005      	beq.n	800dc9e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800dc92:	4b60      	ldr	r3, [pc, #384]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	0e1b      	lsrs	r3, r3, #24
 800dc98:	f003 030f 	and.w	r3, r3, #15
 800dc9c:	e006      	b.n	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800dc9e:	4b5d      	ldr	r3, [pc, #372]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dca4:	041b      	lsls	r3, r3, #16
 800dca6:	0e1b      	lsrs	r3, r3, #24
 800dca8:	f003 030f 	and.w	r3, r3, #15
 800dcac:	4a5b      	ldr	r2, [pc, #364]	@ (800de1c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800dcb4:	f000 bd29 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dcbc:	f000 bd25 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dcc4:	f000 bd21 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800dcc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dccc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800dcd0:	430b      	orrs	r3, r1
 800dcd2:	d14c      	bne.n	800dd6e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800dcd4:	4b4f      	ldr	r3, [pc, #316]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dcd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dcda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800dcde:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800dce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d104      	bne.n	800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dce6:	f7fd fd8d 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800dcea:	6378      	str	r0, [r7, #52]	@ 0x34
 800dcec:	f000 bd0d 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcf6:	d104      	bne.n	800dd02 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dcf8:	f7fd fc68 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800dcfc:	6378      	str	r0, [r7, #52]	@ 0x34
 800dcfe:	f000 bd04 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800dd02:	4b44      	ldr	r3, [pc, #272]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd0e:	d107      	bne.n	800dd20 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800dd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd16:	d103      	bne.n	800dd20 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800dd18:	4b3f      	ldr	r3, [pc, #252]	@ (800de18 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800dd1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd1c:	f000 bcf5 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800dd20:	4b3c      	ldr	r3, [pc, #240]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f003 0320 	and.w	r3, r3, #32
 800dd28:	2b20      	cmp	r3, #32
 800dd2a:	d11c      	bne.n	800dd66 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800dd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd2e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800dd32:	d118      	bne.n	800dd66 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dd34:	4b37      	ldr	r3, [pc, #220]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d005      	beq.n	800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800dd40:	4b34      	ldr	r3, [pc, #208]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	0e1b      	lsrs	r3, r3, #24
 800dd46:	f003 030f 	and.w	r3, r3, #15
 800dd4a:	e006      	b.n	800dd5a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800dd4c:	4b31      	ldr	r3, [pc, #196]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dd52:	041b      	lsls	r3, r3, #16
 800dd54:	0e1b      	lsrs	r3, r3, #24
 800dd56:	f003 030f 	and.w	r3, r3, #15
 800dd5a:	4a30      	ldr	r2, [pc, #192]	@ (800de1c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800dd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd60:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd62:	f000 bcd2 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800dd66:	2300      	movs	r3, #0
 800dd68:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd6a:	f000 bcce 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800dd6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd72:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800dd76:	430b      	orrs	r3, r1
 800dd78:	d152      	bne.n	800de20 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800dd7a:	4b26      	ldr	r3, [pc, #152]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dd7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd80:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800dd84:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800dd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d104      	bne.n	800dd96 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800dd8c:	f7fd fd3a 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800dd90:	6378      	str	r0, [r7, #52]	@ 0x34
 800dd92:	f000 bcba 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800dd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd9c:	d104      	bne.n	800dda8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800dd9e:	f7fd fc15 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800dda2:	6378      	str	r0, [r7, #52]	@ 0x34
 800dda4:	f000 bcb1 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800dda8:	4b1a      	ldr	r3, [pc, #104]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ddb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddb4:	d107      	bne.n	800ddc6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800ddb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ddbc:	d103      	bne.n	800ddc6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800ddbe:	4b16      	ldr	r3, [pc, #88]	@ (800de18 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ddc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddc2:	f000 bca2 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800ddc6:	4b13      	ldr	r3, [pc, #76]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f003 0320 	and.w	r3, r3, #32
 800ddce:	2b20      	cmp	r3, #32
 800ddd0:	d11c      	bne.n	800de0c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ddd8:	d118      	bne.n	800de0c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ddda:	4b0e      	ldr	r3, [pc, #56]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d005      	beq.n	800ddf2 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800dde6:	4b0b      	ldr	r3, [pc, #44]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	0e1b      	lsrs	r3, r3, #24
 800ddec:	f003 030f 	and.w	r3, r3, #15
 800ddf0:	e006      	b.n	800de00 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800ddf2:	4b08      	ldr	r3, [pc, #32]	@ (800de14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ddf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ddf8:	041b      	lsls	r3, r3, #16
 800ddfa:	0e1b      	lsrs	r3, r3, #24
 800ddfc:	f003 030f 	and.w	r3, r3, #15
 800de00:	4a06      	ldr	r2, [pc, #24]	@ (800de1c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800de02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de06:	637b      	str	r3, [r7, #52]	@ 0x34
 800de08:	f000 bc7f 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800de0c:	2300      	movs	r3, #0
 800de0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800de10:	f000 bc7b 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800de14:	46020c00 	.word	0x46020c00
 800de18:	00f42400 	.word	0x00f42400
 800de1c:	080127c0 	.word	0x080127c0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800de20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de24:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800de28:	430b      	orrs	r3, r1
 800de2a:	d14c      	bne.n	800dec6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800de2c:	4ba6      	ldr	r3, [pc, #664]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800de32:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800de36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800de38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d104      	bne.n	800de48 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800de3e:	f7fd fce1 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800de42:	6378      	str	r0, [r7, #52]	@ 0x34
 800de44:	f000 bc61 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800de48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de4e:	d104      	bne.n	800de5a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800de50:	f7fd fbbc 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800de54:	6378      	str	r0, [r7, #52]	@ 0x34
 800de56:	f000 bc58 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800de5a:	4b9b      	ldr	r3, [pc, #620]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de66:	d107      	bne.n	800de78 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800de68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de6e:	d103      	bne.n	800de78 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800de70:	4b96      	ldr	r3, [pc, #600]	@ (800e0cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800de72:	637b      	str	r3, [r7, #52]	@ 0x34
 800de74:	f000 bc49 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800de78:	4b93      	ldr	r3, [pc, #588]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f003 0320 	and.w	r3, r3, #32
 800de80:	2b20      	cmp	r3, #32
 800de82:	d11c      	bne.n	800debe <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800de84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de86:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800de8a:	d118      	bne.n	800debe <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800de8c:	4b8e      	ldr	r3, [pc, #568]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d005      	beq.n	800dea4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800de98:	4b8b      	ldr	r3, [pc, #556]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	0e1b      	lsrs	r3, r3, #24
 800de9e:	f003 030f 	and.w	r3, r3, #15
 800dea2:	e006      	b.n	800deb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800dea4:	4b88      	ldr	r3, [pc, #544]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800deaa:	041b      	lsls	r3, r3, #16
 800deac:	0e1b      	lsrs	r3, r3, #24
 800deae:	f003 030f 	and.w	r3, r3, #15
 800deb2:	4a87      	ldr	r2, [pc, #540]	@ (800e0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800deb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800deba:	f000 bc26 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800debe:	2300      	movs	r3, #0
 800dec0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dec2:	f000 bc22 	b.w	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800dec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800deca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800dece:	430b      	orrs	r3, r1
 800ded0:	d164      	bne.n	800df9c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800ded2:	4b7d      	ldr	r3, [pc, #500]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ded4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ded8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dedc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800dede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d120      	bne.n	800df26 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dee4:	4b78      	ldr	r3, [pc, #480]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f003 0320 	and.w	r3, r3, #32
 800deec:	2b20      	cmp	r3, #32
 800deee:	d117      	bne.n	800df20 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800def0:	4b75      	ldr	r3, [pc, #468]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800def8:	2b00      	cmp	r3, #0
 800defa:	d005      	beq.n	800df08 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800defc:	4b72      	ldr	r3, [pc, #456]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	0e1b      	lsrs	r3, r3, #24
 800df02:	f003 030f 	and.w	r3, r3, #15
 800df06:	e006      	b.n	800df16 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800df08:	4b6f      	ldr	r3, [pc, #444]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800df0e:	041b      	lsls	r3, r3, #16
 800df10:	0e1b      	lsrs	r3, r3, #24
 800df12:	f003 030f 	and.w	r3, r3, #15
 800df16:	4a6e      	ldr	r2, [pc, #440]	@ (800e0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800df18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800df1e:	e3f4      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800df20:	2300      	movs	r3, #0
 800df22:	637b      	str	r3, [r7, #52]	@ 0x34
 800df24:	e3f1      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800df26:	4b68      	ldr	r3, [pc, #416]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800df34:	d112      	bne.n	800df5c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800df36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df3c:	d10e      	bne.n	800df5c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800df3e:	4b62      	ldr	r3, [pc, #392]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800df48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df4c:	d102      	bne.n	800df54 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800df4e:	23fa      	movs	r3, #250	@ 0xfa
 800df50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800df52:	e3da      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800df54:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800df58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800df5a:	e3d6      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800df5c:	4b5a      	ldr	r3, [pc, #360]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df68:	d106      	bne.n	800df78 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800df6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df70:	d102      	bne.n	800df78 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800df72:	4b56      	ldr	r3, [pc, #344]	@ (800e0cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800df74:	637b      	str	r3, [r7, #52]	@ 0x34
 800df76:	e3c8      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800df78:	4b53      	ldr	r3, [pc, #332]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800df7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df7e:	f003 0302 	and.w	r3, r3, #2
 800df82:	2b02      	cmp	r3, #2
 800df84:	d107      	bne.n	800df96 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800df86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800df8c:	d103      	bne.n	800df96 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800df8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df92:	637b      	str	r3, [r7, #52]	@ 0x34
 800df94:	e3b9      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800df96:	2300      	movs	r3, #0
 800df98:	637b      	str	r3, [r7, #52]	@ 0x34
 800df9a:	e3b6      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800df9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfa0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800dfa4:	430b      	orrs	r3, r1
 800dfa6:	d164      	bne.n	800e072 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800dfa8:	4b47      	ldr	r3, [pc, #284]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dfae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800dfb2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800dfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d120      	bne.n	800dffc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800dfba:	4b43      	ldr	r3, [pc, #268]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f003 0320 	and.w	r3, r3, #32
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	d117      	bne.n	800dff6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800dfc6:	4b40      	ldr	r3, [pc, #256]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d005      	beq.n	800dfde <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800dfd2:	4b3d      	ldr	r3, [pc, #244]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	0e1b      	lsrs	r3, r3, #24
 800dfd8:	f003 030f 	and.w	r3, r3, #15
 800dfdc:	e006      	b.n	800dfec <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800dfde:	4b3a      	ldr	r3, [pc, #232]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dfe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800dfe4:	041b      	lsls	r3, r3, #16
 800dfe6:	0e1b      	lsrs	r3, r3, #24
 800dfe8:	f003 030f 	and.w	r3, r3, #15
 800dfec:	4a38      	ldr	r2, [pc, #224]	@ (800e0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800dfee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dff4:	e389      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800dff6:	2300      	movs	r3, #0
 800dff8:	637b      	str	r3, [r7, #52]	@ 0x34
 800dffa:	e386      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800dffc:	4b32      	ldr	r3, [pc, #200]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800dffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e00a:	d112      	bne.n	800e032 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800e00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e012:	d10e      	bne.n	800e032 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e014:	4b2c      	ldr	r3, [pc, #176]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e01a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e01e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e022:	d102      	bne.n	800e02a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800e024:	23fa      	movs	r3, #250	@ 0xfa
 800e026:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e028:	e36f      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e02a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e02e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e030:	e36b      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800e032:	4b25      	ldr	r3, [pc, #148]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e03a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e03e:	d106      	bne.n	800e04e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800e040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e046:	d102      	bne.n	800e04e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800e048:	4b20      	ldr	r3, [pc, #128]	@ (800e0cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800e04a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e04c:	e35d      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800e04e:	4b1e      	ldr	r3, [pc, #120]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e054:	f003 0302 	and.w	r3, r3, #2
 800e058:	2b02      	cmp	r3, #2
 800e05a:	d107      	bne.n	800e06c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800e05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e062:	d103      	bne.n	800e06c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800e064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e068:	637b      	str	r3, [r7, #52]	@ 0x34
 800e06a:	e34e      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800e06c:	2300      	movs	r3, #0
 800e06e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e070:	e34b      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800e072:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e076:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800e07a:	430b      	orrs	r3, r1
 800e07c:	d14e      	bne.n	800e11c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e07e:	4b12      	ldr	r3, [pc, #72]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e084:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800e088:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800e08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d103      	bne.n	800e098 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800e090:	f7fd fbb8 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800e094:	6378      	str	r0, [r7, #52]	@ 0x34
 800e096:	e338      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800e098:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e09a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e09e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e0a6:	d119      	bne.n	800e0dc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800e0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e0ae:	d115      	bne.n	800e0dc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e0b0:	4b05      	ldr	r3, [pc, #20]	@ (800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800e0b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0be:	d109      	bne.n	800e0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800e0c0:	23fa      	movs	r3, #250	@ 0xfa
 800e0c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e0c4:	e321      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e0c6:	bf00      	nop
 800e0c8:	46020c00 	.word	0x46020c00
 800e0cc:	00f42400 	.word	0x00f42400
 800e0d0:	080127c0 	.word	0x080127c0
      }
      else
      {
        frequency = LSI_VALUE;
 800e0d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e0d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e0da:	e316      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800e0dc:	4ba8      	ldr	r3, [pc, #672]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e0e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0e8:	d106      	bne.n	800e0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e0f0:	d102      	bne.n	800e0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800e0f2:	4ba4      	ldr	r3, [pc, #656]	@ (800e384 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e0f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0f6:	e308      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800e0f8:	4ba1      	ldr	r3, [pc, #644]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e0fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0fe:	f003 0302 	and.w	r3, r3, #2
 800e102:	2b02      	cmp	r3, #2
 800e104:	d107      	bne.n	800e116 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800e10c:	d103      	bne.n	800e116 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800e10e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e112:	637b      	str	r3, [r7, #52]	@ 0x34
 800e114:	e2f9      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800e116:	2300      	movs	r3, #0
 800e118:	637b      	str	r3, [r7, #52]	@ 0x34
 800e11a:	e2f6      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800e11c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e120:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800e124:	430b      	orrs	r3, r1
 800e126:	d12d      	bne.n	800e184 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800e128:	4b95      	ldr	r3, [pc, #596]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e12a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e12e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800e132:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800e134:	4b92      	ldr	r3, [pc, #584]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e13c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e140:	d105      	bne.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800e142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e144:	2b00      	cmp	r3, #0
 800e146:	d102      	bne.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800e148:	4b8e      	ldr	r3, [pc, #568]	@ (800e384 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e14a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e14c:	e2dd      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800e14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e154:	d107      	bne.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fe fb4c 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800e160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e162:	637b      	str	r3, [r7, #52]	@ 0x34
 800e164:	e2d1      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800e166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e168:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e16c:	d107      	bne.n	800e17e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e16e:	f107 0318 	add.w	r3, r7, #24
 800e172:	4618      	mov	r0, r3
 800e174:	f7fe fc9a 	bl	800caac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e17c:	e2c5      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800e17e:	2300      	movs	r3, #0
 800e180:	637b      	str	r3, [r7, #52]	@ 0x34
 800e182:	e2c2      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800e184:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e188:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800e18c:	430b      	orrs	r3, r1
 800e18e:	d156      	bne.n	800e23e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800e190:	4b7b      	ldr	r3, [pc, #492]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e196:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e19a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e1a2:	d028      	beq.n	800e1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e1aa:	d845      	bhi.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800e1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1b2:	d013      	beq.n	800e1dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800e1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1ba:	d83d      	bhi.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800e1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d004      	beq.n	800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800e1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1c8:	d004      	beq.n	800e1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800e1ca:	e035      	b.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800e1cc:	f7fd fb2e 	bl	800b82c <HAL_RCC_GetPCLK2Freq>
 800e1d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e1d2:	e29a      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e1d4:	f7fd f9fa 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800e1d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e1da:	e296      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e1dc:	4b68      	ldr	r3, [pc, #416]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e1e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1e8:	d102      	bne.n	800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800e1ea:	4b66      	ldr	r3, [pc, #408]	@ (800e384 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e1ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e1ee:	e28c      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e1f4:	e289      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e1f6:	4b62      	ldr	r3, [pc, #392]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f003 0320 	and.w	r3, r3, #32
 800e1fe:	2b20      	cmp	r3, #32
 800e200:	d117      	bne.n	800e232 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e202:	4b5f      	ldr	r3, [pc, #380]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d005      	beq.n	800e21a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800e20e:	4b5c      	ldr	r3, [pc, #368]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	0e1b      	lsrs	r3, r3, #24
 800e214:	f003 030f 	and.w	r3, r3, #15
 800e218:	e006      	b.n	800e228 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800e21a:	4b59      	ldr	r3, [pc, #356]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e21c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e220:	041b      	lsls	r3, r3, #16
 800e222:	0e1b      	lsrs	r3, r3, #24
 800e224:	f003 030f 	and.w	r3, r3, #15
 800e228:	4a57      	ldr	r2, [pc, #348]	@ (800e388 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e22a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e22e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e230:	e26b      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e232:	2300      	movs	r3, #0
 800e234:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e236:	e268      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e238:	2300      	movs	r3, #0
 800e23a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e23c:	e265      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800e23e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e242:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800e246:	430b      	orrs	r3, r1
 800e248:	d156      	bne.n	800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800e24a:	4b4d      	ldr	r3, [pc, #308]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e24c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e254:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e258:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e25c:	d028      	beq.n	800e2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800e25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e260:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e264:	d845      	bhi.n	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e26c:	d013      	beq.n	800e296 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800e26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e274:	d83d      	bhi.n	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800e276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d004      	beq.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800e27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e27e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e282:	d004      	beq.n	800e28e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800e284:	e035      	b.n	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800e286:	f7fd fabd 	bl	800b804 <HAL_RCC_GetPCLK1Freq>
 800e28a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e28c:	e23d      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e28e:	f7fd f99d 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800e292:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e294:	e239      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e296:	4b3a      	ldr	r3, [pc, #232]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e29e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2a2:	d102      	bne.n	800e2aa <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800e2a4:	4b37      	ldr	r3, [pc, #220]	@ (800e384 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800e2a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e2a8:	e22f      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e2ae:	e22c      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e2b0:	4b33      	ldr	r3, [pc, #204]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f003 0320 	and.w	r3, r3, #32
 800e2b8:	2b20      	cmp	r3, #32
 800e2ba:	d117      	bne.n	800e2ec <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e2bc:	4b30      	ldr	r3, [pc, #192]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d005      	beq.n	800e2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800e2c8:	4b2d      	ldr	r3, [pc, #180]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	0e1b      	lsrs	r3, r3, #24
 800e2ce:	f003 030f 	and.w	r3, r3, #15
 800e2d2:	e006      	b.n	800e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800e2d4:	4b2a      	ldr	r3, [pc, #168]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e2d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e2da:	041b      	lsls	r3, r3, #16
 800e2dc:	0e1b      	lsrs	r3, r3, #24
 800e2de:	f003 030f 	and.w	r3, r3, #15
 800e2e2:	4a29      	ldr	r2, [pc, #164]	@ (800e388 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800e2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e2ea:	e20e      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e2f0:	e20b      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e2f6:	e208      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800e2f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2fc:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800e300:	430b      	orrs	r3, r1
 800e302:	d17c      	bne.n	800e3fe <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800e304:	4b1e      	ldr	r3, [pc, #120]	@ (800e380 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800e306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e30a:	f003 0318 	and.w	r3, r3, #24
 800e30e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800e310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e312:	2b18      	cmp	r3, #24
 800e314:	d870      	bhi.n	800e3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800e316:	a201      	add	r2, pc, #4	@ (adr r2, 800e31c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800e318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e31c:	0800e38d 	.word	0x0800e38d
 800e320:	0800e3f9 	.word	0x0800e3f9
 800e324:	0800e3f9 	.word	0x0800e3f9
 800e328:	0800e3f9 	.word	0x0800e3f9
 800e32c:	0800e3f9 	.word	0x0800e3f9
 800e330:	0800e3f9 	.word	0x0800e3f9
 800e334:	0800e3f9 	.word	0x0800e3f9
 800e338:	0800e3f9 	.word	0x0800e3f9
 800e33c:	0800e395 	.word	0x0800e395
 800e340:	0800e3f9 	.word	0x0800e3f9
 800e344:	0800e3f9 	.word	0x0800e3f9
 800e348:	0800e3f9 	.word	0x0800e3f9
 800e34c:	0800e3f9 	.word	0x0800e3f9
 800e350:	0800e3f9 	.word	0x0800e3f9
 800e354:	0800e3f9 	.word	0x0800e3f9
 800e358:	0800e3f9 	.word	0x0800e3f9
 800e35c:	0800e39d 	.word	0x0800e39d
 800e360:	0800e3f9 	.word	0x0800e3f9
 800e364:	0800e3f9 	.word	0x0800e3f9
 800e368:	0800e3f9 	.word	0x0800e3f9
 800e36c:	0800e3f9 	.word	0x0800e3f9
 800e370:	0800e3f9 	.word	0x0800e3f9
 800e374:	0800e3f9 	.word	0x0800e3f9
 800e378:	0800e3f9 	.word	0x0800e3f9
 800e37c:	0800e3b7 	.word	0x0800e3b7
 800e380:	46020c00 	.word	0x46020c00
 800e384:	00f42400 	.word	0x00f42400
 800e388:	080127c0 	.word	0x080127c0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800e38c:	f7fd fa62 	bl	800b854 <HAL_RCC_GetPCLK3Freq>
 800e390:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e392:	e1ba      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e394:	f7fd f91a 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800e398:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e39a:	e1b6      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e39c:	4b9f      	ldr	r3, [pc, #636]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e3a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3a8:	d102      	bne.n	800e3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800e3aa:	4b9d      	ldr	r3, [pc, #628]	@ (800e620 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e3ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e3ae:	e1ac      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3b4:	e1a9      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e3b6:	4b99      	ldr	r3, [pc, #612]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f003 0320 	and.w	r3, r3, #32
 800e3be:	2b20      	cmp	r3, #32
 800e3c0:	d117      	bne.n	800e3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e3c2:	4b96      	ldr	r3, [pc, #600]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d005      	beq.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800e3ce:	4b93      	ldr	r3, [pc, #588]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	0e1b      	lsrs	r3, r3, #24
 800e3d4:	f003 030f 	and.w	r3, r3, #15
 800e3d8:	e006      	b.n	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800e3da:	4b90      	ldr	r3, [pc, #576]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e3dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e3e0:	041b      	lsls	r3, r3, #16
 800e3e2:	0e1b      	lsrs	r3, r3, #24
 800e3e4:	f003 030f 	and.w	r3, r3, #15
 800e3e8:	4a8e      	ldr	r2, [pc, #568]	@ (800e624 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e3f0:	e18b      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3f6:	e188      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3fc:	e185      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800e3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e402:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800e406:	430b      	orrs	r3, r1
 800e408:	d155      	bne.n	800e4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800e40a:	4b84      	ldr	r3, [pc, #528]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e40c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e410:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e414:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e418:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e41c:	d013      	beq.n	800e446 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800e41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e420:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e424:	d844      	bhi.n	800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e42c:	d013      	beq.n	800e456 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e430:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e434:	d83c      	bhi.n	800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800e436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d014      	beq.n	800e466 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800e43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e442:	d014      	beq.n	800e46e <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800e444:	e034      	b.n	800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e446:	f107 0318 	add.w	r3, r7, #24
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe fb2e 	bl	800caac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e454:	e159      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fe f9cc 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e464:	e151      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e466:	f7fd f8b1 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800e46a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e46c:	e14d      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800e46e:	4b6b      	ldr	r3, [pc, #428]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f003 0320 	and.w	r3, r3, #32
 800e476:	2b20      	cmp	r3, #32
 800e478:	d117      	bne.n	800e4aa <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800e47a:	4b68      	ldr	r3, [pc, #416]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e482:	2b00      	cmp	r3, #0
 800e484:	d005      	beq.n	800e492 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800e486:	4b65      	ldr	r3, [pc, #404]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	0e1b      	lsrs	r3, r3, #24
 800e48c:	f003 030f 	and.w	r3, r3, #15
 800e490:	e006      	b.n	800e4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800e492:	4b62      	ldr	r3, [pc, #392]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e494:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e498:	041b      	lsls	r3, r3, #16
 800e49a:	0e1b      	lsrs	r3, r3, #24
 800e49c:	f003 030f 	and.w	r3, r3, #15
 800e4a0:	4a60      	ldr	r2, [pc, #384]	@ (800e624 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800e4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800e4a8:	e12f      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4ae:	e12c      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e4b4:	e129      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800e4b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4ba:	1e59      	subs	r1, r3, #1
 800e4bc:	ea52 0301 	orrs.w	r3, r2, r1
 800e4c0:	d13c      	bne.n	800e53c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800e4c2:	4b56      	ldr	r3, [pc, #344]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e4c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e4c8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800e4cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e4d4:	d027      	beq.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e4dc:	d82b      	bhi.n	800e536 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e4e4:	d017      	beq.n	800e516 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e4ec:	d823      	bhi.n	800e536 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d004      	beq.n	800e4fe <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800e4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e4fa:	d004      	beq.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800e4fc:	e01b      	b.n	800e536 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800e4fe:	f7fd f865 	bl	800b5cc <HAL_RCC_GetSysClockFreq>
 800e502:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e504:	e101      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fe f974 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800e510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e512:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e514:	e0f9      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e516:	f107 0318 	add.w	r3, r7, #24
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fe fac6 	bl	800caac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e524:	e0f1      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e526:	f107 030c 	add.w	r3, r7, #12
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fe fc18 	bl	800cd60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e534:	e0e9      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e536:	2300      	movs	r3, #0
 800e538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e53a:	e0e6      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800e53c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e540:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800e544:	430b      	orrs	r3, r1
 800e546:	d131      	bne.n	800e5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800e548:	4b34      	ldr	r3, [pc, #208]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e54a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e54e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e552:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800e554:	4b31      	ldr	r3, [pc, #196]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e55a:	f003 0302 	and.w	r3, r3, #2
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d106      	bne.n	800e570 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800e562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e564:	2b00      	cmp	r3, #0
 800e566:	d103      	bne.n	800e570 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800e568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e56c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e56e:	e0cc      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800e570:	4b2a      	ldr	r3, [pc, #168]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e576:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e57a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e57e:	d112      	bne.n	800e5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800e580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e582:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e586:	d10e      	bne.n	800e5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e588:	4b24      	ldr	r3, [pc, #144]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e58a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e58e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e596:	d102      	bne.n	800e59e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800e598:	23fa      	movs	r3, #250	@ 0xfa
 800e59a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e59c:	e0b5      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800e59e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e5a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800e5a4:	e0b1      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5aa:	e0ae      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800e5ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5b0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e5b4:	430b      	orrs	r3, r1
 800e5b6:	d13b      	bne.n	800e630 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800e5b8:	4b18      	ldr	r3, [pc, #96]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e5ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e5be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e5c2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800e5c4:	4b15      	ldr	r3, [pc, #84]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e5cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5d0:	d105      	bne.n	800e5de <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800e5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d102      	bne.n	800e5de <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800e5d8:	4b13      	ldr	r3, [pc, #76]	@ (800e628 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800e5da:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5dc:	e095      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800e5de:	4b0f      	ldr	r3, [pc, #60]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e5e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5ea:	d106      	bne.n	800e5fa <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800e5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5f2:	d102      	bne.n	800e5fa <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800e5f4:	4b0d      	ldr	r3, [pc, #52]	@ (800e62c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800e5f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5f8:	e087      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800e5fa:	4b08      	ldr	r3, [pc, #32]	@ (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e606:	d106      	bne.n	800e616 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800e608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e60e:	d102      	bne.n	800e616 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800e610:	4b03      	ldr	r3, [pc, #12]	@ (800e620 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800e612:	637b      	str	r3, [r7, #52]	@ 0x34
 800e614:	e079      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800e616:	2300      	movs	r3, #0
 800e618:	637b      	str	r3, [r7, #52]	@ 0x34
 800e61a:	e076      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800e61c:	46020c00 	.word	0x46020c00
 800e620:	00f42400 	.word	0x00f42400
 800e624:	080127c0 	.word	0x080127c0
 800e628:	02dc6c00 	.word	0x02dc6c00
 800e62c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800e630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e634:	1e99      	subs	r1, r3, #2
 800e636:	ea52 0301 	orrs.w	r3, r2, r1
 800e63a:	d120      	bne.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800e63c:	4b35      	ldr	r3, [pc, #212]	@ (800e714 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e63e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e646:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800e648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d004      	beq.n	800e658 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800e64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e650:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e654:	d008      	beq.n	800e668 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800e656:	e00f      	b.n	800e678 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e658:	f107 030c 	add.w	r3, r7, #12
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fe fb7f 	bl	800cd60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e666:	e050      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e668:	f107 0318 	add.w	r3, r7, #24
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7fe fa1d 	bl	800caac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800e672:	6a3b      	ldr	r3, [r7, #32]
 800e674:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e676:	e048      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800e678:	2300      	movs	r3, #0
 800e67a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e67c:	e045      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800e67e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e682:	f1a3 0108 	sub.w	r1, r3, #8
 800e686:	ea52 0301 	orrs.w	r3, r2, r1
 800e68a:	d13c      	bne.n	800e706 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800e68c:	4b21      	ldr	r3, [pc, #132]	@ (800e714 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e68e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e692:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e696:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800e698:	4b1e      	ldr	r3, [pc, #120]	@ (800e714 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6a4:	d105      	bne.n	800e6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d102      	bne.n	800e6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800e6ac:	4b1a      	ldr	r3, [pc, #104]	@ (800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800e6ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6b0:	e02b      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800e6b2:	4b18      	ldr	r3, [pc, #96]	@ (800e714 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6be:	d106      	bne.n	800e6ce <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6c6:	d102      	bne.n	800e6ce <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800e6c8:	4b14      	ldr	r3, [pc, #80]	@ (800e71c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800e6ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6cc:	e01d      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6d4:	d107      	bne.n	800e6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e6d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fe f88c 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6e4:	e011      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800e6ec:	d108      	bne.n	800e700 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e6ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe f880 	bl	800c7f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fa:	085b      	lsrs	r3, r3, #1
 800e6fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6fe:	e004      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800e700:	2300      	movs	r3, #0
 800e702:	637b      	str	r3, [r7, #52]	@ 0x34
 800e704:	e001      	b.n	800e70a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800e70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3738      	adds	r7, #56	@ 0x38
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	46020c00 	.word	0x46020c00
 800e718:	00f42400 	.word	0x00f42400
 800e71c:	007a1200 	.word	0x007a1200

0800e720 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800e728:	4b47      	ldr	r3, [pc, #284]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a46      	ldr	r2, [pc, #280]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e72e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e732:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e734:	f7f5 f824 	bl	8003780 <HAL_GetTick>
 800e738:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e73a:	e008      	b.n	800e74e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e73c:	f7f5 f820 	bl	8003780 <HAL_GetTick>
 800e740:	4602      	mov	r2, r0
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	2b02      	cmp	r3, #2
 800e748:	d901      	bls.n	800e74e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e74a:	2303      	movs	r3, #3
 800e74c:	e077      	b.n	800e83e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e74e:	4b3e      	ldr	r3, [pc, #248]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e756:	2b00      	cmp	r3, #0
 800e758:	d1f0      	bne.n	800e73c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800e75a:	4b3b      	ldr	r3, [pc, #236]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e75e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e762:	f023 0303 	bic.w	r3, r3, #3
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	6811      	ldr	r1, [r2, #0]
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	6852      	ldr	r2, [r2, #4]
 800e76e:	3a01      	subs	r2, #1
 800e770:	0212      	lsls	r2, r2, #8
 800e772:	430a      	orrs	r2, r1
 800e774:	4934      	ldr	r1, [pc, #208]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e776:	4313      	orrs	r3, r2
 800e778:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800e77a:	4b33      	ldr	r3, [pc, #204]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e77c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e77e:	4b33      	ldr	r3, [pc, #204]	@ (800e84c <RCCEx_PLL2_Config+0x12c>)
 800e780:	4013      	ands	r3, r2
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	6892      	ldr	r2, [r2, #8]
 800e786:	3a01      	subs	r2, #1
 800e788:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	68d2      	ldr	r2, [r2, #12]
 800e790:	3a01      	subs	r2, #1
 800e792:	0252      	lsls	r2, r2, #9
 800e794:	b292      	uxth	r2, r2
 800e796:	4311      	orrs	r1, r2
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	6912      	ldr	r2, [r2, #16]
 800e79c:	3a01      	subs	r2, #1
 800e79e:	0412      	lsls	r2, r2, #16
 800e7a0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e7a4:	4311      	orrs	r1, r2
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	6952      	ldr	r2, [r2, #20]
 800e7aa:	3a01      	subs	r2, #1
 800e7ac:	0612      	lsls	r2, r2, #24
 800e7ae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e7b2:	430a      	orrs	r2, r1
 800e7b4:	4924      	ldr	r1, [pc, #144]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800e7ba:	4b23      	ldr	r3, [pc, #140]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7be:	f023 020c 	bic.w	r2, r3, #12
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	699b      	ldr	r3, [r3, #24]
 800e7c6:	4920      	ldr	r1, [pc, #128]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800e7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e7ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6a1b      	ldr	r3, [r3, #32]
 800e7d4:	491c      	ldr	r1, [pc, #112]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800e7da:	4b1b      	ldr	r3, [pc, #108]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7de:	4a1a      	ldr	r2, [pc, #104]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e7e0:	f023 0310 	bic.w	r3, r3, #16
 800e7e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e7e6:	4b18      	ldr	r3, [pc, #96]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e7e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e7ee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	69d2      	ldr	r2, [r2, #28]
 800e7f6:	00d2      	lsls	r2, r2, #3
 800e7f8:	4913      	ldr	r1, [pc, #76]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800e7fe:	4b12      	ldr	r3, [pc, #72]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e802:	4a11      	ldr	r2, [pc, #68]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e804:	f043 0310 	orr.w	r3, r3, #16
 800e808:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800e80a:	4b0f      	ldr	r3, [pc, #60]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a0e      	ldr	r2, [pc, #56]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e810:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e814:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e816:	f7f4 ffb3 	bl	8003780 <HAL_GetTick>
 800e81a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e81c:	e008      	b.n	800e830 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e81e:	f7f4 ffaf 	bl	8003780 <HAL_GetTick>
 800e822:	4602      	mov	r2, r0
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	2b02      	cmp	r3, #2
 800e82a:	d901      	bls.n	800e830 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e82c:	2303      	movs	r3, #3
 800e82e:	e006      	b.n	800e83e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e830:	4b05      	ldr	r3, [pc, #20]	@ (800e848 <RCCEx_PLL2_Config+0x128>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d0f0      	beq.n	800e81e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800e83c:	2300      	movs	r3, #0

}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	46020c00 	.word	0x46020c00
 800e84c:	80800000 	.word	0x80800000

0800e850 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800e858:	4b47      	ldr	r3, [pc, #284]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a46      	ldr	r2, [pc, #280]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e85e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e862:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e864:	f7f4 ff8c 	bl	8003780 <HAL_GetTick>
 800e868:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e86a:	e008      	b.n	800e87e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e86c:	f7f4 ff88 	bl	8003780 <HAL_GetTick>
 800e870:	4602      	mov	r2, r0
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	2b02      	cmp	r3, #2
 800e878:	d901      	bls.n	800e87e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800e87a:	2303      	movs	r3, #3
 800e87c:	e077      	b.n	800e96e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e87e:	4b3e      	ldr	r3, [pc, #248]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1f0      	bne.n	800e86c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800e88a:	4b3b      	ldr	r3, [pc, #236]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e88c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e88e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e892:	f023 0303 	bic.w	r3, r3, #3
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	6811      	ldr	r1, [r2, #0]
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	6852      	ldr	r2, [r2, #4]
 800e89e:	3a01      	subs	r2, #1
 800e8a0:	0212      	lsls	r2, r2, #8
 800e8a2:	430a      	orrs	r2, r1
 800e8a4:	4934      	ldr	r1, [pc, #208]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	630b      	str	r3, [r1, #48]	@ 0x30
 800e8aa:	4b33      	ldr	r3, [pc, #204]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e8ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e8ae:	4b33      	ldr	r3, [pc, #204]	@ (800e97c <RCCEx_PLL3_Config+0x12c>)
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	6892      	ldr	r2, [r2, #8]
 800e8b6:	3a01      	subs	r2, #1
 800e8b8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	68d2      	ldr	r2, [r2, #12]
 800e8c0:	3a01      	subs	r2, #1
 800e8c2:	0252      	lsls	r2, r2, #9
 800e8c4:	b292      	uxth	r2, r2
 800e8c6:	4311      	orrs	r1, r2
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	6912      	ldr	r2, [r2, #16]
 800e8cc:	3a01      	subs	r2, #1
 800e8ce:	0412      	lsls	r2, r2, #16
 800e8d0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800e8d4:	4311      	orrs	r1, r2
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	6952      	ldr	r2, [r2, #20]
 800e8da:	3a01      	subs	r2, #1
 800e8dc:	0612      	lsls	r2, r2, #24
 800e8de:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800e8e2:	430a      	orrs	r2, r1
 800e8e4:	4924      	ldr	r1, [pc, #144]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800e8ea:	4b23      	ldr	r3, [pc, #140]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e8ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8ee:	f023 020c 	bic.w	r2, r3, #12
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	4920      	ldr	r1, [pc, #128]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800e8fc:	4b1e      	ldr	r3, [pc, #120]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e8fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6a1b      	ldr	r3, [r3, #32]
 800e904:	491c      	ldr	r1, [pc, #112]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e906:	4313      	orrs	r3, r2
 800e908:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800e90a:	4b1b      	ldr	r3, [pc, #108]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e90e:	4a1a      	ldr	r2, [pc, #104]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e910:	f023 0310 	bic.w	r3, r3, #16
 800e914:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e916:	4b18      	ldr	r3, [pc, #96]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e91a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e91e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	69d2      	ldr	r2, [r2, #28]
 800e926:	00d2      	lsls	r2, r2, #3
 800e928:	4913      	ldr	r1, [pc, #76]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e92a:	4313      	orrs	r3, r2
 800e92c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800e92e:	4b12      	ldr	r3, [pc, #72]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e932:	4a11      	ldr	r2, [pc, #68]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e934:	f043 0310 	orr.w	r3, r3, #16
 800e938:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800e93a:	4b0f      	ldr	r3, [pc, #60]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a0e      	ldr	r2, [pc, #56]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e944:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e946:	f7f4 ff1b 	bl	8003780 <HAL_GetTick>
 800e94a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e94c:	e008      	b.n	800e960 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e94e:	f7f4 ff17 	bl	8003780 <HAL_GetTick>
 800e952:	4602      	mov	r2, r0
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	1ad3      	subs	r3, r2, r3
 800e958:	2b02      	cmp	r3, #2
 800e95a:	d901      	bls.n	800e960 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800e95c:	2303      	movs	r3, #3
 800e95e:	e006      	b.n	800e96e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e960:	4b05      	ldr	r3, [pc, #20]	@ (800e978 <RCCEx_PLL3_Config+0x128>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d0f0      	beq.n	800e94e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	46020c00 	.word	0x46020c00
 800e97c:	80800000 	.word	0x80800000

0800e980 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e988:	2301      	movs	r3, #1
 800e98a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d071      	beq.n	800ea76 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e998:	b2db      	uxtb	r3, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d106      	bne.n	800e9ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f7f4 f990 	bl	8002ccc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2202      	movs	r2, #2
 800e9b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e9b4:	4b32      	ldr	r3, [pc, #200]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	f003 0310 	and.w	r3, r3, #16
 800e9bc:	2b10      	cmp	r3, #16
 800e9be:	d051      	beq.n	800ea64 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e9c0:	4b2f      	ldr	r3, [pc, #188]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800e9c2:	22ca      	movs	r2, #202	@ 0xca
 800e9c4:	625a      	str	r2, [r3, #36]	@ 0x24
 800e9c6:	4b2e      	ldr	r3, [pc, #184]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800e9c8:	2253      	movs	r2, #83	@ 0x53
 800e9ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 f88b 	bl	800eae8 <RTC_EnterInitMode>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800e9d6:	7bfb      	ldrb	r3, [r7, #15]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d13f      	bne.n	800ea5c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800e9dc:	4b28      	ldr	r3, [pc, #160]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	4a27      	ldr	r2, [pc, #156]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800e9e2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800e9e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9ea:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800e9ec:	4b24      	ldr	r3, [pc, #144]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800e9ee:	699a      	ldr	r2, [r3, #24]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6859      	ldr	r1, [r3, #4]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	691b      	ldr	r3, [r3, #16]
 800e9f8:	4319      	orrs	r1, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	430b      	orrs	r3, r1
 800ea00:	491f      	ldr	r1, [pc, #124]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800ea02:	4313      	orrs	r3, r2
 800ea04:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	68da      	ldr	r2, [r3, #12]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	041b      	lsls	r3, r3, #16
 800ea10:	491b      	ldr	r1, [pc, #108]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800ea12:	4313      	orrs	r3, r2
 800ea14:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800ea16:	4b1a      	ldr	r3, [pc, #104]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea26:	430b      	orrs	r3, r1
 800ea28:	4915      	ldr	r1, [pc, #84]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f896 	bl	800eb60 <RTC_ExitInitMode>
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800ea38:	7bfb      	ldrb	r3, [r7, #15]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10e      	bne.n	800ea5c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800ea3e:	4b10      	ldr	r3, [pc, #64]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800ea40:	699b      	ldr	r3, [r3, #24]
 800ea42:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a19      	ldr	r1, [r3, #32]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	69db      	ldr	r3, [r3, #28]
 800ea4e:	4319      	orrs	r1, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	695b      	ldr	r3, [r3, #20]
 800ea54:	430b      	orrs	r3, r1
 800ea56:	490a      	ldr	r1, [pc, #40]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ea5c:	4b08      	ldr	r3, [pc, #32]	@ (800ea80 <HAL_RTC_Init+0x100>)
 800ea5e:	22ff      	movs	r2, #255	@ 0xff
 800ea60:	625a      	str	r2, [r3, #36]	@ 0x24
 800ea62:	e001      	b.n	800ea68 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ea68:	7bfb      	ldrb	r3, [r7, #15]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d103      	bne.n	800ea76 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	46007800 	.word	0x46007800

0800ea84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800ea8c:	4b15      	ldr	r3, [pc, #84]	@ (800eae4 <HAL_RTC_WaitForSynchro+0x60>)
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	4a14      	ldr	r2, [pc, #80]	@ (800eae4 <HAL_RTC_WaitForSynchro+0x60>)
 800ea92:	f023 0320 	bic.w	r3, r3, #32
 800ea96:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800ea98:	f7f4 fe72 	bl	8003780 <HAL_GetTick>
 800ea9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ea9e:	e013      	b.n	800eac8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800eaa0:	f7f4 fe6e 	bl	8003780 <HAL_GetTick>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	1ad3      	subs	r3, r2, r3
 800eaaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eaae:	d90b      	bls.n	800eac8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800eab0:	4b0c      	ldr	r3, [pc, #48]	@ (800eae4 <HAL_RTC_WaitForSynchro+0x60>)
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	f003 0320 	and.w	r3, r3, #32
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d10c      	bne.n	800ead6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2203      	movs	r2, #3
 800eac0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800eac4:	2303      	movs	r3, #3
 800eac6:	e008      	b.n	800eada <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800eac8:	4b06      	ldr	r3, [pc, #24]	@ (800eae4 <HAL_RTC_WaitForSynchro+0x60>)
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	f003 0320 	and.w	r3, r3, #32
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d0e5      	beq.n	800eaa0 <HAL_RTC_WaitForSynchro+0x1c>
 800ead4:	e000      	b.n	800ead8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800ead6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800ead8:	2300      	movs	r3, #0
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	46007800 	.word	0x46007800

0800eae8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800eaf4:	4b19      	ldr	r3, [pc, #100]	@ (800eb5c <RTC_EnterInitMode+0x74>)
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d128      	bne.n	800eb52 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800eb00:	4b16      	ldr	r3, [pc, #88]	@ (800eb5c <RTC_EnterInitMode+0x74>)
 800eb02:	68db      	ldr	r3, [r3, #12]
 800eb04:	4a15      	ldr	r2, [pc, #84]	@ (800eb5c <RTC_EnterInitMode+0x74>)
 800eb06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb0a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800eb0c:	f7f4 fe38 	bl	8003780 <HAL_GetTick>
 800eb10:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800eb12:	e013      	b.n	800eb3c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800eb14:	f7f4 fe34 	bl	8003780 <HAL_GetTick>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	1ad3      	subs	r3, r2, r3
 800eb1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eb22:	d90b      	bls.n	800eb3c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800eb24:	4b0d      	ldr	r3, [pc, #52]	@ (800eb5c <RTC_EnterInitMode+0x74>)
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10f      	bne.n	800eb50 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800eb30:	2303      	movs	r3, #3
 800eb32:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2203      	movs	r2, #3
 800eb38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800eb3c:	4b07      	ldr	r3, [pc, #28]	@ (800eb5c <RTC_EnterInitMode+0x74>)
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d104      	bne.n	800eb52 <RTC_EnterInitMode+0x6a>
 800eb48:	7bfb      	ldrb	r3, [r7, #15]
 800eb4a:	2b03      	cmp	r3, #3
 800eb4c:	d1e2      	bne.n	800eb14 <RTC_EnterInitMode+0x2c>
 800eb4e:	e000      	b.n	800eb52 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800eb50:	bf00      	nop
        }
      }
    }
  }

  return status;
 800eb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	46007800 	.word	0x46007800

0800eb60 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800eb6c:	4b1a      	ldr	r3, [pc, #104]	@ (800ebd8 <RTC_ExitInitMode+0x78>)
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	4a19      	ldr	r2, [pc, #100]	@ (800ebd8 <RTC_ExitInitMode+0x78>)
 800eb72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb76:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800eb78:	4b17      	ldr	r3, [pc, #92]	@ (800ebd8 <RTC_ExitInitMode+0x78>)
 800eb7a:	699b      	ldr	r3, [r3, #24]
 800eb7c:	f003 0320 	and.w	r3, r3, #32
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d10c      	bne.n	800eb9e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7ff ff7d 	bl	800ea84 <HAL_RTC_WaitForSynchro>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d01e      	beq.n	800ebce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2203      	movs	r2, #3
 800eb94:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800eb98:	2303      	movs	r3, #3
 800eb9a:	73fb      	strb	r3, [r7, #15]
 800eb9c:	e017      	b.n	800ebce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800eb9e:	4b0e      	ldr	r3, [pc, #56]	@ (800ebd8 <RTC_ExitInitMode+0x78>)
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	4a0d      	ldr	r2, [pc, #52]	@ (800ebd8 <RTC_ExitInitMode+0x78>)
 800eba4:	f023 0320 	bic.w	r3, r3, #32
 800eba8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f7ff ff6a 	bl	800ea84 <HAL_RTC_WaitForSynchro>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d005      	beq.n	800ebc2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2203      	movs	r2, #3
 800ebba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ebc2:	4b05      	ldr	r3, [pc, #20]	@ (800ebd8 <RTC_ExitInitMode+0x78>)
 800ebc4:	699b      	ldr	r3, [r3, #24]
 800ebc6:	4a04      	ldr	r2, [pc, #16]	@ (800ebd8 <RTC_ExitInitMode+0x78>)
 800ebc8:	f043 0320 	orr.w	r3, r3, #32
 800ebcc:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ebce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	46007800 	.word	0x46007800

0800ebdc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	4910      	ldr	r1, [pc, #64]	@ (800ec30 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	689a      	ldr	r2, [r3, #8]
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	431a      	orrs	r2, r3
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	699b      	ldr	r3, [r3, #24]
 800ec02:	490c      	ldr	r1, [pc, #48]	@ (800ec34 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ec04:	4313      	orrs	r3, r2
 800ec06:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800ec08:	4b0a      	ldr	r3, [pc, #40]	@ (800ec34 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ec0a:	6a1b      	ldr	r3, [r3, #32]
 800ec0c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	6919      	ldr	r1, [r3, #16]
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	695b      	ldr	r3, [r3, #20]
 800ec18:	041b      	lsls	r3, r3, #16
 800ec1a:	430b      	orrs	r3, r1
 800ec1c:	4905      	ldr	r1, [pc, #20]	@ (800ec34 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr
 800ec30:	46007800 	.word	0x46007800
 800ec34:	46007c00 	.word	0x46007c00

0800ec38 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	d904      	bls.n	800ec56 <HAL_SAI_InitProtocol+0x1e>
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	3b03      	subs	r3, #3
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d812      	bhi.n	800ec7a <HAL_SAI_InitProtocol+0x42>
 800ec54:	e008      	b.n	800ec68 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	68b9      	ldr	r1, [r7, #8]
 800ec5c:	68f8      	ldr	r0, [r7, #12]
 800ec5e:	f000 fc01 	bl	800f464 <SAI_InitI2S>
 800ec62:	4603      	mov	r3, r0
 800ec64:	75fb      	strb	r3, [r7, #23]
      break;
 800ec66:	e00b      	b.n	800ec80 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	68b9      	ldr	r1, [r7, #8]
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f000 fcaa 	bl	800f5c8 <SAI_InitPCM>
 800ec74:	4603      	mov	r3, r0
 800ec76:	75fb      	strb	r3, [r7, #23]
      break;
 800ec78:	e002      	b.n	800ec80 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ec7e:	bf00      	nop
  }

  if (status == HAL_OK)
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d104      	bne.n	800ec90 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	f000 f808 	bl	800ec9c <HAL_SAI_Init>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ec90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3718      	adds	r7, #24
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
	...

0800ec9c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b08a      	sub	sp, #40	@ 0x28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d101      	bne.n	800ecae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e1ce      	b.n	800f04c <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d10e      	bne.n	800ecd6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a83      	ldr	r2, [pc, #524]	@ (800eecc <HAL_SAI_Init+0x230>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d107      	bne.n	800ecd2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d103      	bne.n	800ecd2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e1ba      	b.n	800f04c <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d106      	bne.n	800ecf0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7f4 f9c0 	bl	8003070 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f000 fd23 	bl	800f73c <SAI_Disable>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d001      	beq.n	800ed00 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e1a5      	b.n	800f04c <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2202      	movs	r2, #2
 800ed04:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	d00c      	beq.n	800ed2a <HAL_SAI_Init+0x8e>
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d80d      	bhi.n	800ed30 <HAL_SAI_Init+0x94>
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <HAL_SAI_Init+0x82>
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d003      	beq.n	800ed24 <HAL_SAI_Init+0x88>
 800ed1c:	e008      	b.n	800ed30 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ed22:	e008      	b.n	800ed36 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ed24:	2310      	movs	r3, #16
 800ed26:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ed28:	e005      	b.n	800ed36 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ed2a:	2320      	movs	r3, #32
 800ed2c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ed2e:	e002      	b.n	800ed36 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800ed30:	2300      	movs	r3, #0
 800ed32:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ed34:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	2b03      	cmp	r3, #3
 800ed3c:	d81d      	bhi.n	800ed7a <HAL_SAI_Init+0xde>
 800ed3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed44 <HAL_SAI_Init+0xa8>)
 800ed40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed44:	0800ed55 	.word	0x0800ed55
 800ed48:	0800ed5b 	.word	0x0800ed5b
 800ed4c:	0800ed63 	.word	0x0800ed63
 800ed50:	0800ed6b 	.word	0x0800ed6b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ed54:	2300      	movs	r3, #0
 800ed56:	61fb      	str	r3, [r7, #28]
      break;
 800ed58:	e012      	b.n	800ed80 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ed5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed5e:	61fb      	str	r3, [r7, #28]
      break;
 800ed60:	e00e      	b.n	800ed80 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ed62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ed66:	61fb      	str	r3, [r7, #28]
      break;
 800ed68:	e00a      	b.n	800ed80 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ed6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ed6e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ed70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed72:	f043 0301 	orr.w	r3, r3, #1
 800ed76:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800ed78:	e002      	b.n	800ed80 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	61fb      	str	r3, [r7, #28]
      break;
 800ed7e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a51      	ldr	r2, [pc, #324]	@ (800eecc <HAL_SAI_Init+0x230>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d004      	beq.n	800ed94 <HAL_SAI_Init+0xf8>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a50      	ldr	r2, [pc, #320]	@ (800eed0 <HAL_SAI_Init+0x234>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d103      	bne.n	800ed9c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800ed94:	4a4f      	ldr	r2, [pc, #316]	@ (800eed4 <HAL_SAI_Init+0x238>)
 800ed96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed98:	6013      	str	r3, [r2, #0]
 800ed9a:	e002      	b.n	800eda2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ed9c:	4a4e      	ldr	r2, [pc, #312]	@ (800eed8 <HAL_SAI_Init+0x23c>)
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda0:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6a1b      	ldr	r3, [r3, #32]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d077      	beq.n	800ee9a <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4a47      	ldr	r2, [pc, #284]	@ (800eecc <HAL_SAI_Init+0x230>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d004      	beq.n	800edbe <HAL_SAI_Init+0x122>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a45      	ldr	r2, [pc, #276]	@ (800eed0 <HAL_SAI_Init+0x234>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d107      	bne.n	800edce <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800edbe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800edc2:	f04f 0100 	mov.w	r1, #0
 800edc6:	f7fe f925 	bl	800d014 <HAL_RCCEx_GetPeriphCLKFreq>
 800edca:	61b8      	str	r0, [r7, #24]
 800edcc:	e006      	b.n	800eddc <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800edce:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800edd2:	f04f 0100 	mov.w	r1, #0
 800edd6:	f7fe f91d 	bl	800d014 <HAL_RCCEx_GetPeriphCLKFreq>
 800edda:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	699b      	ldr	r3, [r3, #24]
 800ede0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ede4:	d120      	bne.n	800ee28 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edea:	2b04      	cmp	r3, #4
 800edec:	d102      	bne.n	800edf4 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800edee:	2340      	movs	r3, #64	@ 0x40
 800edf0:	613b      	str	r3, [r7, #16]
 800edf2:	e00a      	b.n	800ee0a <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edf8:	2b08      	cmp	r3, #8
 800edfa:	d103      	bne.n	800ee04 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800edfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee00:	613b      	str	r3, [r7, #16]
 800ee02:	e002      	b.n	800ee0a <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee08:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800ee0a:	69ba      	ldr	r2, [r7, #24]
 800ee0c:	4613      	mov	r3, r2
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	4413      	add	r3, r2
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	4619      	mov	r1, r3
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6a1b      	ldr	r3, [r3, #32]
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	fb02 f303 	mul.w	r3, r2, r3
 800ee20:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee24:	617b      	str	r3, [r7, #20]
 800ee26:	e017      	b.n	800ee58 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ee30:	d101      	bne.n	800ee36 <HAL_SAI_Init+0x19a>
 800ee32:	2302      	movs	r3, #2
 800ee34:	e000      	b.n	800ee38 <HAL_SAI_Init+0x19c>
 800ee36:	2301      	movs	r3, #1
 800ee38:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800ee3a:	69ba      	ldr	r2, [r7, #24]
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	4413      	add	r3, r2
 800ee42:	005b      	lsls	r3, r3, #1
 800ee44:	4619      	mov	r1, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	fb02 f303 	mul.w	r3, r2, r3
 800ee50:	021b      	lsls	r3, r3, #8
 800ee52:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee56:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	4a20      	ldr	r2, [pc, #128]	@ (800eedc <HAL_SAI_Init+0x240>)
 800ee5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ee60:	08da      	lsrs	r2, r3, #3
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800ee66:	6979      	ldr	r1, [r7, #20]
 800ee68:	4b1c      	ldr	r3, [pc, #112]	@ (800eedc <HAL_SAI_Init+0x240>)
 800ee6a:	fba3 2301 	umull	r2, r3, r3, r1
 800ee6e:	08da      	lsrs	r2, r3, #3
 800ee70:	4613      	mov	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4413      	add	r3, r2
 800ee76:	005b      	lsls	r3, r3, #1
 800ee78:	1aca      	subs	r2, r1, r3
 800ee7a:	2a08      	cmp	r2, #8
 800ee7c:	d904      	bls.n	800ee88 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee82:	1c5a      	adds	r2, r3, #1
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee8c:	2b04      	cmp	r3, #4
 800ee8e:	d104      	bne.n	800ee9a <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee94:	085a      	lsrs	r2, r3, #1
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d003      	beq.n	800eeaa <HAL_SAI_Init+0x20e>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d109      	bne.n	800eebe <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d101      	bne.n	800eeb6 <HAL_SAI_Init+0x21a>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	e001      	b.n	800eeba <HAL_SAI_Init+0x21e>
 800eeb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eeba:	623b      	str	r3, [r7, #32]
 800eebc:	e012      	b.n	800eee4 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d10c      	bne.n	800eee0 <HAL_SAI_Init+0x244>
 800eec6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eeca:	e00a      	b.n	800eee2 <HAL_SAI_Init+0x246>
 800eecc:	40015404 	.word	0x40015404
 800eed0:	40015424 	.word	0x40015424
 800eed4:	40015400 	.word	0x40015400
 800eed8:	40015800 	.word	0x40015800
 800eedc:	cccccccd 	.word	0xcccccccd
 800eee0:	2300      	movs	r3, #0
 800eee2:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6819      	ldr	r1, [r3, #0]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	4b59      	ldr	r3, [pc, #356]	@ (800f054 <HAL_SAI_Init+0x3b8>)
 800eef0:	400b      	ands	r3, r1
 800eef2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	6819      	ldr	r1, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	685a      	ldr	r2, [r3, #4]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef02:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ef08:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef0e:	431a      	orrs	r2, r3
 800ef10:	6a3b      	ldr	r3, [r7, #32]
 800ef12:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800ef1c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	695b      	ldr	r3, [r3, #20]
 800ef22:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ef28:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef2e:	051b      	lsls	r3, r3, #20
 800ef30:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ef36:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	691b      	ldr	r3, [r3, #16]
 800ef3c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	430a      	orrs	r2, r1
 800ef44:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	6812      	ldr	r2, [r2, #0]
 800ef50:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ef54:	f023 030f 	bic.w	r3, r3, #15
 800ef58:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	6859      	ldr	r1, [r3, #4]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	69da      	ldr	r2, [r3, #28]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef68:	431a      	orrs	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef6e:	431a      	orrs	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	430a      	orrs	r2, r1
 800ef76:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6899      	ldr	r1, [r3, #8]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	4b35      	ldr	r3, [pc, #212]	@ (800f058 <HAL_SAI_Init+0x3bc>)
 800ef84:	400b      	ands	r3, r1
 800ef86:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6899      	ldr	r1, [r3, #8]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef92:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ef98:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800ef9e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800efa4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efaa:	3b01      	subs	r3, #1
 800efac:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800efae:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	430a      	orrs	r2, r1
 800efb6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68d9      	ldr	r1, [r3, #12]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800efc6:	400b      	ands	r3, r1
 800efc8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	68d9      	ldr	r1, [r3, #12]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efd8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efde:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800efe0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efe6:	3b01      	subs	r3, #1
 800efe8:	021b      	lsls	r3, r3, #8
 800efea:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	430a      	orrs	r2, r1
 800eff2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a18      	ldr	r2, [pc, #96]	@ (800f05c <HAL_SAI_Init+0x3c0>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d119      	bne.n	800f032 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800effe:	4b18      	ldr	r3, [pc, #96]	@ (800f060 <HAL_SAI_Init+0x3c4>)
 800f000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f002:	4a17      	ldr	r2, [pc, #92]	@ (800f060 <HAL_SAI_Init+0x3c4>)
 800f004:	f023 0301 	bic.w	r3, r3, #1
 800f008:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f010:	2b01      	cmp	r3, #1
 800f012:	d10e      	bne.n	800f032 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f01c:	3b01      	subs	r3, #1
 800f01e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f020:	490f      	ldr	r1, [pc, #60]	@ (800f060 <HAL_SAI_Init+0x3c4>)
 800f022:	4313      	orrs	r3, r2
 800f024:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800f026:	4b0e      	ldr	r3, [pc, #56]	@ (800f060 <HAL_SAI_Init+0x3c4>)
 800f028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f02a:	4a0d      	ldr	r2, [pc, #52]	@ (800f060 <HAL_SAI_Init+0x3c4>)
 800f02c:	f043 0301 	orr.w	r3, r3, #1
 800f030:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2201      	movs	r2, #1
 800f03e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3728      	adds	r7, #40	@ 0x28
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	f005c010 	.word	0xf005c010
 800f058:	fff88000 	.word	0xfff88000
 800f05c:	40015404 	.word	0x40015404
 800f060:	40015400 	.word	0x40015400

0800f064 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b088      	sub	sp, #32
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	4613      	mov	r3, r2
 800f070:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f072:	f7f4 fb85 	bl	8003780 <HAL_GetTick>
 800f076:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d002      	beq.n	800f084 <HAL_SAI_Transmit_DMA+0x20>
 800f07e:	88fb      	ldrh	r3, [r7, #6]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d101      	bne.n	800f088 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	e0e4      	b.n	800f252 <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	2b01      	cmp	r3, #1
 800f092:	f040 80dd 	bne.w	800f250 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d101      	bne.n	800f0a4 <HAL_SAI_Transmit_DMA+0x40>
 800f0a0:	2302      	movs	r3, #2
 800f0a2:	e0d6      	b.n	800f252 <HAL_SAI_Transmit_DMA+0x1ee>
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	88fa      	ldrh	r2, [r7, #6]
 800f0b6:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	88fa      	ldrh	r2, [r7, #6]
 800f0be:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2212      	movs	r2, #18
 800f0ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0d8:	4a60      	ldr	r2, [pc, #384]	@ (800f25c <HAL_SAI_Transmit_DMA+0x1f8>)
 800f0da:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0e2:	4a5f      	ldr	r2, [pc, #380]	@ (800f260 <HAL_SAI_Transmit_DMA+0x1fc>)
 800f0e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0ec:	4a5d      	ldr	r2, [pc, #372]	@ (800f264 <HAL_SAI_Transmit_DMA+0x200>)
 800f0ee:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0fe:	2b40      	cmp	r3, #64	@ 0x40
 800f100:	d106      	bne.n	800f110 <HAL_SAI_Transmit_DMA+0xac>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f106:	2b00      	cmp	r3, #0
 800f108:	d102      	bne.n	800f110 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800f10a:	88fb      	ldrh	r3, [r7, #6]
 800f10c:	61bb      	str	r3, [r7, #24]
 800f10e:	e00a      	b.n	800f126 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f114:	2b80      	cmp	r3, #128	@ 0x80
 800f116:	d803      	bhi.n	800f120 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800f118:	88fb      	ldrh	r3, [r7, #6]
 800f11a:	005b      	lsls	r3, r3, #1
 800f11c:	61bb      	str	r3, [r7, #24]
 800f11e:	e002      	b.n	800f126 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800f120:	88fb      	ldrh	r3, [r7, #6]
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f12c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f12e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f132:	2b00      	cmp	r3, #0
 800f134:	d02d      	beq.n	800f192 <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f13c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d021      	beq.n	800f186 <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	69ba      	ldr	r2, [r7, #24]
 800f14e:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f15a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f103 021c 	add.w	r2, r3, #28
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f16e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7f7 ffa2 	bl	80070c4 <HAL_DMAEx_List_Start_IT>
 800f180:	4603      	mov	r3, r0
 800f182:	77fb      	strb	r3, [r7, #31]
 800f184:	e014      	b.n	800f1b0 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2200      	movs	r2, #0
 800f18a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800f18e:	2301      	movs	r3, #1
 800f190:	e05f      	b.n	800f252 <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f19c:	4619      	mov	r1, r3
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	331c      	adds	r3, #28
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	f7f6 fffa 	bl	80061a0 <HAL_DMA_Start_IT>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800f1b0:	7ffb      	ldrb	r3, [r7, #31]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d005      	beq.n	800f1c2 <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e047      	b.n	800f252 <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	68f8      	ldr	r0, [r7, #12]
 800f1c6:	f000 fa81 	bl	800f6cc <SAI_InterruptFlag>
 800f1ca:	4601      	mov	r1, r0
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	691a      	ldr	r2, [r3, #16]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	430a      	orrs	r2, r1
 800f1d8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f1e8:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f1ea:	e015      	b.n	800f218 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f1ec:	f7f4 fac8 	bl	8003780 <HAL_GetTick>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	1ad3      	subs	r3, r2, r3
 800f1f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f1fa:	d90d      	bls.n	800f218 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f202:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800f214:	2303      	movs	r3, #3
 800f216:	e01c      	b.n	800f252 <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	695b      	ldr	r3, [r3, #20]
 800f21e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f222:	2b00      	cmp	r3, #0
 800f224:	d0e2      	beq.n	800f1ec <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f230:	2b00      	cmp	r3, #0
 800f232:	d107      	bne.n	800f244 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f242:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2200      	movs	r2, #0
 800f248:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	e000      	b.n	800f252 <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800f250:	2302      	movs	r3, #2
  }
}
 800f252:	4618      	mov	r0, r3
 800f254:	3720      	adds	r7, #32
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	0800f80f 	.word	0x0800f80f
 800f260:	0800f7b1 	.word	0x0800f7b1
 800f264:	0800f8a5 	.word	0x0800f8a5

0800f268 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	4613      	mov	r3, r2
 800f274:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d002      	beq.n	800f282 <HAL_SAI_Receive_DMA+0x1a>
 800f27c:	88fb      	ldrh	r3, [r7, #6]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d101      	bne.n	800f286 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f282:	2301      	movs	r3, #1
 800f284:	e0c6      	b.n	800f414 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	2b01      	cmp	r3, #1
 800f290:	f040 80bf 	bne.w	800f412 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d101      	bne.n	800f2a2 <HAL_SAI_Receive_DMA+0x3a>
 800f29e:	2302      	movs	r3, #2
 800f2a0:	e0b8      	b.n	800f414 <HAL_SAI_Receive_DMA+0x1ac>
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	88fa      	ldrh	r2, [r7, #6]
 800f2b4:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	88fa      	ldrh	r2, [r7, #6]
 800f2bc:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2222      	movs	r2, #34	@ 0x22
 800f2cc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2d6:	4a51      	ldr	r2, [pc, #324]	@ (800f41c <HAL_SAI_Receive_DMA+0x1b4>)
 800f2d8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2e0:	4a4f      	ldr	r2, [pc, #316]	@ (800f420 <HAL_SAI_Receive_DMA+0x1b8>)
 800f2e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2ea:	4a4e      	ldr	r2, [pc, #312]	@ (800f424 <HAL_SAI_Receive_DMA+0x1bc>)
 800f2ec:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f2fc:	2b40      	cmp	r3, #64	@ 0x40
 800f2fe:	d106      	bne.n	800f30e <HAL_SAI_Receive_DMA+0xa6>
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f304:	2b00      	cmp	r3, #0
 800f306:	d102      	bne.n	800f30e <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800f308:	88fb      	ldrh	r3, [r7, #6]
 800f30a:	613b      	str	r3, [r7, #16]
 800f30c:	e00a      	b.n	800f324 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f312:	2b80      	cmp	r3, #128	@ 0x80
 800f314:	d803      	bhi.n	800f31e <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800f316:	88fb      	ldrh	r3, [r7, #6]
 800f318:	005b      	lsls	r3, r3, #1
 800f31a:	613b      	str	r3, [r7, #16]
 800f31c:	e002      	b.n	800f324 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800f31e:	88fb      	ldrh	r3, [r7, #6]
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f32a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f32c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f330:	2b00      	cmp	r3, #0
 800f332:	d02d      	beq.n	800f390 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f33a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d021      	beq.n	800f384 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	693a      	ldr	r2, [r7, #16]
 800f34c:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f103 021c 	add.w	r2, r3, #28
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f35c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f36c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f378:	4618      	mov	r0, r3
 800f37a:	f7f7 fea3 	bl	80070c4 <HAL_DMAEx_List_Start_IT>
 800f37e:	4603      	mov	r3, r0
 800f380:	75fb      	strb	r3, [r7, #23]
 800f382:	e014      	b.n	800f3ae <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	2200      	movs	r2, #0
 800f388:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800f38c:	2301      	movs	r3, #1
 800f38e:	e041      	b.n	800f414 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	331c      	adds	r3, #28
 800f39c:	4619      	mov	r1, r3
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	f7f6 fefb 	bl	80061a0 <HAL_DMA_Start_IT>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800f3ae:	7dfb      	ldrb	r3, [r7, #23]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d005      	beq.n	800f3c0 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e029      	b.n	800f414 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f000 f982 	bl	800f6cc <SAI_InterruptFlag>
 800f3c8:	4601      	mov	r1, r0
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	691a      	ldr	r2, [r3, #16]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	430a      	orrs	r2, r1
 800f3d6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f3e6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d107      	bne.n	800f406 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f404:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800f40e:	2300      	movs	r3, #0
 800f410:	e000      	b.n	800f414 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800f412:	2302      	movs	r3, #2
  }
}
 800f414:	4618      	mov	r0, r3
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	0800f889 	.word	0x0800f889
 800f420:	0800f82b 	.word	0x0800f82b
 800f424:	0800f8a5 	.word	0x0800f8a5

0800f428 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800f430:	bf00      	nop
 800f432:	370c      	adds	r7, #12
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b083      	sub	sp, #12
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f444:	bf00      	nop
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f464:	b480      	push	{r7}
 800f466:	b087      	sub	sp, #28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	607a      	str	r2, [r7, #4]
 800f470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f472:	2300      	movs	r3, #0
 800f474:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2200      	movs	r2, #0
 800f47a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2200      	movs	r2, #0
 800f480:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d003      	beq.n	800f492 <SAI_InitI2S+0x2e>
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d103      	bne.n	800f49a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2200      	movs	r2, #0
 800f496:	651a      	str	r2, [r3, #80]	@ 0x50
 800f498:	e002      	b.n	800f4a0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2201      	movs	r2, #1
 800f49e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f4a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f4ae:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	683a      	ldr	r2, [r7, #0]
 800f4ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	f003 0301 	and.w	r3, r3, #1
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	e077      	b.n	800f5ba <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d107      	bne.n	800f4e0 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f4dc:	665a      	str	r2, [r3, #100]	@ 0x64
 800f4de:	e006      	b.n	800f4ee <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f4e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b03      	cmp	r3, #3
 800f4f2:	d84f      	bhi.n	800f594 <SAI_InitI2S+0x130>
 800f4f4:	a201      	add	r2, pc, #4	@ (adr r2, 800f4fc <SAI_InitI2S+0x98>)
 800f4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4fa:	bf00      	nop
 800f4fc:	0800f50d 	.word	0x0800f50d
 800f500:	0800f52f 	.word	0x0800f52f
 800f504:	0800f551 	.word	0x0800f551
 800f508:	0800f573 	.word	0x0800f573
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2280      	movs	r2, #128	@ 0x80
 800f510:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	085b      	lsrs	r3, r3, #1
 800f516:	015a      	lsls	r2, r3, #5
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	085b      	lsrs	r3, r3, #1
 800f520:	011a      	lsls	r2, r3, #4
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2240      	movs	r2, #64	@ 0x40
 800f52a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f52c:	e035      	b.n	800f59a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2280      	movs	r2, #128	@ 0x80
 800f532:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	085b      	lsrs	r3, r3, #1
 800f538:	019a      	lsls	r2, r3, #6
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	085b      	lsrs	r3, r3, #1
 800f542:	015a      	lsls	r2, r3, #5
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2280      	movs	r2, #128	@ 0x80
 800f54c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f54e:	e024      	b.n	800f59a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	22c0      	movs	r2, #192	@ 0xc0
 800f554:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	085b      	lsrs	r3, r3, #1
 800f55a:	019a      	lsls	r2, r3, #6
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	085b      	lsrs	r3, r3, #1
 800f564:	015a      	lsls	r2, r3, #5
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2280      	movs	r2, #128	@ 0x80
 800f56e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f570:	e013      	b.n	800f59a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	22e0      	movs	r2, #224	@ 0xe0
 800f576:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	085b      	lsrs	r3, r3, #1
 800f57c:	019a      	lsls	r2, r3, #6
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	085b      	lsrs	r3, r3, #1
 800f586:	015a      	lsls	r2, r3, #5
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2280      	movs	r2, #128	@ 0x80
 800f590:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f592:	e002      	b.n	800f59a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800f594:	2301      	movs	r3, #1
 800f596:	75fb      	strb	r3, [r7, #23]
      break;
 800f598:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	2b02      	cmp	r3, #2
 800f59e:	d10b      	bne.n	800f5b8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d102      	bne.n	800f5ac <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2210      	movs	r2, #16
 800f5aa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	d102      	bne.n	800f5b8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2208      	movs	r2, #8
 800f5b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800f5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	371c      	adds	r7, #28
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop

0800f5c8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b087      	sub	sp, #28
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d003      	beq.n	800f5f6 <SAI_InitPCM+0x2e>
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	2b02      	cmp	r3, #2
 800f5f4:	d103      	bne.n	800f5fe <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	651a      	str	r2, [r3, #80]	@ 0x50
 800f5fc:	e002      	b.n	800f604 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2200      	movs	r2, #0
 800f602:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2200      	movs	r2, #0
 800f608:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800f610:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800f618:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2200      	movs	r2, #0
 800f61e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	683a      	ldr	r2, [r7, #0]
 800f624:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f62c:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	2b04      	cmp	r3, #4
 800f632:	d103      	bne.n	800f63c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2201      	movs	r2, #1
 800f638:	659a      	str	r2, [r3, #88]	@ 0x58
 800f63a:	e002      	b.n	800f642 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	220d      	movs	r2, #13
 800f640:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2b03      	cmp	r3, #3
 800f646:	d837      	bhi.n	800f6b8 <SAI_InitPCM+0xf0>
 800f648:	a201      	add	r2, pc, #4	@ (adr r2, 800f650 <SAI_InitPCM+0x88>)
 800f64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f64e:	bf00      	nop
 800f650:	0800f661 	.word	0x0800f661
 800f654:	0800f677 	.word	0x0800f677
 800f658:	0800f68d 	.word	0x0800f68d
 800f65c:	0800f6a3 	.word	0x0800f6a3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2280      	movs	r2, #128	@ 0x80
 800f664:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	011a      	lsls	r2, r3, #4
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2240      	movs	r2, #64	@ 0x40
 800f672:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f674:	e023      	b.n	800f6be <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2280      	movs	r2, #128	@ 0x80
 800f67a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	015a      	lsls	r2, r3, #5
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2280      	movs	r2, #128	@ 0x80
 800f688:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f68a:	e018      	b.n	800f6be <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	22c0      	movs	r2, #192	@ 0xc0
 800f690:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	015a      	lsls	r2, r3, #5
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2280      	movs	r2, #128	@ 0x80
 800f69e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f6a0:	e00d      	b.n	800f6be <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	22e0      	movs	r2, #224	@ 0xe0
 800f6a6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	015a      	lsls	r2, r3, #5
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2280      	movs	r2, #128	@ 0x80
 800f6b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800f6b6:	e002      	b.n	800f6be <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	75fb      	strb	r3, [r7, #23]
      break;
 800f6bc:	bf00      	nop
  }

  return status;
 800f6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	371c      	adds	r7, #28
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b085      	sub	sp, #20
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f6d8:	2301      	movs	r3, #1
 800f6da:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f6dc:	78fb      	ldrb	r3, [r7, #3]
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d103      	bne.n	800f6ea <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f043 0308 	orr.w	r3, r3, #8
 800f6e8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6ee:	2b08      	cmp	r3, #8
 800f6f0:	d10b      	bne.n	800f70a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f6f6:	2b03      	cmp	r3, #3
 800f6f8:	d003      	beq.n	800f702 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d103      	bne.n	800f70a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f043 0310 	orr.w	r3, r3, #16
 800f708:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	2b03      	cmp	r3, #3
 800f710:	d003      	beq.n	800f71a <SAI_InterruptFlag+0x4e>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	2b02      	cmp	r3, #2
 800f718:	d104      	bne.n	800f724 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f720:	60fb      	str	r3, [r7, #12]
 800f722:	e003      	b.n	800f72c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f043 0304 	orr.w	r3, r3, #4
 800f72a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f72c:	68fb      	ldr	r3, [r7, #12]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
	...

0800f73c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f744:	4b18      	ldr	r3, [pc, #96]	@ (800f7a8 <SAI_Disable+0x6c>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a18      	ldr	r2, [pc, #96]	@ (800f7ac <SAI_Disable+0x70>)
 800f74a:	fba2 2303 	umull	r2, r3, r2, r3
 800f74e:	0b1b      	lsrs	r3, r3, #12
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f754:	2300      	movs	r3, #0
 800f756:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800f766:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d10a      	bne.n	800f784 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f774:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800f77e:	2303      	movs	r3, #3
 800f780:	72fb      	strb	r3, [r7, #11]
      break;
 800f782:	e009      	b.n	800f798 <SAI_Disable+0x5c>
    }
    count--;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	3b01      	subs	r3, #1
 800f788:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1e7      	bne.n	800f768 <SAI_Disable+0x2c>

  return status;
 800f798:	7afb      	ldrb	r3, [r7, #11]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3714      	adds	r7, #20
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop
 800f7a8:	2000001c 	.word	0x2000001c
 800f7ac:	95cbec1b 	.word	0x95cbec1b

0800f7b0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7bc:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7c2:	2b81      	cmp	r3, #129	@ 0x81
 800f7c4:	d01c      	beq.n	800f800 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f7dc:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f7de:	2100      	movs	r1, #0
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f7ff ff73 	bl	800f6cc <SAI_InterruptFlag>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	43d9      	mvns	r1, r3
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	691a      	ldr	r2, [r3, #16]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	400a      	ands	r2, r1
 800f7f6:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f800:	68f8      	ldr	r0, [r7, #12]
 800f802:	f7ff fe11 	bl	800f428 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f806:	bf00      	nop
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b084      	sub	sp, #16
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f81a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f7ff fe0d 	bl	800f43c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f822:	bf00      	nop
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b084      	sub	sp, #16
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f836:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f83c:	2b81      	cmp	r3, #129	@ 0x81
 800f83e:	d01c      	beq.n	800f87a <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f84e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2200      	movs	r2, #0
 800f854:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f858:	2100      	movs	r1, #0
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	f7ff ff36 	bl	800f6cc <SAI_InterruptFlag>
 800f860:	4603      	mov	r3, r0
 800f862:	43d9      	mvns	r1, r3
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	691a      	ldr	r2, [r3, #16]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	400a      	ands	r2, r1
 800f870:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2201      	movs	r2, #1
 800f876:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f7f2 fc8a 	bl	8002194 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f880:	bf00      	nop
 800f882:	3710      	adds	r7, #16
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f894:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800f896:	68f8      	ldr	r0, [r7, #12]
 800f898:	f7f2 fbfe 	bl	8002098 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f89c:	bf00      	nop
 800f89e:	3710      	adds	r7, #16
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f8b0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f8b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f8d0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	f7ff ff32 	bl	800f73c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	f7ff fdb1 	bl	800f450 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800f8ee:	bf00      	nop
 800f8f0:	3710      	adds	r7, #16
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}

0800f8f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f8f6:	b580      	push	{r7, lr}
 800f8f8:	b082      	sub	sp, #8
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d101      	bne.n	800f908 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f904:	2301      	movs	r3, #1
 800f906:	e049      	b.n	800f99c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	2b00      	cmp	r3, #0
 800f912:	d106      	bne.n	800f922 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2200      	movs	r2, #0
 800f918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f7f3 fa43 	bl	8002da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2202      	movs	r2, #2
 800f926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	3304      	adds	r3, #4
 800f932:	4619      	mov	r1, r3
 800f934:	4610      	mov	r0, r2
 800f936:	f000 fb3b 	bl	800ffb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2201      	movs	r2, #1
 800f93e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2201      	movs	r2, #1
 800f946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2201      	movs	r2, #1
 800f94e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2201      	movs	r2, #1
 800f956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2201      	movs	r2, #1
 800f95e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2201      	movs	r2, #1
 800f966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2201      	movs	r2, #1
 800f96e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2201      	movs	r2, #1
 800f976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2201      	movs	r2, #1
 800f97e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2201      	movs	r2, #1
 800f986:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2201      	movs	r2, #1
 800f98e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2201      	movs	r2, #1
 800f996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f99a:	2300      	movs	r3, #0
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b085      	sub	sp, #20
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d001      	beq.n	800f9bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e06a      	b.n	800fa92 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2202      	movs	r2, #2
 800f9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a35      	ldr	r2, [pc, #212]	@ (800faa0 <HAL_TIM_Base_Start+0xfc>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d040      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4a34      	ldr	r2, [pc, #208]	@ (800faa4 <HAL_TIM_Base_Start+0x100>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d03b      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9e0:	d036      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f9ea:	d031      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a2d      	ldr	r2, [pc, #180]	@ (800faa8 <HAL_TIM_Base_Start+0x104>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d02c      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4a2c      	ldr	r2, [pc, #176]	@ (800faac <HAL_TIM_Base_Start+0x108>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d027      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a2a      	ldr	r2, [pc, #168]	@ (800fab0 <HAL_TIM_Base_Start+0x10c>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d022      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	4a29      	ldr	r2, [pc, #164]	@ (800fab4 <HAL_TIM_Base_Start+0x110>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d01d      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a27      	ldr	r2, [pc, #156]	@ (800fab8 <HAL_TIM_Base_Start+0x114>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d018      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4a26      	ldr	r2, [pc, #152]	@ (800fabc <HAL_TIM_Base_Start+0x118>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d013      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a24      	ldr	r2, [pc, #144]	@ (800fac0 <HAL_TIM_Base_Start+0x11c>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d00e      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	4a23      	ldr	r2, [pc, #140]	@ (800fac4 <HAL_TIM_Base_Start+0x120>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d009      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4a21      	ldr	r2, [pc, #132]	@ (800fac8 <HAL_TIM_Base_Start+0x124>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d004      	beq.n	800fa50 <HAL_TIM_Base_Start+0xac>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4a20      	ldr	r2, [pc, #128]	@ (800facc <HAL_TIM_Base_Start+0x128>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d115      	bne.n	800fa7c <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	689a      	ldr	r2, [r3, #8]
 800fa56:	4b1e      	ldr	r3, [pc, #120]	@ (800fad0 <HAL_TIM_Base_Start+0x12c>)
 800fa58:	4013      	ands	r3, r2
 800fa5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	2b06      	cmp	r3, #6
 800fa60:	d015      	beq.n	800fa8e <HAL_TIM_Base_Start+0xea>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa68:	d011      	beq.n	800fa8e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f042 0201 	orr.w	r2, r2, #1
 800fa78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa7a:	e008      	b.n	800fa8e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f042 0201 	orr.w	r2, r2, #1
 800fa8a:	601a      	str	r2, [r3, #0]
 800fa8c:	e000      	b.n	800fa90 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fa90:	2300      	movs	r3, #0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	40012c00 	.word	0x40012c00
 800faa4:	50012c00 	.word	0x50012c00
 800faa8:	40000400 	.word	0x40000400
 800faac:	50000400 	.word	0x50000400
 800fab0:	40000800 	.word	0x40000800
 800fab4:	50000800 	.word	0x50000800
 800fab8:	40000c00 	.word	0x40000c00
 800fabc:	50000c00 	.word	0x50000c00
 800fac0:	40013400 	.word	0x40013400
 800fac4:	50013400 	.word	0x50013400
 800fac8:	40014000 	.word	0x40014000
 800facc:	50014000 	.word	0x50014000
 800fad0:	00010007 	.word	0x00010007

0800fad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d101      	bne.n	800fae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fae2:	2301      	movs	r3, #1
 800fae4:	e049      	b.n	800fb7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800faec:	b2db      	uxtb	r3, r3
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d106      	bne.n	800fb00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7f3 f932 	bl	8002d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2202      	movs	r2, #2
 800fb04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	3304      	adds	r3, #4
 800fb10:	4619      	mov	r1, r3
 800fb12:	4610      	mov	r0, r2
 800fb14:	f000 fa4c 	bl	800ffb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2201      	movs	r2, #1
 800fb24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2201      	movs	r2, #1
 800fb34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2201      	movs	r2, #1
 800fb64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2201      	movs	r2, #1
 800fb74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fb90:	2300      	movs	r3, #0
 800fb92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d101      	bne.n	800fba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fb9e:	2302      	movs	r3, #2
 800fba0:	e0ff      	b.n	800fda2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2201      	movs	r2, #1
 800fba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2b14      	cmp	r3, #20
 800fbae:	f200 80f0 	bhi.w	800fd92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fbb2:	a201      	add	r2, pc, #4	@ (adr r2, 800fbb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb8:	0800fc0d 	.word	0x0800fc0d
 800fbbc:	0800fd93 	.word	0x0800fd93
 800fbc0:	0800fd93 	.word	0x0800fd93
 800fbc4:	0800fd93 	.word	0x0800fd93
 800fbc8:	0800fc4d 	.word	0x0800fc4d
 800fbcc:	0800fd93 	.word	0x0800fd93
 800fbd0:	0800fd93 	.word	0x0800fd93
 800fbd4:	0800fd93 	.word	0x0800fd93
 800fbd8:	0800fc8f 	.word	0x0800fc8f
 800fbdc:	0800fd93 	.word	0x0800fd93
 800fbe0:	0800fd93 	.word	0x0800fd93
 800fbe4:	0800fd93 	.word	0x0800fd93
 800fbe8:	0800fccf 	.word	0x0800fccf
 800fbec:	0800fd93 	.word	0x0800fd93
 800fbf0:	0800fd93 	.word	0x0800fd93
 800fbf4:	0800fd93 	.word	0x0800fd93
 800fbf8:	0800fd11 	.word	0x0800fd11
 800fbfc:	0800fd93 	.word	0x0800fd93
 800fc00:	0800fd93 	.word	0x0800fd93
 800fc04:	0800fd93 	.word	0x0800fd93
 800fc08:	0800fd51 	.word	0x0800fd51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	68b9      	ldr	r1, [r7, #8]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f000 fad2 	bl	80101bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	699a      	ldr	r2, [r3, #24]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f042 0208 	orr.w	r2, r2, #8
 800fc26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	699a      	ldr	r2, [r3, #24]
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f022 0204 	bic.w	r2, r2, #4
 800fc36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	6999      	ldr	r1, [r3, #24]
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	691a      	ldr	r2, [r3, #16]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	430a      	orrs	r2, r1
 800fc48:	619a      	str	r2, [r3, #24]
      break;
 800fc4a:	e0a5      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68b9      	ldr	r1, [r7, #8]
 800fc52:	4618      	mov	r0, r3
 800fc54:	f000 fb74 	bl	8010340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	699a      	ldr	r2, [r3, #24]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fc66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	699a      	ldr	r2, [r3, #24]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fc76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6999      	ldr	r1, [r3, #24]
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	021a      	lsls	r2, r3, #8
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	430a      	orrs	r2, r1
 800fc8a:	619a      	str	r2, [r3, #24]
      break;
 800fc8c:	e084      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	68b9      	ldr	r1, [r7, #8]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 fc03 	bl	80104a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	69da      	ldr	r2, [r3, #28]
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f042 0208 	orr.w	r2, r2, #8
 800fca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	69da      	ldr	r2, [r3, #28]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f022 0204 	bic.w	r2, r2, #4
 800fcb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	69d9      	ldr	r1, [r3, #28]
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	691a      	ldr	r2, [r3, #16]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	430a      	orrs	r2, r1
 800fcca:	61da      	str	r2, [r3, #28]
      break;
 800fccc:	e064      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	68b9      	ldr	r1, [r7, #8]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f000 fc91 	bl	80105fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	69da      	ldr	r2, [r3, #28]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	69da      	ldr	r2, [r3, #28]
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fcf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	69d9      	ldr	r1, [r3, #28]
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	021a      	lsls	r2, r3, #8
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	430a      	orrs	r2, r1
 800fd0c:	61da      	str	r2, [r3, #28]
      break;
 800fd0e:	e043      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	68b9      	ldr	r1, [r7, #8]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f000 fd20 	bl	801075c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f042 0208 	orr.w	r2, r2, #8
 800fd2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f022 0204 	bic.w	r2, r2, #4
 800fd3a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	691a      	ldr	r2, [r3, #16]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	430a      	orrs	r2, r1
 800fd4c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800fd4e:	e023      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	68b9      	ldr	r1, [r7, #8]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f000 fd82 	bl	8010860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fd6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fd7a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	021a      	lsls	r2, r3, #8
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	430a      	orrs	r2, r1
 800fd8e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800fd90:	e002      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	75fb      	strb	r3, [r7, #23]
      break;
 800fd96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3718      	adds	r7, #24
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop

0800fdac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d101      	bne.n	800fdc8 <HAL_TIM_ConfigClockSource+0x1c>
 800fdc4:	2302      	movs	r3, #2
 800fdc6:	e0e6      	b.n	800ff96 <HAL_TIM_ConfigClockSource+0x1ea>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2202      	movs	r2, #2
 800fdd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	689b      	ldr	r3, [r3, #8]
 800fdde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800fde6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fdea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fdf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4a67      	ldr	r2, [pc, #412]	@ (800ffa0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	f000 80b1 	beq.w	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800fe08:	4a65      	ldr	r2, [pc, #404]	@ (800ffa0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	f200 80b6 	bhi.w	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe10:	4a64      	ldr	r2, [pc, #400]	@ (800ffa4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	f000 80a9 	beq.w	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800fe18:	4a62      	ldr	r2, [pc, #392]	@ (800ffa4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	f200 80ae 	bhi.w	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe20:	4a61      	ldr	r2, [pc, #388]	@ (800ffa8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	f000 80a1 	beq.w	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800fe28:	4a5f      	ldr	r2, [pc, #380]	@ (800ffa8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	f200 80a6 	bhi.w	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe30:	4a5e      	ldr	r2, [pc, #376]	@ (800ffac <HAL_TIM_ConfigClockSource+0x200>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	f000 8099 	beq.w	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800fe38:	4a5c      	ldr	r2, [pc, #368]	@ (800ffac <HAL_TIM_ConfigClockSource+0x200>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	f200 809e 	bhi.w	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fe44:	f000 8091 	beq.w	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800fe48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800fe4c:	f200 8096 	bhi.w	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe54:	f000 8089 	beq.w	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800fe58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe5c:	f200 808e 	bhi.w	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe64:	d03e      	beq.n	800fee4 <HAL_TIM_ConfigClockSource+0x138>
 800fe66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe6a:	f200 8087 	bhi.w	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe72:	f000 8086 	beq.w	800ff82 <HAL_TIM_ConfigClockSource+0x1d6>
 800fe76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe7a:	d87f      	bhi.n	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe7c:	2b70      	cmp	r3, #112	@ 0x70
 800fe7e:	d01a      	beq.n	800feb6 <HAL_TIM_ConfigClockSource+0x10a>
 800fe80:	2b70      	cmp	r3, #112	@ 0x70
 800fe82:	d87b      	bhi.n	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe84:	2b60      	cmp	r3, #96	@ 0x60
 800fe86:	d050      	beq.n	800ff2a <HAL_TIM_ConfigClockSource+0x17e>
 800fe88:	2b60      	cmp	r3, #96	@ 0x60
 800fe8a:	d877      	bhi.n	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe8c:	2b50      	cmp	r3, #80	@ 0x50
 800fe8e:	d03c      	beq.n	800ff0a <HAL_TIM_ConfigClockSource+0x15e>
 800fe90:	2b50      	cmp	r3, #80	@ 0x50
 800fe92:	d873      	bhi.n	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe94:	2b40      	cmp	r3, #64	@ 0x40
 800fe96:	d058      	beq.n	800ff4a <HAL_TIM_ConfigClockSource+0x19e>
 800fe98:	2b40      	cmp	r3, #64	@ 0x40
 800fe9a:	d86f      	bhi.n	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fe9c:	2b30      	cmp	r3, #48	@ 0x30
 800fe9e:	d064      	beq.n	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800fea0:	2b30      	cmp	r3, #48	@ 0x30
 800fea2:	d86b      	bhi.n	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800fea4:	2b20      	cmp	r3, #32
 800fea6:	d060      	beq.n	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800fea8:	2b20      	cmp	r3, #32
 800feaa:	d867      	bhi.n	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
 800feac:	2b00      	cmp	r3, #0
 800feae:	d05c      	beq.n	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800feb0:	2b10      	cmp	r3, #16
 800feb2:	d05a      	beq.n	800ff6a <HAL_TIM_ConfigClockSource+0x1be>
 800feb4:	e062      	b.n	800ff7c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fec6:	f000 fdcb 	bl	8010a60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	68ba      	ldr	r2, [r7, #8]
 800fee0:	609a      	str	r2, [r3, #8]
      break;
 800fee2:	e04f      	b.n	800ff84 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fef4:	f000 fdb4 	bl	8010a60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	689a      	ldr	r2, [r3, #8]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ff06:	609a      	str	r2, [r3, #8]
      break;
 800ff08:	e03c      	b.n	800ff84 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff16:	461a      	mov	r2, r3
 800ff18:	f000 fd26 	bl	8010968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2150      	movs	r1, #80	@ 0x50
 800ff22:	4618      	mov	r0, r3
 800ff24:	f000 fd7f 	bl	8010a26 <TIM_ITRx_SetConfig>
      break;
 800ff28:	e02c      	b.n	800ff84 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff36:	461a      	mov	r2, r3
 800ff38:	f000 fd45 	bl	80109c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2160      	movs	r1, #96	@ 0x60
 800ff42:	4618      	mov	r0, r3
 800ff44:	f000 fd6f 	bl	8010a26 <TIM_ITRx_SetConfig>
      break;
 800ff48:	e01c      	b.n	800ff84 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff56:	461a      	mov	r2, r3
 800ff58:	f000 fd06 	bl	8010968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2140      	movs	r1, #64	@ 0x40
 800ff62:	4618      	mov	r0, r3
 800ff64:	f000 fd5f 	bl	8010a26 <TIM_ITRx_SetConfig>
      break;
 800ff68:	e00c      	b.n	800ff84 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4619      	mov	r1, r3
 800ff74:	4610      	mov	r0, r2
 800ff76:	f000 fd56 	bl	8010a26 <TIM_ITRx_SetConfig>
      break;
 800ff7a:	e003      	b.n	800ff84 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ff80:	e000      	b.n	800ff84 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800ff82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2201      	movs	r2, #1
 800ff88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ff94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3710      	adds	r7, #16
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	00100070 	.word	0x00100070
 800ffa4:	00100040 	.word	0x00100040
 800ffa8:	00100030 	.word	0x00100030
 800ffac:	00100020 	.word	0x00100020

0800ffb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4a6e      	ldr	r2, [pc, #440]	@ (801017c <TIM_Base_SetConfig+0x1cc>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d02b      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4a6d      	ldr	r2, [pc, #436]	@ (8010180 <TIM_Base_SetConfig+0x1d0>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d027      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffd6:	d023      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ffde:	d01f      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4a68      	ldr	r2, [pc, #416]	@ (8010184 <TIM_Base_SetConfig+0x1d4>)
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	d01b      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4a67      	ldr	r2, [pc, #412]	@ (8010188 <TIM_Base_SetConfig+0x1d8>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d017      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a66      	ldr	r2, [pc, #408]	@ (801018c <TIM_Base_SetConfig+0x1dc>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d013      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4a65      	ldr	r2, [pc, #404]	@ (8010190 <TIM_Base_SetConfig+0x1e0>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d00f      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	4a64      	ldr	r2, [pc, #400]	@ (8010194 <TIM_Base_SetConfig+0x1e4>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d00b      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	4a63      	ldr	r2, [pc, #396]	@ (8010198 <TIM_Base_SetConfig+0x1e8>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d007      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4a62      	ldr	r2, [pc, #392]	@ (801019c <TIM_Base_SetConfig+0x1ec>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d003      	beq.n	8010020 <TIM_Base_SetConfig+0x70>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	4a61      	ldr	r2, [pc, #388]	@ (80101a0 <TIM_Base_SetConfig+0x1f0>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d108      	bne.n	8010032 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	68fa      	ldr	r2, [r7, #12]
 801002e:	4313      	orrs	r3, r2
 8010030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4a51      	ldr	r2, [pc, #324]	@ (801017c <TIM_Base_SetConfig+0x1cc>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d043      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	4a50      	ldr	r2, [pc, #320]	@ (8010180 <TIM_Base_SetConfig+0x1d0>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d03f      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010048:	d03b      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010050:	d037      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4a4b      	ldr	r2, [pc, #300]	@ (8010184 <TIM_Base_SetConfig+0x1d4>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d033      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4a4a      	ldr	r2, [pc, #296]	@ (8010188 <TIM_Base_SetConfig+0x1d8>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d02f      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4a49      	ldr	r2, [pc, #292]	@ (801018c <TIM_Base_SetConfig+0x1dc>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d02b      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4a48      	ldr	r2, [pc, #288]	@ (8010190 <TIM_Base_SetConfig+0x1e0>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d027      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4a47      	ldr	r2, [pc, #284]	@ (8010194 <TIM_Base_SetConfig+0x1e4>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d023      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4a46      	ldr	r2, [pc, #280]	@ (8010198 <TIM_Base_SetConfig+0x1e8>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d01f      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4a45      	ldr	r2, [pc, #276]	@ (801019c <TIM_Base_SetConfig+0x1ec>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d01b      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4a44      	ldr	r2, [pc, #272]	@ (80101a0 <TIM_Base_SetConfig+0x1f0>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d017      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4a43      	ldr	r2, [pc, #268]	@ (80101a4 <TIM_Base_SetConfig+0x1f4>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d013      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a42      	ldr	r2, [pc, #264]	@ (80101a8 <TIM_Base_SetConfig+0x1f8>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d00f      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a41      	ldr	r2, [pc, #260]	@ (80101ac <TIM_Base_SetConfig+0x1fc>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d00b      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4a40      	ldr	r2, [pc, #256]	@ (80101b0 <TIM_Base_SetConfig+0x200>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d007      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4a3f      	ldr	r2, [pc, #252]	@ (80101b4 <TIM_Base_SetConfig+0x204>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d003      	beq.n	80100c2 <TIM_Base_SetConfig+0x112>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4a3e      	ldr	r2, [pc, #248]	@ (80101b8 <TIM_Base_SetConfig+0x208>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d108      	bne.n	80100d4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80100c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	68fa      	ldr	r2, [r7, #12]
 80100d0:	4313      	orrs	r3, r2
 80100d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	695b      	ldr	r3, [r3, #20]
 80100de:	4313      	orrs	r3, r2
 80100e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	68fa      	ldr	r2, [r7, #12]
 80100e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	689a      	ldr	r2, [r3, #8]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4a20      	ldr	r2, [pc, #128]	@ (801017c <TIM_Base_SetConfig+0x1cc>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d023      	beq.n	8010148 <TIM_Base_SetConfig+0x198>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4a1f      	ldr	r2, [pc, #124]	@ (8010180 <TIM_Base_SetConfig+0x1d0>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d01f      	beq.n	8010148 <TIM_Base_SetConfig+0x198>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4a24      	ldr	r2, [pc, #144]	@ (801019c <TIM_Base_SetConfig+0x1ec>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d01b      	beq.n	8010148 <TIM_Base_SetConfig+0x198>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4a23      	ldr	r2, [pc, #140]	@ (80101a0 <TIM_Base_SetConfig+0x1f0>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d017      	beq.n	8010148 <TIM_Base_SetConfig+0x198>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	4a22      	ldr	r2, [pc, #136]	@ (80101a4 <TIM_Base_SetConfig+0x1f4>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d013      	beq.n	8010148 <TIM_Base_SetConfig+0x198>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	4a21      	ldr	r2, [pc, #132]	@ (80101a8 <TIM_Base_SetConfig+0x1f8>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d00f      	beq.n	8010148 <TIM_Base_SetConfig+0x198>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4a20      	ldr	r2, [pc, #128]	@ (80101ac <TIM_Base_SetConfig+0x1fc>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d00b      	beq.n	8010148 <TIM_Base_SetConfig+0x198>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4a1f      	ldr	r2, [pc, #124]	@ (80101b0 <TIM_Base_SetConfig+0x200>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d007      	beq.n	8010148 <TIM_Base_SetConfig+0x198>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4a1e      	ldr	r2, [pc, #120]	@ (80101b4 <TIM_Base_SetConfig+0x204>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d003      	beq.n	8010148 <TIM_Base_SetConfig+0x198>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4a1d      	ldr	r2, [pc, #116]	@ (80101b8 <TIM_Base_SetConfig+0x208>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d103      	bne.n	8010150 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	691a      	ldr	r2, [r3, #16]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2201      	movs	r2, #1
 8010154:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	691b      	ldr	r3, [r3, #16]
 801015a:	f003 0301 	and.w	r3, r3, #1
 801015e:	2b01      	cmp	r3, #1
 8010160:	d105      	bne.n	801016e <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	691b      	ldr	r3, [r3, #16]
 8010166:	f023 0201 	bic.w	r2, r3, #1
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	611a      	str	r2, [r3, #16]
  }
}
 801016e:	bf00      	nop
 8010170:	3714      	adds	r7, #20
 8010172:	46bd      	mov	sp, r7
 8010174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	40012c00 	.word	0x40012c00
 8010180:	50012c00 	.word	0x50012c00
 8010184:	40000400 	.word	0x40000400
 8010188:	50000400 	.word	0x50000400
 801018c:	40000800 	.word	0x40000800
 8010190:	50000800 	.word	0x50000800
 8010194:	40000c00 	.word	0x40000c00
 8010198:	50000c00 	.word	0x50000c00
 801019c:	40013400 	.word	0x40013400
 80101a0:	50013400 	.word	0x50013400
 80101a4:	40014000 	.word	0x40014000
 80101a8:	50014000 	.word	0x50014000
 80101ac:	40014400 	.word	0x40014400
 80101b0:	50014400 	.word	0x50014400
 80101b4:	40014800 	.word	0x40014800
 80101b8:	50014800 	.word	0x50014800

080101bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101bc:	b480      	push	{r7}
 80101be:	b087      	sub	sp, #28
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6a1b      	ldr	r3, [r3, #32]
 80101ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6a1b      	ldr	r3, [r3, #32]
 80101d0:	f023 0201 	bic.w	r2, r3, #1
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	699b      	ldr	r3, [r3, #24]
 80101e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80101ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f023 0303 	bic.w	r3, r3, #3
 80101f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	4313      	orrs	r3, r2
 8010200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	f023 0302 	bic.w	r3, r3, #2
 8010208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	697a      	ldr	r2, [r7, #20]
 8010210:	4313      	orrs	r3, r2
 8010212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4a40      	ldr	r2, [pc, #256]	@ (8010318 <TIM_OC1_SetConfig+0x15c>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d023      	beq.n	8010264 <TIM_OC1_SetConfig+0xa8>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	4a3f      	ldr	r2, [pc, #252]	@ (801031c <TIM_OC1_SetConfig+0x160>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d01f      	beq.n	8010264 <TIM_OC1_SetConfig+0xa8>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4a3e      	ldr	r2, [pc, #248]	@ (8010320 <TIM_OC1_SetConfig+0x164>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d01b      	beq.n	8010264 <TIM_OC1_SetConfig+0xa8>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4a3d      	ldr	r2, [pc, #244]	@ (8010324 <TIM_OC1_SetConfig+0x168>)
 8010230:	4293      	cmp	r3, r2
 8010232:	d017      	beq.n	8010264 <TIM_OC1_SetConfig+0xa8>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4a3c      	ldr	r2, [pc, #240]	@ (8010328 <TIM_OC1_SetConfig+0x16c>)
 8010238:	4293      	cmp	r3, r2
 801023a:	d013      	beq.n	8010264 <TIM_OC1_SetConfig+0xa8>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4a3b      	ldr	r2, [pc, #236]	@ (801032c <TIM_OC1_SetConfig+0x170>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d00f      	beq.n	8010264 <TIM_OC1_SetConfig+0xa8>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	4a3a      	ldr	r2, [pc, #232]	@ (8010330 <TIM_OC1_SetConfig+0x174>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d00b      	beq.n	8010264 <TIM_OC1_SetConfig+0xa8>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	4a39      	ldr	r2, [pc, #228]	@ (8010334 <TIM_OC1_SetConfig+0x178>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d007      	beq.n	8010264 <TIM_OC1_SetConfig+0xa8>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	4a38      	ldr	r2, [pc, #224]	@ (8010338 <TIM_OC1_SetConfig+0x17c>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d003      	beq.n	8010264 <TIM_OC1_SetConfig+0xa8>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4a37      	ldr	r2, [pc, #220]	@ (801033c <TIM_OC1_SetConfig+0x180>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d10c      	bne.n	801027e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	f023 0308 	bic.w	r3, r3, #8
 801026a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	697a      	ldr	r2, [r7, #20]
 8010272:	4313      	orrs	r3, r2
 8010274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	f023 0304 	bic.w	r3, r3, #4
 801027c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4a25      	ldr	r2, [pc, #148]	@ (8010318 <TIM_OC1_SetConfig+0x15c>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d023      	beq.n	80102ce <TIM_OC1_SetConfig+0x112>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4a24      	ldr	r2, [pc, #144]	@ (801031c <TIM_OC1_SetConfig+0x160>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d01f      	beq.n	80102ce <TIM_OC1_SetConfig+0x112>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4a23      	ldr	r2, [pc, #140]	@ (8010320 <TIM_OC1_SetConfig+0x164>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d01b      	beq.n	80102ce <TIM_OC1_SetConfig+0x112>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4a22      	ldr	r2, [pc, #136]	@ (8010324 <TIM_OC1_SetConfig+0x168>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d017      	beq.n	80102ce <TIM_OC1_SetConfig+0x112>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4a21      	ldr	r2, [pc, #132]	@ (8010328 <TIM_OC1_SetConfig+0x16c>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d013      	beq.n	80102ce <TIM_OC1_SetConfig+0x112>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a20      	ldr	r2, [pc, #128]	@ (801032c <TIM_OC1_SetConfig+0x170>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d00f      	beq.n	80102ce <TIM_OC1_SetConfig+0x112>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4a1f      	ldr	r2, [pc, #124]	@ (8010330 <TIM_OC1_SetConfig+0x174>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d00b      	beq.n	80102ce <TIM_OC1_SetConfig+0x112>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4a1e      	ldr	r2, [pc, #120]	@ (8010334 <TIM_OC1_SetConfig+0x178>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d007      	beq.n	80102ce <TIM_OC1_SetConfig+0x112>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4a1d      	ldr	r2, [pc, #116]	@ (8010338 <TIM_OC1_SetConfig+0x17c>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d003      	beq.n	80102ce <TIM_OC1_SetConfig+0x112>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	4a1c      	ldr	r2, [pc, #112]	@ (801033c <TIM_OC1_SetConfig+0x180>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d111      	bne.n	80102f2 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80102d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80102dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	695b      	ldr	r3, [r3, #20]
 80102e2:	693a      	ldr	r2, [r7, #16]
 80102e4:	4313      	orrs	r3, r2
 80102e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	699b      	ldr	r3, [r3, #24]
 80102ec:	693a      	ldr	r2, [r7, #16]
 80102ee:	4313      	orrs	r3, r2
 80102f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	68fa      	ldr	r2, [r7, #12]
 80102fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	685a      	ldr	r2, [r3, #4]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	697a      	ldr	r2, [r7, #20]
 801030a:	621a      	str	r2, [r3, #32]
}
 801030c:	bf00      	nop
 801030e:	371c      	adds	r7, #28
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr
 8010318:	40012c00 	.word	0x40012c00
 801031c:	50012c00 	.word	0x50012c00
 8010320:	40013400 	.word	0x40013400
 8010324:	50013400 	.word	0x50013400
 8010328:	40014000 	.word	0x40014000
 801032c:	50014000 	.word	0x50014000
 8010330:	40014400 	.word	0x40014400
 8010334:	50014400 	.word	0x50014400
 8010338:	40014800 	.word	0x40014800
 801033c:	50014800 	.word	0x50014800

08010340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010340:	b480      	push	{r7}
 8010342:	b087      	sub	sp, #28
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6a1b      	ldr	r3, [r3, #32]
 801034e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6a1b      	ldr	r3, [r3, #32]
 8010354:	f023 0210 	bic.w	r2, r3, #16
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	699b      	ldr	r3, [r3, #24]
 8010366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801036e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801037a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	021b      	lsls	r3, r3, #8
 8010382:	68fa      	ldr	r2, [r7, #12]
 8010384:	4313      	orrs	r3, r2
 8010386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	f023 0320 	bic.w	r3, r3, #32
 801038e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	689b      	ldr	r3, [r3, #8]
 8010394:	011b      	lsls	r3, r3, #4
 8010396:	697a      	ldr	r2, [r7, #20]
 8010398:	4313      	orrs	r3, r2
 801039a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4a36      	ldr	r2, [pc, #216]	@ (8010478 <TIM_OC2_SetConfig+0x138>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d00b      	beq.n	80103bc <TIM_OC2_SetConfig+0x7c>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a35      	ldr	r2, [pc, #212]	@ (801047c <TIM_OC2_SetConfig+0x13c>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d007      	beq.n	80103bc <TIM_OC2_SetConfig+0x7c>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4a34      	ldr	r2, [pc, #208]	@ (8010480 <TIM_OC2_SetConfig+0x140>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d003      	beq.n	80103bc <TIM_OC2_SetConfig+0x7c>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4a33      	ldr	r2, [pc, #204]	@ (8010484 <TIM_OC2_SetConfig+0x144>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d10d      	bne.n	80103d8 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80103c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	011b      	lsls	r3, r3, #4
 80103ca:	697a      	ldr	r2, [r7, #20]
 80103cc:	4313      	orrs	r3, r2
 80103ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	4a27      	ldr	r2, [pc, #156]	@ (8010478 <TIM_OC2_SetConfig+0x138>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d023      	beq.n	8010428 <TIM_OC2_SetConfig+0xe8>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4a26      	ldr	r2, [pc, #152]	@ (801047c <TIM_OC2_SetConfig+0x13c>)
 80103e4:	4293      	cmp	r3, r2
 80103e6:	d01f      	beq.n	8010428 <TIM_OC2_SetConfig+0xe8>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	4a25      	ldr	r2, [pc, #148]	@ (8010480 <TIM_OC2_SetConfig+0x140>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d01b      	beq.n	8010428 <TIM_OC2_SetConfig+0xe8>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	4a24      	ldr	r2, [pc, #144]	@ (8010484 <TIM_OC2_SetConfig+0x144>)
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d017      	beq.n	8010428 <TIM_OC2_SetConfig+0xe8>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	4a23      	ldr	r2, [pc, #140]	@ (8010488 <TIM_OC2_SetConfig+0x148>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d013      	beq.n	8010428 <TIM_OC2_SetConfig+0xe8>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4a22      	ldr	r2, [pc, #136]	@ (801048c <TIM_OC2_SetConfig+0x14c>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d00f      	beq.n	8010428 <TIM_OC2_SetConfig+0xe8>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	4a21      	ldr	r2, [pc, #132]	@ (8010490 <TIM_OC2_SetConfig+0x150>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d00b      	beq.n	8010428 <TIM_OC2_SetConfig+0xe8>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	4a20      	ldr	r2, [pc, #128]	@ (8010494 <TIM_OC2_SetConfig+0x154>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d007      	beq.n	8010428 <TIM_OC2_SetConfig+0xe8>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	4a1f      	ldr	r2, [pc, #124]	@ (8010498 <TIM_OC2_SetConfig+0x158>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d003      	beq.n	8010428 <TIM_OC2_SetConfig+0xe8>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	4a1e      	ldr	r2, [pc, #120]	@ (801049c <TIM_OC2_SetConfig+0x15c>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d113      	bne.n	8010450 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801042e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	695b      	ldr	r3, [r3, #20]
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	693a      	ldr	r2, [r7, #16]
 8010440:	4313      	orrs	r3, r2
 8010442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	699b      	ldr	r3, [r3, #24]
 8010448:	009b      	lsls	r3, r3, #2
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	4313      	orrs	r3, r2
 801044e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	693a      	ldr	r2, [r7, #16]
 8010454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	685a      	ldr	r2, [r3, #4]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	697a      	ldr	r2, [r7, #20]
 8010468:	621a      	str	r2, [r3, #32]
}
 801046a:	bf00      	nop
 801046c:	371c      	adds	r7, #28
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	40012c00 	.word	0x40012c00
 801047c:	50012c00 	.word	0x50012c00
 8010480:	40013400 	.word	0x40013400
 8010484:	50013400 	.word	0x50013400
 8010488:	40014000 	.word	0x40014000
 801048c:	50014000 	.word	0x50014000
 8010490:	40014400 	.word	0x40014400
 8010494:	50014400 	.word	0x50014400
 8010498:	40014800 	.word	0x40014800
 801049c:	50014800 	.word	0x50014800

080104a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b087      	sub	sp, #28
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6a1b      	ldr	r3, [r3, #32]
 80104ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6a1b      	ldr	r3, [r3, #32]
 80104b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	69db      	ldr	r3, [r3, #28]
 80104c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80104ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f023 0303 	bic.w	r3, r3, #3
 80104da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80104ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	021b      	lsls	r3, r3, #8
 80104f4:	697a      	ldr	r2, [r7, #20]
 80104f6:	4313      	orrs	r3, r2
 80104f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4a35      	ldr	r2, [pc, #212]	@ (80105d4 <TIM_OC3_SetConfig+0x134>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d00b      	beq.n	801051a <TIM_OC3_SetConfig+0x7a>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4a34      	ldr	r2, [pc, #208]	@ (80105d8 <TIM_OC3_SetConfig+0x138>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d007      	beq.n	801051a <TIM_OC3_SetConfig+0x7a>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4a33      	ldr	r2, [pc, #204]	@ (80105dc <TIM_OC3_SetConfig+0x13c>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d003      	beq.n	801051a <TIM_OC3_SetConfig+0x7a>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4a32      	ldr	r2, [pc, #200]	@ (80105e0 <TIM_OC3_SetConfig+0x140>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d10d      	bne.n	8010536 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	021b      	lsls	r3, r3, #8
 8010528:	697a      	ldr	r2, [r7, #20]
 801052a:	4313      	orrs	r3, r2
 801052c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	4a26      	ldr	r2, [pc, #152]	@ (80105d4 <TIM_OC3_SetConfig+0x134>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d023      	beq.n	8010586 <TIM_OC3_SetConfig+0xe6>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	4a25      	ldr	r2, [pc, #148]	@ (80105d8 <TIM_OC3_SetConfig+0x138>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d01f      	beq.n	8010586 <TIM_OC3_SetConfig+0xe6>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4a24      	ldr	r2, [pc, #144]	@ (80105dc <TIM_OC3_SetConfig+0x13c>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d01b      	beq.n	8010586 <TIM_OC3_SetConfig+0xe6>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4a23      	ldr	r2, [pc, #140]	@ (80105e0 <TIM_OC3_SetConfig+0x140>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d017      	beq.n	8010586 <TIM_OC3_SetConfig+0xe6>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	4a22      	ldr	r2, [pc, #136]	@ (80105e4 <TIM_OC3_SetConfig+0x144>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d013      	beq.n	8010586 <TIM_OC3_SetConfig+0xe6>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4a21      	ldr	r2, [pc, #132]	@ (80105e8 <TIM_OC3_SetConfig+0x148>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d00f      	beq.n	8010586 <TIM_OC3_SetConfig+0xe6>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4a20      	ldr	r2, [pc, #128]	@ (80105ec <TIM_OC3_SetConfig+0x14c>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d00b      	beq.n	8010586 <TIM_OC3_SetConfig+0xe6>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4a1f      	ldr	r2, [pc, #124]	@ (80105f0 <TIM_OC3_SetConfig+0x150>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d007      	beq.n	8010586 <TIM_OC3_SetConfig+0xe6>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4a1e      	ldr	r2, [pc, #120]	@ (80105f4 <TIM_OC3_SetConfig+0x154>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d003      	beq.n	8010586 <TIM_OC3_SetConfig+0xe6>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4a1d      	ldr	r2, [pc, #116]	@ (80105f8 <TIM_OC3_SetConfig+0x158>)
 8010582:	4293      	cmp	r3, r2
 8010584:	d113      	bne.n	80105ae <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801058c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	695b      	ldr	r3, [r3, #20]
 801059a:	011b      	lsls	r3, r3, #4
 801059c:	693a      	ldr	r2, [r7, #16]
 801059e:	4313      	orrs	r3, r2
 80105a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	699b      	ldr	r3, [r3, #24]
 80105a6:	011b      	lsls	r3, r3, #4
 80105a8:	693a      	ldr	r2, [r7, #16]
 80105aa:	4313      	orrs	r3, r2
 80105ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	693a      	ldr	r2, [r7, #16]
 80105b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	685a      	ldr	r2, [r3, #4]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	697a      	ldr	r2, [r7, #20]
 80105c6:	621a      	str	r2, [r3, #32]
}
 80105c8:	bf00      	nop
 80105ca:	371c      	adds	r7, #28
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr
 80105d4:	40012c00 	.word	0x40012c00
 80105d8:	50012c00 	.word	0x50012c00
 80105dc:	40013400 	.word	0x40013400
 80105e0:	50013400 	.word	0x50013400
 80105e4:	40014000 	.word	0x40014000
 80105e8:	50014000 	.word	0x50014000
 80105ec:	40014400 	.word	0x40014400
 80105f0:	50014400 	.word	0x50014400
 80105f4:	40014800 	.word	0x40014800
 80105f8:	50014800 	.word	0x50014800

080105fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b087      	sub	sp, #28
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6a1b      	ldr	r3, [r3, #32]
 801060a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6a1b      	ldr	r3, [r3, #32]
 8010610:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	69db      	ldr	r3, [r3, #28]
 8010622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801062a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801062e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	021b      	lsls	r3, r3, #8
 801063e:	68fa      	ldr	r2, [r7, #12]
 8010640:	4313      	orrs	r3, r2
 8010642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801064a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	689b      	ldr	r3, [r3, #8]
 8010650:	031b      	lsls	r3, r3, #12
 8010652:	697a      	ldr	r2, [r7, #20]
 8010654:	4313      	orrs	r3, r2
 8010656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4a36      	ldr	r2, [pc, #216]	@ (8010734 <TIM_OC4_SetConfig+0x138>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d00b      	beq.n	8010678 <TIM_OC4_SetConfig+0x7c>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4a35      	ldr	r2, [pc, #212]	@ (8010738 <TIM_OC4_SetConfig+0x13c>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d007      	beq.n	8010678 <TIM_OC4_SetConfig+0x7c>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	4a34      	ldr	r2, [pc, #208]	@ (801073c <TIM_OC4_SetConfig+0x140>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d003      	beq.n	8010678 <TIM_OC4_SetConfig+0x7c>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	4a33      	ldr	r2, [pc, #204]	@ (8010740 <TIM_OC4_SetConfig+0x144>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d10d      	bne.n	8010694 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801067e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	031b      	lsls	r3, r3, #12
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	4313      	orrs	r3, r2
 801068a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010692:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	4a27      	ldr	r2, [pc, #156]	@ (8010734 <TIM_OC4_SetConfig+0x138>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d023      	beq.n	80106e4 <TIM_OC4_SetConfig+0xe8>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	4a26      	ldr	r2, [pc, #152]	@ (8010738 <TIM_OC4_SetConfig+0x13c>)
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d01f      	beq.n	80106e4 <TIM_OC4_SetConfig+0xe8>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	4a25      	ldr	r2, [pc, #148]	@ (801073c <TIM_OC4_SetConfig+0x140>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d01b      	beq.n	80106e4 <TIM_OC4_SetConfig+0xe8>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	4a24      	ldr	r2, [pc, #144]	@ (8010740 <TIM_OC4_SetConfig+0x144>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d017      	beq.n	80106e4 <TIM_OC4_SetConfig+0xe8>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4a23      	ldr	r2, [pc, #140]	@ (8010744 <TIM_OC4_SetConfig+0x148>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d013      	beq.n	80106e4 <TIM_OC4_SetConfig+0xe8>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	4a22      	ldr	r2, [pc, #136]	@ (8010748 <TIM_OC4_SetConfig+0x14c>)
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d00f      	beq.n	80106e4 <TIM_OC4_SetConfig+0xe8>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	4a21      	ldr	r2, [pc, #132]	@ (801074c <TIM_OC4_SetConfig+0x150>)
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d00b      	beq.n	80106e4 <TIM_OC4_SetConfig+0xe8>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	4a20      	ldr	r2, [pc, #128]	@ (8010750 <TIM_OC4_SetConfig+0x154>)
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d007      	beq.n	80106e4 <TIM_OC4_SetConfig+0xe8>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	4a1f      	ldr	r2, [pc, #124]	@ (8010754 <TIM_OC4_SetConfig+0x158>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	d003      	beq.n	80106e4 <TIM_OC4_SetConfig+0xe8>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4a1e      	ldr	r2, [pc, #120]	@ (8010758 <TIM_OC4_SetConfig+0x15c>)
 80106e0:	4293      	cmp	r3, r2
 80106e2:	d113      	bne.n	801070c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80106ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80106f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	695b      	ldr	r3, [r3, #20]
 80106f8:	019b      	lsls	r3, r3, #6
 80106fa:	693a      	ldr	r2, [r7, #16]
 80106fc:	4313      	orrs	r3, r2
 80106fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	699b      	ldr	r3, [r3, #24]
 8010704:	019b      	lsls	r3, r3, #6
 8010706:	693a      	ldr	r2, [r7, #16]
 8010708:	4313      	orrs	r3, r2
 801070a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	693a      	ldr	r2, [r7, #16]
 8010710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	68fa      	ldr	r2, [r7, #12]
 8010716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	685a      	ldr	r2, [r3, #4]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	697a      	ldr	r2, [r7, #20]
 8010724:	621a      	str	r2, [r3, #32]
}
 8010726:	bf00      	nop
 8010728:	371c      	adds	r7, #28
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop
 8010734:	40012c00 	.word	0x40012c00
 8010738:	50012c00 	.word	0x50012c00
 801073c:	40013400 	.word	0x40013400
 8010740:	50013400 	.word	0x50013400
 8010744:	40014000 	.word	0x40014000
 8010748:	50014000 	.word	0x50014000
 801074c:	40014400 	.word	0x40014400
 8010750:	50014400 	.word	0x50014400
 8010754:	40014800 	.word	0x40014800
 8010758:	50014800 	.word	0x50014800

0801075c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801075c:	b480      	push	{r7}
 801075e:	b087      	sub	sp, #28
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6a1b      	ldr	r3, [r3, #32]
 801076a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6a1b      	ldr	r3, [r3, #32]
 8010770:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801078a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801078e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	4313      	orrs	r3, r2
 8010798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80107a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	689b      	ldr	r3, [r3, #8]
 80107a6:	041b      	lsls	r3, r3, #16
 80107a8:	693a      	ldr	r2, [r7, #16]
 80107aa:	4313      	orrs	r3, r2
 80107ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4a21      	ldr	r2, [pc, #132]	@ (8010838 <TIM_OC5_SetConfig+0xdc>)
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d023      	beq.n	80107fe <TIM_OC5_SetConfig+0xa2>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	4a20      	ldr	r2, [pc, #128]	@ (801083c <TIM_OC5_SetConfig+0xe0>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d01f      	beq.n	80107fe <TIM_OC5_SetConfig+0xa2>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4a1f      	ldr	r2, [pc, #124]	@ (8010840 <TIM_OC5_SetConfig+0xe4>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d01b      	beq.n	80107fe <TIM_OC5_SetConfig+0xa2>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4a1e      	ldr	r2, [pc, #120]	@ (8010844 <TIM_OC5_SetConfig+0xe8>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d017      	beq.n	80107fe <TIM_OC5_SetConfig+0xa2>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	4a1d      	ldr	r2, [pc, #116]	@ (8010848 <TIM_OC5_SetConfig+0xec>)
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d013      	beq.n	80107fe <TIM_OC5_SetConfig+0xa2>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4a1c      	ldr	r2, [pc, #112]	@ (801084c <TIM_OC5_SetConfig+0xf0>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d00f      	beq.n	80107fe <TIM_OC5_SetConfig+0xa2>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4a1b      	ldr	r2, [pc, #108]	@ (8010850 <TIM_OC5_SetConfig+0xf4>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d00b      	beq.n	80107fe <TIM_OC5_SetConfig+0xa2>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4a1a      	ldr	r2, [pc, #104]	@ (8010854 <TIM_OC5_SetConfig+0xf8>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d007      	beq.n	80107fe <TIM_OC5_SetConfig+0xa2>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4a19      	ldr	r2, [pc, #100]	@ (8010858 <TIM_OC5_SetConfig+0xfc>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d003      	beq.n	80107fe <TIM_OC5_SetConfig+0xa2>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4a18      	ldr	r2, [pc, #96]	@ (801085c <TIM_OC5_SetConfig+0x100>)
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d109      	bne.n	8010812 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010804:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	695b      	ldr	r3, [r3, #20]
 801080a:	021b      	lsls	r3, r3, #8
 801080c:	697a      	ldr	r2, [r7, #20]
 801080e:	4313      	orrs	r3, r2
 8010810:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	697a      	ldr	r2, [r7, #20]
 8010816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	68fa      	ldr	r2, [r7, #12]
 801081c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	685a      	ldr	r2, [r3, #4]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	693a      	ldr	r2, [r7, #16]
 801082a:	621a      	str	r2, [r3, #32]
}
 801082c:	bf00      	nop
 801082e:	371c      	adds	r7, #28
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr
 8010838:	40012c00 	.word	0x40012c00
 801083c:	50012c00 	.word	0x50012c00
 8010840:	40013400 	.word	0x40013400
 8010844:	50013400 	.word	0x50013400
 8010848:	40014000 	.word	0x40014000
 801084c:	50014000 	.word	0x50014000
 8010850:	40014400 	.word	0x40014400
 8010854:	50014400 	.word	0x50014400
 8010858:	40014800 	.word	0x40014800
 801085c:	50014800 	.word	0x50014800

08010860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010860:	b480      	push	{r7}
 8010862:	b087      	sub	sp, #28
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6a1b      	ldr	r3, [r3, #32]
 801086e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6a1b      	ldr	r3, [r3, #32]
 8010874:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801088e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	021b      	lsls	r3, r3, #8
 801089a:	68fa      	ldr	r2, [r7, #12]
 801089c:	4313      	orrs	r3, r2
 801089e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80108a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	689b      	ldr	r3, [r3, #8]
 80108ac:	051b      	lsls	r3, r3, #20
 80108ae:	693a      	ldr	r2, [r7, #16]
 80108b0:	4313      	orrs	r3, r2
 80108b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	4a22      	ldr	r2, [pc, #136]	@ (8010940 <TIM_OC6_SetConfig+0xe0>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d023      	beq.n	8010904 <TIM_OC6_SetConfig+0xa4>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4a21      	ldr	r2, [pc, #132]	@ (8010944 <TIM_OC6_SetConfig+0xe4>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d01f      	beq.n	8010904 <TIM_OC6_SetConfig+0xa4>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	4a20      	ldr	r2, [pc, #128]	@ (8010948 <TIM_OC6_SetConfig+0xe8>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d01b      	beq.n	8010904 <TIM_OC6_SetConfig+0xa4>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	4a1f      	ldr	r2, [pc, #124]	@ (801094c <TIM_OC6_SetConfig+0xec>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d017      	beq.n	8010904 <TIM_OC6_SetConfig+0xa4>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4a1e      	ldr	r2, [pc, #120]	@ (8010950 <TIM_OC6_SetConfig+0xf0>)
 80108d8:	4293      	cmp	r3, r2
 80108da:	d013      	beq.n	8010904 <TIM_OC6_SetConfig+0xa4>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	4a1d      	ldr	r2, [pc, #116]	@ (8010954 <TIM_OC6_SetConfig+0xf4>)
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d00f      	beq.n	8010904 <TIM_OC6_SetConfig+0xa4>
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	4a1c      	ldr	r2, [pc, #112]	@ (8010958 <TIM_OC6_SetConfig+0xf8>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d00b      	beq.n	8010904 <TIM_OC6_SetConfig+0xa4>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	4a1b      	ldr	r2, [pc, #108]	@ (801095c <TIM_OC6_SetConfig+0xfc>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d007      	beq.n	8010904 <TIM_OC6_SetConfig+0xa4>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	4a1a      	ldr	r2, [pc, #104]	@ (8010960 <TIM_OC6_SetConfig+0x100>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d003      	beq.n	8010904 <TIM_OC6_SetConfig+0xa4>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	4a19      	ldr	r2, [pc, #100]	@ (8010964 <TIM_OC6_SetConfig+0x104>)
 8010900:	4293      	cmp	r3, r2
 8010902:	d109      	bne.n	8010918 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801090a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	695b      	ldr	r3, [r3, #20]
 8010910:	029b      	lsls	r3, r3, #10
 8010912:	697a      	ldr	r2, [r7, #20]
 8010914:	4313      	orrs	r3, r2
 8010916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	697a      	ldr	r2, [r7, #20]
 801091c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	68fa      	ldr	r2, [r7, #12]
 8010922:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	685a      	ldr	r2, [r3, #4]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	693a      	ldr	r2, [r7, #16]
 8010930:	621a      	str	r2, [r3, #32]
}
 8010932:	bf00      	nop
 8010934:	371c      	adds	r7, #28
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr
 801093e:	bf00      	nop
 8010940:	40012c00 	.word	0x40012c00
 8010944:	50012c00 	.word	0x50012c00
 8010948:	40013400 	.word	0x40013400
 801094c:	50013400 	.word	0x50013400
 8010950:	40014000 	.word	0x40014000
 8010954:	50014000 	.word	0x50014000
 8010958:	40014400 	.word	0x40014400
 801095c:	50014400 	.word	0x50014400
 8010960:	40014800 	.word	0x40014800
 8010964:	50014800 	.word	0x50014800

08010968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010968:	b480      	push	{r7}
 801096a:	b087      	sub	sp, #28
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	60b9      	str	r1, [r7, #8]
 8010972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6a1b      	ldr	r3, [r3, #32]
 8010978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6a1b      	ldr	r3, [r3, #32]
 801097e:	f023 0201 	bic.w	r2, r3, #1
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	699b      	ldr	r3, [r3, #24]
 801098a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	011b      	lsls	r3, r3, #4
 8010998:	693a      	ldr	r2, [r7, #16]
 801099a:	4313      	orrs	r3, r2
 801099c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	f023 030a 	bic.w	r3, r3, #10
 80109a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80109a6:	697a      	ldr	r2, [r7, #20]
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	4313      	orrs	r3, r2
 80109ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	693a      	ldr	r2, [r7, #16]
 80109b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	697a      	ldr	r2, [r7, #20]
 80109b8:	621a      	str	r2, [r3, #32]
}
 80109ba:	bf00      	nop
 80109bc:	371c      	adds	r7, #28
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr

080109c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80109c6:	b480      	push	{r7}
 80109c8:	b087      	sub	sp, #28
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	60f8      	str	r0, [r7, #12]
 80109ce:	60b9      	str	r1, [r7, #8]
 80109d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6a1b      	ldr	r3, [r3, #32]
 80109d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	6a1b      	ldr	r3, [r3, #32]
 80109dc:	f023 0210 	bic.w	r2, r3, #16
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	699b      	ldr	r3, [r3, #24]
 80109e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80109f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	031b      	lsls	r3, r3, #12
 80109f6:	693a      	ldr	r2, [r7, #16]
 80109f8:	4313      	orrs	r3, r2
 80109fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010a02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	011b      	lsls	r3, r3, #4
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	693a      	ldr	r2, [r7, #16]
 8010a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	697a      	ldr	r2, [r7, #20]
 8010a18:	621a      	str	r2, [r3, #32]
}
 8010a1a:	bf00      	nop
 8010a1c:	371c      	adds	r7, #28
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr

08010a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010a26:	b480      	push	{r7}
 8010a28:	b085      	sub	sp, #20
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	6078      	str	r0, [r7, #4]
 8010a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a42:	683a      	ldr	r2, [r7, #0]
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	4313      	orrs	r3, r2
 8010a48:	f043 0307 	orr.w	r3, r3, #7
 8010a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	609a      	str	r2, [r3, #8]
}
 8010a54:	bf00      	nop
 8010a56:	3714      	adds	r7, #20
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr

08010a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b087      	sub	sp, #28
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	607a      	str	r2, [r7, #4]
 8010a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	689b      	ldr	r3, [r3, #8]
 8010a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	021a      	lsls	r2, r3, #8
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	431a      	orrs	r2, r3
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	4313      	orrs	r3, r2
 8010a88:	697a      	ldr	r2, [r7, #20]
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	609a      	str	r2, [r3, #8]
}
 8010a94:	bf00      	nop
 8010a96:	371c      	adds	r7, #28
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b085      	sub	sp, #20
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d101      	bne.n	8010ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010ab4:	2302      	movs	r3, #2
 8010ab6:	e097      	b.n	8010be8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2201      	movs	r2, #1
 8010abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2202      	movs	r2, #2
 8010ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	689b      	ldr	r3, [r3, #8]
 8010ad6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4a45      	ldr	r2, [pc, #276]	@ (8010bf4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d00e      	beq.n	8010b00 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4a44      	ldr	r2, [pc, #272]	@ (8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d009      	beq.n	8010b00 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	4a42      	ldr	r2, [pc, #264]	@ (8010bfc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d004      	beq.n	8010b00 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a41      	ldr	r2, [pc, #260]	@ (8010c00 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d108      	bne.n	8010b12 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010b06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	4313      	orrs	r3, r2
 8010b10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010b18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	4313      	orrs	r3, r2
 8010b26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	68fa      	ldr	r2, [r7, #12]
 8010b2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4a2f      	ldr	r2, [pc, #188]	@ (8010bf4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d040      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d03b      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b4c:	d036      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010b56:	d031      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	4a29      	ldr	r2, [pc, #164]	@ (8010c04 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d02c      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4a28      	ldr	r2, [pc, #160]	@ (8010c08 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d027      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a26      	ldr	r2, [pc, #152]	@ (8010c0c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d022      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	4a25      	ldr	r2, [pc, #148]	@ (8010c10 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d01d      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	4a23      	ldr	r2, [pc, #140]	@ (8010c14 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d018      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	4a22      	ldr	r2, [pc, #136]	@ (8010c18 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d013      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	4a18      	ldr	r2, [pc, #96]	@ (8010bfc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	d00e      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	4a17      	ldr	r2, [pc, #92]	@ (8010c00 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d009      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	4a1b      	ldr	r2, [pc, #108]	@ (8010c1c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d004      	beq.n	8010bbc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8010c20 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d10c      	bne.n	8010bd6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010bc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	68ba      	ldr	r2, [r7, #8]
 8010bca:	4313      	orrs	r3, r2
 8010bcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	68ba      	ldr	r2, [r7, #8]
 8010bd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2200      	movs	r2, #0
 8010be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010be6:	2300      	movs	r3, #0
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3714      	adds	r7, #20
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr
 8010bf4:	40012c00 	.word	0x40012c00
 8010bf8:	50012c00 	.word	0x50012c00
 8010bfc:	40013400 	.word	0x40013400
 8010c00:	50013400 	.word	0x50013400
 8010c04:	40000400 	.word	0x40000400
 8010c08:	50000400 	.word	0x50000400
 8010c0c:	40000800 	.word	0x40000800
 8010c10:	50000800 	.word	0x50000800
 8010c14:	40000c00 	.word	0x40000c00
 8010c18:	50000c00 	.word	0x50000c00
 8010c1c:	40014000 	.word	0x40014000
 8010c20:	50014000 	.word	0x50014000

08010c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d101      	bne.n	8010c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010c32:	2301      	movs	r3, #1
 8010c34:	e042      	b.n	8010cbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d106      	bne.n	8010c4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2200      	movs	r2, #0
 8010c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f7f2 f909 	bl	8002e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2224      	movs	r2, #36	@ 0x24
 8010c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	f022 0201 	bic.w	r2, r2, #1
 8010c64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d002      	beq.n	8010c74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 fd02 	bl	8011678 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f000 fb51 	bl	801131c <UART_SetConfig>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	2b01      	cmp	r3, #1
 8010c7e:	d101      	bne.n	8010c84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010c80:	2301      	movs	r3, #1
 8010c82:	e01b      	b.n	8010cbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	685a      	ldr	r2, [r3, #4]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	689a      	ldr	r2, [r3, #8]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f042 0201 	orr.w	r2, r2, #1
 8010cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 fd81 	bl	80117bc <UART_CheckIdleState>
 8010cba:	4603      	mov	r3, r0
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3708      	adds	r7, #8
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b0ba      	sub	sp, #232	@ 0xe8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	69db      	ldr	r3, [r3, #28]
 8010cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	689b      	ldr	r3, [r3, #8]
 8010ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010cea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010cee:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010cf2:	4013      	ands	r3, r2
 8010cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d11b      	bne.n	8010d38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d04:	f003 0320 	and.w	r3, r3, #32
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d015      	beq.n	8010d38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d10:	f003 0320 	and.w	r3, r3, #32
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d105      	bne.n	8010d24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d009      	beq.n	8010d38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 82cb 	beq.w	80112c4 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	4798      	blx	r3
      }
      return;
 8010d36:	e2c5      	b.n	80112c4 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f000 8123 	beq.w	8010f88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010d42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010d46:	4b8d      	ldr	r3, [pc, #564]	@ (8010f7c <HAL_UART_IRQHandler+0x2b8>)
 8010d48:	4013      	ands	r3, r2
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d106      	bne.n	8010d5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010d4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010d52:	4b8b      	ldr	r3, [pc, #556]	@ (8010f80 <HAL_UART_IRQHandler+0x2bc>)
 8010d54:	4013      	ands	r3, r2
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	f000 8116 	beq.w	8010f88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d60:	f003 0301 	and.w	r3, r3, #1
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d011      	beq.n	8010d8c <HAL_UART_IRQHandler+0xc8>
 8010d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d00b      	beq.n	8010d8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2201      	movs	r2, #1
 8010d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d82:	f043 0201 	orr.w	r2, r3, #1
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d90:	f003 0302 	and.w	r3, r3, #2
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d011      	beq.n	8010dbc <HAL_UART_IRQHandler+0xf8>
 8010d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010d9c:	f003 0301 	and.w	r3, r3, #1
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d00b      	beq.n	8010dbc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	2202      	movs	r2, #2
 8010daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010db2:	f043 0204 	orr.w	r2, r3, #4
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010dc0:	f003 0304 	and.w	r3, r3, #4
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d011      	beq.n	8010dec <HAL_UART_IRQHandler+0x128>
 8010dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010dcc:	f003 0301 	and.w	r3, r3, #1
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00b      	beq.n	8010dec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	2204      	movs	r2, #4
 8010dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010de2:	f043 0202 	orr.w	r2, r3, #2
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010df0:	f003 0308 	and.w	r3, r3, #8
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d017      	beq.n	8010e28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010dfc:	f003 0320 	and.w	r3, r3, #32
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d105      	bne.n	8010e10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010e04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010e08:	4b5c      	ldr	r3, [pc, #368]	@ (8010f7c <HAL_UART_IRQHandler+0x2b8>)
 8010e0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d00b      	beq.n	8010e28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2208      	movs	r2, #8
 8010e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e1e:	f043 0208 	orr.w	r2, r3, #8
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d012      	beq.n	8010e5a <HAL_UART_IRQHandler+0x196>
 8010e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d00c      	beq.n	8010e5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e50:	f043 0220 	orr.w	r2, r3, #32
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f000 8231 	beq.w	80112c8 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010e6a:	f003 0320 	and.w	r3, r3, #32
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d013      	beq.n	8010e9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010e76:	f003 0320 	and.w	r3, r3, #32
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d105      	bne.n	8010e8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d007      	beq.n	8010e9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d003      	beq.n	8010e9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	689b      	ldr	r3, [r3, #8]
 8010eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010eae:	2b40      	cmp	r3, #64	@ 0x40
 8010eb0:	d005      	beq.n	8010ebe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010eb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d054      	beq.n	8010f68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 fd93 	bl	80119ea <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ece:	2b40      	cmp	r3, #64	@ 0x40
 8010ed0:	d146      	bne.n	8010f60 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	3308      	adds	r3, #8
 8010ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010ee0:	e853 3f00 	ldrex	r3, [r3]
 8010ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	3308      	adds	r3, #8
 8010efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010efe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010f02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010f0e:	e841 2300 	strex	r3, r2, [r1]
 8010f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1d9      	bne.n	8010ed2 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d017      	beq.n	8010f58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f2e:	4a15      	ldr	r2, [pc, #84]	@ (8010f84 <HAL_UART_IRQHandler+0x2c0>)
 8010f30:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7f5 fa0d 	bl	8006358 <HAL_DMA_Abort_IT>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d019      	beq.n	8010f78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010f52:	4610      	mov	r0, r2
 8010f54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f56:	e00f      	b.n	8010f78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 f9c9 	bl	80112f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f5e:	e00b      	b.n	8010f78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f000 f9c5 	bl	80112f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f66:	e007      	b.n	8010f78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f000 f9c1 	bl	80112f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010f76:	e1a7      	b.n	80112c8 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f78:	bf00      	nop
    return;
 8010f7a:	e1a5      	b.n	80112c8 <HAL_UART_IRQHandler+0x604>
 8010f7c:	10000001 	.word	0x10000001
 8010f80:	04000120 	.word	0x04000120
 8010f84:	08011ab7 	.word	0x08011ab7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	f040 8150 	bne.w	8011232 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f96:	f003 0310 	and.w	r3, r3, #16
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 8149 	beq.w	8011232 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010fa4:	f003 0310 	and.w	r3, r3, #16
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	f000 8142 	beq.w	8011232 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2210      	movs	r2, #16
 8010fb4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	689b      	ldr	r3, [r3, #8]
 8010fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fc0:	2b40      	cmp	r3, #64	@ 0x40
 8010fc2:	f040 80b8 	bne.w	8011136 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f000 8177 	beq.w	80112cc <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010fe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	f080 816f 	bcs.w	80112cc <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010ff4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011000:	2b81      	cmp	r3, #129	@ 0x81
 8011002:	f000 8087 	beq.w	8011114 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801100e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011012:	e853 3f00 	ldrex	r3, [r3]
 8011016:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801101a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801101e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011022:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	461a      	mov	r2, r3
 801102c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011030:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011034:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011038:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801103c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011040:	e841 2300 	strex	r3, r2, [r1]
 8011044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8011048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801104c:	2b00      	cmp	r3, #0
 801104e:	d1da      	bne.n	8011006 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	3308      	adds	r3, #8
 8011056:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011058:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801105a:	e853 3f00 	ldrex	r3, [r3]
 801105e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011062:	f023 0301 	bic.w	r3, r3, #1
 8011066:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	3308      	adds	r3, #8
 8011070:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011074:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011078:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801107a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801107c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011080:	e841 2300 	strex	r3, r2, [r1]
 8011084:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011088:	2b00      	cmp	r3, #0
 801108a:	d1e1      	bne.n	8011050 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3308      	adds	r3, #8
 8011092:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011096:	e853 3f00 	ldrex	r3, [r3]
 801109a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801109c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801109e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80110a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	3308      	adds	r3, #8
 80110ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80110b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80110b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80110b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80110b8:	e841 2300 	strex	r3, r2, [r1]
 80110bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80110be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d1e3      	bne.n	801108c <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2220      	movs	r2, #32
 80110c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2200      	movs	r2, #0
 80110d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110da:	e853 3f00 	ldrex	r3, [r3]
 80110de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80110e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110e2:	f023 0310 	bic.w	r3, r3, #16
 80110e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	461a      	mov	r2, r3
 80110f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80110f6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80110fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80110fc:	e841 2300 	strex	r3, r2, [r1]
 8011100:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011104:	2b00      	cmp	r3, #0
 8011106:	d1e4      	bne.n	80110d2 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801110e:	4618      	mov	r0, r3
 8011110:	f7f5 f8a6 	bl	8006260 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2202      	movs	r2, #2
 8011118:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011126:	b29b      	uxth	r3, r3
 8011128:	1ad3      	subs	r3, r2, r3
 801112a:	b29b      	uxth	r3, r3
 801112c:	4619      	mov	r1, r3
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 f8e8 	bl	8011304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011134:	e0ca      	b.n	80112cc <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011142:	b29b      	uxth	r3, r3
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011150:	b29b      	uxth	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	f000 80bc 	beq.w	80112d0 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8011158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801115c:	2b00      	cmp	r3, #0
 801115e:	f000 80b7 	beq.w	80112d0 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801116a:	e853 3f00 	ldrex	r3, [r3]
 801116e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011172:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011176:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	461a      	mov	r2, r3
 8011180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011184:	647b      	str	r3, [r7, #68]	@ 0x44
 8011186:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801118a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801118c:	e841 2300 	strex	r3, r2, [r1]
 8011190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011194:	2b00      	cmp	r3, #0
 8011196:	d1e4      	bne.n	8011162 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	3308      	adds	r3, #8
 801119e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a2:	e853 3f00 	ldrex	r3, [r3]
 80111a6:	623b      	str	r3, [r7, #32]
   return(result);
 80111a8:	6a3b      	ldr	r3, [r7, #32]
 80111aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80111ae:	f023 0301 	bic.w	r3, r3, #1
 80111b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	3308      	adds	r3, #8
 80111bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80111c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80111c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80111c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111c8:	e841 2300 	strex	r3, r2, [r1]
 80111cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80111ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d1e1      	bne.n	8011198 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2220      	movs	r2, #32
 80111d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2200      	movs	r2, #0
 80111e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	e853 3f00 	ldrex	r3, [r3]
 80111f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f023 0310 	bic.w	r3, r3, #16
 80111fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	461a      	mov	r2, r3
 8011206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801120a:	61fb      	str	r3, [r7, #28]
 801120c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801120e:	69b9      	ldr	r1, [r7, #24]
 8011210:	69fa      	ldr	r2, [r7, #28]
 8011212:	e841 2300 	strex	r3, r2, [r1]
 8011216:	617b      	str	r3, [r7, #20]
   return(result);
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d1e4      	bne.n	80111e8 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2202      	movs	r2, #2
 8011222:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011228:	4619      	mov	r1, r3
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 f86a 	bl	8011304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011230:	e04e      	b.n	80112d0 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801123a:	2b00      	cmp	r3, #0
 801123c:	d014      	beq.n	8011268 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801123e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011246:	2b00      	cmp	r3, #0
 8011248:	d105      	bne.n	8011256 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801124a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801124e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011252:	2b00      	cmp	r3, #0
 8011254:	d008      	beq.n	8011268 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801125a:	2b00      	cmp	r3, #0
 801125c:	d03a      	beq.n	80112d4 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	4798      	blx	r3
    }
    return;
 8011266:	e035      	b.n	80112d4 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801126c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011270:	2b00      	cmp	r3, #0
 8011272:	d009      	beq.n	8011288 <HAL_UART_IRQHandler+0x5c4>
 8011274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801127c:	2b00      	cmp	r3, #0
 801127e:	d003      	beq.n	8011288 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f000 fc2e 	bl	8011ae2 <UART_EndTransmit_IT>
    return;
 8011286:	e026      	b.n	80112d6 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801128c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011290:	2b00      	cmp	r3, #0
 8011292:	d009      	beq.n	80112a8 <HAL_UART_IRQHandler+0x5e4>
 8011294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011298:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801129c:	2b00      	cmp	r3, #0
 801129e:	d003      	beq.n	80112a8 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f000 fc53 	bl	8011b4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112a6:	e016      	b.n	80112d6 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80112a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d010      	beq.n	80112d6 <HAL_UART_IRQHandler+0x612>
 80112b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	da0c      	bge.n	80112d6 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f000 fc3b 	bl	8011b38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112c2:	e008      	b.n	80112d6 <HAL_UART_IRQHandler+0x612>
      return;
 80112c4:	bf00      	nop
 80112c6:	e006      	b.n	80112d6 <HAL_UART_IRQHandler+0x612>
    return;
 80112c8:	bf00      	nop
 80112ca:	e004      	b.n	80112d6 <HAL_UART_IRQHandler+0x612>
      return;
 80112cc:	bf00      	nop
 80112ce:	e002      	b.n	80112d6 <HAL_UART_IRQHandler+0x612>
      return;
 80112d0:	bf00      	nop
 80112d2:	e000      	b.n	80112d6 <HAL_UART_IRQHandler+0x612>
    return;
 80112d4:	bf00      	nop
  }
}
 80112d6:	37e8      	adds	r7, #232	@ 0xe8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}

080112dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80112dc:	b480      	push	{r7}
 80112de:	b083      	sub	sp, #12
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80112e4:	bf00      	nop
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr

080112f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80112f8:	bf00      	nop
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	460b      	mov	r3, r1
 801130e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011310:	bf00      	nop
 8011312:	370c      	adds	r7, #12
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr

0801131c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801131c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011320:	b094      	sub	sp, #80	@ 0x50
 8011322:	af00      	add	r7, sp, #0
 8011324:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011326:	2300      	movs	r3, #0
 8011328:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 801132c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	4b83      	ldr	r3, [pc, #524]	@ (8011540 <UART_SetConfig+0x224>)
 8011332:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011336:	689a      	ldr	r2, [r3, #8]
 8011338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	431a      	orrs	r2, r3
 801133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011340:	695b      	ldr	r3, [r3, #20]
 8011342:	431a      	orrs	r2, r3
 8011344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011346:	69db      	ldr	r3, [r3, #28]
 8011348:	4313      	orrs	r3, r2
 801134a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801134c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	497c      	ldr	r1, [pc, #496]	@ (8011544 <UART_SetConfig+0x228>)
 8011354:	4019      	ands	r1, r3
 8011356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801135c:	430b      	orrs	r3, r1
 801135e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136c:	68d9      	ldr	r1, [r3, #12]
 801136e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	ea40 0301 	orr.w	r3, r0, r1
 8011376:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801137a:	699b      	ldr	r3, [r3, #24]
 801137c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801137e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	4b6f      	ldr	r3, [pc, #444]	@ (8011540 <UART_SetConfig+0x224>)
 8011384:	429a      	cmp	r2, r3
 8011386:	d009      	beq.n	801139c <UART_SetConfig+0x80>
 8011388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801138a:	681a      	ldr	r2, [r3, #0]
 801138c:	4b6e      	ldr	r3, [pc, #440]	@ (8011548 <UART_SetConfig+0x22c>)
 801138e:	429a      	cmp	r2, r3
 8011390:	d004      	beq.n	801139c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011394:	6a1a      	ldr	r2, [r3, #32]
 8011396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011398:	4313      	orrs	r3, r2
 801139a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801139c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	689b      	ldr	r3, [r3, #8]
 80113a2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80113a6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80113aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113b0:	430b      	orrs	r3, r1
 80113b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80113b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113ba:	f023 000f 	bic.w	r0, r3, #15
 80113be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80113c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	ea40 0301 	orr.w	r3, r0, r1
 80113ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80113cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	4b5e      	ldr	r3, [pc, #376]	@ (801154c <UART_SetConfig+0x230>)
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d102      	bne.n	80113dc <UART_SetConfig+0xc0>
 80113d6:	2301      	movs	r3, #1
 80113d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113da:	e032      	b.n	8011442 <UART_SetConfig+0x126>
 80113dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	4b5b      	ldr	r3, [pc, #364]	@ (8011550 <UART_SetConfig+0x234>)
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d102      	bne.n	80113ec <UART_SetConfig+0xd0>
 80113e6:	2302      	movs	r3, #2
 80113e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113ea:	e02a      	b.n	8011442 <UART_SetConfig+0x126>
 80113ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	4b58      	ldr	r3, [pc, #352]	@ (8011554 <UART_SetConfig+0x238>)
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d102      	bne.n	80113fc <UART_SetConfig+0xe0>
 80113f6:	2304      	movs	r3, #4
 80113f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113fa:	e022      	b.n	8011442 <UART_SetConfig+0x126>
 80113fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	4b55      	ldr	r3, [pc, #340]	@ (8011558 <UART_SetConfig+0x23c>)
 8011402:	429a      	cmp	r2, r3
 8011404:	d102      	bne.n	801140c <UART_SetConfig+0xf0>
 8011406:	2308      	movs	r3, #8
 8011408:	64bb      	str	r3, [r7, #72]	@ 0x48
 801140a:	e01a      	b.n	8011442 <UART_SetConfig+0x126>
 801140c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	4b52      	ldr	r3, [pc, #328]	@ (801155c <UART_SetConfig+0x240>)
 8011412:	429a      	cmp	r2, r3
 8011414:	d102      	bne.n	801141c <UART_SetConfig+0x100>
 8011416:	2310      	movs	r3, #16
 8011418:	64bb      	str	r3, [r7, #72]	@ 0x48
 801141a:	e012      	b.n	8011442 <UART_SetConfig+0x126>
 801141c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801141e:	681a      	ldr	r2, [r3, #0]
 8011420:	4b4f      	ldr	r3, [pc, #316]	@ (8011560 <UART_SetConfig+0x244>)
 8011422:	429a      	cmp	r2, r3
 8011424:	d103      	bne.n	801142e <UART_SetConfig+0x112>
 8011426:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801142a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801142c:	e009      	b.n	8011442 <UART_SetConfig+0x126>
 801142e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	4b43      	ldr	r3, [pc, #268]	@ (8011540 <UART_SetConfig+0x224>)
 8011434:	429a      	cmp	r2, r3
 8011436:	d102      	bne.n	801143e <UART_SetConfig+0x122>
 8011438:	2320      	movs	r3, #32
 801143a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801143c:	e001      	b.n	8011442 <UART_SetConfig+0x126>
 801143e:	2300      	movs	r3, #0
 8011440:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	4b3e      	ldr	r3, [pc, #248]	@ (8011540 <UART_SetConfig+0x224>)
 8011448:	429a      	cmp	r2, r3
 801144a:	d005      	beq.n	8011458 <UART_SetConfig+0x13c>
 801144c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	4b3d      	ldr	r3, [pc, #244]	@ (8011548 <UART_SetConfig+0x22c>)
 8011452:	429a      	cmp	r2, r3
 8011454:	f040 8088 	bne.w	8011568 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801145a:	2200      	movs	r2, #0
 801145c:	623b      	str	r3, [r7, #32]
 801145e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011460:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011464:	f7fb fdd6 	bl	800d014 <HAL_RCCEx_GetPeriphCLKFreq>
 8011468:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801146a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801146c:	2b00      	cmp	r3, #0
 801146e:	f000 80eb 	beq.w	8011648 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011476:	4a3b      	ldr	r2, [pc, #236]	@ (8011564 <UART_SetConfig+0x248>)
 8011478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801147c:	461a      	mov	r2, r3
 801147e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011480:	fbb3 f3f2 	udiv	r3, r3, r2
 8011484:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	4613      	mov	r3, r2
 801148c:	005b      	lsls	r3, r3, #1
 801148e:	4413      	add	r3, r2
 8011490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011492:	429a      	cmp	r2, r3
 8011494:	d305      	bcc.n	80114a2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801149c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801149e:	429a      	cmp	r2, r3
 80114a0:	d903      	bls.n	80114aa <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80114a2:	2301      	movs	r3, #1
 80114a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80114a8:	e048      	b.n	801153c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114ac:	2200      	movs	r2, #0
 80114ae:	61bb      	str	r3, [r7, #24]
 80114b0:	61fa      	str	r2, [r7, #28]
 80114b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114b6:	4a2b      	ldr	r2, [pc, #172]	@ (8011564 <UART_SetConfig+0x248>)
 80114b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114bc:	b29b      	uxth	r3, r3
 80114be:	2200      	movs	r2, #0
 80114c0:	613b      	str	r3, [r7, #16]
 80114c2:	617a      	str	r2, [r7, #20]
 80114c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80114c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80114cc:	f7ef fb9a 	bl	8000c04 <__aeabi_uldivmod>
 80114d0:	4602      	mov	r2, r0
 80114d2:	460b      	mov	r3, r1
 80114d4:	4610      	mov	r0, r2
 80114d6:	4619      	mov	r1, r3
 80114d8:	f04f 0200 	mov.w	r2, #0
 80114dc:	f04f 0300 	mov.w	r3, #0
 80114e0:	020b      	lsls	r3, r1, #8
 80114e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80114e6:	0202      	lsls	r2, r0, #8
 80114e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80114ea:	6849      	ldr	r1, [r1, #4]
 80114ec:	0849      	lsrs	r1, r1, #1
 80114ee:	2000      	movs	r0, #0
 80114f0:	460c      	mov	r4, r1
 80114f2:	4605      	mov	r5, r0
 80114f4:	eb12 0804 	adds.w	r8, r2, r4
 80114f8:	eb43 0905 	adc.w	r9, r3, r5
 80114fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	2200      	movs	r2, #0
 8011502:	60bb      	str	r3, [r7, #8]
 8011504:	60fa      	str	r2, [r7, #12]
 8011506:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801150a:	4640      	mov	r0, r8
 801150c:	4649      	mov	r1, r9
 801150e:	f7ef fb79 	bl	8000c04 <__aeabi_uldivmod>
 8011512:	4602      	mov	r2, r0
 8011514:	460b      	mov	r3, r1
 8011516:	4613      	mov	r3, r2
 8011518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801151a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801151c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011520:	d308      	bcc.n	8011534 <UART_SetConfig+0x218>
 8011522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011524:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011528:	d204      	bcs.n	8011534 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 801152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011530:	60da      	str	r2, [r3, #12]
 8011532:	e003      	b.n	801153c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8011534:	2301      	movs	r3, #1
 8011536:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 801153a:	e085      	b.n	8011648 <UART_SetConfig+0x32c>
 801153c:	e084      	b.n	8011648 <UART_SetConfig+0x32c>
 801153e:	bf00      	nop
 8011540:	46002400 	.word	0x46002400
 8011544:	cfff69f3 	.word	0xcfff69f3
 8011548:	56002400 	.word	0x56002400
 801154c:	40013800 	.word	0x40013800
 8011550:	40004400 	.word	0x40004400
 8011554:	40004800 	.word	0x40004800
 8011558:	40004c00 	.word	0x40004c00
 801155c:	40005000 	.word	0x40005000
 8011560:	40006400 	.word	0x40006400
 8011564:	08012880 	.word	0x08012880
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801156a:	69db      	ldr	r3, [r3, #28]
 801156c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011570:	d13c      	bne.n	80115ec <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011574:	2200      	movs	r2, #0
 8011576:	603b      	str	r3, [r7, #0]
 8011578:	607a      	str	r2, [r7, #4]
 801157a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801157e:	f7fb fd49 	bl	800d014 <HAL_RCCEx_GetPeriphCLKFreq>
 8011582:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011586:	2b00      	cmp	r3, #0
 8011588:	d05e      	beq.n	8011648 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801158a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801158e:	4a39      	ldr	r2, [pc, #228]	@ (8011674 <UART_SetConfig+0x358>)
 8011590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011594:	461a      	mov	r2, r3
 8011596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011598:	fbb3 f3f2 	udiv	r3, r3, r2
 801159c:	005a      	lsls	r2, r3, #1
 801159e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	085b      	lsrs	r3, r3, #1
 80115a4:	441a      	add	r2, r3
 80115a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80115ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80115b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115b2:	2b0f      	cmp	r3, #15
 80115b4:	d916      	bls.n	80115e4 <UART_SetConfig+0x2c8>
 80115b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80115bc:	d212      	bcs.n	80115e4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80115be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	f023 030f 	bic.w	r3, r3, #15
 80115c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80115c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115ca:	085b      	lsrs	r3, r3, #1
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	f003 0307 	and.w	r3, r3, #7
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80115d6:	4313      	orrs	r3, r2
 80115d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80115da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80115e0:	60da      	str	r2, [r3, #12]
 80115e2:	e031      	b.n	8011648 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80115e4:	2301      	movs	r3, #1
 80115e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80115ea:	e02d      	b.n	8011648 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80115ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115ee:	2200      	movs	r2, #0
 80115f0:	469a      	mov	sl, r3
 80115f2:	4693      	mov	fp, r2
 80115f4:	4650      	mov	r0, sl
 80115f6:	4659      	mov	r1, fp
 80115f8:	f7fb fd0c 	bl	800d014 <HAL_RCCEx_GetPeriphCLKFreq>
 80115fc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80115fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011600:	2b00      	cmp	r3, #0
 8011602:	d021      	beq.n	8011648 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011608:	4a1a      	ldr	r2, [pc, #104]	@ (8011674 <UART_SetConfig+0x358>)
 801160a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801160e:	461a      	mov	r2, r3
 8011610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011612:	fbb3 f2f2 	udiv	r2, r3, r2
 8011616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	085b      	lsrs	r3, r3, #1
 801161c:	441a      	add	r2, r3
 801161e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	fbb2 f3f3 	udiv	r3, r2, r3
 8011626:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801162a:	2b0f      	cmp	r3, #15
 801162c:	d909      	bls.n	8011642 <UART_SetConfig+0x326>
 801162e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011634:	d205      	bcs.n	8011642 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011638:	b29a      	uxth	r2, r3
 801163a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	60da      	str	r2, [r3, #12]
 8011640:	e002      	b.n	8011648 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8011642:	2301      	movs	r3, #1
 8011644:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164a:	2201      	movs	r2, #1
 801164c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011652:	2201      	movs	r2, #1
 8011654:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801165a:	2200      	movs	r2, #0
 801165c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801165e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011660:	2200      	movs	r2, #0
 8011662:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011664:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011668:	4618      	mov	r0, r3
 801166a:	3750      	adds	r7, #80	@ 0x50
 801166c:	46bd      	mov	sp, r7
 801166e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011672:	bf00      	nop
 8011674:	08012880 	.word	0x08012880

08011678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011678:	b480      	push	{r7}
 801167a:	b083      	sub	sp, #12
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011684:	f003 0308 	and.w	r3, r3, #8
 8011688:	2b00      	cmp	r3, #0
 801168a:	d00a      	beq.n	80116a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	685b      	ldr	r3, [r3, #4]
 8011692:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	430a      	orrs	r2, r1
 80116a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116a6:	f003 0301 	and.w	r3, r3, #1
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00a      	beq.n	80116c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	430a      	orrs	r2, r1
 80116c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116c8:	f003 0302 	and.w	r3, r3, #2
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d00a      	beq.n	80116e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	430a      	orrs	r2, r1
 80116e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116ea:	f003 0304 	and.w	r3, r3, #4
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00a      	beq.n	8011708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	430a      	orrs	r2, r1
 8011706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801170c:	f003 0310 	and.w	r3, r3, #16
 8011710:	2b00      	cmp	r3, #0
 8011712:	d00a      	beq.n	801172a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	689b      	ldr	r3, [r3, #8]
 801171a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	430a      	orrs	r2, r1
 8011728:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801172e:	f003 0320 	and.w	r3, r3, #32
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00a      	beq.n	801174c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	430a      	orrs	r2, r1
 801174a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011754:	2b00      	cmp	r3, #0
 8011756:	d01a      	beq.n	801178e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	430a      	orrs	r2, r1
 801176c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011776:	d10a      	bne.n	801178e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	430a      	orrs	r2, r1
 801178c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00a      	beq.n	80117b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	430a      	orrs	r2, r1
 80117ae:	605a      	str	r2, [r3, #4]
  }
}
 80117b0:	bf00      	nop
 80117b2:	370c      	adds	r7, #12
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr

080117bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b098      	sub	sp, #96	@ 0x60
 80117c0:	af02      	add	r7, sp, #8
 80117c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2200      	movs	r2, #0
 80117c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80117cc:	f7f1 ffd8 	bl	8003780 <HAL_GetTick>
 80117d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f003 0308 	and.w	r3, r3, #8
 80117dc:	2b08      	cmp	r3, #8
 80117de:	d12f      	bne.n	8011840 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80117e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80117e4:	9300      	str	r3, [sp, #0]
 80117e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80117e8:	2200      	movs	r2, #0
 80117ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f88e 	bl	8011910 <UART_WaitOnFlagUntilTimeout>
 80117f4:	4603      	mov	r3, r0
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d022      	beq.n	8011840 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011802:	e853 3f00 	ldrex	r3, [r3]
 8011806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801180a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801180e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	461a      	mov	r2, r3
 8011816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011818:	647b      	str	r3, [r7, #68]	@ 0x44
 801181a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801181c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801181e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011820:	e841 2300 	strex	r3, r2, [r1]
 8011824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011828:	2b00      	cmp	r3, #0
 801182a:	d1e6      	bne.n	80117fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2220      	movs	r2, #32
 8011830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2200      	movs	r2, #0
 8011838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801183c:	2303      	movs	r3, #3
 801183e:	e063      	b.n	8011908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f003 0304 	and.w	r3, r3, #4
 801184a:	2b04      	cmp	r3, #4
 801184c:	d149      	bne.n	80118e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801184e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011852:	9300      	str	r3, [sp, #0]
 8011854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011856:	2200      	movs	r2, #0
 8011858:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f000 f857 	bl	8011910 <UART_WaitOnFlagUntilTimeout>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d03c      	beq.n	80118e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011870:	e853 3f00 	ldrex	r3, [r3]
 8011874:	623b      	str	r3, [r7, #32]
   return(result);
 8011876:	6a3b      	ldr	r3, [r7, #32]
 8011878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801187c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	461a      	mov	r2, r3
 8011884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011886:	633b      	str	r3, [r7, #48]	@ 0x30
 8011888:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801188a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801188c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801188e:	e841 2300 	strex	r3, r2, [r1]
 8011892:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011896:	2b00      	cmp	r3, #0
 8011898:	d1e6      	bne.n	8011868 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	3308      	adds	r3, #8
 80118a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	e853 3f00 	ldrex	r3, [r3]
 80118a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f023 0301 	bic.w	r3, r3, #1
 80118b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	3308      	adds	r3, #8
 80118b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80118ba:	61fa      	str	r2, [r7, #28]
 80118bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118be:	69b9      	ldr	r1, [r7, #24]
 80118c0:	69fa      	ldr	r2, [r7, #28]
 80118c2:	e841 2300 	strex	r3, r2, [r1]
 80118c6:	617b      	str	r3, [r7, #20]
   return(result);
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d1e5      	bne.n	801189a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2220      	movs	r2, #32
 80118d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80118de:	2303      	movs	r3, #3
 80118e0:	e012      	b.n	8011908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2220      	movs	r2, #32
 80118e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2220      	movs	r2, #32
 80118ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2200      	movs	r2, #0
 80118f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2200      	movs	r2, #0
 80118fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2200      	movs	r2, #0
 8011902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3758      	adds	r7, #88	@ 0x58
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	603b      	str	r3, [r7, #0]
 801191c:	4613      	mov	r3, r2
 801191e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011920:	e04f      	b.n	80119c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011922:	69bb      	ldr	r3, [r7, #24]
 8011924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011928:	d04b      	beq.n	80119c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801192a:	f7f1 ff29 	bl	8003780 <HAL_GetTick>
 801192e:	4602      	mov	r2, r0
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	1ad3      	subs	r3, r2, r3
 8011934:	69ba      	ldr	r2, [r7, #24]
 8011936:	429a      	cmp	r2, r3
 8011938:	d302      	bcc.n	8011940 <UART_WaitOnFlagUntilTimeout+0x30>
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d101      	bne.n	8011944 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011940:	2303      	movs	r3, #3
 8011942:	e04e      	b.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	f003 0304 	and.w	r3, r3, #4
 801194e:	2b00      	cmp	r3, #0
 8011950:	d037      	beq.n	80119c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	2b80      	cmp	r3, #128	@ 0x80
 8011956:	d034      	beq.n	80119c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	2b40      	cmp	r3, #64	@ 0x40
 801195c:	d031      	beq.n	80119c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	69db      	ldr	r3, [r3, #28]
 8011964:	f003 0308 	and.w	r3, r3, #8
 8011968:	2b08      	cmp	r3, #8
 801196a:	d110      	bne.n	801198e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2208      	movs	r2, #8
 8011972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011974:	68f8      	ldr	r0, [r7, #12]
 8011976:	f000 f838 	bl	80119ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2208      	movs	r2, #8
 801197e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2200      	movs	r2, #0
 8011986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801198a:	2301      	movs	r3, #1
 801198c:	e029      	b.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	69db      	ldr	r3, [r3, #28]
 8011994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801199c:	d111      	bne.n	80119c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80119a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80119a8:	68f8      	ldr	r0, [r7, #12]
 80119aa:	f000 f81e 	bl	80119ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2220      	movs	r2, #32
 80119b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	2200      	movs	r2, #0
 80119ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80119be:	2303      	movs	r3, #3
 80119c0:	e00f      	b.n	80119e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	69da      	ldr	r2, [r3, #28]
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	4013      	ands	r3, r2
 80119cc:	68ba      	ldr	r2, [r7, #8]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	bf0c      	ite	eq
 80119d2:	2301      	moveq	r3, #1
 80119d4:	2300      	movne	r3, #0
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	461a      	mov	r2, r3
 80119da:	79fb      	ldrb	r3, [r7, #7]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d0a0      	beq.n	8011922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3710      	adds	r7, #16
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80119ea:	b480      	push	{r7}
 80119ec:	b095      	sub	sp, #84	@ 0x54
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119fa:	e853 3f00 	ldrex	r3, [r3]
 80119fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011a18:	e841 2300 	strex	r3, r2, [r1]
 8011a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d1e6      	bne.n	80119f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	3308      	adds	r3, #8
 8011a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a2c:	6a3b      	ldr	r3, [r7, #32]
 8011a2e:	e853 3f00 	ldrex	r3, [r3]
 8011a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a34:	69fb      	ldr	r3, [r7, #28]
 8011a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011a3a:	f023 0301 	bic.w	r3, r3, #1
 8011a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3308      	adds	r3, #8
 8011a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a50:	e841 2300 	strex	r3, r2, [r1]
 8011a54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d1e3      	bne.n	8011a24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a60:	2b01      	cmp	r3, #1
 8011a62:	d118      	bne.n	8011a96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	e853 3f00 	ldrex	r3, [r3]
 8011a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	f023 0310 	bic.w	r3, r3, #16
 8011a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a82:	61bb      	str	r3, [r7, #24]
 8011a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a86:	6979      	ldr	r1, [r7, #20]
 8011a88:	69ba      	ldr	r2, [r7, #24]
 8011a8a:	e841 2300 	strex	r3, r2, [r1]
 8011a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d1e6      	bne.n	8011a64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2220      	movs	r2, #32
 8011a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011aaa:	bf00      	nop
 8011aac:	3754      	adds	r7, #84	@ 0x54
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr

08011ab6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011ab6:	b580      	push	{r7, lr}
 8011ab8:	b084      	sub	sp, #16
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011ac2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011ad4:	68f8      	ldr	r0, [r7, #12]
 8011ad6:	f7ff fc0b 	bl	80112f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ada:	bf00      	nop
 8011adc:	3710      	adds	r7, #16
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}

08011ae2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011ae2:	b580      	push	{r7, lr}
 8011ae4:	b088      	sub	sp, #32
 8011ae6:	af00      	add	r7, sp, #0
 8011ae8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	e853 3f00 	ldrex	r3, [r3]
 8011af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011afe:	61fb      	str	r3, [r7, #28]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	461a      	mov	r2, r3
 8011b06:	69fb      	ldr	r3, [r7, #28]
 8011b08:	61bb      	str	r3, [r7, #24]
 8011b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b0c:	6979      	ldr	r1, [r7, #20]
 8011b0e:	69ba      	ldr	r2, [r7, #24]
 8011b10:	e841 2300 	strex	r3, r2, [r1]
 8011b14:	613b      	str	r3, [r7, #16]
   return(result);
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d1e6      	bne.n	8011aea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2220      	movs	r2, #32
 8011b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2200      	movs	r2, #0
 8011b28:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7ff fbd6 	bl	80112dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b30:	bf00      	nop
 8011b32:	3720      	adds	r7, #32
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011b40:	bf00      	nop
 8011b42:	370c      	adds	r7, #12
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr

08011b4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011b54:	bf00      	nop
 8011b56:	370c      	adds	r7, #12
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5e:	4770      	bx	lr

08011b60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b085      	sub	sp, #20
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d101      	bne.n	8011b76 <HAL_UARTEx_DisableFifoMode+0x16>
 8011b72:	2302      	movs	r3, #2
 8011b74:	e027      	b.n	8011bc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2201      	movs	r2, #1
 8011b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2224      	movs	r2, #36	@ 0x24
 8011b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f022 0201 	bic.w	r2, r2, #1
 8011b9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011ba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	68fa      	ldr	r2, [r7, #12]
 8011bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2220      	movs	r2, #32
 8011bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011bc4:	2300      	movs	r3, #0
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3714      	adds	r7, #20
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd0:	4770      	bx	lr

08011bd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011bd2:	b580      	push	{r7, lr}
 8011bd4:	b084      	sub	sp, #16
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	6078      	str	r0, [r7, #4]
 8011bda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d101      	bne.n	8011bea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011be6:	2302      	movs	r3, #2
 8011be8:	e02d      	b.n	8011c46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2201      	movs	r2, #1
 8011bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2224      	movs	r2, #36	@ 0x24
 8011bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	f022 0201 	bic.w	r2, r2, #1
 8011c10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	683a      	ldr	r2, [r7, #0]
 8011c22:	430a      	orrs	r2, r1
 8011c24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f000 f850 	bl	8011ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	68fa      	ldr	r2, [r7, #12]
 8011c32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2220      	movs	r2, #32
 8011c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011c44:	2300      	movs	r3, #0
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3710      	adds	r7, #16
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}

08011c4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c4e:	b580      	push	{r7, lr}
 8011c50:	b084      	sub	sp, #16
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
 8011c56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d101      	bne.n	8011c66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011c62:	2302      	movs	r3, #2
 8011c64:	e02d      	b.n	8011cc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2224      	movs	r2, #36	@ 0x24
 8011c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f022 0201 	bic.w	r2, r2, #1
 8011c8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	689b      	ldr	r3, [r3, #8]
 8011c94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	683a      	ldr	r2, [r7, #0]
 8011c9e:	430a      	orrs	r2, r1
 8011ca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f812 	bl	8011ccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2220      	movs	r2, #32
 8011cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011cc0:	2300      	movs	r3, #0
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3710      	adds	r7, #16
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
	...

08011ccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b085      	sub	sp, #20
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d108      	bne.n	8011cee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2201      	movs	r2, #1
 8011ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011cec:	e031      	b.n	8011d52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011cee:	2308      	movs	r3, #8
 8011cf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011cf2:	2308      	movs	r3, #8
 8011cf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	689b      	ldr	r3, [r3, #8]
 8011cfc:	0e5b      	lsrs	r3, r3, #25
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	f003 0307 	and.w	r3, r3, #7
 8011d04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	689b      	ldr	r3, [r3, #8]
 8011d0c:	0f5b      	lsrs	r3, r3, #29
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	f003 0307 	and.w	r3, r3, #7
 8011d14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d16:	7bbb      	ldrb	r3, [r7, #14]
 8011d18:	7b3a      	ldrb	r2, [r7, #12]
 8011d1a:	4911      	ldr	r1, [pc, #68]	@ (8011d60 <UARTEx_SetNbDataToProcess+0x94>)
 8011d1c:	5c8a      	ldrb	r2, [r1, r2]
 8011d1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011d22:	7b3a      	ldrb	r2, [r7, #12]
 8011d24:	490f      	ldr	r1, [pc, #60]	@ (8011d64 <UARTEx_SetNbDataToProcess+0x98>)
 8011d26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d28:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d2c:	b29a      	uxth	r2, r3
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d34:	7bfb      	ldrb	r3, [r7, #15]
 8011d36:	7b7a      	ldrb	r2, [r7, #13]
 8011d38:	4909      	ldr	r1, [pc, #36]	@ (8011d60 <UARTEx_SetNbDataToProcess+0x94>)
 8011d3a:	5c8a      	ldrb	r2, [r1, r2]
 8011d3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011d40:	7b7a      	ldrb	r2, [r7, #13]
 8011d42:	4908      	ldr	r1, [pc, #32]	@ (8011d64 <UARTEx_SetNbDataToProcess+0x98>)
 8011d44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d46:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011d52:	bf00      	nop
 8011d54:	3714      	adds	r7, #20
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop
 8011d60:	08012898 	.word	0x08012898
 8011d64:	080128a0 	.word	0x080128a0

08011d68 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b086      	sub	sp, #24
 8011d6c:	af02      	add	r7, sp, #8
 8011d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d70:	2300      	movs	r3, #0
 8011d72:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8011d74:	f7f1 fd04 	bl	8003780 <HAL_GetTick>
 8011d78:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d102      	bne.n	8011d86 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011d80:	2301      	movs	r3, #1
 8011d82:	73fb      	strb	r3, [r7, #15]
 8011d84:	e137      	b.n	8011ff6 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	4a76      	ldr	r2, [pc, #472]	@ (8011f64 <HAL_XSPI_Init+0x1fc>)
 8011d8c:	4293      	cmp	r3, r2
 8011d8e:	d008      	beq.n	8011da2 <HAL_XSPI_Init+0x3a>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4a74      	ldr	r2, [pc, #464]	@ (8011f68 <HAL_XSPI_Init+0x200>)
 8011d96:	4293      	cmp	r3, r2
 8011d98:	d003      	beq.n	8011da2 <HAL_XSPI_Init+0x3a>
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	4a73      	ldr	r2, [pc, #460]	@ (8011f6c <HAL_XSPI_Init+0x204>)
 8011da0:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4a72      	ldr	r2, [pc, #456]	@ (8011f70 <HAL_XSPI_Init+0x208>)
 8011da8:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4a6d      	ldr	r2, [pc, #436]	@ (8011f64 <HAL_XSPI_Init+0x1fc>)
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d008      	beq.n	8011dc6 <HAL_XSPI_Init+0x5e>
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	4a6b      	ldr	r2, [pc, #428]	@ (8011f68 <HAL_XSPI_Init+0x200>)
 8011dba:	4293      	cmp	r3, r2
 8011dbc:	d003      	beq.n	8011dc6 <HAL_XSPI_Init+0x5e>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8011f6c <HAL_XSPI_Init+0x204>)
 8011dc4:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	4a66      	ldr	r2, [pc, #408]	@ (8011f64 <HAL_XSPI_Init+0x1fc>)
 8011dcc:	4293      	cmp	r3, r2
 8011dce:	d008      	beq.n	8011de2 <HAL_XSPI_Init+0x7a>
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	4a64      	ldr	r2, [pc, #400]	@ (8011f68 <HAL_XSPI_Init+0x200>)
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d003      	beq.n	8011de2 <HAL_XSPI_Init+0x7a>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	4a63      	ldr	r2, [pc, #396]	@ (8011f6c <HAL_XSPI_Init+0x204>)
 8011de0:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2200      	movs	r2, #0
 8011de6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f040 8102 	bne.w	8011ff6 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f7f0 fcc2 	bl	800277c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011df8:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f000 f8ff 	bl	8012000 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	689a      	ldr	r2, [r3, #8]
 8011e08:	4b5a      	ldr	r3, [pc, #360]	@ (8011f74 <HAL_XSPI_Init+0x20c>)
 8011e0a:	4013      	ands	r3, r2
 8011e0c:	687a      	ldr	r2, [r7, #4]
 8011e0e:	68d1      	ldr	r1, [r2, #12]
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	6912      	ldr	r2, [r2, #16]
 8011e14:	0412      	lsls	r2, r2, #16
 8011e16:	4311      	orrs	r1, r2
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	6952      	ldr	r2, [r2, #20]
 8011e1c:	3a01      	subs	r2, #1
 8011e1e:	0212      	lsls	r2, r2, #8
 8011e20:	4311      	orrs	r1, r2
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	69d2      	ldr	r2, [r2, #28]
 8011e26:	4311      	orrs	r1, r2
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	6812      	ldr	r2, [r2, #0]
 8011e2c:	430b      	orrs	r3, r1
 8011e2e:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a4b      	ldr	r2, [pc, #300]	@ (8011f64 <HAL_XSPI_Init+0x1fc>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d00e      	beq.n	8011e58 <HAL_XSPI_Init+0xf0>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4a4a      	ldr	r2, [pc, #296]	@ (8011f68 <HAL_XSPI_Init+0x200>)
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d009      	beq.n	8011e58 <HAL_XSPI_Init+0xf0>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	4a48      	ldr	r2, [pc, #288]	@ (8011f6c <HAL_XSPI_Init+0x204>)
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	d004      	beq.n	8011e58 <HAL_XSPI_Init+0xf0>
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4a49      	ldr	r2, [pc, #292]	@ (8011f78 <HAL_XSPI_Init+0x210>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d10a      	bne.n	8011e6e <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	689b      	ldr	r3, [r3, #8]
 8011e5e:	f023 0108 	bic.w	r1, r3, #8
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	430a      	orrs	r2, r1
 8011e6c:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6a1a      	ldr	r2, [r3, #32]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	430a      	orrs	r2, r1
 8011e82:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	691b      	ldr	r3, [r3, #16]
 8011e8a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e92:	041a      	lsls	r2, r3, #16
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	430a      	orrs	r2, r1
 8011e9a:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	4a30      	ldr	r2, [pc, #192]	@ (8011f64 <HAL_XSPI_Init+0x1fc>)
 8011ea2:	4293      	cmp	r3, r2
 8011ea4:	d00e      	beq.n	8011ec4 <HAL_XSPI_Init+0x15c>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8011f68 <HAL_XSPI_Init+0x200>)
 8011eac:	4293      	cmp	r3, r2
 8011eae:	d009      	beq.n	8011ec4 <HAL_XSPI_Init+0x15c>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8011f6c <HAL_XSPI_Init+0x204>)
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d004      	beq.n	8011ec4 <HAL_XSPI_Init+0x15c>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8011f78 <HAL_XSPI_Init+0x210>)
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	d10a      	bne.n	8011eda <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	691b      	ldr	r3, [r3, #16]
 8011eca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	430a      	orrs	r2, r1
 8011ed8:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011ee2:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	3b01      	subs	r3, #1
 8011ef4:	021a      	lsls	r2, r3, #8
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	430a      	orrs	r2, r1
 8011efc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	2200      	movs	r2, #0
 8011f08:	2120      	movs	r1, #32
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f000 f887 	bl	801201e <XSPI_WaitFlagStateUntilTimeout>
 8011f10:	4603      	mov	r3, r0
 8011f12:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011f14:	7bfb      	ldrb	r3, [r7, #15]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d16d      	bne.n	8011ff6 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	68db      	ldr	r3, [r3, #12]
 8011f20:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	430a      	orrs	r2, r1
 8011f2e:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	4a0e      	ldr	r2, [pc, #56]	@ (8011f70 <HAL_XSPI_Init+0x208>)
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d004      	beq.n	8011f44 <HAL_XSPI_Init+0x1dc>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8011f7c <HAL_XSPI_Init+0x214>)
 8011f40:	4293      	cmp	r3, r2
 8011f42:	d11d      	bne.n	8011f80 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011f48:	9300      	str	r3, [sp, #0]
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	2120      	movs	r1, #32
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 f864 	bl	801201e <XSPI_WaitFlagStateUntilTimeout>
 8011f56:	4603      	mov	r3, r0
 8011f58:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8011f5a:	7bfb      	ldrb	r3, [r7, #15]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d00f      	beq.n	8011f80 <HAL_XSPI_Init+0x218>
          {
            return status;
 8011f60:	7bfb      	ldrb	r3, [r7, #15]
 8011f62:	e049      	b.n	8011ff8 <HAL_XSPI_Init+0x290>
 8011f64:	420d1400 	.word	0x420d1400
 8011f68:	520d1400 	.word	0x520d1400
 8011f6c:	420d2400 	.word	0x420d2400
 8011f70:	420d3400 	.word	0x420d3400
 8011f74:	f8e0c0fc 	.word	0xf8e0c0fc
 8011f78:	520d2400 	.word	0x520d2400
 8011f7c:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	689a      	ldr	r2, [r3, #8]
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	430a      	orrs	r2, r1
 8011f94:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8011f9e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011faa:	431a      	orrs	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	430a      	orrs	r2, r1
 8011fb2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	681a      	ldr	r2, [r3, #0]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f042 0201 	orr.w	r2, r2, #1
 8011fc4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	699b      	ldr	r3, [r3, #24]
 8011fca:	2b02      	cmp	r3, #2
 8011fcc:	d107      	bne.n	8011fde <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	689a      	ldr	r2, [r3, #8]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f042 0202 	orr.w	r2, r2, #2
 8011fdc:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011fe6:	d103      	bne.n	8011ff0 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2201      	movs	r2, #1
 8011fec:	655a      	str	r2, [r3, #84]	@ 0x54
 8011fee:	e002      	b.n	8011ff6 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2202      	movs	r2, #2
 8011ff4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3710      	adds	r7, #16
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	683a      	ldr	r2, [r7, #0]
 801200e:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8012010:	2300      	movs	r3, #0
}
 8012012:	4618      	mov	r0, r3
 8012014:	370c      	adds	r7, #12
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr

0801201e <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801201e:	b580      	push	{r7, lr}
 8012020:	b084      	sub	sp, #16
 8012022:	af00      	add	r7, sp, #0
 8012024:	60f8      	str	r0, [r7, #12]
 8012026:	60b9      	str	r1, [r7, #8]
 8012028:	603b      	str	r3, [r7, #0]
 801202a:	4613      	mov	r3, r2
 801202c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 801202e:	e01a      	b.n	8012066 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012030:	69bb      	ldr	r3, [r7, #24]
 8012032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012036:	d016      	beq.n	8012066 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012038:	f7f1 fba2 	bl	8003780 <HAL_GetTick>
 801203c:	4602      	mov	r2, r0
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	1ad3      	subs	r3, r2, r3
 8012042:	69ba      	ldr	r2, [r7, #24]
 8012044:	429a      	cmp	r2, r3
 8012046:	d302      	bcc.n	801204e <XSPI_WaitFlagStateUntilTimeout+0x30>
 8012048:	69bb      	ldr	r3, [r7, #24]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d10b      	bne.n	8012066 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012054:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801205a:	f043 0201 	orr.w	r2, r3, #1
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8012062:	2303      	movs	r3, #3
 8012064:	e00e      	b.n	8012084 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	6a1a      	ldr	r2, [r3, #32]
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	4013      	ands	r3, r2
 8012070:	2b00      	cmp	r3, #0
 8012072:	bf14      	ite	ne
 8012074:	2301      	movne	r3, #1
 8012076:	2300      	moveq	r3, #0
 8012078:	b2db      	uxtb	r3, r3
 801207a:	461a      	mov	r2, r3
 801207c:	79fb      	ldrb	r3, [r7, #7]
 801207e:	429a      	cmp	r2, r3
 8012080:	d1d6      	bne.n	8012030 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012082:	2300      	movs	r3, #0
}
 8012084:	4618      	mov	r0, r3
 8012086:	3710      	adds	r7, #16
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801208c:	b084      	sub	sp, #16
 801208e:	b580      	push	{r7, lr}
 8012090:	b084      	sub	sp, #16
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
 8012096:	f107 001c 	add.w	r0, r7, #28
 801209a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801209e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80120a2:	2b03      	cmp	r3, #3
 80120a4:	d105      	bne.n	80120b2 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	68db      	ldr	r3, [r3, #12]
 80120aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f000 fa8e 	bl	80125d4 <USB_CoreReset>
 80120b8:	4603      	mov	r3, r0
 80120ba:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 80120bc:	7fbb      	ldrb	r3, [r7, #30]
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d10b      	bne.n	80120da <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	689b      	ldr	r3, [r3, #8]
 80120c6:	f043 0208 	orr.w	r2, r3, #8
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	689b      	ldr	r3, [r3, #8]
 80120d2:	f043 0220 	orr.w	r2, r3, #32
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 80120da:	7bfb      	ldrb	r3, [r7, #15]
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3710      	adds	r7, #16
 80120e0:	46bd      	mov	sp, r7
 80120e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80120e6:	b004      	add	sp, #16
 80120e8:	4770      	bx	lr

080120ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80120ea:	b480      	push	{r7}
 80120ec:	b083      	sub	sp, #12
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	689b      	ldr	r3, [r3, #8]
 80120f6:	f023 0201 	bic.w	r2, r3, #1
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80120fe:	2300      	movs	r3, #0
}
 8012100:	4618      	mov	r0, r3
 8012102:	370c      	adds	r7, #12
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	460b      	mov	r3, r1
 8012116:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012118:	2300      	movs	r3, #0
 801211a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	68db      	ldr	r3, [r3, #12]
 8012120:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012128:	78fb      	ldrb	r3, [r7, #3]
 801212a:	2b01      	cmp	r3, #1
 801212c:	d115      	bne.n	801215a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	68db      	ldr	r3, [r3, #12]
 8012132:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801213a:	200a      	movs	r0, #10
 801213c:	f7f1 fb2c 	bl	8003798 <HAL_Delay>
      ms += 10U;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	330a      	adds	r3, #10
 8012144:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f000 fa36 	bl	80125b8 <USB_GetMode>
 801214c:	4603      	mov	r3, r0
 801214e:	2b01      	cmp	r3, #1
 8012150:	d01e      	beq.n	8012190 <USB_SetCurrentMode+0x84>
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2bc7      	cmp	r3, #199	@ 0xc7
 8012156:	d9f0      	bls.n	801213a <USB_SetCurrentMode+0x2e>
 8012158:	e01a      	b.n	8012190 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801215a:	78fb      	ldrb	r3, [r7, #3]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d115      	bne.n	801218c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801216c:	200a      	movs	r0, #10
 801216e:	f7f1 fb13 	bl	8003798 <HAL_Delay>
      ms += 10U;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	330a      	adds	r3, #10
 8012176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 fa1d 	bl	80125b8 <USB_GetMode>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d005      	beq.n	8012190 <USB_SetCurrentMode+0x84>
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2bc7      	cmp	r3, #199	@ 0xc7
 8012188:	d9f0      	bls.n	801216c <USB_SetCurrentMode+0x60>
 801218a:	e001      	b.n	8012190 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801218c:	2301      	movs	r3, #1
 801218e:	e005      	b.n	801219c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2bc8      	cmp	r3, #200	@ 0xc8
 8012194:	d101      	bne.n	801219a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012196:	2301      	movs	r3, #1
 8012198:	e000      	b.n	801219c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801219a:	2300      	movs	r3, #0
}
 801219c:	4618      	mov	r0, r3
 801219e:	3710      	adds	r7, #16
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}

080121a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80121a4:	b084      	sub	sp, #16
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b086      	sub	sp, #24
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
 80121ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80121b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80121b6:	2300      	movs	r3, #0
 80121b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80121be:	2300      	movs	r3, #0
 80121c0:	613b      	str	r3, [r7, #16]
 80121c2:	e009      	b.n	80121d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	3340      	adds	r3, #64	@ 0x40
 80121ca:	009b      	lsls	r3, r3, #2
 80121cc:	4413      	add	r3, r2
 80121ce:	2200      	movs	r2, #0
 80121d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	3301      	adds	r3, #1
 80121d6:	613b      	str	r3, [r7, #16]
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	2b0e      	cmp	r3, #14
 80121dc:	d9f2      	bls.n	80121c4 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80121ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d11c      	bne.n	801222c <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012200:	f043 0302 	orr.w	r3, r3, #2
 8012204:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801220a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012216:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012222:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	639a      	str	r2, [r3, #56]	@ 0x38
 801222a:	e011      	b.n	8012250 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012230:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801223c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012248:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012256:	461a      	mov	r2, r3
 8012258:	2300      	movs	r3, #0
 801225a:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801225c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8012260:	2b03      	cmp	r3, #3
 8012262:	d10d      	bne.n	8012280 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012268:	2b00      	cmp	r3, #0
 801226a:	d104      	bne.n	8012276 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801226c:	2100      	movs	r1, #0
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 f968 	bl	8012544 <USB_SetDevSpeed>
 8012274:	e008      	b.n	8012288 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012276:	2101      	movs	r1, #1
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 f963 	bl	8012544 <USB_SetDevSpeed>
 801227e:	e003      	b.n	8012288 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012280:	2103      	movs	r1, #3
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 f95e 	bl	8012544 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012288:	2110      	movs	r1, #16
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 f8fa 	bl	8012484 <USB_FlushTxFifo>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d001      	beq.n	801229a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8012296:	2301      	movs	r3, #1
 8012298:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f000 f924 	bl	80124e8 <USB_FlushRxFifo>
 80122a0:	4603      	mov	r3, r0
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d001      	beq.n	80122aa <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80122a6:	2301      	movs	r3, #1
 80122a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122b0:	461a      	mov	r2, r3
 80122b2:	2300      	movs	r3, #0
 80122b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122bc:	461a      	mov	r2, r3
 80122be:	2300      	movs	r3, #0
 80122c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122c8:	461a      	mov	r2, r3
 80122ca:	2300      	movs	r3, #0
 80122cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80122ce:	2300      	movs	r3, #0
 80122d0:	613b      	str	r3, [r7, #16]
 80122d2:	e043      	b.n	801235c <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	015a      	lsls	r2, r3, #5
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	4413      	add	r3, r2
 80122dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80122e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80122ea:	d118      	bne.n	801231e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d10a      	bne.n	8012308 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	015a      	lsls	r2, r3, #5
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	4413      	add	r3, r2
 80122fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122fe:	461a      	mov	r2, r3
 8012300:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012304:	6013      	str	r3, [r2, #0]
 8012306:	e013      	b.n	8012330 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	015a      	lsls	r2, r3, #5
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4413      	add	r3, r2
 8012310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012314:	461a      	mov	r2, r3
 8012316:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801231a:	6013      	str	r3, [r2, #0]
 801231c:	e008      	b.n	8012330 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	015a      	lsls	r2, r3, #5
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	4413      	add	r3, r2
 8012326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801232a:	461a      	mov	r2, r3
 801232c:	2300      	movs	r3, #0
 801232e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	015a      	lsls	r2, r3, #5
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	4413      	add	r3, r2
 8012338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801233c:	461a      	mov	r2, r3
 801233e:	2300      	movs	r3, #0
 8012340:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	015a      	lsls	r2, r3, #5
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	4413      	add	r3, r2
 801234a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801234e:	461a      	mov	r2, r3
 8012350:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	3301      	adds	r3, #1
 801235a:	613b      	str	r3, [r7, #16]
 801235c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012360:	461a      	mov	r2, r3
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	4293      	cmp	r3, r2
 8012366:	d3b5      	bcc.n	80122d4 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012368:	2300      	movs	r3, #0
 801236a:	613b      	str	r3, [r7, #16]
 801236c:	e043      	b.n	80123f6 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	015a      	lsls	r2, r3, #5
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	4413      	add	r3, r2
 8012376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012384:	d118      	bne.n	80123b8 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d10a      	bne.n	80123a2 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	015a      	lsls	r2, r3, #5
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	4413      	add	r3, r2
 8012394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012398:	461a      	mov	r2, r3
 801239a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801239e:	6013      	str	r3, [r2, #0]
 80123a0:	e013      	b.n	80123ca <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	015a      	lsls	r2, r3, #5
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	4413      	add	r3, r2
 80123aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123ae:	461a      	mov	r2, r3
 80123b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80123b4:	6013      	str	r3, [r2, #0]
 80123b6:	e008      	b.n	80123ca <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	015a      	lsls	r2, r3, #5
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	4413      	add	r3, r2
 80123c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123c4:	461a      	mov	r2, r3
 80123c6:	2300      	movs	r3, #0
 80123c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	015a      	lsls	r2, r3, #5
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	4413      	add	r3, r2
 80123d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123d6:	461a      	mov	r2, r3
 80123d8:	2300      	movs	r3, #0
 80123da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	015a      	lsls	r2, r3, #5
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	4413      	add	r3, r2
 80123e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80123e8:	461a      	mov	r2, r3
 80123ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80123ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	3301      	adds	r3, #1
 80123f4:	613b      	str	r3, [r7, #16]
 80123f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80123fa:	461a      	mov	r2, r3
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	4293      	cmp	r3, r2
 8012400:	d3b5      	bcc.n	801236e <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012408:	691b      	ldr	r3, [r3, #16]
 801240a:	68fa      	ldr	r2, [r7, #12]
 801240c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012414:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2200      	movs	r2, #0
 801241a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8012422:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012428:	2b00      	cmp	r3, #0
 801242a:	d105      	bne.n	8012438 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	699b      	ldr	r3, [r3, #24]
 8012430:	f043 0210 	orr.w	r2, r3, #16
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	699a      	ldr	r2, [r3, #24]
 801243c:	4b10      	ldr	r3, [pc, #64]	@ (8012480 <USB_DevInit+0x2dc>)
 801243e:	4313      	orrs	r3, r2
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012444:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8012448:	2b00      	cmp	r3, #0
 801244a:	d005      	beq.n	8012458 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	699b      	ldr	r3, [r3, #24]
 8012450:	f043 0208 	orr.w	r2, r3, #8
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012458:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801245c:	2b01      	cmp	r3, #1
 801245e:	d107      	bne.n	8012470 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	699b      	ldr	r3, [r3, #24]
 8012464:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012468:	f043 0304 	orr.w	r3, r3, #4
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012470:	7dfb      	ldrb	r3, [r7, #23]
}
 8012472:	4618      	mov	r0, r3
 8012474:	3718      	adds	r7, #24
 8012476:	46bd      	mov	sp, r7
 8012478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801247c:	b004      	add	sp, #16
 801247e:	4770      	bx	lr
 8012480:	803c3800 	.word	0x803c3800

08012484 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012484:	b480      	push	{r7}
 8012486:	b085      	sub	sp, #20
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801248e:	2300      	movs	r3, #0
 8012490:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	3301      	adds	r3, #1
 8012496:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801249e:	d901      	bls.n	80124a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80124a0:	2303      	movs	r3, #3
 80124a2:	e01b      	b.n	80124dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	691b      	ldr	r3, [r3, #16]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	daf2      	bge.n	8012492 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80124ac:	2300      	movs	r3, #0
 80124ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	019b      	lsls	r3, r3, #6
 80124b4:	f043 0220 	orr.w	r2, r3, #32
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	3301      	adds	r3, #1
 80124c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80124c8:	d901      	bls.n	80124ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80124ca:	2303      	movs	r3, #3
 80124cc:	e006      	b.n	80124dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	691b      	ldr	r3, [r3, #16]
 80124d2:	f003 0320 	and.w	r3, r3, #32
 80124d6:	2b20      	cmp	r3, #32
 80124d8:	d0f0      	beq.n	80124bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80124da:	2300      	movs	r3, #0
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3714      	adds	r7, #20
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr

080124e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80124e8:	b480      	push	{r7}
 80124ea:	b085      	sub	sp, #20
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80124f0:	2300      	movs	r3, #0
 80124f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	3301      	adds	r3, #1
 80124f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012500:	d901      	bls.n	8012506 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012502:	2303      	movs	r3, #3
 8012504:	e018      	b.n	8012538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	691b      	ldr	r3, [r3, #16]
 801250a:	2b00      	cmp	r3, #0
 801250c:	daf2      	bge.n	80124f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801250e:	2300      	movs	r3, #0
 8012510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2210      	movs	r2, #16
 8012516:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	3301      	adds	r3, #1
 801251c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012524:	d901      	bls.n	801252a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012526:	2303      	movs	r3, #3
 8012528:	e006      	b.n	8012538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	691b      	ldr	r3, [r3, #16]
 801252e:	f003 0310 	and.w	r3, r3, #16
 8012532:	2b10      	cmp	r3, #16
 8012534:	d0f0      	beq.n	8012518 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012536:	2300      	movs	r3, #0
}
 8012538:	4618      	mov	r0, r3
 801253a:	3714      	adds	r7, #20
 801253c:	46bd      	mov	sp, r7
 801253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012542:	4770      	bx	lr

08012544 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	460b      	mov	r3, r1
 801254e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801255a:	681a      	ldr	r2, [r3, #0]
 801255c:	78fb      	ldrb	r3, [r7, #3]
 801255e:	68f9      	ldr	r1, [r7, #12]
 8012560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012564:	4313      	orrs	r3, r2
 8012566:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012568:	2300      	movs	r3, #0
}
 801256a:	4618      	mov	r0, r3
 801256c:	3714      	adds	r7, #20
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr

08012576 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012576:	b480      	push	{r7}
 8012578:	b085      	sub	sp, #20
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	68fa      	ldr	r2, [r7, #12]
 801258c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012590:	f023 0303 	bic.w	r3, r3, #3
 8012594:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	68fa      	ldr	r2, [r7, #12]
 80125a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80125a4:	f043 0302 	orr.w	r3, r3, #2
 80125a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80125aa:	2300      	movs	r3, #0
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3714      	adds	r7, #20
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80125b8:	b480      	push	{r7}
 80125ba:	b083      	sub	sp, #12
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	695b      	ldr	r3, [r3, #20]
 80125c4:	f003 0301 	and.w	r3, r3, #1
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	370c      	adds	r7, #12
 80125cc:	46bd      	mov	sp, r7
 80125ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d2:	4770      	bx	lr

080125d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b085      	sub	sp, #20
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80125dc:	2300      	movs	r3, #0
 80125de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	3301      	adds	r3, #1
 80125e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80125ec:	d901      	bls.n	80125f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80125ee:	2303      	movs	r3, #3
 80125f0:	e01b      	b.n	801262a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	691b      	ldr	r3, [r3, #16]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	daf2      	bge.n	80125e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80125fa:	2300      	movs	r3, #0
 80125fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	691b      	ldr	r3, [r3, #16]
 8012602:	f043 0201 	orr.w	r2, r3, #1
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	3301      	adds	r3, #1
 801260e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012616:	d901      	bls.n	801261c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012618:	2303      	movs	r3, #3
 801261a:	e006      	b.n	801262a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	691b      	ldr	r3, [r3, #16]
 8012620:	f003 0301 	and.w	r3, r3, #1
 8012624:	2b01      	cmp	r3, #1
 8012626:	d0f0      	beq.n	801260a <USB_CoreReset+0x36>

  return HAL_OK;
 8012628:	2300      	movs	r3, #0
}
 801262a:	4618      	mov	r0, r3
 801262c:	3714      	adds	r7, #20
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr

08012636 <memset>:
 8012636:	4402      	add	r2, r0
 8012638:	4603      	mov	r3, r0
 801263a:	4293      	cmp	r3, r2
 801263c:	d100      	bne.n	8012640 <memset+0xa>
 801263e:	4770      	bx	lr
 8012640:	f803 1b01 	strb.w	r1, [r3], #1
 8012644:	e7f9      	b.n	801263a <memset+0x4>
	...

08012648 <__libc_init_array>:
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	4d0d      	ldr	r5, [pc, #52]	@ (8012680 <__libc_init_array+0x38>)
 801264c:	2600      	movs	r6, #0
 801264e:	4c0d      	ldr	r4, [pc, #52]	@ (8012684 <__libc_init_array+0x3c>)
 8012650:	1b64      	subs	r4, r4, r5
 8012652:	10a4      	asrs	r4, r4, #2
 8012654:	42a6      	cmp	r6, r4
 8012656:	d109      	bne.n	801266c <__libc_init_array+0x24>
 8012658:	4d0b      	ldr	r5, [pc, #44]	@ (8012688 <__libc_init_array+0x40>)
 801265a:	2600      	movs	r6, #0
 801265c:	4c0b      	ldr	r4, [pc, #44]	@ (801268c <__libc_init_array+0x44>)
 801265e:	f000 f897 	bl	8012790 <_init>
 8012662:	1b64      	subs	r4, r4, r5
 8012664:	10a4      	asrs	r4, r4, #2
 8012666:	42a6      	cmp	r6, r4
 8012668:	d105      	bne.n	8012676 <__libc_init_array+0x2e>
 801266a:	bd70      	pop	{r4, r5, r6, pc}
 801266c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012670:	3601      	adds	r6, #1
 8012672:	4798      	blx	r3
 8012674:	e7ee      	b.n	8012654 <__libc_init_array+0xc>
 8012676:	f855 3b04 	ldr.w	r3, [r5], #4
 801267a:	3601      	adds	r6, #1
 801267c:	4798      	blx	r3
 801267e:	e7f2      	b.n	8012666 <__libc_init_array+0x1e>
 8012680:	080128b0 	.word	0x080128b0
 8012684:	080128b0 	.word	0x080128b0
 8012688:	080128b0 	.word	0x080128b0
 801268c:	080128b4 	.word	0x080128b4

08012690 <floor>:
 8012690:	ec51 0b10 	vmov	r0, r1, d0
 8012694:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801269c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80126a0:	460c      	mov	r4, r1
 80126a2:	4605      	mov	r5, r0
 80126a4:	4680      	mov	r8, r0
 80126a6:	2e13      	cmp	r6, #19
 80126a8:	dc35      	bgt.n	8012716 <floor+0x86>
 80126aa:	2e00      	cmp	r6, #0
 80126ac:	da17      	bge.n	80126de <floor+0x4e>
 80126ae:	a334      	add	r3, pc, #208	@ (adr r3, 8012780 <floor+0xf0>)
 80126b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b4:	f7ed fe06 	bl	80002c4 <__adddf3>
 80126b8:	2200      	movs	r2, #0
 80126ba:	2300      	movs	r3, #0
 80126bc:	f7ee fa48 	bl	8000b50 <__aeabi_dcmpgt>
 80126c0:	b150      	cbz	r0, 80126d8 <floor+0x48>
 80126c2:	2c00      	cmp	r4, #0
 80126c4:	da56      	bge.n	8012774 <floor+0xe4>
 80126c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80126ca:	432c      	orrs	r4, r5
 80126cc:	2500      	movs	r5, #0
 80126ce:	42ac      	cmp	r4, r5
 80126d0:	4c2d      	ldr	r4, [pc, #180]	@ (8012788 <floor+0xf8>)
 80126d2:	bf08      	it	eq
 80126d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80126d8:	4621      	mov	r1, r4
 80126da:	4628      	mov	r0, r5
 80126dc:	e024      	b.n	8012728 <floor+0x98>
 80126de:	4f2b      	ldr	r7, [pc, #172]	@ (801278c <floor+0xfc>)
 80126e0:	4137      	asrs	r7, r6
 80126e2:	ea01 0307 	and.w	r3, r1, r7
 80126e6:	4303      	orrs	r3, r0
 80126e8:	d01e      	beq.n	8012728 <floor+0x98>
 80126ea:	a325      	add	r3, pc, #148	@ (adr r3, 8012780 <floor+0xf0>)
 80126ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f0:	f7ed fde8 	bl	80002c4 <__adddf3>
 80126f4:	2200      	movs	r2, #0
 80126f6:	2300      	movs	r3, #0
 80126f8:	f7ee fa2a 	bl	8000b50 <__aeabi_dcmpgt>
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d0eb      	beq.n	80126d8 <floor+0x48>
 8012700:	2c00      	cmp	r4, #0
 8012702:	f04f 0500 	mov.w	r5, #0
 8012706:	bfbe      	ittt	lt
 8012708:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801270c:	4133      	asrlt	r3, r6
 801270e:	18e4      	addlt	r4, r4, r3
 8012710:	ea24 0407 	bic.w	r4, r4, r7
 8012714:	e7e0      	b.n	80126d8 <floor+0x48>
 8012716:	2e33      	cmp	r6, #51	@ 0x33
 8012718:	dd0a      	ble.n	8012730 <floor+0xa0>
 801271a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801271e:	d103      	bne.n	8012728 <floor+0x98>
 8012720:	4602      	mov	r2, r0
 8012722:	460b      	mov	r3, r1
 8012724:	f7ed fdce 	bl	80002c4 <__adddf3>
 8012728:	ec41 0b10 	vmov	d0, r0, r1
 801272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012730:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8012734:	f04f 37ff 	mov.w	r7, #4294967295
 8012738:	40df      	lsrs	r7, r3
 801273a:	4207      	tst	r7, r0
 801273c:	d0f4      	beq.n	8012728 <floor+0x98>
 801273e:	a310      	add	r3, pc, #64	@ (adr r3, 8012780 <floor+0xf0>)
 8012740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012744:	f7ed fdbe 	bl	80002c4 <__adddf3>
 8012748:	2200      	movs	r2, #0
 801274a:	2300      	movs	r3, #0
 801274c:	f7ee fa00 	bl	8000b50 <__aeabi_dcmpgt>
 8012750:	2800      	cmp	r0, #0
 8012752:	d0c1      	beq.n	80126d8 <floor+0x48>
 8012754:	2c00      	cmp	r4, #0
 8012756:	da0a      	bge.n	801276e <floor+0xde>
 8012758:	2e14      	cmp	r6, #20
 801275a:	d101      	bne.n	8012760 <floor+0xd0>
 801275c:	3401      	adds	r4, #1
 801275e:	e006      	b.n	801276e <floor+0xde>
 8012760:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8012764:	2301      	movs	r3, #1
 8012766:	40b3      	lsls	r3, r6
 8012768:	441d      	add	r5, r3
 801276a:	4545      	cmp	r5, r8
 801276c:	d3f6      	bcc.n	801275c <floor+0xcc>
 801276e:	ea25 0507 	bic.w	r5, r5, r7
 8012772:	e7b1      	b.n	80126d8 <floor+0x48>
 8012774:	2500      	movs	r5, #0
 8012776:	462c      	mov	r4, r5
 8012778:	e7ae      	b.n	80126d8 <floor+0x48>
 801277a:	bf00      	nop
 801277c:	f3af 8000 	nop.w
 8012780:	8800759c 	.word	0x8800759c
 8012784:	7e37e43c 	.word	0x7e37e43c
 8012788:	bff00000 	.word	0xbff00000
 801278c:	000fffff 	.word	0x000fffff

08012790 <_init>:
 8012790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012792:	bf00      	nop
 8012794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012796:	bc08      	pop	{r3}
 8012798:	469e      	mov	lr, r3
 801279a:	4770      	bx	lr

0801279c <_fini>:
 801279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801279e:	bf00      	nop
 80127a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127a2:	bc08      	pop	{r3}
 80127a4:	469e      	mov	lr, r3
 80127a6:	4770      	bx	lr
