
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110c4  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011338  08011338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011438  08011438  0001300c  2**0
                  CONTENTS
  4 .ARM          00000008  08011438  08011438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011440  08011440  0001300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011440  08011440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011444  08011444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08011448  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002964  2000000c  08011454  0001300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002970  08011454  00013970  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031ba0  00000000  00000000  00013042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d25  00000000  00000000  00044be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  00049908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002171  00000000  00000000  0004c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047314  00000000  00000000  0004e519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b5a  00000000  00000000  0009582d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9cc  00000000  00000000  000cb387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287d53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd64  00000000  00000000  00287d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00293afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	08011320 	.word	0x08011320

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	08011320 	.word	0x08011320

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 fa81 	bl	8002ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8df 	bl	8000798 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f949 	bl	8000870 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f97e 	bl	80008de <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 feed 	bl	80013c0 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb7b 	bl	8000ce0 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb3b 	bl	8000c64 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbaf 	bl	8000d50 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc2b 	bl	8000e4c <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc69 	bl	8000ecc <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc7b 	bl	8000ef4 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fcf9 	bl	8000ff4 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fdb1 	bl	8001168 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f979 	bl	80008fc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe5f 	bl	80012cc <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd3f 	bl	8001090 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 faad 	bl	8000b70 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fbd9 	bl	8000dcc <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 fea3 	bl	8001364 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fe05 	bl	800122c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 8000622:	f44f 62d0 	mov.w	r2, #1664	@ 0x680
 8000626:	4954      	ldr	r1, [pc, #336]	@ (8000778 <main+0x1ac>)
 8000628:	4854      	ldr	r0, [pc, #336]	@ (800077c <main+0x1b0>)
 800062a:	f003 f9a1 	bl	8003970 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 800062e:	2202      	movs	r2, #2
 8000630:	4953      	ldr	r1, [pc, #332]	@ (8000780 <main+0x1b4>)
 8000632:	4854      	ldr	r0, [pc, #336]	@ (8000784 <main+0x1b8>)
 8000634:	f003 f99c 	bl	8003970 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000638:	4853      	ldr	r0, [pc, #332]	@ (8000788 <main+0x1bc>)
 800063a:	f00d fffb 	bl	800e634 <HAL_TIM_Base_Start>
  }

  HAL_Delay(10);
  */
  //HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacData, DIM(dacData));
 800063e:	2280      	movs	r2, #128	@ 0x80
 8000640:	4952      	ldr	r1, [pc, #328]	@ (800078c <main+0x1c0>)
 8000642:	4853      	ldr	r0, [pc, #332]	@ (8000790 <main+0x1c4>)
 8000644:	f00d fc72 	bl	800df2c <HAL_SAI_Transmit_DMA>

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e08b      	b.n	8000766 <main+0x19a>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	e00c      	b.n	800066e <main+0xa2>
	  {
		  channels[i].channelData[s] = 0;
 8000654:	494f      	ldr	r1, [pc, #316]	@ (8000794 <main+0x1c8>)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	228b      	movs	r2, #139	@ 0x8b
 800065a:	fb03 f202 	mul.w	r2, r3, r2
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4413      	add	r3, r2
 8000662:	2200      	movs	r2, #0
 8000664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	3301      	adds	r3, #1
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000674:	d3ee      	bcc.n	8000654 <main+0x88>
	  }
	  channels[i].channelNum = i;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	b2d8      	uxtb	r0, r3
 800067a:	4a46      	ldr	r2, [pc, #280]	@ (8000794 <main+0x1c8>)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8000682:	fb01 f303 	mul.w	r3, r1, r3
 8000686:	4413      	add	r3, r2
 8000688:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800068c:	4602      	mov	r2, r0
 800068e:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 8000690:	4a40      	ldr	r2, [pc, #256]	@ (8000794 <main+0x1c8>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8000698:	fb01 f303 	mul.w	r3, r1, r3
 800069c:	4413      	add	r3, r2
 800069e:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 80006a8:	4a3a      	ldr	r2, [pc, #232]	@ (8000794 <main+0x1c8>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80006b0:	fb01 f303 	mul.w	r3, r1, r3
 80006b4:	4413      	add	r3, r2
 80006b6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 80006c0:	4a34      	ldr	r2, [pc, #208]	@ (8000794 <main+0x1c8>)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 80006d6:	4a2f      	ldr	r2, [pc, #188]	@ (8000794 <main+0x1c8>)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80006de:	fb01 f303 	mul.w	r3, r1, r3
 80006e2:	4413      	add	r3, r2
 80006e4:	f203 230d 	addw	r3, r3, #525	@ 0x20d
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 80006ec:	4a29      	ldr	r2, [pc, #164]	@ (8000794 <main+0x1c8>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80006f4:	fb01 f303 	mul.w	r3, r1, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 8000702:	4a24      	ldr	r2, [pc, #144]	@ (8000794 <main+0x1c8>)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	4413      	add	r3, r2
 8000710:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8000714:	f04f 0200 	mov.w	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e010      	b.n	8000742 <main+0x176>
	  {
		  channels[i].eqLevels[r] = 0.0;
 8000720:	491c      	ldr	r1, [pc, #112]	@ (8000794 <main+0x1c8>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	228b      	movs	r2, #139	@ 0x8b
 8000726:	fb03 f202 	mul.w	r2, r3, r2
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	3384      	adds	r3, #132	@ 0x84
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	440b      	add	r3, r1
 8000734:	3304      	adds	r3, #4
 8000736:	f04f 0200 	mov.w	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b13      	cmp	r3, #19
 8000746:	d9eb      	bls.n	8000720 <main+0x154>
	  }
	  channels[i].distortionStrength = 0.0;
 8000748:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <main+0x1c8>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8000750:	fb01 f303 	mul.w	r3, r1, r3
 8000754:	4413      	add	r3, r2
 8000756:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800075a:	f04f 0200 	mov.w	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f640 5207 	movw	r2, #3335	@ 0xd07
 800076c:	4293      	cmp	r3, r2
 800076e:	f67f af6e 	bls.w	800064e <main+0x82>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000772:	bf00      	nop
 8000774:	e7fd      	b.n	8000772 <main+0x1a6>
 8000776:	bf00      	nop
 8000778:	20000d5c 	.word	0x20000d5c
 800077c:	20000028 	.word	0x20000028
 8000780:	20001a5c 	.word	0x20001a5c
 8000784:	200000b4 	.word	0x200000b4
 8000788:	20000798 	.word	0x20000798
 800078c:	20001a60 	.word	0x20001a60
 8000790:	200004b4 	.word	0x200004b4
 8000794:	20001c60 	.word	0x20001c60

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09e      	sub	sp, #120	@ 0x78
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2260      	movs	r2, #96	@ 0x60
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f010 fd8d 	bl	80112c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
 80007ba:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007bc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007c0:	f008 fc70 	bl	80090a4 <HAL_PWREx_ControlVoltageScaling>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007ca:	f000 ffc7 	bl	800175c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ce:	f008 fc59 	bl	8009084 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007d2:	4b26      	ldr	r3, [pc, #152]	@ (800086c <SystemClock_Config+0xd4>)
 80007d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80007d8:	4a24      	ldr	r2, [pc, #144]	@ (800086c <SystemClock_Config+0xd4>)
 80007da:	f023 0318 	bic.w	r3, r3, #24
 80007de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007e2:	2307      	movs	r3, #7
 80007e4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007ec:	2381      	movs	r3, #129	@ 0x81
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f6:	2310      	movs	r3, #16
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	2303      	movs	r3, #3
 8000800:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800080a:	2308      	movs	r3, #8
 800080c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800080e:	2308      	movs	r3, #8
 8000810:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800081a:	230c      	movs	r3, #12
 800081c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	4618      	mov	r0, r3
 8000828:	f008 fd66 	bl	80092f8 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000832:	f000 ff93 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	231f      	movs	r3, #31
 8000838:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2303      	movs	r3, #3
 800083c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800084e:	463b      	mov	r3, r7
 8000850:	2103      	movs	r1, #3
 8000852:	4618      	mov	r0, r3
 8000854:	f009 fc2c 	bl	800a0b0 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800085e:	f000 ff7d 	bl	800175c <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	@ 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	46020c00 	.word	0x46020c00

08000870 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0b8      	sub	sp, #224	@ 0xe0
 8000874:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	22e0      	movs	r2, #224	@ 0xe0
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f010 fd22 	bl	80112c6 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8000882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000886:	f04f 0301 	mov.w	r3, #1
 800088a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000894:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 800089c:	2303      	movs	r3, #3
 800089e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80008a4:	230c      	movs	r3, #12
 80008a6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 80008ac:	2303      	movs	r3, #3
 80008ae:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80008b4:	230c      	movs	r3, #12
 80008b6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 80008b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 80008be:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4618      	mov	r0, r3
 80008c8:	f009 ffc2 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 80008d2:	f000 ff43 	bl	800175c <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	37e0      	adds	r7, #224	@ 0xe0
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008e2:	f008 fccb 	bl	800927c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008e6:	2002      	movs	r0, #2
 80008e8:	f008 fc68 	bl	80091bc <HAL_PWREx_ConfigSupply>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80008f2:	f000 ff33 	bl	800175c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2220      	movs	r2, #32
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f010 fcdc 	bl	80112c6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800090e:	4b89      	ldr	r3, [pc, #548]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000910:	4a89      	ldr	r2, [pc, #548]	@ (8000b38 <MX_ADC1_Init+0x23c>)
 8000912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000914:	4b87      	ldr	r3, [pc, #540]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800091a:	4b86      	ldr	r3, [pc, #536]	@ (8000b34 <MX_ADC1_Init+0x238>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000920:	4b84      	ldr	r3, [pc, #528]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000926:	4b83      	ldr	r3, [pc, #524]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800092c:	4b81      	ldr	r3, [pc, #516]	@ (8000b34 <MX_ADC1_Init+0x238>)
 800092e:	2201      	movs	r2, #1
 8000930:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000932:	4b80      	ldr	r3, [pc, #512]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000934:	2204      	movs	r2, #4
 8000936:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000938:	4b7e      	ldr	r3, [pc, #504]	@ (8000b34 <MX_ADC1_Init+0x238>)
 800093a:	2201      	movs	r2, #1
 800093c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800093e:	4b7d      	ldr	r3, [pc, #500]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000940:	2201      	movs	r2, #1
 8000942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000946:	4b7b      	ldr	r3, [pc, #492]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000948:	220d      	movs	r2, #13
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094c:	4b79      	ldr	r3, [pc, #484]	@ (8000b34 <MX_ADC1_Init+0x238>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000954:	4b77      	ldr	r3, [pc, #476]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000956:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 800095a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800095c:	4b75      	ldr	r3, [pc, #468]	@ (8000b34 <MX_ADC1_Init+0x238>)
 800095e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000962:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000964:	4b73      	ldr	r3, [pc, #460]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800096c:	4b71      	ldr	r3, [pc, #452]	@ (8000b34 <MX_ADC1_Init+0x238>)
 800096e:	2200      	movs	r2, #0
 8000970:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000972:	4b70      	ldr	r3, [pc, #448]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000974:	2200      	movs	r2, #0
 8000976:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000978:	4b6e      	ldr	r3, [pc, #440]	@ (8000b34 <MX_ADC1_Init+0x238>)
 800097a:	2200      	movs	r2, #0
 800097c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800097e:	4b6d      	ldr	r3, [pc, #436]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000980:	2203      	movs	r2, #3
 8000982:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000984:	4b6b      	ldr	r3, [pc, #428]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	4869      	ldr	r0, [pc, #420]	@ (8000b34 <MX_ADC1_Init+0x238>)
 800098e:	f002 fd07 	bl	80033a0 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000998:	f000 fee0 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800099c:	4b67      	ldr	r3, [pc, #412]	@ (8000b3c <MX_ADC1_Init+0x240>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a0:	2306      	movs	r3, #6
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ae:	2304      	movs	r3, #4
 80009b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	485e      	ldr	r0, [pc, #376]	@ (8000b34 <MX_ADC1_Init+0x238>)
 80009bc:	f003 fc0a 	bl	80041d4 <HAL_ADC_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80009c6:	f000 fec9 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000b40 <MX_ADC1_Init+0x244>)
 80009cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ce:	230c      	movs	r3, #12
 80009d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4857      	ldr	r0, [pc, #348]	@ (8000b34 <MX_ADC1_Init+0x238>)
 80009d8:	f003 fbfc 	bl	80041d4 <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80009e2:	f000 febb 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009e6:	4b57      	ldr	r3, [pc, #348]	@ (8000b44 <MX_ADC1_Init+0x248>)
 80009e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009ea:	2312      	movs	r3, #18
 80009ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4850      	ldr	r0, [pc, #320]	@ (8000b34 <MX_ADC1_Init+0x238>)
 80009f4:	f003 fbee 	bl	80041d4 <HAL_ADC_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80009fe:	f000 fead 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a02:	4b51      	ldr	r3, [pc, #324]	@ (8000b48 <MX_ADC1_Init+0x24c>)
 8000a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a06:	2318      	movs	r3, #24
 8000a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4849      	ldr	r0, [pc, #292]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000a10:	f003 fbe0 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a1a:	f000 fe9f 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b4c <MX_ADC1_Init+0x250>)
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4841      	ldr	r0, [pc, #260]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000a2e:	f003 fbd1 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000a38:	f000 fe90 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a3c:	4b44      	ldr	r3, [pc, #272]	@ (8000b50 <MX_ADC1_Init+0x254>)
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a40:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	4619      	mov	r1, r3
 8000a4a:	483a      	ldr	r0, [pc, #232]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000a4c:	f003 fbc2 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000a56:	f000 fe81 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b54 <MX_ADC1_Init+0x258>)
 8000a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a5e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4832      	ldr	r0, [pc, #200]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000a6a:	f003 fbb3 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000a74:	f000 fe72 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a78:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <MX_ADC1_Init+0x25c>)
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a7c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000a80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	482b      	ldr	r0, [pc, #172]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000a88:	f003 fba4 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000a92:	f000 fe63 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a96:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <MX_ADC1_Init+0x260>)
 8000a98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a9a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000a9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4823      	ldr	r0, [pc, #140]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000aa6:	f003 fb95 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000ab0:	f000 fe54 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <MX_ADC1_Init+0x264>)
 8000ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ab8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000abc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000ac4:	f003 fb86 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000ace:	f000 fe45 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ad2:	4b24      	ldr	r3, [pc, #144]	@ (8000b64 <MX_ADC1_Init+0x268>)
 8000ad4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000ad6:	f240 2306 	movw	r3, #518	@ 0x206
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4814      	ldr	r0, [pc, #80]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000ae2:	f003 fb77 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000aec:	f000 fe36 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <MX_ADC1_Init+0x26c>)
 8000af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000af4:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000af8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4619      	mov	r1, r3
 8000afe:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000b00:	f003 fb68 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000b0a:	f000 fe27 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_ADC1_Init+0x270>)
 8000b10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b12:	f240 2312 	movw	r3, #530	@ 0x212
 8000b16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_ADC1_Init+0x238>)
 8000b1e:	f003 fb59 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b28:	f000 fe18 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000028 	.word	0x20000028
 8000b38:	42028000 	.word	0x42028000
 8000b3c:	04000002 	.word	0x04000002
 8000b40:	08000004 	.word	0x08000004
 8000b44:	0c000008 	.word	0x0c000008
 8000b48:	10000010 	.word	0x10000010
 8000b4c:	14000020 	.word	0x14000020
 8000b50:	1c000080 	.word	0x1c000080
 8000b54:	20000100 	.word	0x20000100
 8000b58:	2a000400 	.word	0x2a000400
 8000b5c:	2e000800 	.word	0x2e000800
 8000b60:	32001000 	.word	0x32001000
 8000b64:	3e008000 	.word	0x3e008000
 8000b68:	42010000 	.word	0x42010000
 8000b6c:	ce080000 	.word	0xce080000

08000b70 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	463b      	mov	r3, r7
 8000b78:	2220      	movs	r2, #32
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f010 fba2 	bl	80112c6 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b82:	4b34      	ldr	r3, [pc, #208]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000b84:	4a34      	ldr	r2, [pc, #208]	@ (8000c58 <MX_ADC4_Init+0xe8>)
 8000b86:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b88:	4b32      	ldr	r3, [pc, #200]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8e:	4b31      	ldr	r3, [pc, #196]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b94:	4b2f      	ldr	r3, [pc, #188]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000b9c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ba0:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000bae:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000bbc:	4b25      	ldr	r3, [pc, #148]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc2:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000bce:	4b21      	ldr	r3, [pc, #132]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bd8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bdc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bde:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000bf8:	4816      	ldr	r0, [pc, #88]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000bfa:	f002 fbd1 	bl	80033a0 <HAL_ADC_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000c04:	f000 fdaa 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_ADC4_Init+0xec>)
 8000c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c14:	2304      	movs	r3, #4
 8000c16:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000c22:	f003 fad7 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000c2c:	f000 fd96 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_ADC4_Init+0xf0>)
 8000c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c34:	2304      	movs	r3, #4
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_ADC4_Init+0xe4>)
 8000c3e:	f003 fac9 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000c48:	f000 fd88 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200000b4 	.word	0x200000b4
 8000c58:	46021000 	.word	0x46021000
 8000c5c:	1c000080 	.word	0x1c000080
 8000c60:	20000100 	.word	0x20000100

08000c64 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cdc <MX_DMA2D_Init+0x78>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000c74:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000c80:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000c86:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cb0:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000cb2:	f005 fa19 	bl	80060e8 <HAL_DMA2D_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000cbc:	f000 fd4e 	bl	800175c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_DMA2D_Init+0x74>)
 8000cc4:	f005 fa72 	bl	80061ac <HAL_DMA2D_ConfigLayer>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000cce:	f000 fd45 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000026c 	.word	0x2000026c
 8000cdc:	4002b000 	.word	0x4002b000

08000ce0 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_GPDMA1_Init+0x6c>)
 8000ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cec:	4a17      	ldr	r2, [pc, #92]	@ (8000d4c <MX_GPDMA1_Init+0x6c>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_GPDMA1_Init+0x6c>)
 8000cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	201d      	movs	r0, #29
 8000d0a:	f004 fa8f 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d0e:	201d      	movs	r0, #29
 8000d10:	f004 faa6 	bl	8005260 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	201e      	movs	r0, #30
 8000d1a:	f004 fa87 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d1e:	201e      	movs	r0, #30
 8000d20:	f004 fa9e 	bl	8005260 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	201f      	movs	r0, #31
 8000d2a:	f004 fa7f 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d2e:	201f      	movs	r0, #31
 8000d30:	f004 fa96 	bl	8005260 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2020      	movs	r0, #32
 8000d3a:	f004 fa77 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d3e:	2020      	movs	r0, #32
 8000d40:	f004 fa8e 	bl	8005260 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	46020c00 	.word	0x46020c00

08000d50 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc8 <MX_HSPI1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000d66:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d6c:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d70:	221a      	movs	r2, #26
 8000d72:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000d80:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <MX_HSPI1_Init+0x74>)
 8000db2:	f00f fe21 	bl	80109f8 <HAL_XSPI_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000dbc:	f000 fcce 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200002d4 	.word	0x200002d4
 8000dc8:	420d3400 	.word	0x420d3400

08000dcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e44 <MX_I2C1_Init+0x78>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e48 <MX_I2C1_Init+0x7c>)
 8000dda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e06:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000e08:	f006 fd56 	bl	80078b8 <HAL_I2C_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e12:	f000 fca3 	bl	800175c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4809      	ldr	r0, [pc, #36]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000e1a:	f007 fbf8 	bl	800860e <HAL_I2CEx_ConfigAnalogFilter>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e24:	f000 fc9a 	bl	800175c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_I2C1_Init+0x74>)
 8000e2c:	f007 fc3a 	bl	80086a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f000 fc91 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000334 	.word	0x20000334
 8000e44:	40005400 	.word	0x40005400
 8000e48:	20a0c4df 	.word	0x20a0c4df

08000e4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec4 <MX_I2C2_Init+0x78>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <MX_I2C2_Init+0x7c>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e86:	480e      	ldr	r0, [pc, #56]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e88:	f006 fd16 	bl	80078b8 <HAL_I2C_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e92:	f000 fc63 	bl	800175c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000e9a:	f007 fbb8 	bl	800860e <HAL_I2CEx_ConfigAnalogFilter>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ea4:	f000 fc5a 	bl	800175c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_I2C2_Init+0x74>)
 8000eac:	f007 fbfa 	bl	80086a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000eb6:	f000 fc51 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000388 	.word	0x20000388
 8000ec4:	40005800 	.word	0x40005800
 8000ec8:	20a0c4df 	.word	0x20a0c4df

08000ecc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f007 fc33 	bl	800873c <HAL_ICACHE_ConfigAssociativityMode>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000edc:	f000 fc3e 	bl	800175c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ee0:	f007 fc4c 	bl	800877c <HAL_ICACHE_Enable>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000eea:	f000 fc37 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	@ 0x38
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2234      	movs	r2, #52	@ 0x34
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f010 f9e0 	bl	80112c6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f06:	4b39      	ldr	r3, [pc, #228]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f08:	4a39      	ldr	r2, [pc, #228]	@ (8000ff0 <MX_LTDC_Init+0xfc>)
 8000f0a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f0c:	4b37      	ldr	r3, [pc, #220]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f12:	4b36      	ldr	r3, [pc, #216]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f18:	4b34      	ldr	r3, [pc, #208]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f1e:	4b33      	ldr	r3, [pc, #204]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f24:	4b31      	ldr	r3, [pc, #196]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f2a:	4b30      	ldr	r3, [pc, #192]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f30:	4b2e      	ldr	r3, [pc, #184]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f32:	220b      	movs	r2, #11
 8000f34:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f36:	4b2d      	ldr	r3, [pc, #180]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f38:	220b      	movs	r2, #11
 8000f3a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f3e:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f42:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f44:	4b29      	ldr	r3, [pc, #164]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f46:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f4e:	f240 3233 	movw	r2, #819	@ 0x333
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000f54:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f56:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f64:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f74:	481d      	ldr	r0, [pc, #116]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000f76:	f007 fc11 	bl	800879c <HAL_LTDC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f80:	f000 fbec 	bl	800175c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000f88:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f8c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000f92:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000f96:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f9c:	23ff      	movs	r3, #255	@ 0xff
 8000f9e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fa4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fa8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000faa:	2307      	movs	r3, #7
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <MX_LTDC_Init+0xf8>)
 8000fd4:	f007 fd74 	bl	8008ac0 <HAL_LTDC_ConfigLayer>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000fde:	f000 fbbd 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3738      	adds	r7, #56	@ 0x38
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200003dc 	.word	0x200003dc
 8000ff0:	40016800 	.word	0x40016800

08000ff4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
 8001008:	615a      	str	r2, [r3, #20]
 800100a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <MX_RTC_Init+0x94>)
 800100e:	4a1f      	ldr	r2, [pc, #124]	@ (800108c <MX_RTC_Init+0x98>)
 8001010:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <MX_RTC_Init+0x94>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_RTC_Init+0x94>)
 800101a:	227f      	movs	r2, #127	@ 0x7f
 800101c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800101e:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <MX_RTC_Init+0x94>)
 8001020:	22ff      	movs	r2, #255	@ 0xff
 8001022:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_RTC_Init+0x94>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_RTC_Init+0x94>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_RTC_Init+0x94>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_RTC_Init+0x94>)
 8001038:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800103c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_RTC_Init+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_RTC_Init+0x94>)
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800104a:	480f      	ldr	r0, [pc, #60]	@ (8001088 <MX_RTC_Init+0x94>)
 800104c:	f00c fbfc 	bl	800d848 <HAL_RTC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001056:	f000 fb81 	bl	800175c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <MX_RTC_Init+0x94>)
 8001070:	f00c fd18 	bl	800daa4 <HAL_RTCEx_PrivilegeModeSet>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800107a:	f000 fb6f 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000484 	.word	0x20000484
 800108c:	46007800 	.word	0x46007800

08001090 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001094:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <MX_SAI2_Init+0xc4>)
 8001096:	4a30      	ldr	r2, [pc, #192]	@ (8001158 <MX_SAI2_Init+0xc8>)
 8001098:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800109a:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <MX_SAI2_Init+0xc4>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010ac:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010b2:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_8K;
 80010b8:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010ba:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80010be:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010c0:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80010c6:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010cc:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010ce:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010dc:	2210      	movs	r2, #16
 80010de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80010e0:	2302      	movs	r3, #2
 80010e2:	2203      	movs	r2, #3
 80010e4:	2101      	movs	r1, #1
 80010e6:	481b      	ldr	r0, [pc, #108]	@ (8001154 <MX_SAI2_Init+0xc4>)
 80010e8:	f00c fd0a 	bl	800db00 <HAL_SAI_InitProtocol>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_SAI2_Init+0x66>
  {
    Error_Handler();
 80010f2:	f000 fb33 	bl	800175c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_SAI2_Init+0xcc>)
 80010f8:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <MX_SAI2_Init+0xd0>)
 80010fa:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_SAI2_Init+0xcc>)
 80010fe:	2201      	movs	r2, #1
 8001100:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <MX_SAI2_Init+0xcc>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_SAI2_Init+0xcc>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <MX_SAI2_Init+0xcc>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_SAI2_Init+0xcc>)
 8001116:	2202      	movs	r2, #2
 8001118:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <MX_SAI2_Init+0xcc>)
 800111c:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <MX_SAI2_Init+0xd4>)
 800111e:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <MX_SAI2_Init+0xcc>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <MX_SAI2_Init+0xcc>)
 8001128:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800112c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <MX_SAI2_Init+0xcc>)
 8001130:	2200      	movs	r2, #0
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <MX_SAI2_Init+0xcc>)
 8001136:	2200      	movs	r2, #0
 8001138:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 800113a:	2308      	movs	r3, #8
 800113c:	2202      	movs	r2, #2
 800113e:	2100      	movs	r1, #0
 8001140:	4806      	ldr	r0, [pc, #24]	@ (800115c <MX_SAI2_Init+0xcc>)
 8001142:	f00c fcdd 	bl	800db00 <HAL_SAI_InitProtocol>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 800114c:	f000 fb06 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200004b4 	.word	0x200004b4
 8001158:	40015804 	.word	0x40015804
 800115c:	2000054c 	.word	0x2000054c
 8001160:	40015824 	.word	0x40015824
 8001164:	00017700 	.word	0x00017700

08001168 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800118c:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <MX_TIM3_Init+0xbc>)
 800118e:	4a26      	ldr	r2, [pc, #152]	@ (8001228 <MX_TIM3_Init+0xc0>)
 8001190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <MX_TIM3_Init+0xbc>)
 8001194:	22a0      	movs	r2, #160	@ 0xa0
 8001196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_TIM3_Init+0xbc>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800119e:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_TIM3_Init+0xbc>)
 80011a0:	2264      	movs	r2, #100	@ 0x64
 80011a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_TIM3_Init+0xbc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_TIM3_Init+0xbc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011b0:	481c      	ldr	r0, [pc, #112]	@ (8001224 <MX_TIM3_Init+0xbc>)
 80011b2:	f00d fad7 	bl	800e764 <HAL_TIM_PWM_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011bc:	f000 face 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4815      	ldr	r0, [pc, #84]	@ (8001224 <MX_TIM3_Init+0xbc>)
 80011d0:	f00e faae 	bl	800f730 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011da:	f000 fabf 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011de:	2360      	movs	r3, #96	@ 0x60
 80011e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80011e2:	234b      	movs	r3, #75	@ 0x4b
 80011e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	220c      	movs	r2, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	480b      	ldr	r0, [pc, #44]	@ (8001224 <MX_TIM3_Init+0xbc>)
 80011f6:	f00d fb0d 	bl	800e814 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001200:	f000 faac 	bl	800175c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <MX_TIM3_Init+0xbc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	69da      	ldr	r2, [r3, #28]
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_TIM3_Init+0xbc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001212:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <MX_TIM3_Init+0xbc>)
 8001216:	f001 f84f 	bl	80022b8 <HAL_TIM_MspPostInit>

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000074c 	.word	0x2000074c
 8001228:	40000400 	.word	0x40000400

0800122c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <MX_TIM15_Init+0x98>)
 800124c:	4a1e      	ldr	r2, [pc, #120]	@ (80012c8 <MX_TIM15_Init+0x9c>)
 800124e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <MX_TIM15_Init+0x98>)
 8001252:	221a      	movs	r2, #26
 8001254:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_TIM15_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <MX_TIM15_Init+0x98>)
 800125e:	2231      	movs	r2, #49	@ 0x31
 8001260:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_TIM15_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <MX_TIM15_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <MX_TIM15_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001274:	4813      	ldr	r0, [pc, #76]	@ (80012c4 <MX_TIM15_Init+0x98>)
 8001276:	f00d f985 	bl	800e584 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001280:	f000 fa6c 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <MX_TIM15_Init+0x98>)
 8001292:	f00d fbd3 	bl	800ea3c <HAL_TIM_ConfigClockSource>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 800129c:	f000 fa5e 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012a0:	2320      	movs	r3, #32
 80012a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_TIM15_Init+0x98>)
 80012ae:	f00e fa3f 	bl	800f730 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80012b8:	f000 fa50 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000798 	.word	0x20000798
 80012c8:	40014000 	.word	0x40014000

080012cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d0:	4b22      	ldr	r3, [pc, #136]	@ (800135c <MX_USART1_UART_Init+0x90>)
 80012d2:	4a23      	ldr	r2, [pc, #140]	@ (8001360 <MX_USART1_UART_Init+0x94>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012d6:	4b21      	ldr	r3, [pc, #132]	@ (800135c <MX_USART1_UART_Init+0x90>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <MX_USART1_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_USART1_UART_Init+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <MX_USART1_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_USART1_UART_Init+0x90>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <MX_USART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_USART1_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_USART1_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_USART1_UART_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <MX_USART1_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001314:	4811      	ldr	r0, [pc, #68]	@ (800135c <MX_USART1_UART_Init+0x90>)
 8001316:	f00e facd 	bl	800f8b4 <HAL_UART_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001320:	f000 fa1c 	bl	800175c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001324:	2100      	movs	r1, #0
 8001326:	480d      	ldr	r0, [pc, #52]	@ (800135c <MX_USART1_UART_Init+0x90>)
 8001328:	f00f fa9b 	bl	8010862 <HAL_UARTEx_SetTxFifoThreshold>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001332:	f000 fa13 	bl	800175c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001336:	2100      	movs	r1, #0
 8001338:	4808      	ldr	r0, [pc, #32]	@ (800135c <MX_USART1_UART_Init+0x90>)
 800133a:	f00f fad0 	bl	80108de <HAL_UARTEx_SetRxFifoThreshold>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001344:	f000 fa0a 	bl	800175c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_USART1_UART_Init+0x90>)
 800134a:	f00f fa51 	bl	80107f0 <HAL_UARTEx_DisableFifoMode>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001354:	f000 fa02 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200007e4 	.word	0x200007e4
 8001360:	40013800 	.word	0x40013800

08001364 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001368:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <MX_USB_OTG_HS_PCD_Init+0x58>)
 800136c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001370:	2209      	movs	r2, #9
 8001372:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001374:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001376:	2200      	movs	r2, #0
 8001378:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800137c:	2203      	movs	r2, #3
 800137e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001380:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001382:	2200      	movs	r2, #0
 8001384:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001388:	2200      	movs	r2, #0
 800138a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800138e:	2200      	movs	r2, #0
 8001390:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001394:	2200      	movs	r2, #0
 8001396:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800139a:	2200      	movs	r2, #0
 800139c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013a6:	f007 fd3c 	bl	8008e22 <HAL_PCD_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80013b0:	f000 f9d4 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000878 	.word	0x20000878
 80013bc:	42040000 	.word	0x42040000

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	@ 0x38
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d6:	4b8c      	ldr	r3, [pc, #560]	@ (8001608 <MX_GPIO_Init+0x248>)
 80013d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013dc:	4a8a      	ldr	r2, [pc, #552]	@ (8001608 <MX_GPIO_Init+0x248>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013e6:	4b88      	ldr	r3, [pc, #544]	@ (8001608 <MX_GPIO_Init+0x248>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	623b      	str	r3, [r7, #32]
 80013f2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	4b84      	ldr	r3, [pc, #528]	@ (8001608 <MX_GPIO_Init+0x248>)
 80013f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fa:	4a83      	ldr	r2, [pc, #524]	@ (8001608 <MX_GPIO_Init+0x248>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001404:	4b80      	ldr	r3, [pc, #512]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001412:	4b7d      	ldr	r3, [pc, #500]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001418:	4a7b      	ldr	r2, [pc, #492]	@ (8001608 <MX_GPIO_Init+0x248>)
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001422:	4b79      	ldr	r3, [pc, #484]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001430:	4b75      	ldr	r3, [pc, #468]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001432:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001436:	4a74      	ldr	r2, [pc, #464]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800143c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001440:	4b71      	ldr	r3, [pc, #452]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b6e      	ldr	r3, [pc, #440]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001454:	4a6c      	ldr	r2, [pc, #432]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800145e:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b66      	ldr	r3, [pc, #408]	@ (8001608 <MX_GPIO_Init+0x248>)
 800146e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001472:	4a65      	ldr	r2, [pc, #404]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800147c:	4b62      	ldr	r3, [pc, #392]	@ (8001608 <MX_GPIO_Init+0x248>)
 800147e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800148a:	4b5f      	ldr	r3, [pc, #380]	@ (8001608 <MX_GPIO_Init+0x248>)
 800148c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001490:	4a5d      	ldr	r2, [pc, #372]	@ (8001608 <MX_GPIO_Init+0x248>)
 8001492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001496:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800149a:	4b5b      	ldr	r3, [pc, #364]	@ (8001608 <MX_GPIO_Init+0x248>)
 800149c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b57      	ldr	r3, [pc, #348]	@ (8001608 <MX_GPIO_Init+0x248>)
 80014aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ae:	4a56      	ldr	r2, [pc, #344]	@ (8001608 <MX_GPIO_Init+0x248>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b8:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <MX_GPIO_Init+0x248>)
 80014ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014c6:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <MX_GPIO_Init+0x248>)
 80014c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001608 <MX_GPIO_Init+0x248>)
 80014ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001608 <MX_GPIO_Init+0x248>)
 80014d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2104      	movs	r1, #4
 80014e8:	4848      	ldr	r0, [pc, #288]	@ (800160c <MX_GPIO_Init+0x24c>)
 80014ea:	f006 f991 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	4846      	ldr	r0, [pc, #280]	@ (800160c <MX_GPIO_Init+0x24c>)
 80014f4:	f006 f98c 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2114      	movs	r1, #20
 80014fc:	4844      	ldr	r0, [pc, #272]	@ (8001610 <MX_GPIO_Init+0x250>)
 80014fe:	f006 f987 	bl	8007810 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001502:	2314      	movs	r3, #20
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	483c      	ldr	r0, [pc, #240]	@ (800160c <MX_GPIO_Init+0x24c>)
 800151a:	f005 ffa1 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800151e:	2320      	movs	r3, #32
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001522:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <MX_GPIO_Init+0x254>)
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	4836      	ldr	r0, [pc, #216]	@ (800160c <MX_GPIO_Init+0x24c>)
 8001532:	f005 ff95 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001536:	2302      	movs	r3, #2
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800153a:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <MX_GPIO_Init+0x258>)
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	4834      	ldr	r0, [pc, #208]	@ (800161c <MX_GPIO_Init+0x25c>)
 800154a:	f005 ff89 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 800154e:	2310      	movs	r3, #16
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001552:	4b33      	ldr	r3, [pc, #204]	@ (8001620 <MX_GPIO_Init+0x260>)
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001556:	2301      	movs	r3, #1
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	482e      	ldr	r0, [pc, #184]	@ (800161c <MX_GPIO_Init+0x25c>)
 8001562:	f005 ff7d 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001566:	2314      	movs	r3, #20
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	4824      	ldr	r0, [pc, #144]	@ (8001610 <MX_GPIO_Init+0x250>)
 800157e:	f005 ff6f 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	481e      	ldr	r0, [pc, #120]	@ (8001610 <MX_GPIO_Init+0x250>)
 8001596:	f005 ff63 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 800159a:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	481d      	ldr	r0, [pc, #116]	@ (8001624 <MX_GPIO_Init+0x264>)
 80015b0:	f005 ff56 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80015b4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4817      	ldr	r0, [pc, #92]	@ (8001628 <MX_GPIO_Init+0x268>)
 80015ca:	f005 ff49 	bl	8007460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	200c      	movs	r0, #12
 80015d4:	f003 fe2a 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015d8:	200c      	movs	r0, #12
 80015da:	f003 fe41 	bl	8005260 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	200f      	movs	r0, #15
 80015e4:	f003 fe22 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015e8:	200f      	movs	r0, #15
 80015ea:	f003 fe39 	bl	8005260 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2010      	movs	r0, #16
 80015f4:	f003 fe1a 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80015f8:	2010      	movs	r0, #16
 80015fa:	f003 fe31 	bl	8005260 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	@ 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	46020c00 	.word	0x46020c00
 800160c:	42021000 	.word	0x42021000
 8001610:	42020c00 	.word	0x42020c00
 8001614:	10110000 	.word	0x10110000
 8001618:	10310000 	.word	0x10310000
 800161c:	42020000 	.word	0x42020000
 8001620:	10210000 	.word	0x10210000
 8001624:	42021800 	.word	0x42021800
 8001628:	42020400 	.word	0x42020400

0800162c <HAL_ADC_ConvHalfCpltCallback>:
	temp = temp / denoiseSize;
	return temp;
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 13) / 2; i += 13)
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	e02f      	b.n	800169e <HAL_ADC_ConvHalfCpltCallback+0x72>
	{
		float convert = (((float)adcGroup1[i] / 16387.0f) - 0.5f) * 2.0f;
 800163e:	4a1d      	ldr	r2, [pc, #116]	@ (80016b4 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800164e:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80016b8 <HAL_ADC_ConvHalfCpltCallback+0x8c>
 8001652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001656:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800165a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800165e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001662:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388607);
 8001666:	edd7 7a03 	vldr	s15, [r7, #12]
 800166a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80016bc <HAL_ADC_ConvHalfCpltCallback+0x90>
 800166e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001676:	ee17 3a90 	vmov	r3, s15
 800167a:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 800167c:	8afb      	ldrh	r3, [r7, #22]
 800167e:	4910      	ldr	r1, [pc, #64]	@ (80016c0 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 8001686:	8afb      	ldrh	r3, [r7, #22]
 8001688:	3301      	adds	r3, #1
 800168a:	490d      	ldr	r1, [pc, #52]	@ (80016c0 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 8001692:	8afb      	ldrh	r3, [r7, #22]
 8001694:	3302      	adds	r3, #2
 8001696:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 13) / 2; i += 13)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	330d      	adds	r3, #13
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f5b3 7f50 	cmp.w	r3, #832	@ 0x340
 80016a4:	dbcb      	blt.n	800163e <HAL_ADC_ConvHalfCpltCallback+0x12>
	}
}
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	20000d5c 	.word	0x20000d5c
 80016b8:	46800600 	.word	0x46800600
 80016bc:	4afffffe 	.word	0x4afffffe
 80016c0:	20001a60 	.word	0x20001a60

080016c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	82fb      	strh	r3, [r7, #22]
	for(int i = (sampleSize * 13) / 2; i < sampleSize; i += 13)
 80016d0:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	e02f      	b.n	8001738 <HAL_ADC_ConvCpltCallback+0x74>
	{
		float convert = (((float)adcGroup1[i] / 16387.0f) - 0.5f) * 2.0f;
 80016d8:	4a1c      	ldr	r2, [pc, #112]	@ (800174c <HAL_ADC_ConvCpltCallback+0x88>)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016e8:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001750 <HAL_ADC_ConvCpltCallback+0x8c>
 80016ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016fc:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388607);
 8001700:	edd7 7a03 	vldr	s15, [r7, #12]
 8001704:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001754 <HAL_ADC_ConvCpltCallback+0x90>
 8001708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001710:	ee17 3a90 	vmov	r3, s15
 8001714:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 8001716:	8afb      	ldrh	r3, [r7, #22]
 8001718:	490f      	ldr	r1, [pc, #60]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x94>)
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 8001720:	8afb      	ldrh	r3, [r7, #22]
 8001722:	3301      	adds	r3, #1
 8001724:	490c      	ldr	r1, [pc, #48]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x94>)
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 800172c:	8afb      	ldrh	r3, [r7, #22]
 800172e:	3302      	adds	r3, #2
 8001730:	82fb      	strh	r3, [r7, #22]
	for(int i = (sampleSize * 13) / 2; i < sampleSize; i += 13)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	330d      	adds	r3, #13
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b7f      	cmp	r3, #127	@ 0x7f
 800173c:	ddcc      	ble.n	80016d8 <HAL_ADC_ConvCpltCallback+0x14>
	}
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	20000d5c 	.word	0x20000d5c
 8001750:	46800600 	.word	0x46800600
 8001754:	4afffffe 	.word	0x4afffffe
 8001758:	20001a60 	.word	0x20001a60

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <Error_Handler+0x8>

08001768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <HAL_MspInit+0x30>)
 8001770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001774:	4a08      	ldr	r2, [pc, #32]	@ (8001798 <HAL_MspInit+0x30>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_MspInit+0x30>)
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 800178c:	f007 fd86 	bl	800929c <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	46020c00 	.word	0x46020c00

0800179c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0e0      	sub	sp, #384	@ 0x180
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017a6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017aa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017c0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017c4:	4618      	mov	r0, r3
 80017c6:	23e0      	movs	r3, #224	@ 0xe0
 80017c8:	461a      	mov	r2, r3
 80017ca:	2100      	movs	r1, #0
 80017cc:	f00f fd7b 	bl	80112c6 <memset>
  if(hadc->Instance==ADC1)
 80017d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017d4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4aa1      	ldr	r2, [pc, #644]	@ (8001a64 <HAL_ADC_MspInit+0x2c8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	f040 8152 	bne.w	8001a88 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80017e4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017e8:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80017ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80017f8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017fc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001800:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001804:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	4618      	mov	r0, r3
 800180e:	f009 f81f 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001818:	f7ff ffa0 	bl	800175c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800181c:	4b92      	ldr	r3, [pc, #584]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 800181e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001822:	4a91      	ldr	r2, [pc, #580]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 8001824:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001828:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800182c:	4b8e      	ldr	r3, [pc, #568]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 800182e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001832:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001836:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800183a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001844:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001848:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	4b87      	ldr	r3, [pc, #540]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 800184c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001850:	4a85      	ldr	r2, [pc, #532]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800185a:	4b83      	ldr	r3, [pc, #524]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 800185c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001860:	f003 0204 	and.w	r2, r3, #4
 8001864:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001868:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001872:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001876:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b7b      	ldr	r3, [pc, #492]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 800187a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187e:	4a7a      	ldr	r2, [pc, #488]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001888:	4b77      	ldr	r3, [pc, #476]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 800188a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188e:	f003 0201 	and.w	r2, r3, #1
 8001892:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001896:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018a4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b70      	ldr	r3, [pc, #448]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 80018a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ac:	4a6e      	ldr	r2, [pc, #440]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a68 <HAL_ADC_MspInit+0x2cc>)
 80018b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018bc:	f003 0202 	and.w	r2, r3, #2
 80018c0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018c4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018ce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018d2:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 80018d4:	230f      	movs	r3, #15
 80018d6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018da:	2303      	movs	r3, #3
 80018dc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80018ea:	4619      	mov	r1, r3
 80018ec:	485f      	ldr	r0, [pc, #380]	@ (8001a6c <HAL_ADC_MspInit+0x2d0>)
 80018ee:	f005 fdb7 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 80018f2:	23ed      	movs	r3, #237	@ 0xed
 80018f4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f8:	2303      	movs	r3, #3
 80018fa:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001908:	4619      	mov	r1, r3
 800190a:	4859      	ldr	r0, [pc, #356]	@ (8001a70 <HAL_ADC_MspInit+0x2d4>)
 800190c:	f005 fda8 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8001910:	2303      	movs	r3, #3
 8001912:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001916:	2303      	movs	r3, #3
 8001918:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001926:	4619      	mov	r1, r3
 8001928:	4852      	ldr	r0, [pc, #328]	@ (8001a74 <HAL_ADC_MspInit+0x2d8>)
 800192a:	f005 fd99 	bl	8007460 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800192e:	2321      	movs	r3, #33	@ 0x21
 8001930:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800194c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001950:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001954:	2301      	movs	r3, #1
 8001956:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800195a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800195e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 8001962:	2301      	movs	r3, #1
 8001964:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8001968:	2301      	movs	r3, #1
 800196a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800196e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001972:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8001988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800198c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8001990:	232b      	movs	r3, #43	@ 0x2b
 8001992:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80019a2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80019a6:	4934      	ldr	r1, [pc, #208]	@ (8001a78 <HAL_ADC_MspInit+0x2dc>)
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fe6d 	bl	8006688 <HAL_DMAEx_List_BuildNode>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 80019b4:	f7ff fed2 	bl	800175c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80019b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001a78 <HAL_ADC_MspInit+0x2dc>)
 80019ba:	2100      	movs	r1, #0
 80019bc:	482f      	ldr	r0, [pc, #188]	@ (8001a7c <HAL_ADC_MspInit+0x2e0>)
 80019be:	f004 fe8f 	bl	80066e0 <HAL_DMAEx_List_InsertNode>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80019c8:	f7ff fec8 	bl	800175c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80019cc:	482b      	ldr	r0, [pc, #172]	@ (8001a7c <HAL_ADC_MspInit+0x2e0>)
 80019ce:	f004 ff50 	bl	8006872 <HAL_DMAEx_List_SetCircularMode>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 80019d8:	f7ff fec0 	bl	800175c <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80019dc:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 80019de:	4a29      	ldr	r2, [pc, #164]	@ (8001a84 <HAL_ADC_MspInit+0x2e8>)
 80019e0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80019e2:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80019e8:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80019ee:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 80019fc:	2281      	movs	r2, #129	@ 0x81
 80019fe:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001a00:	481f      	ldr	r0, [pc, #124]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 8001a02:	f004 fc81 	bl	8006308 <HAL_DMAEx_List_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001a0c:	f7ff fea6 	bl	800175c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001a10:	491a      	ldr	r1, [pc, #104]	@ (8001a7c <HAL_ADC_MspInit+0x2e0>)
 8001a12:	481b      	ldr	r0, [pc, #108]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 8001a14:	f004 ff8e 	bl	8006934 <HAL_DMAEx_List_LinkQ>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8001a1e:	f7ff fe9d 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001a22:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a26:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a14      	ldr	r2, [pc, #80]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 8001a2e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a30:	4a13      	ldr	r2, [pc, #76]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 8001a32:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a36:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a3e:	2110      	movs	r1, #16
 8001a40:	480f      	ldr	r0, [pc, #60]	@ (8001a80 <HAL_ADC_MspInit+0x2e4>)
 8001a42:	f004 f86f 	bl	8005b24 <HAL_DMA_ConfigChannelAttributes>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001a4c:	f7ff fe86 	bl	800175c <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2025      	movs	r0, #37	@ 0x25
 8001a56:	f003 fbe9 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a5a:	2025      	movs	r0, #37	@ 0x25
 8001a5c:	f003 fc00 	bl	8005260 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001a60:	e0c0      	b.n	8001be4 <HAL_ADC_MspInit+0x448>
 8001a62:	bf00      	nop
 8001a64:	42028000 	.word	0x42028000
 8001a68:	46020c00 	.word	0x46020c00
 8001a6c:	42020800 	.word	0x42020800
 8001a70:	42020000 	.word	0x42020000
 8001a74:	42020400 	.word	0x42020400
 8001a78:	20000140 	.word	0x20000140
 8001a7c:	20000164 	.word	0x20000164
 8001a80:	2000017c 	.word	0x2000017c
 8001a84:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001a88:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a8c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a56      	ldr	r2, [pc, #344]	@ (8001bf0 <HAL_ADC_MspInit+0x454>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	f040 80a4 	bne.w	8001be4 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001a9c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001aa0:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001aa4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001ab0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ab4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ab8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001abc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f008 fec3 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001ad0:	f7ff fe44 	bl	800175c <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001ad4:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <HAL_ADC_MspInit+0x458>)
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ada:	4a46      	ldr	r2, [pc, #280]	@ (8001bf4 <HAL_ADC_MspInit+0x458>)
 8001adc:	f043 0320 	orr.w	r3, r3, #32
 8001ae0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ae4:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <HAL_ADC_MspInit+0x458>)
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aea:	f003 0220 	and.w	r2, r3, #32
 8001aee:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001af2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001afc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b00:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b02:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf4 <HAL_ADC_MspInit+0x458>)
 8001b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b08:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf4 <HAL_ADC_MspInit+0x458>)
 8001b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b12:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <HAL_ADC_MspInit+0x458>)
 8001b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b18:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001b1c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b20:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b2a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b2e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001b30:	2303      	movs	r3, #3
 8001b32:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b36:	2303      	movs	r3, #3
 8001b38:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b42:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b46:	4619      	mov	r1, r3
 8001b48:	482b      	ldr	r0, [pc, #172]	@ (8001bf8 <HAL_ADC_MspInit+0x45c>)
 8001b4a:	f005 fc89 	bl	8007460 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b50:	4a2b      	ldr	r2, [pc, #172]	@ (8001c00 <HAL_ADC_MspInit+0x464>)
 8001b52:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b60:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001b66:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b6c:	4b23      	ldr	r3, [pc, #140]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b6e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b72:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b80:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001ba0:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001ba6:	4815      	ldr	r0, [pc, #84]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001ba8:	f003 fc1c 	bl	80053e4 <HAL_DMA_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001bb2:	f7ff fdd3 	bl	800175c <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001bb6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bba:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001bc2:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001bc6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bca:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	4809      	ldr	r0, [pc, #36]	@ (8001bfc <HAL_ADC_MspInit+0x460>)
 8001bd6:	f003 ffa5 	bl	8005b24 <HAL_DMA_ConfigChannelAttributes>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8001be0:	f7ff fdbc 	bl	800175c <Error_Handler>
}
 8001be4:	bf00      	nop
 8001be6:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	46021000 	.word	0x46021000
 8001bf4:	46020c00 	.word	0x46020c00
 8001bf8:	42021800 	.word	0x42021800
 8001bfc:	200001f4 	.word	0x200001f4
 8001c00:	40020150 	.word	0x40020150

08001c04 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_DMA2D_MspInit+0x3c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10e      	bne.n	8001c34 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_DMA2D_MspInit+0x40>)
 8001c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1c:	4a09      	ldr	r2, [pc, #36]	@ (8001c44 <HAL_DMA2D_MspInit+0x40>)
 8001c1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <HAL_DMA2D_MspInit+0x40>)
 8001c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	4002b000 	.word	0x4002b000
 8001c44:	46020c00 	.word	0x46020c00

08001c48 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a2a      	ldr	r2, [pc, #168]	@ (8001d10 <HAL_XSPI_MspInit+0xc8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d14d      	bne.n	8001d06 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d14 <HAL_XSPI_MspInit+0xcc>)
 8001c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c70:	4a28      	ldr	r2, [pc, #160]	@ (8001d14 <HAL_XSPI_MspInit+0xcc>)
 8001c72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c7a:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <HAL_XSPI_MspInit+0xcc>)
 8001c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c88:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <HAL_XSPI_MspInit+0xcc>)
 8001c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c8e:	4a21      	ldr	r2, [pc, #132]	@ (8001d14 <HAL_XSPI_MspInit+0xcc>)
 8001c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_XSPI_MspInit+0xcc>)
 8001c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <HAL_XSPI_MspInit+0xcc>)
 8001ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cac:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_XSPI_MspInit+0xcc>)
 8001cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <HAL_XSPI_MspInit+0xcc>)
 8001cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001cc4:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001cc8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480d      	ldr	r0, [pc, #52]	@ (8001d18 <HAL_XSPI_MspInit+0xd0>)
 8001ce2:	f005 fbbd 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ce6:	230f      	movs	r3, #15
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4806      	ldr	r0, [pc, #24]	@ (8001d1c <HAL_XSPI_MspInit+0xd4>)
 8001d02:	f005 fbad 	bl	8007460 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	@ 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	420d3400 	.word	0x420d3400
 8001d14:	46020c00 	.word	0x46020c00
 8001d18:	42021c00 	.word	0x42021c00
 8001d1c:	42022000 	.word	0x42022000

08001d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0c4      	sub	sp, #272	@ 0x110
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d2e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	22e0      	movs	r2, #224	@ 0xe0
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f00f fabc 	bl	80112c6 <memset>
  if(hi2c->Instance==I2C1)
 8001d4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a63      	ldr	r2, [pc, #396]	@ (8001ee8 <HAL_I2C_MspInit+0x1c8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d14f      	bne.n	8001e00 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d60:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	4618      	mov	r0, r3
 8001d78:	f008 fd6a 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001d82:	f7ff fceb 	bl	800175c <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d86:	4b59      	ldr	r3, [pc, #356]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d8c:	4a57      	ldr	r2, [pc, #348]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d96:	4b55      	ldr	r3, [pc, #340]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001da4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001da8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dac:	2312      	movs	r3, #18
 8001dae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4849      	ldr	r0, [pc, #292]	@ (8001ef0 <HAL_I2C_MspInit+0x1d0>)
 8001dcc:	f005 fb48 	bl	8007460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd0:	4b46      	ldr	r3, [pc, #280]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dd6:	4a45      	ldr	r2, [pc, #276]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001dd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ddc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001de0:	4b42      	ldr	r3, [pc, #264]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001de6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001dea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001df8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dfc:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dfe:	e06e      	b.n	8001ede <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001e00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a39      	ldr	r2, [pc, #228]	@ (8001ef4 <HAL_I2C_MspInit+0x1d4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d165      	bne.n	8001ede <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e12:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f008 fd11 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001e34:	f7ff fc92 	bl	800175c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e38:	4b2c      	ldr	r3, [pc, #176]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001e40:	f043 0320 	orr.w	r3, r3, #32
 8001e44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e48:	4b28      	ldr	r3, [pc, #160]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e4e:	f003 0220 	and.w	r2, r3, #32
 8001e52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e64:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e66:	2303      	movs	r3, #3
 8001e68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e84:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e88:	4619      	mov	r1, r3
 8001e8a:	481b      	ldr	r0, [pc, #108]	@ (8001ef8 <HAL_I2C_MspInit+0x1d8>)
 8001e8c:	f005 fae8 	bl	8007460 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e90:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e96:	4a15      	ldr	r2, [pc, #84]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001e98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_I2C_MspInit+0x1cc>)
 8001ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ea6:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001eaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ebc:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2039      	movs	r0, #57	@ 0x39
 8001ec4:	f003 f9b2 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ec8:	2039      	movs	r0, #57	@ 0x39
 8001eca:	f003 f9c9 	bl	8005260 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	203a      	movs	r0, #58	@ 0x3a
 8001ed4:	f003 f9aa 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ed8:	203a      	movs	r0, #58	@ 0x3a
 8001eda:	f003 f9c1 	bl	8005260 <HAL_NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40005400 	.word	0x40005400
 8001eec:	46020c00 	.word	0x46020c00
 8001ef0:	42021800 	.word	0x42021800
 8001ef4:	40005800 	.word	0x40005800
 8001ef8:	42021400 	.word	0x42021400

08001efc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0c6      	sub	sp, #280	@ 0x118
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f0a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f1c:	f107 0320 	add.w	r3, r7, #32
 8001f20:	22e0      	movs	r2, #224	@ 0xe0
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00f f9ce 	bl	80112c6 <memset>
  if(hltdc->Instance==LTDC)
 8001f2a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a92      	ldr	r2, [pc, #584]	@ (8002180 <HAL_LTDC_MspInit+0x284>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	f040 811b 	bne.w	8002174 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0302 	mov.w	r3, #2
 8001f46:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001f50:	2303      	movs	r3, #3
 8001f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001f54:	2304      	movs	r3, #4
 8001f56:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001f58:	2332      	movs	r3, #50	@ 0x32
 8001f5a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001f60:	2302      	movs	r3, #2
 8001f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001f64:	2308      	movs	r3, #8
 8001f66:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001f70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f76:	f107 0320 	add.w	r3, r7, #32
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f008 fc68 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001f86:	f7ff fbe9 	bl	800175c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f8a:	4b7e      	ldr	r3, [pc, #504]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8001f8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f90:	4a7c      	ldr	r2, [pc, #496]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8001f92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f96:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8001f9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fa0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	4b76      	ldr	r3, [pc, #472]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8001faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fae:	4a75      	ldr	r2, [pc, #468]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fb8:	4b72      	ldr	r3, [pc, #456]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8001fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fbe:	f003 0202 	and.w	r2, r3, #2
 8001fc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fc6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fd0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fd4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd6:	4b6b      	ldr	r3, [pc, #428]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8001fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fdc:	4a69      	ldr	r2, [pc, #420]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fe6:	4b67      	ldr	r3, [pc, #412]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8001fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fec:	f003 0210 	and.w	r2, r3, #16
 8001ff0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002002:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002004:	4b5f      	ldr	r3, [pc, #380]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8002006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800200a:	4a5e      	ldr	r2, [pc, #376]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002014:	4b5b      	ldr	r3, [pc, #364]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8002016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800201a:	f003 0208 	and.w	r2, r3, #8
 800201e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800202c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002030:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	4b54      	ldr	r3, [pc, #336]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8002034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002038:	4a52      	ldr	r2, [pc, #328]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002042:	4b50      	ldr	r3, [pc, #320]	@ (8002184 <HAL_LTDC_MspInit+0x288>)
 8002044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002048:	f003 0204 	and.w	r2, r3, #4
 800204c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002050:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800205a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800205e:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002060:	2304      	movs	r3, #4
 8002062:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002078:	2308      	movs	r3, #8
 800207a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002082:	4619      	mov	r1, r3
 8002084:	4840      	ldr	r0, [pc, #256]	@ (8002188 <HAL_LTDC_MspInit+0x28c>)
 8002086:	f005 f9eb 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800208a:	f64f 7381 	movw	r3, #65409	@ 0xff81
 800208e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020a4:	2308      	movs	r3, #8
 80020a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020aa:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020ae:	4619      	mov	r1, r3
 80020b0:	4836      	ldr	r0, [pc, #216]	@ (800218c <HAL_LTDC_MspInit+0x290>)
 80020b2:	f005 f9d5 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80020b6:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 80020ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020d0:	2308      	movs	r3, #8
 80020d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020da:	4619      	mov	r1, r3
 80020dc:	482c      	ldr	r0, [pc, #176]	@ (8002190 <HAL_LTDC_MspInit+0x294>)
 80020de:	f005 f9bf 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e2:	23c0      	movs	r3, #192	@ 0xc0
 80020e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80020fa:	2307      	movs	r3, #7
 80020fc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002104:	4619      	mov	r1, r3
 8002106:	4823      	ldr	r0, [pc, #140]	@ (8002194 <HAL_LTDC_MspInit+0x298>)
 8002108:	f005 f9aa 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800210c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002110:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002126:	2308      	movs	r3, #8
 8002128:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002130:	4619      	mov	r1, r3
 8002132:	4818      	ldr	r0, [pc, #96]	@ (8002194 <HAL_LTDC_MspInit+0x298>)
 8002134:	f005 f994 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800213c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002152:	2307      	movs	r3, #7
 8002154:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800215c:	4619      	mov	r1, r3
 800215e:	480a      	ldr	r0, [pc, #40]	@ (8002188 <HAL_LTDC_MspInit+0x28c>)
 8002160:	f005 f97e 	bl	8007460 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	2087      	movs	r0, #135	@ 0x87
 800216a:	f003 f85f 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800216e:	2087      	movs	r0, #135	@ 0x87
 8002170:	f003 f876 	bl	8005260 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002174:	bf00      	nop
 8002176:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40016800 	.word	0x40016800
 8002184:	46020c00 	.word	0x46020c00
 8002188:	42020400 	.word	0x42020400
 800218c:	42021000 	.word	0x42021000
 8002190:	42020c00 	.word	0x42020c00
 8002194:	42020800 	.word	0x42020800

08002198 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0bc      	sub	sp, #240	@ 0xf0
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	22e0      	movs	r2, #224	@ 0xe0
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f00f f88c 	bl	80112c6 <memset>
  if(hrtc->Instance==RTC)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <HAL_RTC_MspInit+0x90>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d132      	bne.n	800221e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	4618      	mov	r0, r3
 80021d2:	f008 fb3d 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80021dc:	f7ff fabe 	bl	800175c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_RTC_MspInit+0x94>)
 80021e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021e6:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_RTC_MspInit+0x94>)
 80021e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021f0:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_RTC_MspInit+0x94>)
 80021f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80021f6:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <HAL_RTC_MspInit+0x94>)
 80021f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021fc:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002200:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <HAL_RTC_MspInit+0x94>)
 8002202:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800220e:	4b07      	ldr	r3, [pc, #28]	@ (800222c <HAL_RTC_MspInit+0x94>)
 8002210:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002214:	4a05      	ldr	r2, [pc, #20]	@ (800222c <HAL_RTC_MspInit+0x94>)
 8002216:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800221a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800221e:	bf00      	nop
 8002220:	37f0      	adds	r7, #240	@ 0xf0
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	46007800 	.word	0x46007800
 800222c:	46020c00 	.word	0x46020c00

08002230 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <HAL_TIM_PWM_MspInit+0x3c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002242:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_TIM_PWM_MspInit+0x40>)
 8002244:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002248:	4a09      	ldr	r2, [pc, #36]	@ (8002270 <HAL_TIM_PWM_MspInit+0x40>)
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002252:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <HAL_TIM_PWM_MspInit+0x40>)
 8002254:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40000400 	.word	0x40000400
 8002270:	46020c00 	.word	0x46020c00

08002274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <HAL_TIM_Base_MspInit+0x3c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002286:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_TIM_Base_MspInit+0x40>)
 8002288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800228c:	4a09      	ldr	r2, [pc, #36]	@ (80022b4 <HAL_TIM_Base_MspInit+0x40>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002292:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002296:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <HAL_TIM_Base_MspInit+0x40>)
 8002298:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800229c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40014000 	.word	0x40014000
 80022b4:	46020c00 	.word	0x46020c00

080022b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <HAL_TIM_MspPostInit+0x68>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d11e      	bne.n	8002318 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022da:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_TIM_MspPostInit+0x6c>)
 80022dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022e0:	4a10      	ldr	r2, [pc, #64]	@ (8002324 <HAL_TIM_MspPostInit+0x6c>)
 80022e2:	f043 0310 	orr.w	r3, r3, #16
 80022e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_TIM_MspPostInit+0x6c>)
 80022ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 80022f8:	2340      	movs	r3, #64	@ 0x40
 80022fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002308:	2302      	movs	r3, #2
 800230a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	4619      	mov	r1, r3
 8002312:	4805      	ldr	r0, [pc, #20]	@ (8002328 <HAL_TIM_MspPostInit+0x70>)
 8002314:	f005 f8a4 	bl	8007460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002318:	bf00      	nop
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40000400 	.word	0x40000400
 8002324:	46020c00 	.word	0x46020c00
 8002328:	42021000 	.word	0x42021000

0800232c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0c2      	sub	sp, #264	@ 0x108
 8002330:	af00      	add	r7, sp, #0
 8002332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800233a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	22e0      	movs	r2, #224	@ 0xe0
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f00e ffb6 	bl	80112c6 <memset>
  if(huart->Instance==USART1)
 800235a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800235e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2f      	ldr	r2, [pc, #188]	@ (8002424 <HAL_UART_MspInit+0xf8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d155      	bne.n	8002418 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800236c:	f04f 0201 	mov.w	r2, #1
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002378:	2300      	movs	r3, #0
 800237a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	4618      	mov	r0, r3
 8002382:	f008 fa65 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 800238c:	f7ff f9e6 	bl	800175c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002390:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <HAL_UART_MspInit+0xfc>)
 8002392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002396:	4a24      	ldr	r2, [pc, #144]	@ (8002428 <HAL_UART_MspInit+0xfc>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023a0:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <HAL_UART_MspInit+0xfc>)
 80023a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <HAL_UART_MspInit+0xfc>)
 80023b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002428 <HAL_UART_MspInit+0xfc>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023be:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_UART_MspInit+0xfc>)
 80023c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c4:	f003 0201 	and.w	r2, r3, #1
 80023c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023da:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f6:	2307      	movs	r3, #7
 80023f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002400:	4619      	mov	r1, r3
 8002402:	480a      	ldr	r0, [pc, #40]	@ (800242c <HAL_UART_MspInit+0x100>)
 8002404:	f005 f82c 	bl	8007460 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	203d      	movs	r0, #61	@ 0x3d
 800240e:	f002 ff0d 	bl	800522c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002412:	203d      	movs	r0, #61	@ 0x3d
 8002414:	f002 ff24 	bl	8005260 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002418:	bf00      	nop
 800241a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40013800 	.word	0x40013800
 8002428:	46020c00 	.word	0x46020c00
 800242c:	42020000 	.word	0x42020000

08002430 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0be      	sub	sp, #248	@ 0xf8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	22e0      	movs	r2, #224	@ 0xe0
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f00e ff40 	bl	80112c6 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3a      	ldr	r2, [pc, #232]	@ (8002534 <HAL_PCD_MspInit+0x104>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d16d      	bne.n	800252c <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002450:	4b39      	ldr	r3, [pc, #228]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 8002452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002456:	4a38      	ldr	r2, [pc, #224]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002460:	4b35      	ldr	r3, [pc, #212]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 8002462:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0308 	mov.w	r3, #8
 8002476:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 800247a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800247e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002482:	f107 0318 	add.w	r3, r7, #24
 8002486:	4618      	mov	r0, r3
 8002488:	f008 f9e2 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 8002492:	f7ff f963 	bl	800175c <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002496:	200c      	movs	r0, #12
 8002498:	f000 fc1c 	bl	8002cd4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800249c:	4b26      	ldr	r3, [pc, #152]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 800249e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024a2:	4a25      	ldr	r2, [pc, #148]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ac:	4b22      	ldr	r3, [pc, #136]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 80024ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80024ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 80024c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 80024cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d8:	4b17      	ldr	r3, [pc, #92]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d11b      	bne.n	800251e <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ec:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80024f6:	4b10      	ldr	r3, [pc, #64]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 80024f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002504:	f006 feaa 	bl	800925c <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002508:	f006 fed8 	bl	80092bc <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 800250e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002512:	4a09      	ldr	r2, [pc, #36]	@ (8002538 <HAL_PCD_MspInit+0x108>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800251c:	e003      	b.n	8002526 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800251e:	f006 fe9d 	bl	800925c <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002522:	f006 fecb 	bl	80092bc <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002526:	2001      	movs	r0, #1
 8002528:	f000 fbc0 	bl	8002cac <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800252c:	bf00      	nop
 800252e:	37f8      	adds	r7, #248	@ 0xf8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	42040000 	.word	0x42040000
 8002538:	46020c00 	.word	0x46020c00

0800253c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0a4      	sub	sp, #144	@ 0x90
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4abb      	ldr	r2, [pc, #748]	@ (8002838 <HAL_SAI_MspInit+0x2fc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	f040 80ca 	bne.w	80026e4 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002550:	4bba      	ldr	r3, [pc, #744]	@ (800283c <HAL_SAI_MspInit+0x300>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10e      	bne.n	8002576 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002558:	4bb9      	ldr	r3, [pc, #740]	@ (8002840 <HAL_SAI_MspInit+0x304>)
 800255a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800255e:	4ab8      	ldr	r2, [pc, #736]	@ (8002840 <HAL_SAI_MspInit+0x304>)
 8002560:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002564:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002568:	4bb5      	ldr	r3, [pc, #724]	@ (8002840 <HAL_SAI_MspInit+0x304>)
 800256a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800256e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002576:	4bb1      	ldr	r3, [pc, #708]	@ (800283c <HAL_SAI_MspInit+0x300>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4aaf      	ldr	r2, [pc, #700]	@ (800283c <HAL_SAI_MspInit+0x300>)
 800257e:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002580:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002584:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002598:	230d      	movs	r3, #13
 800259a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025a2:	4619      	mov	r1, r3
 80025a4:	48a7      	ldr	r0, [pc, #668]	@ (8002844 <HAL_SAI_MspInit+0x308>)
 80025a6:	f004 ff5b 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025c2:	230d      	movs	r3, #13
 80025c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025cc:	4619      	mov	r1, r3
 80025ce:	489d      	ldr	r0, [pc, #628]	@ (8002844 <HAL_SAI_MspInit+0x308>)
 80025d0:	f004 ff46 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025ec:	230d      	movs	r3, #13
 80025ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025f2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025f6:	4619      	mov	r1, r3
 80025f8:	4893      	ldr	r0, [pc, #588]	@ (8002848 <HAL_SAI_MspInit+0x30c>)
 80025fa:	f004 ff31 	bl	8007460 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80025fe:	2321      	movs	r3, #33	@ 0x21
 8002600:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002602:	2326      	movs	r3, #38	@ 0x26
 8002604:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800260a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800260e:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002610:	2308      	movs	r3, #8
 8002612:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002618:	2302      	movs	r3, #2
 800261a:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800261c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002622:	2301      	movs	r3, #1
 8002624:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002626:	2301      	movs	r3, #1
 8002628:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800262a:	2300      	movs	r3, #0
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800262e:	2300      	movs	r3, #0
 8002630:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002632:	2300      	movs	r3, #0
 8002634:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002636:	2300      	movs	r3, #0
 8002638:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800263e:	2300      	movs	r3, #0
 8002640:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 8002642:	f107 0310 	add.w	r3, r7, #16
 8002646:	4981      	ldr	r1, [pc, #516]	@ (800284c <HAL_SAI_MspInit+0x310>)
 8002648:	4618      	mov	r0, r3
 800264a:	f004 f81d 	bl	8006688 <HAL_DMAEx_List_BuildNode>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002654:	f7ff f882 	bl	800175c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002658:	4a7c      	ldr	r2, [pc, #496]	@ (800284c <HAL_SAI_MspInit+0x310>)
 800265a:	2100      	movs	r1, #0
 800265c:	487c      	ldr	r0, [pc, #496]	@ (8002850 <HAL_SAI_MspInit+0x314>)
 800265e:	f004 f83f 	bl	80066e0 <HAL_DMAEx_List_InsertNode>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8002668:	f7ff f878 	bl	800175c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 800266c:	4878      	ldr	r0, [pc, #480]	@ (8002850 <HAL_SAI_MspInit+0x314>)
 800266e:	f004 f900 	bl	8006872 <HAL_DMAEx_List_SetCircularMode>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 8002678:	f7ff f870 	bl	800175c <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800267c:	4b75      	ldr	r3, [pc, #468]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 800267e:	4a76      	ldr	r2, [pc, #472]	@ (8002858 <HAL_SAI_MspInit+0x31c>)
 8002680:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002682:	4b74      	ldr	r3, [pc, #464]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 8002684:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002688:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800268a:	4b72      	ldr	r3, [pc, #456]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 800268c:	2200      	movs	r2, #0
 800268e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002690:	4b70      	ldr	r3, [pc, #448]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002696:	4b6f      	ldr	r3, [pc, #444]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 8002698:	2200      	movs	r2, #0
 800269a:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800269c:	4b6d      	ldr	r3, [pc, #436]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 800269e:	2281      	movs	r2, #129	@ 0x81
 80026a0:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80026a2:	486c      	ldr	r0, [pc, #432]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 80026a4:	f003 fe30 	bl	8006308 <HAL_DMAEx_List_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 80026ae:	f7ff f855 	bl	800175c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 80026b2:	4967      	ldr	r1, [pc, #412]	@ (8002850 <HAL_SAI_MspInit+0x314>)
 80026b4:	4867      	ldr	r0, [pc, #412]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 80026b6:	f004 f93d 	bl	8006934 <HAL_DMAEx_List_LinkQ>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 80026c0:	f7ff f84c 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a63      	ldr	r2, [pc, #396]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 80026c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026cc:	4a61      	ldr	r2, [pc, #388]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80026d2:	2110      	movs	r1, #16
 80026d4:	485f      	ldr	r0, [pc, #380]	@ (8002854 <HAL_SAI_MspInit+0x318>)
 80026d6:	f003 fa25 	bl	8005b24 <HAL_DMA_ConfigChannelAttributes>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 80026e0:	f7ff f83c 	bl	800175c <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a5c      	ldr	r2, [pc, #368]	@ (800285c <HAL_SAI_MspInit+0x320>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	f040 80eb 	bne.w	80028c6 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80026f0:	4b52      	ldr	r3, [pc, #328]	@ (800283c <HAL_SAI_MspInit+0x300>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10e      	bne.n	8002716 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026f8:	4b51      	ldr	r3, [pc, #324]	@ (8002840 <HAL_SAI_MspInit+0x304>)
 80026fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026fe:	4a50      	ldr	r2, [pc, #320]	@ (8002840 <HAL_SAI_MspInit+0x304>)
 8002700:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002704:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002708:	4b4d      	ldr	r3, [pc, #308]	@ (8002840 <HAL_SAI_MspInit+0x304>)
 800270a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800270e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002716:	4b49      	ldr	r3, [pc, #292]	@ (800283c <HAL_SAI_MspInit+0x300>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	4a47      	ldr	r2, [pc, #284]	@ (800283c <HAL_SAI_MspInit+0x300>)
 800271e:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002724:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002738:	230d      	movs	r3, #13
 800273a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002742:	4619      	mov	r1, r3
 8002744:	4846      	ldr	r0, [pc, #280]	@ (8002860 <HAL_SAI_MspInit+0x324>)
 8002746:	f004 fe8b 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800274a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800274e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002762:	230d      	movs	r3, #13
 8002764:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002768:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800276c:	4619      	mov	r1, r3
 800276e:	483d      	ldr	r0, [pc, #244]	@ (8002864 <HAL_SAI_MspInit+0x328>)
 8002770:	f004 fe76 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002778:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800278c:	230d      	movs	r3, #13
 800278e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002792:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002796:	4619      	mov	r1, r3
 8002798:	4832      	ldr	r0, [pc, #200]	@ (8002864 <HAL_SAI_MspInit+0x328>)
 800279a:	f004 fe61 	bl	8007460 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800279e:	2321      	movs	r3, #33	@ 0x21
 80027a0:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80027a2:	2327      	movs	r3, #39	@ 0x27
 80027a4:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80027b2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80027b8:	2302      	movs	r3, #2
 80027ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80027bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80027ce:	2300      	movs	r3, #0
 80027d0:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80027d6:	2300      	movs	r3, #0
 80027d8:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80027da:	2300      	movs	r3, #0
 80027dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80027de:	2300      	movs	r3, #0
 80027e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 80027e2:	f107 0310 	add.w	r3, r7, #16
 80027e6:	4920      	ldr	r1, [pc, #128]	@ (8002868 <HAL_SAI_MspInit+0x32c>)
 80027e8:	4618      	mov	r0, r3
 80027ea:	f003 ff4d 	bl	8006688 <HAL_DMAEx_List_BuildNode>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 80027f4:	f7fe ffb2 	bl	800175c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 80027f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002868 <HAL_SAI_MspInit+0x32c>)
 80027fa:	2100      	movs	r1, #0
 80027fc:	481b      	ldr	r0, [pc, #108]	@ (800286c <HAL_SAI_MspInit+0x330>)
 80027fe:	f003 ff6f 	bl	80066e0 <HAL_DMAEx_List_InsertNode>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8002808:	f7fe ffa8 	bl	800175c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800280c:	4817      	ldr	r0, [pc, #92]	@ (800286c <HAL_SAI_MspInit+0x330>)
 800280e:	f004 f830 	bl	8006872 <HAL_DMAEx_List_SetCircularMode>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8002818:	f7fe ffa0 	bl	800175c <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800281c:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <HAL_SAI_MspInit+0x334>)
 800281e:	4a15      	ldr	r2, [pc, #84]	@ (8002874 <HAL_SAI_MspInit+0x338>)
 8002820:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <HAL_SAI_MspInit+0x334>)
 8002824:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002828:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_SAI_MspInit+0x334>)
 800282c:	2200      	movs	r2, #0
 800282e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002830:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <HAL_SAI_MspInit+0x334>)
 8002832:	2200      	movs	r2, #0
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40
 8002836:	e01f      	b.n	8002878 <HAL_SAI_MspInit+0x33c>
 8002838:	40015804 	.word	0x40015804
 800283c:	20002968 	.word	0x20002968
 8002840:	46020c00 	.word	0x46020c00
 8002844:	42020400 	.word	0x42020400
 8002848:	42021800 	.word	0x42021800
 800284c:	200005e4 	.word	0x200005e4
 8002850:	20000608 	.word	0x20000608
 8002854:	20000620 	.word	0x20000620
 8002858:	400201d0 	.word	0x400201d0
 800285c:	40015824 	.word	0x40015824
 8002860:	42020000 	.word	0x42020000
 8002864:	42020800 	.word	0x42020800
 8002868:	20000698 	.word	0x20000698
 800286c:	200006bc 	.word	0x200006bc
 8002870:	200006d4 	.word	0x200006d4
 8002874:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002878:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_SAI_MspInit+0x394>)
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800287e:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_SAI_MspInit+0x394>)
 8002880:	2281      	movs	r2, #129	@ 0x81
 8002882:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002884:	4812      	ldr	r0, [pc, #72]	@ (80028d0 <HAL_SAI_MspInit+0x394>)
 8002886:	f003 fd3f 	bl	8006308 <HAL_DMAEx_List_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 8002890:	f7fe ff64 	bl	800175c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002894:	490f      	ldr	r1, [pc, #60]	@ (80028d4 <HAL_SAI_MspInit+0x398>)
 8002896:	480e      	ldr	r0, [pc, #56]	@ (80028d0 <HAL_SAI_MspInit+0x394>)
 8002898:	f004 f84c 	bl	8006934 <HAL_DMAEx_List_LinkQ>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80028a2:	f7fe ff5b 	bl	800175c <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a09      	ldr	r2, [pc, #36]	@ (80028d0 <HAL_SAI_MspInit+0x394>)
 80028aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80028ae:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <HAL_SAI_MspInit+0x394>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80028b4:	2110      	movs	r1, #16
 80028b6:	4806      	ldr	r0, [pc, #24]	@ (80028d0 <HAL_SAI_MspInit+0x394>)
 80028b8:	f003 f934 	bl	8005b24 <HAL_DMA_ConfigChannelAttributes>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 80028c2:	f7fe ff4b 	bl	800175c <Error_Handler>
    }

    }
}
 80028c6:	bf00      	nop
 80028c8:	3790      	adds	r7, #144	@ 0x90
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200006d4 	.word	0x200006d4
 80028d4:	200006bc 	.word	0x200006bc

080028d8 <NMI_Handler>:
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <NMI_Handler+0x4>

080028e0 <HardFault_Handler>:
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <MemManage_Handler+0x4>

080028f0 <BusFault_Handler>:
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <BusFault_Handler+0x4>

080028f8 <UsageFault_Handler>:
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <UsageFault_Handler+0x4>

08002900 <SVC_Handler>:
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <DebugMon_Handler>:
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <PendSV_Handler>:
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <SysTick_Handler>:
 800292a:	b580      	push	{r7, lr}
 800292c:	af00      	add	r7, sp, #0
 800292e:	f000 f979 	bl	8002c24 <HAL_IncTick>
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}

08002936 <EXTI1_IRQHandler>:
 8002936:	b580      	push	{r7, lr}
 8002938:	af00      	add	r7, sp, #0
 800293a:	2002      	movs	r0, #2
 800293c:	f004 ff80 	bl	8007840 <HAL_GPIO_EXTI_IRQHandler>
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}

08002944 <EXTI4_IRQHandler>:
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
 8002948:	2010      	movs	r0, #16
 800294a:	f004 ff79 	bl	8007840 <HAL_GPIO_EXTI_IRQHandler>
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}

08002952 <EXTI5_IRQHandler>:
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0
 8002956:	2020      	movs	r0, #32
 8002958:	f004 ff72 	bl	8007840 <HAL_GPIO_EXTI_IRQHandler>
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}

08002960 <GPDMA1_Channel0_IRQHandler>:
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
 8002964:	4802      	ldr	r0, [pc, #8]	@ (8002970 <GPDMA1_Channel0_IRQHandler+0x10>)
 8002966:	f002 ff6e 	bl	8005846 <HAL_DMA_IRQHandler>
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000017c 	.word	0x2000017c

08002974 <GPDMA1_Channel1_IRQHandler>:
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
 8002978:	4802      	ldr	r0, [pc, #8]	@ (8002984 <GPDMA1_Channel1_IRQHandler+0x10>)
 800297a:	f002 ff64 	bl	8005846 <HAL_DMA_IRQHandler>
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200006d4 	.word	0x200006d4

08002988 <GPDMA1_Channel2_IRQHandler>:
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
 800298c:	4802      	ldr	r0, [pc, #8]	@ (8002998 <GPDMA1_Channel2_IRQHandler+0x10>)
 800298e:	f002 ff5a 	bl	8005846 <HAL_DMA_IRQHandler>
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200001f4 	.word	0x200001f4

0800299c <GPDMA1_Channel3_IRQHandler>:
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4802      	ldr	r0, [pc, #8]	@ (80029ac <GPDMA1_Channel3_IRQHandler+0x10>)
 80029a2:	f002 ff50 	bl	8005846 <HAL_DMA_IRQHandler>
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000620 	.word	0x20000620

080029b0 <ADC1_2_IRQHandler>:
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <ADC1_2_IRQHandler+0x10>)
 80029b6:	f001 f925 	bl	8003c04 <HAL_ADC_IRQHandler>
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000028 	.word	0x20000028

080029c4 <I2C2_EV_IRQHandler>:
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <I2C2_EV_IRQHandler+0x10>)
 80029ca:	f005 f810 	bl	80079ee <HAL_I2C_EV_IRQHandler>
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000388 	.word	0x20000388

080029d8 <I2C2_ER_IRQHandler>:
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4802      	ldr	r0, [pc, #8]	@ (80029e8 <I2C2_ER_IRQHandler+0x10>)
 80029de:	f005 f820 	bl	8007a22 <HAL_I2C_ER_IRQHandler>
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000388 	.word	0x20000388

080029ec <USART1_IRQHandler>:
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4802      	ldr	r0, [pc, #8]	@ (80029fc <USART1_IRQHandler+0x10>)
 80029f2:	f00c ffaf 	bl	800f954 <HAL_UART_IRQHandler>
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200007e4 	.word	0x200007e4

08002a00 <LTDC_IRQHandler>:
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4802      	ldr	r0, [pc, #8]	@ (8002a10 <LTDC_IRQHandler+0x10>)
 8002a06:	f005 ff99 	bl	800893c <HAL_LTDC_IRQHandler>
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200003dc 	.word	0x200003dc

08002a14 <SystemInit>:
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <SystemInit+0x68>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1e:	4a17      	ldr	r2, [pc, #92]	@ (8002a7c <SystemInit+0x68>)
 8002a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002a28:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <SystemInit+0x6c>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <SystemInit+0x6c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	61da      	str	r2, [r3, #28]
 8002a34:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <SystemInit+0x6c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	621a      	str	r2, [r3, #32]
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <SystemInit+0x6c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a40:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <SystemInit+0x6c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0e      	ldr	r2, [pc, #56]	@ (8002a80 <SystemInit+0x6c>)
 8002a46:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a4a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <SystemInit+0x6c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a56:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <SystemInit+0x6c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a09      	ldr	r2, [pc, #36]	@ (8002a80 <SystemInit+0x6c>)
 8002a5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <SystemInit+0x6c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <SystemInit+0x68>)
 8002a6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00
 8002a80:	46020c00 	.word	0x46020c00

08002a84 <Reset_Handler>:
 8002a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002abc <LoopForever+0x2>
 8002a88:	f7ff ffc4 	bl	8002a14 <SystemInit>
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	e003      	b.n	8002a98 <LoopCopyDataInit>

08002a90 <CopyDataInit>:
 8002a90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <LoopForever+0x6>)
 8002a92:	585b      	ldr	r3, [r3, r1]
 8002a94:	5043      	str	r3, [r0, r1]
 8002a96:	3104      	adds	r1, #4

08002a98 <LoopCopyDataInit>:
 8002a98:	480a      	ldr	r0, [pc, #40]	@ (8002ac4 <LoopForever+0xa>)
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <LoopForever+0xe>)
 8002a9c:	1842      	adds	r2, r0, r1
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3f6      	bcc.n	8002a90 <CopyDataInit>
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002acc <LoopForever+0x12>)
 8002aa4:	e002      	b.n	8002aac <LoopFillZerobss>

08002aa6 <FillZerobss>:
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f842 3b04 	str.w	r3, [r2], #4

08002aac <LoopFillZerobss>:
 8002aac:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <LoopForever+0x16>)
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d3f9      	bcc.n	8002aa6 <FillZerobss>
 8002ab2:	f00e fc11 	bl	80112d8 <__libc_init_array>
 8002ab6:	f7fd fd89 	bl	80005cc <main>

08002aba <LoopForever>:
 8002aba:	e7fe      	b.n	8002aba <LoopForever>
 8002abc:	202f0000 	.word	0x202f0000
 8002ac0:	08011448 	.word	0x08011448
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	2000000c 	.word	0x2000000c
 8002acc:	2000000c 	.word	0x2000000c
 8002ad0:	20002970 	.word	0x20002970

08002ad4 <ADC4_IRQHandler>:
 8002ad4:	e7fe      	b.n	8002ad4 <ADC4_IRQHandler>
	...

08002ad8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002adc:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <HAL_Init+0x50>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a11      	ldr	r2, [pc, #68]	@ (8002b28 <HAL_Init+0x50>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f002 fb94 	bl	8005216 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002aee:	f007 fcd1 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 8002af2:	4602      	mov	r2, r0
 8002af4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <HAL_Init+0x54>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	490c      	ldr	r1, [pc, #48]	@ (8002b30 <HAL_Init+0x58>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
 8002b04:	4a0b      	ldr	r2, [pc, #44]	@ (8002b34 <HAL_Init+0x5c>)
 8002b06:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b08:	2004      	movs	r0, #4
 8002b0a:	f002 fbd9 	bl	80052c0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b0e:	200f      	movs	r0, #15
 8002b10:	f000 f812 	bl	8002b38 <HAL_InitTick>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e002      	b.n	8002b24 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b1e:	f7fe fe23 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	46020c00 	.word	0x46020c00
 8002b30:	08011338 	.word	0x08011338
 8002b34:	20000000 	.word	0x20000000

08002b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b44:	4b33      	ldr	r3, [pc, #204]	@ (8002c14 <HAL_InitTick+0xdc>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e05c      	b.n	8002c0a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b50:	4b31      	ldr	r3, [pc, #196]	@ (8002c18 <HAL_InitTick+0xe0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d10c      	bne.n	8002b76 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c1c <HAL_InitTick+0xe4>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b2c      	ldr	r3, [pc, #176]	@ (8002c14 <HAL_InitTick+0xdc>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e037      	b.n	8002be6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002b76:	f002 fbfb 	bl	8005370 <HAL_SYSTICK_GetCLKSourceConfig>
 8002b7a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d023      	beq.n	8002bca <HAL_InitTick+0x92>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d82d      	bhi.n	8002be4 <HAL_InitTick+0xac>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_InitTick+0x5e>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d00d      	beq.n	8002bb0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002b94:	e026      	b.n	8002be4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002b96:	4b21      	ldr	r3, [pc, #132]	@ (8002c1c <HAL_InitTick+0xe4>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c14 <HAL_InitTick+0xdc>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002ba4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	60fb      	str	r3, [r7, #12]
        break;
 8002bae:	e01a      	b.n	8002be6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bb0:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <HAL_InitTick+0xdc>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bbe:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
        break;
 8002bc8:	e00d      	b.n	8002be6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_InitTick+0xdc>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	60fb      	str	r3, [r7, #12]
        break;
 8002be2:	e000      	b.n	8002be6 <HAL_InitTick+0xae>
        break;
 8002be4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f002 fb48 	bl	800527c <HAL_SYSTICK_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e009      	b.n	8002c0a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfe:	f002 fb15 	bl	800522c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c02:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000008 	.word	0x20000008
 8002c18:	e000e010 	.word	0xe000e010
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_IncTick+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_IncTick+0x24>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <HAL_IncTick+0x24>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000008 	.word	0x20000008
 8002c48:	2000296c 	.word	0x2000296c

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b03      	ldr	r3, [pc, #12]	@ (8002c60 <HAL_GetTick+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	2000296c 	.word	0x2000296c

08002c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff ffee 	bl	8002c4c <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d005      	beq.n	8002c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <HAL_Delay+0x44>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c8a:	bf00      	nop
 8002c8c:	f7ff ffde 	bl	8002c4c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d8f7      	bhi.n	8002c8c <HAL_Delay+0x28>
  {
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000008 	.word	0x20000008

08002cac <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb8:	f023 0201 	bic.w	r2, r3, #1
 8002cbc:	4904      	ldr	r1, [pc, #16]	@ (8002cd0 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	46000400 	.word	0x46000400

08002cd4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce0:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002ce4:	4904      	ldr	r1, [pc, #16]	@ (8002cf8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	46000400 	.word	0x46000400

08002cfc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	609a      	str	r2, [r3, #8]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <LL_ADC_SetResolution+0x3c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d104      	bne.n	8002d84 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f023 020c 	bic.w	r2, r3, #12
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	46021000 	.word	0x46021000

08002da4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3360      	adds	r3, #96	@ 0x60
 8002db6:	461a      	mov	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3360      	adds	r3, #96	@ 0x60
 8002df4:	461a      	mov	r2, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b087      	sub	sp, #28
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3360      	adds	r3, #96	@ 0x60
 8002e22:	461a      	mov	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	601a      	str	r2, [r3, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3360      	adds	r3, #96	@ 0x60
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3360      	adds	r3, #96	@ 0x60
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	601a      	str	r2, [r3, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ec6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	2a00      	cmp	r2, #0
 8002ede:	d002      	beq.n	8002ee6 <LL_ADC_SetGainCompensation+0x32>
 8002ee0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002ee4:	e000      	b.n	8002ee8 <LL_ADC_SetGainCompensation+0x34>
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2107      	movs	r1, #7
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	401a      	ands	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800301c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d020      	beq.n	8002fb6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3330      	adds	r3, #48	@ 0x30
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	4413      	add	r3, r2
 8002f86:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	211f      	movs	r1, #31
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0e9b      	lsrs	r3, r3, #26
 8002fa0:	f003 011f 	and.w	r1, r3, #31
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002fb4:	e02b      	b.n	800300e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	210f      	movs	r1, #15
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	401a      	ands	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	e010      	b.n	8003000 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	613b      	str	r3, [r7, #16]
  return result;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	e003      	b.n	8003000 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	f001 011f 	and.w	r1, r1, #31
 8003006:	408b      	lsls	r3, r1
 8003008:	431a      	orrs	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800300e:	bf00      	nop
 8003010:	3724      	adds	r7, #36	@ 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	46021000 	.word	0x46021000

08003020 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2201      	movs	r2, #1
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	e015      	b.n	8003070 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	60fb      	str	r3, [r7, #12]
  return result;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800305a:	2320      	movs	r3, #32
 800305c:	e003      	b.n	8003066 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2201      	movs	r2, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	0e9b      	lsrs	r3, r3, #26
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	401a      	ands	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0303 	and.w	r3, r3, #3
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030de:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b08b      	sub	sp, #44	@ 0x2c
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a2d      	ldr	r2, [pc, #180]	@ (80031bc <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d042      	beq.n	8003192 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d104      	bne.n	8003120 <LL_ADC_SetChannelSamplingTime+0x28>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	0e9b      	lsrs	r3, r3, #26
 800311a:	f003 021f 	and.w	r2, r3, #31
 800311e:	e011      	b.n	8003144 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	617b      	str	r3, [r7, #20]
  return result;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003136:	2320      	movs	r3, #32
 8003138:	e003      	b.n	8003142 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	0e5b      	lsrs	r3, r3, #25
 8003148:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	1ad2      	subs	r2, r2, r3
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3314      	adds	r3, #20
 8003162:	461a      	mov	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	0e5b      	lsrs	r3, r3, #25
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	4413      	add	r3, r2
 8003170:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2107      	movs	r1, #7
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	401a      	ands	r2, r3
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	431a      	orrs	r2, r3
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003190:	e00e      	b.n	80031b0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	43db      	mvns	r3, r3
 800319c:	401a      	ands	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	0219      	lsls	r1, r3, #8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	400b      	ands	r3, r1
 80031a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031aa:	431a      	orrs	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	615a      	str	r2, [r3, #20]
}
 80031b0:	bf00      	nop
 80031b2:	372c      	adds	r7, #44	@ 0x2c
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	46021000 	.word	0x46021000

080031c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031d8:	43db      	mvns	r3, r3
 80031da:	401a      	ands	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0318 	and.w	r3, r3, #24
 80031e2:	4908      	ldr	r1, [pc, #32]	@ (8003204 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031e4:	40d9      	lsrs	r1, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	400b      	ands	r3, r1
 80031ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031ee:	431a      	orrs	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	000fffff 	.word	0x000fffff

08003208 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 031f 	and.w	r3, r3, #31
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003250:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6093      	str	r3, [r2, #8]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003278:	d101      	bne.n	800327e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800329c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032c8:	d101      	bne.n	80032ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	609a      	str	r2, [r3, #8]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <LL_ADC_IsEnabled+0x18>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <LL_ADC_IsEnabled+0x1a>
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800333a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800333e:	f043 0204 	orr.w	r2, r3, #4
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	609a      	str	r2, [r3, #8]
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d101      	bne.n	800336a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d101      	bne.n	8003390 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b08b      	sub	sp, #44	@ 0x2c
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e2ce      	b.n	800395e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a95      	ldr	r2, [pc, #596]	@ (8003624 <HAL_ADC_Init+0x284>)
 80033ce:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7fe f9df 	bl	800179c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff37 	bl	8003264 <LL_ADC_IsDeepPowerDownEnabled>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff1d 	bl	8003240 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff52 	bl	80032b4 <LL_ADC_IsInternalRegulatorEnabled>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d115      	bne.n	8003442 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff36 	bl	800328c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003420:	4b81      	ldr	r3, [pc, #516]	@ (8003628 <HAL_ADC_Init+0x288>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	4a81      	ldr	r2, [pc, #516]	@ (800362c <HAL_ADC_Init+0x28c>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	3301      	adds	r3, #1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003434:	e002      	b.n	800343c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3b01      	subs	r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f9      	bne.n	8003436 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff34 	bl	80032b4 <LL_ADC_IsInternalRegulatorEnabled>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10e      	bne.n	8003470 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003456:	f043 0210 	orr.w	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff6c 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 800347a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 825f 	bne.w	8003948 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 825b 	bne.w	8003948 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003496:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800349a:	f043 0202 	orr.w	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff2c 	bl	8003304 <LL_ADC_IsEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d14f      	bne.n	8003552 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003624 <HAL_ADC_Init+0x284>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d037      	beq.n	800352c <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5b      	ldr	r2, [pc, #364]	@ (8003630 <HAL_ADC_Init+0x290>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_ADC_Init+0x130>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003634 <HAL_ADC_Init+0x294>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10e      	bne.n	80034ee <HAL_ADC_Init+0x14e>
 80034d0:	4857      	ldr	r0, [pc, #348]	@ (8003630 <HAL_ADC_Init+0x290>)
 80034d2:	f7ff ff17 	bl	8003304 <LL_ADC_IsEnabled>
 80034d6:	4604      	mov	r4, r0
 80034d8:	4856      	ldr	r0, [pc, #344]	@ (8003634 <HAL_ADC_Init+0x294>)
 80034da:	f7ff ff13 	bl	8003304 <LL_ADC_IsEnabled>
 80034de:	4603      	mov	r3, r0
 80034e0:	4323      	orrs	r3, r4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e008      	b.n	8003500 <HAL_ADC_Init+0x160>
 80034ee:	484d      	ldr	r0, [pc, #308]	@ (8003624 <HAL_ADC_Init+0x284>)
 80034f0:	f7ff ff08 	bl	8003304 <LL_ADC_IsEnabled>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d026      	beq.n	8003552 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a49      	ldr	r2, [pc, #292]	@ (8003630 <HAL_ADC_Init+0x290>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_ADC_Init+0x178>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a48      	ldr	r2, [pc, #288]	@ (8003634 <HAL_ADC_Init+0x294>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_ADC_Init+0x17c>
 8003518:	4a47      	ldr	r2, [pc, #284]	@ (8003638 <HAL_ADC_Init+0x298>)
 800351a:	e000      	b.n	800351e <HAL_ADC_Init+0x17e>
 800351c:	4a47      	ldr	r2, [pc, #284]	@ (800363c <HAL_ADC_Init+0x29c>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f7ff fbe9 	bl	8002cfc <LL_ADC_SetCommonClock>
 800352a:	e012      	b.n	8003552 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7ff fc14 	bl	8002d64 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800353c:	4b3f      	ldr	r3, [pc, #252]	@ (800363c <HAL_ADC_Init+0x29c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800354c:	493b      	ldr	r1, [pc, #236]	@ (800363c <HAL_ADC_Init+0x29c>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a33      	ldr	r2, [pc, #204]	@ (8003624 <HAL_ADC_Init+0x284>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d010      	beq.n	800357e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003562:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003568:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800356e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003576:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003578:	4313      	orrs	r3, r2
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	e035      	b.n	80035ea <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7f1b      	ldrb	r3, [r3, #28]
 8003582:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800358a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800358c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003592:	2a00      	cmp	r2, #0
 8003594:	d002      	beq.n	800359c <HAL_ADC_Init+0x1fc>
 8003596:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800359a:	e000      	b.n	800359e <HAL_ADC_Init+0x1fe>
 800359c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800359e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035a4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da04      	bge.n	80035b8 <HAL_ADC_Init+0x218>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035b6:	e001      	b.n	80035bc <HAL_ADC_Init+0x21c>
 80035b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80035bc:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	491b      	ldr	r1, [pc, #108]	@ (8003630 <HAL_ADC_Init+0x290>)
 80035c4:	428b      	cmp	r3, r1
 80035c6:	d004      	beq.n	80035d2 <HAL_ADC_Init+0x232>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4919      	ldr	r1, [pc, #100]	@ (8003634 <HAL_ADC_Init+0x294>)
 80035ce:	428b      	cmp	r3, r1
 80035d0:	d103      	bne.n	80035da <HAL_ADC_Init+0x23a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035d8:	e003      	b.n	80035e2 <HAL_ADC_Init+0x242>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035e0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035e2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d131      	bne.n	8003658 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <HAL_ADC_Init+0x284>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	3b01      	subs	r3, #1
 8003604:	045b      	lsls	r3, r3, #17
 8003606:	6a3a      	ldr	r2, [r7, #32]
 8003608:	4313      	orrs	r3, r2
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	e024      	b.n	8003658 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003614:	2b00      	cmp	r3, #0
 8003616:	d113      	bne.n	8003640 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	e01a      	b.n	8003658 <HAL_ADC_Init+0x2b8>
 8003622:	bf00      	nop
 8003624:	46021000 	.word	0x46021000
 8003628:	20000000 	.word	0x20000000
 800362c:	053e2d63 	.word	0x053e2d63
 8003630:	42028000 	.word	0x42028000
 8003634:	42028100 	.word	0x42028100
 8003638:	42028300 	.word	0x42028300
 800363c:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003650:	f043 0201 	orr.w	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a75      	ldr	r2, [pc, #468]	@ (8003834 <HAL_ADC_Init+0x494>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003676:	4313      	orrs	r3, r2
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	4313      	orrs	r3, r2
 800367c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	4b6c      	ldr	r3, [pc, #432]	@ (8003838 <HAL_ADC_Init+0x498>)
 8003686:	4013      	ands	r3, r2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	6a39      	ldr	r1, [r7, #32]
 800368e:	430b      	orrs	r3, r1
 8003690:	60d3      	str	r3, [r2, #12]
 8003692:	e031      	b.n	80036f8 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a8:	4313      	orrs	r3, r2
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	4b61      	ldr	r3, [pc, #388]	@ (800383c <HAL_ADC_Init+0x49c>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	6a39      	ldr	r1, [r7, #32]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003834 <HAL_ADC_Init+0x494>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f000 80a4 	beq.w	800384c <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fe22 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 800370e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fe2f 	bl	8003378 <LL_ADC_INJ_IsConversionOngoing>
 800371a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d166      	bne.n	80037f0 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d163      	bne.n	80037f0 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7f1b      	ldrb	r3, [r3, #28]
 800372c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4943      	ldr	r1, [pc, #268]	@ (8003840 <HAL_ADC_Init+0x4a0>)
 8003734:	428b      	cmp	r3, r1
 8003736:	d004      	beq.n	8003742 <HAL_ADC_Init+0x3a2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4941      	ldr	r1, [pc, #260]	@ (8003844 <HAL_ADC_Init+0x4a4>)
 800373e:	428b      	cmp	r3, r1
 8003740:	d102      	bne.n	8003748 <HAL_ADC_Init+0x3a8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003746:	e002      	b.n	800374e <HAL_ADC_Init+0x3ae>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374c:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800374e:	4313      	orrs	r3, r2
 8003750:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800375c:	f023 0303 	bic.w	r3, r3, #3
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	6a39      	ldr	r1, [r7, #32]
 8003766:	430b      	orrs	r3, r1
 8003768:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7ff fb99 	bl	8002eb4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003788:	2b01      	cmp	r3, #1
 800378a:	d11e      	bne.n	80037ca <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003790:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <HAL_ADC_Init+0x4a8>)
 800379a:	4013      	ands	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037a0:	0411      	lsls	r1, r2, #16
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80037ac:	4311      	orrs	r1, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80037b2:	4311      	orrs	r1, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037b8:	0892      	lsrs	r2, r2, #2
 80037ba:	430a      	orrs	r2, r1
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	611a      	str	r2, [r3, #16]
 80037c8:	e007      	b.n	80037da <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d10c      	bne.n	8003812 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f023 010f 	bic.w	r1, r3, #15
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003806:	1e5a      	subs	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003810:	e007      	b.n	8003822 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 020f 	bic.w	r2, r2, #15
 8003820:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003832:	e092      	b.n	800395a <HAL_ADC_Init+0x5ba>
 8003834:	46021000 	.word	0x46021000
 8003838:	fff0c013 	.word	0xfff0c013
 800383c:	ffde800d 	.word	0xffde800d
 8003840:	42028000 	.word	0x42028000
 8003844:	42028100 	.word	0x42028100
 8003848:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003852:	2b01      	cmp	r3, #1
 8003854:	d111      	bne.n	800387a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800385e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003864:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800386a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	4313      	orrs	r3, r2
 8003870:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	4b39      	ldr	r3, [pc, #228]	@ (8003968 <HAL_ADC_Init+0x5c8>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	69f9      	ldr	r1, [r7, #28]
 800388a:	430b      	orrs	r3, r1
 800388c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003896:	461a      	mov	r2, r3
 8003898:	2100      	movs	r1, #0
 800389a:	f7ff fb2e 	bl	8002efa <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a6:	461a      	mov	r2, r3
 80038a8:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80038ac:	f7ff fb25 	bl	8002efa <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d108      	bne.n	80038ca <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f062 020f 	orn	r2, r2, #15
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038c8:	e018      	b.n	80038fc <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038d2:	d113      	bne.n	80038fc <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	3b01      	subs	r3, #1
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	f003 031c 	and.w	r3, r3, #28
 80038e6:	f06f 020f 	mvn.w	r2, #15
 80038ea:	fa02 f103 	lsl.w	r1, r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	4b1a      	ldr	r3, [pc, #104]	@ (800396c <HAL_ADC_Init+0x5cc>)
 8003904:	4013      	ands	r3, r2
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	429a      	cmp	r2, r3
 800390a:	d10b      	bne.n	8003924 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003922:	e01a      	b.n	800395a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003928:	f023 0312 	bic.w	r3, r3, #18
 800392c:	f043 0210 	orr.w	r2, r3, #16
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003946:	e008      	b.n	800395a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800394c:	f043 0210 	orr.w	r2, r3, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800395a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800395e:	4618      	mov	r0, r3
 8003960:	372c      	adds	r7, #44	@ 0x2c
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}
 8003966:	bf00      	nop
 8003968:	f7fffc02 	.word	0xf7fffc02
 800396c:	833ffff3 	.word	0x833ffff3

08003970 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b0a2      	sub	sp, #136	@ 0x88
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a98      	ldr	r2, [pc, #608]	@ (8003be4 <HAL_ADC_Start_DMA+0x274>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_ADC_Start_DMA+0x20>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a97      	ldr	r2, [pc, #604]	@ (8003be8 <HAL_ADC_Start_DMA+0x278>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_ADC_Start_DMA+0x24>
 8003990:	4b96      	ldr	r3, [pc, #600]	@ (8003bec <HAL_ADC_Start_DMA+0x27c>)
 8003992:	e000      	b.n	8003996 <HAL_ADC_Start_DMA+0x26>
 8003994:	4b96      	ldr	r3, [pc, #600]	@ (8003bf0 <HAL_ADC_Start_DMA+0x280>)
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fc36 	bl	8003208 <LL_ADC_GetMultimode>
 800399c:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fcd5 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 8111 	bne.w	8003bd2 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_ADC_Start_DMA+0x4e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e10e      	b.n	8003bdc <HAL_ADC_Start_DMA+0x26c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	d003      	beq.n	80039da <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	f040 80f4 	bne.w	8003bc2 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f001 fa18 	bl	8004e10 <ADC_Enable>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80039e6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 80e4 	bne.w	8003bb8 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a7a      	ldr	r2, [pc, #488]	@ (8003bf4 <HAL_ADC_Start_DMA+0x284>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d026      	beq.n	8003a5c <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a75      	ldr	r2, [pc, #468]	@ (8003be8 <HAL_ADC_Start_DMA+0x278>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d002      	beq.n	8003a1e <HAL_ADC_Start_DMA+0xae>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	e000      	b.n	8003a20 <HAL_ADC_Start_DMA+0xb0>
 8003a1e:	4b71      	ldr	r3, [pc, #452]	@ (8003be4 <HAL_ADC_Start_DMA+0x274>)
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d002      	beq.n	8003a2e <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d105      	bne.n	8003a3a <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a32:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d006      	beq.n	8003a54 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a4a:	f023 0206 	bic.w	r2, r3, #6
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a52:	e006      	b.n	8003a62 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a5a:	e002      	b.n	8003a62 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a64      	ldr	r2, [pc, #400]	@ (8003bf8 <HAL_ADC_Start_DMA+0x288>)
 8003a68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6e:	4a63      	ldr	r2, [pc, #396]	@ (8003bfc <HAL_ADC_Start_DMA+0x28c>)
 8003a70:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a76:	4a62      	ldr	r2, [pc, #392]	@ (8003c00 <HAL_ADC_Start_DMA+0x290>)
 8003a78:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	221c      	movs	r2, #28
 8003a80:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0210 	orr.w	r2, r2, #16
 8003a98:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a55      	ldr	r2, [pc, #340]	@ (8003bf4 <HAL_ADC_Start_DMA+0x284>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d107      	bne.n	8003ab4 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d04f      	beq.n	8003b62 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d046      	beq.n	8003b5a <HAL_ADC_Start_DMA+0x1ea>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d040      	beq.n	8003b5a <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f002 fde4 	bl	80066b4 <HAL_DMAEx_List_GetNodeConfig>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e072      	b.n	8003bdc <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d104      	bne.n	8003b06 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b04:	e00a      	b.n	8003b1c <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d104      	bne.n	8003b16 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b14:	e002      	b.n	8003b1c <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b28:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f002 fd07 	bl	8006560 <HAL_DMAEx_List_Start_IT>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b58:	e028      	b.n	8003bac <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b60:	e024      	b.n	8003bac <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d104      	bne.n	8003b76 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b74:	e00c      	b.n	8003b90 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d104      	bne.n	8003b8a <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b88:	e002      	b.n	8003b90 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3340      	adds	r3, #64	@ 0x40
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ba2:	f001 fd4b 	bl	800563c <HAL_DMA_Start_IT>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fbba 	bl	800332a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003bb6:	e00f      	b.n	8003bd8 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003bd0:	e002      	b.n	8003bd8 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003bd8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3788      	adds	r7, #136	@ 0x88
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	42028000 	.word	0x42028000
 8003be8:	42028100 	.word	0x42028100
 8003bec:	42028300 	.word	0x42028300
 8003bf0:	46021300 	.word	0x46021300
 8003bf4:	46021000 	.word	0x46021000
 8003bf8:	08004f45 	.word	0x08004f45
 8003bfc:	0800501d 	.word	0x0800501d
 8003c00:	08005039 	.word	0x08005039

08003c04 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a77      	ldr	r2, [pc, #476]	@ (8003e04 <HAL_ADC_IRQHandler+0x200>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_ADC_IRQHandler+0x30>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a76      	ldr	r2, [pc, #472]	@ (8003e08 <HAL_ADC_IRQHandler+0x204>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <HAL_ADC_IRQHandler+0x34>
 8003c34:	4b75      	ldr	r3, [pc, #468]	@ (8003e0c <HAL_ADC_IRQHandler+0x208>)
 8003c36:	e000      	b.n	8003c3a <HAL_ADC_IRQHandler+0x36>
 8003c38:	4b75      	ldr	r3, [pc, #468]	@ (8003e10 <HAL_ADC_IRQHandler+0x20c>)
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fae4 	bl	8003208 <LL_ADC_GetMultimode>
 8003c40:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d017      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x78>
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d105      	bne.n	8003c6e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c66:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f001 fa1a 	bl	80050a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x8c>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80d1 	beq.w	8003e3e <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80cb 	beq.w	8003e3e <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a53      	ldr	r2, [pc, #332]	@ (8003e14 <HAL_ADC_IRQHandler+0x210>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d06c      	beq.n	8003da4 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff f932 	bl	8002f38 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80aa 	beq.w	8003e30 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a49      	ldr	r2, [pc, #292]	@ (8003e08 <HAL_ADC_IRQHandler+0x204>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d002      	beq.n	8003cec <HAL_ADC_IRQHandler+0xe8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	e000      	b.n	8003cee <HAL_ADC_IRQHandler+0xea>
 8003cec:	4b45      	ldr	r3, [pc, #276]	@ (8003e04 <HAL_ADC_IRQHandler+0x200>)
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d008      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d002      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b09      	cmp	r3, #9
 8003d06:	d104      	bne.n	8003d12 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	e00c      	b.n	8003d2c <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a3c      	ldr	r2, [pc, #240]	@ (8003e08 <HAL_ADC_IRQHandler+0x204>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d002      	beq.n	8003d22 <HAL_ADC_IRQHandler+0x11e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	e000      	b.n	8003d24 <HAL_ADC_IRQHandler+0x120>
 8003d22:	4b38      	ldr	r3, [pc, #224]	@ (8003e04 <HAL_ADC_IRQHandler+0x200>)
 8003d24:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d17c      	bne.n	8003e30 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d175      	bne.n	8003e30 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fb02 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11a      	bne.n	8003d8a <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 020c 	bic.w	r2, r2, #12
 8003d62:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d159      	bne.n	8003e30 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d80:	f043 0201 	orr.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	679a      	str	r2, [r3, #120]	@ 0x78
 8003d88:	e052      	b.n	8003e30 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d8e:	f043 0210 	orr.w	r2, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d9a:	f043 0201 	orr.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003da2:	e045      	b.n	8003e30 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff f8c5 	bl	8002f38 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d03d      	beq.n	8003e30 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d138      	bne.n	8003e30 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d131      	bne.n	8003e30 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fabe 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d11d      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 020c 	bic.w	r2, r2, #12
 8003dea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	679a      	str	r2, [r3, #120]	@ 0x78
 8003e00:	e016      	b.n	8003e30 <HAL_ADC_IRQHandler+0x22c>
 8003e02:	bf00      	nop
 8003e04:	42028000 	.word	0x42028000
 8003e08:	42028100 	.word	0x42028100
 8003e0c:	42028300 	.word	0x42028300
 8003e10:	46021300 	.word	0x46021300
 8003e14:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e28:	f043 0201 	orr.w	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7fd fc47 	bl	80016c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	220c      	movs	r2, #12
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a8c      	ldr	r2, [pc, #560]	@ (8004074 <HAL_ADC_IRQHandler+0x470>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	f000 8095 	beq.w	8003f74 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_ADC_IRQHandler+0x25a>
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8085 	beq.w	8003f74 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d07f      	beq.n	8003f74 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e84:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff f91e 	bl	80030d2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003e96:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f84b 	bl	8002f38 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ea2:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a73      	ldr	r2, [pc, #460]	@ (8004078 <HAL_ADC_IRQHandler+0x474>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d002      	beq.n	8003eb4 <HAL_ADC_IRQHandler+0x2b0>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	e000      	b.n	8003eb6 <HAL_ADC_IRQHandler+0x2b2>
 8003eb4:	4b71      	ldr	r3, [pc, #452]	@ (800407c <HAL_ADC_IRQHandler+0x478>)
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d008      	beq.n	8003ed0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d002      	beq.n	8003ed0 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b07      	cmp	r3, #7
 8003ece:	d104      	bne.n	8003eda <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	623b      	str	r3, [r7, #32]
 8003ed8:	e00c      	b.n	8003ef4 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a66      	ldr	r2, [pc, #408]	@ (8004078 <HAL_ADC_IRQHandler+0x474>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d002      	beq.n	8003eea <HAL_ADC_IRQHandler+0x2e6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	e000      	b.n	8003eec <HAL_ADC_IRQHandler+0x2e8>
 8003eea:	4b64      	ldr	r3, [pc, #400]	@ (800407c <HAL_ADC_IRQHandler+0x478>)
 8003eec:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d035      	beq.n	8003f66 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_ADC_IRQHandler+0x310>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02d      	beq.n	8003f66 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d128      	bne.n	8003f66 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1e:	2b40      	cmp	r3, #64	@ 0x40
 8003f20:	d121      	bne.n	8003f66 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fa26 	bl	8003378 <LL_ADC_INJ_IsConversionOngoing>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d119      	bne.n	8003f66 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d105      	bne.n	8003f66 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f5e:	f043 0201 	orr.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f001 f880 	bl	800506c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2260      	movs	r2, #96	@ 0x60
 8003f72:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d011      	beq.n	8003fa2 <HAL_ADC_IRQHandler+0x39e>
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00c      	beq.n	8003fa2 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f8eb 	bl	8004170 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2280      	movs	r2, #128	@ 0x80
 8003fa0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d012      	beq.n	8003fd2 <HAL_ADC_IRQHandler+0x3ce>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f001 f85c 	bl	8005080 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d012      	beq.n	8004002 <HAL_ADC_IRQHandler+0x3fe>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f001 f84e 	bl	8005094 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d05d      	beq.n	80040c8 <HAL_ADC_IRQHandler+0x4c4>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d058      	beq.n	80040c8 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 800401e:	2301      	movs	r3, #1
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
 8004022:	e03b      	b.n	800409c <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a12      	ldr	r2, [pc, #72]	@ (8004074 <HAL_ADC_IRQHandler+0x470>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d02c      	beq.n	8004088 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a10      	ldr	r2, [pc, #64]	@ (800407c <HAL_ADC_IRQHandler+0x478>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_ADC_IRQHandler+0x444>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a0d      	ldr	r2, [pc, #52]	@ (8004078 <HAL_ADC_IRQHandler+0x474>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_ADC_IRQHandler+0x448>
 8004048:	4b0d      	ldr	r3, [pc, #52]	@ (8004080 <HAL_ADC_IRQHandler+0x47c>)
 800404a:	e000      	b.n	800404e <HAL_ADC_IRQHandler+0x44a>
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <HAL_ADC_IRQHandler+0x480>)
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f8e8 	bl	8003224 <LL_ADC_GetMultiDMATransfer>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d020      	beq.n	800409c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800405a:	2301      	movs	r3, #1
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
 800405e:	e01d      	b.n	800409c <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800406e:	2301      	movs	r3, #1
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
 8004072:	e013      	b.n	800409c <HAL_ADC_IRQHandler+0x498>
 8004074:	46021000 	.word	0x46021000
 8004078:	42028100 	.word	0x42028100
 800407c:	42028000 	.word	0x42028000
 8004080:	42028300 	.word	0x42028300
 8004084:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff f812 	bl	80030b6 <LL_ADC_REG_GetDMATransfer>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004098:	2301      	movs	r3, #1
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10e      	bne.n	80040c0 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f862 	bl	8004184 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2210      	movs	r2, #16
 80040c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01b      	beq.n	800410a <HAL_ADC_IRQHandler+0x506>
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d016      	beq.n	800410a <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040ec:	f043 0201 	orr.w	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f863 	bl	80041c0 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a17      	ldr	r2, [pc, #92]	@ (800416c <HAL_ADC_IRQHandler+0x568>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d126      	bne.n	8004162 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <HAL_ADC_IRQHandler+0x534>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f835 	bl	8004198 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004136:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00f      	beq.n	8004162 <HAL_ADC_IRQHandler+0x55e>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f82d 	bl	80041ac <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004160:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004162:	bf00      	nop
 8004164:	3728      	adds	r7, #40	@ 0x28
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	46021000 	.word	0x46021000

08004170 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b0b7      	sub	sp, #220	@ 0xdc
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4aa8      	ldr	r2, [pc, #672]	@ (8004490 <HAL_ADC_ConfigChannel+0x2bc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d103      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004200:	2b01      	cmp	r3, #1
 8004202:	d102      	bne.n	800420a <HAL_ADC_ConfigChannel+0x36>
 8004204:	2302      	movs	r3, #2
 8004206:	f000 bdfe 	b.w	8004e06 <HAL_ADC_ConfigChannel+0xc32>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff f89b 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 85c1 	bne.w	8004da6 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a99      	ldr	r2, [pc, #612]	@ (8004490 <HAL_ADC_ConfigChannel+0x2bc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	f000 8409 	beq.w	8004a42 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d108      	bne.n	800424e <HAL_ADC_ConfigChannel+0x7a>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	2201      	movs	r2, #1
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	e01d      	b.n	800428a <HAL_ADC_ConfigChannel+0xb6>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004266:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800426a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8004272:	2320      	movs	r3, #32
 8004274:	e004      	b.n	8004280 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8004276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2201      	movs	r2, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	69d1      	ldr	r1, [r2, #28]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	430b      	orrs	r3, r1
 8004296:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	f7fe fe5b 	bl	8002f60 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff f84f 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 80042b4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f85b 	bl	8003378 <LL_ADC_INJ_IsConversionOngoing>
 80042c2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 81df 	bne.w	800468e <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 81da 	bne.w	800468e <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	461a      	mov	r2, r3
 80042e8:	f7fe ff06 	bl	80030f8 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b04      	cmp	r3, #4
 800430c:	d046      	beq.n	800439c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6919      	ldr	r1, [r3, #16]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800431e:	f7fe fd41 	bl	8002da4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6919      	ldr	r1, [r3, #16]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	461a      	mov	r2, r3
 8004330:	f7fe fd6f 	bl	8002e12 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	7e9b      	ldrb	r3, [r3, #26]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d11e      	bne.n	800437a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x17e>
 800434c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004350:	e000      	b.n	8004354 <HAL_ADC_ConfigChannel+0x180>
 8004352:	2300      	movs	r3, #0
 8004354:	461a      	mov	r2, r3
 8004356:	f7fe fd92 	bl	8002e7e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004366:	2b01      	cmp	r3, #1
 8004368:	d102      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x19c>
 800436a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800436e:	e000      	b.n	8004372 <HAL_ADC_ConfigChannel+0x19e>
 8004370:	2300      	movs	r3, #0
 8004372:	461a      	mov	r2, r3
 8004374:	f7fe fd68 	bl	8002e48 <LL_ADC_SetOffsetSignedSaturation>
 8004378:	e189      	b.n	800468e <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2200      	movs	r2, #0
 8004384:	4619      	mov	r1, r3
 8004386:	f7fe fd7a 	bl	8002e7e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2200      	movs	r2, #0
 8004394:	4619      	mov	r1, r3
 8004396:	f7fe fd57 	bl	8002e48 <LL_ADC_SetOffsetSignedSaturation>
 800439a:	e178      	b.n	800468e <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe fd1f 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x1f4>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fd14 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 80043be:	4603      	mov	r3, r0
 80043c0:	0e9b      	lsrs	r3, r3, #26
 80043c2:	f003 021f 	and.w	r2, r3, #31
 80043c6:	e01e      	b.n	8004406 <HAL_ADC_ConfigChannel+0x232>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fd09 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80043e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80043ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e004      	b.n	8004404 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80043fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d105      	bne.n	800441e <HAL_ADC_ConfigChannel+0x24a>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	e018      	b.n	8004450 <HAL_ADC_ConfigChannel+0x27c>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004432:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800443a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004442:	2320      	movs	r3, #32
 8004444:	e004      	b.n	8004450 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004450:	429a      	cmp	r2, r3
 8004452:	d107      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2300      	movs	r3, #0
 800445e:	2100      	movs	r1, #0
 8004460:	f7fe fca0 	bl	8002da4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fcbb 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 8004470:	4603      	mov	r3, r0
 8004472:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10c      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x2c0>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2101      	movs	r1, #1
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe fcb0 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 8004486:	4603      	mov	r3, r0
 8004488:	0e9b      	lsrs	r3, r3, #26
 800448a:	f003 021f 	and.w	r2, r3, #31
 800448e:	e020      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x2fe>
 8004490:	46021000 	.word	0x46021000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fca3 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80044b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80044ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80044c2:	2320      	movs	r3, #32
 80044c4:	e004      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80044c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d105      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x316>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	e018      	b.n	800451c <HAL_ADC_ConfigChannel+0x348>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80044fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004502:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800450e:	2320      	movs	r3, #32
 8004510:	e004      	b.n	800451c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800451c:	429a      	cmp	r2, r3
 800451e:	d107      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	2300      	movs	r3, #0
 800452a:	2101      	movs	r1, #1
 800452c:	f7fe fc3a 	bl	8002da4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2102      	movs	r1, #2
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fc55 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 800453c:	4603      	mov	r3, r0
 800453e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <HAL_ADC_ConfigChannel+0x388>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2102      	movs	r1, #2
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fc4a 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 8004552:	4603      	mov	r3, r0
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	f003 021f 	and.w	r2, r3, #31
 800455a:	e01a      	b.n	8004592 <HAL_ADC_ConfigChannel+0x3be>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fc3f 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 8004568:	4603      	mov	r3, r0
 800456a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800456e:	fa93 f3a3 	rbit	r3, r3
 8004572:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800457a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004582:	2320      	movs	r3, #32
 8004584:	e004      	b.n	8004590 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004586:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d105      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x3d6>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0e9b      	lsrs	r3, r3, #26
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	e011      	b.n	80045ce <HAL_ADC_ConfigChannel+0x3fa>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80045b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80045bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80045c2:	2320      	movs	r3, #32
 80045c4:	e003      	b.n	80045ce <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80045c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d107      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	2102      	movs	r1, #2
 80045de:	f7fe fbe1 	bl	8002da4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2103      	movs	r1, #3
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe fbfc 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <HAL_ADC_ConfigChannel+0x43a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2103      	movs	r1, #3
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fbf1 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 8004604:	4603      	mov	r3, r0
 8004606:	0e9b      	lsrs	r3, r3, #26
 8004608:	f003 021f 	and.w	r2, r3, #31
 800460c:	e017      	b.n	800463e <HAL_ADC_ConfigChannel+0x46a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2103      	movs	r1, #3
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe fbe6 	bl	8002de6 <LL_ADC_GetOffsetChannel>
 800461a:	4603      	mov	r3, r0
 800461c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004628:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800462a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004630:	2320      	movs	r3, #32
 8004632:	e003      	b.n	800463c <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x482>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	0e9b      	lsrs	r3, r3, #26
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	e011      	b.n	800467a <HAL_ADC_ConfigChannel+0x4a6>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004666:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800466e:	2320      	movs	r3, #32
 8004670:	e003      	b.n	800467a <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800467a:	429a      	cmp	r2, r3
 800467c:	d107      	bne.n	800468e <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	2103      	movs	r1, #3
 800468a:	f7fe fb8b 	bl	8002da4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fe36 	bl	8003304 <LL_ADC_IsEnabled>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 83ad 	bne.w	8004dfa <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	6819      	ldr	r1, [r3, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	461a      	mov	r2, r3
 80046ae:	f7fe fd87 	bl	80031c0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046ba:	f040 80d6 	bne.w	800486a <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x50e>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	0e9b      	lsrs	r3, r3, #26
 80046d0:	3301      	adds	r3, #1
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	2b09      	cmp	r3, #9
 80046d8:	bf94      	ite	ls
 80046da:	2301      	movls	r3, #1
 80046dc:	2300      	movhi	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	e019      	b.n	8004716 <HAL_ADC_ConfigChannel+0x542>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80046f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80046f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80046fa:	2320      	movs	r3, #32
 80046fc:	e003      	b.n	8004706 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80046fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004700:	fab3 f383 	clz	r3, r3
 8004704:	b2db      	uxtb	r3, r3
 8004706:	3301      	adds	r3, #1
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2b09      	cmp	r3, #9
 800470e:	bf94      	ite	ls
 8004710:	2301      	movls	r3, #1
 8004712:	2300      	movhi	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d04d      	beq.n	80047b6 <HAL_ADC_ConfigChannel+0x5e2>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d107      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x562>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	0e9b      	lsrs	r3, r3, #26
 800472c:	3301      	adds	r3, #1
 800472e:	069b      	lsls	r3, r3, #26
 8004730:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004734:	e015      	b.n	8004762 <HAL_ADC_ConfigChannel+0x58e>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004746:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800474e:	2320      	movs	r3, #32
 8004750:	e003      	b.n	800475a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004754:	fab3 f383 	clz	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	3301      	adds	r3, #1
 800475c:	069b      	lsls	r3, r3, #26
 800475e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x5ae>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	0e9b      	lsrs	r3, r3, #26
 8004774:	3301      	adds	r3, #1
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2101      	movs	r1, #1
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	e017      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x5de>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004792:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 800479a:	2320      	movs	r3, #32
 800479c:	e003      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800479e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a0:	fab3 f383 	clz	r3, r3
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2101      	movs	r1, #1
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	4313      	orrs	r3, r2
 80047b4:	e04e      	b.n	8004854 <HAL_ADC_ConfigChannel+0x680>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d107      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x5fe>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	0e9b      	lsrs	r3, r3, #26
 80047c8:	3301      	adds	r3, #1
 80047ca:	069b      	lsls	r3, r3, #26
 80047cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047d0:	e015      	b.n	80047fe <HAL_ADC_ConfigChannel+0x62a>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80047e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80047ea:	2320      	movs	r3, #32
 80047ec:	e003      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80047ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	069b      	lsls	r3, r3, #26
 80047fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_ADC_ConfigChannel+0x64a>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	0e9b      	lsrs	r3, r3, #26
 8004810:	3301      	adds	r3, #1
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2101      	movs	r1, #1
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	e017      	b.n	800484e <HAL_ADC_ConfigChannel+0x67a>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	fa93 f3a3 	rbit	r3, r3
 800482a:	61bb      	str	r3, [r7, #24]
  return result;
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004836:	2320      	movs	r3, #32
 8004838:	e003      	b.n	8004842 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	fab3 f383 	clz	r3, r3
 8004840:	b2db      	uxtb	r3, r3
 8004842:	3301      	adds	r3, #1
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	461a      	mov	r2, r3
 8004862:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004866:	f7fe fc47 	bl	80030f8 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f280 82c3 	bge.w	8004dfa <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a92      	ldr	r2, [pc, #584]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8f0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_ADC_ConfigChannel+0x6b4>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a91      	ldr	r2, [pc, #580]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d101      	bne.n	800488c <HAL_ADC_ConfigChannel+0x6b8>
 8004888:	4b90      	ldr	r3, [pc, #576]	@ (8004acc <HAL_ADC_ConfigChannel+0x8f8>)
 800488a:	e000      	b.n	800488e <HAL_ADC_ConfigChannel+0x6ba>
 800488c:	4b90      	ldr	r3, [pc, #576]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x8fc>)
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fa5a 	bl	8002d48 <LL_ADC_GetCommonPathInternalCh>
 8004894:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a89      	ldr	r2, [pc, #548]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8f0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x6d8>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a88      	ldr	r2, [pc, #544]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x8f4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10e      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x6f6>
 80048ac:	4885      	ldr	r0, [pc, #532]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8f0>)
 80048ae:	f7fe fd29 	bl	8003304 <LL_ADC_IsEnabled>
 80048b2:	4604      	mov	r4, r0
 80048b4:	4884      	ldr	r0, [pc, #528]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x8f4>)
 80048b6:	f7fe fd25 	bl	8003304 <LL_ADC_IsEnabled>
 80048ba:	4603      	mov	r3, r0
 80048bc:	4323      	orrs	r3, r4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e008      	b.n	80048dc <HAL_ADC_ConfigChannel+0x708>
 80048ca:	4882      	ldr	r0, [pc, #520]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x900>)
 80048cc:	f7fe fd1a 	bl	8003304 <LL_ADC_IsEnabled>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80a6 	beq.w	8004a2e <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ad8 <HAL_ADC_ConfigChannel+0x904>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d13c      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d136      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a71      	ldr	r2, [pc, #452]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8f0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00a      	beq.n	8004918 <HAL_ADC_ConfigChannel+0x744>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a70      	ldr	r2, [pc, #448]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d005      	beq.n	8004918 <HAL_ADC_ConfigChannel+0x744>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a70      	ldr	r2, [pc, #448]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x900>)
 8004912:	4293      	cmp	r3, r2
 8004914:	f040 826e 	bne.w	8004df4 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a69      	ldr	r2, [pc, #420]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8f0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_ADC_ConfigChannel+0x758>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a68      	ldr	r2, [pc, #416]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x75c>
 800492c:	4a67      	ldr	r2, [pc, #412]	@ (8004acc <HAL_ADC_ConfigChannel+0x8f8>)
 800492e:	e000      	b.n	8004932 <HAL_ADC_ConfigChannel+0x75e>
 8004930:	4a67      	ldr	r2, [pc, #412]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x8fc>)
 8004932:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004936:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f7fe f9f0 	bl	8002d22 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004942:	4b66      	ldr	r3, [pc, #408]	@ (8004adc <HAL_ADC_ConfigChannel+0x908>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	4a65      	ldr	r2, [pc, #404]	@ (8004ae0 <HAL_ADC_ConfigChannel+0x90c>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	3301      	adds	r3, #1
 8004952:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004954:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004956:	e002      	b.n	800495e <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	3b01      	subs	r3, #1
 800495c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f9      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004964:	e246      	b.n	8004df4 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a5e      	ldr	r2, [pc, #376]	@ (8004ae4 <HAL_ADC_ConfigChannel+0x910>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d12b      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004970:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004978:	2b00      	cmp	r3, #0
 800497a:	d125      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a50      	ldr	r2, [pc, #320]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8f0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00a      	beq.n	800499c <HAL_ADC_ConfigChannel+0x7c8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a4f      	ldr	r2, [pc, #316]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x8f4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d005      	beq.n	800499c <HAL_ADC_ConfigChannel+0x7c8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a4f      	ldr	r2, [pc, #316]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x900>)
 8004996:	4293      	cmp	r3, r2
 8004998:	f040 822e 	bne.w	8004df8 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a48      	ldr	r2, [pc, #288]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8f0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_ADC_ConfigChannel+0x7dc>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a47      	ldr	r2, [pc, #284]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x8f4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x7e0>
 80049b0:	4a46      	ldr	r2, [pc, #280]	@ (8004acc <HAL_ADC_ConfigChannel+0x8f8>)
 80049b2:	e000      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x7e2>
 80049b4:	4a46      	ldr	r2, [pc, #280]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x8fc>)
 80049b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f7fe f9ae 	bl	8002d22 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049c6:	e217      	b.n	8004df8 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a46      	ldr	r2, [pc, #280]	@ (8004ae8 <HAL_ADC_ConfigChannel+0x914>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	f040 8213 	bne.w	8004dfa <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f040 820c 	bne.w	8004dfa <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a37      	ldr	r2, [pc, #220]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8f0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00a      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x82e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a35      	ldr	r2, [pc, #212]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x8f4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d005      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x82e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a36      	ldr	r2, [pc, #216]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x900>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	f040 81fc 	bne.w	8004dfa <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac4 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <HAL_ADC_ConfigChannel+0x842>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d101      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x846>
 8004a16:	4a2d      	ldr	r2, [pc, #180]	@ (8004acc <HAL_ADC_ConfigChannel+0x8f8>)
 8004a18:	e000      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x848>
 8004a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x8fc>)
 8004a1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f7fe f97b 	bl	8002d22 <LL_ADC_SetCommonPathInternalCh>
 8004a2c:	e1e5      	b.n	8004dfa <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a32:	f043 0220 	orr.w	r2, r3, #32
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a40:	e1db      	b.n	8004dfa <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	f000 811b 	beq.w	8004c8a <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a5c:	d004      	beq.n	8004a68 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a62:	4a22      	ldr	r2, [pc, #136]	@ (8004aec <HAL_ADC_ConfigChannel+0x918>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d107      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe fad5 	bl	8003020 <LL_ADC_REG_SetSequencerChAdd>
 8004a76:	e059      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	210f      	movs	r1, #15
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	401a      	ands	r2, r3
 8004a90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x8d4>
 8004a9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004aa0:	0e9b      	lsrs	r3, r3, #26
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	e027      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x924>
 8004aa8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004aac:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	fa93 f3a3 	rbit	r3, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
  return result;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d117      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	e019      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x924>
 8004ac4:	42028000 	.word	0x42028000
 8004ac8:	42028100 	.word	0x42028100
 8004acc:	42028300 	.word	0x42028300
 8004ad0:	46021300 	.word	0x46021300
 8004ad4:	46021000 	.word	0x46021000
 8004ad8:	ce080000 	.word	0xce080000
 8004adc:	20000000 	.word	0x20000000
 8004ae0:	053e2d63 	.word	0x053e2d63
 8004ae4:	ca040000 	.word	0xca040000
 8004ae8:	80000001 	.word	0x80000001
 8004aec:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	fab3 f383 	clz	r3, r3
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	6839      	ldr	r1, [r7, #0]
 8004afa:	6849      	ldr	r1, [r1, #4]
 8004afc:	f001 011f 	and.w	r1, r1, #31
 8004b00:	408b      	lsls	r3, r1
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d808      	bhi.n	8004b2c <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b26:	4619      	mov	r1, r3
 8004b28:	f7fe fa1a 	bl	8002f60 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	461a      	mov	r2, r3
 8004b36:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004b3a:	f7fe fadd 	bl	80030f8 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f280 8159 	bge.w	8004dfa <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a9b      	ldr	r2, [pc, #620]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbe8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_ADC_ConfigChannel+0x988>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a9a      	ldr	r2, [pc, #616]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xbec>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x98c>
 8004b5c:	4b99      	ldr	r3, [pc, #612]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b5e:	e000      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x98e>
 8004b60:	4b99      	ldr	r3, [pc, #612]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe f8f0 	bl	8002d48 <LL_ADC_GetCommonPathInternalCh>
 8004b68:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a96      	ldr	r2, [pc, #600]	@ (8004dcc <HAL_ADC_ConfigChannel+0xbf8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d12b      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d125      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a8d      	ldr	r2, [pc, #564]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbe8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x9c2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a8b      	ldr	r2, [pc, #556]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xbec>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x9c6>
 8004b96:	4a8b      	ldr	r2, [pc, #556]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b98:	e000      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x9c8>
 8004b9a:	4a8b      	ldr	r2, [pc, #556]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ba0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f7fe f8bb 	bl	8002d22 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004bac:	4b88      	ldr	r3, [pc, #544]	@ (8004dd0 <HAL_ADC_ConfigChannel+0xbfc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	099b      	lsrs	r3, r3, #6
 8004bb2:	4a88      	ldr	r2, [pc, #544]	@ (8004dd4 <HAL_ADC_ConfigChannel+0xc00>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004bbe:	e002      	b.n	8004bc6 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f9      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004bcc:	e045      	b.n	8004c5a <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a81      	ldr	r2, [pc, #516]	@ (8004dd8 <HAL_ADC_ConfigChannel+0xc04>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d11b      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d115      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a74      	ldr	r2, [pc, #464]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbe8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_ADC_ConfigChannel+0xa24>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a73      	ldr	r2, [pc, #460]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xbec>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0xa28>
 8004bf8:	4a72      	ldr	r2, [pc, #456]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004bfa:	e000      	b.n	8004bfe <HAL_ADC_ConfigChannel+0xa2a>
 8004bfc:	4a72      	ldr	r2, [pc, #456]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004bfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7fe f88a 	bl	8002d22 <LL_ADC_SetCommonPathInternalCh>
 8004c0e:	e024      	b.n	8004c5a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a71      	ldr	r2, [pc, #452]	@ (8004ddc <HAL_ADC_ConfigChannel+0xc08>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d11f      	bne.n	8004c5a <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d115      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a64      	ldr	r2, [pc, #400]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbe8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_ADC_ConfigChannel+0xa66>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a62      	ldr	r2, [pc, #392]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xbec>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d101      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0xa6a>
 8004c3a:	4a62      	ldr	r2, [pc, #392]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c3c:	e000      	b.n	8004c40 <HAL_ADC_ConfigChannel+0xa6c>
 8004c3e:	4a62      	ldr	r2, [pc, #392]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7fe f869 	bl	8002d22 <LL_ADC_SetCommonPathInternalCh>
 8004c50:	e003      	b.n	8004c5a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a62      	ldr	r2, [pc, #392]	@ (8004de0 <HAL_ADC_ConfigChannel+0xc0c>)
 8004c58:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a61      	ldr	r2, [pc, #388]	@ (8004de4 <HAL_ADC_ConfigChannel+0xc10>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	f040 80ca 	bne.w	8004dfa <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f040 80c3 	bne.w	8004dfa <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004c88:	e0b7      	b.n	8004dfa <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c92:	d004      	beq.n	8004c9e <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004c98:	4a53      	ldr	r2, [pc, #332]	@ (8004de8 <HAL_ADC_ConfigChannel+0xc14>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d106      	bne.n	8004cac <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe f9ed 	bl	8003086 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f280 80a2 	bge.w	8004dfa <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a40      	ldr	r2, [pc, #256]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbe8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_ADC_ConfigChannel+0xaf6>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xbec>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d101      	bne.n	8004cce <HAL_ADC_ConfigChannel+0xafa>
 8004cca:	4b3e      	ldr	r3, [pc, #248]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004ccc:	e000      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0xafc>
 8004cce:	4b3e      	ldr	r3, [pc, #248]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe f839 	bl	8002d48 <LL_ADC_GetCommonPathInternalCh>
 8004cd6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a43      	ldr	r2, [pc, #268]	@ (8004dec <HAL_ADC_ConfigChannel+0xc18>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d115      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a34      	ldr	r2, [pc, #208]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbe8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <HAL_ADC_ConfigChannel+0xb24>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a33      	ldr	r2, [pc, #204]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xbec>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0xb28>
 8004cf8:	4a32      	ldr	r2, [pc, #200]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004cfa:	e000      	b.n	8004cfe <HAL_ADC_ConfigChannel+0xb2a>
 8004cfc:	4a32      	ldr	r2, [pc, #200]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f7fe f80a 	bl	8002d22 <LL_ADC_SetCommonPathInternalCh>
 8004d0e:	e034      	b.n	8004d7a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a36      	ldr	r2, [pc, #216]	@ (8004df0 <HAL_ADC_ConfigChannel+0xc1c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d115      	bne.n	8004d46 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a27      	ldr	r2, [pc, #156]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbe8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_ADC_ConfigChannel+0xb5a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a25      	ldr	r2, [pc, #148]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xbec>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0xb5e>
 8004d2e:	4a25      	ldr	r2, [pc, #148]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d30:	e000      	b.n	8004d34 <HAL_ADC_ConfigChannel+0xb60>
 8004d32:	4a25      	ldr	r2, [pc, #148]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f7fd ffef 	bl	8002d22 <LL_ADC_SetCommonPathInternalCh>
 8004d44:	e019      	b.n	8004d7a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a24      	ldr	r2, [pc, #144]	@ (8004ddc <HAL_ADC_ConfigChannel+0xc08>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d114      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a19      	ldr	r2, [pc, #100]	@ (8004dbc <HAL_ADC_ConfigChannel+0xbe8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_ADC_ConfigChannel+0xb90>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a18      	ldr	r2, [pc, #96]	@ (8004dc0 <HAL_ADC_ConfigChannel+0xbec>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0xb94>
 8004d64:	4a17      	ldr	r2, [pc, #92]	@ (8004dc4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d66:	e000      	b.n	8004d6a <HAL_ADC_ConfigChannel+0xb96>
 8004d68:	4a17      	ldr	r2, [pc, #92]	@ (8004dc8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d6e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7fd ffd4 	bl	8002d22 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a19      	ldr	r2, [pc, #100]	@ (8004de4 <HAL_ADC_ConfigChannel+0xc10>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d13a      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d134      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004da4:	e029      	b.n	8004dfa <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004daa:	f043 0220 	orr.w	r2, r3, #32
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004db8:	e01f      	b.n	8004dfa <HAL_ADC_ConfigChannel+0xc26>
 8004dba:	bf00      	nop
 8004dbc:	42028000 	.word	0x42028000
 8004dc0:	42028100 	.word	0x42028100
 8004dc4:	42028300 	.word	0x42028300
 8004dc8:	46021300 	.word	0x46021300
 8004dcc:	b6002000 	.word	0xb6002000
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	053e2d63 	.word	0x053e2d63
 8004dd8:	ba004000 	.word	0xba004000
 8004ddc:	80000001 	.word	0x80000001
 8004de0:	b2001000 	.word	0xb2001000
 8004de4:	d7200000 	.word	0xd7200000
 8004de8:	80000010 	.word	0x80000010
 8004dec:	ce080000 	.word	0xce080000
 8004df0:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004df4:	bf00      	nop
 8004df6:	e000      	b.n	8004dfa <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004df8:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004e02:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	37dc      	adds	r7, #220	@ 0xdc
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd90      	pop	{r4, r7, pc}
 8004e0e:	bf00      	nop

08004e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe fa71 	bl	8003304 <LL_ADC_IsEnabled>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d17b      	bne.n	8004f20 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f2c <ADC_Enable+0x11c>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e3a:	f043 0210 	orr.w	r2, r3, #16
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e46:	f043 0201 	orr.w	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e067      	b.n	8004f22 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fa3c 	bl	80032dc <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <ADC_Enable+0x66>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2f      	ldr	r2, [pc, #188]	@ (8004f30 <ADC_Enable+0x120>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d054      	beq.n	8004f20 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004e76:	f7fd fee9 	bl	8002c4c <HAL_GetTick>
 8004e7a:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a2c      	ldr	r2, [pc, #176]	@ (8004f34 <ADC_Enable+0x124>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <ADC_Enable+0x80>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8004f38 <ADC_Enable+0x128>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d101      	bne.n	8004e94 <ADC_Enable+0x84>
 8004e90:	4b2a      	ldr	r3, [pc, #168]	@ (8004f3c <ADC_Enable+0x12c>)
 8004e92:	e000      	b.n	8004e96 <ADC_Enable+0x86>
 8004e94:	4b2a      	ldr	r3, [pc, #168]	@ (8004f40 <ADC_Enable+0x130>)
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe f9b6 	bl	8003208 <LL_ADC_GetMultimode>
 8004e9c:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a25      	ldr	r2, [pc, #148]	@ (8004f38 <ADC_Enable+0x128>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d002      	beq.n	8004eae <ADC_Enable+0x9e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	e000      	b.n	8004eb0 <ADC_Enable+0xa0>
 8004eae:	4b21      	ldr	r3, [pc, #132]	@ (8004f34 <ADC_Enable+0x124>)
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d02c      	beq.n	8004f12 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d130      	bne.n	8004f20 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ebe:	e028      	b.n	8004f12 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fa1d 	bl	8003304 <LL_ADC_IsEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe fa01 	bl	80032dc <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004eda:	f7fd feb7 	bl	8002c4c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d914      	bls.n	8004f12 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d00d      	beq.n	8004f12 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004efa:	f043 0210 	orr.w	r2, r3, #16
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f06:	f043 0201 	orr.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e007      	b.n	8004f22 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d1cf      	bne.n	8004ec0 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	8000003f 	.word	0x8000003f
 8004f30:	46021000 	.word	0x46021000
 8004f34:	42028000 	.word	0x42028000
 8004f38:	42028100 	.word	0x42028100
 8004f3c:	42028300 	.word	0x42028300
 8004f40:	46021300 	.word	0x46021300

08004f44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f56:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d14b      	bne.n	8004ff6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f62:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d021      	beq.n	8004fbc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fd ffdb 	bl	8002f38 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d032      	beq.n	8004fee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d12b      	bne.n	8004fee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d11f      	bne.n	8004fee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fb2:	f043 0201 	orr.w	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	679a      	str	r2, [r3, #120]	@ 0x78
 8004fba:	e018      	b.n	8004fee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d111      	bne.n	8004fee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d105      	bne.n	8004fee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7fc fb68 	bl	80016c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ff4:	e00e      	b.n	8005014 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff f8be 	bl	8004184 <HAL_ADC_ErrorCallback>
}
 8005008:	e004      	b.n	8005014 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005028:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7fc fafe 	bl	800162c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005044:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800504a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005056:	f043 0204 	orr.w	r2, r3, #4
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff f890 	bl	8004184 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <__NVIC_SetPriorityGrouping+0x44>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050d8:	4013      	ands	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050ee:	4a04      	ldr	r2, [pc, #16]	@ (8005100 <__NVIC_SetPriorityGrouping+0x44>)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	60d3      	str	r3, [r2, #12]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	e000ed00 	.word	0xe000ed00

08005104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005108:	4b04      	ldr	r3, [pc, #16]	@ (800511c <__NVIC_GetPriorityGrouping+0x18>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	0a1b      	lsrs	r3, r3, #8
 800510e:	f003 0307 	and.w	r3, r3, #7
}
 8005112:	4618      	mov	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	e000ed00 	.word	0xe000ed00

08005120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800512a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	db0b      	blt.n	800514a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	f003 021f 	and.w	r2, r3, #31
 8005138:	4907      	ldr	r1, [pc, #28]	@ (8005158 <__NVIC_EnableIRQ+0x38>)
 800513a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	2001      	movs	r0, #1
 8005142:	fa00 f202 	lsl.w	r2, r0, r2
 8005146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	e000e100 	.word	0xe000e100

0800515c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	6039      	str	r1, [r7, #0]
 8005166:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516c:	2b00      	cmp	r3, #0
 800516e:	db0a      	blt.n	8005186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	490c      	ldr	r1, [pc, #48]	@ (80051a8 <__NVIC_SetPriority+0x4c>)
 8005176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800517a:	0112      	lsls	r2, r2, #4
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	440b      	add	r3, r1
 8005180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005184:	e00a      	b.n	800519c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4908      	ldr	r1, [pc, #32]	@ (80051ac <__NVIC_SetPriority+0x50>)
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	3b04      	subs	r3, #4
 8005194:	0112      	lsls	r2, r2, #4
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	440b      	add	r3, r1
 800519a:	761a      	strb	r2, [r3, #24]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	e000e100 	.word	0xe000e100
 80051ac:	e000ed00 	.word	0xe000ed00

080051b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b089      	sub	sp, #36	@ 0x24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f1c3 0307 	rsb	r3, r3, #7
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	bf28      	it	cs
 80051ce:	2304      	movcs	r3, #4
 80051d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3304      	adds	r3, #4
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d902      	bls.n	80051e0 <NVIC_EncodePriority+0x30>
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3b03      	subs	r3, #3
 80051de:	e000      	b.n	80051e2 <NVIC_EncodePriority+0x32>
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e4:	f04f 32ff 	mov.w	r2, #4294967295
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43da      	mvns	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	401a      	ands	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f8:	f04f 31ff 	mov.w	r1, #4294967295
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005202:	43d9      	mvns	r1, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005208:	4313      	orrs	r3, r2
         );
}
 800520a:	4618      	mov	r0, r3
 800520c:	3724      	adds	r7, #36	@ 0x24
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff ff4c 	bl	80050bc <__NVIC_SetPriorityGrouping>
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800523a:	f7ff ff63 	bl	8005104 <__NVIC_GetPriorityGrouping>
 800523e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	6978      	ldr	r0, [r7, #20]
 8005246:	f7ff ffb3 	bl	80051b0 <NVIC_EncodePriority>
 800524a:	4602      	mov	r2, r0
 800524c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff ff82 	bl	800515c <__NVIC_SetPriority>
}
 8005258:	bf00      	nop
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800526a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff ff56 	bl	8005120 <__NVIC_EnableIRQ>
}
 8005274:	bf00      	nop
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800528c:	d301      	bcc.n	8005292 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800528e:	2301      	movs	r3, #1
 8005290:	e00d      	b.n	80052ae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005292:	4a0a      	ldr	r2, [pc, #40]	@ (80052bc <HAL_SYSTICK_Config+0x40>)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3b01      	subs	r3, #1
 8005298:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800529a:	4b08      	ldr	r3, [pc, #32]	@ (80052bc <HAL_SYSTICK_Config+0x40>)
 800529c:	2200      	movs	r2, #0
 800529e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <HAL_SYSTICK_Config+0x40>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a05      	ldr	r2, [pc, #20]	@ (80052bc <HAL_SYSTICK_Config+0x40>)
 80052a6:	f043 0303 	orr.w	r3, r3, #3
 80052aa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	e000e010 	.word	0xe000e010

080052c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d844      	bhi.n	8005358 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80052ce:	a201      	add	r2, pc, #4	@ (adr r2, 80052d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	080052f7 	.word	0x080052f7
 80052d8:	08005315 	.word	0x08005315
 80052dc:	08005337 	.word	0x08005337
 80052e0:	08005359 	.word	0x08005359
 80052e4:	080052e9 	.word	0x080052e9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80052e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005368 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005368 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052ee:	f043 0304 	orr.w	r3, r3, #4
 80052f2:	6013      	str	r3, [r2, #0]
      break;
 80052f4:	e031      	b.n	800535a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80052f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005368 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005368 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80052fc:	f023 0304 	bic.w	r3, r3, #4
 8005300:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005302:	4b1a      	ldr	r3, [pc, #104]	@ (800536c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005308:	4a18      	ldr	r2, [pc, #96]	@ (800536c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800530a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800530e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005312:	e022      	b.n	800535a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005314:	4b14      	ldr	r3, [pc, #80]	@ (8005368 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a13      	ldr	r2, [pc, #76]	@ (8005368 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800531a:	f023 0304 	bic.w	r3, r3, #4
 800531e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005320:	4b12      	ldr	r3, [pc, #72]	@ (800536c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005326:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800532a:	4a10      	ldr	r2, [pc, #64]	@ (800536c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800532c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005334:	e011      	b.n	800535a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005336:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a0b      	ldr	r2, [pc, #44]	@ (8005368 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800533c:	f023 0304 	bic.w	r3, r3, #4
 8005340:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005342:	4b0a      	ldr	r3, [pc, #40]	@ (800536c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005348:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800534c:	4a07      	ldr	r2, [pc, #28]	@ (800536c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800534e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005356:	e000      	b.n	800535a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005358:	bf00      	nop
  }
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000e010 	.word	0xe000e010
 800536c:	46020c00 	.word	0x46020c00

08005370 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005376:	4b19      	ldr	r3, [pc, #100]	@ (80053dc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005382:	2304      	movs	r3, #4
 8005384:	607b      	str	r3, [r7, #4]
 8005386:	e021      	b.n	80053cc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005388:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800538a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800538e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005392:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800539a:	d011      	beq.n	80053c0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053a2:	d810      	bhi.n	80053c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053b0:	d003      	beq.n	80053ba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80053b2:	e008      	b.n	80053c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80053b4:	2300      	movs	r3, #0
 80053b6:	607b      	str	r3, [r7, #4]
        break;
 80053b8:	e008      	b.n	80053cc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80053ba:	2301      	movs	r3, #1
 80053bc:	607b      	str	r3, [r7, #4]
        break;
 80053be:	e005      	b.n	80053cc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80053c0:	2302      	movs	r3, #2
 80053c2:	607b      	str	r3, [r7, #4]
        break;
 80053c4:	e002      	b.n	80053cc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
        break;
 80053ca:	bf00      	nop
    }
  }
  return systick_source;
 80053cc:	687b      	ldr	r3, [r7, #4]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000e010 	.word	0xe000e010
 80053e0:	46020c00 	.word	0x46020c00

080053e4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80053ec:	f7fd fc2e 	bl	8002c4c <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0db      	b.n	80055b4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a6e      	ldr	r2, [pc, #440]	@ (80055bc <HAL_DMA_Init+0x1d8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f000 809f 	beq.w	8005546 <HAL_DMA_Init+0x162>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6c      	ldr	r2, [pc, #432]	@ (80055c0 <HAL_DMA_Init+0x1dc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	f000 8099 	beq.w	8005546 <HAL_DMA_Init+0x162>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a6a      	ldr	r2, [pc, #424]	@ (80055c4 <HAL_DMA_Init+0x1e0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f000 8093 	beq.w	8005546 <HAL_DMA_Init+0x162>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a68      	ldr	r2, [pc, #416]	@ (80055c8 <HAL_DMA_Init+0x1e4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	f000 808d 	beq.w	8005546 <HAL_DMA_Init+0x162>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a66      	ldr	r2, [pc, #408]	@ (80055cc <HAL_DMA_Init+0x1e8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f000 8087 	beq.w	8005546 <HAL_DMA_Init+0x162>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a64      	ldr	r2, [pc, #400]	@ (80055d0 <HAL_DMA_Init+0x1ec>)
 800543e:	4293      	cmp	r3, r2
 8005440:	f000 8081 	beq.w	8005546 <HAL_DMA_Init+0x162>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a62      	ldr	r2, [pc, #392]	@ (80055d4 <HAL_DMA_Init+0x1f0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d07b      	beq.n	8005546 <HAL_DMA_Init+0x162>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a61      	ldr	r2, [pc, #388]	@ (80055d8 <HAL_DMA_Init+0x1f4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d076      	beq.n	8005546 <HAL_DMA_Init+0x162>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a5f      	ldr	r2, [pc, #380]	@ (80055dc <HAL_DMA_Init+0x1f8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d071      	beq.n	8005546 <HAL_DMA_Init+0x162>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a5e      	ldr	r2, [pc, #376]	@ (80055e0 <HAL_DMA_Init+0x1fc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d06c      	beq.n	8005546 <HAL_DMA_Init+0x162>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5c      	ldr	r2, [pc, #368]	@ (80055e4 <HAL_DMA_Init+0x200>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d067      	beq.n	8005546 <HAL_DMA_Init+0x162>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a5b      	ldr	r2, [pc, #364]	@ (80055e8 <HAL_DMA_Init+0x204>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d062      	beq.n	8005546 <HAL_DMA_Init+0x162>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a59      	ldr	r2, [pc, #356]	@ (80055ec <HAL_DMA_Init+0x208>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d05d      	beq.n	8005546 <HAL_DMA_Init+0x162>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a58      	ldr	r2, [pc, #352]	@ (80055f0 <HAL_DMA_Init+0x20c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d058      	beq.n	8005546 <HAL_DMA_Init+0x162>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a56      	ldr	r2, [pc, #344]	@ (80055f4 <HAL_DMA_Init+0x210>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d053      	beq.n	8005546 <HAL_DMA_Init+0x162>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a55      	ldr	r2, [pc, #340]	@ (80055f8 <HAL_DMA_Init+0x214>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04e      	beq.n	8005546 <HAL_DMA_Init+0x162>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a53      	ldr	r2, [pc, #332]	@ (80055fc <HAL_DMA_Init+0x218>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d049      	beq.n	8005546 <HAL_DMA_Init+0x162>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a52      	ldr	r2, [pc, #328]	@ (8005600 <HAL_DMA_Init+0x21c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d044      	beq.n	8005546 <HAL_DMA_Init+0x162>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a50      	ldr	r2, [pc, #320]	@ (8005604 <HAL_DMA_Init+0x220>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d03f      	beq.n	8005546 <HAL_DMA_Init+0x162>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a4f      	ldr	r2, [pc, #316]	@ (8005608 <HAL_DMA_Init+0x224>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d03a      	beq.n	8005546 <HAL_DMA_Init+0x162>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a4d      	ldr	r2, [pc, #308]	@ (800560c <HAL_DMA_Init+0x228>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d035      	beq.n	8005546 <HAL_DMA_Init+0x162>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a4c      	ldr	r2, [pc, #304]	@ (8005610 <HAL_DMA_Init+0x22c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d030      	beq.n	8005546 <HAL_DMA_Init+0x162>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005614 <HAL_DMA_Init+0x230>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d02b      	beq.n	8005546 <HAL_DMA_Init+0x162>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a49      	ldr	r2, [pc, #292]	@ (8005618 <HAL_DMA_Init+0x234>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d026      	beq.n	8005546 <HAL_DMA_Init+0x162>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a47      	ldr	r2, [pc, #284]	@ (800561c <HAL_DMA_Init+0x238>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d021      	beq.n	8005546 <HAL_DMA_Init+0x162>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a46      	ldr	r2, [pc, #280]	@ (8005620 <HAL_DMA_Init+0x23c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d01c      	beq.n	8005546 <HAL_DMA_Init+0x162>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a44      	ldr	r2, [pc, #272]	@ (8005624 <HAL_DMA_Init+0x240>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d017      	beq.n	8005546 <HAL_DMA_Init+0x162>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a43      	ldr	r2, [pc, #268]	@ (8005628 <HAL_DMA_Init+0x244>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d012      	beq.n	8005546 <HAL_DMA_Init+0x162>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a41      	ldr	r2, [pc, #260]	@ (800562c <HAL_DMA_Init+0x248>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00d      	beq.n	8005546 <HAL_DMA_Init+0x162>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a40      	ldr	r2, [pc, #256]	@ (8005630 <HAL_DMA_Init+0x24c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d008      	beq.n	8005546 <HAL_DMA_Init+0x162>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a3e      	ldr	r2, [pc, #248]	@ (8005634 <HAL_DMA_Init+0x250>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <HAL_DMA_Init+0x162>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a3d      	ldr	r2, [pc, #244]	@ (8005638 <HAL_DMA_Init+0x254>)
 8005544:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0206 	orr.w	r2, r2, #6
 8005564:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005566:	e00f      	b.n	8005588 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005568:	f7fd fb70 	bl	8002c4c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b05      	cmp	r3, #5
 8005574:	d908      	bls.n	8005588 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2210      	movs	r2, #16
 800557a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2203      	movs	r2, #3
 8005580:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e015      	b.n	80055b4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e8      	bne.n	8005568 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fb26 	bl	8005be8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40020050 	.word	0x40020050
 80055c0:	50020050 	.word	0x50020050
 80055c4:	400200d0 	.word	0x400200d0
 80055c8:	500200d0 	.word	0x500200d0
 80055cc:	40020150 	.word	0x40020150
 80055d0:	50020150 	.word	0x50020150
 80055d4:	400201d0 	.word	0x400201d0
 80055d8:	500201d0 	.word	0x500201d0
 80055dc:	40020250 	.word	0x40020250
 80055e0:	50020250 	.word	0x50020250
 80055e4:	400202d0 	.word	0x400202d0
 80055e8:	500202d0 	.word	0x500202d0
 80055ec:	40020350 	.word	0x40020350
 80055f0:	50020350 	.word	0x50020350
 80055f4:	400203d0 	.word	0x400203d0
 80055f8:	500203d0 	.word	0x500203d0
 80055fc:	40020450 	.word	0x40020450
 8005600:	50020450 	.word	0x50020450
 8005604:	400204d0 	.word	0x400204d0
 8005608:	500204d0 	.word	0x500204d0
 800560c:	40020550 	.word	0x40020550
 8005610:	50020550 	.word	0x50020550
 8005614:	400205d0 	.word	0x400205d0
 8005618:	500205d0 	.word	0x500205d0
 800561c:	40020650 	.word	0x40020650
 8005620:	50020650 	.word	0x50020650
 8005624:	400206d0 	.word	0x400206d0
 8005628:	500206d0 	.word	0x500206d0
 800562c:	40020750 	.word	0x40020750
 8005630:	50020750 	.word	0x50020750
 8005634:	400207d0 	.word	0x400207d0
 8005638:	500207d0 	.word	0x500207d0

0800563c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e04f      	b.n	80056f4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_DMA_Start_IT+0x26>
 800565e:	2302      	movs	r3, #2
 8005660:	e048      	b.n	80056f4 <HAL_DMA_Start_IT+0xb8>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d136      	bne.n	80056e4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fa86 	bl	8005b9c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800569e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d007      	beq.n	80056b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695a      	ldr	r2, [r3, #20]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056ce:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e007      	b.n	80056f4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2240      	movs	r2, #64	@ 0x40
 80056e8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005704:	f7fd faa2 	bl	8002c4c <HAL_GetTick>
 8005708:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e06b      	b.n	80057ec <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d008      	beq.n	8005732 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e05c      	b.n	80057ec <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0204 	orr.w	r2, r2, #4
 8005740:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2205      	movs	r2, #5
 8005746:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800574a:	e020      	b.n	800578e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800574c:	f7fd fa7e 	bl	8002c4c <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b05      	cmp	r3, #5
 8005758:	d919      	bls.n	800578e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575e:	f043 0210 	orr.w	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2203      	movs	r2, #3
 800576a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800577e:	2201      	movs	r2, #1
 8005780:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e02e      	b.n	80057ec <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0d7      	beq.n	800574c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0202 	orr.w	r2, r2, #2
 80057aa:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2204      	movs	r2, #4
 80057b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80057bc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d6:	2201      	movs	r2, #1
 80057d8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e019      	b.n	800583a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d004      	beq.n	800581c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e00e      	b.n	800583a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2204      	movs	r2, #4
 8005820:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005832:	f043 0304 	orr.w	r3, r3, #4
 8005836:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b086      	sub	sp, #24
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005856:	f023 030f 	bic.w	r3, r3, #15
 800585a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005864:	3b50      	subs	r3, #80	@ 0x50
 8005866:	09db      	lsrs	r3, r3, #7
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	2201      	movs	r2, #1
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4013      	ands	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 813b 	beq.w	8005afc <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005890:	2b00      	cmp	r3, #0
 8005892:	d011      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058aa:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	f043 0201 	orr.w	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d011      	beq.n	80058ea <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058dc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e2:	f043 0202 	orr.w	r2, r3, #2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d011      	beq.n	800591c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800590e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005914:	f043 0204 	orr.w	r2, r3, #4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d011      	beq.n	800594e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005940:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005946:	f043 0208 	orr.w	r2, r3, #8
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005958:	2b00      	cmp	r3, #0
 800595a:	d013      	beq.n	8005984 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005972:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d04c      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d045      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80059a8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d12e      	bne.n	8005a14 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059c4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0202 	orr.w	r2, r2, #2
 80059d4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ee:	2201      	movs	r2, #1
 80059f0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d07a      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	4798      	blx	r3
        }

        return;
 8005a12:	e075      	b.n	8005b00 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2205      	movs	r2, #5
 8005a18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d039      	beq.n	8005aae <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d032      	beq.n	8005aae <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d012      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d116      	bne.n	8005a8c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d111      	bne.n	8005a8c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a74:	2201      	movs	r2, #1
 8005a76:	731a      	strb	r2, [r3, #12]
 8005a78:	e008      	b.n	8005a8c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005a94:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d025      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695a      	ldr	r2, [r3, #20]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0202 	orr.w	r2, r2, #2
 8005ac4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ade:	2201      	movs	r2, #1
 8005ae0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
 8005afa:	e002      	b.n	8005b02 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005afc:	bf00      	nop
 8005afe:	e000      	b.n	8005b02 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005b00:	bf00      	nop
    }
  }
}
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b16:	b2db      	uxtb	r3, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e02b      	b.n	8005b90 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005b40:	f023 030f 	bic.w	r3, r3, #15
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4e:	3b50      	subs	r3, #80	@ 0x50
 8005b50:	09db      	lsrs	r3, r3, #7
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	2201      	movs	r2, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d012      	beq.n	8005b8e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f003 0311 	and.w	r3, r3, #17
 8005b6e:	2b11      	cmp	r3, #17
 8005b70:	d106      	bne.n	8005b80 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	e006      	b.n	8005b8e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	43db      	mvns	r3, r3
 8005b88:	401a      	ands	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	b291      	uxth	r1, r2
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005bc8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a53      	ldr	r2, [pc, #332]	@ (8005d74 <DMA_Init+0x18c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	f000 80a0 	beq.w	8005d6e <DMA_Init+0x186>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a51      	ldr	r2, [pc, #324]	@ (8005d78 <DMA_Init+0x190>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	f000 809a 	beq.w	8005d6e <DMA_Init+0x186>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a4f      	ldr	r2, [pc, #316]	@ (8005d7c <DMA_Init+0x194>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	f000 8094 	beq.w	8005d6e <DMA_Init+0x186>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a4d      	ldr	r2, [pc, #308]	@ (8005d80 <DMA_Init+0x198>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	f000 808e 	beq.w	8005d6e <DMA_Init+0x186>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a4b      	ldr	r2, [pc, #300]	@ (8005d84 <DMA_Init+0x19c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	f000 8088 	beq.w	8005d6e <DMA_Init+0x186>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a49      	ldr	r2, [pc, #292]	@ (8005d88 <DMA_Init+0x1a0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	f000 8082 	beq.w	8005d6e <DMA_Init+0x186>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a47      	ldr	r2, [pc, #284]	@ (8005d8c <DMA_Init+0x1a4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d07c      	beq.n	8005d6e <DMA_Init+0x186>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a45      	ldr	r2, [pc, #276]	@ (8005d90 <DMA_Init+0x1a8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d077      	beq.n	8005d6e <DMA_Init+0x186>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a44      	ldr	r2, [pc, #272]	@ (8005d94 <DMA_Init+0x1ac>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d072      	beq.n	8005d6e <DMA_Init+0x186>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a42      	ldr	r2, [pc, #264]	@ (8005d98 <DMA_Init+0x1b0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d06d      	beq.n	8005d6e <DMA_Init+0x186>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a41      	ldr	r2, [pc, #260]	@ (8005d9c <DMA_Init+0x1b4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d068      	beq.n	8005d6e <DMA_Init+0x186>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a3f      	ldr	r2, [pc, #252]	@ (8005da0 <DMA_Init+0x1b8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d063      	beq.n	8005d6e <DMA_Init+0x186>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a3e      	ldr	r2, [pc, #248]	@ (8005da4 <DMA_Init+0x1bc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d05e      	beq.n	8005d6e <DMA_Init+0x186>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a3c      	ldr	r2, [pc, #240]	@ (8005da8 <DMA_Init+0x1c0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d059      	beq.n	8005d6e <DMA_Init+0x186>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a3b      	ldr	r2, [pc, #236]	@ (8005dac <DMA_Init+0x1c4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d054      	beq.n	8005d6e <DMA_Init+0x186>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a39      	ldr	r2, [pc, #228]	@ (8005db0 <DMA_Init+0x1c8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d04f      	beq.n	8005d6e <DMA_Init+0x186>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a38      	ldr	r2, [pc, #224]	@ (8005db4 <DMA_Init+0x1cc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d04a      	beq.n	8005d6e <DMA_Init+0x186>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a36      	ldr	r2, [pc, #216]	@ (8005db8 <DMA_Init+0x1d0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d045      	beq.n	8005d6e <DMA_Init+0x186>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a35      	ldr	r2, [pc, #212]	@ (8005dbc <DMA_Init+0x1d4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d040      	beq.n	8005d6e <DMA_Init+0x186>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a33      	ldr	r2, [pc, #204]	@ (8005dc0 <DMA_Init+0x1d8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d03b      	beq.n	8005d6e <DMA_Init+0x186>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a32      	ldr	r2, [pc, #200]	@ (8005dc4 <DMA_Init+0x1dc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d036      	beq.n	8005d6e <DMA_Init+0x186>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a30      	ldr	r2, [pc, #192]	@ (8005dc8 <DMA_Init+0x1e0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d031      	beq.n	8005d6e <DMA_Init+0x186>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8005dcc <DMA_Init+0x1e4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d02c      	beq.n	8005d6e <DMA_Init+0x186>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd0 <DMA_Init+0x1e8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d027      	beq.n	8005d6e <DMA_Init+0x186>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd4 <DMA_Init+0x1ec>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d022      	beq.n	8005d6e <DMA_Init+0x186>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005dd8 <DMA_Init+0x1f0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01d      	beq.n	8005d6e <DMA_Init+0x186>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a29      	ldr	r2, [pc, #164]	@ (8005ddc <DMA_Init+0x1f4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d018      	beq.n	8005d6e <DMA_Init+0x186>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a27      	ldr	r2, [pc, #156]	@ (8005de0 <DMA_Init+0x1f8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <DMA_Init+0x186>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a26      	ldr	r2, [pc, #152]	@ (8005de4 <DMA_Init+0x1fc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <DMA_Init+0x186>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a24      	ldr	r2, [pc, #144]	@ (8005de8 <DMA_Init+0x200>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <DMA_Init+0x186>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a23      	ldr	r2, [pc, #140]	@ (8005dec <DMA_Init+0x204>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <DMA_Init+0x186>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a21      	ldr	r2, [pc, #132]	@ (8005df0 <DMA_Init+0x208>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d142      	bne.n	8005df4 <DMA_Init+0x20c>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e041      	b.n	8005df6 <DMA_Init+0x20e>
 8005d72:	bf00      	nop
 8005d74:	40020050 	.word	0x40020050
 8005d78:	50020050 	.word	0x50020050
 8005d7c:	400200d0 	.word	0x400200d0
 8005d80:	500200d0 	.word	0x500200d0
 8005d84:	40020150 	.word	0x40020150
 8005d88:	50020150 	.word	0x50020150
 8005d8c:	400201d0 	.word	0x400201d0
 8005d90:	500201d0 	.word	0x500201d0
 8005d94:	40020250 	.word	0x40020250
 8005d98:	50020250 	.word	0x50020250
 8005d9c:	400202d0 	.word	0x400202d0
 8005da0:	500202d0 	.word	0x500202d0
 8005da4:	40020350 	.word	0x40020350
 8005da8:	50020350 	.word	0x50020350
 8005dac:	400203d0 	.word	0x400203d0
 8005db0:	500203d0 	.word	0x500203d0
 8005db4:	40020450 	.word	0x40020450
 8005db8:	50020450 	.word	0x50020450
 8005dbc:	400204d0 	.word	0x400204d0
 8005dc0:	500204d0 	.word	0x500204d0
 8005dc4:	40020550 	.word	0x40020550
 8005dc8:	50020550 	.word	0x50020550
 8005dcc:	400205d0 	.word	0x400205d0
 8005dd0:	500205d0 	.word	0x500205d0
 8005dd4:	40020650 	.word	0x40020650
 8005dd8:	50020650 	.word	0x50020650
 8005ddc:	400206d0 	.word	0x400206d0
 8005de0:	500206d0 	.word	0x500206d0
 8005de4:	40020750 	.word	0x40020750
 8005de8:	50020750 	.word	0x50020750
 8005dec:	400207d0 	.word	0x400207d0
 8005df0:	500207d0 	.word	0x500207d0
 8005df4:	2300      	movs	r3, #0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d012      	beq.n	8005e20 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e02:	3b01      	subs	r3, #1
 8005e04:	051b      	lsls	r3, r3, #20
 8005e06:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e0a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e10:	3b01      	subs	r3, #1
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e18:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e26:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e52:	f040 80b0 	bne.w	8005fb6 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a82      	ldr	r2, [pc, #520]	@ (8006064 <DMA_Init+0x47c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	f000 80a0 	beq.w	8005fa2 <DMA_Init+0x3ba>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a80      	ldr	r2, [pc, #512]	@ (8006068 <DMA_Init+0x480>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	f000 809a 	beq.w	8005fa2 <DMA_Init+0x3ba>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a7e      	ldr	r2, [pc, #504]	@ (800606c <DMA_Init+0x484>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	f000 8094 	beq.w	8005fa2 <DMA_Init+0x3ba>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a7c      	ldr	r2, [pc, #496]	@ (8006070 <DMA_Init+0x488>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	f000 808e 	beq.w	8005fa2 <DMA_Init+0x3ba>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a7a      	ldr	r2, [pc, #488]	@ (8006074 <DMA_Init+0x48c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	f000 8088 	beq.w	8005fa2 <DMA_Init+0x3ba>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a78      	ldr	r2, [pc, #480]	@ (8006078 <DMA_Init+0x490>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	f000 8082 	beq.w	8005fa2 <DMA_Init+0x3ba>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a76      	ldr	r2, [pc, #472]	@ (800607c <DMA_Init+0x494>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d07c      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a74      	ldr	r2, [pc, #464]	@ (8006080 <DMA_Init+0x498>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d077      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a73      	ldr	r2, [pc, #460]	@ (8006084 <DMA_Init+0x49c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d072      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a71      	ldr	r2, [pc, #452]	@ (8006088 <DMA_Init+0x4a0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d06d      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a70      	ldr	r2, [pc, #448]	@ (800608c <DMA_Init+0x4a4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d068      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8006090 <DMA_Init+0x4a8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d063      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6d      	ldr	r2, [pc, #436]	@ (8006094 <DMA_Init+0x4ac>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d05e      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8006098 <DMA_Init+0x4b0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d059      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a6a      	ldr	r2, [pc, #424]	@ (800609c <DMA_Init+0x4b4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d054      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a68      	ldr	r2, [pc, #416]	@ (80060a0 <DMA_Init+0x4b8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d04f      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a67      	ldr	r2, [pc, #412]	@ (80060a4 <DMA_Init+0x4bc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d04a      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a65      	ldr	r2, [pc, #404]	@ (80060a8 <DMA_Init+0x4c0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d045      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a64      	ldr	r2, [pc, #400]	@ (80060ac <DMA_Init+0x4c4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d040      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a62      	ldr	r2, [pc, #392]	@ (80060b0 <DMA_Init+0x4c8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d03b      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a61      	ldr	r2, [pc, #388]	@ (80060b4 <DMA_Init+0x4cc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d036      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5f      	ldr	r2, [pc, #380]	@ (80060b8 <DMA_Init+0x4d0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d031      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5e      	ldr	r2, [pc, #376]	@ (80060bc <DMA_Init+0x4d4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d02c      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80060c0 <DMA_Init+0x4d8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d027      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5b      	ldr	r2, [pc, #364]	@ (80060c4 <DMA_Init+0x4dc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a59      	ldr	r2, [pc, #356]	@ (80060c8 <DMA_Init+0x4e0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a58      	ldr	r2, [pc, #352]	@ (80060cc <DMA_Init+0x4e4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a56      	ldr	r2, [pc, #344]	@ (80060d0 <DMA_Init+0x4e8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a55      	ldr	r2, [pc, #340]	@ (80060d4 <DMA_Init+0x4ec>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a53      	ldr	r2, [pc, #332]	@ (80060d8 <DMA_Init+0x4f0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a52      	ldr	r2, [pc, #328]	@ (80060dc <DMA_Init+0x4f4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <DMA_Init+0x3ba>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a50      	ldr	r2, [pc, #320]	@ (80060e0 <DMA_Init+0x4f8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <DMA_Init+0x3be>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <DMA_Init+0x3c0>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00d      	beq.n	8005fc8 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e008      	b.n	8005fc8 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fbe:	d103      	bne.n	8005fc8 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fc6:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fce:	4b45      	ldr	r3, [pc, #276]	@ (80060e4 <DMA_Init+0x4fc>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a36      	ldr	r2, [pc, #216]	@ (80060c4 <DMA_Init+0x4dc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <DMA_Init+0x44c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a35      	ldr	r2, [pc, #212]	@ (80060c8 <DMA_Init+0x4e0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d01d      	beq.n	8006034 <DMA_Init+0x44c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a33      	ldr	r2, [pc, #204]	@ (80060cc <DMA_Init+0x4e4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <DMA_Init+0x44c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a32      	ldr	r2, [pc, #200]	@ (80060d0 <DMA_Init+0x4e8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <DMA_Init+0x44c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a30      	ldr	r2, [pc, #192]	@ (80060d4 <DMA_Init+0x4ec>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <DMA_Init+0x44c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2f      	ldr	r2, [pc, #188]	@ (80060d8 <DMA_Init+0x4f0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <DMA_Init+0x44c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2d      	ldr	r2, [pc, #180]	@ (80060dc <DMA_Init+0x4f4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <DMA_Init+0x44c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2c      	ldr	r2, [pc, #176]	@ (80060e0 <DMA_Init+0x4f8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d101      	bne.n	8006038 <DMA_Init+0x450>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <DMA_Init+0x452>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2200      	movs	r2, #0
 8006044:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2200      	movs	r2, #0
 8006054:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40020050 	.word	0x40020050
 8006068:	50020050 	.word	0x50020050
 800606c:	400200d0 	.word	0x400200d0
 8006070:	500200d0 	.word	0x500200d0
 8006074:	40020150 	.word	0x40020150
 8006078:	50020150 	.word	0x50020150
 800607c:	400201d0 	.word	0x400201d0
 8006080:	500201d0 	.word	0x500201d0
 8006084:	40020250 	.word	0x40020250
 8006088:	50020250 	.word	0x50020250
 800608c:	400202d0 	.word	0x400202d0
 8006090:	500202d0 	.word	0x500202d0
 8006094:	40020350 	.word	0x40020350
 8006098:	50020350 	.word	0x50020350
 800609c:	400203d0 	.word	0x400203d0
 80060a0:	500203d0 	.word	0x500203d0
 80060a4:	40020450 	.word	0x40020450
 80060a8:	50020450 	.word	0x50020450
 80060ac:	400204d0 	.word	0x400204d0
 80060b0:	500204d0 	.word	0x500204d0
 80060b4:	40020550 	.word	0x40020550
 80060b8:	50020550 	.word	0x50020550
 80060bc:	400205d0 	.word	0x400205d0
 80060c0:	500205d0 	.word	0x500205d0
 80060c4:	40020650 	.word	0x40020650
 80060c8:	50020650 	.word	0x50020650
 80060cc:	400206d0 	.word	0x400206d0
 80060d0:	500206d0 	.word	0x500206d0
 80060d4:	40020750 	.word	0x40020750
 80060d8:	50020750 	.word	0x50020750
 80060dc:	400207d0 	.word	0x400207d0
 80060e0:	500207d0 	.word	0x500207d0
 80060e4:	3c803180 	.word	0x3c803180

080060e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e053      	b.n	80061a2 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fb fd78 	bl	8001c04 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6851      	ldr	r1, [r2, #4]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	69d2      	ldr	r2, [r2, #28]
 8006132:	4311      	orrs	r1, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	430b      	orrs	r3, r1
 800613a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006142:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006146:	f023 0301 	bic.w	r3, r3, #1
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6891      	ldr	r1, [r2, #8]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6992      	ldr	r2, [r2, #24]
 8006152:	4311      	orrs	r1, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	430b      	orrs	r3, r1
 800615a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	0c1b      	lsrs	r3, r3, #16
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68d1      	ldr	r1, [r2, #12]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	430b      	orrs	r3, r1
 8006170:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006178:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	051a      	lsls	r2, r3, #20
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	055b      	lsls	r3, r3, #21
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_DMA2D_ConfigLayer+0x24>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e092      	b.n	80062f6 <HAL_DMA2D_ConfigLayer+0x14a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	4613      	mov	r3, r2
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	1a9b      	subs	r3, r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	3328      	adds	r3, #40	@ 0x28
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	4413      	add	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	041b      	lsls	r3, r3, #16
 80061fc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006204:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006210:	4b3c      	ldr	r3, [pc, #240]	@ (8006304 <HAL_DMA2D_ConfigLayer+0x158>)
 8006212:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b0a      	cmp	r3, #10
 800621a:	d003      	beq.n	8006224 <HAL_DMA2D_ConfigLayer+0x78>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2b09      	cmp	r3, #9
 8006222:	d107      	bne.n	8006234 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	e005      	b.n	8006240 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	061b      	lsls	r3, r3, #24
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d120      	bne.n	8006288 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	43db      	mvns	r3, r3
 8006250:	ea02 0103 	and.w	r1, r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	430a      	orrs	r2, r1
 800625c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b0a      	cmp	r3, #10
 800626e:	d003      	beq.n	8006278 <HAL_DMA2D_ConfigLayer+0xcc>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b09      	cmp	r3, #9
 8006276:	d135      	bne.n	80062e4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006284:	629a      	str	r2, [r3, #40]	@ 0x28
 8006286:	e02d      	b.n	80062e4 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b0b      	cmp	r3, #11
 800628e:	d109      	bne.n	80062a4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	049b      	lsls	r3, r3, #18
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80062a2:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69da      	ldr	r2, [r3, #28]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	ea02 0103 	and.w	r1, r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b0a      	cmp	r3, #10
 80062cc:	d003      	beq.n	80062d6 <HAL_DMA2D_ConfigLayer+0x12a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b09      	cmp	r3, #9
 80062d4:	d106      	bne.n	80062e4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80062e2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	ff33000f 	.word	0xff33000f

08006308 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006310:	f7fc fc9c 	bl	8002c4c <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0db      	b.n	80064d8 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a6e      	ldr	r2, [pc, #440]	@ (80064e0 <HAL_DMAEx_List_Init+0x1d8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	f000 809f 	beq.w	800646a <HAL_DMAEx_List_Init+0x162>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a6c      	ldr	r2, [pc, #432]	@ (80064e4 <HAL_DMAEx_List_Init+0x1dc>)
 8006332:	4293      	cmp	r3, r2
 8006334:	f000 8099 	beq.w	800646a <HAL_DMAEx_List_Init+0x162>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a6a      	ldr	r2, [pc, #424]	@ (80064e8 <HAL_DMAEx_List_Init+0x1e0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	f000 8093 	beq.w	800646a <HAL_DMAEx_List_Init+0x162>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a68      	ldr	r2, [pc, #416]	@ (80064ec <HAL_DMAEx_List_Init+0x1e4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	f000 808d 	beq.w	800646a <HAL_DMAEx_List_Init+0x162>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a66      	ldr	r2, [pc, #408]	@ (80064f0 <HAL_DMAEx_List_Init+0x1e8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	f000 8087 	beq.w	800646a <HAL_DMAEx_List_Init+0x162>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a64      	ldr	r2, [pc, #400]	@ (80064f4 <HAL_DMAEx_List_Init+0x1ec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	f000 8081 	beq.w	800646a <HAL_DMAEx_List_Init+0x162>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a62      	ldr	r2, [pc, #392]	@ (80064f8 <HAL_DMAEx_List_Init+0x1f0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d07b      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a61      	ldr	r2, [pc, #388]	@ (80064fc <HAL_DMAEx_List_Init+0x1f4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d076      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a5f      	ldr	r2, [pc, #380]	@ (8006500 <HAL_DMAEx_List_Init+0x1f8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d071      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a5e      	ldr	r2, [pc, #376]	@ (8006504 <HAL_DMAEx_List_Init+0x1fc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d06c      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a5c      	ldr	r2, [pc, #368]	@ (8006508 <HAL_DMAEx_List_Init+0x200>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d067      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a5b      	ldr	r2, [pc, #364]	@ (800650c <HAL_DMAEx_List_Init+0x204>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d062      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a59      	ldr	r2, [pc, #356]	@ (8006510 <HAL_DMAEx_List_Init+0x208>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d05d      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a58      	ldr	r2, [pc, #352]	@ (8006514 <HAL_DMAEx_List_Init+0x20c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d058      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a56      	ldr	r2, [pc, #344]	@ (8006518 <HAL_DMAEx_List_Init+0x210>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d053      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a55      	ldr	r2, [pc, #340]	@ (800651c <HAL_DMAEx_List_Init+0x214>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d04e      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a53      	ldr	r2, [pc, #332]	@ (8006520 <HAL_DMAEx_List_Init+0x218>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d049      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a52      	ldr	r2, [pc, #328]	@ (8006524 <HAL_DMAEx_List_Init+0x21c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d044      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a50      	ldr	r2, [pc, #320]	@ (8006528 <HAL_DMAEx_List_Init+0x220>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d03f      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a4f      	ldr	r2, [pc, #316]	@ (800652c <HAL_DMAEx_List_Init+0x224>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d03a      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a4d      	ldr	r2, [pc, #308]	@ (8006530 <HAL_DMAEx_List_Init+0x228>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d035      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a4c      	ldr	r2, [pc, #304]	@ (8006534 <HAL_DMAEx_List_Init+0x22c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d030      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a4a      	ldr	r2, [pc, #296]	@ (8006538 <HAL_DMAEx_List_Init+0x230>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d02b      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a49      	ldr	r2, [pc, #292]	@ (800653c <HAL_DMAEx_List_Init+0x234>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d026      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a47      	ldr	r2, [pc, #284]	@ (8006540 <HAL_DMAEx_List_Init+0x238>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d021      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a46      	ldr	r2, [pc, #280]	@ (8006544 <HAL_DMAEx_List_Init+0x23c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d01c      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a44      	ldr	r2, [pc, #272]	@ (8006548 <HAL_DMAEx_List_Init+0x240>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d017      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a43      	ldr	r2, [pc, #268]	@ (800654c <HAL_DMAEx_List_Init+0x244>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d012      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a41      	ldr	r2, [pc, #260]	@ (8006550 <HAL_DMAEx_List_Init+0x248>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00d      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a40      	ldr	r2, [pc, #256]	@ (8006554 <HAL_DMAEx_List_Init+0x24c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d008      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a3e      	ldr	r2, [pc, #248]	@ (8006558 <HAL_DMAEx_List_Init+0x250>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d003      	beq.n	800646a <HAL_DMAEx_List_Init+0x162>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a3d      	ldr	r2, [pc, #244]	@ (800655c <HAL_DMAEx_List_Init+0x254>)
 8006468:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695a      	ldr	r2, [r3, #20]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0206 	orr.w	r2, r2, #6
 8006488:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800648a:	e00f      	b.n	80064ac <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800648c:	f7fc fbde 	bl	8002c4c <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b05      	cmp	r3, #5
 8006498:	d908      	bls.n	80064ac <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2210      	movs	r2, #16
 800649e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2203      	movs	r2, #3
 80064a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e015      	b.n	80064d8 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e8      	bne.n	800648c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fae0 	bl	8006a80 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40020050 	.word	0x40020050
 80064e4:	50020050 	.word	0x50020050
 80064e8:	400200d0 	.word	0x400200d0
 80064ec:	500200d0 	.word	0x500200d0
 80064f0:	40020150 	.word	0x40020150
 80064f4:	50020150 	.word	0x50020150
 80064f8:	400201d0 	.word	0x400201d0
 80064fc:	500201d0 	.word	0x500201d0
 8006500:	40020250 	.word	0x40020250
 8006504:	50020250 	.word	0x50020250
 8006508:	400202d0 	.word	0x400202d0
 800650c:	500202d0 	.word	0x500202d0
 8006510:	40020350 	.word	0x40020350
 8006514:	50020350 	.word	0x50020350
 8006518:	400203d0 	.word	0x400203d0
 800651c:	500203d0 	.word	0x500203d0
 8006520:	40020450 	.word	0x40020450
 8006524:	50020450 	.word	0x50020450
 8006528:	400204d0 	.word	0x400204d0
 800652c:	500204d0 	.word	0x500204d0
 8006530:	40020550 	.word	0x40020550
 8006534:	50020550 	.word	0x50020550
 8006538:	400205d0 	.word	0x400205d0
 800653c:	500205d0 	.word	0x500205d0
 8006540:	40020650 	.word	0x40020650
 8006544:	50020650 	.word	0x50020650
 8006548:	400206d0 	.word	0x400206d0
 800654c:	500206d0 	.word	0x500206d0
 8006550:	40020750 	.word	0x40020750
 8006554:	50020750 	.word	0x50020750
 8006558:	400207d0 	.word	0x400207d0
 800655c:	500207d0 	.word	0x500207d0

08006560 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_DMAEx_List_Start_IT+0x16>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e082      	b.n	8006680 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006580:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800658c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d005      	beq.n	80065a0 <HAL_DMAEx_List_Start_IT+0x40>
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d16a      	bne.n	8006670 <HAL_DMAEx_List_Start_IT+0x110>
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d067      	beq.n	8006670 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d157      	bne.n	800665c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_DMAEx_List_Start_IT+0x5a>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e062      	b.n	8006680 <HAL_DMAEx_List_Start_IT+0x120>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ce:	2202      	movs	r2, #2
 80065d0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065dc:	2200      	movs	r2, #0
 80065de:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80065ee:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006606:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695a      	ldr	r2, [r3, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800661e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f107 010c 	add.w	r1, r7, #12
 800662a:	2200      	movs	r2, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fe47 	bl	80072c0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4619      	mov	r1, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	0c0b      	lsrs	r3, r1, #16
 8006640:	041b      	lsls	r3, r3, #16
 8006642:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006650:	4013      	ands	r3, r2
 8006652:	68f9      	ldr	r1, [r7, #12]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	430b      	orrs	r3, r1
 800665a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695a      	ldr	r2, [r3, #20]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	e007      	b.n	8006680 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2240      	movs	r2, #64	@ 0x40
 8006674:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_DMAEx_List_BuildNode+0x16>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e004      	b.n	80066ac <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fb43 	bl	8006d30 <DMA_List_BuildNode>

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <HAL_DMAEx_List_GetNodeConfig+0x16>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e004      	b.n	80066d8 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fc7f 	bl	8006fd4 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08c      	sub	sp, #48	@ 0x30
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_DMAEx_List_InsertNode+0x18>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0b6      	b.n	800686a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d104      	bne.n	800670e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2204      	movs	r2, #4
 8006708:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e0ad      	b.n	800686a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fd66 	bl	80071e8 <DMA_List_CheckNodesBaseAddresses>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d004      	beq.n	800672c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2205      	movs	r2, #5
 8006726:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e09e      	b.n	800686a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fd87 	bl	8007248 <DMA_List_CheckNodesTypes>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2204      	movs	r2, #4
 8006744:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e08f      	b.n	800686a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2202      	movs	r2, #2
 800674e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006756:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800675a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fdad 	bl	80072c0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d11a      	bne.n	80067a4 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d106      	bne.n	8006782 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	609a      	str	r2, [r3, #8]
 8006780:	e06c      	b.n	800685c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800678e:	4013      	ands	r3, r2
 8006790:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006794:	4319      	orrs	r1, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2202      	movs	r2, #2
 80067a0:	609a      	str	r2, [r3, #8]
 80067a2:	e05b      	b.n	800685c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10f      	bne.n	80067ca <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067b4:	4013      	ands	r3, r2
 80067b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ba:	4319      	orrs	r1, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	e043      	b.n	8006852 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80067ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067cc:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80067ce:	f107 0314 	add.w	r3, r7, #20
 80067d2:	461a      	mov	r2, r3
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fda2 	bl	8007320 <DMA_List_FindNode>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d132      	bne.n	8006848 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d11a      	bne.n	8006822 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	461a      	mov	r2, r3
 80067fa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067fe:	4013      	ands	r3, r2
 8006800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006804:	4319      	orrs	r1, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006812:	4013      	ands	r3, r2
 8006814:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006818:	4319      	orrs	r1, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006820:	e017      	b.n	8006852 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006838:	4013      	ands	r3, r2
 800683a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800683c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800683e:	4319      	orrs	r1, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006846:	e004      	b.n	8006852 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2206      	movs	r2, #6
 800684c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e00b      	b.n	800686a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3730      	adds	r7, #48	@ 0x30
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b08a      	sub	sp, #40	@ 0x28
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e052      	b.n	800692a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e049      	b.n	800692a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00c      	beq.n	80068b8 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d101      	bne.n	80068ae <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e03d      	b.n	800692a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2204      	movs	r2, #4
 80068b2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e038      	b.n	800692a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d104      	bne.n	80068ca <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2204      	movs	r2, #4
 80068c4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e02f      	b.n	800692a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f107 0220 	add.w	r2, r7, #32
 80068de:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fcec 	bl	80072c0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80068ec:	f107 030c 	add.w	r3, r7, #12
 80068f0:	461a      	mov	r2, r3
 80068f2:	2100      	movs	r1, #0
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fd13 	bl	8007320 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006904:	4013      	ands	r3, r2
 8006906:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4610      	mov	r0, r2
 800690c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800690e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006910:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3728      	adds	r7, #40	@ 0x28
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_DMAEx_List_LinkQ+0x16>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e072      	b.n	8006a34 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006954:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d002      	beq.n	8006968 <HAL_DMAEx_List_LinkQ+0x34>
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	2b05      	cmp	r3, #5
 8006966:	d108      	bne.n	800697a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2240      	movs	r2, #64	@ 0x40
 800696c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e05c      	b.n	8006a34 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	7b1b      	ldrb	r3, [r3, #12]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d104      	bne.n	800698e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2201      	movs	r2, #1
 8006988:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e052      	b.n	8006a34 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a2b      	ldr	r2, [pc, #172]	@ (8006a40 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_DMAEx_List_LinkQ+0xaa>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a29      	ldr	r2, [pc, #164]	@ (8006a44 <HAL_DMAEx_List_LinkQ+0x110>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_DMAEx_List_LinkQ+0xaa>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a28      	ldr	r2, [pc, #160]	@ (8006a48 <HAL_DMAEx_List_LinkQ+0x114>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d018      	beq.n	80069de <HAL_DMAEx_List_LinkQ+0xaa>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a26      	ldr	r2, [pc, #152]	@ (8006a4c <HAL_DMAEx_List_LinkQ+0x118>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_DMAEx_List_LinkQ+0xaa>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a25      	ldr	r2, [pc, #148]	@ (8006a50 <HAL_DMAEx_List_LinkQ+0x11c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_DMAEx_List_LinkQ+0xaa>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a23      	ldr	r2, [pc, #140]	@ (8006a54 <HAL_DMAEx_List_LinkQ+0x120>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_DMAEx_List_LinkQ+0xaa>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a22      	ldr	r2, [pc, #136]	@ (8006a58 <HAL_DMAEx_List_LinkQ+0x124>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_DMAEx_List_LinkQ+0xaa>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a20      	ldr	r2, [pc, #128]	@ (8006a5c <HAL_DMAEx_List_LinkQ+0x128>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d101      	bne.n	80069e2 <HAL_DMAEx_List_LinkQ+0xae>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <HAL_DMAEx_List_LinkQ+0xb0>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d004      	beq.n	8006a00 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2203      	movs	r2, #3
 80069fa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e019      	b.n	8006a34 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a04:	2b81      	cmp	r3, #129	@ 0x81
 8006a06:	d108      	bne.n	8006a1a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10d      	bne.n	8006a2c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2204      	movs	r2, #4
 8006a14:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e00c      	b.n	8006a34 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2204      	movs	r2, #4
 8006a26:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e003      	b.n	8006a34 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	40020650 	.word	0x40020650
 8006a44:	50020650 	.word	0x50020650
 8006a48:	400206d0 	.word	0x400206d0
 8006a4c:	500206d0 	.word	0x500206d0
 8006a50:	40020750 	.word	0x40020750
 8006a54:	50020750 	.word	0x50020750
 8006a58:	400207d0 	.word	0x400207d0
 8006a5c:	500207d0 	.word	0x500207d0

08006a60 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	0c1b      	lsrs	r3, r3, #16
 8006a70:	b2db      	uxtb	r3, r3
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a85      	ldr	r2, [pc, #532]	@ (8006cb0 <DMA_List_Init+0x230>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	f000 80a0 	beq.w	8006be0 <DMA_List_Init+0x160>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a83      	ldr	r2, [pc, #524]	@ (8006cb4 <DMA_List_Init+0x234>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	f000 809a 	beq.w	8006be0 <DMA_List_Init+0x160>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a81      	ldr	r2, [pc, #516]	@ (8006cb8 <DMA_List_Init+0x238>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	f000 8094 	beq.w	8006be0 <DMA_List_Init+0x160>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a7f      	ldr	r2, [pc, #508]	@ (8006cbc <DMA_List_Init+0x23c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	f000 808e 	beq.w	8006be0 <DMA_List_Init+0x160>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a7d      	ldr	r2, [pc, #500]	@ (8006cc0 <DMA_List_Init+0x240>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	f000 8088 	beq.w	8006be0 <DMA_List_Init+0x160>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a7b      	ldr	r2, [pc, #492]	@ (8006cc4 <DMA_List_Init+0x244>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	f000 8082 	beq.w	8006be0 <DMA_List_Init+0x160>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a79      	ldr	r2, [pc, #484]	@ (8006cc8 <DMA_List_Init+0x248>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d07c      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a78      	ldr	r2, [pc, #480]	@ (8006ccc <DMA_List_Init+0x24c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d077      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a76      	ldr	r2, [pc, #472]	@ (8006cd0 <DMA_List_Init+0x250>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d072      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a75      	ldr	r2, [pc, #468]	@ (8006cd4 <DMA_List_Init+0x254>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d06d      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a73      	ldr	r2, [pc, #460]	@ (8006cd8 <DMA_List_Init+0x258>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d068      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a72      	ldr	r2, [pc, #456]	@ (8006cdc <DMA_List_Init+0x25c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d063      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a70      	ldr	r2, [pc, #448]	@ (8006ce0 <DMA_List_Init+0x260>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d05e      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a6f      	ldr	r2, [pc, #444]	@ (8006ce4 <DMA_List_Init+0x264>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d059      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a6d      	ldr	r2, [pc, #436]	@ (8006ce8 <DMA_List_Init+0x268>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d054      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a6c      	ldr	r2, [pc, #432]	@ (8006cec <DMA_List_Init+0x26c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d04f      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a6a      	ldr	r2, [pc, #424]	@ (8006cf0 <DMA_List_Init+0x270>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d04a      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a69      	ldr	r2, [pc, #420]	@ (8006cf4 <DMA_List_Init+0x274>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d045      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a67      	ldr	r2, [pc, #412]	@ (8006cf8 <DMA_List_Init+0x278>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d040      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a66      	ldr	r2, [pc, #408]	@ (8006cfc <DMA_List_Init+0x27c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d03b      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a64      	ldr	r2, [pc, #400]	@ (8006d00 <DMA_List_Init+0x280>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d036      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a63      	ldr	r2, [pc, #396]	@ (8006d04 <DMA_List_Init+0x284>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d031      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a61      	ldr	r2, [pc, #388]	@ (8006d08 <DMA_List_Init+0x288>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d02c      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a60      	ldr	r2, [pc, #384]	@ (8006d0c <DMA_List_Init+0x28c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d027      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a5e      	ldr	r2, [pc, #376]	@ (8006d10 <DMA_List_Init+0x290>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d022      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a5d      	ldr	r2, [pc, #372]	@ (8006d14 <DMA_List_Init+0x294>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d01d      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a5b      	ldr	r2, [pc, #364]	@ (8006d18 <DMA_List_Init+0x298>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d018      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a5a      	ldr	r2, [pc, #360]	@ (8006d1c <DMA_List_Init+0x29c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a58      	ldr	r2, [pc, #352]	@ (8006d20 <DMA_List_Init+0x2a0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a57      	ldr	r2, [pc, #348]	@ (8006d24 <DMA_List_Init+0x2a4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d009      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a55      	ldr	r2, [pc, #340]	@ (8006d28 <DMA_List_Init+0x2a8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <DMA_List_Init+0x160>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a54      	ldr	r2, [pc, #336]	@ (8006d2c <DMA_List_Init+0x2ac>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <DMA_List_Init+0x164>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <DMA_List_Init+0x166>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c18:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2200      	movs	r2, #0
 8006c28:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a36      	ldr	r2, [pc, #216]	@ (8006d10 <DMA_List_Init+0x290>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d022      	beq.n	8006c82 <DMA_List_Init+0x202>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a34      	ldr	r2, [pc, #208]	@ (8006d14 <DMA_List_Init+0x294>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d01d      	beq.n	8006c82 <DMA_List_Init+0x202>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a33      	ldr	r2, [pc, #204]	@ (8006d18 <DMA_List_Init+0x298>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d018      	beq.n	8006c82 <DMA_List_Init+0x202>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a31      	ldr	r2, [pc, #196]	@ (8006d1c <DMA_List_Init+0x29c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d013      	beq.n	8006c82 <DMA_List_Init+0x202>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a30      	ldr	r2, [pc, #192]	@ (8006d20 <DMA_List_Init+0x2a0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00e      	beq.n	8006c82 <DMA_List_Init+0x202>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a2e      	ldr	r2, [pc, #184]	@ (8006d24 <DMA_List_Init+0x2a4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d009      	beq.n	8006c82 <DMA_List_Init+0x202>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a2d      	ldr	r2, [pc, #180]	@ (8006d28 <DMA_List_Init+0x2a8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d004      	beq.n	8006c82 <DMA_List_Init+0x202>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d2c <DMA_List_Init+0x2ac>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d101      	bne.n	8006c86 <DMA_List_Init+0x206>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <DMA_List_Init+0x208>
 8006c86:	2300      	movs	r3, #0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d007      	beq.n	8006c9c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2200      	movs	r2, #0
 8006c92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	40020050 	.word	0x40020050
 8006cb4:	50020050 	.word	0x50020050
 8006cb8:	400200d0 	.word	0x400200d0
 8006cbc:	500200d0 	.word	0x500200d0
 8006cc0:	40020150 	.word	0x40020150
 8006cc4:	50020150 	.word	0x50020150
 8006cc8:	400201d0 	.word	0x400201d0
 8006ccc:	500201d0 	.word	0x500201d0
 8006cd0:	40020250 	.word	0x40020250
 8006cd4:	50020250 	.word	0x50020250
 8006cd8:	400202d0 	.word	0x400202d0
 8006cdc:	500202d0 	.word	0x500202d0
 8006ce0:	40020350 	.word	0x40020350
 8006ce4:	50020350 	.word	0x50020350
 8006ce8:	400203d0 	.word	0x400203d0
 8006cec:	500203d0 	.word	0x500203d0
 8006cf0:	40020450 	.word	0x40020450
 8006cf4:	50020450 	.word	0x50020450
 8006cf8:	400204d0 	.word	0x400204d0
 8006cfc:	500204d0 	.word	0x500204d0
 8006d00:	40020550 	.word	0x40020550
 8006d04:	50020550 	.word	0x50020550
 8006d08:	400205d0 	.word	0x400205d0
 8006d0c:	500205d0 	.word	0x500205d0
 8006d10:	40020650 	.word	0x40020650
 8006d14:	50020650 	.word	0x50020650
 8006d18:	400206d0 	.word	0x400206d0
 8006d1c:	500206d0 	.word	0x500206d0
 8006d20:	40020750 	.word	0x40020750
 8006d24:	50020750 	.word	0x50020750
 8006d28:	400207d0 	.word	0x400207d0
 8006d2c:	500207d0 	.word	0x500207d0

08006d30 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d42:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d48:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d4e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006d54:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d017      	beq.n	8006d96 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d72:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	051b      	lsls	r3, r3, #20
 8006d7c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006d80:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	3b01      	subs	r3, #1
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006d8e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006d90:	431a      	orrs	r2, r3
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6859      	ldr	r1, [r3, #4]
 8006d9e:	f240 237f 	movw	r3, #639	@ 0x27f
 8006da2:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006da4:	431a      	orrs	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db2:	d10c      	bne.n	8006dce <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d011      	beq.n	8006de4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	605a      	str	r2, [r3, #4]
 8006dcc:	e00a      	b.n	8006de4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd6:	d105      	bne.n	8006de4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00f      	beq.n	8006e0c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e04:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e06:	431a      	orrs	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d04e      	beq.n	8006ec0 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	0419      	lsls	r1, r3, #16
 8006e2e:	4b67      	ldr	r3, [pc, #412]	@ (8006fcc <DMA_List_BuildNode+0x29c>)
 8006e30:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e32:	431a      	orrs	r2, r3
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da06      	bge.n	8006e4e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	609a      	str	r2, [r3, #8]
 8006e4c:	e005      	b.n	8006e5a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	da06      	bge.n	8006e70 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	609a      	str	r2, [r3, #8]
 8006e6e:	e005      	b.n	8006e7c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	da06      	bge.n	8006e92 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	609a      	str	r2, [r3, #8]
 8006e90:	e005      	b.n	8006e9e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da06      	bge.n	8006eb4 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	609a      	str	r2, [r3, #8]
 8006eb2:	e005      	b.n	8006ec0 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d059      	beq.n	8006f90 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	da09      	bge.n	8006ef8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee8:	425b      	negs	r3, r3
 8006eea:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	615a      	str	r2, [r3, #20]
 8006ef6:	e005      	b.n	8006f04 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006efc:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da0d      	bge.n	8006f28 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f10:	425b      	negs	r3, r3
 8006f12:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	695a      	ldr	r2, [r3, #20]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	0419      	lsls	r1, r3, #16
 8006f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8006fd0 <DMA_List_BuildNode+0x2a0>)
 8006f1e:	400b      	ands	r3, r1
 8006f20:	431a      	orrs	r2, r3
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	615a      	str	r2, [r3, #20]
 8006f26:	e009      	b.n	8006f3c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f30:	0419      	lsls	r1, r3, #16
 8006f32:	4b27      	ldr	r3, [pc, #156]	@ (8006fd0 <DMA_List_BuildNode+0x2a0>)
 8006f34:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f36:	431a      	orrs	r2, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da08      	bge.n	8006f56 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f48:	425b      	negs	r3, r3
 8006f4a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	619a      	str	r2, [r3, #24]
 8006f54:	e004      	b.n	8006f60 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da0b      	bge.n	8006f80 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f6c:	425b      	negs	r3, r3
 8006f6e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	619a      	str	r2, [r3, #24]
 8006f7e:	e007      	b.n	8006f90 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f88:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d006      	beq.n	8006fb2 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006fb0:	e005      	b.n	8006fbe <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	621a      	str	r2, [r3, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	07ff0000 	.word	0x07ff0000
 8006fd0:	1fff0000 	.word	0x1fff0000

08006fd4 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0208 	and.w	r2, r3, #8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0203 	and.w	r2, r3, #3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007022:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 800702c:	0d1b      	lsrs	r3, r3, #20
 800702e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007032:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	4b66      	ldr	r3, [pc, #408]	@ (80071e4 <DMA_List_GetNodeConfig+0x210>)
 800704a:	4013      	ands	r3, r2
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800706e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	e013      	b.n	80070a2 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800708e:	2b00      	cmp	r3, #0
 8007090:	d004      	beq.n	800709c <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007098:	60da      	str	r2, [r3, #12]
 800709a:	e002      	b.n	80070a2 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d008      	beq.n	8007108 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007100:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007106:	e002      	b.n	800710e <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	691a      	ldr	r2, [r3, #16]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d04a      	beq.n	80071c0 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007134:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8007136:	89fa      	ldrh	r2, [r7, #14]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	0c1b      	lsrs	r3, r3, #16
 8007142:	b29b      	uxth	r3, r3
 8007144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007148:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800714a:	89fa      	ldrh	r2, [r7, #14]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007160:	425a      	negs	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007176:	425a      	negs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007182:	89fa      	ldrh	r2, [r7, #14]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007190:	89fa      	ldrh	r2, [r7, #14]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a6:	425a      	negs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	da11      	bge.n	80071d8 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b8:	425a      	negs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80071be:	e00b      	b.n	80071d8 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80071d8:	bf00      	nop
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	0c002000 	.word	0x0c002000

080071e8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	0c1b      	lsrs	r3, r3, #16
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e00a      	b.n	800722a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	e004      	b.n	800722a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	0c1b      	lsrs	r3, r3, #16
 800722e:	041b      	lsls	r3, r3, #16
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	429a      	cmp	r2, r3
 8007234:	d001      	beq.n	800723a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	371c      	adds	r7, #28
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e00e      	b.n	8007286 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e006      	b.n	8007286 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	429a      	cmp	r2, r3
 8007296:	d001      	beq.n	800729c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007298:	2302      	movs	r3, #2
 800729a:	e00b      	b.n	80072b4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d001      	beq.n	80072b2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e000      	b.n	80072b4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007318 <DMA_List_GetCLLRNodeInfo+0x58>)
 80072e2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00f      	beq.n	800730a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2207      	movs	r2, #7
 80072ee:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80072f0:	e00b      	b.n	800730a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4a08      	ldr	r2, [pc, #32]	@ (800731c <DMA_List_GetCLLRNodeInfo+0x5c>)
 80072fc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2205      	movs	r2, #5
 8007308:	601a      	str	r2, [r3, #0]
}
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	fe010000 	.word	0xfe010000
 800731c:	f8010000 	.word	0xf8010000

08007320 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007320:	b480      	push	{r7}
 8007322:	b089      	sub	sp, #36	@ 0x24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d142      	bne.n	80073ca <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007344:	e01d      	b.n	8007382 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d107      	bne.n	800735c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007356:	4013      	ands	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	e00f      	b.n	800737c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	4413      	add	r3, r2
 800736c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007374:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007378:	4013      	ands	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	3301      	adds	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	429a      	cmp	r2, r3
 800738a:	d3dc      	bcc.n	8007346 <DMA_List_FindNode+0x26>
 800738c:	e029      	b.n	80073e2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d107      	bne.n	80073a4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800739e:	4013      	ands	r3, r2
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	e00f      	b.n	80073c4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	4413      	add	r3, r2
 80073b4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073bc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073c0:	4013      	ands	r3, r2
 80073c2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	3301      	adds	r3, #1
 80073c8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d206      	bcs.n	80073e2 <DMA_List_FindNode+0xc2>
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073da:	4013      	ands	r3, r2
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d1d5      	bne.n	800738e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d008      	beq.n	80073fa <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073ee:	4013      	ands	r3, r2
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d001      	beq.n	80073fa <DMA_List_FindNode+0xda>
    {
      return 1U;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e02b      	b.n	8007452 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69fa      	ldr	r2, [r7, #28]
 80073fe:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	0c1b      	lsrs	r3, r3, #16
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	461a      	mov	r2, r3
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00f      	beq.n	8007450 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	461a      	mov	r2, r3
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007440:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	041b      	lsls	r3, r3, #16
 800744a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3724      	adds	r7, #36	@ 0x24
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
	...

08007460 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007460:	b480      	push	{r7}
 8007462:	b089      	sub	sp, #36	@ 0x24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007472:	e1ba      	b.n	80077ea <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	2101      	movs	r1, #1
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	fa01 f303 	lsl.w	r3, r1, r3
 8007480:	4013      	ands	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 81aa 	beq.w	80077e4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a55      	ldr	r2, [pc, #340]	@ (80075e8 <HAL_GPIO_Init+0x188>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d15d      	bne.n	8007554 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800749e:	2201      	movs	r2, #1
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	43db      	mvns	r3, r3
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	4013      	ands	r3, r2
 80074ac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f003 0201 	and.w	r2, r3, #1
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	4313      	orrs	r3, r2
 80074c0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80074c8:	4a48      	ldr	r2, [pc, #288]	@ (80075ec <HAL_GPIO_Init+0x18c>)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074d0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80074d2:	4a46      	ldr	r2, [pc, #280]	@ (80075ec <HAL_GPIO_Init+0x18c>)
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	08da      	lsrs	r2, r3, #3
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	3208      	adds	r2, #8
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	220f      	movs	r2, #15
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	43db      	mvns	r3, r3
 80074fc:	69fa      	ldr	r2, [r7, #28]
 80074fe:	4013      	ands	r3, r2
 8007500:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	220b      	movs	r2, #11
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	4313      	orrs	r3, r2
 8007514:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	08da      	lsrs	r2, r3, #3
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	3208      	adds	r2, #8
 800751e:	69f9      	ldr	r1, [r7, #28]
 8007520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	2203      	movs	r2, #3
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	43db      	mvns	r3, r3
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	4013      	ands	r3, r2
 800753a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	2202      	movs	r2, #2
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	4313      	orrs	r3, r2
 800754a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	e067      	b.n	8007624 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2b02      	cmp	r3, #2
 800755a:	d003      	beq.n	8007564 <HAL_GPIO_Init+0x104>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b12      	cmp	r3, #18
 8007562:	d145      	bne.n	80075f0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	08da      	lsrs	r2, r3, #3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3208      	adds	r2, #8
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f003 0307 	and.w	r3, r3, #7
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	220f      	movs	r2, #15
 800757c:	fa02 f303 	lsl.w	r3, r2, r3
 8007580:	43db      	mvns	r3, r3
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	4013      	ands	r3, r2
 8007586:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f003 020f 	and.w	r2, r3, #15
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	4313      	orrs	r3, r2
 80075a0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	08da      	lsrs	r2, r3, #3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3208      	adds	r2, #8
 80075aa:	69f9      	ldr	r1, [r7, #28]
 80075ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	2203      	movs	r2, #3
 80075bc:	fa02 f303 	lsl.w	r3, r2, r3
 80075c0:	43db      	mvns	r3, r3
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	4013      	ands	r3, r2
 80075c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f003 0203 	and.w	r2, r3, #3
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	fa02 f303 	lsl.w	r3, r2, r3
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	4313      	orrs	r3, r2
 80075dc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e01e      	b.n	8007624 <HAL_GPIO_Init+0x1c4>
 80075e6:	bf00      	nop
 80075e8:	46020000 	.word	0x46020000
 80075ec:	08011390 	.word	0x08011390
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	2203      	movs	r2, #3
 80075fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007600:	43db      	mvns	r3, r3
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	4013      	ands	r3, r2
 8007606:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f003 0203 	and.w	r2, r3, #3
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	fa02 f303 	lsl.w	r3, r2, r3
 8007618:	69fa      	ldr	r2, [r7, #28]
 800761a:	4313      	orrs	r3, r2
 800761c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d00b      	beq.n	8007644 <HAL_GPIO_Init+0x1e4>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d007      	beq.n	8007644 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007638:	2b11      	cmp	r3, #17
 800763a:	d003      	beq.n	8007644 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b12      	cmp	r3, #18
 8007642:	d130      	bne.n	80076a6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	2203      	movs	r2, #3
 8007650:	fa02 f303 	lsl.w	r3, r2, r3
 8007654:	43db      	mvns	r3, r3
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	4013      	ands	r3, r2
 800765a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	4313      	orrs	r3, r2
 800766c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800767a:	2201      	movs	r2, #1
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	fa02 f303 	lsl.w	r3, r2, r3
 8007682:	43db      	mvns	r3, r3
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	4013      	ands	r3, r2
 8007688:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	091b      	lsrs	r3, r3, #4
 8007690:	f003 0201 	and.w	r2, r3, #1
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	4313      	orrs	r3, r2
 800769e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d017      	beq.n	80076de <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	2203      	movs	r2, #3
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43db      	mvns	r3, r3
 80076c0:	69fa      	ldr	r2, [r7, #28]
 80076c2:	4013      	ands	r3, r2
 80076c4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	fa02 f303 	lsl.w	r3, r2, r3
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d07c      	beq.n	80077e4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80076ea:	4a47      	ldr	r2, [pc, #284]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	089b      	lsrs	r3, r3, #2
 80076f0:	3318      	adds	r3, #24
 80076f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	220f      	movs	r2, #15
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	43db      	mvns	r3, r3
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	4013      	ands	r3, r2
 800770c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	0a9a      	lsrs	r2, r3, #10
 8007712:	4b3e      	ldr	r3, [pc, #248]	@ (800780c <HAL_GPIO_Init+0x3ac>)
 8007714:	4013      	ands	r3, r2
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	f002 0203 	and.w	r2, r2, #3
 800771c:	00d2      	lsls	r2, r2, #3
 800771e:	4093      	lsls	r3, r2
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	4313      	orrs	r3, r2
 8007724:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007726:	4938      	ldr	r1, [pc, #224]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	089b      	lsrs	r3, r3, #2
 800772c:	3318      	adds	r3, #24
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007734:	4b34      	ldr	r3, [pc, #208]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	43db      	mvns	r3, r3
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	4013      	ands	r3, r2
 8007742:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4313      	orrs	r3, r2
 8007756:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007758:	4a2b      	ldr	r2, [pc, #172]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800775e:	4b2a      	ldr	r3, [pc, #168]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	43db      	mvns	r3, r3
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	4013      	ands	r3, r2
 800776c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007782:	4a21      	ldr	r2, [pc, #132]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007788:	4b1f      	ldr	r3, [pc, #124]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 800778a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800778e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	43db      	mvns	r3, r3
 8007794:	69fa      	ldr	r2, [r7, #28]
 8007796:	4013      	ands	r3, r2
 8007798:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80077ae:	4a16      	ldr	r2, [pc, #88]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80077b6:	4b14      	ldr	r3, [pc, #80]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 80077b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	43db      	mvns	r3, r3
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	4013      	ands	r3, r2
 80077c6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80077d4:	69fa      	ldr	r2, [r7, #28]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4313      	orrs	r3, r2
 80077da:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80077dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007808 <HAL_GPIO_Init+0x3a8>)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	3301      	adds	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f47f ae3d 	bne.w	8007474 <HAL_GPIO_Init+0x14>
  }
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	3724      	adds	r7, #36	@ 0x24
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	46022000 	.word	0x46022000
 800780c:	002f7f7f 	.word	0x002f7f7f

08007810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	807b      	strh	r3, [r7, #2]
 800781c:	4613      	mov	r3, r2
 800781e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007820:	787b      	ldrb	r3, [r7, #1]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007826:	887a      	ldrh	r2, [r7, #2]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800782c:	e002      	b.n	8007834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800782e:	887a      	ldrh	r2, [r7, #2]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800784a:	4b0f      	ldr	r3, [pc, #60]	@ (8007888 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	88fb      	ldrh	r3, [r7, #6]
 8007850:	4013      	ands	r3, r2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d006      	beq.n	8007864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007856:	4a0c      	ldr	r2, [pc, #48]	@ (8007888 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	4618      	mov	r0, r3
 8007860:	f000 f814 	bl	800788c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007864:	4b08      	ldr	r3, [pc, #32]	@ (8007888 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007866:	691a      	ldr	r2, [r3, #16]
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	4013      	ands	r3, r2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d006      	beq.n	800787e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007870:	4a05      	ldr	r2, [pc, #20]	@ (8007888 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007872:	88fb      	ldrh	r3, [r7, #6]
 8007874:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f812 	bl	80078a2 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	46022000 	.word	0x46022000

0800788c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	4603      	mov	r3, r0
 80078aa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e08d      	b.n	80079e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fa fa1e 	bl	8001d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2224      	movs	r2, #36	@ 0x24
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0201 	bic.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007908:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007918:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d107      	bne.n	8007932 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800792e:	609a      	str	r2, [r3, #8]
 8007930:	e006      	b.n	8007940 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800793e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d108      	bne.n	800795a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	e007      	b.n	800796a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007968:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800797c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800798c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69d9      	ldr	r1, [r3, #28]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1a      	ldr	r2, [r3, #32]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0201 	orr.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	68f9      	ldr	r1, [r7, #12]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00f      	beq.n	8007a64 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a52:	f043 0201 	orr.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a62:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00f      	beq.n	8007a8e <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a7c:	f043 0208 	orr.w	r2, r3, #8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a8c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00f      	beq.n	8007ab8 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa6:	f043 0202 	orr.w	r2, r3, #2
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ab6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007abc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f003 030b 	and.w	r3, r3, #11
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fbe8 	bl	80082a0 <I2C_ITError>
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <I2C_Slave_ISR_IT+0x24>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e0e2      	b.n	8007d42 <I2C_Slave_ISR_IT+0x1ea>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007b98:	6939      	ldr	r1, [r7, #16]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f9b6 	bl	8007f0c <I2C_ITSlaveCplt>
 8007ba0:	e0ca      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f003 0310 	and.w	r3, r3, #16
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d04b      	beq.n	8007c44 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d046      	beq.n	8007c44 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d128      	bne.n	8007c12 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b28      	cmp	r3, #40	@ 0x28
 8007bca:	d108      	bne.n	8007bde <I2C_Slave_ISR_IT+0x86>
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bd2:	d104      	bne.n	8007bde <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007bd4:	6939      	ldr	r1, [r7, #16]
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 fb0e 	bl	80081f8 <I2C_ITListenCplt>
 8007bdc:	e031      	b.n	8007c42 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b29      	cmp	r3, #41	@ 0x29
 8007be8:	d10e      	bne.n	8007c08 <I2C_Slave_ISR_IT+0xb0>
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007bf0:	d00a      	beq.n	8007c08 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fc67 	bl	80084ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f926 	bl	8007e52 <I2C_ITSlaveSeqCplt>
 8007c06:	e01c      	b.n	8007c42 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2210      	movs	r2, #16
 8007c0e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007c10:	e08f      	b.n	8007d32 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2210      	movs	r2, #16
 8007c18:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1e:	f043 0204 	orr.w	r2, r3, #4
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <I2C_Slave_ISR_IT+0xdc>
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c32:	d17e      	bne.n	8007d32 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c38:	4619      	mov	r1, r3
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 fb30 	bl	80082a0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007c40:	e077      	b.n	8007d32 <I2C_Slave_ISR_IT+0x1da>
 8007c42:	e076      	b.n	8007d32 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d02f      	beq.n	8007cae <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d02a      	beq.n	8007cae <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d018      	beq.n	8007c94 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d14b      	bne.n	8007d36 <I2C_Slave_ISR_IT+0x1de>
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ca4:	d047      	beq.n	8007d36 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 f8d3 	bl	8007e52 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007cac:	e043      	b.n	8007d36 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d009      	beq.n	8007ccc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007cc2:	6939      	ldr	r1, [r7, #16]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f840 	bl	8007d4a <I2C_ITAddrCplt>
 8007cca:	e035      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d030      	beq.n	8007d38 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d02b      	beq.n	8007d38 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d018      	beq.n	8007d1c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d12:	3b01      	subs	r3, #1
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007d1a:	e00d      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d22:	d002      	beq.n	8007d2a <I2C_Slave_ISR_IT+0x1d2>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f891 	bl	8007e52 <I2C_ITSlaveSeqCplt>
 8007d30:	e002      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007d32:	bf00      	nop
 8007d34:	e000      	b.n	8007d38 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007d36:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d60:	2b28      	cmp	r3, #40	@ 0x28
 8007d62:	d16a      	bne.n	8007e3a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	0c1b      	lsrs	r3, r3, #16
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	0c1b      	lsrs	r3, r3, #16
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007d82:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d90:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007d9e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d138      	bne.n	8007e1a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007da8:	897b      	ldrh	r3, [r7, #10]
 8007daa:	09db      	lsrs	r3, r3, #7
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	89bb      	ldrh	r3, [r7, #12]
 8007db0:	4053      	eors	r3, r2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f003 0306 	and.w	r3, r3, #6
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d11c      	bne.n	8007df6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007dbc:	897b      	ldrh	r3, [r7, #10]
 8007dbe:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d13b      	bne.n	8007e4a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2208      	movs	r2, #8
 8007dde:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007de8:	89ba      	ldrh	r2, [r7, #12]
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fe86 	bl	8007b00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007df4:	e029      	b.n	8007e4a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007df6:	893b      	ldrh	r3, [r7, #8]
 8007df8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fba7 	bl	8008552 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e0c:	89ba      	ldrh	r2, [r7, #12]
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff fe74 	bl	8007b00 <HAL_I2C_AddrCallback>
}
 8007e18:	e017      	b.n	8007e4a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fb97 	bl	8008552 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e2c:	89ba      	ldrh	r2, [r7, #12]
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff fe64 	bl	8007b00 <HAL_I2C_AddrCallback>
}
 8007e38:	e007      	b.n	8007e4a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2208      	movs	r2, #8
 8007e40:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d008      	beq.n	8007e86 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e00c      	b.n	8007ea0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d007      	beq.n	8007ea0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b29      	cmp	r3, #41	@ 0x29
 8007eaa:	d112      	bne.n	8007ed2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2228      	movs	r2, #40	@ 0x28
 8007eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2221      	movs	r2, #33	@ 0x21
 8007eb8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007eba:	2101      	movs	r1, #1
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fb48 	bl	8008552 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff fe04 	bl	8007ad8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ed0:	e017      	b.n	8007f02 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8007edc:	d111      	bne.n	8007f02 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2228      	movs	r2, #40	@ 0x28
 8007ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2222      	movs	r2, #34	@ 0x22
 8007eea:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007eec:	2102      	movs	r1, #2
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fb2f 	bl	8008552 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff fdf5 	bl	8007aec <HAL_I2C_SlaveRxCpltCallback>
}
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f0c:	b590      	push	{r4, r7, lr}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f26:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f2e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2220      	movs	r2, #32
 8007f36:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	2b21      	cmp	r3, #33	@ 0x21
 8007f3c:	d002      	beq.n	8007f44 <I2C_ITSlaveCplt+0x38>
 8007f3e:	7afb      	ldrb	r3, [r7, #11]
 8007f40:	2b29      	cmp	r3, #41	@ 0x29
 8007f42:	d108      	bne.n	8007f56 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007f44:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fb02 	bl	8008552 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2221      	movs	r2, #33	@ 0x21
 8007f52:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f54:	e019      	b.n	8007f8a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f56:	7afb      	ldrb	r3, [r7, #11]
 8007f58:	2b22      	cmp	r3, #34	@ 0x22
 8007f5a:	d002      	beq.n	8007f62 <I2C_ITSlaveCplt+0x56>
 8007f5c:	7afb      	ldrb	r3, [r7, #11]
 8007f5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f60:	d108      	bne.n	8007f74 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007f62:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 faf3 	bl	8008552 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2222      	movs	r2, #34	@ 0x22
 8007f70:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f72:	e00a      	b.n	8007f8a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007f74:	7afb      	ldrb	r3, [r7, #11]
 8007f76:	2b28      	cmp	r3, #40	@ 0x28
 8007f78:	d107      	bne.n	8007f8a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007f7a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fae7 	bl	8008552 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f98:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6859      	ldr	r1, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b92      	ldr	r3, [pc, #584]	@ (80081f0 <I2C_ITSlaveCplt+0x2e4>)
 8007fa6:	400b      	ands	r3, r1
 8007fa8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa8f 	bl	80084ce <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d01c      	beq.n	8007ff4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007fc8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d031      	beq.n	8008036 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fda:	b29c      	uxth	r4, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fd3d 	bl	8006a60 <HAL_DMAEx_GetFifoLevel>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4423      	add	r3, r4
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ff2:	e020      	b.n	8008036 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01b      	beq.n	8008036 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800800c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00f      	beq.n	8008036 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800801e:	b29c      	uxth	r4, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fd1b 	bl	8006a60 <HAL_DMAEx_GetFifoLevel>
 800802a:	4603      	mov	r3, r0
 800802c:	b29b      	uxth	r3, r3
 800802e:	4423      	add	r3, r4
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d020      	beq.n	8008082 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f023 0304 	bic.w	r3, r3, #4
 8008046:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008052:	b2d2      	uxtb	r2, r2
 8008054:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00c      	beq.n	8008082 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800806c:	3b01      	subs	r3, #1
 800806e:	b29a      	uxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b29a      	uxth	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008086:	b29b      	uxth	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008090:	f043 0204 	orr.w	r2, r3, #4
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f003 0310 	and.w	r3, r3, #16
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d049      	beq.n	8008136 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d044      	beq.n	8008136 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d128      	bne.n	8008108 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b28      	cmp	r3, #40	@ 0x28
 80080c0:	d108      	bne.n	80080d4 <I2C_ITSlaveCplt+0x1c8>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080c8:	d104      	bne.n	80080d4 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80080ca:	6979      	ldr	r1, [r7, #20]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f893 	bl	80081f8 <I2C_ITListenCplt>
 80080d2:	e030      	b.n	8008136 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b29      	cmp	r3, #41	@ 0x29
 80080de:	d10e      	bne.n	80080fe <I2C_ITSlaveCplt+0x1f2>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80080e6:	d00a      	beq.n	80080fe <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2210      	movs	r2, #16
 80080ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f9ec 	bl	80084ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff feab 	bl	8007e52 <I2C_ITSlaveSeqCplt>
 80080fc:	e01b      	b.n	8008136 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2210      	movs	r2, #16
 8008104:	61da      	str	r2, [r3, #28]
 8008106:	e016      	b.n	8008136 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2210      	movs	r2, #16
 800810e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008114:	f043 0204 	orr.w	r2, r3, #4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <I2C_ITSlaveCplt+0x21e>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008128:	d105      	bne.n	8008136 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f8b5 	bl	80082a0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008148:	2b00      	cmp	r3, #0
 800814a:	d010      	beq.n	800816e <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f8a4 	bl	80082a0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b28      	cmp	r3, #40	@ 0x28
 8008162:	d141      	bne.n	80081e8 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008164:	6979      	ldr	r1, [r7, #20]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f846 	bl	80081f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800816c:	e03c      	b.n	80081e8 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008172:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008176:	d014      	beq.n	80081a2 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff fe6a 	bl	8007e52 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a1c      	ldr	r2, [pc, #112]	@ (80081f4 <I2C_ITSlaveCplt+0x2e8>)
 8008182:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff fcbe 	bl	8007b1c <HAL_I2C_ListenCpltCallback>
}
 80081a0:	e022      	b.n	80081e8 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b22      	cmp	r3, #34	@ 0x22
 80081ac:	d10e      	bne.n	80081cc <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff fc91 	bl	8007aec <HAL_I2C_SlaveRxCpltCallback>
}
 80081ca:	e00d      	b.n	80081e8 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff fc78 	bl	8007ad8 <HAL_I2C_SlaveTxCpltCallback>
}
 80081e8:	bf00      	nop
 80081ea:	371c      	adds	r7, #28
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd90      	pop	{r4, r7, pc}
 80081f0:	fe00e800 	.word	0xfe00e800
 80081f4:	ffff0000 	.word	0xffff0000

080081f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a25      	ldr	r2, [pc, #148]	@ (800829c <I2C_ITListenCplt+0xa4>)
 8008206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d022      	beq.n	8008274 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800824a:	2b00      	cmp	r3, #0
 800824c:	d012      	beq.n	8008274 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008252:	3b01      	subs	r3, #1
 8008254:	b29a      	uxth	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800825e:	b29b      	uxth	r3, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800826c:	f043 0204 	orr.w	r2, r3, #4
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008274:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f96a 	bl	8008552 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2210      	movs	r2, #16
 8008284:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff fc44 	bl	8007b1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	ffff0000 	.word	0xffff0000

080082a0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b0:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a6d      	ldr	r2, [pc, #436]	@ (8008474 <I2C_ITError+0x1d4>)
 80082be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	2b28      	cmp	r3, #40	@ 0x28
 80082d6:	d005      	beq.n	80082e4 <I2C_ITError+0x44>
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	2b29      	cmp	r3, #41	@ 0x29
 80082dc:	d002      	beq.n	80082e4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e2:	d10b      	bne.n	80082fc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80082e4:	2103      	movs	r1, #3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f933 	bl	8008552 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2228      	movs	r2, #40	@ 0x28
 80082f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a60      	ldr	r2, [pc, #384]	@ (8008478 <I2C_ITError+0x1d8>)
 80082f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80082fa:	e030      	b.n	800835e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80082fc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f926 	bl	8008552 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f8e1 	bl	80084ce <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b60      	cmp	r3, #96	@ 0x60
 8008316:	d01f      	beq.n	8008358 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2220      	movs	r2, #32
 800831c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b20      	cmp	r3, #32
 800832c:	d114      	bne.n	8008358 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b10      	cmp	r3, #16
 800833a:	d109      	bne.n	8008350 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2210      	movs	r2, #16
 8008342:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008348:	f043 0204 	orr.w	r2, r3, #4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2220      	movs	r2, #32
 8008356:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008362:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008368:	2b00      	cmp	r3, #0
 800836a:	d039      	beq.n	80083e0 <I2C_ITError+0x140>
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b11      	cmp	r3, #17
 8008370:	d002      	beq.n	8008378 <I2C_ITError+0xd8>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b21      	cmp	r3, #33	@ 0x21
 8008376:	d133      	bne.n	80083e0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008386:	d107      	bne.n	8008398 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008396:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839c:	4618      	mov	r0, r3
 800839e:	f7fd fbb3 	bl	8005b08 <HAL_DMA_GetState>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d017      	beq.n	80083d8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ac:	4a33      	ldr	r2, [pc, #204]	@ (800847c <I2C_ITError+0x1dc>)
 80083ae:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fd fa19 	bl	80057f4 <HAL_DMA_Abort_IT>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d04d      	beq.n	8008464 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80083d2:	4610      	mov	r0, r2
 80083d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083d6:	e045      	b.n	8008464 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f851 	bl	8008480 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083de:	e041      	b.n	8008464 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d039      	beq.n	800845c <I2C_ITError+0x1bc>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b12      	cmp	r3, #18
 80083ec:	d002      	beq.n	80083f4 <I2C_ITError+0x154>
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b22      	cmp	r3, #34	@ 0x22
 80083f2:	d133      	bne.n	800845c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008402:	d107      	bne.n	8008414 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008412:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008418:	4618      	mov	r0, r3
 800841a:	f7fd fb75 	bl	8005b08 <HAL_DMA_GetState>
 800841e:	4603      	mov	r3, r0
 8008420:	2b01      	cmp	r3, #1
 8008422:	d017      	beq.n	8008454 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008428:	4a14      	ldr	r2, [pc, #80]	@ (800847c <I2C_ITError+0x1dc>)
 800842a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008438:	4618      	mov	r0, r3
 800843a:	f7fd f9db 	bl	80057f4 <HAL_DMA_Abort_IT>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d011      	beq.n	8008468 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800844e:	4610      	mov	r0, r2
 8008450:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008452:	e009      	b.n	8008468 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f813 	bl	8008480 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800845a:	e005      	b.n	8008468 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f80f 	bl	8008480 <I2C_TreatErrorCallback>
  }
}
 8008462:	e002      	b.n	800846a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008464:	bf00      	nop
 8008466:	e000      	b.n	800846a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008468:	bf00      	nop
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	ffff0000 	.word	0xffff0000
 8008478:	08007b59 	.word	0x08007b59
 800847c:	08008517 	.word	0x08008517

08008480 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b60      	cmp	r3, #96	@ 0x60
 8008492:	d10e      	bne.n	80084b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff fb4a 	bl	8007b44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084b0:	e009      	b.n	80084c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff fb35 	bl	8007b30 <HAL_I2C_ErrorCallback>
}
 80084c6:	bf00      	nop
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d103      	bne.n	80084ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2200      	movs	r2, #0
 80084ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d007      	beq.n	800850a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	699a      	ldr	r2, [r3, #24]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0201 	orr.w	r2, r2, #1
 8008508:	619a      	str	r2, [r3, #24]
  }
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008522:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008530:	2200      	movs	r2, #0
 8008532:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008540:	2200      	movs	r2, #0
 8008542:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff ff9b 	bl	8008480 <I2C_TreatErrorCallback>
}
 800854a:	bf00      	nop
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008552:	b480      	push	{r7}
 8008554:	b085      	sub	sp, #20
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	460b      	mov	r3, r1
 800855c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008562:	887b      	ldrh	r3, [r7, #2]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00f      	beq.n	800858c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008572:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800857a:	b2db      	uxtb	r3, r3
 800857c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008580:	2b28      	cmp	r3, #40	@ 0x28
 8008582:	d003      	beq.n	800858c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800858a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800858c:	887b      	ldrh	r3, [r7, #2]
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00f      	beq.n	80085b6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800859c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085aa:	2b28      	cmp	r3, #40	@ 0x28
 80085ac:	d003      	beq.n	80085b6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80085b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80085b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	da03      	bge.n	80085c6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80085c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80085c6:	887b      	ldrh	r3, [r7, #2]
 80085c8:	2b10      	cmp	r3, #16
 80085ca:	d103      	bne.n	80085d4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80085d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80085d4:	887b      	ldrh	r3, [r7, #2]
 80085d6:	2b20      	cmp	r3, #32
 80085d8:	d103      	bne.n	80085e2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f043 0320 	orr.w	r3, r3, #32
 80085e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80085e2:	887b      	ldrh	r3, [r7, #2]
 80085e4:	2b40      	cmp	r3, #64	@ 0x40
 80085e6:	d103      	bne.n	80085f0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6819      	ldr	r1, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	43da      	mvns	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	400a      	ands	r2, r1
 8008600:	601a      	str	r2, [r3, #0]
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b20      	cmp	r3, #32
 8008622:	d138      	bne.n	8008696 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800862e:	2302      	movs	r3, #2
 8008630:	e032      	b.n	8008698 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2224      	movs	r2, #36	@ 0x24
 800863e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0201 	bic.w	r2, r2, #1
 8008650:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008660:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6819      	ldr	r1, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f042 0201 	orr.w	r2, r2, #1
 8008680:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2220      	movs	r2, #32
 8008686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	e000      	b.n	8008698 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008696:	2302      	movs	r3, #2
  }
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d139      	bne.n	800872e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e033      	b.n	8008730 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2224      	movs	r2, #36	@ 0x24
 80086d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 0201 	bic.w	r2, r2, #1
 80086e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80086f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0201 	orr.w	r2, r2, #1
 8008718:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2220      	movs	r2, #32
 800871e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	e000      	b.n	8008730 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800872e:	2302      	movs	r3, #2
  }
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008748:	4b0b      	ldr	r3, [pc, #44]	@ (8008778 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
 8008758:	e007      	b.n	800876a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800875a:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f023 0204 	bic.w	r2, r3, #4
 8008762:	4905      	ldr	r1, [pc, #20]	@ (8008778 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4313      	orrs	r3, r2
 8008768:	600b      	str	r3, [r1, #0]
  }

  return status;
 800876a:	7bfb      	ldrb	r3, [r7, #15]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	40030400 	.word	0x40030400

0800877c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008780:	4b05      	ldr	r3, [pc, #20]	@ (8008798 <HAL_ICACHE_Enable+0x1c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a04      	ldr	r2, [pc, #16]	@ (8008798 <HAL_ICACHE_Enable+0x1c>)
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	40030400 	.word	0x40030400

0800879c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e0bf      	b.n	800892e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7f9 fb9a 	bl	8001efc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80087de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6999      	ldr	r1, [r3, #24]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80087f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6899      	ldr	r1, [r3, #8]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4b4a      	ldr	r3, [pc, #296]	@ (8008938 <HAL_LTDC_Init+0x19c>)
 8008810:	400b      	ands	r3, r1
 8008812:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	041b      	lsls	r3, r3, #16
 800881a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6899      	ldr	r1, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	431a      	orrs	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68d9      	ldr	r1, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	4b3e      	ldr	r3, [pc, #248]	@ (8008938 <HAL_LTDC_Init+0x19c>)
 800883e:	400b      	ands	r3, r1
 8008840:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	041b      	lsls	r3, r3, #16
 8008848:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68d9      	ldr	r1, [r3, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a1a      	ldr	r2, [r3, #32]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6919      	ldr	r1, [r3, #16]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	4b33      	ldr	r3, [pc, #204]	@ (8008938 <HAL_LTDC_Init+0x19c>)
 800886c:	400b      	ands	r3, r1
 800886e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008874:	041b      	lsls	r3, r3, #16
 8008876:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6919      	ldr	r1, [r3, #16]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6959      	ldr	r1, [r3, #20]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	4b27      	ldr	r3, [pc, #156]	@ (8008938 <HAL_LTDC_Init+0x19c>)
 800889a:	400b      	ands	r3, r1
 800889c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	041b      	lsls	r3, r3, #16
 80088a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6959      	ldr	r1, [r3, #20]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80088cc:	041b      	lsls	r3, r3, #16
 80088ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80088de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0206 	orr.w	r2, r2, #6
 800890a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0201 	orr.w	r2, r2, #1
 800891a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	f000f800 	.word	0xf000f800

0800893c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008952:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 0304 	and.w	r3, r3, #4
 800895a:	2b00      	cmp	r3, #0
 800895c:	d023      	beq.n	80089a6 <HAL_LTDC_IRQHandler+0x6a>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01e      	beq.n	80089a6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0204 	bic.w	r2, r2, #4
 8008976:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2204      	movs	r2, #4
 800897e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008986:	f043 0201 	orr.w	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2204      	movs	r2, #4
 8008994:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f86f 	bl	8008a84 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d023      	beq.n	80089f8 <HAL_LTDC_IRQHandler+0xbc>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d01e      	beq.n	80089f8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0202 	bic.w	r2, r2, #2
 80089c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2202      	movs	r2, #2
 80089d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089d8:	f043 0202 	orr.w	r2, r3, #2
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2204      	movs	r2, #4
 80089e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f846 	bl	8008a84 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01b      	beq.n	8008a3a <HAL_LTDC_IRQHandler+0xfe>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d016      	beq.n	8008a3a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0201 	bic.w	r2, r2, #1
 8008a1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2201      	movs	r2, #1
 8008a22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f82f 	bl	8008a98 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01b      	beq.n	8008a7c <HAL_LTDC_IRQHandler+0x140>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f003 0308 	and.w	r3, r3, #8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d016      	beq.n	8008a7c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 0208 	bic.w	r2, r2, #8
 8008a5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2208      	movs	r2, #8
 8008a64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f818 	bl	8008aac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008ac0:	b5b0      	push	{r4, r5, r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_LTDC_ConfigLayer+0x1a>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e02c      	b.n	8008b34 <HAL_LTDC_ConfigLayer+0x74>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2134      	movs	r1, #52	@ 0x34
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	4413      	add	r3, r2
 8008af6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4614      	mov	r4, r2
 8008afe:	461d      	mov	r5, r3
 8008b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f811 	bl	8008b3c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bdb0      	pop	{r4, r5, r7, pc}

08008b3c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b089      	sub	sp, #36	@ 0x24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	0c1b      	lsrs	r3, r3, #16
 8008b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b58:	4413      	add	r3, r2
 8008b5a:	041b      	lsls	r3, r3, #16
 8008b5c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	01db      	lsls	r3, r3, #7
 8008b68:	4413      	add	r3, r2
 8008b6a:	3384      	adds	r3, #132	@ 0x84
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	4611      	mov	r1, r2
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	01d2      	lsls	r2, r2, #7
 8008b78:	440a      	add	r2, r1
 8008b7a:	3284      	adds	r2, #132	@ 0x84
 8008b7c:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008b80:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	0c1b      	lsrs	r3, r3, #16
 8008b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b92:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b94:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	01db      	lsls	r3, r3, #7
 8008ba0:	440b      	add	r3, r1
 8008ba2:	3384      	adds	r3, #132	@ 0x84
 8008ba4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008baa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bba:	4413      	add	r3, r2
 8008bbc:	041b      	lsls	r3, r3, #16
 8008bbe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	01db      	lsls	r3, r3, #7
 8008bca:	4413      	add	r3, r2
 8008bcc:	3384      	adds	r3, #132	@ 0x84
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	6812      	ldr	r2, [r2, #0]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	01d2      	lsls	r2, r2, #7
 8008bda:	440a      	add	r2, r1
 8008bdc:	3284      	adds	r2, #132	@ 0x84
 8008bde:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008be2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bf2:	4413      	add	r3, r2
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	01db      	lsls	r3, r3, #7
 8008c00:	440b      	add	r3, r1
 8008c02:	3384      	adds	r3, #132	@ 0x84
 8008c04:	4619      	mov	r1, r3
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	461a      	mov	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	01db      	lsls	r3, r3, #7
 8008c16:	4413      	add	r3, r2
 8008c18:	3384      	adds	r3, #132	@ 0x84
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	6812      	ldr	r2, [r2, #0]
 8008c20:	4611      	mov	r1, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	01d2      	lsls	r2, r2, #7
 8008c26:	440a      	add	r2, r1
 8008c28:	3284      	adds	r2, #132	@ 0x84
 8008c2a:	f023 0307 	bic.w	r3, r3, #7
 8008c2e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	01db      	lsls	r3, r3, #7
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3384      	adds	r3, #132	@ 0x84
 8008c3e:	461a      	mov	r2, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008c4c:	021b      	lsls	r3, r3, #8
 8008c4e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008c56:	041b      	lsls	r3, r3, #16
 8008c58:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	061b      	lsls	r3, r3, #24
 8008c60:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c68:	461a      	mov	r2, r3
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	431a      	orrs	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4619      	mov	r1, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	01db      	lsls	r3, r3, #7
 8008c7c:	440b      	add	r3, r1
 8008c7e:	3384      	adds	r3, #132	@ 0x84
 8008c80:	4619      	mov	r1, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	01db      	lsls	r3, r3, #7
 8008c92:	4413      	add	r3, r2
 8008c94:	3384      	adds	r3, #132	@ 0x84
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	6812      	ldr	r2, [r2, #0]
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	01d2      	lsls	r2, r2, #7
 8008ca2:	440a      	add	r2, r1
 8008ca4:	3284      	adds	r2, #132	@ 0x84
 8008ca6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008caa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	01db      	lsls	r3, r3, #7
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3384      	adds	r3, #132	@ 0x84
 8008cba:	461a      	mov	r2, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	01db      	lsls	r3, r3, #7
 8008ccc:	4413      	add	r3, r2
 8008cce:	3384      	adds	r3, #132	@ 0x84
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	6812      	ldr	r2, [r2, #0]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	01d2      	lsls	r2, r2, #7
 8008cdc:	440a      	add	r2, r1
 8008cde:	3284      	adds	r2, #132	@ 0x84
 8008ce0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008ce4:	f023 0307 	bic.w	r3, r3, #7
 8008ce8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	69da      	ldr	r2, [r3, #28]
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	68f9      	ldr	r1, [r7, #12]
 8008cf4:	6809      	ldr	r1, [r1, #0]
 8008cf6:	4608      	mov	r0, r1
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	01c9      	lsls	r1, r1, #7
 8008cfc:	4401      	add	r1, r0
 8008cfe:	3184      	adds	r1, #132	@ 0x84
 8008d00:	4313      	orrs	r3, r2
 8008d02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	01db      	lsls	r3, r3, #7
 8008d0e:	4413      	add	r3, r2
 8008d10:	3384      	adds	r3, #132	@ 0x84
 8008d12:	461a      	mov	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d18:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d102      	bne.n	8008d28 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8008d22:	2304      	movs	r3, #4
 8008d24:	61fb      	str	r3, [r7, #28]
 8008d26:	e01b      	b.n	8008d60 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d102      	bne.n	8008d36 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8008d30:	2303      	movs	r3, #3
 8008d32:	61fb      	str	r3, [r7, #28]
 8008d34:	e014      	b.n	8008d60 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	d00b      	beq.n	8008d56 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d007      	beq.n	8008d56 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d003      	beq.n	8008d56 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008d52:	2b07      	cmp	r3, #7
 8008d54:	d102      	bne.n	8008d5c <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8008d56:	2302      	movs	r3, #2
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	e001      	b.n	8008d60 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	01db      	lsls	r3, r3, #7
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3384      	adds	r3, #132	@ 0x84
 8008d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	6812      	ldr	r2, [r2, #0]
 8008d74:	4611      	mov	r1, r2
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	01d2      	lsls	r2, r2, #7
 8008d7a:	440a      	add	r2, r1
 8008d7c:	3284      	adds	r2, #132	@ 0x84
 8008d7e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008d82:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	fb02 f303 	mul.w	r3, r2, r3
 8008d8e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6859      	ldr	r1, [r3, #4]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	1acb      	subs	r3, r1, r3
 8008d9a:	69f9      	ldr	r1, [r7, #28]
 8008d9c:	fb01 f303 	mul.w	r3, r1, r3
 8008da0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008da2:	68f9      	ldr	r1, [r7, #12]
 8008da4:	6809      	ldr	r1, [r1, #0]
 8008da6:	4608      	mov	r0, r1
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	01c9      	lsls	r1, r1, #7
 8008dac:	4401      	add	r1, r0
 8008dae:	3184      	adds	r1, #132	@ 0x84
 8008db0:	4313      	orrs	r3, r2
 8008db2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	461a      	mov	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	01db      	lsls	r3, r3, #7
 8008dbe:	4413      	add	r3, r2
 8008dc0:	3384      	adds	r3, #132	@ 0x84
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	4611      	mov	r1, r2
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	01d2      	lsls	r2, r2, #7
 8008dce:	440a      	add	r2, r1
 8008dd0:	3284      	adds	r2, #132	@ 0x84
 8008dd2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008dd6:	f023 0307 	bic.w	r3, r3, #7
 8008dda:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	461a      	mov	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	01db      	lsls	r3, r3, #7
 8008de6:	4413      	add	r3, r2
 8008de8:	3384      	adds	r3, #132	@ 0x84
 8008dea:	461a      	mov	r2, r3
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	01db      	lsls	r3, r3, #7
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3384      	adds	r3, #132	@ 0x84
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	6812      	ldr	r2, [r2, #0]
 8008e06:	4611      	mov	r1, r2
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	01d2      	lsls	r2, r2, #7
 8008e0c:	440a      	add	r2, r1
 8008e0e:	3284      	adds	r2, #132	@ 0x84
 8008e10:	f043 0301 	orr.w	r3, r3, #1
 8008e14:	6013      	str	r3, [r2, #0]
}
 8008e16:	bf00      	nop
 8008e18:	3724      	adds	r7, #36	@ 0x24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b086      	sub	sp, #24
 8008e26:	af02      	add	r7, sp, #8
 8008e28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e0fe      	b.n	8009032 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d106      	bne.n	8008e4e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7f9 faf1 	bl	8002430 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2203      	movs	r2, #3
 8008e52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f007 ff8d 	bl	8010d7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	7c1a      	ldrb	r2, [r3, #16]
 8008e68:	f88d 2000 	strb.w	r2, [sp]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e70:	f007 ff54 	bl	8010d1c <USB_CoreInit>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e0d5      	b.n	8009032 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f007 ff85 	bl	8010d9c <USB_SetCurrentMode>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e0c6      	b.n	8009032 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
 8008ea8:	e04a      	b.n	8008f40 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008eaa:	7bfa      	ldrb	r2, [r7, #15]
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3315      	adds	r3, #21
 8008eba:	2201      	movs	r2, #1
 8008ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008ebe:	7bfa      	ldrb	r2, [r7, #15]
 8008ec0:	6879      	ldr	r1, [r7, #4]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	00db      	lsls	r3, r3, #3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	440b      	add	r3, r1
 8008ecc:	3314      	adds	r3, #20
 8008ece:	7bfa      	ldrb	r2, [r7, #15]
 8008ed0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008ed2:	7bfa      	ldrb	r2, [r7, #15]
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	b298      	uxth	r0, r3
 8008ed8:	6879      	ldr	r1, [r7, #4]
 8008eda:	4613      	mov	r3, r2
 8008edc:	00db      	lsls	r3, r3, #3
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	332e      	adds	r3, #46	@ 0x2e
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008eea:	7bfa      	ldrb	r2, [r7, #15]
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	3318      	adds	r3, #24
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008efe:	7bfa      	ldrb	r2, [r7, #15]
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	4613      	mov	r3, r2
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	331c      	adds	r3, #28
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008f12:	7bfa      	ldrb	r2, [r7, #15]
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	4613      	mov	r3, r2
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	440b      	add	r3, r1
 8008f20:	3320      	adds	r3, #32
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008f26:	7bfa      	ldrb	r2, [r7, #15]
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	00db      	lsls	r3, r3, #3
 8008f2e:	4413      	add	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	440b      	add	r3, r1
 8008f34:	3324      	adds	r3, #36	@ 0x24
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	73fb      	strb	r3, [r7, #15]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	791b      	ldrb	r3, [r3, #4]
 8008f44:	7bfa      	ldrb	r2, [r7, #15]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d3af      	bcc.n	8008eaa <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]
 8008f4e:	e044      	b.n	8008fda <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008f50:	7bfa      	ldrb	r2, [r7, #15]
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	4613      	mov	r3, r2
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	440b      	add	r3, r1
 8008f5e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008f66:	7bfa      	ldrb	r2, [r7, #15]
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	440b      	add	r3, r1
 8008f74:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008f78:	7bfa      	ldrb	r2, [r7, #15]
 8008f7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008f7c:	7bfa      	ldrb	r2, [r7, #15]
 8008f7e:	6879      	ldr	r1, [r7, #4]
 8008f80:	4613      	mov	r3, r2
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	4413      	add	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	440b      	add	r3, r1
 8008f8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008f8e:	2200      	movs	r2, #0
 8008f90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008f92:	7bfa      	ldrb	r2, [r7, #15]
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008fa8:	7bfa      	ldrb	r2, [r7, #15]
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	4613      	mov	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	440b      	add	r3, r1
 8008fb6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008fba:	2200      	movs	r2, #0
 8008fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008fbe:	7bfa      	ldrb	r2, [r7, #15]
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	73fb      	strb	r3, [r7, #15]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	791b      	ldrb	r3, [r3, #4]
 8008fde:	7bfa      	ldrb	r2, [r7, #15]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d3b5      	bcc.n	8008f50 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	7c1a      	ldrb	r2, [r3, #16]
 8008fec:	f88d 2000 	strb.w	r2, [sp]
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ff4:	f007 ff1e 	bl	8010e34 <USB_DevInit>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e013      	b.n	8009032 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	7b1b      	ldrb	r3, [r3, #12]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d102      	bne.n	8009026 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f80a 	bl	800903a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4618      	mov	r0, r3
 800902c:	f008 f8eb 	bl	8011206 <USB_DevDisconnect>

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800903a:	b480      	push	{r7}
 800903c:	b085      	sub	sp, #20
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800906c:	f043 0303 	orr.w	r3, r3, #3
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
	...

08009084 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009088:	4b05      	ldr	r3, [pc, #20]	@ (80090a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800908a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908c:	4a04      	ldr	r2, [pc, #16]	@ (80090a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800908e:	f043 0301 	orr.w	r3, r3, #1
 8009092:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009094:	bf00      	nop
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	46020800 	.word	0x46020800

080090a4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80090ac:	4b39      	ldr	r3, [pc, #228]	@ (8009194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090b4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d10b      	bne.n	80090d6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090c4:	d905      	bls.n	80090d2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80090c6:	4b33      	ldr	r3, [pc, #204]	@ (8009194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	4a32      	ldr	r2, [pc, #200]	@ (8009194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090d0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	e057      	b.n	8009186 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090dc:	d90a      	bls.n	80090f4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80090de:	4b2d      	ldr	r3, [pc, #180]	@ (8009194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	4a2a      	ldr	r2, [pc, #168]	@ (8009194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090f0:	60d3      	str	r3, [r2, #12]
 80090f2:	e007      	b.n	8009104 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80090f4:	4b27      	ldr	r3, [pc, #156]	@ (8009194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80090fc:	4925      	ldr	r1, [pc, #148]	@ (8009194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4313      	orrs	r3, r2
 8009102:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009104:	4b24      	ldr	r3, [pc, #144]	@ (8009198 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a24      	ldr	r2, [pc, #144]	@ (800919c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800910a:	fba2 2303 	umull	r2, r3, r2, r3
 800910e:	099b      	lsrs	r3, r3, #6
 8009110:	2232      	movs	r2, #50	@ 0x32
 8009112:	fb02 f303 	mul.w	r3, r2, r3
 8009116:	4a21      	ldr	r2, [pc, #132]	@ (800919c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009118:	fba2 2303 	umull	r2, r3, r2, r3
 800911c:	099b      	lsrs	r3, r3, #6
 800911e:	3301      	adds	r3, #1
 8009120:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009122:	e002      	b.n	800912a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3b01      	subs	r3, #1
 8009128:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800912a:	4b1a      	ldr	r3, [pc, #104]	@ (8009194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d102      	bne.n	800913c <HAL_PWREx_ControlVoltageScaling+0x98>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1f3      	bne.n	8009124 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d01b      	beq.n	800917a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009142:	4b15      	ldr	r3, [pc, #84]	@ (8009198 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a15      	ldr	r2, [pc, #84]	@ (800919c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009148:	fba2 2303 	umull	r2, r3, r2, r3
 800914c:	099b      	lsrs	r3, r3, #6
 800914e:	2232      	movs	r2, #50	@ 0x32
 8009150:	fb02 f303 	mul.w	r3, r2, r3
 8009154:	4a11      	ldr	r2, [pc, #68]	@ (800919c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	099b      	lsrs	r3, r3, #6
 800915c:	3301      	adds	r3, #1
 800915e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009160:	e002      	b.n	8009168 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3b01      	subs	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009168:	4b0a      	ldr	r3, [pc, #40]	@ (8009194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800916a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800916c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d102      	bne.n	800917a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f3      	bne.n	8009162 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e000      	b.n	8009186 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	46020800 	.word	0x46020800
 8009198:	20000000 	.word	0x20000000
 800919c:	10624dd3 	.word	0x10624dd3

080091a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80091a0:	b480      	push	{r7}
 80091a2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80091a4:	4b04      	ldr	r3, [pc, #16]	@ (80091b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80091a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	46020800 	.word	0x46020800

080091bc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80091c4:	4b22      	ldr	r3, [pc, #136]	@ (8009250 <HAL_PWREx_ConfigSupply+0x94>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a22      	ldr	r2, [pc, #136]	@ (8009254 <HAL_PWREx_ConfigSupply+0x98>)
 80091ca:	fba2 2303 	umull	r2, r3, r2, r3
 80091ce:	099b      	lsrs	r3, r3, #6
 80091d0:	2232      	movs	r2, #50	@ 0x32
 80091d2:	fb02 f303 	mul.w	r3, r2, r3
 80091d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009254 <HAL_PWREx_ConfigSupply+0x98>)
 80091d8:	fba2 2303 	umull	r2, r3, r2, r3
 80091dc:	099b      	lsrs	r3, r3, #6
 80091de:	3301      	adds	r3, #1
 80091e0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d113      	bne.n	8009210 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80091e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009258 <HAL_PWREx_ConfigSupply+0x9c>)
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	4a1a      	ldr	r2, [pc, #104]	@ (8009258 <HAL_PWREx_ConfigSupply+0x9c>)
 80091ee:	f023 0302 	bic.w	r3, r3, #2
 80091f2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80091f4:	e002      	b.n	80091fc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80091fc:	4b16      	ldr	r3, [pc, #88]	@ (8009258 <HAL_PWREx_ConfigSupply+0x9c>)
 80091fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b02      	cmp	r3, #2
 8009206:	d116      	bne.n	8009236 <HAL_PWREx_ConfigSupply+0x7a>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1f3      	bne.n	80091f6 <HAL_PWREx_ConfigSupply+0x3a>
 800920e:	e012      	b.n	8009236 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009210:	4b11      	ldr	r3, [pc, #68]	@ (8009258 <HAL_PWREx_ConfigSupply+0x9c>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	4a10      	ldr	r2, [pc, #64]	@ (8009258 <HAL_PWREx_ConfigSupply+0x9c>)
 8009216:	f043 0302 	orr.w	r3, r3, #2
 800921a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800921c:	e002      	b.n	8009224 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3b01      	subs	r3, #1
 8009222:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009224:	4b0c      	ldr	r3, [pc, #48]	@ (8009258 <HAL_PWREx_ConfigSupply+0x9c>)
 8009226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b00      	cmp	r3, #0
 800922e:	d102      	bne.n	8009236 <HAL_PWREx_ConfigSupply+0x7a>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1f3      	bne.n	800921e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e000      	b.n	8009242 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	20000000 	.word	0x20000000
 8009254:	10624dd3 	.word	0x10624dd3
 8009258:	46020800 	.word	0x46020800

0800925c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800925c:	b480      	push	{r7}
 800925e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009260:	4b05      	ldr	r3, [pc, #20]	@ (8009278 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	4a04      	ldr	r2, [pc, #16]	@ (8009278 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800926a:	6113      	str	r3, [r2, #16]
}
 800926c:	bf00      	nop
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	46020800 	.word	0x46020800

0800927c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009280:	4b05      	ldr	r3, [pc, #20]	@ (8009298 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	4a04      	ldr	r2, [pc, #16]	@ (8009298 <HAL_PWREx_EnableVddIO2+0x1c>)
 8009286:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800928a:	6113      	str	r3, [r2, #16]
}
 800928c:	bf00      	nop
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	46020800 	.word	0x46020800

0800929c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80092a0:	4b05      	ldr	r3, [pc, #20]	@ (80092b8 <HAL_PWREx_EnableVddA+0x1c>)
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	4a04      	ldr	r2, [pc, #16]	@ (80092b8 <HAL_PWREx_EnableVddA+0x1c>)
 80092a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092aa:	6113      	str	r3, [r2, #16]
}
 80092ac:	bf00      	nop
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	46020800 	.word	0x46020800

080092bc <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80092c2:	f7ff ff6d 	bl	80091a0 <HAL_PWREx_GetVoltageRange>
 80092c6:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092ce:	d003      	beq.n	80092d8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092d6:	d107      	bne.n	80092e8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80092d8:	4b06      	ldr	r3, [pc, #24]	@ (80092f4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	4a05      	ldr	r2, [pc, #20]	@ (80092f4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80092de:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80092e2:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	46020800 	.word	0x46020800

080092f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08e      	sub	sp, #56	@ 0x38
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009300:	2300      	movs	r3, #0
 8009302:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d102      	bne.n	8009312 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	f000 bec8 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009312:	4b99      	ldr	r3, [pc, #612]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	f003 030c 	and.w	r3, r3, #12
 800931a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800931c:	4b96      	ldr	r3, [pc, #600]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 800931e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009320:	f003 0303 	and.w	r3, r3, #3
 8009324:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0310 	and.w	r3, r3, #16
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 816c 	beq.w	800960c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009336:	2b00      	cmp	r3, #0
 8009338:	d007      	beq.n	800934a <HAL_RCC_OscConfig+0x52>
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	2b0c      	cmp	r3, #12
 800933e:	f040 80de 	bne.w	80094fe <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	2b01      	cmp	r3, #1
 8009346:	f040 80da 	bne.w	80094fe <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d102      	bne.n	8009358 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	f000 bea5 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800935c:	4b86      	ldr	r3, [pc, #536]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d004      	beq.n	8009372 <HAL_RCC_OscConfig+0x7a>
 8009368:	4b83      	ldr	r3, [pc, #524]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009370:	e005      	b.n	800937e <HAL_RCC_OscConfig+0x86>
 8009372:	4b81      	ldr	r3, [pc, #516]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009378:	041b      	lsls	r3, r3, #16
 800937a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800937e:	4293      	cmp	r3, r2
 8009380:	d255      	bcs.n	800942e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938c:	4618      	mov	r0, r3
 800938e:	f001 f9d9 	bl	800a744 <RCC_SetFlashLatencyFromMSIRange>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	f000 be82 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800939e:	4b76      	ldr	r3, [pc, #472]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	4a75      	ldr	r2, [pc, #468]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80093a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80093a8:	6093      	str	r3, [r2, #8]
 80093aa:	4b73      	ldr	r3, [pc, #460]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b6:	4970      	ldr	r1, [pc, #448]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80093b8:	4313      	orrs	r3, r2
 80093ba:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80093c4:	d309      	bcc.n	80093da <HAL_RCC_OscConfig+0xe2>
 80093c6:	4b6c      	ldr	r3, [pc, #432]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f023 021f 	bic.w	r2, r3, #31
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	4969      	ldr	r1, [pc, #420]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60cb      	str	r3, [r1, #12]
 80093d8:	e07e      	b.n	80094d8 <HAL_RCC_OscConfig+0x1e0>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	da0a      	bge.n	80093f8 <HAL_RCC_OscConfig+0x100>
 80093e2:	4b65      	ldr	r3, [pc, #404]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	015b      	lsls	r3, r3, #5
 80093f0:	4961      	ldr	r1, [pc, #388]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60cb      	str	r3, [r1, #12]
 80093f6:	e06f      	b.n	80094d8 <HAL_RCC_OscConfig+0x1e0>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009400:	d30a      	bcc.n	8009418 <HAL_RCC_OscConfig+0x120>
 8009402:	4b5d      	ldr	r3, [pc, #372]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	029b      	lsls	r3, r3, #10
 8009410:	4959      	ldr	r1, [pc, #356]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009412:	4313      	orrs	r3, r2
 8009414:	60cb      	str	r3, [r1, #12]
 8009416:	e05f      	b.n	80094d8 <HAL_RCC_OscConfig+0x1e0>
 8009418:	4b57      	ldr	r3, [pc, #348]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	03db      	lsls	r3, r3, #15
 8009426:	4954      	ldr	r1, [pc, #336]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009428:	4313      	orrs	r3, r2
 800942a:	60cb      	str	r3, [r1, #12]
 800942c:	e054      	b.n	80094d8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800942e:	4b52      	ldr	r3, [pc, #328]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	4a51      	ldr	r2, [pc, #324]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009434:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009438:	6093      	str	r3, [r2, #8]
 800943a:	4b4f      	ldr	r3, [pc, #316]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009446:	494c      	ldr	r1, [pc, #304]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009448:	4313      	orrs	r3, r2
 800944a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009450:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009454:	d309      	bcc.n	800946a <HAL_RCC_OscConfig+0x172>
 8009456:	4b48      	ldr	r3, [pc, #288]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f023 021f 	bic.w	r2, r3, #31
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	4945      	ldr	r1, [pc, #276]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009464:	4313      	orrs	r3, r2
 8009466:	60cb      	str	r3, [r1, #12]
 8009468:	e028      	b.n	80094bc <HAL_RCC_OscConfig+0x1c4>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	da0a      	bge.n	8009488 <HAL_RCC_OscConfig+0x190>
 8009472:	4b41      	ldr	r3, [pc, #260]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	015b      	lsls	r3, r3, #5
 8009480:	493d      	ldr	r1, [pc, #244]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009482:	4313      	orrs	r3, r2
 8009484:	60cb      	str	r3, [r1, #12]
 8009486:	e019      	b.n	80094bc <HAL_RCC_OscConfig+0x1c4>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800948c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009490:	d30a      	bcc.n	80094a8 <HAL_RCC_OscConfig+0x1b0>
 8009492:	4b39      	ldr	r3, [pc, #228]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	029b      	lsls	r3, r3, #10
 80094a0:	4935      	ldr	r1, [pc, #212]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60cb      	str	r3, [r1, #12]
 80094a6:	e009      	b.n	80094bc <HAL_RCC_OscConfig+0x1c4>
 80094a8:	4b33      	ldr	r3, [pc, #204]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	03db      	lsls	r3, r3, #15
 80094b6:	4930      	ldr	r1, [pc, #192]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80094bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10a      	bne.n	80094d8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c6:	4618      	mov	r0, r3
 80094c8:	f001 f93c 	bl	800a744 <RCC_SetFlashLatencyFromMSIRange>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	f000 bde5 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80094d8:	f001 f8de 	bl	800a698 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80094dc:	4b27      	ldr	r3, [pc, #156]	@ (800957c <HAL_RCC_OscConfig+0x284>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7f9 fb29 	bl	8002b38 <HAL_InitTick>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80094ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 808a 	beq.w	800960a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80094f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094fa:	f000 bdd2 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d066      	beq.n	80095d4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009506:	4b1c      	ldr	r3, [pc, #112]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a1b      	ldr	r2, [pc, #108]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 800950c:	f043 0301 	orr.w	r3, r3, #1
 8009510:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009512:	f7f9 fb9b 	bl	8002c4c <HAL_GetTick>
 8009516:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009518:	e009      	b.n	800952e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800951a:	f7f9 fb97 	bl	8002c4c <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d902      	bls.n	800952e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	f000 bdba 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800952e:	4b12      	ldr	r3, [pc, #72]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0304 	and.w	r3, r3, #4
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0ef      	beq.n	800951a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800953a:	4b0f      	ldr	r3, [pc, #60]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	4a0e      	ldr	r2, [pc, #56]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009540:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009544:	6093      	str	r3, [r2, #8]
 8009546:	4b0c      	ldr	r3, [pc, #48]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009552:	4909      	ldr	r1, [pc, #36]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009554:	4313      	orrs	r3, r2
 8009556:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009560:	d30e      	bcc.n	8009580 <HAL_RCC_OscConfig+0x288>
 8009562:	4b05      	ldr	r3, [pc, #20]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f023 021f 	bic.w	r2, r3, #31
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	4902      	ldr	r1, [pc, #8]	@ (8009578 <HAL_RCC_OscConfig+0x280>)
 8009570:	4313      	orrs	r3, r2
 8009572:	60cb      	str	r3, [r1, #12]
 8009574:	e04a      	b.n	800960c <HAL_RCC_OscConfig+0x314>
 8009576:	bf00      	nop
 8009578:	46020c00 	.word	0x46020c00
 800957c:	20000004 	.word	0x20000004
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	da0a      	bge.n	800959e <HAL_RCC_OscConfig+0x2a6>
 8009588:	4b98      	ldr	r3, [pc, #608]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a1b      	ldr	r3, [r3, #32]
 8009594:	015b      	lsls	r3, r3, #5
 8009596:	4995      	ldr	r1, [pc, #596]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 8009598:	4313      	orrs	r3, r2
 800959a:	60cb      	str	r3, [r1, #12]
 800959c:	e036      	b.n	800960c <HAL_RCC_OscConfig+0x314>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095a6:	d30a      	bcc.n	80095be <HAL_RCC_OscConfig+0x2c6>
 80095a8:	4b90      	ldr	r3, [pc, #576]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	029b      	lsls	r3, r3, #10
 80095b6:	498d      	ldr	r1, [pc, #564]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	60cb      	str	r3, [r1, #12]
 80095bc:	e026      	b.n	800960c <HAL_RCC_OscConfig+0x314>
 80095be:	4b8b      	ldr	r3, [pc, #556]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	03db      	lsls	r3, r3, #15
 80095cc:	4987      	ldr	r1, [pc, #540]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60cb      	str	r3, [r1, #12]
 80095d2:	e01b      	b.n	800960c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80095d4:	4b85      	ldr	r3, [pc, #532]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a84      	ldr	r2, [pc, #528]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80095da:	f023 0301 	bic.w	r3, r3, #1
 80095de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80095e0:	f7f9 fb34 	bl	8002c4c <HAL_GetTick>
 80095e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80095e6:	e009      	b.n	80095fc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80095e8:	f7f9 fb30 	bl	8002c4c <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d902      	bls.n	80095fc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	f000 bd53 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80095fc:	4b7b      	ldr	r3, [pc, #492]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1ef      	bne.n	80095e8 <HAL_RCC_OscConfig+0x2f0>
 8009608:	e000      	b.n	800960c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800960a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 808b 	beq.w	8009730 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800961a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961c:	2b08      	cmp	r3, #8
 800961e:	d005      	beq.n	800962c <HAL_RCC_OscConfig+0x334>
 8009620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009622:	2b0c      	cmp	r3, #12
 8009624:	d109      	bne.n	800963a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009628:	2b03      	cmp	r3, #3
 800962a:	d106      	bne.n	800963a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d17d      	bne.n	8009730 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	f000 bd34 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009642:	d106      	bne.n	8009652 <HAL_RCC_OscConfig+0x35a>
 8009644:	4b69      	ldr	r3, [pc, #420]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a68      	ldr	r2, [pc, #416]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800964a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	e041      	b.n	80096d6 <HAL_RCC_OscConfig+0x3de>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800965a:	d112      	bne.n	8009682 <HAL_RCC_OscConfig+0x38a>
 800965c:	4b63      	ldr	r3, [pc, #396]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a62      	ldr	r2, [pc, #392]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 8009662:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	4b60      	ldr	r3, [pc, #384]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a5f      	ldr	r2, [pc, #380]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800966e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	4b5d      	ldr	r3, [pc, #372]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a5c      	ldr	r2, [pc, #368]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800967a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	e029      	b.n	80096d6 <HAL_RCC_OscConfig+0x3de>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800968a:	d112      	bne.n	80096b2 <HAL_RCC_OscConfig+0x3ba>
 800968c:	4b57      	ldr	r3, [pc, #348]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a56      	ldr	r2, [pc, #344]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 8009692:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	4b54      	ldr	r3, [pc, #336]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a53      	ldr	r2, [pc, #332]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800969e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	4b51      	ldr	r3, [pc, #324]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a50      	ldr	r2, [pc, #320]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80096aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	e011      	b.n	80096d6 <HAL_RCC_OscConfig+0x3de>
 80096b2:	4b4e      	ldr	r3, [pc, #312]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a4d      	ldr	r2, [pc, #308]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80096b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096bc:	6013      	str	r3, [r2, #0]
 80096be:	4b4b      	ldr	r3, [pc, #300]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a4a      	ldr	r2, [pc, #296]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80096c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	4b48      	ldr	r3, [pc, #288]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a47      	ldr	r2, [pc, #284]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80096d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80096d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d014      	beq.n	8009708 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80096de:	f7f9 fab5 	bl	8002c4c <HAL_GetTick>
 80096e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096e4:	e009      	b.n	80096fa <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096e6:	f7f9 fab1 	bl	8002c4c <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	2b64      	cmp	r3, #100	@ 0x64
 80096f2:	d902      	bls.n	80096fa <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	f000 bcd4 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096fa:	4b3c      	ldr	r3, [pc, #240]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0ef      	beq.n	80096e6 <HAL_RCC_OscConfig+0x3ee>
 8009706:	e013      	b.n	8009730 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009708:	f7f9 faa0 	bl	8002c4c <HAL_GetTick>
 800970c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800970e:	e009      	b.n	8009724 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009710:	f7f9 fa9c 	bl	8002c4c <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	2b64      	cmp	r3, #100	@ 0x64
 800971c:	d902      	bls.n	8009724 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	f000 bcbf 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009724:	4b31      	ldr	r3, [pc, #196]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1ef      	bne.n	8009710 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d05f      	beq.n	80097fc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800973c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973e:	2b04      	cmp	r3, #4
 8009740:	d005      	beq.n	800974e <HAL_RCC_OscConfig+0x456>
 8009742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009744:	2b0c      	cmp	r3, #12
 8009746:	d114      	bne.n	8009772 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974a:	2b02      	cmp	r3, #2
 800974c:	d111      	bne.n	8009772 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	f000 bca3 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800975c:	4b23      	ldr	r3, [pc, #140]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	041b      	lsls	r3, r3, #16
 800976a:	4920      	ldr	r1, [pc, #128]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800976c:	4313      	orrs	r3, r2
 800976e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009770:	e044      	b.n	80097fc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d024      	beq.n	80097c4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800977a:	4b1c      	ldr	r3, [pc, #112]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a1b      	ldr	r2, [pc, #108]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 8009780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009784:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009786:	f7f9 fa61 	bl	8002c4c <HAL_GetTick>
 800978a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800978c:	e009      	b.n	80097a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800978e:	f7f9 fa5d 	bl	8002c4c <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	2b02      	cmp	r3, #2
 800979a:	d902      	bls.n	80097a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	f000 bc80 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097a2:	4b12      	ldr	r3, [pc, #72]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0ef      	beq.n	800978e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80097ae:	4b0f      	ldr	r3, [pc, #60]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	041b      	lsls	r3, r3, #16
 80097bc:	490b      	ldr	r1, [pc, #44]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	610b      	str	r3, [r1, #16]
 80097c2:	e01b      	b.n	80097fc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80097c4:	4b09      	ldr	r3, [pc, #36]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a08      	ldr	r2, [pc, #32]	@ (80097ec <HAL_RCC_OscConfig+0x4f4>)
 80097ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097ce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80097d0:	f7f9 fa3c 	bl	8002c4c <HAL_GetTick>
 80097d4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097d6:	e00b      	b.n	80097f0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097d8:	f7f9 fa38 	bl	8002c4c <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d904      	bls.n	80097f0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	f000 bc5b 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
 80097ec:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097f0:	4baf      	ldr	r3, [pc, #700]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1ed      	bne.n	80097d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0308 	and.w	r3, r3, #8
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 80c8 	beq.w	800999a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800980a:	2300      	movs	r3, #0
 800980c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009810:	4ba7      	ldr	r3, [pc, #668]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009816:	f003 0304 	and.w	r3, r3, #4
 800981a:	2b00      	cmp	r3, #0
 800981c:	d111      	bne.n	8009842 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800981e:	4ba4      	ldr	r3, [pc, #656]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009824:	4aa2      	ldr	r2, [pc, #648]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009826:	f043 0304 	orr.w	r3, r3, #4
 800982a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800982e:	4ba0      	ldr	r3, [pc, #640]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	617b      	str	r3, [r7, #20]
 800983a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800983c:	2301      	movs	r3, #1
 800983e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009842:	4b9c      	ldr	r3, [pc, #624]	@ (8009ab4 <HAL_RCC_OscConfig+0x7bc>)
 8009844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	d119      	bne.n	8009882 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800984e:	4b99      	ldr	r3, [pc, #612]	@ (8009ab4 <HAL_RCC_OscConfig+0x7bc>)
 8009850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009852:	4a98      	ldr	r2, [pc, #608]	@ (8009ab4 <HAL_RCC_OscConfig+0x7bc>)
 8009854:	f043 0301 	orr.w	r3, r3, #1
 8009858:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800985a:	f7f9 f9f7 	bl	8002c4c <HAL_GetTick>
 800985e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009860:	e009      	b.n	8009876 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009862:	f7f9 f9f3 	bl	8002c4c <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	2b02      	cmp	r3, #2
 800986e:	d902      	bls.n	8009876 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	f000 bc16 	b.w	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009876:	4b8f      	ldr	r3, [pc, #572]	@ (8009ab4 <HAL_RCC_OscConfig+0x7bc>)
 8009878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0ef      	beq.n	8009862 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d05f      	beq.n	800994a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800988a:	4b89      	ldr	r3, [pc, #548]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 800988c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009890:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	699a      	ldr	r2, [r3, #24]
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800989c:	429a      	cmp	r2, r3
 800989e:	d037      	beq.n	8009910 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d006      	beq.n	80098b8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e3f4      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01b      	beq.n	80098fa <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80098c2:	4b7b      	ldr	r3, [pc, #492]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 80098c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098c8:	4a79      	ldr	r2, [pc, #484]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 80098ca:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80098ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80098d2:	f7f9 f9bb 	bl	8002c4c <HAL_GetTick>
 80098d6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80098d8:	e008      	b.n	80098ec <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098da:	f7f9 f9b7 	bl	8002c4c <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b05      	cmp	r3, #5
 80098e6:	d901      	bls.n	80098ec <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e3da      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80098ec:	4b70      	ldr	r3, [pc, #448]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 80098ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1ef      	bne.n	80098da <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80098fa:	4b6d      	ldr	r3, [pc, #436]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 80098fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009900:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	4969      	ldr	r1, [pc, #420]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 800990a:	4313      	orrs	r3, r2
 800990c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009910:	4b67      	ldr	r3, [pc, #412]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009916:	4a66      	ldr	r2, [pc, #408]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009918:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800991c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009920:	f7f9 f994 	bl	8002c4c <HAL_GetTick>
 8009924:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009926:	e008      	b.n	800993a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009928:	f7f9 f990 	bl	8002c4c <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	2b05      	cmp	r3, #5
 8009934:	d901      	bls.n	800993a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e3b3      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800993a:	4b5d      	ldr	r3, [pc, #372]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 800993c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0ef      	beq.n	8009928 <HAL_RCC_OscConfig+0x630>
 8009948:	e01b      	b.n	8009982 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800994a:	4b59      	ldr	r3, [pc, #356]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 800994c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009950:	4a57      	ldr	r2, [pc, #348]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009952:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009956:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800995a:	f7f9 f977 	bl	8002c4c <HAL_GetTick>
 800995e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009960:	e008      	b.n	8009974 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009962:	f7f9 f973 	bl	8002c4c <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2b05      	cmp	r3, #5
 800996e:	d901      	bls.n	8009974 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e396      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009974:	4b4e      	ldr	r3, [pc, #312]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800997a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1ef      	bne.n	8009962 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009982:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009986:	2b01      	cmp	r3, #1
 8009988:	d107      	bne.n	800999a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800998a:	4b49      	ldr	r3, [pc, #292]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 800998c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009990:	4a47      	ldr	r2, [pc, #284]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009992:	f023 0304 	bic.w	r3, r3, #4
 8009996:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0304 	and.w	r3, r3, #4
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 8111 	beq.w	8009bca <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80099a8:	2300      	movs	r3, #0
 80099aa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099ae:	4b40      	ldr	r3, [pc, #256]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 80099b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d111      	bne.n	80099e0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099bc:	4b3c      	ldr	r3, [pc, #240]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 80099be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099c2:	4a3b      	ldr	r2, [pc, #236]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 80099c4:	f043 0304 	orr.w	r3, r3, #4
 80099c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80099cc:	4b38      	ldr	r3, [pc, #224]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 80099ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	613b      	str	r3, [r7, #16]
 80099d8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80099da:	2301      	movs	r3, #1
 80099dc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80099e0:	4b34      	ldr	r3, [pc, #208]	@ (8009ab4 <HAL_RCC_OscConfig+0x7bc>)
 80099e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d118      	bne.n	8009a1e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80099ec:	4b31      	ldr	r3, [pc, #196]	@ (8009ab4 <HAL_RCC_OscConfig+0x7bc>)
 80099ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f0:	4a30      	ldr	r2, [pc, #192]	@ (8009ab4 <HAL_RCC_OscConfig+0x7bc>)
 80099f2:	f043 0301 	orr.w	r3, r3, #1
 80099f6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099f8:	f7f9 f928 	bl	8002c4c <HAL_GetTick>
 80099fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80099fe:	e008      	b.n	8009a12 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a00:	f7f9 f924 	bl	8002c4c <HAL_GetTick>
 8009a04:	4602      	mov	r2, r0
 8009a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d901      	bls.n	8009a12 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e347      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009a12:	4b28      	ldr	r3, [pc, #160]	@ (8009ab4 <HAL_RCC_OscConfig+0x7bc>)
 8009a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d0f0      	beq.n	8009a00 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d01f      	beq.n	8009a6a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 0304 	and.w	r3, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d010      	beq.n	8009a58 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009a36:	4b1e      	ldr	r3, [pc, #120]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a3e:	f043 0304 	orr.w	r3, r3, #4
 8009a42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009a46:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a4c:	4a18      	ldr	r2, [pc, #96]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a4e:	f043 0301 	orr.w	r3, r3, #1
 8009a52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009a56:	e018      	b.n	8009a8a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009a58:	4b15      	ldr	r3, [pc, #84]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a5e:	4a14      	ldr	r2, [pc, #80]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a60:	f043 0301 	orr.w	r3, r3, #1
 8009a64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009a68:	e00f      	b.n	8009a8a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009a6a:	4b11      	ldr	r3, [pc, #68]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a70:	4a0f      	ldr	r2, [pc, #60]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a72:	f023 0301 	bic.w	r3, r3, #1
 8009a76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a80:	4a0b      	ldr	r2, [pc, #44]	@ (8009ab0 <HAL_RCC_OscConfig+0x7b8>)
 8009a82:	f023 0304 	bic.w	r3, r3, #4
 8009a86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d057      	beq.n	8009b42 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8009a92:	f7f9 f8db 	bl	8002c4c <HAL_GetTick>
 8009a96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a98:	e00e      	b.n	8009ab8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a9a:	f7f9 f8d7 	bl	8002c4c <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d905      	bls.n	8009ab8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e2f8      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
 8009ab0:	46020c00 	.word	0x46020c00
 8009ab4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ab8:	4b9c      	ldr	r3, [pc, #624]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0e9      	beq.n	8009a9a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01b      	beq.n	8009b0a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009ad2:	4b96      	ldr	r3, [pc, #600]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ad8:	4a94      	ldr	r2, [pc, #592]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009ae2:	e00a      	b.n	8009afa <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ae4:	f7f9 f8b2 	bl	8002c4c <HAL_GetTick>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d901      	bls.n	8009afa <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e2d3      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009afa:	4b8c      	ldr	r3, [pc, #560]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d0ed      	beq.n	8009ae4 <HAL_RCC_OscConfig+0x7ec>
 8009b08:	e053      	b.n	8009bb2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009b0a:	4b88      	ldr	r3, [pc, #544]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b10:	4a86      	ldr	r2, [pc, #536]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009b1a:	e00a      	b.n	8009b32 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b1c:	f7f9 f896 	bl	8002c4c <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d901      	bls.n	8009b32 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e2b7      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009b32:	4b7e      	ldr	r3, [pc, #504]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1ed      	bne.n	8009b1c <HAL_RCC_OscConfig+0x824>
 8009b40:	e037      	b.n	8009bb2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8009b42:	f7f9 f883 	bl	8002c4c <HAL_GetTick>
 8009b46:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b48:	e00a      	b.n	8009b60 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b4a:	f7f9 f87f 	bl	8002c4c <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d901      	bls.n	8009b60 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e2a0      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b60:	4b72      	ldr	r3, [pc, #456]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1ed      	bne.n	8009b4a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009b6e:	4b6f      	ldr	r3, [pc, #444]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d01a      	beq.n	8009bb2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b82:	4a6a      	ldr	r2, [pc, #424]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009b84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009b8c:	e00a      	b.n	8009ba4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b8e:	f7f9 f85d 	bl	8002c4c <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d901      	bls.n	8009ba4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e27e      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009ba4:	4b61      	ldr	r3, [pc, #388]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009baa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1ed      	bne.n	8009b8e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009bb2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d107      	bne.n	8009bca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bba:	4b5c      	ldr	r3, [pc, #368]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bc0:	4a5a      	ldr	r2, [pc, #360]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009bc2:	f023 0304 	bic.w	r3, r3, #4
 8009bc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0320 	and.w	r3, r3, #32
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d036      	beq.n	8009c44 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d019      	beq.n	8009c12 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8009bde:	4b53      	ldr	r3, [pc, #332]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a52      	ldr	r2, [pc, #328]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009be4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009be8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009bea:	f7f9 f82f 	bl	8002c4c <HAL_GetTick>
 8009bee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009bf0:	e008      	b.n	8009c04 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bf2:	f7f9 f82b 	bl	8002c4c <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e24e      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009c04:	4b49      	ldr	r3, [pc, #292]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0f0      	beq.n	8009bf2 <HAL_RCC_OscConfig+0x8fa>
 8009c10:	e018      	b.n	8009c44 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8009c12:	4b46      	ldr	r3, [pc, #280]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a45      	ldr	r2, [pc, #276]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009c18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c1c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009c1e:	f7f9 f815 	bl	8002c4c <HAL_GetTick>
 8009c22:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009c24:	e008      	b.n	8009c38 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c26:	f7f9 f811 	bl	8002c4c <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d901      	bls.n	8009c38 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e234      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009c38:	4b3c      	ldr	r3, [pc, #240]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1f0      	bne.n	8009c26 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d036      	beq.n	8009cbe <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d019      	beq.n	8009c8c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8009c58:	4b34      	ldr	r3, [pc, #208]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a33      	ldr	r2, [pc, #204]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009c5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009c64:	f7f8 fff2 	bl	8002c4c <HAL_GetTick>
 8009c68:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009c6a:	e008      	b.n	8009c7e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009c6c:	f7f8 ffee 	bl	8002c4c <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d901      	bls.n	8009c7e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e211      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d0f0      	beq.n	8009c6c <HAL_RCC_OscConfig+0x974>
 8009c8a:	e018      	b.n	8009cbe <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009c8c:	4b27      	ldr	r3, [pc, #156]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a26      	ldr	r2, [pc, #152]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c96:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009c98:	f7f8 ffd8 	bl	8002c4c <HAL_GetTick>
 8009c9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009c9e:	e008      	b.n	8009cb2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009ca0:	f7f8 ffd4 	bl	8002c4c <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e1f7      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f0      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d07f      	beq.n	8009dca <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d062      	beq.n	8009d98 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009cd2:	4b16      	ldr	r3, [pc, #88]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	4a15      	ldr	r2, [pc, #84]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009cd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009cdc:	6093      	str	r3, [r2, #8]
 8009cde:	4b13      	ldr	r3, [pc, #76]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cea:	4910      	ldr	r1, [pc, #64]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009cec:	4313      	orrs	r3, r2
 8009cee:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009cf8:	d309      	bcc.n	8009d0e <HAL_RCC_OscConfig+0xa16>
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f023 021f 	bic.w	r2, r3, #31
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	4909      	ldr	r1, [pc, #36]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60cb      	str	r3, [r1, #12]
 8009d0c:	e02a      	b.n	8009d64 <HAL_RCC_OscConfig+0xa6c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da0c      	bge.n	8009d30 <HAL_RCC_OscConfig+0xa38>
 8009d16:	4b05      	ldr	r3, [pc, #20]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	015b      	lsls	r3, r3, #5
 8009d24:	4901      	ldr	r1, [pc, #4]	@ (8009d2c <HAL_RCC_OscConfig+0xa34>)
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60cb      	str	r3, [r1, #12]
 8009d2a:	e01b      	b.n	8009d64 <HAL_RCC_OscConfig+0xa6c>
 8009d2c:	46020c00 	.word	0x46020c00
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d38:	d30a      	bcc.n	8009d50 <HAL_RCC_OscConfig+0xa58>
 8009d3a:	4ba1      	ldr	r3, [pc, #644]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	029b      	lsls	r3, r3, #10
 8009d48:	499d      	ldr	r1, [pc, #628]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60cb      	str	r3, [r1, #12]
 8009d4e:	e009      	b.n	8009d64 <HAL_RCC_OscConfig+0xa6c>
 8009d50:	4b9b      	ldr	r3, [pc, #620]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	03db      	lsls	r3, r3, #15
 8009d5e:	4998      	ldr	r1, [pc, #608]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8009d64:	4b96      	ldr	r3, [pc, #600]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a95      	ldr	r2, [pc, #596]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009d6a:	f043 0310 	orr.w	r3, r3, #16
 8009d6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009d70:	f7f8 ff6c 	bl	8002c4c <HAL_GetTick>
 8009d74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009d76:	e008      	b.n	8009d8a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009d78:	f7f8 ff68 	bl	8002c4c <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d901      	bls.n	8009d8a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e18b      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0f0      	beq.n	8009d78 <HAL_RCC_OscConfig+0xa80>
 8009d96:	e018      	b.n	8009dca <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009d98:	4b89      	ldr	r3, [pc, #548]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a88      	ldr	r2, [pc, #544]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009d9e:	f023 0310 	bic.w	r3, r3, #16
 8009da2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009da4:	f7f8 ff52 	bl	8002c4c <HAL_GetTick>
 8009da8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009daa:	e008      	b.n	8009dbe <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009dac:	f7f8 ff4e 	bl	8002c4c <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e171      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009dbe:	4b80      	ldr	r3, [pc, #512]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0320 	and.w	r3, r3, #32
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1f0      	bne.n	8009dac <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 8166 	beq.w	800a0a0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009dda:	4b79      	ldr	r3, [pc, #484]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	f003 030c 	and.w	r3, r3, #12
 8009de2:	2b0c      	cmp	r3, #12
 8009de4:	f000 80f2 	beq.w	8009fcc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	f040 80c5 	bne.w	8009f7c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009df2:	4b73      	ldr	r3, [pc, #460]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a72      	ldr	r2, [pc, #456]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009df8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dfc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009dfe:	f7f8 ff25 	bl	8002c4c <HAL_GetTick>
 8009e02:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009e04:	e008      	b.n	8009e18 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e06:	f7f8 ff21 	bl	8002c4c <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e144      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009e18:	4b69      	ldr	r3, [pc, #420]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1f0      	bne.n	8009e06 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e24:	4b66      	ldr	r3, [pc, #408]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e2a:	f003 0304 	and.w	r3, r3, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d111      	bne.n	8009e56 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8009e32:	4b63      	ldr	r3, [pc, #396]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e38:	4a61      	ldr	r2, [pc, #388]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009e3a:	f043 0304 	orr.w	r3, r3, #4
 8009e3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009e42:	4b5f      	ldr	r3, [pc, #380]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e48:	f003 0304 	and.w	r3, r3, #4
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8009e50:	2301      	movs	r3, #1
 8009e52:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009e56:	4b5b      	ldr	r3, [pc, #364]	@ (8009fc4 <HAL_RCC_OscConfig+0xccc>)
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e62:	d102      	bne.n	8009e6a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009e6a:	4b56      	ldr	r3, [pc, #344]	@ (8009fc4 <HAL_RCC_OscConfig+0xccc>)
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	4a55      	ldr	r2, [pc, #340]	@ (8009fc4 <HAL_RCC_OscConfig+0xccc>)
 8009e70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e74:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009e76:	4b52      	ldr	r3, [pc, #328]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e7e:	f023 0303 	bic.w	r3, r3, #3
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009e8a:	3a01      	subs	r2, #1
 8009e8c:	0212      	lsls	r2, r2, #8
 8009e8e:	4311      	orrs	r1, r2
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009e94:	430a      	orrs	r2, r1
 8009e96:	494a      	ldr	r1, [pc, #296]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009e9c:	4b48      	ldr	r3, [pc, #288]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009e9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ea0:	4b49      	ldr	r3, [pc, #292]	@ (8009fc8 <HAL_RCC_OscConfig+0xcd0>)
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ea8:	3a01      	subs	r2, #1
 8009eaa:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009eb2:	3a01      	subs	r2, #1
 8009eb4:	0252      	lsls	r2, r2, #9
 8009eb6:	b292      	uxth	r2, r2
 8009eb8:	4311      	orrs	r1, r2
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009ebe:	3a01      	subs	r2, #1
 8009ec0:	0412      	lsls	r2, r2, #16
 8009ec2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009ec6:	4311      	orrs	r1, r2
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009ecc:	3a01      	subs	r2, #1
 8009ece:	0612      	lsls	r2, r2, #24
 8009ed0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	493a      	ldr	r1, [pc, #232]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009edc:	4b38      	ldr	r3, [pc, #224]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee0:	4a37      	ldr	r2, [pc, #220]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009ee2:	f023 0310 	bic.w	r3, r3, #16
 8009ee6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eec:	4a34      	ldr	r2, [pc, #208]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009ef2:	4b33      	ldr	r3, [pc, #204]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef6:	4a32      	ldr	r2, [pc, #200]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009ef8:	f043 0310 	orr.w	r3, r3, #16
 8009efc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009efe:	4b30      	ldr	r3, [pc, #192]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f02:	f023 020c 	bic.w	r2, r3, #12
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f0a:	492d      	ldr	r1, [pc, #180]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8009f10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d105      	bne.n	8009f24 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009f18:	4b2a      	ldr	r3, [pc, #168]	@ (8009fc4 <HAL_RCC_OscConfig+0xccc>)
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	4a29      	ldr	r2, [pc, #164]	@ (8009fc4 <HAL_RCC_OscConfig+0xccc>)
 8009f1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f22:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009f24:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d107      	bne.n	8009f3c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8009f2c:	4b24      	ldr	r3, [pc, #144]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f32:	4a23      	ldr	r2, [pc, #140]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f34:	f023 0304 	bic.w	r3, r3, #4
 8009f38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009f3c:	4b20      	ldr	r3, [pc, #128]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a1f      	ldr	r2, [pc, #124]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f46:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009f48:	f7f8 fe80 	bl	8002c4c <HAL_GetTick>
 8009f4c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009f4e:	e008      	b.n	8009f62 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f50:	f7f8 fe7c 	bl	8002c4c <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d901      	bls.n	8009f62 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e09f      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009f62:	4b17      	ldr	r3, [pc, #92]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0f0      	beq.n	8009f50 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f6e:	4b14      	ldr	r3, [pc, #80]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f72:	4a13      	ldr	r2, [pc, #76]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f78:	6293      	str	r3, [r2, #40]	@ 0x28
 8009f7a:	e091      	b.n	800a0a0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009f7c:	4b10      	ldr	r3, [pc, #64]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a0f      	ldr	r2, [pc, #60]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f86:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009f88:	f7f8 fe60 	bl	8002c4c <HAL_GetTick>
 8009f8c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009f8e:	e008      	b.n	8009fa2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f90:	f7f8 fe5c 	bl	8002c4c <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d901      	bls.n	8009fa2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e07f      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009fa2:	4b07      	ldr	r3, [pc, #28]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1f0      	bne.n	8009f90 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009fae:	4b04      	ldr	r3, [pc, #16]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb2:	4a03      	ldr	r2, [pc, #12]	@ (8009fc0 <HAL_RCC_OscConfig+0xcc8>)
 8009fb4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8009fb8:	f023 0303 	bic.w	r3, r3, #3
 8009fbc:	6293      	str	r3, [r2, #40]	@ 0x28
 8009fbe:	e06f      	b.n	800a0a0 <HAL_RCC_OscConfig+0xda8>
 8009fc0:	46020c00 	.word	0x46020c00
 8009fc4:	46020800 	.word	0x46020800
 8009fc8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009fcc:	4b37      	ldr	r3, [pc, #220]	@ (800a0ac <HAL_RCC_OscConfig+0xdb4>)
 8009fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009fd2:	4b36      	ldr	r3, [pc, #216]	@ (800a0ac <HAL_RCC_OscConfig+0xdb4>)
 8009fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fd6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d039      	beq.n	800a054 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	f003 0203 	and.w	r2, r3, #3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d132      	bne.n	800a054 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	0a1b      	lsrs	r3, r3, #8
 8009ff2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d129      	bne.n	800a054 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d122      	bne.n	800a054 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a018:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d11a      	bne.n	800a054 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	0a5b      	lsrs	r3, r3, #9
 800a022:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a02a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d111      	bne.n	800a054 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	0c1b      	lsrs	r3, r3, #16
 800a034:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a03c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a03e:	429a      	cmp	r2, r3
 800a040:	d108      	bne.n	800a054 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	0e1b      	lsrs	r3, r3, #24
 800a046:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a04e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a050:	429a      	cmp	r2, r3
 800a052:	d001      	beq.n	800a058 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e024      	b.n	800a0a2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a058:	4b14      	ldr	r3, [pc, #80]	@ (800a0ac <HAL_RCC_OscConfig+0xdb4>)
 800a05a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a05c:	08db      	lsrs	r3, r3, #3
 800a05e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a066:	429a      	cmp	r2, r3
 800a068:	d01a      	beq.n	800a0a0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a06a:	4b10      	ldr	r3, [pc, #64]	@ (800a0ac <HAL_RCC_OscConfig+0xdb4>)
 800a06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a06e:	4a0f      	ldr	r2, [pc, #60]	@ (800a0ac <HAL_RCC_OscConfig+0xdb4>)
 800a070:	f023 0310 	bic.w	r3, r3, #16
 800a074:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a076:	f7f8 fde9 	bl	8002c4c <HAL_GetTick>
 800a07a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a07c:	bf00      	nop
 800a07e:	f7f8 fde5 	bl	8002c4c <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a086:	4293      	cmp	r3, r2
 800a088:	d0f9      	beq.n	800a07e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a08e:	4a07      	ldr	r2, [pc, #28]	@ (800a0ac <HAL_RCC_OscConfig+0xdb4>)
 800a090:	00db      	lsls	r3, r3, #3
 800a092:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a094:	4b05      	ldr	r3, [pc, #20]	@ (800a0ac <HAL_RCC_OscConfig+0xdb4>)
 800a096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a098:	4a04      	ldr	r2, [pc, #16]	@ (800a0ac <HAL_RCC_OscConfig+0xdb4>)
 800a09a:	f043 0310 	orr.w	r3, r3, #16
 800a09e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3738      	adds	r7, #56	@ 0x38
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	46020c00 	.word	0x46020c00

0800a0b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e1d9      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0c4:	4b9b      	ldr	r3, [pc, #620]	@ (800a334 <HAL_RCC_ClockConfig+0x284>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 030f 	and.w	r3, r3, #15
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d910      	bls.n	800a0f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0d2:	4b98      	ldr	r3, [pc, #608]	@ (800a334 <HAL_RCC_ClockConfig+0x284>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f023 020f 	bic.w	r2, r3, #15
 800a0da:	4996      	ldr	r1, [pc, #600]	@ (800a334 <HAL_RCC_ClockConfig+0x284>)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0e2:	4b94      	ldr	r3, [pc, #592]	@ (800a334 <HAL_RCC_ClockConfig+0x284>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 030f 	and.w	r3, r3, #15
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d001      	beq.n	800a0f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e1c1      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0310 	and.w	r3, r3, #16
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d010      	beq.n	800a122 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	695a      	ldr	r2, [r3, #20]
 800a104:	4b8c      	ldr	r3, [pc, #560]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a108:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d908      	bls.n	800a122 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a110:	4b89      	ldr	r3, [pc, #548]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a114:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	4986      	ldr	r1, [pc, #536]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0308 	and.w	r3, r3, #8
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d012      	beq.n	800a154 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	691a      	ldr	r2, [r3, #16]
 800a132:	4b81      	ldr	r3, [pc, #516]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	091b      	lsrs	r3, r3, #4
 800a138:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d909      	bls.n	800a154 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a140:	4b7d      	ldr	r3, [pc, #500]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	011b      	lsls	r3, r3, #4
 800a14e:	497a      	ldr	r1, [pc, #488]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a150:	4313      	orrs	r3, r2
 800a152:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0304 	and.w	r3, r3, #4
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d010      	beq.n	800a182 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68da      	ldr	r2, [r3, #12]
 800a164:	4b74      	ldr	r3, [pc, #464]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d908      	bls.n	800a182 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a170:	4b71      	ldr	r3, [pc, #452]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	496e      	ldr	r1, [pc, #440]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 0302 	and.w	r3, r3, #2
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d010      	beq.n	800a1b0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	689a      	ldr	r2, [r3, #8]
 800a192:	4b69      	ldr	r3, [pc, #420]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	f003 030f 	and.w	r3, r3, #15
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d908      	bls.n	800a1b0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a19e:	4b66      	ldr	r3, [pc, #408]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	f023 020f 	bic.w	r2, r3, #15
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	4963      	ldr	r1, [pc, #396]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80d2 	beq.w	800a362 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d143      	bne.n	800a252 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1ca:	4b5b      	ldr	r3, [pc, #364]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a1cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d110      	bne.n	800a1fa <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a1d8:	4b57      	ldr	r3, [pc, #348]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a1da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1de:	4a56      	ldr	r2, [pc, #344]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a1e0:	f043 0304 	orr.w	r3, r3, #4
 800a1e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a1e8:	4b53      	ldr	r3, [pc, #332]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a1ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1ee:	f003 0304 	and.w	r3, r3, #4
 800a1f2:	60bb      	str	r3, [r7, #8]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a1fa:	f7f8 fd27 	bl	8002c4c <HAL_GetTick>
 800a1fe:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a200:	4b4e      	ldr	r3, [pc, #312]	@ (800a33c <HAL_RCC_ClockConfig+0x28c>)
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00f      	beq.n	800a22c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a20c:	e008      	b.n	800a220 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a20e:	f7f8 fd1d 	bl	8002c4c <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d901      	bls.n	800a220 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e12b      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a220:	4b46      	ldr	r3, [pc, #280]	@ (800a33c <HAL_RCC_ClockConfig+0x28c>)
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d0f0      	beq.n	800a20e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d107      	bne.n	800a242 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a232:	4b41      	ldr	r3, [pc, #260]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a238:	4a3f      	ldr	r2, [pc, #252]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a23a:	f023 0304 	bic.w	r3, r3, #4
 800a23e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a242:	4b3d      	ldr	r3, [pc, #244]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d121      	bne.n	800a292 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e112      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d107      	bne.n	800a26a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a25a:	4b37      	ldr	r3, [pc, #220]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d115      	bne.n	800a292 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e106      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d107      	bne.n	800a282 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a272:	4b31      	ldr	r3, [pc, #196]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0304 	and.w	r3, r3, #4
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d109      	bne.n	800a292 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e0fa      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a282:	4b2d      	ldr	r3, [pc, #180]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e0f2      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a292:	4b29      	ldr	r3, [pc, #164]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	f023 0203 	bic.w	r2, r3, #3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	4926      	ldr	r1, [pc, #152]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a2a4:	f7f8 fcd2 	bl	8002c4c <HAL_GetTick>
 800a2a8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d112      	bne.n	800a2d8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2b2:	e00a      	b.n	800a2ca <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2b4:	f7f8 fcca 	bl	8002c4c <HAL_GetTick>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d901      	bls.n	800a2ca <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e0d6      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f003 030c 	and.w	r3, r3, #12
 800a2d2:	2b0c      	cmp	r3, #12
 800a2d4:	d1ee      	bne.n	800a2b4 <HAL_RCC_ClockConfig+0x204>
 800a2d6:	e044      	b.n	800a362 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d112      	bne.n	800a306 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a2e0:	e00a      	b.n	800a2f8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2e2:	f7f8 fcb3 	bl	8002c4c <HAL_GetTick>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d901      	bls.n	800a2f8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e0bf      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a2f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a2fa:	69db      	ldr	r3, [r3, #28]
 800a2fc:	f003 030c 	and.w	r3, r3, #12
 800a300:	2b08      	cmp	r3, #8
 800a302:	d1ee      	bne.n	800a2e2 <HAL_RCC_ClockConfig+0x232>
 800a304:	e02d      	b.n	800a362 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d123      	bne.n	800a356 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a30e:	e00a      	b.n	800a326 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a310:	f7f8 fc9c 	bl	8002c4c <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a31e:	4293      	cmp	r3, r2
 800a320:	d901      	bls.n	800a326 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e0a8      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a326:	4b04      	ldr	r3, [pc, #16]	@ (800a338 <HAL_RCC_ClockConfig+0x288>)
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	f003 030c 	and.w	r3, r3, #12
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1ee      	bne.n	800a310 <HAL_RCC_ClockConfig+0x260>
 800a332:	e016      	b.n	800a362 <HAL_RCC_ClockConfig+0x2b2>
 800a334:	40022000 	.word	0x40022000
 800a338:	46020c00 	.word	0x46020c00
 800a33c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a340:	f7f8 fc84 	bl	8002c4c <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a34e:	4293      	cmp	r3, r2
 800a350:	d901      	bls.n	800a356 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	e090      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a356:	4b4a      	ldr	r3, [pc, #296]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a358:	69db      	ldr	r3, [r3, #28]
 800a35a:	f003 030c 	and.w	r3, r3, #12
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d1ee      	bne.n	800a340 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d010      	beq.n	800a390 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689a      	ldr	r2, [r3, #8]
 800a372:	4b43      	ldr	r3, [pc, #268]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d208      	bcs.n	800a390 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a37e:	4b40      	ldr	r3, [pc, #256]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f023 020f 	bic.w	r2, r3, #15
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	493d      	ldr	r1, [pc, #244]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a390:	4b3c      	ldr	r3, [pc, #240]	@ (800a484 <HAL_RCC_ClockConfig+0x3d4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 030f 	and.w	r3, r3, #15
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d210      	bcs.n	800a3c0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a39e:	4b39      	ldr	r3, [pc, #228]	@ (800a484 <HAL_RCC_ClockConfig+0x3d4>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f023 020f 	bic.w	r2, r3, #15
 800a3a6:	4937      	ldr	r1, [pc, #220]	@ (800a484 <HAL_RCC_ClockConfig+0x3d4>)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3ae:	4b35      	ldr	r3, [pc, #212]	@ (800a484 <HAL_RCC_ClockConfig+0x3d4>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 030f 	and.w	r3, r3, #15
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d001      	beq.n	800a3c0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e05b      	b.n	800a478 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 0304 	and.w	r3, r3, #4
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d010      	beq.n	800a3ee <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68da      	ldr	r2, [r3, #12]
 800a3d0:	4b2b      	ldr	r3, [pc, #172]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a3d2:	6a1b      	ldr	r3, [r3, #32]
 800a3d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d208      	bcs.n	800a3ee <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a3dc:	4b28      	ldr	r3, [pc, #160]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	4925      	ldr	r1, [pc, #148]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 0308 	and.w	r3, r3, #8
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d012      	beq.n	800a420 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	691a      	ldr	r2, [r3, #16]
 800a3fe:	4b20      	ldr	r3, [pc, #128]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	091b      	lsrs	r3, r3, #4
 800a404:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a408:	429a      	cmp	r2, r3
 800a40a:	d209      	bcs.n	800a420 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a40c:	4b1c      	ldr	r3, [pc, #112]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	011b      	lsls	r3, r3, #4
 800a41a:	4919      	ldr	r1, [pc, #100]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0310 	and.w	r3, r3, #16
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d010      	beq.n	800a44e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	695a      	ldr	r2, [r3, #20]
 800a430:	4b13      	ldr	r3, [pc, #76]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a434:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a438:	429a      	cmp	r2, r3
 800a43a:	d208      	bcs.n	800a44e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a43c:	4b10      	ldr	r3, [pc, #64]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	490d      	ldr	r1, [pc, #52]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a44e:	f000 f821 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800a452:	4602      	mov	r2, r0
 800a454:	4b0a      	ldr	r3, [pc, #40]	@ (800a480 <HAL_RCC_ClockConfig+0x3d0>)
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	f003 030f 	and.w	r3, r3, #15
 800a45c:	490a      	ldr	r1, [pc, #40]	@ (800a488 <HAL_RCC_ClockConfig+0x3d8>)
 800a45e:	5ccb      	ldrb	r3, [r1, r3]
 800a460:	fa22 f303 	lsr.w	r3, r2, r3
 800a464:	4a09      	ldr	r2, [pc, #36]	@ (800a48c <HAL_RCC_ClockConfig+0x3dc>)
 800a466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a468:	4b09      	ldr	r3, [pc, #36]	@ (800a490 <HAL_RCC_ClockConfig+0x3e0>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7f8 fb63 	bl	8002b38 <HAL_InitTick>
 800a472:	4603      	mov	r3, r0
 800a474:	73fb      	strb	r3, [r7, #15]

  return status;
 800a476:	7bfb      	ldrb	r3, [r7, #15]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	46020c00 	.word	0x46020c00
 800a484:	40022000 	.word	0x40022000
 800a488:	08011338 	.word	0x08011338
 800a48c:	20000000 	.word	0x20000000
 800a490:	20000004 	.word	0x20000004

0800a494 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a494:	b480      	push	{r7}
 800a496:	b08b      	sub	sp, #44	@ 0x2c
 800a498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4a2:	4b78      	ldr	r3, [pc, #480]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a4a4:	69db      	ldr	r3, [r3, #28]
 800a4a6:	f003 030c 	and.w	r3, r3, #12
 800a4aa:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4ac:	4b75      	ldr	r3, [pc, #468]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b0:	f003 0303 	and.w	r3, r3, #3
 800a4b4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d005      	beq.n	800a4c8 <HAL_RCC_GetSysClockFreq+0x34>
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	2b0c      	cmp	r3, #12
 800a4c0:	d121      	bne.n	800a506 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d11e      	bne.n	800a506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a4c8:	4b6e      	ldr	r3, [pc, #440]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d107      	bne.n	800a4e4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a4d4:	4b6b      	ldr	r3, [pc, #428]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a4d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4da:	0b1b      	lsrs	r3, r3, #12
 800a4dc:	f003 030f 	and.w	r3, r3, #15
 800a4e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4e2:	e005      	b.n	800a4f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a4e4:	4b67      	ldr	r3, [pc, #412]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	0f1b      	lsrs	r3, r3, #28
 800a4ea:	f003 030f 	and.w	r3, r3, #15
 800a4ee:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a4f0:	4a65      	ldr	r2, [pc, #404]	@ (800a688 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4f8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d110      	bne.n	800a522 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a502:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a504:	e00d      	b.n	800a522 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a506:	4b5f      	ldr	r3, [pc, #380]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	f003 030c 	and.w	r3, r3, #12
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d102      	bne.n	800a518 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a512:	4b5e      	ldr	r3, [pc, #376]	@ (800a68c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a514:	623b      	str	r3, [r7, #32]
 800a516:	e004      	b.n	800a522 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	2b08      	cmp	r3, #8
 800a51c:	d101      	bne.n	800a522 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a51e:	4b5b      	ldr	r3, [pc, #364]	@ (800a68c <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a520:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	2b0c      	cmp	r3, #12
 800a526:	f040 80a5 	bne.w	800a674 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a52a:	4b56      	ldr	r3, [pc, #344]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a534:	4b53      	ldr	r3, [pc, #332]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a538:	0a1b      	lsrs	r3, r3, #8
 800a53a:	f003 030f 	and.w	r3, r3, #15
 800a53e:	3301      	adds	r3, #1
 800a540:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a542:	4b50      	ldr	r3, [pc, #320]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a546:	091b      	lsrs	r3, r3, #4
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a54e:	4b4d      	ldr	r3, [pc, #308]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a552:	08db      	lsrs	r3, r3, #3
 800a554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	fb02 f303 	mul.w	r3, r2, r3
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a566:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d003      	beq.n	800a578 <HAL_RCC_GetSysClockFreq+0xe4>
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	2b03      	cmp	r3, #3
 800a574:	d022      	beq.n	800a5bc <HAL_RCC_GetSysClockFreq+0x128>
 800a576:	e043      	b.n	800a600 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a582:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800a690 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a58a:	4b3e      	ldr	r3, [pc, #248]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a58c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a59a:	ed97 6a01 	vldr	s12, [r7, #4]
 800a59e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800a694 <HAL_RCC_GetSysClockFreq+0x200>
 800a5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a5aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ba:	e046      	b.n	800a64a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800a690 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a5ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ce:	4b2d      	ldr	r3, [pc, #180]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a5d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a5de:	ed97 6a01 	vldr	s12, [r7, #4]
 800a5e2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a694 <HAL_RCC_GetSysClockFreq+0x200>
 800a5e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a5ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5fe:	e024      	b.n	800a64a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a602:	ee07 3a90 	vmov	s15, r3
 800a606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	ee07 3a90 	vmov	s15, r3
 800a610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a618:	4b1a      	ldr	r3, [pc, #104]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a620:	ee07 3a90 	vmov	s15, r3
 800a624:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a628:	ed97 6a01 	vldr	s12, [r7, #4]
 800a62c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800a694 <HAL_RCC_GetSysClockFreq+0x200>
 800a630:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a634:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a638:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a63c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a640:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a648:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a64a:	4b0e      	ldr	r3, [pc, #56]	@ (800a684 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a64e:	0e1b      	lsrs	r3, r3, #24
 800a650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a654:	3301      	adds	r3, #1
 800a656:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	ee07 3a90 	vmov	s15, r3
 800a65e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a662:	edd7 6a07 	vldr	s13, [r7, #28]
 800a666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a66a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a66e:	ee17 3a90 	vmov	r3, s15
 800a672:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800a674:	6a3b      	ldr	r3, [r7, #32]
}
 800a676:	4618      	mov	r0, r3
 800a678:	372c      	adds	r7, #44	@ 0x2c
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	46020c00 	.word	0x46020c00
 800a688:	08011350 	.word	0x08011350
 800a68c:	00f42400 	.word	0x00f42400
 800a690:	4b742400 	.word	0x4b742400
 800a694:	46000000 	.word	0x46000000

0800a698 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a69c:	f7ff fefa 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	4b07      	ldr	r3, [pc, #28]	@ (800a6c0 <HAL_RCC_GetHCLKFreq+0x28>)
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	f003 030f 	and.w	r3, r3, #15
 800a6aa:	4906      	ldr	r1, [pc, #24]	@ (800a6c4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800a6ac:	5ccb      	ldrb	r3, [r1, r3]
 800a6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b2:	4a05      	ldr	r2, [pc, #20]	@ (800a6c8 <HAL_RCC_GetHCLKFreq+0x30>)
 800a6b4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a6b6:	4b04      	ldr	r3, [pc, #16]	@ (800a6c8 <HAL_RCC_GetHCLKFreq+0x30>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	46020c00 	.word	0x46020c00
 800a6c4:	08011338 	.word	0x08011338
 800a6c8:	20000000 	.word	0x20000000

0800a6cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a6d0:	f7ff ffe2 	bl	800a698 <HAL_RCC_GetHCLKFreq>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	4b05      	ldr	r3, [pc, #20]	@ (800a6ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	091b      	lsrs	r3, r3, #4
 800a6dc:	f003 0307 	and.w	r3, r3, #7
 800a6e0:	4903      	ldr	r1, [pc, #12]	@ (800a6f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6e2:	5ccb      	ldrb	r3, [r1, r3]
 800a6e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	46020c00 	.word	0x46020c00
 800a6f0:	08011348 	.word	0x08011348

0800a6f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a6f8:	f7ff ffce 	bl	800a698 <HAL_RCC_GetHCLKFreq>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	4b05      	ldr	r3, [pc, #20]	@ (800a714 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	f003 0307 	and.w	r3, r3, #7
 800a708:	4903      	ldr	r1, [pc, #12]	@ (800a718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a70a:	5ccb      	ldrb	r3, [r1, r3]
 800a70c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a710:	4618      	mov	r0, r3
 800a712:	bd80      	pop	{r7, pc}
 800a714:	46020c00 	.word	0x46020c00
 800a718:	08011348 	.word	0x08011348

0800a71c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a720:	f7ff ffba 	bl	800a698 <HAL_RCC_GetHCLKFreq>
 800a724:	4602      	mov	r2, r0
 800a726:	4b05      	ldr	r3, [pc, #20]	@ (800a73c <HAL_RCC_GetPCLK3Freq+0x20>)
 800a728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72a:	091b      	lsrs	r3, r3, #4
 800a72c:	f003 0307 	and.w	r3, r3, #7
 800a730:	4903      	ldr	r1, [pc, #12]	@ (800a740 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a732:	5ccb      	ldrb	r3, [r1, r3]
 800a734:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a738:	4618      	mov	r0, r3
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	46020c00 	.word	0x46020c00
 800a740:	08011348 	.word	0x08011348

0800a744 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a74c:	4b3e      	ldr	r3, [pc, #248]	@ (800a848 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a74e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a752:	f003 0304 	and.w	r3, r3, #4
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a75a:	f7fe fd21 	bl	80091a0 <HAL_PWREx_GetVoltageRange>
 800a75e:	6178      	str	r0, [r7, #20]
 800a760:	e019      	b.n	800a796 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a762:	4b39      	ldr	r3, [pc, #228]	@ (800a848 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a768:	4a37      	ldr	r2, [pc, #220]	@ (800a848 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a76a:	f043 0304 	orr.w	r3, r3, #4
 800a76e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a772:	4b35      	ldr	r3, [pc, #212]	@ (800a848 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a780:	f7fe fd0e 	bl	80091a0 <HAL_PWREx_GetVoltageRange>
 800a784:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a786:	4b30      	ldr	r3, [pc, #192]	@ (800a848 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a78c:	4a2e      	ldr	r2, [pc, #184]	@ (800a848 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a78e:	f023 0304 	bic.w	r3, r3, #4
 800a792:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a79c:	d003      	beq.n	800a7a6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7a4:	d109      	bne.n	800a7ba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ac:	d202      	bcs.n	800a7b4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a7b2:	e033      	b.n	800a81c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a7b8:	e030      	b.n	800a81c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7c0:	d208      	bcs.n	800a7d4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7c8:	d102      	bne.n	800a7d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	613b      	str	r3, [r7, #16]
 800a7ce:	e025      	b.n	800a81c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e035      	b.n	800a840 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7da:	d90f      	bls.n	800a7fc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d109      	bne.n	800a7f6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7e8:	d902      	bls.n	800a7f0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	613b      	str	r3, [r7, #16]
 800a7ee:	e015      	b.n	800a81c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	613b      	str	r3, [r7, #16]
 800a7f4:	e012      	b.n	800a81c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	613b      	str	r3, [r7, #16]
 800a7fa:	e00f      	b.n	800a81c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a802:	d109      	bne.n	800a818 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a80a:	d102      	bne.n	800a812 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800a80c:	2301      	movs	r3, #1
 800a80e:	613b      	str	r3, [r7, #16]
 800a810:	e004      	b.n	800a81c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800a812:	2302      	movs	r3, #2
 800a814:	613b      	str	r3, [r7, #16]
 800a816:	e001      	b.n	800a81c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800a818:	2301      	movs	r3, #1
 800a81a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a81c:	4b0b      	ldr	r3, [pc, #44]	@ (800a84c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f023 020f 	bic.w	r2, r3, #15
 800a824:	4909      	ldr	r1, [pc, #36]	@ (800a84c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	4313      	orrs	r3, r2
 800a82a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a82c:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 030f 	and.w	r3, r3, #15
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	429a      	cmp	r2, r3
 800a838:	d001      	beq.n	800a83e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e000      	b.n	800a840 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	46020c00 	.word	0x46020c00
 800a84c:	40022000 	.word	0x40022000

0800a850 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a854:	b0c8      	sub	sp, #288	@ 0x120
 800a856:	af00      	add	r7, sp, #0
 800a858:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a85c:	2300      	movs	r3, #0
 800a85e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a862:	2300      	movs	r3, #0
 800a864:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f002 0401 	and.w	r4, r2, #1
 800a874:	2500      	movs	r5, #0
 800a876:	ea54 0305 	orrs.w	r3, r4, r5
 800a87a:	d00b      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a87c:	4bd5      	ldr	r3, [pc, #852]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a87e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a882:	f023 0103 	bic.w	r1, r3, #3
 800a886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a88a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a88c:	4ad1      	ldr	r2, [pc, #836]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a88e:	430b      	orrs	r3, r1
 800a890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f002 0802 	and.w	r8, r2, #2
 800a8a0:	f04f 0900 	mov.w	r9, #0
 800a8a4:	ea58 0309 	orrs.w	r3, r8, r9
 800a8a8:	d00b      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a8aa:	4bca      	ldr	r3, [pc, #808]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8b0:	f023 010c 	bic.w	r1, r3, #12
 800a8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ba:	4ac6      	ldr	r2, [pc, #792]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8bc:	430b      	orrs	r3, r1
 800a8be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a8c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	f002 0a04 	and.w	sl, r2, #4
 800a8ce:	f04f 0b00 	mov.w	fp, #0
 800a8d2:	ea5a 030b 	orrs.w	r3, sl, fp
 800a8d6:	d00b      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a8d8:	4bbe      	ldr	r3, [pc, #760]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8de:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a8e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8e8:	4aba      	ldr	r2, [pc, #744]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a8f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f002 0308 	and.w	r3, r2, #8
 800a8fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a900:	2300      	movs	r3, #0
 800a902:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a906:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a90a:	460b      	mov	r3, r1
 800a90c:	4313      	orrs	r3, r2
 800a90e:	d00b      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a910:	4bb0      	ldr	r3, [pc, #704]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a916:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a91a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a91e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a920:	4aac      	ldr	r2, [pc, #688]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a922:	430b      	orrs	r3, r1
 800a924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f002 0310 	and.w	r3, r2, #16
 800a934:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a938:	2300      	movs	r3, #0
 800a93a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a93e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a942:	460b      	mov	r3, r1
 800a944:	4313      	orrs	r3, r2
 800a946:	d00b      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a948:	4ba2      	ldr	r3, [pc, #648]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a94a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a94e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a958:	4a9e      	ldr	r2, [pc, #632]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a95a:	430b      	orrs	r3, r1
 800a95c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a96c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a970:	2300      	movs	r3, #0
 800a972:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a976:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a97a:	460b      	mov	r3, r1
 800a97c:	4313      	orrs	r3, r2
 800a97e:	d00b      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800a980:	4b94      	ldr	r3, [pc, #592]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a982:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a986:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a98a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a98e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a990:	4a90      	ldr	r2, [pc, #576]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a992:	430b      	orrs	r3, r1
 800a994:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f002 0320 	and.w	r3, r2, #32
 800a9a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a9ae:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	d00b      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a9b8:	4b86      	ldr	r3, [pc, #536]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a9be:	f023 0107 	bic.w	r1, r3, #7
 800a9c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9c8:	4a82      	ldr	r2, [pc, #520]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a9d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a9dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	d00b      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a9f0:	4b78      	ldr	r3, [pc, #480]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9f6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800a9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa00:	4a74      	ldr	r2, [pc, #464]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa02:	430b      	orrs	r3, r1
 800aa04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aa08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aa14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aa1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aa22:	460b      	mov	r3, r1
 800aa24:	4313      	orrs	r3, r2
 800aa26:	d00b      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800aa28:	4b6a      	ldr	r3, [pc, #424]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa38:	4a66      	ldr	r2, [pc, #408]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa3a:	430b      	orrs	r3, r1
 800aa3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aa40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa48:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800aa4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa50:	2300      	movs	r3, #0
 800aa52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa56:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	d00b      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800aa60:	4b5c      	ldr	r3, [pc, #368]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800aa6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa70:	4a58      	ldr	r2, [pc, #352]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa72:	430b      	orrs	r3, r1
 800aa74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800aa84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800aa92:	460b      	mov	r3, r1
 800aa94:	4313      	orrs	r3, r2
 800aa96:	d00b      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800aa98:	4b4e      	ldr	r3, [pc, #312]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa9e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800aaa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aaa8:	4a4a      	ldr	r2, [pc, #296]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800aab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800aabc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aac0:	2300      	movs	r3, #0
 800aac2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aac6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aaca:	460b      	mov	r3, r1
 800aacc:	4313      	orrs	r3, r2
 800aace:	d00b      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800aad0:	4b40      	ldr	r3, [pc, #256]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aad6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800aada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aade:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aae0:	4a3c      	ldr	r2, [pc, #240]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aae2:	430b      	orrs	r3, r1
 800aae4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800aae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800aaf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aafe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ab02:	460b      	mov	r3, r1
 800ab04:	4313      	orrs	r3, r2
 800ab06:	d00c      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800ab08:	4b32      	ldr	r3, [pc, #200]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800ab12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab1a:	4a2e      	ldr	r2, [pc, #184]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ab22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800ab2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab32:	2300      	movs	r3, #0
 800ab34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab38:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	d00c      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800ab42:	4b24      	ldr	r3, [pc, #144]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab48:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800ab4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab54:	4a1f      	ldr	r2, [pc, #124]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab56:	430b      	orrs	r3, r1
 800ab58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ab5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ab68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ab72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ab76:	460b      	mov	r3, r1
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	d00c      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800ab7c:	4b15      	ldr	r3, [pc, #84]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab82:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800ab86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab8e:	4a11      	ldr	r2, [pc, #68]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab90:	430b      	orrs	r3, r1
 800ab92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800ab96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800aba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aba6:	2300      	movs	r3, #0
 800aba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800abac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800abb0:	460b      	mov	r3, r1
 800abb2:	4313      	orrs	r3, r2
 800abb4:	d010      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800abb6:	4b07      	ldr	r3, [pc, #28]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800abbc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800abc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abc8:	4a02      	ldr	r2, [pc, #8]	@ (800abd4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abca:	430b      	orrs	r3, r1
 800abcc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800abd0:	e002      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800abd2:	bf00      	nop
 800abd4:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800abd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800abe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800abe8:	2300      	movs	r3, #0
 800abea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800abee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800abf2:	460b      	mov	r3, r1
 800abf4:	4313      	orrs	r3, r2
 800abf6:	d04c      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800abf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac00:	2b80      	cmp	r3, #128	@ 0x80
 800ac02:	d02d      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ac04:	2b80      	cmp	r3, #128	@ 0x80
 800ac06:	d827      	bhi.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ac08:	2b60      	cmp	r3, #96	@ 0x60
 800ac0a:	d02b      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800ac0c:	2b60      	cmp	r3, #96	@ 0x60
 800ac0e:	d823      	bhi.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ac10:	2b40      	cmp	r3, #64	@ 0x40
 800ac12:	d006      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800ac14:	2b40      	cmp	r3, #64	@ 0x40
 800ac16:	d81f      	bhi.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d009      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	d011      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800ac20:	e01a      	b.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac22:	4bc0      	ldr	r3, [pc, #768]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac26:	4abf      	ldr	r2, [pc, #764]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac2c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ac2e:	e01a      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ac30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac34:	3308      	adds	r3, #8
 800ac36:	4618      	mov	r0, r3
 800ac38:	f002 fcd6 	bl	800d5e8 <RCCEx_PLL2_Config>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ac42:	e010      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ac44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac48:	332c      	adds	r3, #44	@ 0x2c
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f002 fd64 	bl	800d718 <RCCEx_PLL3_Config>
 800ac50:	4603      	mov	r3, r0
 800ac52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ac56:	e006      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ac5e:	e002      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800ac60:	bf00      	nop
 800ac62:	e000      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800ac64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac66:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10d      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800ac6e:	4bad      	ldr	r3, [pc, #692]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ac74:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800ac78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac80:	4aa8      	ldr	r2, [pc, #672]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac82:	430b      	orrs	r3, r1
 800ac84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ac88:	e003      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ac8e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ac92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ac9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aca2:	2300      	movs	r3, #0
 800aca4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aca8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800acac:	460b      	mov	r3, r1
 800acae:	4313      	orrs	r3, r2
 800acb0:	d053      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800acb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800acba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acbe:	d033      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800acc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acc4:	d82c      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800acc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acca:	d02f      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800accc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acd0:	d826      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800acd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acd6:	d008      	beq.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800acd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acdc:	d820      	bhi.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00a      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ace2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ace6:	d011      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ace8:	e01a      	b.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800acea:	4b8e      	ldr	r3, [pc, #568]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800acec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acee:	4a8d      	ldr	r2, [pc, #564]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800acf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acf4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800acf6:	e01a      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800acf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acfc:	3308      	adds	r3, #8
 800acfe:	4618      	mov	r0, r3
 800ad00:	f002 fc72 	bl	800d5e8 <RCCEx_PLL2_Config>
 800ad04:	4603      	mov	r3, r0
 800ad06:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ad0a:	e010      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad10:	332c      	adds	r3, #44	@ 0x2c
 800ad12:	4618      	mov	r0, r3
 800ad14:	f002 fd00 	bl	800d718 <RCCEx_PLL3_Config>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ad1e:	e006      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ad26:	e002      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ad28:	bf00      	nop
 800ad2a:	e000      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ad2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad2e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10d      	bne.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800ad36:	4b7b      	ldr	r3, [pc, #492]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad3c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800ad40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad48:	4a76      	ldr	r2, [pc, #472]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad4a:	430b      	orrs	r3, r1
 800ad4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ad50:	e003      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad52:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ad56:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800ad5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ad66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ad74:	460b      	mov	r3, r1
 800ad76:	4313      	orrs	r3, r2
 800ad78:	d046      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800ad7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad82:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ad86:	d028      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ad88:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ad8c:	d821      	bhi.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ad8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad92:	d022      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ad94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad98:	d81b      	bhi.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ad9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad9e:	d01c      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ada0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ada4:	d815      	bhi.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ada6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adaa:	d008      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800adac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adb0:	d80f      	bhi.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d011      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800adb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adba:	d00e      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800adbc:	e009      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800adbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adc2:	3308      	adds	r3, #8
 800adc4:	4618      	mov	r0, r3
 800adc6:	f002 fc0f 	bl	800d5e8 <RCCEx_PLL2_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800add0:	e004      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800add8:	e000      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800adda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800addc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10d      	bne.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800ade4:	4b4f      	ldr	r3, [pc, #316]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ade6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800adea:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800adee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800adf6:	4a4b      	ldr	r2, [pc, #300]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adf8:	430b      	orrs	r3, r1
 800adfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800adfe:	e003      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae00:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae04:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800ae08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ae14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae1e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ae22:	460b      	mov	r3, r1
 800ae24:	4313      	orrs	r3, r2
 800ae26:	d03f      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800ae28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae30:	2b04      	cmp	r3, #4
 800ae32:	d81e      	bhi.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800ae34:	a201      	add	r2, pc, #4	@ (adr r2, 800ae3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800ae36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3a:	bf00      	nop
 800ae3c:	0800ae7b 	.word	0x0800ae7b
 800ae40:	0800ae51 	.word	0x0800ae51
 800ae44:	0800ae5f 	.word	0x0800ae5f
 800ae48:	0800ae7b 	.word	0x0800ae7b
 800ae4c:	0800ae7b 	.word	0x0800ae7b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae50:	4b34      	ldr	r3, [pc, #208]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae54:	4a33      	ldr	r2, [pc, #204]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae5a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800ae5c:	e00e      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ae5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae62:	332c      	adds	r3, #44	@ 0x2c
 800ae64:	4618      	mov	r0, r3
 800ae66:	f002 fc57 	bl	800d718 <RCCEx_PLL3_Config>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ae70:	e004      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ae78:	e000      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800ae7a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ae7c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10d      	bne.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800ae84:	4b27      	ldr	r3, [pc, #156]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae8a:	f023 0107 	bic.w	r1, r3, #7
 800ae8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae96:	4a23      	ldr	r2, [pc, #140]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ae9e:	e003      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aea4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800aea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800aeb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aeba:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800aebe:	460b      	mov	r3, r1
 800aec0:	4313      	orrs	r3, r2
 800aec2:	d04c      	beq.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800aec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aecc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aed0:	d02a      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800aed2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aed6:	d821      	bhi.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800aed8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aedc:	d026      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800aede:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aee2:	d81b      	bhi.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800aee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aee8:	d00e      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800aeea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeee:	d815      	bhi.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d01d      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800aef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aef8:	d110      	bne.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aefa:	4b0a      	ldr	r3, [pc, #40]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aefc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefe:	4a09      	ldr	r2, [pc, #36]	@ (800af24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af04:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800af06:	e014      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af0c:	332c      	adds	r3, #44	@ 0x2c
 800af0e:	4618      	mov	r0, r3
 800af10:	f002 fc02 	bl	800d718 <RCCEx_PLL3_Config>
 800af14:	4603      	mov	r3, r0
 800af16:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af1a:	e00a      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af22:	e006      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800af24:	46020c00 	.word	0x46020c00
        break;
 800af28:	bf00      	nop
 800af2a:	e002      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800af2c:	bf00      	nop
 800af2e:	e000      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800af30:	bf00      	nop
    }
    if (ret == HAL_OK)
 800af32:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10d      	bne.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800af3a:	4baf      	ldr	r3, [pc, #700]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af40:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800af44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800af4c:	4aaa      	ldr	r2, [pc, #680]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af4e:	430b      	orrs	r3, r1
 800af50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800af54:	e003      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af56:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af5a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800af6a:	673b      	str	r3, [r7, #112]	@ 0x70
 800af6c:	2300      	movs	r3, #0
 800af6e:	677b      	str	r3, [r7, #116]	@ 0x74
 800af70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800af74:	460b      	mov	r3, r1
 800af76:	4313      	orrs	r3, r2
 800af78:	f000 80b5 	beq.w	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af7c:	2300      	movs	r3, #0
 800af7e:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af82:	4b9d      	ldr	r3, [pc, #628]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af88:	f003 0304 	and.w	r3, r3, #4
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d113      	bne.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af90:	4b99      	ldr	r3, [pc, #612]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af96:	4a98      	ldr	r2, [pc, #608]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af98:	f043 0304 	orr.w	r3, r3, #4
 800af9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800afa0:	4b95      	ldr	r3, [pc, #596]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afa6:	f003 0304 	and.w	r3, r3, #4
 800afaa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800afae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800afb2:	2301      	movs	r3, #1
 800afb4:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800afb8:	4b90      	ldr	r3, [pc, #576]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800afba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afbc:	4a8f      	ldr	r2, [pc, #572]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800afbe:	f043 0301 	orr.w	r3, r3, #1
 800afc2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afc4:	f7f7 fe42 	bl	8002c4c <HAL_GetTick>
 800afc8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800afcc:	e00b      	b.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afce:	f7f7 fe3d 	bl	8002c4c <HAL_GetTick>
 800afd2:	4602      	mov	r2, r0
 800afd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d903      	bls.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800afde:	2303      	movs	r3, #3
 800afe0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800afe4:	e005      	b.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800afe6:	4b85      	ldr	r3, [pc, #532]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800afe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d0ed      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800aff2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d165      	bne.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800affa:	4b7f      	ldr	r3, [pc, #508]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800affc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b000:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b004:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d023      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b014:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d01b      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b020:	4b75      	ldr	r3, [pc, #468]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b02a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b02e:	4b72      	ldr	r3, [pc, #456]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b034:	4a70      	ldr	r2, [pc, #448]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b03a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b03e:	4b6e      	ldr	r3, [pc, #440]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b044:	4a6c      	ldr	r2, [pc, #432]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b04a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b04e:	4a6a      	ldr	r2, [pc, #424]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b050:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b054:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d019      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b064:	f7f7 fdf2 	bl	8002c4c <HAL_GetTick>
 800b068:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b06c:	e00d      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b06e:	f7f7 fded 	bl	8002c4c <HAL_GetTick>
 800b072:	4602      	mov	r2, r0
 800b074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b078:	1ad2      	subs	r2, r2, r3
 800b07a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b07e:	429a      	cmp	r2, r3
 800b080:	d903      	bls.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b088:	e006      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b08a:	4b5b      	ldr	r3, [pc, #364]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b08c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	2b00      	cmp	r3, #0
 800b096:	d0ea      	beq.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b098:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10d      	bne.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b0a0:	4b55      	ldr	r3, [pc, #340]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b0b2:	4a51      	ldr	r2, [pc, #324]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0b4:	430b      	orrs	r3, r1
 800b0b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b0ba:	e008      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0c0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b0c4:	e003      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0ca:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b0ce:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d107      	bne.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0d6:	4b48      	ldr	r3, [pc, #288]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b0dc:	4a46      	ldr	r2, [pc, #280]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0de:	f023 0304 	bic.w	r3, r3, #4
 800b0e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b0e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b0f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b0f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	4313      	orrs	r3, r2
 800b100:	d042      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b106:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b10a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b10e:	d022      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b110:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b114:	d81b      	bhi.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b116:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b11a:	d011      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b11c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b120:	d815      	bhi.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d019      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b126:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b12a:	d110      	bne.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b12c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b130:	3308      	adds	r3, #8
 800b132:	4618      	mov	r0, r3
 800b134:	f002 fa58 	bl	800d5e8 <RCCEx_PLL2_Config>
 800b138:	4603      	mov	r3, r0
 800b13a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b13e:	e00d      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b140:	4b2d      	ldr	r3, [pc, #180]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b144:	4a2c      	ldr	r2, [pc, #176]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b14a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b14c:	e006      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b154:	e002      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b156:	bf00      	nop
 800b158:	e000      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b15a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b15c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10d      	bne.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b164:	4b24      	ldr	r3, [pc, #144]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b16a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b16e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b172:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b176:	4a20      	ldr	r2, [pc, #128]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b178:	430b      	orrs	r3, r1
 800b17a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b17e:	e003      	b.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b180:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b184:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b194:	663b      	str	r3, [r7, #96]	@ 0x60
 800b196:	2300      	movs	r3, #0
 800b198:	667b      	str	r3, [r7, #100]	@ 0x64
 800b19a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	d031      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b1a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b1ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1b0:	d00b      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b1b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1b6:	d804      	bhi.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d008      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b1bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1c0:	d007      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b1c8:	e004      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b1ca:	bf00      	nop
 800b1cc:	e002      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b1ce:	bf00      	nop
 800b1d0:	e000      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b1d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b1d4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d111      	bne.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b1dc:	4b06      	ldr	r3, [pc, #24]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b1de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b1ee:	4a02      	ldr	r2, [pc, #8]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b1f0:	430b      	orrs	r3, r1
 800b1f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b1f6:	e007      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b1f8:	46020c00 	.word	0x46020c00
 800b1fc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b200:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b204:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b214:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b216:	2300      	movs	r3, #0
 800b218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b21a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b21e:	460b      	mov	r3, r1
 800b220:	4313      	orrs	r3, r2
 800b222:	d00c      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b224:	4bb2      	ldr	r3, [pc, #712]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b226:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b22a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b22e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b236:	4aae      	ldr	r2, [pc, #696]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b238:	430b      	orrs	r3, r1
 800b23a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b24a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b24c:	2300      	movs	r3, #0
 800b24e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b250:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b254:	460b      	mov	r3, r1
 800b256:	4313      	orrs	r3, r2
 800b258:	d019      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b25a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b25e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b266:	d105      	bne.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b268:	4ba1      	ldr	r3, [pc, #644]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26c:	4aa0      	ldr	r2, [pc, #640]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b26e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b272:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b274:	4b9e      	ldr	r3, [pc, #632]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b276:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b27a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b27e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b282:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b286:	4a9a      	ldr	r2, [pc, #616]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b288:	430b      	orrs	r3, r1
 800b28a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b28e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b29a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b29c:	2300      	movs	r3, #0
 800b29e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	d00c      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b2aa:	4b91      	ldr	r3, [pc, #580]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2b0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b2b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b2bc:	4a8c      	ldr	r2, [pc, #560]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2be:	430b      	orrs	r3, r1
 800b2c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b2d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	d00c      	beq.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b2e0:	4b83      	ldr	r3, [pc, #524]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b2ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b2f2:	4a7f      	ldr	r2, [pc, #508]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2f4:	430b      	orrs	r3, r1
 800b2f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b302:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b306:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b308:	2300      	movs	r3, #0
 800b30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b30c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b310:	460b      	mov	r3, r1
 800b312:	4313      	orrs	r3, r2
 800b314:	d00c      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b316:	4b76      	ldr	r3, [pc, #472]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b31c:	f023 0118 	bic.w	r1, r3, #24
 800b320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b324:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b328:	4a71      	ldr	r2, [pc, #452]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b32a:	430b      	orrs	r3, r1
 800b32c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b33c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b33e:	2300      	movs	r3, #0
 800b340:	637b      	str	r3, [r7, #52]	@ 0x34
 800b342:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b346:	460b      	mov	r3, r1
 800b348:	4313      	orrs	r3, r2
 800b34a:	d032      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b34c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b350:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b354:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b358:	d105      	bne.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b35a:	4b65      	ldr	r3, [pc, #404]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b35e:	4a64      	ldr	r2, [pc, #400]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b364:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b36a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b36e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b372:	d108      	bne.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b378:	3308      	adds	r3, #8
 800b37a:	4618      	mov	r0, r3
 800b37c:	f002 f934 	bl	800d5e8 <RCCEx_PLL2_Config>
 800b380:	4603      	mov	r3, r0
 800b382:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b386:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10d      	bne.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b38e:	4b58      	ldr	r3, [pc, #352]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b394:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b39c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b3a0:	4a53      	ldr	r2, [pc, #332]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3a2:	430b      	orrs	r3, r1
 800b3a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b3a8:	e003      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3aa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3ae:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b3be:	f003 0301 	and.w	r3, r3, #1
 800b3c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	d04a      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b3ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b3d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b3da:	d01e      	beq.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b3dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b3e0:	d825      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b3e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b3e6:	d00e      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b3e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b3ec:	d81f      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d021      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b3f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3f6:	d11a      	bne.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3f8:	4b3d      	ldr	r3, [pc, #244]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fc:	4a3c      	ldr	r2, [pc, #240]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b402:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b404:	e018      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b40a:	3308      	adds	r3, #8
 800b40c:	4618      	mov	r0, r3
 800b40e:	f002 f8eb 	bl	800d5e8 <RCCEx_PLL2_Config>
 800b412:	4603      	mov	r3, r0
 800b414:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b418:	e00e      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b41a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41e:	332c      	adds	r3, #44	@ 0x2c
 800b420:	4618      	mov	r0, r3
 800b422:	f002 f979 	bl	800d718 <RCCEx_PLL3_Config>
 800b426:	4603      	mov	r3, r0
 800b428:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b42c:	e004      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b434:	e000      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800b436:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b438:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10d      	bne.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800b440:	4b2b      	ldr	r3, [pc, #172]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b442:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b446:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b44e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b452:	4927      	ldr	r1, [pc, #156]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b454:	4313      	orrs	r3, r2
 800b456:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b45a:	e003      	b.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b460:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800b464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b470:	623b      	str	r3, [r7, #32]
 800b472:	2300      	movs	r3, #0
 800b474:	627b      	str	r3, [r7, #36]	@ 0x24
 800b476:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b47a:	460b      	mov	r3, r1
 800b47c:	4313      	orrs	r3, r2
 800b47e:	d03d      	beq.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800b480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b488:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b48c:	d00e      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800b48e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b492:	d815      	bhi.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b494:	2b00      	cmp	r3, #0
 800b496:	d017      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b49c:	d110      	bne.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b49e:	4b14      	ldr	r3, [pc, #80]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a2:	4a13      	ldr	r2, [pc, #76]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4a8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b4aa:	e00e      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b4ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f002 f898 	bl	800d5e8 <RCCEx_PLL2_Config>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b4be:	e004      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4c6:	e000      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b4ca:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d110      	bne.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b4d2:	4b07      	ldr	r3, [pc, #28]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b4d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4e4:	4902      	ldr	r1, [pc, #8]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b4ec:	e006      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b4ee:	bf00      	nop
 800b4f0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4f8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b4fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b508:	61bb      	str	r3, [r7, #24]
 800b50a:	2300      	movs	r3, #0
 800b50c:	61fb      	str	r3, [r7, #28]
 800b50e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b512:	460b      	mov	r3, r1
 800b514:	4313      	orrs	r3, r2
 800b516:	d00c      	beq.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b518:	4b68      	ldr	r3, [pc, #416]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b51a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b51e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b526:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b52a:	4964      	ldr	r1, [pc, #400]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53a:	2100      	movs	r1, #0
 800b53c:	6139      	str	r1, [r7, #16]
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b548:	460b      	mov	r3, r1
 800b54a:	4313      	orrs	r3, r2
 800b54c:	d036      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800b54e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b552:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00c      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b55a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b55e:	d113      	bne.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b564:	3308      	adds	r3, #8
 800b566:	4618      	mov	r0, r3
 800b568:	f002 f83e 	bl	800d5e8 <RCCEx_PLL2_Config>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b572:	e00d      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b578:	332c      	adds	r3, #44	@ 0x2c
 800b57a:	4618      	mov	r0, r3
 800b57c:	f002 f8cc 	bl	800d718 <RCCEx_PLL3_Config>
 800b580:	4603      	mov	r3, r0
 800b582:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b586:	e003      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b58e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b590:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10d      	bne.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800b598:	4b48      	ldr	r3, [pc, #288]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b59a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b59e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b5aa:	4944      	ldr	r1, [pc, #272]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b5b2:	e003      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5b8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	60b9      	str	r1, [r7, #8]
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	60fb      	str	r3, [r7, #12]
 800b5ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	d024      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800b5d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d108      	bne.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e8:	332c      	adds	r3, #44	@ 0x2c
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f002 f894 	bl	800d718 <RCCEx_PLL3_Config>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800b5f6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10d      	bne.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800b5fe:	4b2f      	ldr	r3, [pc, #188]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b600:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b604:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b60c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b610:	492a      	ldr	r1, [pc, #168]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b612:	4313      	orrs	r3, r2
 800b614:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b618:	e003      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b61a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b61e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800b622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	2100      	movs	r1, #0
 800b62c:	6039      	str	r1, [r7, #0]
 800b62e:	f003 0308 	and.w	r3, r3, #8
 800b632:	607b      	str	r3, [r7, #4]
 800b634:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b638:	460b      	mov	r3, r1
 800b63a:	4313      	orrs	r3, r2
 800b63c:	d036      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800b63e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b642:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b646:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b64a:	d00d      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800b64c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b650:	d811      	bhi.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b652:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b656:	d012      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b658:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b65c:	d80b      	bhi.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00d      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b666:	d106      	bne.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b668:	4b14      	ldr	r3, [pc, #80]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b66c:	4a13      	ldr	r2, [pc, #76]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b66e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b672:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800b674:	e004      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b67c:	e000      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800b67e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b680:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10d      	bne.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800b688:	4b0c      	ldr	r3, [pc, #48]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b68a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b68e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b696:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b69a:	4908      	ldr	r1, [pc, #32]	@ (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b69c:	4313      	orrs	r3, r2
 800b69e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b6a2:	e003      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6a4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6a8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b6ac:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6bc:	46020c00 	.word	0x46020c00

0800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b089      	sub	sp, #36	@ 0x24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b6c8:	4ba6      	ldr	r3, [pc, #664]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b6d2:	4ba4      	ldr	r3, [pc, #656]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d6:	f003 0303 	and.w	r3, r3, #3
 800b6da:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b6dc:	4ba1      	ldr	r3, [pc, #644]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e0:	0a1b      	lsrs	r3, r3, #8
 800b6e2:	f003 030f 	and.w	r3, r3, #15
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b6ea:	4b9e      	ldr	r3, [pc, #632]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ee:	091b      	lsrs	r3, r3, #4
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b6f6:	4b9b      	ldr	r3, [pc, #620]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6fa:	08db      	lsrs	r3, r3, #3
 800b6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	fb02 f303 	mul.w	r3, r2, r3
 800b706:	ee07 3a90 	vmov	s15, r3
 800b70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	2b03      	cmp	r3, #3
 800b716:	d062      	beq.n	800b7de <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	2b03      	cmp	r3, #3
 800b71c:	f200 8081 	bhi.w	800b822 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d024      	beq.n	800b770 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d17a      	bne.n	800b822 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	ee07 3a90 	vmov	s15, r3
 800b732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b736:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b968 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b73e:	4b89      	ldr	r3, [pc, #548]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b746:	ee07 3a90 	vmov	s15, r3
 800b74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b74e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b752:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b96c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b756:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b75e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b762:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b76a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b76e:	e08f      	b.n	800b890 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b770:	4b7c      	ldr	r3, [pc, #496]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d005      	beq.n	800b788 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800b77c:	4b79      	ldr	r3, [pc, #484]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	0f1b      	lsrs	r3, r3, #28
 800b782:	f003 030f 	and.w	r3, r3, #15
 800b786:	e006      	b.n	800b796 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800b788:	4b76      	ldr	r3, [pc, #472]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b78a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b78e:	041b      	lsls	r3, r3, #16
 800b790:	0f1b      	lsrs	r3, r3, #28
 800b792:	f003 030f 	and.w	r3, r3, #15
 800b796:	4a76      	ldr	r2, [pc, #472]	@ (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b79c:	ee07 3a90 	vmov	s15, r3
 800b7a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	ee07 3a90 	vmov	s15, r3
 800b7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	ee07 3a90 	vmov	s15, r3
 800b7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7bc:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7c0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b96c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b7c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b7d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7dc:	e058      	b.n	800b890 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	ee07 3a90 	vmov	s15, r3
 800b7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b968 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b7ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7f0:	4b5c      	ldr	r3, [pc, #368]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f8:	ee07 3a90 	vmov	s15, r3
 800b7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b800:	ed97 6a02 	vldr	s12, [r7, #8]
 800b804:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b96c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b808:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b80c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b810:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b814:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b81c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b820:	e036      	b.n	800b890 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b822:	4b50      	ldr	r3, [pc, #320]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d005      	beq.n	800b83a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800b82e:	4b4d      	ldr	r3, [pc, #308]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	0f1b      	lsrs	r3, r3, #28
 800b834:	f003 030f 	and.w	r3, r3, #15
 800b838:	e006      	b.n	800b848 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800b83a:	4b4a      	ldr	r3, [pc, #296]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b83c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b840:	041b      	lsls	r3, r3, #16
 800b842:	0f1b      	lsrs	r3, r3, #28
 800b844:	f003 030f 	and.w	r3, r3, #15
 800b848:	4a49      	ldr	r2, [pc, #292]	@ (800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b84a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	ee07 3a90 	vmov	s15, r3
 800b86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b86e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b872:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b96c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b87e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b882:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b88a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b88e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800b890:	4b34      	ldr	r3, [pc, #208]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d017      	beq.n	800b8cc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b89c:	4b31      	ldr	r3, [pc, #196]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8a0:	0a5b      	lsrs	r3, r3, #9
 800b8a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8a6:	ee07 3a90 	vmov	s15, r3
 800b8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800b8ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b8b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c2:	ee17 2a90 	vmov	r2, s15
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	e002      	b.n	800b8d2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b8d2:	4b24      	ldr	r3, [pc, #144]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d017      	beq.n	800b90e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b8de:	4b21      	ldr	r3, [pc, #132]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8e2:	0c1b      	lsrs	r3, r3, #16
 800b8e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8e8:	ee07 3a90 	vmov	s15, r3
 800b8ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b8f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8f4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b8f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b904:	ee17 2a90 	vmov	r2, s15
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	605a      	str	r2, [r3, #4]
 800b90c:	e002      	b.n	800b914 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b914:	4b13      	ldr	r3, [pc, #76]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d017      	beq.n	800b950 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b920:	4b10      	ldr	r3, [pc, #64]	@ (800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b924:	0e1b      	lsrs	r3, r3, #24
 800b926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800b932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b936:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b946:	ee17 2a90 	vmov	r2, s15
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b94e:	e002      	b.n	800b956 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	609a      	str	r2, [r3, #8]
}
 800b956:	bf00      	nop
 800b958:	3724      	adds	r7, #36	@ 0x24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	46020c00 	.word	0x46020c00
 800b968:	4b742400 	.word	0x4b742400
 800b96c:	46000000 	.word	0x46000000
 800b970:	08011350 	.word	0x08011350

0800b974 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b974:	b480      	push	{r7}
 800b976:	b089      	sub	sp, #36	@ 0x24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b97c:	4ba6      	ldr	r3, [pc, #664]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b97e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b984:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b986:	4ba4      	ldr	r3, [pc, #656]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800b990:	4ba1      	ldr	r3, [pc, #644]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b994:	0a1b      	lsrs	r3, r3, #8
 800b996:	f003 030f 	and.w	r3, r3, #15
 800b99a:	3301      	adds	r3, #1
 800b99c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800b99e:	4b9e      	ldr	r3, [pc, #632]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a2:	091b      	lsrs	r3, r3, #4
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800b9aa:	4b9b      	ldr	r3, [pc, #620]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ae:	08db      	lsrs	r3, r3, #3
 800b9b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ba:	ee07 3a90 	vmov	s15, r3
 800b9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2b03      	cmp	r3, #3
 800b9ca:	d062      	beq.n	800ba92 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	f200 8081 	bhi.w	800bad6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d024      	beq.n	800ba24 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d17a      	bne.n	800bad6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	ee07 3a90 	vmov	s15, r3
 800b9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ea:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800b9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9f2:	4b89      	ldr	r3, [pc, #548]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba02:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba06:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bc20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ba0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba22:	e08f      	b.n	800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ba24:	4b7c      	ldr	r3, [pc, #496]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d005      	beq.n	800ba3c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800ba30:	4b79      	ldr	r3, [pc, #484]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	0f1b      	lsrs	r3, r3, #28
 800ba36:	f003 030f 	and.w	r3, r3, #15
 800ba3a:	e006      	b.n	800ba4a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800ba3c:	4b76      	ldr	r3, [pc, #472]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba42:	041b      	lsls	r3, r3, #16
 800ba44:	0f1b      	lsrs	r3, r3, #28
 800ba46:	f003 030f 	and.w	r3, r3, #15
 800ba4a:	4a76      	ldr	r2, [pc, #472]	@ (800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ba4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba50:	ee07 3a90 	vmov	s15, r3
 800ba54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	ee07 3a90 	vmov	s15, r3
 800ba6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba70:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba74:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bc20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ba78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba84:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ba88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba90:	e058      	b.n	800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	ee07 3a90 	vmov	s15, r3
 800ba98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800baa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baa4:	4b5c      	ldr	r3, [pc, #368]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800baa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baac:	ee07 3a90 	vmov	s15, r3
 800bab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bab4:	ed97 6a02 	vldr	s12, [r7, #8]
 800bab8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bc20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800babc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bac4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bacc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bad0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bad4:	e036      	b.n	800bb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800bad6:	4b50      	ldr	r3, [pc, #320]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d005      	beq.n	800baee <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800bae2:	4b4d      	ldr	r3, [pc, #308]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	0f1b      	lsrs	r3, r3, #28
 800bae8:	f003 030f 	and.w	r3, r3, #15
 800baec:	e006      	b.n	800bafc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800baee:	4b4a      	ldr	r3, [pc, #296]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800baf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800baf4:	041b      	lsls	r3, r3, #16
 800baf6:	0f1b      	lsrs	r3, r3, #28
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	4a49      	ldr	r2, [pc, #292]	@ (800bc24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800bafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	ee07 3a90 	vmov	s15, r3
 800bb10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	ee07 3a90 	vmov	s15, r3
 800bb1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb22:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb26:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bc20 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bb2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb36:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800bb3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb42:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800bb44:	4b34      	ldr	r3, [pc, #208]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d017      	beq.n	800bb80 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bb50:	4b31      	ldr	r3, [pc, #196]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb54:	0a5b      	lsrs	r3, r3, #9
 800bb56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800bb62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bb6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb76:	ee17 2a90 	vmov	r2, s15
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	e002      	b.n	800bb86 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800bb86:	4b24      	ldr	r3, [pc, #144]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d017      	beq.n	800bbc2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bb92:	4b21      	ldr	r3, [pc, #132]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb96:	0c1b      	lsrs	r3, r3, #16
 800bb98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb9c:	ee07 3a90 	vmov	s15, r3
 800bba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800bba4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bba8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bbac:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbb8:	ee17 2a90 	vmov	r2, s15
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	605a      	str	r2, [r3, #4]
 800bbc0:	e002      	b.n	800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800bbc8:	4b13      	ldr	r3, [pc, #76]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bbca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d017      	beq.n	800bc04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bbd4:	4b10      	ldr	r3, [pc, #64]	@ (800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bbd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd8:	0e1b      	lsrs	r3, r3, #24
 800bbda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbde:	ee07 3a90 	vmov	s15, r3
 800bbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800bbe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bbee:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbfa:	ee17 2a90 	vmov	r2, s15
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc02:	e002      	b.n	800bc0a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	609a      	str	r2, [r3, #8]
}
 800bc0a:	bf00      	nop
 800bc0c:	3724      	adds	r7, #36	@ 0x24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	46020c00 	.word	0x46020c00
 800bc1c:	4b742400 	.word	0x4b742400
 800bc20:	46000000 	.word	0x46000000
 800bc24:	08011350 	.word	0x08011350

0800bc28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b089      	sub	sp, #36	@ 0x24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800bc30:	4ba6      	ldr	r3, [pc, #664]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc38:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800bc3a:	4ba4      	ldr	r3, [pc, #656]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc3e:	f003 0303 	and.w	r3, r3, #3
 800bc42:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800bc44:	4ba1      	ldr	r3, [pc, #644]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc48:	0a1b      	lsrs	r3, r3, #8
 800bc4a:	f003 030f 	and.w	r3, r3, #15
 800bc4e:	3301      	adds	r3, #1
 800bc50:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800bc52:	4b9e      	ldr	r3, [pc, #632]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc56:	091b      	lsrs	r3, r3, #4
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800bc5e:	4b9b      	ldr	r3, [pc, #620]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc62:	08db      	lsrs	r3, r3, #3
 800bc64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	fb02 f303 	mul.w	r3, r2, r3
 800bc6e:	ee07 3a90 	vmov	s15, r3
 800bc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc76:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d062      	beq.n	800bd46 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	f200 8081 	bhi.w	800bd8a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d024      	beq.n	800bcd8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d17a      	bne.n	800bd8a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	ee07 3a90 	vmov	s15, r3
 800bc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca6:	4b89      	ldr	r3, [pc, #548]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcae:	ee07 3a90 	vmov	s15, r3
 800bcb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcba:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bcbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bcc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bcce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcd2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800bcd6:	e08f      	b.n	800bdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bcd8:	4b7c      	ldr	r3, [pc, #496]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d005      	beq.n	800bcf0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800bce4:	4b79      	ldr	r3, [pc, #484]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	0f1b      	lsrs	r3, r3, #28
 800bcea:	f003 030f 	and.w	r3, r3, #15
 800bcee:	e006      	b.n	800bcfe <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800bcf0:	4b76      	ldr	r3, [pc, #472]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bcf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bcf6:	041b      	lsls	r3, r3, #16
 800bcf8:	0f1b      	lsrs	r3, r3, #28
 800bcfa:	f003 030f 	and.w	r3, r3, #15
 800bcfe:	4a76      	ldr	r2, [pc, #472]	@ (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd04:	ee07 3a90 	vmov	s15, r3
 800bd08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	ee07 3a90 	vmov	s15, r3
 800bd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	ee07 3a90 	vmov	s15, r3
 800bd20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd24:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd28:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bd2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd38:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bd3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd44:	e058      	b.n	800bdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	ee07 3a90 	vmov	s15, r3
 800bd4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd50:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bd54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd58:	4b5c      	ldr	r3, [pc, #368]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd60:	ee07 3a90 	vmov	s15, r3
 800bd64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd68:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd6c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bd70:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bd74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bd80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd88:	e036      	b.n	800bdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bd8a:	4b50      	ldr	r3, [pc, #320]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d005      	beq.n	800bda2 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800bd96:	4b4d      	ldr	r3, [pc, #308]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	0f1b      	lsrs	r3, r3, #28
 800bd9c:	f003 030f 	and.w	r3, r3, #15
 800bda0:	e006      	b.n	800bdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800bda2:	4b4a      	ldr	r3, [pc, #296]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bda4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bda8:	041b      	lsls	r3, r3, #16
 800bdaa:	0f1b      	lsrs	r3, r3, #28
 800bdac:	f003 030f 	and.w	r3, r3, #15
 800bdb0:	4a49      	ldr	r2, [pc, #292]	@ (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bdb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdb6:	ee07 3a90 	vmov	s15, r3
 800bdba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	ee07 3a90 	vmov	s15, r3
 800bdc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdd6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdda:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bdde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bde2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bde6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bdee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdf6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800bdf8:	4b34      	ldr	r3, [pc, #208]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bdfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d017      	beq.n	800be34 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be04:	4b31      	ldr	r3, [pc, #196]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be08:	0a5b      	lsrs	r3, r3, #9
 800be0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800be16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be1a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be2a:	ee17 2a90 	vmov	r2, s15
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	e002      	b.n	800be3a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800be3a:	4b24      	ldr	r3, [pc, #144]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be42:	2b00      	cmp	r3, #0
 800be44:	d017      	beq.n	800be76 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be46:	4b21      	ldr	r3, [pc, #132]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be4a:	0c1b      	lsrs	r3, r3, #16
 800be4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be50:	ee07 3a90 	vmov	s15, r3
 800be54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800be58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be5c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be60:	edd7 6a07 	vldr	s13, [r7, #28]
 800be64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be6c:	ee17 2a90 	vmov	r2, s15
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	605a      	str	r2, [r3, #4]
 800be74:	e002      	b.n	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800be7c:	4b13      	ldr	r3, [pc, #76]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800be84:	2b00      	cmp	r3, #0
 800be86:	d017      	beq.n	800beb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be88:	4b10      	ldr	r3, [pc, #64]	@ (800becc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be8c:	0e1b      	lsrs	r3, r3, #24
 800be8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800be9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bea2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beae:	ee17 2a90 	vmov	r2, s15
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800beb6:	e002      	b.n	800bebe <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	609a      	str	r2, [r3, #8]
}
 800bebe:	bf00      	nop
 800bec0:	3724      	adds	r7, #36	@ 0x24
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	46020c00 	.word	0x46020c00
 800bed0:	4b742400 	.word	0x4b742400
 800bed4:	46000000 	.word	0x46000000
 800bed8:	08011350 	.word	0x08011350

0800bedc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b08e      	sub	sp, #56	@ 0x38
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800bee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beea:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800beee:	430b      	orrs	r3, r1
 800bef0:	d145      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800bef2:	4ba7      	ldr	r3, [pc, #668]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bef8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800befc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800befe:	4ba4      	ldr	r3, [pc, #656]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf04:	f003 0302 	and.w	r3, r3, #2
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d108      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf12:	d104      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800bf14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf1a:	f001 bb5a 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800bf1e:	4b9c      	ldr	r3, [pc, #624]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf2c:	d114      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf34:	d110      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf36:	4b96      	ldr	r3, [pc, #600]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf44:	d103      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800bf46:	23fa      	movs	r3, #250	@ 0xfa
 800bf48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf4a:	f001 bb42 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bf4e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bf52:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf54:	f001 bb3d 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800bf58:	4b8d      	ldr	r3, [pc, #564]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf64:	d107      	bne.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf6c:	d103      	bne.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800bf6e:	4b89      	ldr	r3, [pc, #548]	@ (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800bf70:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf72:	f001 bb2e 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf7a:	f001 bb2a 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bf7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf82:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bf86:	430b      	orrs	r3, r1
 800bf88:	d151      	bne.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800bf8a:	4b81      	ldr	r3, [pc, #516]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf90:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800bf94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf98:	2b80      	cmp	r3, #128	@ 0x80
 800bf9a:	d035      	beq.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9e:	2b80      	cmp	r3, #128	@ 0x80
 800bfa0:	d841      	bhi.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa4:	2b60      	cmp	r3, #96	@ 0x60
 800bfa6:	d02a      	beq.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfaa:	2b60      	cmp	r3, #96	@ 0x60
 800bfac:	d83b      	bhi.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb0:	2b40      	cmp	r3, #64	@ 0x40
 800bfb2:	d009      	beq.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb6:	2b40      	cmp	r3, #64	@ 0x40
 800bfb8:	d835      	bhi.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00c      	beq.n	800bfda <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc2:	2b20      	cmp	r3, #32
 800bfc4:	d012      	beq.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800bfc6:	e02e      	b.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7ff fb77 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfd6:	f001 bafc 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfda:	f107 0318 	add.w	r3, r7, #24
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7ff fcc8 	bl	800b974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfe8:	f001 baf3 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfec:	f107 030c 	add.w	r3, r7, #12
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff fe19 	bl	800bc28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bffa:	f001 baea 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bffe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c002:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c004:	f001 bae5 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c008:	4b61      	ldr	r3, [pc, #388]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c014:	d103      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c016:	4b60      	ldr	r3, [pc, #384]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c018:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c01a:	f001 bada 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c01e:	2300      	movs	r3, #0
 800c020:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c022:	f001 bad6 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c02a:	f001 bad2 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c02e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c032:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c036:	430b      	orrs	r3, r1
 800c038:	d158      	bne.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c03a:	4b55      	ldr	r3, [pc, #340]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c03c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c040:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c044:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c04c:	d03b      	beq.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c054:	d846      	bhi.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c05c:	d02e      	beq.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c060:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c064:	d83e      	bhi.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c06c:	d00b      	beq.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c074:	d836      	bhi.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00d      	beq.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c082:	d012      	beq.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c084:	e02e      	b.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff fb18 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c094:	f001 ba9d 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c098:	f107 0318 	add.w	r3, r7, #24
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7ff fc69 	bl	800b974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0a6:	f001 ba94 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0aa:	f107 030c 	add.w	r3, r7, #12
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff fdba 	bl	800bc28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0b8:	f001 ba8b 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c0bc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c0c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0c2:	f001 ba86 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0c6:	4b32      	ldr	r3, [pc, #200]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0d2:	d103      	bne.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c0d4:	4b30      	ldr	r3, [pc, #192]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c0d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c0d8:	f001 ba7b 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0e0:	f001 ba77 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0e8:	f001 ba73 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c0ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0f0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c0f4:	430b      	orrs	r3, r1
 800c0f6:	d126      	bne.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c0f8:	4b25      	ldr	r3, [pc, #148]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c0fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c0fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c102:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c104:	4b22      	ldr	r3, [pc, #136]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c10c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c110:	d106      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c114:	2b00      	cmp	r3, #0
 800c116:	d103      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c118:	4b1f      	ldr	r3, [pc, #124]	@ (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c11c:	f001 ba59 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c120:	4b1b      	ldr	r3, [pc, #108]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c12c:	d107      	bne.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c134:	d103      	bne.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c136:	4b19      	ldr	r3, [pc, #100]	@ (800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c138:	637b      	str	r3, [r7, #52]	@ 0x34
 800c13a:	f001 ba4a 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c13e:	2300      	movs	r3, #0
 800c140:	637b      	str	r3, [r7, #52]	@ 0x34
 800c142:	f001 ba46 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c14a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c14e:	430b      	orrs	r3, r1
 800c150:	d16e      	bne.n	800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c152:	4b0f      	ldr	r3, [pc, #60]	@ (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c158:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c15c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c160:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c164:	d03d      	beq.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c168:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c16c:	d85c      	bhi.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c174:	d014      	beq.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c178:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c17c:	d854      	bhi.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	2b00      	cmp	r3, #0
 800c182:	d01f      	beq.n	800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c186:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c18a:	d012      	beq.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c18c:	e04c      	b.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c18e:	bf00      	nop
 800c190:	46020c00 	.word	0x46020c00
 800c194:	0007a120 	.word	0x0007a120
 800c198:	00f42400 	.word	0x00f42400
 800c19c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7ff fa8b 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1ae:	f001 ba10 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1b2:	f107 0318 	add.w	r3, r7, #24
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff fbdc 	bl	800b974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1c0:	f001 ba07 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c1c4:	4ba7      	ldr	r3, [pc, #668]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1d0:	d103      	bne.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c1d2:	4ba5      	ldr	r3, [pc, #660]	@ (800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c1d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c1d6:	f001 b9fc 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1de:	f001 b9f8 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c1e2:	4ba0      	ldr	r3, [pc, #640]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 0320 	and.w	r3, r3, #32
 800c1ea:	2b20      	cmp	r3, #32
 800c1ec:	d118      	bne.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c1ee:	4b9d      	ldr	r3, [pc, #628]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d005      	beq.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c1fa:	4b9a      	ldr	r3, [pc, #616]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	0e1b      	lsrs	r3, r3, #24
 800c200:	f003 030f 	and.w	r3, r3, #15
 800c204:	e006      	b.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c206:	4b97      	ldr	r3, [pc, #604]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c20c:	041b      	lsls	r3, r3, #16
 800c20e:	0e1b      	lsrs	r3, r3, #24
 800c210:	f003 030f 	and.w	r3, r3, #15
 800c214:	4a95      	ldr	r2, [pc, #596]	@ (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c21a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c21c:	f001 b9d9 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c220:	2300      	movs	r3, #0
 800c222:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c224:	f001 b9d5 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c228:	2300      	movs	r3, #0
 800c22a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c22c:	f001 b9d1 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c230:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c234:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c238:	430b      	orrs	r3, r1
 800c23a:	d17f      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c23c:	4b89      	ldr	r3, [pc, #548]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c23e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c246:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d165      	bne.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c24e:	4b85      	ldr	r3, [pc, #532]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c254:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c258:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c25c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c260:	d034      	beq.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c264:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c268:	d853      	bhi.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c26c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c270:	d00b      	beq.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c274:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c278:	d84b      	bhi.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d016      	beq.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c282:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c286:	d009      	beq.n	800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c288:	e043      	b.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c28a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c28e:	4618      	mov	r0, r3
 800c290:	f7ff fa16 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c296:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c298:	f001 b99b 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c29c:	f107 0318 	add.w	r3, r7, #24
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff fb67 	bl	800b974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2a6:	69fb      	ldr	r3, [r7, #28]
 800c2a8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c2aa:	f001 b992 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c2ae:	4b6d      	ldr	r3, [pc, #436]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c2b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2ba:	d103      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c2bc:	4b6a      	ldr	r3, [pc, #424]	@ (800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c2be:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c2c0:	f001 b987 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c2c8:	f001 b983 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c2cc:	4b65      	ldr	r3, [pc, #404]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f003 0320 	and.w	r3, r3, #32
 800c2d4:	2b20      	cmp	r3, #32
 800c2d6:	d118      	bne.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c2d8:	4b62      	ldr	r3, [pc, #392]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c2e4:	4b5f      	ldr	r3, [pc, #380]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	0e1b      	lsrs	r3, r3, #24
 800c2ea:	f003 030f 	and.w	r3, r3, #15
 800c2ee:	e006      	b.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c2f0:	4b5c      	ldr	r3, [pc, #368]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c2f6:	041b      	lsls	r3, r3, #16
 800c2f8:	0e1b      	lsrs	r3, r3, #24
 800c2fa:	f003 030f 	and.w	r3, r3, #15
 800c2fe:	4a5b      	ldr	r2, [pc, #364]	@ (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c304:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c306:	f001 b964 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c30a:	2300      	movs	r3, #0
 800c30c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c30e:	f001 b960 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c312:	2300      	movs	r3, #0
 800c314:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c316:	f001 b95c 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c31c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c320:	d108      	bne.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff f9ca 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c330:	f001 b94f 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c334:	2300      	movs	r3, #0
 800c336:	637b      	str	r3, [r7, #52]	@ 0x34
 800c338:	f001 b94b 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c340:	1e51      	subs	r1, r2, #1
 800c342:	430b      	orrs	r3, r1
 800c344:	d136      	bne.n	800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c346:	4b47      	ldr	r3, [pc, #284]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c34c:	f003 0303 	and.w	r3, r3, #3
 800c350:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c354:	2b00      	cmp	r3, #0
 800c356:	d104      	bne.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c358:	f7fe f9cc 	bl	800a6f4 <HAL_RCC_GetPCLK2Freq>
 800c35c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c35e:	f001 b938 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c364:	2b01      	cmp	r3, #1
 800c366:	d104      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c368:	f7fe f894 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800c36c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c36e:	f001 b930 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c372:	4b3c      	ldr	r3, [pc, #240]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c37a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c37e:	d106      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c382:	2b02      	cmp	r3, #2
 800c384:	d103      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c386:	4b3a      	ldr	r3, [pc, #232]	@ (800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c388:	637b      	str	r3, [r7, #52]	@ 0x34
 800c38a:	f001 b922 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c38e:	4b35      	ldr	r3, [pc, #212]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c394:	f003 0302 	and.w	r3, r3, #2
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d107      	bne.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	d104      	bne.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c3a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3a8:	f001 b913 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3b0:	f001 b90f 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c3b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b8:	1e91      	subs	r1, r2, #2
 800c3ba:	430b      	orrs	r3, r1
 800c3bc:	d136      	bne.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c3be:	4b29      	ldr	r3, [pc, #164]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c3c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3c4:	f003 030c 	and.w	r3, r3, #12
 800c3c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d104      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c3d0:	f7fe f97c 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800c3d4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c3d6:	f001 b8fc 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	d104      	bne.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c3e0:	f7fe f858 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800c3e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c3e6:	f001 b8f4 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c3ea:	4b1e      	ldr	r3, [pc, #120]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3f6:	d106      	bne.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fa:	2b08      	cmp	r3, #8
 800c3fc:	d103      	bne.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c3fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c400:	637b      	str	r3, [r7, #52]	@ 0x34
 800c402:	f001 b8e6 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c406:	4b17      	ldr	r3, [pc, #92]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c40c:	f003 0302 	and.w	r3, r3, #2
 800c410:	2b02      	cmp	r3, #2
 800c412:	d107      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c416:	2b0c      	cmp	r3, #12
 800c418:	d104      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800c41a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c41e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c420:	f001 b8d7 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800c424:	2300      	movs	r3, #0
 800c426:	637b      	str	r3, [r7, #52]	@ 0x34
 800c428:	f001 b8d3 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800c42c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c430:	1f11      	subs	r1, r2, #4
 800c432:	430b      	orrs	r3, r1
 800c434:	d13f      	bne.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c436:	4b0b      	ldr	r3, [pc, #44]	@ (800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c43c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c440:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c444:	2b00      	cmp	r3, #0
 800c446:	d104      	bne.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c448:	f7fe f940 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800c44c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c44e:	f001 b8c0 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800c452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c454:	2b10      	cmp	r3, #16
 800c456:	d10d      	bne.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c458:	f7fe f81c 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800c45c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c45e:	f001 b8b8 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c462:	bf00      	nop
 800c464:	46020c00 	.word	0x46020c00
 800c468:	02dc6c00 	.word	0x02dc6c00
 800c46c:	08011350 	.word	0x08011350
 800c470:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c474:	4ba8      	ldr	r3, [pc, #672]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c47c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c480:	d106      	bne.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	2b20      	cmp	r3, #32
 800c486:	d103      	bne.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800c488:	4ba4      	ldr	r3, [pc, #656]	@ (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c48a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c48c:	f001 b8a1 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c490:	4ba1      	ldr	r3, [pc, #644]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c496:	f003 0302 	and.w	r3, r3, #2
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d107      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a0:	2b30      	cmp	r3, #48	@ 0x30
 800c4a2:	d104      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800c4a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4aa:	f001 b892 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4b2:	f001 b88e 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800c4b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ba:	f1a2 0108 	sub.w	r1, r2, #8
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	d136      	bne.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c4c2:	4b95      	ldr	r3, [pc, #596]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c4c8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c4cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d104      	bne.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c4d4:	f7fe f8fa 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800c4d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c4da:	f001 b87a 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800c4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e0:	2b40      	cmp	r3, #64	@ 0x40
 800c4e2:	d104      	bne.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c4e4:	f7fd ffd6 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800c4e8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c4ea:	f001 b872 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c4ee:	4b8a      	ldr	r3, [pc, #552]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4fa:	d106      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fe:	2b80      	cmp	r3, #128	@ 0x80
 800c500:	d103      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800c502:	4b86      	ldr	r3, [pc, #536]	@ (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c504:	637b      	str	r3, [r7, #52]	@ 0x34
 800c506:	f001 b864 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c50a:	4b83      	ldr	r3, [pc, #524]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c50c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c510:	f003 0302 	and.w	r3, r3, #2
 800c514:	2b02      	cmp	r3, #2
 800c516:	d107      	bne.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c51c:	d104      	bne.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800c51e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c522:	637b      	str	r3, [r7, #52]	@ 0x34
 800c524:	f001 b855 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800c528:	2300      	movs	r3, #0
 800c52a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c52c:	f001 b851 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800c530:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c534:	f1a2 0110 	sub.w	r1, r2, #16
 800c538:	430b      	orrs	r3, r1
 800c53a:	d139      	bne.n	800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c53c:	4b76      	ldr	r3, [pc, #472]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c53e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c546:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d104      	bne.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c54e:	f7fe f8bd 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800c552:	6378      	str	r0, [r7, #52]	@ 0x34
 800c554:	f001 b83d 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800c558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c55e:	d104      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c560:	f7fd ff98 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800c564:	6378      	str	r0, [r7, #52]	@ 0x34
 800c566:	f001 b834 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c56a:	4b6b      	ldr	r3, [pc, #428]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c576:	d107      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800c578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c57e:	d103      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800c580:	4b66      	ldr	r3, [pc, #408]	@ (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c582:	637b      	str	r3, [r7, #52]	@ 0x34
 800c584:	f001 b825 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c588:	4b63      	ldr	r3, [pc, #396]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c58a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c58e:	f003 0302 	and.w	r3, r3, #2
 800c592:	2b02      	cmp	r3, #2
 800c594:	d108      	bne.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800c596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c598:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c59c:	d104      	bne.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800c59e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5a4:	f001 b815 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ac:	f001 b811 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800c5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5b4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800c5b8:	430b      	orrs	r3, r1
 800c5ba:	d139      	bne.n	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800c5bc:	4b56      	ldr	r3, [pc, #344]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c5c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c5c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d104      	bne.n	800c5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c5ce:	f7fe f87d 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800c5d2:	6378      	str	r0, [r7, #52]	@ 0x34
 800c5d4:	f000 bffd 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5de:	d104      	bne.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c5e0:	f7fd ff58 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800c5e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c5e6:	f000 bff4 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800c5ea:	4b4b      	ldr	r3, [pc, #300]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5f6:	d107      	bne.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5fe:	d103      	bne.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800c600:	4b46      	ldr	r3, [pc, #280]	@ (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c602:	637b      	str	r3, [r7, #52]	@ 0x34
 800c604:	f000 bfe5 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800c608:	4b43      	ldr	r3, [pc, #268]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c60a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c60e:	f003 0302 	and.w	r3, r3, #2
 800c612:	2b02      	cmp	r3, #2
 800c614:	d108      	bne.n	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800c616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c618:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c61c:	d104      	bne.n	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800c61e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c622:	637b      	str	r3, [r7, #52]	@ 0x34
 800c624:	f000 bfd5 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c628:	2300      	movs	r3, #0
 800c62a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c62c:	f000 bfd1 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800c630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c634:	f1a2 0120 	sub.w	r1, r2, #32
 800c638:	430b      	orrs	r3, r1
 800c63a:	d158      	bne.n	800c6ee <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c63c:	4b36      	ldr	r3, [pc, #216]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c63e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c642:	f003 0307 	and.w	r3, r3, #7
 800c646:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d104      	bne.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800c64e:	f7fe f865 	bl	800a71c <HAL_RCC_GetPCLK3Freq>
 800c652:	6378      	str	r0, [r7, #52]	@ 0x34
 800c654:	f000 bfbd 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800c658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d104      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c65e:	f7fd ff19 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800c662:	6378      	str	r0, [r7, #52]	@ 0x34
 800c664:	f000 bfb5 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c668:	4b2b      	ldr	r3, [pc, #172]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c674:	d106      	bne.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800c676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d103      	bne.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800c67c:	4b27      	ldr	r3, [pc, #156]	@ (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c67e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c680:	f000 bfa7 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c684:	4b24      	ldr	r3, [pc, #144]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c68a:	f003 0302 	and.w	r3, r3, #2
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d107      	bne.n	800c6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800c692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c694:	2b03      	cmp	r3, #3
 800c696:	d104      	bne.n	800c6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800c698:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c69e:	f000 bf98 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800c6a2:	4b1d      	ldr	r3, [pc, #116]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 0320 	and.w	r3, r3, #32
 800c6aa:	2b20      	cmp	r3, #32
 800c6ac:	d11b      	bne.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	d118      	bne.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c6b4:	4b18      	ldr	r3, [pc, #96]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d005      	beq.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800c6c0:	4b15      	ldr	r3, [pc, #84]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	0e1b      	lsrs	r3, r3, #24
 800c6c6:	f003 030f 	and.w	r3, r3, #15
 800c6ca:	e006      	b.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800c6cc:	4b12      	ldr	r3, [pc, #72]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c6d2:	041b      	lsls	r3, r3, #16
 800c6d4:	0e1b      	lsrs	r3, r3, #24
 800c6d6:	f003 030f 	and.w	r3, r3, #15
 800c6da:	4a11      	ldr	r2, [pc, #68]	@ (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6e2:	f000 bf76 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ea:	f000 bf72 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800c6ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c6f6:	430b      	orrs	r3, r1
 800c6f8:	d172      	bne.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c6fa:	4b07      	ldr	r3, [pc, #28]	@ (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c700:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c704:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c70c:	d10a      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c70e:	f7fd fec1 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800c712:	6378      	str	r0, [r7, #52]	@ 0x34
 800c714:	f000 bf5d 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c718:	46020c00 	.word	0x46020c00
 800c71c:	00f42400 	.word	0x00f42400
 800c720:	08011350 	.word	0x08011350
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c72a:	d108      	bne.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c72c:	f107 0318 	add.w	r3, r7, #24
 800c730:	4618      	mov	r0, r3
 800c732:	f7ff f91f 	bl	800b974 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c736:	6a3b      	ldr	r3, [r7, #32]
 800c738:	637b      	str	r3, [r7, #52]	@ 0x34
 800c73a:	f000 bf4a 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800c744:	f7fd ffa8 	bl	800a698 <HAL_RCC_GetHCLKFreq>
 800c748:	6378      	str	r0, [r7, #52]	@ 0x34
 800c74a:	f000 bf42 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800c74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c750:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c754:	d122      	bne.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c756:	4bb0      	ldr	r3, [pc, #704]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0320 	and.w	r3, r3, #32
 800c75e:	2b20      	cmp	r3, #32
 800c760:	d118      	bne.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c762:	4bad      	ldr	r3, [pc, #692]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d005      	beq.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800c76e:	4baa      	ldr	r3, [pc, #680]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	0e1b      	lsrs	r3, r3, #24
 800c774:	f003 030f 	and.w	r3, r3, #15
 800c778:	e006      	b.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800c77a:	4ba7      	ldr	r3, [pc, #668]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c77c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c780:	041b      	lsls	r3, r3, #16
 800c782:	0e1b      	lsrs	r3, r3, #24
 800c784:	f003 030f 	and.w	r3, r3, #15
 800c788:	4aa4      	ldr	r2, [pc, #656]	@ (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c78e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c790:	f000 bf1f 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800c794:	2300      	movs	r3, #0
 800c796:	637b      	str	r3, [r7, #52]	@ 0x34
 800c798:	f000 bf1b 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c79c:	4b9e      	ldr	r3, [pc, #632]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7a8:	d107      	bne.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c7b0:	d103      	bne.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800c7b2:	4b9b      	ldr	r3, [pc, #620]	@ (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c7b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7b6:	f000 bf0c 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c7ba:	4b97      	ldr	r3, [pc, #604]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7c6:	d107      	bne.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c7ce:	d103      	bne.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800c7d0:	4b93      	ldr	r3, [pc, #588]	@ (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c7d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7d4:	f000 befd 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7dc:	f000 bef9 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800c7e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7e4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c7e8:	430b      	orrs	r3, r1
 800c7ea:	d158      	bne.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800c7ec:	4b8a      	ldr	r3, [pc, #552]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c7f2:	f003 0307 	and.w	r3, r3, #7
 800c7f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fa:	2b04      	cmp	r3, #4
 800c7fc:	d84b      	bhi.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800c7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800c800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c804:	0800c83d 	.word	0x0800c83d
 800c808:	0800c819 	.word	0x0800c819
 800c80c:	0800c82b 	.word	0x0800c82b
 800c810:	0800c847 	.word	0x0800c847
 800c814:	0800c851 	.word	0x0800c851
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fe ff4f 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c824:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c826:	f000 bed4 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c82a:	f107 030c 	add.w	r3, r7, #12
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff f9fa 	bl	800bc28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c838:	f000 becb 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c83c:	f7fd ff2c 	bl	800a698 <HAL_RCC_GetHCLKFreq>
 800c840:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c842:	f000 bec6 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c846:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c84a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c84c:	f000 bec1 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c850:	4b71      	ldr	r3, [pc, #452]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 0320 	and.w	r3, r3, #32
 800c858:	2b20      	cmp	r3, #32
 800c85a:	d118      	bne.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c85c:	4b6e      	ldr	r3, [pc, #440]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d005      	beq.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800c868:	4b6b      	ldr	r3, [pc, #428]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	0e1b      	lsrs	r3, r3, #24
 800c86e:	f003 030f 	and.w	r3, r3, #15
 800c872:	e006      	b.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800c874:	4b68      	ldr	r3, [pc, #416]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c87a:	041b      	lsls	r3, r3, #16
 800c87c:	0e1b      	lsrs	r3, r3, #24
 800c87e:	f003 030f 	and.w	r3, r3, #15
 800c882:	4a66      	ldr	r2, [pc, #408]	@ (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c888:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c88a:	f000 bea2 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c88e:	2300      	movs	r3, #0
 800c890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c892:	f000 be9e 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c896:	2300      	movs	r3, #0
 800c898:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c89a:	f000 be9a 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800c89e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	d167      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800c8aa:	4b5b      	ldr	r3, [pc, #364]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c8ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c8b0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c8b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c8bc:	d036      	beq.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800c8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c8c4:	d855      	bhi.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c8cc:	d029      	beq.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c8d4:	d84d      	bhi.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8dc:	d013      	beq.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800c8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8e4:	d845      	bhi.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d015      	beq.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8f2:	d13e      	bne.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fe fee1 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c900:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c902:	f000 be66 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c906:	f107 030c 	add.w	r3, r7, #12
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7ff f98c 	bl	800bc28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c914:	f000 be5d 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c918:	f7fd febe 	bl	800a698 <HAL_RCC_GetHCLKFreq>
 800c91c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c91e:	f000 be58 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c922:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c926:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c928:	f000 be53 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c92c:	4b3a      	ldr	r3, [pc, #232]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 0320 	and.w	r3, r3, #32
 800c934:	2b20      	cmp	r3, #32
 800c936:	d118      	bne.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c938:	4b37      	ldr	r3, [pc, #220]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d005      	beq.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800c944:	4b34      	ldr	r3, [pc, #208]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	0e1b      	lsrs	r3, r3, #24
 800c94a:	f003 030f 	and.w	r3, r3, #15
 800c94e:	e006      	b.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c950:	4b31      	ldr	r3, [pc, #196]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c956:	041b      	lsls	r3, r3, #16
 800c958:	0e1b      	lsrs	r3, r3, #24
 800c95a:	f003 030f 	and.w	r3, r3, #15
 800c95e:	4a2f      	ldr	r2, [pc, #188]	@ (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c964:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c966:	f000 be34 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c96e:	f000 be30 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c972:	2300      	movs	r3, #0
 800c974:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c976:	f000 be2c 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800c97a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c97e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800c982:	430b      	orrs	r3, r1
 800c984:	d152      	bne.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c986:	4b24      	ldr	r3, [pc, #144]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c98c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c990:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c994:	2b00      	cmp	r3, #0
 800c996:	d104      	bne.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c998:	f7fd fe98 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800c99c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c99e:	f000 be18 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9a8:	d104      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c9aa:	f7fd fd73 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800c9ae:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9b0:	f000 be0f 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c9b4:	4b18      	ldr	r3, [pc, #96]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9c0:	d107      	bne.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9c8:	d103      	bne.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800c9ca:	4b15      	ldr	r3, [pc, #84]	@ (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c9cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9ce:	f000 be00 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800c9d2:	4b11      	ldr	r3, [pc, #68]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0320 	and.w	r3, r3, #32
 800c9da:	2b20      	cmp	r3, #32
 800c9dc:	d122      	bne.n	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800c9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c9e4:	d11e      	bne.n	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800c9f2:	4b09      	ldr	r3, [pc, #36]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	0e1b      	lsrs	r3, r3, #24
 800c9f8:	f003 030f 	and.w	r3, r3, #15
 800c9fc:	e006      	b.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800c9fe:	4b06      	ldr	r3, [pc, #24]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca04:	041b      	lsls	r3, r3, #16
 800ca06:	0e1b      	lsrs	r3, r3, #24
 800ca08:	f003 030f 	and.w	r3, r3, #15
 800ca0c:	4a03      	ldr	r2, [pc, #12]	@ (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ca0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca12:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca14:	f000 bddd 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ca18:	46020c00 	.word	0x46020c00
 800ca1c:	08011350 	.word	0x08011350
 800ca20:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ca24:	2300      	movs	r3, #0
 800ca26:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca28:	f000 bdd3 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ca2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca30:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ca34:	430b      	orrs	r3, r1
 800ca36:	d14c      	bne.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ca38:	4ba8      	ldr	r3, [pc, #672]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca3e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ca42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ca44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d104      	bne.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca4a:	f7fd fe3f 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800ca4e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca50:	f000 bdbf 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ca54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca5a:	d104      	bne.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca5c:	f7fd fd1a 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800ca60:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca62:	f000 bdb6 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ca66:	4b9d      	ldr	r3, [pc, #628]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca72:	d107      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800ca74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca7a:	d103      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800ca7c:	4b98      	ldr	r3, [pc, #608]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ca7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca80:	f000 bda7 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ca84:	4b95      	ldr	r3, [pc, #596]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 0320 	and.w	r3, r3, #32
 800ca8c:	2b20      	cmp	r3, #32
 800ca8e:	d11c      	bne.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800ca90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ca96:	d118      	bne.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca98:	4b90      	ldr	r3, [pc, #576]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d005      	beq.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800caa4:	4b8d      	ldr	r3, [pc, #564]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	0e1b      	lsrs	r3, r3, #24
 800caaa:	f003 030f 	and.w	r3, r3, #15
 800caae:	e006      	b.n	800cabe <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800cab0:	4b8a      	ldr	r3, [pc, #552]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cab6:	041b      	lsls	r3, r3, #16
 800cab8:	0e1b      	lsrs	r3, r3, #24
 800caba:	f003 030f 	and.w	r3, r3, #15
 800cabe:	4a89      	ldr	r2, [pc, #548]	@ (800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cac4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cac6:	f000 bd84 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800caca:	2300      	movs	r3, #0
 800cacc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cace:	f000 bd80 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800cad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cada:	430b      	orrs	r3, r1
 800cadc:	d158      	bne.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cade:	4b7f      	ldr	r3, [pc, #508]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cae4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cae8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800caea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caec:	2bc0      	cmp	r3, #192	@ 0xc0
 800caee:	d028      	beq.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800caf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf2:	2bc0      	cmp	r3, #192	@ 0xc0
 800caf4:	d848      	bhi.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800caf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf8:	2b80      	cmp	r3, #128	@ 0x80
 800cafa:	d00e      	beq.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800cafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafe:	2b80      	cmp	r3, #128	@ 0x80
 800cb00:	d842      	bhi.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800cb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d003      	beq.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800cb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0a:	2b40      	cmp	r3, #64	@ 0x40
 800cb0c:	d014      	beq.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800cb0e:	e03b      	b.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800cb10:	f7fd fe04 	bl	800a71c <HAL_RCC_GetPCLK3Freq>
 800cb14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cb16:	f000 bd5c 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb1a:	4b70      	ldr	r3, [pc, #448]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb26:	d103      	bne.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800cb28:	4b6d      	ldr	r3, [pc, #436]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cb2a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cb2c:	f000 bd51 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cb30:	2300      	movs	r3, #0
 800cb32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb34:	f000 bd4d 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800cb38:	f7fd fcac 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800cb3c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cb3e:	f000 bd48 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cb42:	4b66      	ldr	r3, [pc, #408]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f003 0320 	and.w	r3, r3, #32
 800cb4a:	2b20      	cmp	r3, #32
 800cb4c:	d118      	bne.n	800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cb4e:	4b63      	ldr	r3, [pc, #396]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d005      	beq.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800cb5a:	4b60      	ldr	r3, [pc, #384]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	0e1b      	lsrs	r3, r3, #24
 800cb60:	f003 030f 	and.w	r3, r3, #15
 800cb64:	e006      	b.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800cb66:	4b5d      	ldr	r3, [pc, #372]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb6c:	041b      	lsls	r3, r3, #16
 800cb6e:	0e1b      	lsrs	r3, r3, #24
 800cb70:	f003 030f 	and.w	r3, r3, #15
 800cb74:	4a5b      	ldr	r2, [pc, #364]	@ (800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb7a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cb7c:	f000 bd29 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cb80:	2300      	movs	r3, #0
 800cb82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb84:	f000 bd25 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb8c:	f000 bd21 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800cb90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb94:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800cb98:	430b      	orrs	r3, r1
 800cb9a:	d14c      	bne.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800cb9c:	4b4f      	ldr	r3, [pc, #316]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cba2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cba6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800cba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d104      	bne.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cbae:	f7fd fd8d 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800cbb2:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbb4:	f000 bd0d 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cbbe:	d104      	bne.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbc0:	f7fd fc68 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800cbc4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbc6:	f000 bd04 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800cbca:	4b44      	ldr	r3, [pc, #272]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbd6:	d107      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cbde:	d103      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800cbe0:	4b3f      	ldr	r3, [pc, #252]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cbe2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbe4:	f000 bcf5 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800cbe8:	4b3c      	ldr	r3, [pc, #240]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 0320 	and.w	r3, r3, #32
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	d11c      	bne.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cbfa:	d118      	bne.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cbfc:	4b37      	ldr	r3, [pc, #220]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d005      	beq.n	800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800cc08:	4b34      	ldr	r3, [pc, #208]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	0e1b      	lsrs	r3, r3, #24
 800cc0e:	f003 030f 	and.w	r3, r3, #15
 800cc12:	e006      	b.n	800cc22 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800cc14:	4b31      	ldr	r3, [pc, #196]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc1a:	041b      	lsls	r3, r3, #16
 800cc1c:	0e1b      	lsrs	r3, r3, #24
 800cc1e:	f003 030f 	and.w	r3, r3, #15
 800cc22:	4a30      	ldr	r2, [pc, #192]	@ (800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc28:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc2a:	f000 bcd2 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc32:	f000 bcce 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800cc36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc3a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800cc3e:	430b      	orrs	r3, r1
 800cc40:	d152      	bne.n	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800cc42:	4b26      	ldr	r3, [pc, #152]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cc48:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800cc4c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d104      	bne.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc54:	f7fd fd3a 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800cc58:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc5a:	f000 bcba 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc64:	d104      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc66:	f7fd fc15 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800cc6a:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc6c:	f000 bcb1 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800cc70:	4b1a      	ldr	r3, [pc, #104]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc7c:	d107      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc84:	d103      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800cc86:	4b16      	ldr	r3, [pc, #88]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cc88:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc8a:	f000 bca2 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800cc8e:	4b13      	ldr	r3, [pc, #76]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f003 0320 	and.w	r3, r3, #32
 800cc96:	2b20      	cmp	r3, #32
 800cc98:	d11c      	bne.n	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800cc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cca0:	d118      	bne.n	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cca2:	4b0e      	ldr	r3, [pc, #56]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d005      	beq.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800ccae:	4b0b      	ldr	r3, [pc, #44]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	0e1b      	lsrs	r3, r3, #24
 800ccb4:	f003 030f 	and.w	r3, r3, #15
 800ccb8:	e006      	b.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800ccba:	4b08      	ldr	r3, [pc, #32]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ccbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ccc0:	041b      	lsls	r3, r3, #16
 800ccc2:	0e1b      	lsrs	r3, r3, #24
 800ccc4:	f003 030f 	and.w	r3, r3, #15
 800ccc8:	4a06      	ldr	r2, [pc, #24]	@ (800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ccca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccce:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccd0:	f000 bc7f 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccd8:	f000 bc7b 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ccdc:	46020c00 	.word	0x46020c00
 800cce0:	00f42400 	.word	0x00f42400
 800cce4:	08011350 	.word	0x08011350
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800cce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccec:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800ccf0:	430b      	orrs	r3, r1
 800ccf2:	d14c      	bne.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800ccf4:	4ba6      	ldr	r3, [pc, #664]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ccf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ccfa:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ccfe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800cd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d104      	bne.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd06:	f7fd fce1 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800cd0a:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd0c:	f000 bc61 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800cd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cd16:	d104      	bne.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd18:	f7fd fbbc 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800cd1c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd1e:	f000 bc58 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800cd22:	4b9b      	ldr	r3, [pc, #620]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd2e:	d107      	bne.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800cd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd36:	d103      	bne.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800cd38:	4b96      	ldr	r3, [pc, #600]	@ (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cd3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd3c:	f000 bc49 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800cd40:	4b93      	ldr	r3, [pc, #588]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f003 0320 	and.w	r3, r3, #32
 800cd48:	2b20      	cmp	r3, #32
 800cd4a:	d11c      	bne.n	800cd86 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cd52:	d118      	bne.n	800cd86 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd54:	4b8e      	ldr	r3, [pc, #568]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d005      	beq.n	800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800cd60:	4b8b      	ldr	r3, [pc, #556]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	0e1b      	lsrs	r3, r3, #24
 800cd66:	f003 030f 	and.w	r3, r3, #15
 800cd6a:	e006      	b.n	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800cd6c:	4b88      	ldr	r3, [pc, #544]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd72:	041b      	lsls	r3, r3, #16
 800cd74:	0e1b      	lsrs	r3, r3, #24
 800cd76:	f003 030f 	and.w	r3, r3, #15
 800cd7a:	4a87      	ldr	r2, [pc, #540]	@ (800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd80:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd82:	f000 bc26 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800cd86:	2300      	movs	r3, #0
 800cd88:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd8a:	f000 bc22 	b.w	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800cd8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd92:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cd96:	430b      	orrs	r3, r1
 800cd98:	d164      	bne.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800cd9a:	4b7d      	ldr	r3, [pc, #500]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cda0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cda4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800cda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d120      	bne.n	800cdee <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cdac:	4b78      	ldr	r3, [pc, #480]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 0320 	and.w	r3, r3, #32
 800cdb4:	2b20      	cmp	r3, #32
 800cdb6:	d117      	bne.n	800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cdb8:	4b75      	ldr	r3, [pc, #468]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d005      	beq.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800cdc4:	4b72      	ldr	r3, [pc, #456]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	0e1b      	lsrs	r3, r3, #24
 800cdca:	f003 030f 	and.w	r3, r3, #15
 800cdce:	e006      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800cdd0:	4b6f      	ldr	r3, [pc, #444]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cdd6:	041b      	lsls	r3, r3, #16
 800cdd8:	0e1b      	lsrs	r3, r3, #24
 800cdda:	f003 030f 	and.w	r3, r3, #15
 800cdde:	4a6e      	ldr	r2, [pc, #440]	@ (800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cde6:	e3f4      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cde8:	2300      	movs	r3, #0
 800cdea:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdec:	e3f1      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800cdee:	4b68      	ldr	r3, [pc, #416]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cdf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cdf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cdfc:	d112      	bne.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce04:	d10e      	bne.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce06:	4b62      	ldr	r3, [pc, #392]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce14:	d102      	bne.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800ce16:	23fa      	movs	r3, #250	@ 0xfa
 800ce18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce1a:	e3da      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ce1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ce20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce22:	e3d6      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800ce24:	4b5a      	ldr	r3, [pc, #360]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce30:	d106      	bne.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800ce32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce38:	d102      	bne.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800ce3a:	4b56      	ldr	r3, [pc, #344]	@ (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ce3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce3e:	e3c8      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800ce40:	4b53      	ldr	r3, [pc, #332]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce46:	f003 0302 	and.w	r3, r3, #2
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d107      	bne.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce54:	d103      	bne.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800ce56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce5c:	e3b9      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce62:	e3b6      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800ce64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce68:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800ce6c:	430b      	orrs	r3, r1
 800ce6e:	d164      	bne.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ce70:	4b47      	ldr	r3, [pc, #284]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ce76:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ce7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800ce7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d120      	bne.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ce82:	4b43      	ldr	r3, [pc, #268]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 0320 	and.w	r3, r3, #32
 800ce8a:	2b20      	cmp	r3, #32
 800ce8c:	d117      	bne.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce8e:	4b40      	ldr	r3, [pc, #256]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d005      	beq.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800ce9a:	4b3d      	ldr	r3, [pc, #244]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	0e1b      	lsrs	r3, r3, #24
 800cea0:	f003 030f 	and.w	r3, r3, #15
 800cea4:	e006      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800cea6:	4b3a      	ldr	r3, [pc, #232]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ceac:	041b      	lsls	r3, r3, #16
 800ceae:	0e1b      	lsrs	r3, r3, #24
 800ceb0:	f003 030f 	and.w	r3, r3, #15
 800ceb4:	4a38      	ldr	r2, [pc, #224]	@ (800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800ceb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceba:	637b      	str	r3, [r7, #52]	@ 0x34
 800cebc:	e389      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cebe:	2300      	movs	r3, #0
 800cec0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec2:	e386      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800cec4:	4b32      	ldr	r3, [pc, #200]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ceca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ced2:	d112      	bne.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800ced4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ceda:	d10e      	bne.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cedc:	4b2c      	ldr	r3, [pc, #176]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ceea:	d102      	bne.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800ceec:	23fa      	movs	r3, #250	@ 0xfa
 800ceee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cef0:	e36f      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800cef2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cef6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cef8:	e36b      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800cefa:	4b25      	ldr	r3, [pc, #148]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf06:	d106      	bne.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800cf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf0e:	d102      	bne.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800cf10:	4b20      	ldr	r3, [pc, #128]	@ (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cf12:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf14:	e35d      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800cf16:	4b1e      	ldr	r3, [pc, #120]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf1c:	f003 0302 	and.w	r3, r3, #2
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d107      	bne.n	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800cf24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf2a:	d103      	bne.n	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800cf2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf30:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf32:	e34e      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800cf34:	2300      	movs	r3, #0
 800cf36:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf38:	e34b      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800cf3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf3e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cf42:	430b      	orrs	r3, r1
 800cf44:	d14e      	bne.n	800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800cf46:	4b12      	ldr	r3, [pc, #72]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf4c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800cf50:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800cf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d103      	bne.n	800cf60 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cf58:	f7fd fbb8 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800cf5c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf5e:	e338      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800cf60:	4b0b      	ldr	r3, [pc, #44]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf6e:	d119      	bne.n	800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800cf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf76:	d115      	bne.n	800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cf78:	4b05      	ldr	r3, [pc, #20]	@ (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf86:	d109      	bne.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800cf88:	23fa      	movs	r3, #250	@ 0xfa
 800cf8a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cf8c:	e321      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cf8e:	bf00      	nop
 800cf90:	46020c00 	.word	0x46020c00
 800cf94:	00f42400 	.word	0x00f42400
 800cf98:	08011350 	.word	0x08011350
      }
      else
      {
        frequency = LSI_VALUE;
 800cf9c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cfa0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cfa2:	e316      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800cfa4:	4ba8      	ldr	r3, [pc, #672]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfb0:	d106      	bne.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cfb8:	d102      	bne.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800cfba:	4ba4      	ldr	r3, [pc, #656]	@ (800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800cfbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfbe:	e308      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800cfc0:	4ba1      	ldr	r3, [pc, #644]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cfc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfc6:	f003 0302 	and.w	r3, r3, #2
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d107      	bne.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800cfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800cfd4:	d103      	bne.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800cfd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfda:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfdc:	e2f9      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfe2:	e2f6      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800cfe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfe8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800cfec:	430b      	orrs	r3, r1
 800cfee:	d12d      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800cff0:	4b95      	ldr	r3, [pc, #596]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cff6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800cffa:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800cffc:	4b92      	ldr	r3, [pc, #584]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d008:	d105      	bne.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d102      	bne.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d010:	4b8e      	ldr	r3, [pc, #568]	@ (800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d012:	637b      	str	r3, [r7, #52]	@ 0x34
 800d014:	e2dd      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d01c:	d107      	bne.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d01e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d022:	4618      	mov	r0, r3
 800d024:	f7fe fb4c 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d02c:	e2d1      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d030:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d034:	d107      	bne.n	800d046 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d036:	f107 0318 	add.w	r3, r7, #24
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe fc9a 	bl	800b974 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	637b      	str	r3, [r7, #52]	@ 0x34
 800d044:	e2c5      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d046:	2300      	movs	r3, #0
 800d048:	637b      	str	r3, [r7, #52]	@ 0x34
 800d04a:	e2c2      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d04c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d050:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d054:	430b      	orrs	r3, r1
 800d056:	d156      	bne.n	800d106 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d058:	4b7b      	ldr	r3, [pc, #492]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d05a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d05e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d062:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d066:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d06a:	d028      	beq.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d072:	d845      	bhi.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d076:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d07a:	d013      	beq.n	800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d082:	d83d      	bhi.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d086:	2b00      	cmp	r3, #0
 800d088:	d004      	beq.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d090:	d004      	beq.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d092:	e035      	b.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d094:	f7fd fb2e 	bl	800a6f4 <HAL_RCC_GetPCLK2Freq>
 800d098:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d09a:	e29a      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d09c:	f7fd f9fa 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800d0a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d0a2:	e296      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d0a4:	4b68      	ldr	r3, [pc, #416]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0b0:	d102      	bne.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d0b2:	4b66      	ldr	r3, [pc, #408]	@ (800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d0b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d0b6:	e28c      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0bc:	e289      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d0be:	4b62      	ldr	r3, [pc, #392]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 0320 	and.w	r3, r3, #32
 800d0c6:	2b20      	cmp	r3, #32
 800d0c8:	d117      	bne.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d0ca:	4b5f      	ldr	r3, [pc, #380]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d005      	beq.n	800d0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d0d6:	4b5c      	ldr	r3, [pc, #368]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	0e1b      	lsrs	r3, r3, #24
 800d0dc:	f003 030f 	and.w	r3, r3, #15
 800d0e0:	e006      	b.n	800d0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d0e2:	4b59      	ldr	r3, [pc, #356]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d0e8:	041b      	lsls	r3, r3, #16
 800d0ea:	0e1b      	lsrs	r3, r3, #24
 800d0ec:	f003 030f 	and.w	r3, r3, #15
 800d0f0:	4a57      	ldr	r2, [pc, #348]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d0f8:	e26b      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0fe:	e268      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d100:	2300      	movs	r3, #0
 800d102:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d104:	e265      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d10a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d10e:	430b      	orrs	r3, r1
 800d110:	d156      	bne.n	800d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d112:	4b4d      	ldr	r3, [pc, #308]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d118:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d11c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d120:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d124:	d028      	beq.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d128:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d12c:	d845      	bhi.n	800d1ba <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d130:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d134:	d013      	beq.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d13c:	d83d      	bhi.n	800d1ba <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d140:	2b00      	cmp	r3, #0
 800d142:	d004      	beq.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d14a:	d004      	beq.n	800d156 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d14c:	e035      	b.n	800d1ba <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d14e:	f7fd fabd 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800d152:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d154:	e23d      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d156:	f7fd f99d 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800d15a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d15c:	e239      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d15e:	4b3a      	ldr	r3, [pc, #232]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d16a:	d102      	bne.n	800d172 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d16c:	4b37      	ldr	r3, [pc, #220]	@ (800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d16e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d170:	e22f      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d172:	2300      	movs	r3, #0
 800d174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d176:	e22c      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d178:	4b33      	ldr	r3, [pc, #204]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f003 0320 	and.w	r3, r3, #32
 800d180:	2b20      	cmp	r3, #32
 800d182:	d117      	bne.n	800d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d184:	4b30      	ldr	r3, [pc, #192]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d005      	beq.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d190:	4b2d      	ldr	r3, [pc, #180]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	0e1b      	lsrs	r3, r3, #24
 800d196:	f003 030f 	and.w	r3, r3, #15
 800d19a:	e006      	b.n	800d1aa <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d19c:	4b2a      	ldr	r3, [pc, #168]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d19e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d1a2:	041b      	lsls	r3, r3, #16
 800d1a4:	0e1b      	lsrs	r3, r3, #24
 800d1a6:	f003 030f 	and.w	r3, r3, #15
 800d1aa:	4a29      	ldr	r2, [pc, #164]	@ (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1b2:	e20e      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1b8:	e20b      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1be:	e208      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d1c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1c4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d1c8:	430b      	orrs	r3, r1
 800d1ca:	d17c      	bne.n	800d2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d1cc:	4b1e      	ldr	r3, [pc, #120]	@ (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d1d2:	f003 0318 	and.w	r3, r3, #24
 800d1d6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1da:	2b18      	cmp	r3, #24
 800d1dc:	d870      	bhi.n	800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d1de:	a201      	add	r2, pc, #4	@ (adr r2, 800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e4:	0800d255 	.word	0x0800d255
 800d1e8:	0800d2c1 	.word	0x0800d2c1
 800d1ec:	0800d2c1 	.word	0x0800d2c1
 800d1f0:	0800d2c1 	.word	0x0800d2c1
 800d1f4:	0800d2c1 	.word	0x0800d2c1
 800d1f8:	0800d2c1 	.word	0x0800d2c1
 800d1fc:	0800d2c1 	.word	0x0800d2c1
 800d200:	0800d2c1 	.word	0x0800d2c1
 800d204:	0800d25d 	.word	0x0800d25d
 800d208:	0800d2c1 	.word	0x0800d2c1
 800d20c:	0800d2c1 	.word	0x0800d2c1
 800d210:	0800d2c1 	.word	0x0800d2c1
 800d214:	0800d2c1 	.word	0x0800d2c1
 800d218:	0800d2c1 	.word	0x0800d2c1
 800d21c:	0800d2c1 	.word	0x0800d2c1
 800d220:	0800d2c1 	.word	0x0800d2c1
 800d224:	0800d265 	.word	0x0800d265
 800d228:	0800d2c1 	.word	0x0800d2c1
 800d22c:	0800d2c1 	.word	0x0800d2c1
 800d230:	0800d2c1 	.word	0x0800d2c1
 800d234:	0800d2c1 	.word	0x0800d2c1
 800d238:	0800d2c1 	.word	0x0800d2c1
 800d23c:	0800d2c1 	.word	0x0800d2c1
 800d240:	0800d2c1 	.word	0x0800d2c1
 800d244:	0800d27f 	.word	0x0800d27f
 800d248:	46020c00 	.word	0x46020c00
 800d24c:	00f42400 	.word	0x00f42400
 800d250:	08011350 	.word	0x08011350
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d254:	f7fd fa62 	bl	800a71c <HAL_RCC_GetPCLK3Freq>
 800d258:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d25a:	e1ba      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d25c:	f7fd f91a 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800d260:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d262:	e1b6      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d264:	4b9f      	ldr	r3, [pc, #636]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d26c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d270:	d102      	bne.n	800d278 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d272:	4b9d      	ldr	r3, [pc, #628]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d274:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d276:	e1ac      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d278:	2300      	movs	r3, #0
 800d27a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d27c:	e1a9      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d27e:	4b99      	ldr	r3, [pc, #612]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f003 0320 	and.w	r3, r3, #32
 800d286:	2b20      	cmp	r3, #32
 800d288:	d117      	bne.n	800d2ba <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d28a:	4b96      	ldr	r3, [pc, #600]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d292:	2b00      	cmp	r3, #0
 800d294:	d005      	beq.n	800d2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d296:	4b93      	ldr	r3, [pc, #588]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	0e1b      	lsrs	r3, r3, #24
 800d29c:	f003 030f 	and.w	r3, r3, #15
 800d2a0:	e006      	b.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d2a2:	4b90      	ldr	r3, [pc, #576]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2a8:	041b      	lsls	r3, r3, #16
 800d2aa:	0e1b      	lsrs	r3, r3, #24
 800d2ac:	f003 030f 	and.w	r3, r3, #15
 800d2b0:	4a8e      	ldr	r2, [pc, #568]	@ (800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d2b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d2b8:	e18b      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2be:	e188      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2c4:	e185      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d2c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ca:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d2ce:	430b      	orrs	r3, r1
 800d2d0:	d155      	bne.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d2d2:	4b84      	ldr	r3, [pc, #528]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2d8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d2dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d2e4:	d013      	beq.n	800d30e <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d2ec:	d844      	bhi.n	800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d2f4:	d013      	beq.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d2fc:	d83c      	bhi.n	800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d300:	2b00      	cmp	r3, #0
 800d302:	d014      	beq.n	800d32e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d30a:	d014      	beq.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d30c:	e034      	b.n	800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d30e:	f107 0318 	add.w	r3, r7, #24
 800d312:	4618      	mov	r0, r3
 800d314:	f7fe fb2e 	bl	800b974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d31c:	e159      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d31e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d322:	4618      	mov	r0, r3
 800d324:	f7fe f9cc 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d32c:	e151      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d32e:	f7fd f8b1 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800d332:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d334:	e14d      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d336:	4b6b      	ldr	r3, [pc, #428]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 0320 	and.w	r3, r3, #32
 800d33e:	2b20      	cmp	r3, #32
 800d340:	d117      	bne.n	800d372 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d342:	4b68      	ldr	r3, [pc, #416]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d005      	beq.n	800d35a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d34e:	4b65      	ldr	r3, [pc, #404]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	0e1b      	lsrs	r3, r3, #24
 800d354:	f003 030f 	and.w	r3, r3, #15
 800d358:	e006      	b.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d35a:	4b62      	ldr	r3, [pc, #392]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d35c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d360:	041b      	lsls	r3, r3, #16
 800d362:	0e1b      	lsrs	r3, r3, #24
 800d364:	f003 030f 	and.w	r3, r3, #15
 800d368:	4a60      	ldr	r2, [pc, #384]	@ (800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d36a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d36e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d370:	e12f      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d372:	2300      	movs	r3, #0
 800d374:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d376:	e12c      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d378:	2300      	movs	r3, #0
 800d37a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d37c:	e129      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d37e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d382:	1e59      	subs	r1, r3, #1
 800d384:	ea52 0301 	orrs.w	r3, r2, r1
 800d388:	d13c      	bne.n	800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d38a:	4b56      	ldr	r3, [pc, #344]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d38c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d390:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d394:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d398:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d39c:	d027      	beq.n	800d3ee <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d3a4:	d82b      	bhi.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d3ac:	d017      	beq.n	800d3de <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d3b4:	d823      	bhi.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d004      	beq.n	800d3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d3c2:	d004      	beq.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d3c4:	e01b      	b.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d3c6:	f7fd f865 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800d3ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d3cc:	e101      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fe f974 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3dc:	e0f9      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3de:	f107 0318 	add.w	r3, r7, #24
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fe fac6 	bl	800b974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3ec:	e0f1      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3ee:	f107 030c 	add.w	r3, r7, #12
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fe fc18 	bl	800bc28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3fc:	e0e9      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d3fe:	2300      	movs	r3, #0
 800d400:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d402:	e0e6      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d404:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d408:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800d40c:	430b      	orrs	r3, r1
 800d40e:	d131      	bne.n	800d474 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800d410:	4b34      	ldr	r3, [pc, #208]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d41a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800d41c:	4b31      	ldr	r3, [pc, #196]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d41e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d422:	f003 0302 	and.w	r3, r3, #2
 800d426:	2b02      	cmp	r3, #2
 800d428:	d106      	bne.n	800d438 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800d42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d103      	bne.n	800d438 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800d430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d434:	637b      	str	r3, [r7, #52]	@ 0x34
 800d436:	e0cc      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800d438:	4b2a      	ldr	r3, [pc, #168]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d43a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d43e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d442:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d446:	d112      	bne.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800d448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d44e:	d10e      	bne.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d450:	4b24      	ldr	r3, [pc, #144]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d45a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d45e:	d102      	bne.n	800d466 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800d460:	23fa      	movs	r3, #250	@ 0xfa
 800d462:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d464:	e0b5      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d466:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d46a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d46c:	e0b1      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800d46e:	2300      	movs	r3, #0
 800d470:	637b      	str	r3, [r7, #52]	@ 0x34
 800d472:	e0ae      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800d474:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d478:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d47c:	430b      	orrs	r3, r1
 800d47e:	d13b      	bne.n	800d4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d480:	4b18      	ldr	r3, [pc, #96]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d482:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d486:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d48a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d48c:	4b15      	ldr	r3, [pc, #84]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d498:	d105      	bne.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800d49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d102      	bne.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800d4a0:	4b13      	ldr	r3, [pc, #76]	@ (800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800d4a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4a4:	e095      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800d4a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d4ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4b2:	d106      	bne.n	800d4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800d4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4ba:	d102      	bne.n	800d4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800d4bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800d4be:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4c0:	e087      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800d4c2:	4b08      	ldr	r3, [pc, #32]	@ (800d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4ce:	d106      	bne.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4d6:	d102      	bne.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800d4d8:	4b03      	ldr	r3, [pc, #12]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d4da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4dc:	e079      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e2:	e076      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d4e4:	46020c00 	.word	0x46020c00
 800d4e8:	00f42400 	.word	0x00f42400
 800d4ec:	08011350 	.word	0x08011350
 800d4f0:	02dc6c00 	.word	0x02dc6c00
 800d4f4:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800d4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4fc:	1e99      	subs	r1, r3, #2
 800d4fe:	ea52 0301 	orrs.w	r3, r2, r1
 800d502:	d120      	bne.n	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800d504:	4b35      	ldr	r3, [pc, #212]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d506:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d50a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d50e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d512:	2b00      	cmp	r3, #0
 800d514:	d004      	beq.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800d516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d518:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d51c:	d008      	beq.n	800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800d51e:	e00f      	b.n	800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d520:	f107 030c 	add.w	r3, r7, #12
 800d524:	4618      	mov	r0, r3
 800d526:	f7fe fb7f 	bl	800bc28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d52e:	e050      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d530:	f107 0318 	add.w	r3, r7, #24
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fa1d 	bl	800b974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800d53a:	6a3b      	ldr	r3, [r7, #32]
 800d53c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d53e:	e048      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d540:	2300      	movs	r3, #0
 800d542:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d544:	e045      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800d546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d54a:	f1a3 0108 	sub.w	r1, r3, #8
 800d54e:	ea52 0301 	orrs.w	r3, r2, r1
 800d552:	d13c      	bne.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800d554:	4b21      	ldr	r3, [pc, #132]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d556:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d55a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d55e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800d560:	4b1e      	ldr	r3, [pc, #120]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d56c:	d105      	bne.n	800d57a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800d56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800d574:	4b1a      	ldr	r3, [pc, #104]	@ (800d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800d576:	637b      	str	r3, [r7, #52]	@ 0x34
 800d578:	e02b      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800d57a:	4b18      	ldr	r3, [pc, #96]	@ (800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d586:	d106      	bne.n	800d596 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800d588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d58a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d58e:	d102      	bne.n	800d596 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800d590:	4b14      	ldr	r3, [pc, #80]	@ (800d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800d592:	637b      	str	r3, [r7, #52]	@ 0x34
 800d594:	e01d      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d59c:	d107      	bne.n	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d59e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fe f88c 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5ac:	e011      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800d5b4:	d108      	bne.n	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fe f880 	bl	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c2:	085b      	lsrs	r3, r3, #1
 800d5c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5c6:	e004      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5cc:	e001      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800d5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3738      	adds	r7, #56	@ 0x38
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	46020c00 	.word	0x46020c00
 800d5e0:	00f42400 	.word	0x00f42400
 800d5e4:	007a1200 	.word	0x007a1200

0800d5e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800d5f0:	4b47      	ldr	r3, [pc, #284]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a46      	ldr	r2, [pc, #280]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d5f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d5fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5fc:	f7f5 fb26 	bl	8002c4c <HAL_GetTick>
 800d600:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d602:	e008      	b.n	800d616 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d604:	f7f5 fb22 	bl	8002c4c <HAL_GetTick>
 800d608:	4602      	mov	r2, r0
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	1ad3      	subs	r3, r2, r3
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d901      	bls.n	800d616 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d612:	2303      	movs	r3, #3
 800d614:	e077      	b.n	800d706 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d616:	4b3e      	ldr	r3, [pc, #248]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1f0      	bne.n	800d604 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d622:	4b3b      	ldr	r3, [pc, #236]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d626:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d62a:	f023 0303 	bic.w	r3, r3, #3
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	6811      	ldr	r1, [r2, #0]
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	6852      	ldr	r2, [r2, #4]
 800d636:	3a01      	subs	r2, #1
 800d638:	0212      	lsls	r2, r2, #8
 800d63a:	430a      	orrs	r2, r1
 800d63c:	4934      	ldr	r1, [pc, #208]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d63e:	4313      	orrs	r3, r2
 800d640:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d642:	4b33      	ldr	r3, [pc, #204]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d644:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d646:	4b33      	ldr	r3, [pc, #204]	@ (800d714 <RCCEx_PLL2_Config+0x12c>)
 800d648:	4013      	ands	r3, r2
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	6892      	ldr	r2, [r2, #8]
 800d64e:	3a01      	subs	r2, #1
 800d650:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	68d2      	ldr	r2, [r2, #12]
 800d658:	3a01      	subs	r2, #1
 800d65a:	0252      	lsls	r2, r2, #9
 800d65c:	b292      	uxth	r2, r2
 800d65e:	4311      	orrs	r1, r2
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	6912      	ldr	r2, [r2, #16]
 800d664:	3a01      	subs	r2, #1
 800d666:	0412      	lsls	r2, r2, #16
 800d668:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d66c:	4311      	orrs	r1, r2
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	6952      	ldr	r2, [r2, #20]
 800d672:	3a01      	subs	r2, #1
 800d674:	0612      	lsls	r2, r2, #24
 800d676:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d67a:	430a      	orrs	r2, r1
 800d67c:	4924      	ldr	r1, [pc, #144]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d67e:	4313      	orrs	r3, r2
 800d680:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d682:	4b23      	ldr	r3, [pc, #140]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d686:	f023 020c 	bic.w	r2, r3, #12
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	699b      	ldr	r3, [r3, #24]
 800d68e:	4920      	ldr	r1, [pc, #128]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d690:	4313      	orrs	r3, r2
 800d692:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d694:	4b1e      	ldr	r3, [pc, #120]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a1b      	ldr	r3, [r3, #32]
 800d69c:	491c      	ldr	r1, [pc, #112]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800d6a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a6:	4a1a      	ldr	r2, [pc, #104]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d6a8:	f023 0310 	bic.w	r3, r3, #16
 800d6ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d6ae:	4b18      	ldr	r3, [pc, #96]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d6b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	69d2      	ldr	r2, [r2, #28]
 800d6be:	00d2      	lsls	r2, r2, #3
 800d6c0:	4913      	ldr	r1, [pc, #76]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800d6c6:	4b12      	ldr	r3, [pc, #72]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ca:	4a11      	ldr	r2, [pc, #68]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d6cc:	f043 0310 	orr.w	r3, r3, #16
 800d6d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800d6d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a0e      	ldr	r2, [pc, #56]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d6d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d6dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d6de:	f7f5 fab5 	bl	8002c4c <HAL_GetTick>
 800d6e2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6e4:	e008      	b.n	800d6f8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d6e6:	f7f5 fab1 	bl	8002c4c <HAL_GetTick>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	d901      	bls.n	800d6f8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e006      	b.n	800d706 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6f8:	4b05      	ldr	r3, [pc, #20]	@ (800d710 <RCCEx_PLL2_Config+0x128>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d700:	2b00      	cmp	r3, #0
 800d702:	d0f0      	beq.n	800d6e6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800d704:	2300      	movs	r3, #0

}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	46020c00 	.word	0x46020c00
 800d714:	80800000 	.word	0x80800000

0800d718 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800d720:	4b47      	ldr	r3, [pc, #284]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a46      	ldr	r2, [pc, #280]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d72a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d72c:	f7f5 fa8e 	bl	8002c4c <HAL_GetTick>
 800d730:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d732:	e008      	b.n	800d746 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d734:	f7f5 fa8a 	bl	8002c4c <HAL_GetTick>
 800d738:	4602      	mov	r2, r0
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d901      	bls.n	800d746 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d742:	2303      	movs	r3, #3
 800d744:	e077      	b.n	800d836 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d746:	4b3e      	ldr	r3, [pc, #248]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1f0      	bne.n	800d734 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d752:	4b3b      	ldr	r3, [pc, #236]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d756:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d75a:	f023 0303 	bic.w	r3, r3, #3
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	6811      	ldr	r1, [r2, #0]
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	6852      	ldr	r2, [r2, #4]
 800d766:	3a01      	subs	r2, #1
 800d768:	0212      	lsls	r2, r2, #8
 800d76a:	430a      	orrs	r2, r1
 800d76c:	4934      	ldr	r1, [pc, #208]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d76e:	4313      	orrs	r3, r2
 800d770:	630b      	str	r3, [r1, #48]	@ 0x30
 800d772:	4b33      	ldr	r3, [pc, #204]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d776:	4b33      	ldr	r3, [pc, #204]	@ (800d844 <RCCEx_PLL3_Config+0x12c>)
 800d778:	4013      	ands	r3, r2
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	6892      	ldr	r2, [r2, #8]
 800d77e:	3a01      	subs	r2, #1
 800d780:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	68d2      	ldr	r2, [r2, #12]
 800d788:	3a01      	subs	r2, #1
 800d78a:	0252      	lsls	r2, r2, #9
 800d78c:	b292      	uxth	r2, r2
 800d78e:	4311      	orrs	r1, r2
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	6912      	ldr	r2, [r2, #16]
 800d794:	3a01      	subs	r2, #1
 800d796:	0412      	lsls	r2, r2, #16
 800d798:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d79c:	4311      	orrs	r1, r2
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	6952      	ldr	r2, [r2, #20]
 800d7a2:	3a01      	subs	r2, #1
 800d7a4:	0612      	lsls	r2, r2, #24
 800d7a6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d7aa:	430a      	orrs	r2, r1
 800d7ac:	4924      	ldr	r1, [pc, #144]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800d7b2:	4b23      	ldr	r3, [pc, #140]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7b6:	f023 020c 	bic.w	r2, r3, #12
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	699b      	ldr	r3, [r3, #24]
 800d7be:	4920      	ldr	r1, [pc, #128]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d7c4:	4b1e      	ldr	r3, [pc, #120]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6a1b      	ldr	r3, [r3, #32]
 800d7cc:	491c      	ldr	r1, [pc, #112]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800d7d2:	4b1b      	ldr	r3, [pc, #108]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7d6:	4a1a      	ldr	r2, [pc, #104]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7d8:	f023 0310 	bic.w	r3, r3, #16
 800d7dc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d7de:	4b18      	ldr	r3, [pc, #96]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d7e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	69d2      	ldr	r2, [r2, #28]
 800d7ee:	00d2      	lsls	r2, r2, #3
 800d7f0:	4913      	ldr	r1, [pc, #76]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800d7f6:	4b12      	ldr	r3, [pc, #72]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7fa:	4a11      	ldr	r2, [pc, #68]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d7fc:	f043 0310 	orr.w	r3, r3, #16
 800d800:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800d802:	4b0f      	ldr	r3, [pc, #60]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a0e      	ldr	r2, [pc, #56]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d80c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d80e:	f7f5 fa1d 	bl	8002c4c <HAL_GetTick>
 800d812:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d814:	e008      	b.n	800d828 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d816:	f7f5 fa19 	bl	8002c4c <HAL_GetTick>
 800d81a:	4602      	mov	r2, r0
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	2b02      	cmp	r3, #2
 800d822:	d901      	bls.n	800d828 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d824:	2303      	movs	r3, #3
 800d826:	e006      	b.n	800d836 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d828:	4b05      	ldr	r3, [pc, #20]	@ (800d840 <RCCEx_PLL3_Config+0x128>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d830:	2b00      	cmp	r3, #0
 800d832:	d0f0      	beq.n	800d816 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	46020c00 	.word	0x46020c00
 800d844:	80800000 	.word	0x80800000

0800d848 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d850:	2301      	movs	r3, #1
 800d852:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d071      	beq.n	800d93e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	d106      	bne.n	800d874 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7f4 fc92 	bl	8002198 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2202      	movs	r2, #2
 800d878:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d87c:	4b32      	ldr	r3, [pc, #200]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	f003 0310 	and.w	r3, r3, #16
 800d884:	2b10      	cmp	r3, #16
 800d886:	d051      	beq.n	800d92c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d888:	4b2f      	ldr	r3, [pc, #188]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d88a:	22ca      	movs	r2, #202	@ 0xca
 800d88c:	625a      	str	r2, [r3, #36]	@ 0x24
 800d88e:	4b2e      	ldr	r3, [pc, #184]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d890:	2253      	movs	r2, #83	@ 0x53
 800d892:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 f88b 	bl	800d9b0 <RTC_EnterInitMode>
 800d89a:	4603      	mov	r3, r0
 800d89c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d89e:	7bfb      	ldrb	r3, [r7, #15]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d13f      	bne.n	800d924 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800d8a4:	4b28      	ldr	r3, [pc, #160]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d8a6:	699b      	ldr	r3, [r3, #24]
 800d8a8:	4a27      	ldr	r2, [pc, #156]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d8aa:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800d8ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8b2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800d8b4:	4b24      	ldr	r3, [pc, #144]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d8b6:	699a      	ldr	r2, [r3, #24]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6859      	ldr	r1, [r3, #4]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	4319      	orrs	r1, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	699b      	ldr	r3, [r3, #24]
 800d8c6:	430b      	orrs	r3, r1
 800d8c8:	491f      	ldr	r1, [pc, #124]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	68da      	ldr	r2, [r3, #12]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	041b      	lsls	r3, r3, #16
 800d8d8:	491b      	ldr	r1, [pc, #108]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800d8de:	4b1a      	ldr	r3, [pc, #104]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ee:	430b      	orrs	r3, r1
 800d8f0:	4915      	ldr	r1, [pc, #84]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f896 	bl	800da28 <RTC_ExitInitMode>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800d900:	7bfb      	ldrb	r3, [r7, #15]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10e      	bne.n	800d924 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800d906:	4b10      	ldr	r3, [pc, #64]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a19      	ldr	r1, [r3, #32]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	69db      	ldr	r3, [r3, #28]
 800d916:	4319      	orrs	r1, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	695b      	ldr	r3, [r3, #20]
 800d91c:	430b      	orrs	r3, r1
 800d91e:	490a      	ldr	r1, [pc, #40]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d920:	4313      	orrs	r3, r2
 800d922:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d924:	4b08      	ldr	r3, [pc, #32]	@ (800d948 <HAL_RTC_Init+0x100>)
 800d926:	22ff      	movs	r2, #255	@ 0xff
 800d928:	625a      	str	r2, [r3, #36]	@ 0x24
 800d92a:	e001      	b.n	800d930 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d930:	7bfb      	ldrb	r3, [r7, #15]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d103      	bne.n	800d93e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	46007800 	.word	0x46007800

0800d94c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800d954:	4b15      	ldr	r3, [pc, #84]	@ (800d9ac <HAL_RTC_WaitForSynchro+0x60>)
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	4a14      	ldr	r2, [pc, #80]	@ (800d9ac <HAL_RTC_WaitForSynchro+0x60>)
 800d95a:	f023 0320 	bic.w	r3, r3, #32
 800d95e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800d960:	f7f5 f974 	bl	8002c4c <HAL_GetTick>
 800d964:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d966:	e013      	b.n	800d990 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d968:	f7f5 f970 	bl	8002c4c <HAL_GetTick>
 800d96c:	4602      	mov	r2, r0
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d976:	d90b      	bls.n	800d990 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d978:	4b0c      	ldr	r3, [pc, #48]	@ (800d9ac <HAL_RTC_WaitForSynchro+0x60>)
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10c      	bne.n	800d99e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2203      	movs	r2, #3
 800d988:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e008      	b.n	800d9a2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d990:	4b06      	ldr	r3, [pc, #24]	@ (800d9ac <HAL_RTC_WaitForSynchro+0x60>)
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	f003 0320 	and.w	r3, r3, #32
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d0e5      	beq.n	800d968 <HAL_RTC_WaitForSynchro+0x1c>
 800d99c:	e000      	b.n	800d9a0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800d99e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	46007800 	.word	0x46007800

0800d9b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800d9bc:	4b19      	ldr	r3, [pc, #100]	@ (800da24 <RTC_EnterInitMode+0x74>)
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d128      	bne.n	800da1a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d9c8:	4b16      	ldr	r3, [pc, #88]	@ (800da24 <RTC_EnterInitMode+0x74>)
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	4a15      	ldr	r2, [pc, #84]	@ (800da24 <RTC_EnterInitMode+0x74>)
 800d9ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9d2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800d9d4:	f7f5 f93a 	bl	8002c4c <HAL_GetTick>
 800d9d8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d9da:	e013      	b.n	800da04 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d9dc:	f7f5 f936 	bl	8002c4c <HAL_GetTick>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d9ea:	d90b      	bls.n	800da04 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800d9ec:	4b0d      	ldr	r3, [pc, #52]	@ (800da24 <RTC_EnterInitMode+0x74>)
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d10f      	bne.n	800da18 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2203      	movs	r2, #3
 800da00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800da04:	4b07      	ldr	r3, [pc, #28]	@ (800da24 <RTC_EnterInitMode+0x74>)
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d104      	bne.n	800da1a <RTC_EnterInitMode+0x6a>
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	2b03      	cmp	r3, #3
 800da14:	d1e2      	bne.n	800d9dc <RTC_EnterInitMode+0x2c>
 800da16:	e000      	b.n	800da1a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800da18:	bf00      	nop
        }
      }
    }
  }

  return status;
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	46007800 	.word	0x46007800

0800da28 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da30:	2300      	movs	r3, #0
 800da32:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800da34:	4b1a      	ldr	r3, [pc, #104]	@ (800daa0 <RTC_ExitInitMode+0x78>)
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	4a19      	ldr	r2, [pc, #100]	@ (800daa0 <RTC_ExitInitMode+0x78>)
 800da3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da3e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800da40:	4b17      	ldr	r3, [pc, #92]	@ (800daa0 <RTC_ExitInitMode+0x78>)
 800da42:	699b      	ldr	r3, [r3, #24]
 800da44:	f003 0320 	and.w	r3, r3, #32
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10c      	bne.n	800da66 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7ff ff7d 	bl	800d94c <HAL_RTC_WaitForSynchro>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d01e      	beq.n	800da96 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2203      	movs	r2, #3
 800da5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800da60:	2303      	movs	r3, #3
 800da62:	73fb      	strb	r3, [r7, #15]
 800da64:	e017      	b.n	800da96 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800da66:	4b0e      	ldr	r3, [pc, #56]	@ (800daa0 <RTC_ExitInitMode+0x78>)
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	4a0d      	ldr	r2, [pc, #52]	@ (800daa0 <RTC_ExitInitMode+0x78>)
 800da6c:	f023 0320 	bic.w	r3, r3, #32
 800da70:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff ff6a 	bl	800d94c <HAL_RTC_WaitForSynchro>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d005      	beq.n	800da8a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2203      	movs	r2, #3
 800da82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800da86:	2303      	movs	r3, #3
 800da88:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800da8a:	4b05      	ldr	r3, [pc, #20]	@ (800daa0 <RTC_ExitInitMode+0x78>)
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	4a04      	ldr	r2, [pc, #16]	@ (800daa0 <RTC_ExitInitMode+0x78>)
 800da90:	f043 0320 	orr.w	r3, r3, #32
 800da94:	6193      	str	r3, [r2, #24]
  }
  return status;
 800da96:	7bfb      	ldrb	r3, [r7, #15]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	46007800 	.word	0x46007800

0800daa4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	4910      	ldr	r1, [pc, #64]	@ (800daf8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800dab8:	4313      	orrs	r3, r2
 800daba:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	689a      	ldr	r2, [r3, #8]
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	431a      	orrs	r2, r3
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	490c      	ldr	r1, [pc, #48]	@ (800dafc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800dacc:	4313      	orrs	r3, r2
 800dace:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800dad0:	4b0a      	ldr	r3, [pc, #40]	@ (800dafc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800dad2:	6a1b      	ldr	r3, [r3, #32]
 800dad4:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	6919      	ldr	r1, [r3, #16]
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	695b      	ldr	r3, [r3, #20]
 800dae0:	041b      	lsls	r3, r3, #16
 800dae2:	430b      	orrs	r3, r1
 800dae4:	4905      	ldr	r1, [pc, #20]	@ (800dafc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800dae6:	4313      	orrs	r3, r2
 800dae8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	46007800 	.word	0x46007800
 800dafc:	46007c00 	.word	0x46007c00

0800db00 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
 800db0c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	2b02      	cmp	r3, #2
 800db12:	d904      	bls.n	800db1e <HAL_SAI_InitProtocol+0x1e>
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	3b03      	subs	r3, #3
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d812      	bhi.n	800db42 <HAL_SAI_InitProtocol+0x42>
 800db1c:	e008      	b.n	800db30 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	68b9      	ldr	r1, [r7, #8]
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f000 fb21 	bl	800e16c <SAI_InitI2S>
 800db2a:	4603      	mov	r3, r0
 800db2c:	75fb      	strb	r3, [r7, #23]
      break;
 800db2e:	e00b      	b.n	800db48 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	68b9      	ldr	r1, [r7, #8]
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f000 fbca 	bl	800e2d0 <SAI_InitPCM>
 800db3c:	4603      	mov	r3, r0
 800db3e:	75fb      	strb	r3, [r7, #23]
      break;
 800db40:	e002      	b.n	800db48 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800db42:	2301      	movs	r3, #1
 800db44:	75fb      	strb	r3, [r7, #23]
      break;
 800db46:	bf00      	nop
  }

  if (status == HAL_OK)
 800db48:	7dfb      	ldrb	r3, [r7, #23]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d104      	bne.n	800db58 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f000 f808 	bl	800db64 <HAL_SAI_Init>
 800db54:	4603      	mov	r3, r0
 800db56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800db58:	7dfb      	ldrb	r3, [r7, #23]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3718      	adds	r7, #24
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
	...

0800db64 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08a      	sub	sp, #40	@ 0x28
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	e1ce      	b.n	800df14 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d10e      	bne.n	800db9e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a83      	ldr	r2, [pc, #524]	@ (800dd94 <HAL_SAI_Init+0x230>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d107      	bne.n	800db9a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d103      	bne.n	800db9a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	e1ba      	b.n	800df14 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d106      	bne.n	800dbb8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7f4 fcc2 	bl	800253c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 fc43 	bl	800e444 <SAI_Disable>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e1a5      	b.n	800df14 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2202      	movs	r2, #2
 800dbcc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	2b02      	cmp	r3, #2
 800dbd6:	d00c      	beq.n	800dbf2 <HAL_SAI_Init+0x8e>
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d80d      	bhi.n	800dbf8 <HAL_SAI_Init+0x94>
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <HAL_SAI_Init+0x82>
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d003      	beq.n	800dbec <HAL_SAI_Init+0x88>
 800dbe4:	e008      	b.n	800dbf8 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dbea:	e008      	b.n	800dbfe <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800dbec:	2310      	movs	r3, #16
 800dbee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dbf0:	e005      	b.n	800dbfe <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800dbf2:	2320      	movs	r3, #32
 800dbf4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dbf6:	e002      	b.n	800dbfe <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dbfc:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	2b03      	cmp	r3, #3
 800dc04:	d81d      	bhi.n	800dc42 <HAL_SAI_Init+0xde>
 800dc06:	a201      	add	r2, pc, #4	@ (adr r2, 800dc0c <HAL_SAI_Init+0xa8>)
 800dc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc0c:	0800dc1d 	.word	0x0800dc1d
 800dc10:	0800dc23 	.word	0x0800dc23
 800dc14:	0800dc2b 	.word	0x0800dc2b
 800dc18:	0800dc33 	.word	0x0800dc33
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	61fb      	str	r3, [r7, #28]
      break;
 800dc20:	e012      	b.n	800dc48 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800dc22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc26:	61fb      	str	r3, [r7, #28]
      break;
 800dc28:	e00e      	b.n	800dc48 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dc2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc2e:	61fb      	str	r3, [r7, #28]
      break;
 800dc30:	e00a      	b.n	800dc48 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dc32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc36:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3a:	f043 0301 	orr.w	r3, r3, #1
 800dc3e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc40:	e002      	b.n	800dc48 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	61fb      	str	r3, [r7, #28]
      break;
 800dc46:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a51      	ldr	r2, [pc, #324]	@ (800dd94 <HAL_SAI_Init+0x230>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d004      	beq.n	800dc5c <HAL_SAI_Init+0xf8>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a50      	ldr	r2, [pc, #320]	@ (800dd98 <HAL_SAI_Init+0x234>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d103      	bne.n	800dc64 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800dc5c:	4a4f      	ldr	r2, [pc, #316]	@ (800dd9c <HAL_SAI_Init+0x238>)
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc60:	6013      	str	r3, [r2, #0]
 800dc62:	e002      	b.n	800dc6a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800dc64:	4a4e      	ldr	r2, [pc, #312]	@ (800dda0 <HAL_SAI_Init+0x23c>)
 800dc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc68:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a1b      	ldr	r3, [r3, #32]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d077      	beq.n	800dd62 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a47      	ldr	r2, [pc, #284]	@ (800dd94 <HAL_SAI_Init+0x230>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d004      	beq.n	800dc86 <HAL_SAI_Init+0x122>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a45      	ldr	r2, [pc, #276]	@ (800dd98 <HAL_SAI_Init+0x234>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d107      	bne.n	800dc96 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800dc86:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dc8a:	f04f 0100 	mov.w	r1, #0
 800dc8e:	f7fe f925 	bl	800bedc <HAL_RCCEx_GetPeriphCLKFreq>
 800dc92:	61b8      	str	r0, [r7, #24]
 800dc94:	e006      	b.n	800dca4 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800dc96:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dc9a:	f04f 0100 	mov.w	r1, #0
 800dc9e:	f7fe f91d 	bl	800bedc <HAL_RCCEx_GetPeriphCLKFreq>
 800dca2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800dcac:	d120      	bne.n	800dcf0 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcb2:	2b04      	cmp	r3, #4
 800dcb4:	d102      	bne.n	800dcbc <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800dcb6:	2340      	movs	r3, #64	@ 0x40
 800dcb8:	613b      	str	r3, [r7, #16]
 800dcba:	e00a      	b.n	800dcd2 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcc0:	2b08      	cmp	r3, #8
 800dcc2:	d103      	bne.n	800dccc <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800dcc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dcc8:	613b      	str	r3, [r7, #16]
 800dcca:	e002      	b.n	800dcd2 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcd0:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800dcd2:	69ba      	ldr	r2, [r7, #24]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4413      	add	r3, r2
 800dcda:	005b      	lsls	r3, r3, #1
 800dcdc:	4619      	mov	r1, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6a1b      	ldr	r3, [r3, #32]
 800dce2:	693a      	ldr	r2, [r7, #16]
 800dce4:	fb02 f303 	mul.w	r3, r2, r3
 800dce8:	fbb1 f3f3 	udiv	r3, r1, r3
 800dcec:	617b      	str	r3, [r7, #20]
 800dcee:	e017      	b.n	800dd20 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dcf8:	d101      	bne.n	800dcfe <HAL_SAI_Init+0x19a>
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	e000      	b.n	800dd00 <HAL_SAI_Init+0x19c>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800dd02:	69ba      	ldr	r2, [r7, #24]
 800dd04:	4613      	mov	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4413      	add	r3, r2
 800dd0a:	005b      	lsls	r3, r3, #1
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a1b      	ldr	r3, [r3, #32]
 800dd12:	68fa      	ldr	r2, [r7, #12]
 800dd14:	fb02 f303 	mul.w	r3, r2, r3
 800dd18:	021b      	lsls	r3, r3, #8
 800dd1a:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd1e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	4a20      	ldr	r2, [pc, #128]	@ (800dda4 <HAL_SAI_Init+0x240>)
 800dd24:	fba2 2303 	umull	r2, r3, r2, r3
 800dd28:	08da      	lsrs	r2, r3, #3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800dd2e:	6979      	ldr	r1, [r7, #20]
 800dd30:	4b1c      	ldr	r3, [pc, #112]	@ (800dda4 <HAL_SAI_Init+0x240>)
 800dd32:	fba3 2301 	umull	r2, r3, r3, r1
 800dd36:	08da      	lsrs	r2, r3, #3
 800dd38:	4613      	mov	r3, r2
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4413      	add	r3, r2
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	1aca      	subs	r2, r1, r3
 800dd42:	2a08      	cmp	r2, #8
 800dd44:	d904      	bls.n	800dd50 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd4a:	1c5a      	adds	r2, r3, #1
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd54:	2b04      	cmp	r3, #4
 800dd56:	d104      	bne.n	800dd62 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd5c:	085a      	lsrs	r2, r3, #1
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d003      	beq.n	800dd72 <HAL_SAI_Init+0x20e>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	d109      	bne.n	800dd86 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d101      	bne.n	800dd7e <HAL_SAI_Init+0x21a>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e001      	b.n	800dd82 <HAL_SAI_Init+0x21e>
 800dd7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd82:	623b      	str	r3, [r7, #32]
 800dd84:	e012      	b.n	800ddac <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d10c      	bne.n	800dda8 <HAL_SAI_Init+0x244>
 800dd8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd92:	e00a      	b.n	800ddaa <HAL_SAI_Init+0x246>
 800dd94:	40015404 	.word	0x40015404
 800dd98:	40015424 	.word	0x40015424
 800dd9c:	40015400 	.word	0x40015400
 800dda0:	40015800 	.word	0x40015800
 800dda4:	cccccccd 	.word	0xcccccccd
 800dda8:	2300      	movs	r3, #0
 800ddaa:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	6819      	ldr	r1, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	4b59      	ldr	r3, [pc, #356]	@ (800df1c <HAL_SAI_Init+0x3b8>)
 800ddb8:	400b      	ands	r3, r1
 800ddba:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6819      	ldr	r1, [r3, #0]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	685a      	ldr	r2, [r3, #4]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ddd0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddd6:	431a      	orrs	r2, r3
 800ddd8:	6a3b      	ldr	r3, [r7, #32]
 800ddda:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800dde4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	695b      	ldr	r3, [r3, #20]
 800ddea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ddf0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf6:	051b      	lsls	r3, r3, #20
 800ddf8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ddfe:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	691b      	ldr	r3, [r3, #16]
 800de04:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	430a      	orrs	r2, r1
 800de0c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	6812      	ldr	r2, [r2, #0]
 800de18:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800de1c:	f023 030f 	bic.w	r3, r3, #15
 800de20:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6859      	ldr	r1, [r3, #4]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	69da      	ldr	r2, [r3, #28]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de30:	431a      	orrs	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de36:	431a      	orrs	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	430a      	orrs	r2, r1
 800de3e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	6899      	ldr	r1, [r3, #8]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	4b35      	ldr	r3, [pc, #212]	@ (800df20 <HAL_SAI_Init+0x3bc>)
 800de4c:	400b      	ands	r3, r1
 800de4e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	6899      	ldr	r1, [r3, #8]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de5a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800de60:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800de66:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800de6c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de72:	3b01      	subs	r3, #1
 800de74:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800de76:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	430a      	orrs	r2, r1
 800de7e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68d9      	ldr	r1, [r3, #12]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800de8e:	400b      	ands	r3, r1
 800de90:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	68d9      	ldr	r1, [r3, #12]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dea0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dea6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dea8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deae:	3b01      	subs	r3, #1
 800deb0:	021b      	lsls	r3, r3, #8
 800deb2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	430a      	orrs	r2, r1
 800deba:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a18      	ldr	r2, [pc, #96]	@ (800df24 <HAL_SAI_Init+0x3c0>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d119      	bne.n	800defa <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800dec6:	4b18      	ldr	r3, [pc, #96]	@ (800df28 <HAL_SAI_Init+0x3c4>)
 800dec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deca:	4a17      	ldr	r2, [pc, #92]	@ (800df28 <HAL_SAI_Init+0x3c4>)
 800decc:	f023 0301 	bic.w	r3, r3, #1
 800ded0:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d10e      	bne.n	800defa <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dee4:	3b01      	subs	r3, #1
 800dee6:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800dee8:	490f      	ldr	r1, [pc, #60]	@ (800df28 <HAL_SAI_Init+0x3c4>)
 800deea:	4313      	orrs	r3, r2
 800deec:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800deee:	4b0e      	ldr	r3, [pc, #56]	@ (800df28 <HAL_SAI_Init+0x3c4>)
 800def0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800def2:	4a0d      	ldr	r2, [pc, #52]	@ (800df28 <HAL_SAI_Init+0x3c4>)
 800def4:	f043 0301 	orr.w	r3, r3, #1
 800def8:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2201      	movs	r2, #1
 800df06:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3728      	adds	r7, #40	@ 0x28
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	f005c010 	.word	0xf005c010
 800df20:	fff88000 	.word	0xfff88000
 800df24:	40015404 	.word	0x40015404
 800df28:	40015400 	.word	0x40015400

0800df2c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b088      	sub	sp, #32
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	4613      	mov	r3, r2
 800df38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800df3a:	f7f4 fe87 	bl	8002c4c <HAL_GetTick>
 800df3e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <HAL_SAI_Transmit_DMA+0x20>
 800df46:	88fb      	ldrh	r3, [r7, #6]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d101      	bne.n	800df50 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e0e4      	b.n	800e11a <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800df56:	b2db      	uxtb	r3, r3
 800df58:	2b01      	cmp	r3, #1
 800df5a:	f040 80dd 	bne.w	800e118 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800df64:	2b01      	cmp	r3, #1
 800df66:	d101      	bne.n	800df6c <HAL_SAI_Transmit_DMA+0x40>
 800df68:	2302      	movs	r3, #2
 800df6a:	e0d6      	b.n	800e11a <HAL_SAI_Transmit_DMA+0x1ee>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2201      	movs	r2, #1
 800df70:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	88fa      	ldrh	r2, [r7, #6]
 800df7e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	88fa      	ldrh	r2, [r7, #6]
 800df86:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2212      	movs	r2, #18
 800df96:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfa0:	4a60      	ldr	r2, [pc, #384]	@ (800e124 <HAL_SAI_Transmit_DMA+0x1f8>)
 800dfa2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfaa:	4a5f      	ldr	r2, [pc, #380]	@ (800e128 <HAL_SAI_Transmit_DMA+0x1fc>)
 800dfac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfb4:	4a5d      	ldr	r2, [pc, #372]	@ (800e12c <HAL_SAI_Transmit_DMA+0x200>)
 800dfb6:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfc6:	2b40      	cmp	r3, #64	@ 0x40
 800dfc8:	d106      	bne.n	800dfd8 <HAL_SAI_Transmit_DMA+0xac>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d102      	bne.n	800dfd8 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800dfd2:	88fb      	ldrh	r3, [r7, #6]
 800dfd4:	61bb      	str	r3, [r7, #24]
 800dfd6:	e00a      	b.n	800dfee <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfdc:	2b80      	cmp	r3, #128	@ 0x80
 800dfde:	d803      	bhi.n	800dfe8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800dfe0:	88fb      	ldrh	r3, [r7, #6]
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	61bb      	str	r3, [r7, #24]
 800dfe6:	e002      	b.n	800dfee <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800dfe8:	88fb      	ldrh	r3, [r7, #6]
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d02d      	beq.n	800e05a <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e006:	2b00      	cmp	r3, #0
 800e008:	d021      	beq.n	800e04e <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	69ba      	ldr	r2, [r7, #24]
 800e016:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f103 021c 	add.w	r2, r3, #28
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e042:	4618      	mov	r0, r3
 800e044:	f7f8 fa8c 	bl	8006560 <HAL_DMAEx_List_Start_IT>
 800e048:	4603      	mov	r3, r0
 800e04a:	77fb      	strb	r3, [r7, #31]
 800e04c:	e014      	b.n	800e078 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e05f      	b.n	800e11a <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e064:	4619      	mov	r1, r3
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	331c      	adds	r3, #28
 800e06c:	461a      	mov	r2, r3
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	f7f7 fae4 	bl	800563c <HAL_DMA_Start_IT>
 800e074:	4603      	mov	r3, r0
 800e076:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800e078:	7ffb      	ldrb	r3, [r7, #31]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d005      	beq.n	800e08a <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	e047      	b.n	800e11a <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e08a:	2100      	movs	r1, #0
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f000 f9a1 	bl	800e3d4 <SAI_InterruptFlag>
 800e092:	4601      	mov	r1, r0
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	691a      	ldr	r2, [r3, #16]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	430a      	orrs	r2, r1
 800e0a0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e0b0:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e0b2:	e015      	b.n	800e0e0 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e0b4:	f7f4 fdca 	bl	8002c4c <HAL_GetTick>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e0c2:	d90d      	bls.n	800e0e0 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e0ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	e01c      	b.n	800e11a <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d0e2      	beq.n	800e0b4 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d107      	bne.n	800e10c <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e10a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	e000      	b.n	800e11a <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800e118:	2302      	movs	r3, #2
  }
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3720      	adds	r7, #32
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	0800e517 	.word	0x0800e517
 800e128:	0800e4b9 	.word	0x0800e4b9
 800e12c:	0800e533 	.word	0x0800e533

0800e130 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800e138:	bf00      	nop
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e14c:	bf00      	nop
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b087      	sub	sp, #28
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
 800e178:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2200      	movs	r2, #0
 800e188:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d003      	beq.n	800e19a <SAI_InitI2S+0x2e>
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	2b02      	cmp	r3, #2
 800e198:	d103      	bne.n	800e1a2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2200      	movs	r2, #0
 800e19e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e1a0:	e002      	b.n	800e1a8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e1ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e1b6:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	683a      	ldr	r2, [r7, #0]
 800e1c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d001      	beq.n	800e1d2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e077      	b.n	800e2c2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d107      	bne.n	800e1e8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e1e4:	665a      	str	r2, [r3, #100]	@ 0x64
 800e1e6:	e006      	b.n	800e1f6 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e1ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b03      	cmp	r3, #3
 800e1fa:	d84f      	bhi.n	800e29c <SAI_InitI2S+0x130>
 800e1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e204 <SAI_InitI2S+0x98>)
 800e1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e202:	bf00      	nop
 800e204:	0800e215 	.word	0x0800e215
 800e208:	0800e237 	.word	0x0800e237
 800e20c:	0800e259 	.word	0x0800e259
 800e210:	0800e27b 	.word	0x0800e27b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2280      	movs	r2, #128	@ 0x80
 800e218:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	085b      	lsrs	r3, r3, #1
 800e21e:	015a      	lsls	r2, r3, #5
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	085b      	lsrs	r3, r3, #1
 800e228:	011a      	lsls	r2, r3, #4
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2240      	movs	r2, #64	@ 0x40
 800e232:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e234:	e035      	b.n	800e2a2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2280      	movs	r2, #128	@ 0x80
 800e23a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	085b      	lsrs	r3, r3, #1
 800e240:	019a      	lsls	r2, r3, #6
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	085b      	lsrs	r3, r3, #1
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2280      	movs	r2, #128	@ 0x80
 800e254:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e256:	e024      	b.n	800e2a2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	22c0      	movs	r2, #192	@ 0xc0
 800e25c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	085b      	lsrs	r3, r3, #1
 800e262:	019a      	lsls	r2, r3, #6
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	085b      	lsrs	r3, r3, #1
 800e26c:	015a      	lsls	r2, r3, #5
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2280      	movs	r2, #128	@ 0x80
 800e276:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e278:	e013      	b.n	800e2a2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	22e0      	movs	r2, #224	@ 0xe0
 800e27e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	085b      	lsrs	r3, r3, #1
 800e284:	019a      	lsls	r2, r3, #6
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	085b      	lsrs	r3, r3, #1
 800e28e:	015a      	lsls	r2, r3, #5
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2280      	movs	r2, #128	@ 0x80
 800e298:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e29a:	e002      	b.n	800e2a2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e29c:	2301      	movs	r3, #1
 800e29e:	75fb      	strb	r3, [r7, #23]
      break;
 800e2a0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	2b02      	cmp	r3, #2
 800e2a6:	d10b      	bne.n	800e2c0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d102      	bne.n	800e2b4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2210      	movs	r2, #16
 800e2b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d102      	bne.n	800e2c0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2208      	movs	r2, #8
 800e2be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	371c      	adds	r7, #28
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop

0800e2d0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b087      	sub	sp, #28
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
 800e2dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d003      	beq.n	800e2fe <SAI_InitPCM+0x2e>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	d103      	bne.n	800e306 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2201      	movs	r2, #1
 800e302:	651a      	str	r2, [r3, #80]	@ 0x50
 800e304:	e002      	b.n	800e30c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2200      	movs	r2, #0
 800e30a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2200      	movs	r2, #0
 800e310:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e318:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e320:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2200      	movs	r2, #0
 800e326:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	683a      	ldr	r2, [r7, #0]
 800e32c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e334:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	2b04      	cmp	r3, #4
 800e33a:	d103      	bne.n	800e344 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2201      	movs	r2, #1
 800e340:	659a      	str	r2, [r3, #88]	@ 0x58
 800e342:	e002      	b.n	800e34a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	220d      	movs	r2, #13
 800e348:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b03      	cmp	r3, #3
 800e34e:	d837      	bhi.n	800e3c0 <SAI_InitPCM+0xf0>
 800e350:	a201      	add	r2, pc, #4	@ (adr r2, 800e358 <SAI_InitPCM+0x88>)
 800e352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e356:	bf00      	nop
 800e358:	0800e369 	.word	0x0800e369
 800e35c:	0800e37f 	.word	0x0800e37f
 800e360:	0800e395 	.word	0x0800e395
 800e364:	0800e3ab 	.word	0x0800e3ab
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2280      	movs	r2, #128	@ 0x80
 800e36c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	011a      	lsls	r2, r3, #4
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2240      	movs	r2, #64	@ 0x40
 800e37a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e37c:	e023      	b.n	800e3c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2280      	movs	r2, #128	@ 0x80
 800e382:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	015a      	lsls	r2, r3, #5
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2280      	movs	r2, #128	@ 0x80
 800e390:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e392:	e018      	b.n	800e3c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	22c0      	movs	r2, #192	@ 0xc0
 800e398:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	015a      	lsls	r2, r3, #5
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2280      	movs	r2, #128	@ 0x80
 800e3a6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e3a8:	e00d      	b.n	800e3c6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	22e0      	movs	r2, #224	@ 0xe0
 800e3ae:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	015a      	lsls	r2, r3, #5
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2280      	movs	r2, #128	@ 0x80
 800e3bc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e3be:	e002      	b.n	800e3c6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	75fb      	strb	r3, [r7, #23]
      break;
 800e3c4:	bf00      	nop
  }

  return status;
 800e3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	371c      	adds	r7, #28
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e3e4:	78fb      	ldrb	r3, [r7, #3]
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d103      	bne.n	800e3f2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f043 0308 	orr.w	r3, r3, #8
 800e3f0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3f6:	2b08      	cmp	r3, #8
 800e3f8:	d10b      	bne.n	800e412 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e3fe:	2b03      	cmp	r3, #3
 800e400:	d003      	beq.n	800e40a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	2b01      	cmp	r3, #1
 800e408:	d103      	bne.n	800e412 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f043 0310 	orr.w	r3, r3, #16
 800e410:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	2b03      	cmp	r3, #3
 800e418:	d003      	beq.n	800e422 <SAI_InterruptFlag+0x4e>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	2b02      	cmp	r3, #2
 800e420:	d104      	bne.n	800e42c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	e003      	b.n	800e434 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f043 0304 	orr.w	r3, r3, #4
 800e432:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e434:	68fb      	ldr	r3, [r7, #12]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3714      	adds	r7, #20
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
	...

0800e444 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e444:	b480      	push	{r7}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e44c:	4b18      	ldr	r3, [pc, #96]	@ (800e4b0 <SAI_Disable+0x6c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a18      	ldr	r2, [pc, #96]	@ (800e4b4 <SAI_Disable+0x70>)
 800e452:	fba2 2303 	umull	r2, r3, r2, r3
 800e456:	0b1b      	lsrs	r3, r3, #12
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e45c:	2300      	movs	r3, #0
 800e45e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800e46e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d10a      	bne.n	800e48c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e47c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800e486:	2303      	movs	r3, #3
 800e488:	72fb      	strb	r3, [r7, #11]
      break;
 800e48a:	e009      	b.n	800e4a0 <SAI_Disable+0x5c>
    }
    count--;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	3b01      	subs	r3, #1
 800e490:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1e7      	bne.n	800e470 <SAI_Disable+0x2c>

  return status;
 800e4a0:	7afb      	ldrb	r3, [r7, #11]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3714      	adds	r7, #20
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	20000000 	.word	0x20000000
 800e4b4:	95cbec1b 	.word	0x95cbec1b

0800e4b8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e4c4:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4ca:	2b81      	cmp	r3, #129	@ 0x81
 800e4cc:	d01c      	beq.n	800e508 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e4e4:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	68f8      	ldr	r0, [r7, #12]
 800e4ea:	f7ff ff73 	bl	800e3d4 <SAI_InterruptFlag>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	43d9      	mvns	r1, r3
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	691a      	ldr	r2, [r3, #16]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	400a      	ands	r2, r1
 800e4fe:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2201      	movs	r2, #1
 800e504:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f7ff fe11 	bl	800e130 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e50e:	bf00      	nop
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b084      	sub	sp, #16
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e522:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f7ff fe0d 	bl	800e144 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e52a:	bf00      	nop
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b084      	sub	sp, #16
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e53e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e546:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e55e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f7ff ff6f 	bl	800e444 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2200      	movs	r2, #0
 800e572:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f7ff fdee 	bl	800e158 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e57c:	bf00      	nop
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e049      	b.n	800e62a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7f3 fe62 	bl	8002274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	f000 fb3c 	bl	800ec40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2201      	movs	r2, #1
 800e604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2201      	movs	r2, #1
 800e60c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2201      	movs	r2, #1
 800e614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2201      	movs	r2, #1
 800e624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
	...

0800e634 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e642:	b2db      	uxtb	r3, r3
 800e644:	2b01      	cmp	r3, #1
 800e646:	d001      	beq.n	800e64c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e648:	2301      	movs	r3, #1
 800e64a:	e06a      	b.n	800e722 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2202      	movs	r2, #2
 800e650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a35      	ldr	r2, [pc, #212]	@ (800e730 <HAL_TIM_Base_Start+0xfc>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d040      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a34      	ldr	r2, [pc, #208]	@ (800e734 <HAL_TIM_Base_Start+0x100>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d03b      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e670:	d036      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e67a:	d031      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a2d      	ldr	r2, [pc, #180]	@ (800e738 <HAL_TIM_Base_Start+0x104>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d02c      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a2c      	ldr	r2, [pc, #176]	@ (800e73c <HAL_TIM_Base_Start+0x108>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d027      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a2a      	ldr	r2, [pc, #168]	@ (800e740 <HAL_TIM_Base_Start+0x10c>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d022      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a29      	ldr	r2, [pc, #164]	@ (800e744 <HAL_TIM_Base_Start+0x110>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d01d      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a27      	ldr	r2, [pc, #156]	@ (800e748 <HAL_TIM_Base_Start+0x114>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d018      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a26      	ldr	r2, [pc, #152]	@ (800e74c <HAL_TIM_Base_Start+0x118>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d013      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a24      	ldr	r2, [pc, #144]	@ (800e750 <HAL_TIM_Base_Start+0x11c>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d00e      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a23      	ldr	r2, [pc, #140]	@ (800e754 <HAL_TIM_Base_Start+0x120>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d009      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a21      	ldr	r2, [pc, #132]	@ (800e758 <HAL_TIM_Base_Start+0x124>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d004      	beq.n	800e6e0 <HAL_TIM_Base_Start+0xac>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4a20      	ldr	r2, [pc, #128]	@ (800e75c <HAL_TIM_Base_Start+0x128>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d115      	bne.n	800e70c <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689a      	ldr	r2, [r3, #8]
 800e6e6:	4b1e      	ldr	r3, [pc, #120]	@ (800e760 <HAL_TIM_Base_Start+0x12c>)
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2b06      	cmp	r3, #6
 800e6f0:	d015      	beq.n	800e71e <HAL_TIM_Base_Start+0xea>
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6f8:	d011      	beq.n	800e71e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f042 0201 	orr.w	r2, r2, #1
 800e708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e70a:	e008      	b.n	800e71e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f042 0201 	orr.w	r2, r2, #1
 800e71a:	601a      	str	r2, [r3, #0]
 800e71c:	e000      	b.n	800e720 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e71e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3714      	adds	r7, #20
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	40012c00 	.word	0x40012c00
 800e734:	50012c00 	.word	0x50012c00
 800e738:	40000400 	.word	0x40000400
 800e73c:	50000400 	.word	0x50000400
 800e740:	40000800 	.word	0x40000800
 800e744:	50000800 	.word	0x50000800
 800e748:	40000c00 	.word	0x40000c00
 800e74c:	50000c00 	.word	0x50000c00
 800e750:	40013400 	.word	0x40013400
 800e754:	50013400 	.word	0x50013400
 800e758:	40014000 	.word	0x40014000
 800e75c:	50014000 	.word	0x50014000
 800e760:	00010007 	.word	0x00010007

0800e764 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e772:	2301      	movs	r3, #1
 800e774:	e049      	b.n	800e80a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7f3 fd50 	bl	8002230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2202      	movs	r2, #2
 800e794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	3304      	adds	r3, #4
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	f000 fa4c 	bl	800ec40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3708      	adds	r7, #8
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e820:	2300      	movs	r3, #0
 800e822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d101      	bne.n	800e832 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e82e:	2302      	movs	r3, #2
 800e830:	e0ff      	b.n	800ea32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2201      	movs	r2, #1
 800e836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2b14      	cmp	r3, #20
 800e83e:	f200 80f0 	bhi.w	800ea22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e842:	a201      	add	r2, pc, #4	@ (adr r2, 800e848 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e848:	0800e89d 	.word	0x0800e89d
 800e84c:	0800ea23 	.word	0x0800ea23
 800e850:	0800ea23 	.word	0x0800ea23
 800e854:	0800ea23 	.word	0x0800ea23
 800e858:	0800e8dd 	.word	0x0800e8dd
 800e85c:	0800ea23 	.word	0x0800ea23
 800e860:	0800ea23 	.word	0x0800ea23
 800e864:	0800ea23 	.word	0x0800ea23
 800e868:	0800e91f 	.word	0x0800e91f
 800e86c:	0800ea23 	.word	0x0800ea23
 800e870:	0800ea23 	.word	0x0800ea23
 800e874:	0800ea23 	.word	0x0800ea23
 800e878:	0800e95f 	.word	0x0800e95f
 800e87c:	0800ea23 	.word	0x0800ea23
 800e880:	0800ea23 	.word	0x0800ea23
 800e884:	0800ea23 	.word	0x0800ea23
 800e888:	0800e9a1 	.word	0x0800e9a1
 800e88c:	0800ea23 	.word	0x0800ea23
 800e890:	0800ea23 	.word	0x0800ea23
 800e894:	0800ea23 	.word	0x0800ea23
 800e898:	0800e9e1 	.word	0x0800e9e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	68b9      	ldr	r1, [r7, #8]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f000 fad2 	bl	800ee4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	699a      	ldr	r2, [r3, #24]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f042 0208 	orr.w	r2, r2, #8
 800e8b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	699a      	ldr	r2, [r3, #24]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f022 0204 	bic.w	r2, r2, #4
 800e8c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6999      	ldr	r1, [r3, #24]
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	691a      	ldr	r2, [r3, #16]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	430a      	orrs	r2, r1
 800e8d8:	619a      	str	r2, [r3, #24]
      break;
 800e8da:	e0a5      	b.n	800ea28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f000 fb74 	bl	800efd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	699a      	ldr	r2, [r3, #24]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e8f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	699a      	ldr	r2, [r3, #24]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6999      	ldr	r1, [r3, #24]
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	691b      	ldr	r3, [r3, #16]
 800e912:	021a      	lsls	r2, r3, #8
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	430a      	orrs	r2, r1
 800e91a:	619a      	str	r2, [r3, #24]
      break;
 800e91c:	e084      	b.n	800ea28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	68b9      	ldr	r1, [r7, #8]
 800e924:	4618      	mov	r0, r3
 800e926:	f000 fc03 	bl	800f130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	69da      	ldr	r2, [r3, #28]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f042 0208 	orr.w	r2, r2, #8
 800e938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	69da      	ldr	r2, [r3, #28]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f022 0204 	bic.w	r2, r2, #4
 800e948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	69d9      	ldr	r1, [r3, #28]
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	691a      	ldr	r2, [r3, #16]
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	430a      	orrs	r2, r1
 800e95a:	61da      	str	r2, [r3, #28]
      break;
 800e95c:	e064      	b.n	800ea28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	68b9      	ldr	r1, [r7, #8]
 800e964:	4618      	mov	r0, r3
 800e966:	f000 fc91 	bl	800f28c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	69da      	ldr	r2, [r3, #28]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	69da      	ldr	r2, [r3, #28]
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	69d9      	ldr	r1, [r3, #28]
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	021a      	lsls	r2, r3, #8
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	430a      	orrs	r2, r1
 800e99c:	61da      	str	r2, [r3, #28]
      break;
 800e99e:	e043      	b.n	800ea28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	68b9      	ldr	r1, [r7, #8]
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f000 fd20 	bl	800f3ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f042 0208 	orr.w	r2, r2, #8
 800e9ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f022 0204 	bic.w	r2, r2, #4
 800e9ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	691a      	ldr	r2, [r3, #16]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	430a      	orrs	r2, r1
 800e9dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e9de:	e023      	b.n	800ea28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	68b9      	ldr	r1, [r7, #8]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 fd82 	bl	800f4f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e9fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	021a      	lsls	r2, r3, #8
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	430a      	orrs	r2, r1
 800ea1e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ea20:	e002      	b.n	800ea28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	75fb      	strb	r3, [r7, #23]
      break;
 800ea26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ea30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3718      	adds	r7, #24
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop

0800ea3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea46:	2300      	movs	r3, #0
 800ea48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d101      	bne.n	800ea58 <HAL_TIM_ConfigClockSource+0x1c>
 800ea54:	2302      	movs	r3, #2
 800ea56:	e0e6      	b.n	800ec26 <HAL_TIM_ConfigClockSource+0x1ea>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2202      	movs	r2, #2
 800ea64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	689b      	ldr	r3, [r3, #8]
 800ea6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ea76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ea7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ea82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	68ba      	ldr	r2, [r7, #8]
 800ea8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a67      	ldr	r2, [pc, #412]	@ (800ec30 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	f000 80b1 	beq.w	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800ea98:	4a65      	ldr	r2, [pc, #404]	@ (800ec30 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	f200 80b6 	bhi.w	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eaa0:	4a64      	ldr	r2, [pc, #400]	@ (800ec34 <HAL_TIM_ConfigClockSource+0x1f8>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	f000 80a9 	beq.w	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800eaa8:	4a62      	ldr	r2, [pc, #392]	@ (800ec34 <HAL_TIM_ConfigClockSource+0x1f8>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	f200 80ae 	bhi.w	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eab0:	4a61      	ldr	r2, [pc, #388]	@ (800ec38 <HAL_TIM_ConfigClockSource+0x1fc>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	f000 80a1 	beq.w	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800eab8:	4a5f      	ldr	r2, [pc, #380]	@ (800ec38 <HAL_TIM_ConfigClockSource+0x1fc>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	f200 80a6 	bhi.w	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eac0:	4a5e      	ldr	r2, [pc, #376]	@ (800ec3c <HAL_TIM_ConfigClockSource+0x200>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	f000 8099 	beq.w	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800eac8:	4a5c      	ldr	r2, [pc, #368]	@ (800ec3c <HAL_TIM_ConfigClockSource+0x200>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	f200 809e 	bhi.w	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800ead0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ead4:	f000 8091 	beq.w	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800ead8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800eadc:	f200 8096 	bhi.w	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eae4:	f000 8089 	beq.w	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800eae8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eaec:	f200 808e 	bhi.w	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eaf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eaf4:	d03e      	beq.n	800eb74 <HAL_TIM_ConfigClockSource+0x138>
 800eaf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eafa:	f200 8087 	bhi.w	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eafe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb02:	f000 8086 	beq.w	800ec12 <HAL_TIM_ConfigClockSource+0x1d6>
 800eb06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb0a:	d87f      	bhi.n	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eb0c:	2b70      	cmp	r3, #112	@ 0x70
 800eb0e:	d01a      	beq.n	800eb46 <HAL_TIM_ConfigClockSource+0x10a>
 800eb10:	2b70      	cmp	r3, #112	@ 0x70
 800eb12:	d87b      	bhi.n	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eb14:	2b60      	cmp	r3, #96	@ 0x60
 800eb16:	d050      	beq.n	800ebba <HAL_TIM_ConfigClockSource+0x17e>
 800eb18:	2b60      	cmp	r3, #96	@ 0x60
 800eb1a:	d877      	bhi.n	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eb1c:	2b50      	cmp	r3, #80	@ 0x50
 800eb1e:	d03c      	beq.n	800eb9a <HAL_TIM_ConfigClockSource+0x15e>
 800eb20:	2b50      	cmp	r3, #80	@ 0x50
 800eb22:	d873      	bhi.n	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eb24:	2b40      	cmp	r3, #64	@ 0x40
 800eb26:	d058      	beq.n	800ebda <HAL_TIM_ConfigClockSource+0x19e>
 800eb28:	2b40      	cmp	r3, #64	@ 0x40
 800eb2a:	d86f      	bhi.n	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eb2c:	2b30      	cmp	r3, #48	@ 0x30
 800eb2e:	d064      	beq.n	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800eb30:	2b30      	cmp	r3, #48	@ 0x30
 800eb32:	d86b      	bhi.n	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eb34:	2b20      	cmp	r3, #32
 800eb36:	d060      	beq.n	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800eb38:	2b20      	cmp	r3, #32
 800eb3a:	d867      	bhi.n	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d05c      	beq.n	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800eb40:	2b10      	cmp	r3, #16
 800eb42:	d05a      	beq.n	800ebfa <HAL_TIM_ConfigClockSource+0x1be>
 800eb44:	e062      	b.n	800ec0c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eb56:	f000 fdcb 	bl	800f6f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800eb68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	68ba      	ldr	r2, [r7, #8]
 800eb70:	609a      	str	r2, [r3, #8]
      break;
 800eb72:	e04f      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eb84:	f000 fdb4 	bl	800f6f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	689a      	ldr	r2, [r3, #8]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eb96:	609a      	str	r2, [r3, #8]
      break;
 800eb98:	e03c      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eba6:	461a      	mov	r2, r3
 800eba8:	f000 fd26 	bl	800f5f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2150      	movs	r1, #80	@ 0x50
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f000 fd7f 	bl	800f6b6 <TIM_ITRx_SetConfig>
      break;
 800ebb8:	e02c      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	f000 fd45 	bl	800f656 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2160      	movs	r1, #96	@ 0x60
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f000 fd6f 	bl	800f6b6 <TIM_ITRx_SetConfig>
      break;
 800ebd8:	e01c      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	f000 fd06 	bl	800f5f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2140      	movs	r1, #64	@ 0x40
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 fd5f 	bl	800f6b6 <TIM_ITRx_SetConfig>
      break;
 800ebf8:	e00c      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4619      	mov	r1, r3
 800ec04:	4610      	mov	r0, r2
 800ec06:	f000 fd56 	bl	800f6b6 <TIM_ITRx_SetConfig>
      break;
 800ec0a:	e003      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec10:	e000      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800ec12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ec24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	00100070 	.word	0x00100070
 800ec34:	00100040 	.word	0x00100040
 800ec38:	00100030 	.word	0x00100030
 800ec3c:	00100020 	.word	0x00100020

0800ec40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	4a6e      	ldr	r2, [pc, #440]	@ (800ee0c <TIM_Base_SetConfig+0x1cc>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d02b      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4a6d      	ldr	r2, [pc, #436]	@ (800ee10 <TIM_Base_SetConfig+0x1d0>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d027      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec66:	d023      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec6e:	d01f      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	4a68      	ldr	r2, [pc, #416]	@ (800ee14 <TIM_Base_SetConfig+0x1d4>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d01b      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a67      	ldr	r2, [pc, #412]	@ (800ee18 <TIM_Base_SetConfig+0x1d8>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d017      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a66      	ldr	r2, [pc, #408]	@ (800ee1c <TIM_Base_SetConfig+0x1dc>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d013      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4a65      	ldr	r2, [pc, #404]	@ (800ee20 <TIM_Base_SetConfig+0x1e0>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d00f      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4a64      	ldr	r2, [pc, #400]	@ (800ee24 <TIM_Base_SetConfig+0x1e4>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d00b      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	4a63      	ldr	r2, [pc, #396]	@ (800ee28 <TIM_Base_SetConfig+0x1e8>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d007      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	4a62      	ldr	r2, [pc, #392]	@ (800ee2c <TIM_Base_SetConfig+0x1ec>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d003      	beq.n	800ecb0 <TIM_Base_SetConfig+0x70>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4a61      	ldr	r2, [pc, #388]	@ (800ee30 <TIM_Base_SetConfig+0x1f0>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d108      	bne.n	800ecc2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	4a51      	ldr	r2, [pc, #324]	@ (800ee0c <TIM_Base_SetConfig+0x1cc>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d043      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	4a50      	ldr	r2, [pc, #320]	@ (800ee10 <TIM_Base_SetConfig+0x1d0>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d03f      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecd8:	d03b      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ece0:	d037      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	4a4b      	ldr	r2, [pc, #300]	@ (800ee14 <TIM_Base_SetConfig+0x1d4>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d033      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	4a4a      	ldr	r2, [pc, #296]	@ (800ee18 <TIM_Base_SetConfig+0x1d8>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d02f      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4a49      	ldr	r2, [pc, #292]	@ (800ee1c <TIM_Base_SetConfig+0x1dc>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d02b      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	4a48      	ldr	r2, [pc, #288]	@ (800ee20 <TIM_Base_SetConfig+0x1e0>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d027      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	4a47      	ldr	r2, [pc, #284]	@ (800ee24 <TIM_Base_SetConfig+0x1e4>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d023      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4a46      	ldr	r2, [pc, #280]	@ (800ee28 <TIM_Base_SetConfig+0x1e8>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d01f      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	4a45      	ldr	r2, [pc, #276]	@ (800ee2c <TIM_Base_SetConfig+0x1ec>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d01b      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4a44      	ldr	r2, [pc, #272]	@ (800ee30 <TIM_Base_SetConfig+0x1f0>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d017      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4a43      	ldr	r2, [pc, #268]	@ (800ee34 <TIM_Base_SetConfig+0x1f4>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d013      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4a42      	ldr	r2, [pc, #264]	@ (800ee38 <TIM_Base_SetConfig+0x1f8>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d00f      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4a41      	ldr	r2, [pc, #260]	@ (800ee3c <TIM_Base_SetConfig+0x1fc>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d00b      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a40      	ldr	r2, [pc, #256]	@ (800ee40 <TIM_Base_SetConfig+0x200>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d007      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4a3f      	ldr	r2, [pc, #252]	@ (800ee44 <TIM_Base_SetConfig+0x204>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d003      	beq.n	800ed52 <TIM_Base_SetConfig+0x112>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4a3e      	ldr	r2, [pc, #248]	@ (800ee48 <TIM_Base_SetConfig+0x208>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d108      	bne.n	800ed64 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	4313      	orrs	r3, r2
 800ed62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	689a      	ldr	r2, [r3, #8]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a20      	ldr	r2, [pc, #128]	@ (800ee0c <TIM_Base_SetConfig+0x1cc>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d023      	beq.n	800edd8 <TIM_Base_SetConfig+0x198>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a1f      	ldr	r2, [pc, #124]	@ (800ee10 <TIM_Base_SetConfig+0x1d0>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d01f      	beq.n	800edd8 <TIM_Base_SetConfig+0x198>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4a24      	ldr	r2, [pc, #144]	@ (800ee2c <TIM_Base_SetConfig+0x1ec>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d01b      	beq.n	800edd8 <TIM_Base_SetConfig+0x198>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4a23      	ldr	r2, [pc, #140]	@ (800ee30 <TIM_Base_SetConfig+0x1f0>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d017      	beq.n	800edd8 <TIM_Base_SetConfig+0x198>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4a22      	ldr	r2, [pc, #136]	@ (800ee34 <TIM_Base_SetConfig+0x1f4>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d013      	beq.n	800edd8 <TIM_Base_SetConfig+0x198>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4a21      	ldr	r2, [pc, #132]	@ (800ee38 <TIM_Base_SetConfig+0x1f8>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d00f      	beq.n	800edd8 <TIM_Base_SetConfig+0x198>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4a20      	ldr	r2, [pc, #128]	@ (800ee3c <TIM_Base_SetConfig+0x1fc>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d00b      	beq.n	800edd8 <TIM_Base_SetConfig+0x198>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4a1f      	ldr	r2, [pc, #124]	@ (800ee40 <TIM_Base_SetConfig+0x200>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d007      	beq.n	800edd8 <TIM_Base_SetConfig+0x198>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a1e      	ldr	r2, [pc, #120]	@ (800ee44 <TIM_Base_SetConfig+0x204>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d003      	beq.n	800edd8 <TIM_Base_SetConfig+0x198>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	4a1d      	ldr	r2, [pc, #116]	@ (800ee48 <TIM_Base_SetConfig+0x208>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d103      	bne.n	800ede0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	691a      	ldr	r2, [r3, #16]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	691b      	ldr	r3, [r3, #16]
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d105      	bne.n	800edfe <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	691b      	ldr	r3, [r3, #16]
 800edf6:	f023 0201 	bic.w	r2, r3, #1
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	611a      	str	r2, [r3, #16]
  }
}
 800edfe:	bf00      	nop
 800ee00:	3714      	adds	r7, #20
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	40012c00 	.word	0x40012c00
 800ee10:	50012c00 	.word	0x50012c00
 800ee14:	40000400 	.word	0x40000400
 800ee18:	50000400 	.word	0x50000400
 800ee1c:	40000800 	.word	0x40000800
 800ee20:	50000800 	.word	0x50000800
 800ee24:	40000c00 	.word	0x40000c00
 800ee28:	50000c00 	.word	0x50000c00
 800ee2c:	40013400 	.word	0x40013400
 800ee30:	50013400 	.word	0x50013400
 800ee34:	40014000 	.word	0x40014000
 800ee38:	50014000 	.word	0x50014000
 800ee3c:	40014400 	.word	0x40014400
 800ee40:	50014400 	.word	0x50014400
 800ee44:	40014800 	.word	0x40014800
 800ee48:	50014800 	.word	0x50014800

0800ee4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b087      	sub	sp, #28
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6a1b      	ldr	r3, [r3, #32]
 800ee60:	f023 0201 	bic.w	r2, r3, #1
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	699b      	ldr	r3, [r3, #24]
 800ee72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f023 0303 	bic.w	r3, r3, #3
 800ee86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	f023 0302 	bic.w	r3, r3, #2
 800ee98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	689b      	ldr	r3, [r3, #8]
 800ee9e:	697a      	ldr	r2, [r7, #20]
 800eea0:	4313      	orrs	r3, r2
 800eea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4a40      	ldr	r2, [pc, #256]	@ (800efa8 <TIM_OC1_SetConfig+0x15c>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d023      	beq.n	800eef4 <TIM_OC1_SetConfig+0xa8>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4a3f      	ldr	r2, [pc, #252]	@ (800efac <TIM_OC1_SetConfig+0x160>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d01f      	beq.n	800eef4 <TIM_OC1_SetConfig+0xa8>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a3e      	ldr	r2, [pc, #248]	@ (800efb0 <TIM_OC1_SetConfig+0x164>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d01b      	beq.n	800eef4 <TIM_OC1_SetConfig+0xa8>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a3d      	ldr	r2, [pc, #244]	@ (800efb4 <TIM_OC1_SetConfig+0x168>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d017      	beq.n	800eef4 <TIM_OC1_SetConfig+0xa8>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a3c      	ldr	r2, [pc, #240]	@ (800efb8 <TIM_OC1_SetConfig+0x16c>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d013      	beq.n	800eef4 <TIM_OC1_SetConfig+0xa8>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a3b      	ldr	r2, [pc, #236]	@ (800efbc <TIM_OC1_SetConfig+0x170>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d00f      	beq.n	800eef4 <TIM_OC1_SetConfig+0xa8>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	4a3a      	ldr	r2, [pc, #232]	@ (800efc0 <TIM_OC1_SetConfig+0x174>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d00b      	beq.n	800eef4 <TIM_OC1_SetConfig+0xa8>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4a39      	ldr	r2, [pc, #228]	@ (800efc4 <TIM_OC1_SetConfig+0x178>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d007      	beq.n	800eef4 <TIM_OC1_SetConfig+0xa8>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4a38      	ldr	r2, [pc, #224]	@ (800efc8 <TIM_OC1_SetConfig+0x17c>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d003      	beq.n	800eef4 <TIM_OC1_SetConfig+0xa8>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4a37      	ldr	r2, [pc, #220]	@ (800efcc <TIM_OC1_SetConfig+0x180>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d10c      	bne.n	800ef0e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	f023 0308 	bic.w	r3, r3, #8
 800eefa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	697a      	ldr	r2, [r7, #20]
 800ef02:	4313      	orrs	r3, r2
 800ef04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	f023 0304 	bic.w	r3, r3, #4
 800ef0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a25      	ldr	r2, [pc, #148]	@ (800efa8 <TIM_OC1_SetConfig+0x15c>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d023      	beq.n	800ef5e <TIM_OC1_SetConfig+0x112>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a24      	ldr	r2, [pc, #144]	@ (800efac <TIM_OC1_SetConfig+0x160>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d01f      	beq.n	800ef5e <TIM_OC1_SetConfig+0x112>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a23      	ldr	r2, [pc, #140]	@ (800efb0 <TIM_OC1_SetConfig+0x164>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d01b      	beq.n	800ef5e <TIM_OC1_SetConfig+0x112>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a22      	ldr	r2, [pc, #136]	@ (800efb4 <TIM_OC1_SetConfig+0x168>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d017      	beq.n	800ef5e <TIM_OC1_SetConfig+0x112>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a21      	ldr	r2, [pc, #132]	@ (800efb8 <TIM_OC1_SetConfig+0x16c>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d013      	beq.n	800ef5e <TIM_OC1_SetConfig+0x112>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4a20      	ldr	r2, [pc, #128]	@ (800efbc <TIM_OC1_SetConfig+0x170>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d00f      	beq.n	800ef5e <TIM_OC1_SetConfig+0x112>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a1f      	ldr	r2, [pc, #124]	@ (800efc0 <TIM_OC1_SetConfig+0x174>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d00b      	beq.n	800ef5e <TIM_OC1_SetConfig+0x112>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a1e      	ldr	r2, [pc, #120]	@ (800efc4 <TIM_OC1_SetConfig+0x178>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d007      	beq.n	800ef5e <TIM_OC1_SetConfig+0x112>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a1d      	ldr	r2, [pc, #116]	@ (800efc8 <TIM_OC1_SetConfig+0x17c>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d003      	beq.n	800ef5e <TIM_OC1_SetConfig+0x112>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a1c      	ldr	r2, [pc, #112]	@ (800efcc <TIM_OC1_SetConfig+0x180>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d111      	bne.n	800ef82 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ef6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	695b      	ldr	r3, [r3, #20]
 800ef72:	693a      	ldr	r2, [r7, #16]
 800ef74:	4313      	orrs	r3, r2
 800ef76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	699b      	ldr	r3, [r3, #24]
 800ef7c:	693a      	ldr	r2, [r7, #16]
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	693a      	ldr	r2, [r7, #16]
 800ef86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	685a      	ldr	r2, [r3, #4]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	697a      	ldr	r2, [r7, #20]
 800ef9a:	621a      	str	r2, [r3, #32]
}
 800ef9c:	bf00      	nop
 800ef9e:	371c      	adds	r7, #28
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr
 800efa8:	40012c00 	.word	0x40012c00
 800efac:	50012c00 	.word	0x50012c00
 800efb0:	40013400 	.word	0x40013400
 800efb4:	50013400 	.word	0x50013400
 800efb8:	40014000 	.word	0x40014000
 800efbc:	50014000 	.word	0x50014000
 800efc0:	40014400 	.word	0x40014400
 800efc4:	50014400 	.word	0x50014400
 800efc8:	40014800 	.word	0x40014800
 800efcc:	50014800 	.word	0x50014800

0800efd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b087      	sub	sp, #28
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a1b      	ldr	r3, [r3, #32]
 800efde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6a1b      	ldr	r3, [r3, #32]
 800efe4:	f023 0210 	bic.w	r2, r3, #16
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	699b      	ldr	r3, [r3, #24]
 800eff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800effe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f00a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	021b      	lsls	r3, r3, #8
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	4313      	orrs	r3, r2
 800f016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	f023 0320 	bic.w	r3, r3, #32
 800f01e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	689b      	ldr	r3, [r3, #8]
 800f024:	011b      	lsls	r3, r3, #4
 800f026:	697a      	ldr	r2, [r7, #20]
 800f028:	4313      	orrs	r3, r2
 800f02a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4a36      	ldr	r2, [pc, #216]	@ (800f108 <TIM_OC2_SetConfig+0x138>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d00b      	beq.n	800f04c <TIM_OC2_SetConfig+0x7c>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4a35      	ldr	r2, [pc, #212]	@ (800f10c <TIM_OC2_SetConfig+0x13c>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d007      	beq.n	800f04c <TIM_OC2_SetConfig+0x7c>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4a34      	ldr	r2, [pc, #208]	@ (800f110 <TIM_OC2_SetConfig+0x140>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d003      	beq.n	800f04c <TIM_OC2_SetConfig+0x7c>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a33      	ldr	r2, [pc, #204]	@ (800f114 <TIM_OC2_SetConfig+0x144>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d10d      	bne.n	800f068 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	011b      	lsls	r3, r3, #4
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4a27      	ldr	r2, [pc, #156]	@ (800f108 <TIM_OC2_SetConfig+0x138>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d023      	beq.n	800f0b8 <TIM_OC2_SetConfig+0xe8>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4a26      	ldr	r2, [pc, #152]	@ (800f10c <TIM_OC2_SetConfig+0x13c>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d01f      	beq.n	800f0b8 <TIM_OC2_SetConfig+0xe8>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4a25      	ldr	r2, [pc, #148]	@ (800f110 <TIM_OC2_SetConfig+0x140>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d01b      	beq.n	800f0b8 <TIM_OC2_SetConfig+0xe8>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4a24      	ldr	r2, [pc, #144]	@ (800f114 <TIM_OC2_SetConfig+0x144>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d017      	beq.n	800f0b8 <TIM_OC2_SetConfig+0xe8>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a23      	ldr	r2, [pc, #140]	@ (800f118 <TIM_OC2_SetConfig+0x148>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d013      	beq.n	800f0b8 <TIM_OC2_SetConfig+0xe8>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4a22      	ldr	r2, [pc, #136]	@ (800f11c <TIM_OC2_SetConfig+0x14c>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d00f      	beq.n	800f0b8 <TIM_OC2_SetConfig+0xe8>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	4a21      	ldr	r2, [pc, #132]	@ (800f120 <TIM_OC2_SetConfig+0x150>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d00b      	beq.n	800f0b8 <TIM_OC2_SetConfig+0xe8>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4a20      	ldr	r2, [pc, #128]	@ (800f124 <TIM_OC2_SetConfig+0x154>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d007      	beq.n	800f0b8 <TIM_OC2_SetConfig+0xe8>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a1f      	ldr	r2, [pc, #124]	@ (800f128 <TIM_OC2_SetConfig+0x158>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d003      	beq.n	800f0b8 <TIM_OC2_SetConfig+0xe8>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a1e      	ldr	r2, [pc, #120]	@ (800f12c <TIM_OC2_SetConfig+0x15c>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d113      	bne.n	800f0e0 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f0be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	695b      	ldr	r3, [r3, #20]
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	693a      	ldr	r2, [r7, #16]
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	699b      	ldr	r3, [r3, #24]
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	693a      	ldr	r2, [r7, #16]
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	693a      	ldr	r2, [r7, #16]
 800f0e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	68fa      	ldr	r2, [r7, #12]
 800f0ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	697a      	ldr	r2, [r7, #20]
 800f0f8:	621a      	str	r2, [r3, #32]
}
 800f0fa:	bf00      	nop
 800f0fc:	371c      	adds	r7, #28
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	40012c00 	.word	0x40012c00
 800f10c:	50012c00 	.word	0x50012c00
 800f110:	40013400 	.word	0x40013400
 800f114:	50013400 	.word	0x50013400
 800f118:	40014000 	.word	0x40014000
 800f11c:	50014000 	.word	0x50014000
 800f120:	40014400 	.word	0x40014400
 800f124:	50014400 	.word	0x50014400
 800f128:	40014800 	.word	0x40014800
 800f12c:	50014800 	.word	0x50014800

0800f130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f130:	b480      	push	{r7}
 800f132:	b087      	sub	sp, #28
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a1b      	ldr	r3, [r3, #32]
 800f13e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a1b      	ldr	r3, [r3, #32]
 800f144:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	69db      	ldr	r3, [r3, #28]
 800f156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f15e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f023 0303 	bic.w	r3, r3, #3
 800f16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	4313      	orrs	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f17c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	021b      	lsls	r3, r3, #8
 800f184:	697a      	ldr	r2, [r7, #20]
 800f186:	4313      	orrs	r3, r2
 800f188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4a35      	ldr	r2, [pc, #212]	@ (800f264 <TIM_OC3_SetConfig+0x134>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d00b      	beq.n	800f1aa <TIM_OC3_SetConfig+0x7a>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4a34      	ldr	r2, [pc, #208]	@ (800f268 <TIM_OC3_SetConfig+0x138>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d007      	beq.n	800f1aa <TIM_OC3_SetConfig+0x7a>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4a33      	ldr	r2, [pc, #204]	@ (800f26c <TIM_OC3_SetConfig+0x13c>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d003      	beq.n	800f1aa <TIM_OC3_SetConfig+0x7a>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4a32      	ldr	r2, [pc, #200]	@ (800f270 <TIM_OC3_SetConfig+0x140>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d10d      	bne.n	800f1c6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f1b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	021b      	lsls	r3, r3, #8
 800f1b8:	697a      	ldr	r2, [r7, #20]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f1c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a26      	ldr	r2, [pc, #152]	@ (800f264 <TIM_OC3_SetConfig+0x134>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d023      	beq.n	800f216 <TIM_OC3_SetConfig+0xe6>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a25      	ldr	r2, [pc, #148]	@ (800f268 <TIM_OC3_SetConfig+0x138>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d01f      	beq.n	800f216 <TIM_OC3_SetConfig+0xe6>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a24      	ldr	r2, [pc, #144]	@ (800f26c <TIM_OC3_SetConfig+0x13c>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d01b      	beq.n	800f216 <TIM_OC3_SetConfig+0xe6>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4a23      	ldr	r2, [pc, #140]	@ (800f270 <TIM_OC3_SetConfig+0x140>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d017      	beq.n	800f216 <TIM_OC3_SetConfig+0xe6>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a22      	ldr	r2, [pc, #136]	@ (800f274 <TIM_OC3_SetConfig+0x144>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d013      	beq.n	800f216 <TIM_OC3_SetConfig+0xe6>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a21      	ldr	r2, [pc, #132]	@ (800f278 <TIM_OC3_SetConfig+0x148>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d00f      	beq.n	800f216 <TIM_OC3_SetConfig+0xe6>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4a20      	ldr	r2, [pc, #128]	@ (800f27c <TIM_OC3_SetConfig+0x14c>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d00b      	beq.n	800f216 <TIM_OC3_SetConfig+0xe6>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4a1f      	ldr	r2, [pc, #124]	@ (800f280 <TIM_OC3_SetConfig+0x150>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d007      	beq.n	800f216 <TIM_OC3_SetConfig+0xe6>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4a1e      	ldr	r2, [pc, #120]	@ (800f284 <TIM_OC3_SetConfig+0x154>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d003      	beq.n	800f216 <TIM_OC3_SetConfig+0xe6>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4a1d      	ldr	r2, [pc, #116]	@ (800f288 <TIM_OC3_SetConfig+0x158>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d113      	bne.n	800f23e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f21c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	695b      	ldr	r3, [r3, #20]
 800f22a:	011b      	lsls	r3, r3, #4
 800f22c:	693a      	ldr	r2, [r7, #16]
 800f22e:	4313      	orrs	r3, r2
 800f230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	699b      	ldr	r3, [r3, #24]
 800f236:	011b      	lsls	r3, r3, #4
 800f238:	693a      	ldr	r2, [r7, #16]
 800f23a:	4313      	orrs	r3, r2
 800f23c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	693a      	ldr	r2, [r7, #16]
 800f242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	697a      	ldr	r2, [r7, #20]
 800f256:	621a      	str	r2, [r3, #32]
}
 800f258:	bf00      	nop
 800f25a:	371c      	adds	r7, #28
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr
 800f264:	40012c00 	.word	0x40012c00
 800f268:	50012c00 	.word	0x50012c00
 800f26c:	40013400 	.word	0x40013400
 800f270:	50013400 	.word	0x50013400
 800f274:	40014000 	.word	0x40014000
 800f278:	50014000 	.word	0x50014000
 800f27c:	40014400 	.word	0x40014400
 800f280:	50014400 	.word	0x50014400
 800f284:	40014800 	.word	0x40014800
 800f288:	50014800 	.word	0x50014800

0800f28c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b087      	sub	sp, #28
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a1b      	ldr	r3, [r3, #32]
 800f29a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a1b      	ldr	r3, [r3, #32]
 800f2a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	69db      	ldr	r3, [r3, #28]
 800f2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f2ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f2c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	021b      	lsls	r3, r3, #8
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f2da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	031b      	lsls	r3, r3, #12
 800f2e2:	697a      	ldr	r2, [r7, #20]
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	4a36      	ldr	r2, [pc, #216]	@ (800f3c4 <TIM_OC4_SetConfig+0x138>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d00b      	beq.n	800f308 <TIM_OC4_SetConfig+0x7c>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	4a35      	ldr	r2, [pc, #212]	@ (800f3c8 <TIM_OC4_SetConfig+0x13c>)
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	d007      	beq.n	800f308 <TIM_OC4_SetConfig+0x7c>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	4a34      	ldr	r2, [pc, #208]	@ (800f3cc <TIM_OC4_SetConfig+0x140>)
 800f2fc:	4293      	cmp	r3, r2
 800f2fe:	d003      	beq.n	800f308 <TIM_OC4_SetConfig+0x7c>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4a33      	ldr	r2, [pc, #204]	@ (800f3d0 <TIM_OC4_SetConfig+0x144>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d10d      	bne.n	800f324 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f30e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	031b      	lsls	r3, r3, #12
 800f316:	697a      	ldr	r2, [r7, #20]
 800f318:	4313      	orrs	r3, r2
 800f31a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f322:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a27      	ldr	r2, [pc, #156]	@ (800f3c4 <TIM_OC4_SetConfig+0x138>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d023      	beq.n	800f374 <TIM_OC4_SetConfig+0xe8>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a26      	ldr	r2, [pc, #152]	@ (800f3c8 <TIM_OC4_SetConfig+0x13c>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d01f      	beq.n	800f374 <TIM_OC4_SetConfig+0xe8>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a25      	ldr	r2, [pc, #148]	@ (800f3cc <TIM_OC4_SetConfig+0x140>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d01b      	beq.n	800f374 <TIM_OC4_SetConfig+0xe8>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4a24      	ldr	r2, [pc, #144]	@ (800f3d0 <TIM_OC4_SetConfig+0x144>)
 800f340:	4293      	cmp	r3, r2
 800f342:	d017      	beq.n	800f374 <TIM_OC4_SetConfig+0xe8>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4a23      	ldr	r2, [pc, #140]	@ (800f3d4 <TIM_OC4_SetConfig+0x148>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d013      	beq.n	800f374 <TIM_OC4_SetConfig+0xe8>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a22      	ldr	r2, [pc, #136]	@ (800f3d8 <TIM_OC4_SetConfig+0x14c>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d00f      	beq.n	800f374 <TIM_OC4_SetConfig+0xe8>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a21      	ldr	r2, [pc, #132]	@ (800f3dc <TIM_OC4_SetConfig+0x150>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d00b      	beq.n	800f374 <TIM_OC4_SetConfig+0xe8>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4a20      	ldr	r2, [pc, #128]	@ (800f3e0 <TIM_OC4_SetConfig+0x154>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d007      	beq.n	800f374 <TIM_OC4_SetConfig+0xe8>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4a1f      	ldr	r2, [pc, #124]	@ (800f3e4 <TIM_OC4_SetConfig+0x158>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d003      	beq.n	800f374 <TIM_OC4_SetConfig+0xe8>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4a1e      	ldr	r2, [pc, #120]	@ (800f3e8 <TIM_OC4_SetConfig+0x15c>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d113      	bne.n	800f39c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f37a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f382:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	695b      	ldr	r3, [r3, #20]
 800f388:	019b      	lsls	r3, r3, #6
 800f38a:	693a      	ldr	r2, [r7, #16]
 800f38c:	4313      	orrs	r3, r2
 800f38e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	019b      	lsls	r3, r3, #6
 800f396:	693a      	ldr	r2, [r7, #16]
 800f398:	4313      	orrs	r3, r2
 800f39a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	693a      	ldr	r2, [r7, #16]
 800f3a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	68fa      	ldr	r2, [r7, #12]
 800f3a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	685a      	ldr	r2, [r3, #4]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	621a      	str	r2, [r3, #32]
}
 800f3b6:	bf00      	nop
 800f3b8:	371c      	adds	r7, #28
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr
 800f3c2:	bf00      	nop
 800f3c4:	40012c00 	.word	0x40012c00
 800f3c8:	50012c00 	.word	0x50012c00
 800f3cc:	40013400 	.word	0x40013400
 800f3d0:	50013400 	.word	0x50013400
 800f3d4:	40014000 	.word	0x40014000
 800f3d8:	50014000 	.word	0x50014000
 800f3dc:	40014400 	.word	0x40014400
 800f3e0:	50014400 	.word	0x50014400
 800f3e4:	40014800 	.word	0x40014800
 800f3e8:	50014800 	.word	0x50014800

0800f3ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b087      	sub	sp, #28
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6a1b      	ldr	r3, [r3, #32]
 800f3fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6a1b      	ldr	r3, [r3, #32]
 800f400:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f41a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	4313      	orrs	r3, r2
 800f428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	689b      	ldr	r3, [r3, #8]
 800f436:	041b      	lsls	r3, r3, #16
 800f438:	693a      	ldr	r2, [r7, #16]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a21      	ldr	r2, [pc, #132]	@ (800f4c8 <TIM_OC5_SetConfig+0xdc>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d023      	beq.n	800f48e <TIM_OC5_SetConfig+0xa2>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4a20      	ldr	r2, [pc, #128]	@ (800f4cc <TIM_OC5_SetConfig+0xe0>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d01f      	beq.n	800f48e <TIM_OC5_SetConfig+0xa2>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4a1f      	ldr	r2, [pc, #124]	@ (800f4d0 <TIM_OC5_SetConfig+0xe4>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d01b      	beq.n	800f48e <TIM_OC5_SetConfig+0xa2>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4a1e      	ldr	r2, [pc, #120]	@ (800f4d4 <TIM_OC5_SetConfig+0xe8>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d017      	beq.n	800f48e <TIM_OC5_SetConfig+0xa2>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4a1d      	ldr	r2, [pc, #116]	@ (800f4d8 <TIM_OC5_SetConfig+0xec>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d013      	beq.n	800f48e <TIM_OC5_SetConfig+0xa2>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4a1c      	ldr	r2, [pc, #112]	@ (800f4dc <TIM_OC5_SetConfig+0xf0>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d00f      	beq.n	800f48e <TIM_OC5_SetConfig+0xa2>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4a1b      	ldr	r2, [pc, #108]	@ (800f4e0 <TIM_OC5_SetConfig+0xf4>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d00b      	beq.n	800f48e <TIM_OC5_SetConfig+0xa2>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4a1a      	ldr	r2, [pc, #104]	@ (800f4e4 <TIM_OC5_SetConfig+0xf8>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d007      	beq.n	800f48e <TIM_OC5_SetConfig+0xa2>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4a19      	ldr	r2, [pc, #100]	@ (800f4e8 <TIM_OC5_SetConfig+0xfc>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d003      	beq.n	800f48e <TIM_OC5_SetConfig+0xa2>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4a18      	ldr	r2, [pc, #96]	@ (800f4ec <TIM_OC5_SetConfig+0x100>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d109      	bne.n	800f4a2 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f494:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	695b      	ldr	r3, [r3, #20]
 800f49a:	021b      	lsls	r3, r3, #8
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	697a      	ldr	r2, [r7, #20]
 800f4a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	685a      	ldr	r2, [r3, #4]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	693a      	ldr	r2, [r7, #16]
 800f4ba:	621a      	str	r2, [r3, #32]
}
 800f4bc:	bf00      	nop
 800f4be:	371c      	adds	r7, #28
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	40012c00 	.word	0x40012c00
 800f4cc:	50012c00 	.word	0x50012c00
 800f4d0:	40013400 	.word	0x40013400
 800f4d4:	50013400 	.word	0x50013400
 800f4d8:	40014000 	.word	0x40014000
 800f4dc:	50014000 	.word	0x50014000
 800f4e0:	40014400 	.word	0x40014400
 800f4e4:	50014400 	.word	0x50014400
 800f4e8:	40014800 	.word	0x40014800
 800f4ec:	50014800 	.word	0x50014800

0800f4f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b087      	sub	sp, #28
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6a1b      	ldr	r3, [r3, #32]
 800f4fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6a1b      	ldr	r3, [r3, #32]
 800f504:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f51e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	021b      	lsls	r3, r3, #8
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	4313      	orrs	r3, r2
 800f52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	051b      	lsls	r3, r3, #20
 800f53e:	693a      	ldr	r2, [r7, #16]
 800f540:	4313      	orrs	r3, r2
 800f542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a22      	ldr	r2, [pc, #136]	@ (800f5d0 <TIM_OC6_SetConfig+0xe0>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d023      	beq.n	800f594 <TIM_OC6_SetConfig+0xa4>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a21      	ldr	r2, [pc, #132]	@ (800f5d4 <TIM_OC6_SetConfig+0xe4>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d01f      	beq.n	800f594 <TIM_OC6_SetConfig+0xa4>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a20      	ldr	r2, [pc, #128]	@ (800f5d8 <TIM_OC6_SetConfig+0xe8>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d01b      	beq.n	800f594 <TIM_OC6_SetConfig+0xa4>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a1f      	ldr	r2, [pc, #124]	@ (800f5dc <TIM_OC6_SetConfig+0xec>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d017      	beq.n	800f594 <TIM_OC6_SetConfig+0xa4>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a1e      	ldr	r2, [pc, #120]	@ (800f5e0 <TIM_OC6_SetConfig+0xf0>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d013      	beq.n	800f594 <TIM_OC6_SetConfig+0xa4>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a1d      	ldr	r2, [pc, #116]	@ (800f5e4 <TIM_OC6_SetConfig+0xf4>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d00f      	beq.n	800f594 <TIM_OC6_SetConfig+0xa4>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4a1c      	ldr	r2, [pc, #112]	@ (800f5e8 <TIM_OC6_SetConfig+0xf8>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d00b      	beq.n	800f594 <TIM_OC6_SetConfig+0xa4>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4a1b      	ldr	r2, [pc, #108]	@ (800f5ec <TIM_OC6_SetConfig+0xfc>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d007      	beq.n	800f594 <TIM_OC6_SetConfig+0xa4>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4a1a      	ldr	r2, [pc, #104]	@ (800f5f0 <TIM_OC6_SetConfig+0x100>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d003      	beq.n	800f594 <TIM_OC6_SetConfig+0xa4>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4a19      	ldr	r2, [pc, #100]	@ (800f5f4 <TIM_OC6_SetConfig+0x104>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d109      	bne.n	800f5a8 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f59a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	695b      	ldr	r3, [r3, #20]
 800f5a0:	029b      	lsls	r3, r3, #10
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	697a      	ldr	r2, [r7, #20]
 800f5ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	685a      	ldr	r2, [r3, #4]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	693a      	ldr	r2, [r7, #16]
 800f5c0:	621a      	str	r2, [r3, #32]
}
 800f5c2:	bf00      	nop
 800f5c4:	371c      	adds	r7, #28
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr
 800f5ce:	bf00      	nop
 800f5d0:	40012c00 	.word	0x40012c00
 800f5d4:	50012c00 	.word	0x50012c00
 800f5d8:	40013400 	.word	0x40013400
 800f5dc:	50013400 	.word	0x50013400
 800f5e0:	40014000 	.word	0x40014000
 800f5e4:	50014000 	.word	0x50014000
 800f5e8:	40014400 	.word	0x40014400
 800f5ec:	50014400 	.word	0x50014400
 800f5f0:	40014800 	.word	0x40014800
 800f5f4:	50014800 	.word	0x50014800

0800f5f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b087      	sub	sp, #28
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	6a1b      	ldr	r3, [r3, #32]
 800f608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6a1b      	ldr	r3, [r3, #32]
 800f60e:	f023 0201 	bic.w	r2, r3, #1
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	699b      	ldr	r3, [r3, #24]
 800f61a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	011b      	lsls	r3, r3, #4
 800f628:	693a      	ldr	r2, [r7, #16]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	f023 030a 	bic.w	r3, r3, #10
 800f634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f636:	697a      	ldr	r2, [r7, #20]
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	4313      	orrs	r3, r2
 800f63c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	693a      	ldr	r2, [r7, #16]
 800f642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	621a      	str	r2, [r3, #32]
}
 800f64a:	bf00      	nop
 800f64c:	371c      	adds	r7, #28
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr

0800f656 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f656:	b480      	push	{r7}
 800f658:	b087      	sub	sp, #28
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	60f8      	str	r0, [r7, #12]
 800f65e:	60b9      	str	r1, [r7, #8]
 800f660:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6a1b      	ldr	r3, [r3, #32]
 800f666:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	6a1b      	ldr	r3, [r3, #32]
 800f66c:	f023 0210 	bic.w	r2, r3, #16
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	699b      	ldr	r3, [r3, #24]
 800f678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	031b      	lsls	r3, r3, #12
 800f686:	693a      	ldr	r2, [r7, #16]
 800f688:	4313      	orrs	r3, r2
 800f68a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f692:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	011b      	lsls	r3, r3, #4
 800f698:	697a      	ldr	r2, [r7, #20]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	693a      	ldr	r2, [r7, #16]
 800f6a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	621a      	str	r2, [r3, #32]
}
 800f6aa:	bf00      	nop
 800f6ac:	371c      	adds	r7, #28
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f6b6:	b480      	push	{r7}
 800f6b8:	b085      	sub	sp, #20
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
 800f6be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f6cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f6d2:	683a      	ldr	r2, [r7, #0]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	4313      	orrs	r3, r2
 800f6d8:	f043 0307 	orr.w	r3, r3, #7
 800f6dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	609a      	str	r2, [r3, #8]
}
 800f6e4:	bf00      	nop
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	607a      	str	r2, [r7, #4]
 800f6fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f70a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	021a      	lsls	r2, r3, #8
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	431a      	orrs	r2, r3
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	4313      	orrs	r3, r2
 800f718:	697a      	ldr	r2, [r7, #20]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	697a      	ldr	r2, [r7, #20]
 800f722:	609a      	str	r2, [r3, #8]
}
 800f724:	bf00      	nop
 800f726:	371c      	adds	r7, #28
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f740:	2b01      	cmp	r3, #1
 800f742:	d101      	bne.n	800f748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f744:	2302      	movs	r3, #2
 800f746:	e097      	b.n	800f878 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2201      	movs	r2, #1
 800f74c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2202      	movs	r2, #2
 800f754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	689b      	ldr	r3, [r3, #8]
 800f766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a45      	ldr	r2, [pc, #276]	@ (800f884 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d00e      	beq.n	800f790 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	4a44      	ldr	r2, [pc, #272]	@ (800f888 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d009      	beq.n	800f790 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a42      	ldr	r2, [pc, #264]	@ (800f88c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d004      	beq.n	800f790 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4a41      	ldr	r2, [pc, #260]	@ (800f890 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d108      	bne.n	800f7a2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f796:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f7a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f7ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	4a2f      	ldr	r2, [pc, #188]	@ (800f884 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d040      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4a2e      	ldr	r2, [pc, #184]	@ (800f888 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d03b      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7dc:	d036      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f7e6:	d031      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4a29      	ldr	r2, [pc, #164]	@ (800f894 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d02c      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4a28      	ldr	r2, [pc, #160]	@ (800f898 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d027      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4a26      	ldr	r2, [pc, #152]	@ (800f89c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d022      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a25      	ldr	r2, [pc, #148]	@ (800f8a0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d01d      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a23      	ldr	r2, [pc, #140]	@ (800f8a4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d018      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a22      	ldr	r2, [pc, #136]	@ (800f8a8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d013      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a18      	ldr	r2, [pc, #96]	@ (800f88c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d00e      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	4a17      	ldr	r2, [pc, #92]	@ (800f890 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d009      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4a1b      	ldr	r2, [pc, #108]	@ (800f8ac <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d004      	beq.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a1a      	ldr	r2, [pc, #104]	@ (800f8b0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d10c      	bne.n	800f866 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f852:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	68ba      	ldr	r2, [r7, #8]
 800f85a:	4313      	orrs	r3, r2
 800f85c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	68ba      	ldr	r2, [r7, #8]
 800f864:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2201      	movs	r2, #1
 800f86a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2200      	movs	r2, #0
 800f872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f876:	2300      	movs	r3, #0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3714      	adds	r7, #20
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr
 800f884:	40012c00 	.word	0x40012c00
 800f888:	50012c00 	.word	0x50012c00
 800f88c:	40013400 	.word	0x40013400
 800f890:	50013400 	.word	0x50013400
 800f894:	40000400 	.word	0x40000400
 800f898:	50000400 	.word	0x50000400
 800f89c:	40000800 	.word	0x40000800
 800f8a0:	50000800 	.word	0x50000800
 800f8a4:	40000c00 	.word	0x40000c00
 800f8a8:	50000c00 	.word	0x50000c00
 800f8ac:	40014000 	.word	0x40014000
 800f8b0:	50014000 	.word	0x50014000

0800f8b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d101      	bne.n	800f8c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e042      	b.n	800f94c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d106      	bne.n	800f8de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7f2 fd27 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2224      	movs	r2, #36	@ 0x24
 800f8e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f022 0201 	bic.w	r2, r2, #1
 800f8f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d002      	beq.n	800f904 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 fd02 	bl	8010308 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 fb51 	bl	800ffac <UART_SetConfig>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d101      	bne.n	800f914 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f910:	2301      	movs	r3, #1
 800f912:	e01b      	b.n	800f94c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f922:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	689a      	ldr	r2, [r3, #8]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f932:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f042 0201 	orr.w	r2, r2, #1
 800f942:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 fd81 	bl	801044c <UART_CheckIdleState>
 800f94a:	4603      	mov	r3, r0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3708      	adds	r7, #8
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b0ba      	sub	sp, #232	@ 0xe8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	69db      	ldr	r3, [r3, #28]
 800f962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f97a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f97e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f982:	4013      	ands	r3, r2
 800f984:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d11b      	bne.n	800f9c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f994:	f003 0320 	and.w	r3, r3, #32
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d015      	beq.n	800f9c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f99c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9a0:	f003 0320 	and.w	r3, r3, #32
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d105      	bne.n	800f9b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f9a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f9ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d009      	beq.n	800f9c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f000 82cb 	beq.w	800ff54 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	4798      	blx	r3
      }
      return;
 800f9c6:	e2c5      	b.n	800ff54 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f9c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f000 8123 	beq.w	800fc18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f9d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f9d6:	4b8d      	ldr	r3, [pc, #564]	@ (800fc0c <HAL_UART_IRQHandler+0x2b8>)
 800f9d8:	4013      	ands	r3, r2
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d106      	bne.n	800f9ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f9de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f9e2:	4b8b      	ldr	r3, [pc, #556]	@ (800fc10 <HAL_UART_IRQHandler+0x2bc>)
 800f9e4:	4013      	ands	r3, r2
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f000 8116 	beq.w	800fc18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9f0:	f003 0301 	and.w	r3, r3, #1
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d011      	beq.n	800fa1c <HAL_UART_IRQHandler+0xc8>
 800f9f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00b      	beq.n	800fa1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa12:	f043 0201 	orr.w	r2, r3, #1
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa20:	f003 0302 	and.w	r3, r3, #2
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d011      	beq.n	800fa4c <HAL_UART_IRQHandler+0xf8>
 800fa28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00b      	beq.n	800fa4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	2202      	movs	r2, #2
 800fa3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa42:	f043 0204 	orr.w	r2, r3, #4
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa50:	f003 0304 	and.w	r3, r3, #4
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d011      	beq.n	800fa7c <HAL_UART_IRQHandler+0x128>
 800fa58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fa5c:	f003 0301 	and.w	r3, r3, #1
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d00b      	beq.n	800fa7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	2204      	movs	r2, #4
 800fa6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa72:	f043 0202 	orr.w	r2, r3, #2
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fa7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa80:	f003 0308 	and.w	r3, r3, #8
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d017      	beq.n	800fab8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fa88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa8c:	f003 0320 	and.w	r3, r3, #32
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d105      	bne.n	800faa0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fa94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fa98:	4b5c      	ldr	r3, [pc, #368]	@ (800fc0c <HAL_UART_IRQHandler+0x2b8>)
 800fa9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00b      	beq.n	800fab8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2208      	movs	r2, #8
 800faa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800faae:	f043 0208 	orr.w	r2, r3, #8
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fabc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d012      	beq.n	800faea <HAL_UART_IRQHandler+0x196>
 800fac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fac8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800facc:	2b00      	cmp	r3, #0
 800face:	d00c      	beq.n	800faea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fae0:	f043 0220 	orr.w	r2, r3, #32
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f000 8231 	beq.w	800ff58 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800faf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fafa:	f003 0320 	and.w	r3, r3, #32
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d013      	beq.n	800fb2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fb02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb06:	f003 0320 	and.w	r3, r3, #32
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d105      	bne.n	800fb1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fb0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d007      	beq.n	800fb2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d003      	beq.n	800fb2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	689b      	ldr	r3, [r3, #8]
 800fb3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb3e:	2b40      	cmp	r3, #64	@ 0x40
 800fb40:	d005      	beq.n	800fb4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fb42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fb46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d054      	beq.n	800fbf8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 fd93 	bl	801067a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb5e:	2b40      	cmp	r3, #64	@ 0x40
 800fb60:	d146      	bne.n	800fbf0 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	3308      	adds	r3, #8
 800fb68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fb70:	e853 3f00 	ldrex	r3, [r3]
 800fb74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fb78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fb7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	3308      	adds	r3, #8
 800fb8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fb8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fb92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fb9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fb9e:	e841 2300 	strex	r3, r2, [r1]
 800fba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1d9      	bne.n	800fb62 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d017      	beq.n	800fbe8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbbe:	4a15      	ldr	r2, [pc, #84]	@ (800fc14 <HAL_UART_IRQHandler+0x2c0>)
 800fbc0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7f5 fe13 	bl	80057f4 <HAL_DMA_Abort_IT>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d019      	beq.n	800fc08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fbe2:	4610      	mov	r0, r2
 800fbe4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbe6:	e00f      	b.n	800fc08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 f9c9 	bl	800ff80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbee:	e00b      	b.n	800fc08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 f9c5 	bl	800ff80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbf6:	e007      	b.n	800fc08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 f9c1 	bl	800ff80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fc06:	e1a7      	b.n	800ff58 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc08:	bf00      	nop
    return;
 800fc0a:	e1a5      	b.n	800ff58 <HAL_UART_IRQHandler+0x604>
 800fc0c:	10000001 	.word	0x10000001
 800fc10:	04000120 	.word	0x04000120
 800fc14:	08010747 	.word	0x08010747

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	f040 8150 	bne.w	800fec2 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fc22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc26:	f003 0310 	and.w	r3, r3, #16
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f000 8149 	beq.w	800fec2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fc30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc34:	f003 0310 	and.w	r3, r3, #16
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f000 8142 	beq.w	800fec2 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2210      	movs	r2, #16
 800fc44:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	689b      	ldr	r3, [r3, #8]
 800fc4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc50:	2b40      	cmp	r3, #64	@ 0x40
 800fc52:	f040 80b8 	bne.w	800fdc6 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fc64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f000 8177 	beq.w	800ff5c <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fc74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	f080 816f 	bcs.w	800ff5c <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fc84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc90:	2b81      	cmp	r3, #129	@ 0x81
 800fc92:	f000 8087 	beq.w	800fda4 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fca2:	e853 3f00 	ldrex	r3, [r3]
 800fca6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fcaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fcae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fcb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	461a      	mov	r2, r3
 800fcbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fcc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fcc4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fccc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fcd0:	e841 2300 	strex	r3, r2, [r1]
 800fcd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fcd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1da      	bne.n	800fc96 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	3308      	adds	r3, #8
 800fce6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fcea:	e853 3f00 	ldrex	r3, [r3]
 800fcee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fcf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fcf2:	f023 0301 	bic.w	r3, r3, #1
 800fcf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	3308      	adds	r3, #8
 800fd00:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fd04:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fd08:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd0a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fd0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fd10:	e841 2300 	strex	r3, r2, [r1]
 800fd14:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fd16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1e1      	bne.n	800fce0 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	3308      	adds	r3, #8
 800fd22:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fd26:	e853 3f00 	ldrex	r3, [r3]
 800fd2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fd2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	3308      	adds	r3, #8
 800fd3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fd40:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fd42:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd44:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fd46:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fd48:	e841 2300 	strex	r3, r2, [r1]
 800fd4c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fd4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1e3      	bne.n	800fd1c <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2220      	movs	r2, #32
 800fd58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd6a:	e853 3f00 	ldrex	r3, [r3]
 800fd6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fd70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd72:	f023 0310 	bic.w	r3, r3, #16
 800fd76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	461a      	mov	r2, r3
 800fd80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd84:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fd86:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fd8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fd8c:	e841 2300 	strex	r3, r2, [r1]
 800fd90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fd92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1e4      	bne.n	800fd62 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7f5 fcac 	bl	80056fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2202      	movs	r2, #2
 800fda8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 f8e8 	bl	800ff94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fdc4:	e0ca      	b.n	800ff5c <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f000 80bc 	beq.w	800ff60 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 800fde8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f000 80b7 	beq.w	800ff60 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdfa:	e853 3f00 	ldrex	r3, [r3]
 800fdfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fe00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fe14:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe1c:	e841 2300 	strex	r3, r2, [r1]
 800fe20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fe22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d1e4      	bne.n	800fdf2 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	3308      	adds	r3, #8
 800fe2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe32:	e853 3f00 	ldrex	r3, [r3]
 800fe36:	623b      	str	r3, [r7, #32]
   return(result);
 800fe38:	6a3b      	ldr	r3, [r7, #32]
 800fe3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fe3e:	f023 0301 	bic.w	r3, r3, #1
 800fe42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	3308      	adds	r3, #8
 800fe4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fe50:	633a      	str	r2, [r7, #48]	@ 0x30
 800fe52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe58:	e841 2300 	strex	r3, r2, [r1]
 800fe5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fe5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1e1      	bne.n	800fe28 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2220      	movs	r2, #32
 800fe68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	e853 3f00 	ldrex	r3, [r3]
 800fe84:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f023 0310 	bic.w	r3, r3, #16
 800fe8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	461a      	mov	r2, r3
 800fe96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fe9a:	61fb      	str	r3, [r7, #28]
 800fe9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe9e:	69b9      	ldr	r1, [r7, #24]
 800fea0:	69fa      	ldr	r2, [r7, #28]
 800fea2:	e841 2300 	strex	r3, r2, [r1]
 800fea6:	617b      	str	r3, [r7, #20]
   return(result);
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1e4      	bne.n	800fe78 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2202      	movs	r2, #2
 800feb2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800feb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800feb8:	4619      	mov	r1, r3
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 f86a 	bl	800ff94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fec0:	e04e      	b.n	800ff60 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d014      	beq.n	800fef8 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d105      	bne.n	800fee6 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800feda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d008      	beq.n	800fef8 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800feea:	2b00      	cmp	r3, #0
 800feec:	d03a      	beq.n	800ff64 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	4798      	blx	r3
    }
    return;
 800fef6:	e035      	b.n	800ff64 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fefc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d009      	beq.n	800ff18 <HAL_UART_IRQHandler+0x5c4>
 800ff04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d003      	beq.n	800ff18 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 fc2e 	bl	8010772 <UART_EndTransmit_IT>
    return;
 800ff16:	e026      	b.n	800ff66 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ff18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d009      	beq.n	800ff38 <HAL_UART_IRQHandler+0x5e4>
 800ff24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d003      	beq.n	800ff38 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 fc53 	bl	80107dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ff36:	e016      	b.n	800ff66 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ff38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d010      	beq.n	800ff66 <HAL_UART_IRQHandler+0x612>
 800ff44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	da0c      	bge.n	800ff66 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 fc3b 	bl	80107c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ff52:	e008      	b.n	800ff66 <HAL_UART_IRQHandler+0x612>
      return;
 800ff54:	bf00      	nop
 800ff56:	e006      	b.n	800ff66 <HAL_UART_IRQHandler+0x612>
    return;
 800ff58:	bf00      	nop
 800ff5a:	e004      	b.n	800ff66 <HAL_UART_IRQHandler+0x612>
      return;
 800ff5c:	bf00      	nop
 800ff5e:	e002      	b.n	800ff66 <HAL_UART_IRQHandler+0x612>
      return;
 800ff60:	bf00      	nop
 800ff62:	e000      	b.n	800ff66 <HAL_UART_IRQHandler+0x612>
    return;
 800ff64:	bf00      	nop
  }
}
 800ff66:	37e8      	adds	r7, #232	@ 0xe8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ff74:	bf00      	nop
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ff88:	bf00      	nop
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ffa0:	bf00      	nop
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ffb0:	b094      	sub	sp, #80	@ 0x50
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ffbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffbe:	681a      	ldr	r2, [r3, #0]
 800ffc0:	4b83      	ldr	r3, [pc, #524]	@ (80101d0 <UART_SetConfig+0x224>)
 800ffc2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ffc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffc6:	689a      	ldr	r2, [r3, #8]
 800ffc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffca:	691b      	ldr	r3, [r3, #16]
 800ffcc:	431a      	orrs	r2, r3
 800ffce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd0:	695b      	ldr	r3, [r3, #20]
 800ffd2:	431a      	orrs	r2, r3
 800ffd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd6:	69db      	ldr	r3, [r3, #28]
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ffdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	497c      	ldr	r1, [pc, #496]	@ (80101d4 <UART_SetConfig+0x228>)
 800ffe4:	4019      	ands	r1, r3
 800ffe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffec:	430b      	orrs	r3, r1
 800ffee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800fffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fffc:	68d9      	ldr	r1, [r3, #12]
 800fffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	ea40 0301 	orr.w	r3, r0, r1
 8010006:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801000a:	699b      	ldr	r3, [r3, #24]
 801000c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801000e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	4b6f      	ldr	r3, [pc, #444]	@ (80101d0 <UART_SetConfig+0x224>)
 8010014:	429a      	cmp	r2, r3
 8010016:	d009      	beq.n	801002c <UART_SetConfig+0x80>
 8010018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	4b6e      	ldr	r3, [pc, #440]	@ (80101d8 <UART_SetConfig+0x22c>)
 801001e:	429a      	cmp	r2, r3
 8010020:	d004      	beq.n	801002c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010024:	6a1a      	ldr	r2, [r3, #32]
 8010026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010028:	4313      	orrs	r3, r2
 801002a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801002c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8010036:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801003a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010040:	430b      	orrs	r3, r1
 8010042:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801004a:	f023 000f 	bic.w	r0, r3, #15
 801004e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010050:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	ea40 0301 	orr.w	r3, r0, r1
 801005a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801005c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	4b5e      	ldr	r3, [pc, #376]	@ (80101dc <UART_SetConfig+0x230>)
 8010062:	429a      	cmp	r2, r3
 8010064:	d102      	bne.n	801006c <UART_SetConfig+0xc0>
 8010066:	2301      	movs	r3, #1
 8010068:	64bb      	str	r3, [r7, #72]	@ 0x48
 801006a:	e032      	b.n	80100d2 <UART_SetConfig+0x126>
 801006c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	4b5b      	ldr	r3, [pc, #364]	@ (80101e0 <UART_SetConfig+0x234>)
 8010072:	429a      	cmp	r2, r3
 8010074:	d102      	bne.n	801007c <UART_SetConfig+0xd0>
 8010076:	2302      	movs	r3, #2
 8010078:	64bb      	str	r3, [r7, #72]	@ 0x48
 801007a:	e02a      	b.n	80100d2 <UART_SetConfig+0x126>
 801007c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	4b58      	ldr	r3, [pc, #352]	@ (80101e4 <UART_SetConfig+0x238>)
 8010082:	429a      	cmp	r2, r3
 8010084:	d102      	bne.n	801008c <UART_SetConfig+0xe0>
 8010086:	2304      	movs	r3, #4
 8010088:	64bb      	str	r3, [r7, #72]	@ 0x48
 801008a:	e022      	b.n	80100d2 <UART_SetConfig+0x126>
 801008c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	4b55      	ldr	r3, [pc, #340]	@ (80101e8 <UART_SetConfig+0x23c>)
 8010092:	429a      	cmp	r2, r3
 8010094:	d102      	bne.n	801009c <UART_SetConfig+0xf0>
 8010096:	2308      	movs	r3, #8
 8010098:	64bb      	str	r3, [r7, #72]	@ 0x48
 801009a:	e01a      	b.n	80100d2 <UART_SetConfig+0x126>
 801009c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	4b52      	ldr	r3, [pc, #328]	@ (80101ec <UART_SetConfig+0x240>)
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d102      	bne.n	80100ac <UART_SetConfig+0x100>
 80100a6:	2310      	movs	r3, #16
 80100a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100aa:	e012      	b.n	80100d2 <UART_SetConfig+0x126>
 80100ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	4b4f      	ldr	r3, [pc, #316]	@ (80101f0 <UART_SetConfig+0x244>)
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d103      	bne.n	80100be <UART_SetConfig+0x112>
 80100b6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80100ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100bc:	e009      	b.n	80100d2 <UART_SetConfig+0x126>
 80100be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	4b43      	ldr	r3, [pc, #268]	@ (80101d0 <UART_SetConfig+0x224>)
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d102      	bne.n	80100ce <UART_SetConfig+0x122>
 80100c8:	2320      	movs	r3, #32
 80100ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100cc:	e001      	b.n	80100d2 <UART_SetConfig+0x126>
 80100ce:	2300      	movs	r3, #0
 80100d0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80100d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	4b3e      	ldr	r3, [pc, #248]	@ (80101d0 <UART_SetConfig+0x224>)
 80100d8:	429a      	cmp	r2, r3
 80100da:	d005      	beq.n	80100e8 <UART_SetConfig+0x13c>
 80100dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	4b3d      	ldr	r3, [pc, #244]	@ (80101d8 <UART_SetConfig+0x22c>)
 80100e2:	429a      	cmp	r2, r3
 80100e4:	f040 8088 	bne.w	80101f8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80100e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100ea:	2200      	movs	r2, #0
 80100ec:	623b      	str	r3, [r7, #32]
 80100ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80100f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80100f4:	f7fb fef2 	bl	800bedc <HAL_RCCEx_GetPeriphCLKFreq>
 80100f8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80100fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f000 80eb 	beq.w	80102d8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010106:	4a3b      	ldr	r2, [pc, #236]	@ (80101f4 <UART_SetConfig+0x248>)
 8010108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801010c:	461a      	mov	r2, r3
 801010e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010110:	fbb3 f3f2 	udiv	r3, r3, r2
 8010114:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010118:	685a      	ldr	r2, [r3, #4]
 801011a:	4613      	mov	r3, r2
 801011c:	005b      	lsls	r3, r3, #1
 801011e:	4413      	add	r3, r2
 8010120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010122:	429a      	cmp	r2, r3
 8010124:	d305      	bcc.n	8010132 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801012c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801012e:	429a      	cmp	r2, r3
 8010130:	d903      	bls.n	801013a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8010132:	2301      	movs	r3, #1
 8010134:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010138:	e048      	b.n	80101cc <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801013a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801013c:	2200      	movs	r2, #0
 801013e:	61bb      	str	r3, [r7, #24]
 8010140:	61fa      	str	r2, [r7, #28]
 8010142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010146:	4a2b      	ldr	r2, [pc, #172]	@ (80101f4 <UART_SetConfig+0x248>)
 8010148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801014c:	b29b      	uxth	r3, r3
 801014e:	2200      	movs	r2, #0
 8010150:	613b      	str	r3, [r7, #16]
 8010152:	617a      	str	r2, [r7, #20]
 8010154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010158:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801015c:	f7f0 f8aa 	bl	80002b4 <__aeabi_uldivmod>
 8010160:	4602      	mov	r2, r0
 8010162:	460b      	mov	r3, r1
 8010164:	4610      	mov	r0, r2
 8010166:	4619      	mov	r1, r3
 8010168:	f04f 0200 	mov.w	r2, #0
 801016c:	f04f 0300 	mov.w	r3, #0
 8010170:	020b      	lsls	r3, r1, #8
 8010172:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010176:	0202      	lsls	r2, r0, #8
 8010178:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801017a:	6849      	ldr	r1, [r1, #4]
 801017c:	0849      	lsrs	r1, r1, #1
 801017e:	2000      	movs	r0, #0
 8010180:	460c      	mov	r4, r1
 8010182:	4605      	mov	r5, r0
 8010184:	eb12 0804 	adds.w	r8, r2, r4
 8010188:	eb43 0905 	adc.w	r9, r3, r5
 801018c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	2200      	movs	r2, #0
 8010192:	60bb      	str	r3, [r7, #8]
 8010194:	60fa      	str	r2, [r7, #12]
 8010196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801019a:	4640      	mov	r0, r8
 801019c:	4649      	mov	r1, r9
 801019e:	f7f0 f889 	bl	80002b4 <__aeabi_uldivmod>
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	4613      	mov	r3, r2
 80101a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80101aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80101b0:	d308      	bcc.n	80101c4 <UART_SetConfig+0x218>
 80101b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80101b8:	d204      	bcs.n	80101c4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80101ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80101c0:	60da      	str	r2, [r3, #12]
 80101c2:	e003      	b.n	80101cc <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80101c4:	2301      	movs	r3, #1
 80101c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80101ca:	e085      	b.n	80102d8 <UART_SetConfig+0x32c>
 80101cc:	e084      	b.n	80102d8 <UART_SetConfig+0x32c>
 80101ce:	bf00      	nop
 80101d0:	46002400 	.word	0x46002400
 80101d4:	cfff69f3 	.word	0xcfff69f3
 80101d8:	56002400 	.word	0x56002400
 80101dc:	40013800 	.word	0x40013800
 80101e0:	40004400 	.word	0x40004400
 80101e4:	40004800 	.word	0x40004800
 80101e8:	40004c00 	.word	0x40004c00
 80101ec:	40005000 	.word	0x40005000
 80101f0:	40006400 	.word	0x40006400
 80101f4:	08011410 	.word	0x08011410
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101fa:	69db      	ldr	r3, [r3, #28]
 80101fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010200:	d13c      	bne.n	801027c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010204:	2200      	movs	r2, #0
 8010206:	603b      	str	r3, [r7, #0]
 8010208:	607a      	str	r2, [r7, #4]
 801020a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801020e:	f7fb fe65 	bl	800bedc <HAL_RCCEx_GetPeriphCLKFreq>
 8010212:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010216:	2b00      	cmp	r3, #0
 8010218:	d05e      	beq.n	80102d8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801021a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801021c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801021e:	4a39      	ldr	r2, [pc, #228]	@ (8010304 <UART_SetConfig+0x358>)
 8010220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010224:	461a      	mov	r2, r3
 8010226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010228:	fbb3 f3f2 	udiv	r3, r3, r2
 801022c:	005a      	lsls	r2, r3, #1
 801022e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	085b      	lsrs	r3, r3, #1
 8010234:	441a      	add	r2, r3
 8010236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	fbb2 f3f3 	udiv	r3, r2, r3
 801023e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010242:	2b0f      	cmp	r3, #15
 8010244:	d916      	bls.n	8010274 <UART_SetConfig+0x2c8>
 8010246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801024c:	d212      	bcs.n	8010274 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801024e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010250:	b29b      	uxth	r3, r3
 8010252:	f023 030f 	bic.w	r3, r3, #15
 8010256:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801025a:	085b      	lsrs	r3, r3, #1
 801025c:	b29b      	uxth	r3, r3
 801025e:	f003 0307 	and.w	r3, r3, #7
 8010262:	b29a      	uxth	r2, r3
 8010264:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010266:	4313      	orrs	r3, r2
 8010268:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 801026a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010270:	60da      	str	r2, [r3, #12]
 8010272:	e031      	b.n	80102d8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010274:	2301      	movs	r3, #1
 8010276:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801027a:	e02d      	b.n	80102d8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801027c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801027e:	2200      	movs	r2, #0
 8010280:	469a      	mov	sl, r3
 8010282:	4693      	mov	fp, r2
 8010284:	4650      	mov	r0, sl
 8010286:	4659      	mov	r1, fp
 8010288:	f7fb fe28 	bl	800bedc <HAL_RCCEx_GetPeriphCLKFreq>
 801028c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801028e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010290:	2b00      	cmp	r3, #0
 8010292:	d021      	beq.n	80102d8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010298:	4a1a      	ldr	r2, [pc, #104]	@ (8010304 <UART_SetConfig+0x358>)
 801029a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801029e:	461a      	mov	r2, r3
 80102a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80102a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	085b      	lsrs	r3, r3, #1
 80102ac:	441a      	add	r2, r3
 80102ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102ba:	2b0f      	cmp	r3, #15
 80102bc:	d909      	bls.n	80102d2 <UART_SetConfig+0x326>
 80102be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102c4:	d205      	bcs.n	80102d2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80102c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102c8:	b29a      	uxth	r2, r3
 80102ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	60da      	str	r2, [r3, #12]
 80102d0:	e002      	b.n	80102d8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80102d2:	2301      	movs	r3, #1
 80102d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80102d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102da:	2201      	movs	r2, #1
 80102dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80102e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e2:	2201      	movs	r2, #1
 80102e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80102e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ea:	2200      	movs	r2, #0
 80102ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80102ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f0:	2200      	movs	r2, #0
 80102f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80102f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3750      	adds	r7, #80	@ 0x50
 80102fc:	46bd      	mov	sp, r7
 80102fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010302:	bf00      	nop
 8010304:	08011410 	.word	0x08011410

08010308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010314:	f003 0308 	and.w	r3, r3, #8
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00a      	beq.n	8010332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	430a      	orrs	r2, r1
 8010330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010336:	f003 0301 	and.w	r3, r3, #1
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00a      	beq.n	8010354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	430a      	orrs	r2, r1
 8010352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010358:	f003 0302 	and.w	r3, r3, #2
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00a      	beq.n	8010376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	430a      	orrs	r2, r1
 8010374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801037a:	f003 0304 	and.w	r3, r3, #4
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00a      	beq.n	8010398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	430a      	orrs	r2, r1
 8010396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801039c:	f003 0310 	and.w	r3, r3, #16
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00a      	beq.n	80103ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	430a      	orrs	r2, r1
 80103b8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103be:	f003 0320 	and.w	r3, r3, #32
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00a      	beq.n	80103dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	430a      	orrs	r2, r1
 80103da:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d01a      	beq.n	801041e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	430a      	orrs	r2, r1
 80103fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010406:	d10a      	bne.n	801041e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	430a      	orrs	r2, r1
 801041c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010426:	2b00      	cmp	r3, #0
 8010428:	d00a      	beq.n	8010440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	430a      	orrs	r2, r1
 801043e:	605a      	str	r2, [r3, #4]
  }
}
 8010440:	bf00      	nop
 8010442:	370c      	adds	r7, #12
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr

0801044c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b098      	sub	sp, #96	@ 0x60
 8010450:	af02      	add	r7, sp, #8
 8010452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801045c:	f7f2 fbf6 	bl	8002c4c <HAL_GetTick>
 8010460:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f003 0308 	and.w	r3, r3, #8
 801046c:	2b08      	cmp	r3, #8
 801046e:	d12f      	bne.n	80104d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010470:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010474:	9300      	str	r3, [sp, #0]
 8010476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010478:	2200      	movs	r2, #0
 801047a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 f88e 	bl	80105a0 <UART_WaitOnFlagUntilTimeout>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d022      	beq.n	80104d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010492:	e853 3f00 	ldrex	r3, [r3]
 8010496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801049a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801049e:	653b      	str	r3, [r7, #80]	@ 0x50
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	461a      	mov	r2, r3
 80104a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80104aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80104ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104b0:	e841 2300 	strex	r3, r2, [r1]
 80104b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80104b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1e6      	bne.n	801048a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2220      	movs	r2, #32
 80104c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104cc:	2303      	movs	r3, #3
 80104ce:	e063      	b.n	8010598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f003 0304 	and.w	r3, r3, #4
 80104da:	2b04      	cmp	r3, #4
 80104dc:	d149      	bne.n	8010572 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80104de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104e6:	2200      	movs	r2, #0
 80104e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 f857 	bl	80105a0 <UART_WaitOnFlagUntilTimeout>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d03c      	beq.n	8010572 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010500:	e853 3f00 	ldrex	r3, [r3]
 8010504:	623b      	str	r3, [r7, #32]
   return(result);
 8010506:	6a3b      	ldr	r3, [r7, #32]
 8010508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801050c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	461a      	mov	r2, r3
 8010514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010516:	633b      	str	r3, [r7, #48]	@ 0x30
 8010518:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801051a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801051c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801051e:	e841 2300 	strex	r3, r2, [r1]
 8010522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010526:	2b00      	cmp	r3, #0
 8010528:	d1e6      	bne.n	80104f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	3308      	adds	r3, #8
 8010530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	e853 3f00 	ldrex	r3, [r3]
 8010538:	60fb      	str	r3, [r7, #12]
   return(result);
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	f023 0301 	bic.w	r3, r3, #1
 8010540:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	3308      	adds	r3, #8
 8010548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801054a:	61fa      	str	r2, [r7, #28]
 801054c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801054e:	69b9      	ldr	r1, [r7, #24]
 8010550:	69fa      	ldr	r2, [r7, #28]
 8010552:	e841 2300 	strex	r3, r2, [r1]
 8010556:	617b      	str	r3, [r7, #20]
   return(result);
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d1e5      	bne.n	801052a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2220      	movs	r2, #32
 8010562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801056e:	2303      	movs	r3, #3
 8010570:	e012      	b.n	8010598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2220      	movs	r2, #32
 8010576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2220      	movs	r2, #32
 801057e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2200      	movs	r2, #0
 8010586:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010596:	2300      	movs	r3, #0
}
 8010598:	4618      	mov	r0, r3
 801059a:	3758      	adds	r7, #88	@ 0x58
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	603b      	str	r3, [r7, #0]
 80105ac:	4613      	mov	r3, r2
 80105ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105b0:	e04f      	b.n	8010652 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b8:	d04b      	beq.n	8010652 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105ba:	f7f2 fb47 	bl	8002c4c <HAL_GetTick>
 80105be:	4602      	mov	r2, r0
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	69ba      	ldr	r2, [r7, #24]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d302      	bcc.n	80105d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d101      	bne.n	80105d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80105d0:	2303      	movs	r3, #3
 80105d2:	e04e      	b.n	8010672 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	f003 0304 	and.w	r3, r3, #4
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d037      	beq.n	8010652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	2b80      	cmp	r3, #128	@ 0x80
 80105e6:	d034      	beq.n	8010652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	2b40      	cmp	r3, #64	@ 0x40
 80105ec:	d031      	beq.n	8010652 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	69db      	ldr	r3, [r3, #28]
 80105f4:	f003 0308 	and.w	r3, r3, #8
 80105f8:	2b08      	cmp	r3, #8
 80105fa:	d110      	bne.n	801061e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2208      	movs	r2, #8
 8010602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	f000 f838 	bl	801067a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2208      	movs	r2, #8
 801060e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2200      	movs	r2, #0
 8010616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801061a:	2301      	movs	r3, #1
 801061c:	e029      	b.n	8010672 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	69db      	ldr	r3, [r3, #28]
 8010624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801062c:	d111      	bne.n	8010652 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f000 f81e 	bl	801067a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2220      	movs	r2, #32
 8010642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2200      	movs	r2, #0
 801064a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801064e:	2303      	movs	r3, #3
 8010650:	e00f      	b.n	8010672 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	69da      	ldr	r2, [r3, #28]
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	4013      	ands	r3, r2
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	429a      	cmp	r2, r3
 8010660:	bf0c      	ite	eq
 8010662:	2301      	moveq	r3, #1
 8010664:	2300      	movne	r3, #0
 8010666:	b2db      	uxtb	r3, r3
 8010668:	461a      	mov	r2, r3
 801066a:	79fb      	ldrb	r3, [r7, #7]
 801066c:	429a      	cmp	r2, r3
 801066e:	d0a0      	beq.n	80105b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010670:	2300      	movs	r3, #0
}
 8010672:	4618      	mov	r0, r3
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801067a:	b480      	push	{r7}
 801067c:	b095      	sub	sp, #84	@ 0x54
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801068a:	e853 3f00 	ldrex	r3, [r3]
 801068e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010692:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	461a      	mov	r2, r3
 801069e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80106a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80106a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80106a8:	e841 2300 	strex	r3, r2, [r1]
 80106ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80106ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1e6      	bne.n	8010682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	3308      	adds	r3, #8
 80106ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106bc:	6a3b      	ldr	r3, [r7, #32]
 80106be:	e853 3f00 	ldrex	r3, [r3]
 80106c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80106ca:	f023 0301 	bic.w	r3, r3, #1
 80106ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	3308      	adds	r3, #8
 80106d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80106d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80106da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106e0:	e841 2300 	strex	r3, r2, [r1]
 80106e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d1e3      	bne.n	80106b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d118      	bne.n	8010726 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	e853 3f00 	ldrex	r3, [r3]
 8010700:	60bb      	str	r3, [r7, #8]
   return(result);
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	f023 0310 	bic.w	r3, r3, #16
 8010708:	647b      	str	r3, [r7, #68]	@ 0x44
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	461a      	mov	r2, r3
 8010710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010712:	61bb      	str	r3, [r7, #24]
 8010714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010716:	6979      	ldr	r1, [r7, #20]
 8010718:	69ba      	ldr	r2, [r7, #24]
 801071a:	e841 2300 	strex	r3, r2, [r1]
 801071e:	613b      	str	r3, [r7, #16]
   return(result);
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d1e6      	bne.n	80106f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2220      	movs	r2, #32
 801072a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801073a:	bf00      	nop
 801073c:	3754      	adds	r7, #84	@ 0x54
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr

08010746 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b084      	sub	sp, #16
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010752:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2200      	movs	r2, #0
 8010758:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2200      	movs	r2, #0
 8010760:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f7ff fc0b 	bl	800ff80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801076a:	bf00      	nop
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}

08010772 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010772:	b580      	push	{r7, lr}
 8010774:	b088      	sub	sp, #32
 8010776:	af00      	add	r7, sp, #0
 8010778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	e853 3f00 	ldrex	r3, [r3]
 8010786:	60bb      	str	r3, [r7, #8]
   return(result);
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801078e:	61fb      	str	r3, [r7, #28]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	461a      	mov	r2, r3
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	61bb      	str	r3, [r7, #24]
 801079a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079c:	6979      	ldr	r1, [r7, #20]
 801079e:	69ba      	ldr	r2, [r7, #24]
 80107a0:	e841 2300 	strex	r3, r2, [r1]
 80107a4:	613b      	str	r3, [r7, #16]
   return(result);
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1e6      	bne.n	801077a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2220      	movs	r2, #32
 80107b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f7ff fbd6 	bl	800ff6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107c0:	bf00      	nop
 80107c2:	3720      	adds	r7, #32
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}

080107c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80107d0:	bf00      	nop
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80107e4:	bf00      	nop
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b085      	sub	sp, #20
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80107fe:	2b01      	cmp	r3, #1
 8010800:	d101      	bne.n	8010806 <HAL_UARTEx_DisableFifoMode+0x16>
 8010802:	2302      	movs	r3, #2
 8010804:	e027      	b.n	8010856 <HAL_UARTEx_DisableFifoMode+0x66>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2201      	movs	r2, #1
 801080a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2224      	movs	r2, #36	@ 0x24
 8010812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f022 0201 	bic.w	r2, r2, #1
 801082c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010834:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	68fa      	ldr	r2, [r7, #12]
 8010842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2220      	movs	r2, #32
 8010848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010854:	2300      	movs	r3, #0
}
 8010856:	4618      	mov	r0, r3
 8010858:	3714      	adds	r7, #20
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr

08010862 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b084      	sub	sp, #16
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
 801086a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010872:	2b01      	cmp	r3, #1
 8010874:	d101      	bne.n	801087a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010876:	2302      	movs	r3, #2
 8010878:	e02d      	b.n	80108d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2201      	movs	r2, #1
 801087e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2224      	movs	r2, #36	@ 0x24
 8010886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f022 0201 	bic.w	r2, r2, #1
 80108a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	683a      	ldr	r2, [r7, #0]
 80108b2:	430a      	orrs	r2, r1
 80108b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 f850 	bl	801095c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2220      	movs	r2, #32
 80108c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b084      	sub	sp, #16
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
 80108e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d101      	bne.n	80108f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80108f2:	2302      	movs	r3, #2
 80108f4:	e02d      	b.n	8010952 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2201      	movs	r2, #1
 80108fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2224      	movs	r2, #36	@ 0x24
 8010902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f022 0201 	bic.w	r2, r2, #1
 801091c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	683a      	ldr	r2, [r7, #0]
 801092e:	430a      	orrs	r2, r1
 8010930:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 f812 	bl	801095c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	68fa      	ldr	r2, [r7, #12]
 801093e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2220      	movs	r2, #32
 8010944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
	...

0801095c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801095c:	b480      	push	{r7}
 801095e:	b085      	sub	sp, #20
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010968:	2b00      	cmp	r3, #0
 801096a:	d108      	bne.n	801097e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2201      	movs	r2, #1
 8010970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2201      	movs	r2, #1
 8010978:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801097c:	e031      	b.n	80109e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801097e:	2308      	movs	r3, #8
 8010980:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010982:	2308      	movs	r3, #8
 8010984:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	689b      	ldr	r3, [r3, #8]
 801098c:	0e5b      	lsrs	r3, r3, #25
 801098e:	b2db      	uxtb	r3, r3
 8010990:	f003 0307 	and.w	r3, r3, #7
 8010994:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	689b      	ldr	r3, [r3, #8]
 801099c:	0f5b      	lsrs	r3, r3, #29
 801099e:	b2db      	uxtb	r3, r3
 80109a0:	f003 0307 	and.w	r3, r3, #7
 80109a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109a6:	7bbb      	ldrb	r3, [r7, #14]
 80109a8:	7b3a      	ldrb	r2, [r7, #12]
 80109aa:	4911      	ldr	r1, [pc, #68]	@ (80109f0 <UARTEx_SetNbDataToProcess+0x94>)
 80109ac:	5c8a      	ldrb	r2, [r1, r2]
 80109ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80109b2:	7b3a      	ldrb	r2, [r7, #12]
 80109b4:	490f      	ldr	r1, [pc, #60]	@ (80109f4 <UARTEx_SetNbDataToProcess+0x98>)
 80109b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80109bc:	b29a      	uxth	r2, r3
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109c4:	7bfb      	ldrb	r3, [r7, #15]
 80109c6:	7b7a      	ldrb	r2, [r7, #13]
 80109c8:	4909      	ldr	r1, [pc, #36]	@ (80109f0 <UARTEx_SetNbDataToProcess+0x94>)
 80109ca:	5c8a      	ldrb	r2, [r1, r2]
 80109cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80109d0:	7b7a      	ldrb	r2, [r7, #13]
 80109d2:	4908      	ldr	r1, [pc, #32]	@ (80109f4 <UARTEx_SetNbDataToProcess+0x98>)
 80109d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80109da:	b29a      	uxth	r2, r3
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80109e2:	bf00      	nop
 80109e4:	3714      	adds	r7, #20
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop
 80109f0:	08011428 	.word	0x08011428
 80109f4:	08011430 	.word	0x08011430

080109f8 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b086      	sub	sp, #24
 80109fc:	af02      	add	r7, sp, #8
 80109fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010a00:	2300      	movs	r3, #0
 8010a02:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010a04:	f7f2 f922 	bl	8002c4c <HAL_GetTick>
 8010a08:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d102      	bne.n	8010a16 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010a10:	2301      	movs	r3, #1
 8010a12:	73fb      	strb	r3, [r7, #15]
 8010a14:	e137      	b.n	8010c86 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a76      	ldr	r2, [pc, #472]	@ (8010bf4 <HAL_XSPI_Init+0x1fc>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d008      	beq.n	8010a32 <HAL_XSPI_Init+0x3a>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a74      	ldr	r2, [pc, #464]	@ (8010bf8 <HAL_XSPI_Init+0x200>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d003      	beq.n	8010a32 <HAL_XSPI_Init+0x3a>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4a73      	ldr	r2, [pc, #460]	@ (8010bfc <HAL_XSPI_Init+0x204>)
 8010a30:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a72      	ldr	r2, [pc, #456]	@ (8010c00 <HAL_XSPI_Init+0x208>)
 8010a38:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8010bf4 <HAL_XSPI_Init+0x1fc>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d008      	beq.n	8010a56 <HAL_XSPI_Init+0x5e>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4a6b      	ldr	r2, [pc, #428]	@ (8010bf8 <HAL_XSPI_Init+0x200>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d003      	beq.n	8010a56 <HAL_XSPI_Init+0x5e>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4a6a      	ldr	r2, [pc, #424]	@ (8010bfc <HAL_XSPI_Init+0x204>)
 8010a54:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4a66      	ldr	r2, [pc, #408]	@ (8010bf4 <HAL_XSPI_Init+0x1fc>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d008      	beq.n	8010a72 <HAL_XSPI_Init+0x7a>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a64      	ldr	r2, [pc, #400]	@ (8010bf8 <HAL_XSPI_Init+0x200>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d003      	beq.n	8010a72 <HAL_XSPI_Init+0x7a>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4a63      	ldr	r2, [pc, #396]	@ (8010bfc <HAL_XSPI_Init+0x204>)
 8010a70:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2200      	movs	r2, #0
 8010a76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f040 8102 	bne.w	8010c86 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f7f1 f8e0 	bl	8001c48 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8010a88:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f000 f8ff 	bl	8010c90 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	689a      	ldr	r2, [r3, #8]
 8010a98:	4b5a      	ldr	r3, [pc, #360]	@ (8010c04 <HAL_XSPI_Init+0x20c>)
 8010a9a:	4013      	ands	r3, r2
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	68d1      	ldr	r1, [r2, #12]
 8010aa0:	687a      	ldr	r2, [r7, #4]
 8010aa2:	6912      	ldr	r2, [r2, #16]
 8010aa4:	0412      	lsls	r2, r2, #16
 8010aa6:	4311      	orrs	r1, r2
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	6952      	ldr	r2, [r2, #20]
 8010aac:	3a01      	subs	r2, #1
 8010aae:	0212      	lsls	r2, r2, #8
 8010ab0:	4311      	orrs	r1, r2
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	69d2      	ldr	r2, [r2, #28]
 8010ab6:	4311      	orrs	r1, r2
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	6812      	ldr	r2, [r2, #0]
 8010abc:	430b      	orrs	r3, r1
 8010abe:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4a4b      	ldr	r2, [pc, #300]	@ (8010bf4 <HAL_XSPI_Init+0x1fc>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d00e      	beq.n	8010ae8 <HAL_XSPI_Init+0xf0>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	4a4a      	ldr	r2, [pc, #296]	@ (8010bf8 <HAL_XSPI_Init+0x200>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d009      	beq.n	8010ae8 <HAL_XSPI_Init+0xf0>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4a48      	ldr	r2, [pc, #288]	@ (8010bfc <HAL_XSPI_Init+0x204>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d004      	beq.n	8010ae8 <HAL_XSPI_Init+0xf0>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a49      	ldr	r2, [pc, #292]	@ (8010c08 <HAL_XSPI_Init+0x210>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d10a      	bne.n	8010afe <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	f023 0108 	bic.w	r1, r3, #8
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	430a      	orrs	r2, r1
 8010afc:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6a1a      	ldr	r2, [r3, #32]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	430a      	orrs	r2, r1
 8010b12:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	691b      	ldr	r3, [r3, #16]
 8010b1a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b22:	041a      	lsls	r2, r3, #16
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	430a      	orrs	r2, r1
 8010b2a:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a30      	ldr	r2, [pc, #192]	@ (8010bf4 <HAL_XSPI_Init+0x1fc>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d00e      	beq.n	8010b54 <HAL_XSPI_Init+0x15c>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8010bf8 <HAL_XSPI_Init+0x200>)
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d009      	beq.n	8010b54 <HAL_XSPI_Init+0x15c>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	4a2d      	ldr	r2, [pc, #180]	@ (8010bfc <HAL_XSPI_Init+0x204>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d004      	beq.n	8010b54 <HAL_XSPI_Init+0x15c>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8010c08 <HAL_XSPI_Init+0x210>)
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d10a      	bne.n	8010b6a <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	691b      	ldr	r3, [r3, #16]
 8010b5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	430a      	orrs	r2, r1
 8010b68:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010b72:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	3b01      	subs	r3, #1
 8010b84:	021a      	lsls	r2, r3, #8
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	430a      	orrs	r2, r1
 8010b8c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b92:	9300      	str	r3, [sp, #0]
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	2200      	movs	r2, #0
 8010b98:	2120      	movs	r1, #32
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 f887 	bl	8010cae <XSPI_WaitFlagStateUntilTimeout>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010ba4:	7bfb      	ldrb	r3, [r7, #15]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d16d      	bne.n	8010c86 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	430a      	orrs	r2, r1
 8010bbe:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8010c00 <HAL_XSPI_Init+0x208>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d004      	beq.n	8010bd4 <HAL_XSPI_Init+0x1dc>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	4a0f      	ldr	r2, [pc, #60]	@ (8010c0c <HAL_XSPI_Init+0x214>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d11d      	bne.n	8010c10 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010bd8:	9300      	str	r3, [sp, #0]
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	2120      	movs	r1, #32
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f000 f864 	bl	8010cae <XSPI_WaitFlagStateUntilTimeout>
 8010be6:	4603      	mov	r3, r0
 8010be8:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d00f      	beq.n	8010c10 <HAL_XSPI_Init+0x218>
          {
            return status;
 8010bf0:	7bfb      	ldrb	r3, [r7, #15]
 8010bf2:	e049      	b.n	8010c88 <HAL_XSPI_Init+0x290>
 8010bf4:	420d1400 	.word	0x420d1400
 8010bf8:	520d1400 	.word	0x520d1400
 8010bfc:	420d2400 	.word	0x420d2400
 8010c00:	420d3400 	.word	0x420d3400
 8010c04:	f8e0c0fc 	.word	0xf8e0c0fc
 8010c08:	520d2400 	.word	0x520d2400
 8010c0c:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	689a      	ldr	r2, [r3, #8]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	430a      	orrs	r2, r1
 8010c24:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010c2e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c3a:	431a      	orrs	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	430a      	orrs	r2, r1
 8010c42:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f042 0201 	orr.w	r2, r2, #1
 8010c54:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	699b      	ldr	r3, [r3, #24]
 8010c5a:	2b02      	cmp	r3, #2
 8010c5c:	d107      	bne.n	8010c6e <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	689a      	ldr	r2, [r3, #8]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f042 0202 	orr.w	r2, r2, #2
 8010c6c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010c76:	d103      	bne.n	8010c80 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8010c7e:	e002      	b.n	8010c86 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2202      	movs	r2, #2
 8010c84:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8010c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3710      	adds	r7, #16
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	683a      	ldr	r2, [r7, #0]
 8010c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8010ca0:	2300      	movs	r3, #0
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	370c      	adds	r7, #12
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cac:	4770      	bx	lr

08010cae <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010cae:	b580      	push	{r7, lr}
 8010cb0:	b084      	sub	sp, #16
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	60f8      	str	r0, [r7, #12]
 8010cb6:	60b9      	str	r1, [r7, #8]
 8010cb8:	603b      	str	r3, [r7, #0]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010cbe:	e01a      	b.n	8010cf6 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010cc0:	69bb      	ldr	r3, [r7, #24]
 8010cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cc6:	d016      	beq.n	8010cf6 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010cc8:	f7f1 ffc0 	bl	8002c4c <HAL_GetTick>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	1ad3      	subs	r3, r2, r3
 8010cd2:	69ba      	ldr	r2, [r7, #24]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d302      	bcc.n	8010cde <XSPI_WaitFlagStateUntilTimeout+0x30>
 8010cd8:	69bb      	ldr	r3, [r7, #24]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d10b      	bne.n	8010cf6 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ce4:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010cea:	f043 0201 	orr.w	r2, r3, #1
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8010cf2:	2303      	movs	r3, #3
 8010cf4:	e00e      	b.n	8010d14 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	6a1a      	ldr	r2, [r3, #32]
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	4013      	ands	r3, r2
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	bf14      	ite	ne
 8010d04:	2301      	movne	r3, #1
 8010d06:	2300      	moveq	r3, #0
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	79fb      	ldrb	r3, [r7, #7]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d1d6      	bne.n	8010cc0 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010d12:	2300      	movs	r3, #0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3710      	adds	r7, #16
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010d1c:	b084      	sub	sp, #16
 8010d1e:	b580      	push	{r7, lr}
 8010d20:	b084      	sub	sp, #16
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]
 8010d26:	f107 001c 	add.w	r0, r7, #28
 8010d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010d2e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010d32:	2b03      	cmp	r3, #3
 8010d34:	d105      	bne.n	8010d42 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 fa8e 	bl	8011264 <USB_CoreReset>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8010d4c:	7fbb      	ldrb	r3, [r7, #30]
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d10b      	bne.n	8010d6a <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	689b      	ldr	r3, [r3, #8]
 8010d56:	f043 0208 	orr.w	r2, r3, #8
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	f043 0220 	orr.w	r2, r3, #32
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8010d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010d76:	b004      	add	sp, #16
 8010d78:	4770      	bx	lr

08010d7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d7a:	b480      	push	{r7}
 8010d7c:	b083      	sub	sp, #12
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	689b      	ldr	r3, [r3, #8]
 8010d86:	f023 0201 	bic.w	r2, r3, #1
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010d8e:	2300      	movs	r3, #0
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	460b      	mov	r3, r1
 8010da6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010da8:	2300      	movs	r3, #0
 8010daa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010db8:	78fb      	ldrb	r3, [r7, #3]
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d115      	bne.n	8010dea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010dca:	200a      	movs	r0, #10
 8010dcc:	f7f1 ff4a 	bl	8002c64 <HAL_Delay>
      ms += 10U;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	330a      	adds	r3, #10
 8010dd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f000 fa36 	bl	8011248 <USB_GetMode>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d01e      	beq.n	8010e20 <USB_SetCurrentMode+0x84>
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2bc7      	cmp	r3, #199	@ 0xc7
 8010de6:	d9f0      	bls.n	8010dca <USB_SetCurrentMode+0x2e>
 8010de8:	e01a      	b.n	8010e20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010dea:	78fb      	ldrb	r3, [r7, #3]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d115      	bne.n	8010e1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010dfc:	200a      	movs	r0, #10
 8010dfe:	f7f1 ff31 	bl	8002c64 <HAL_Delay>
      ms += 10U;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	330a      	adds	r3, #10
 8010e06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 fa1d 	bl	8011248 <USB_GetMode>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d005      	beq.n	8010e20 <USB_SetCurrentMode+0x84>
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2bc7      	cmp	r3, #199	@ 0xc7
 8010e18:	d9f0      	bls.n	8010dfc <USB_SetCurrentMode+0x60>
 8010e1a:	e001      	b.n	8010e20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	e005      	b.n	8010e2c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2bc8      	cmp	r3, #200	@ 0xc8
 8010e24:	d101      	bne.n	8010e2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010e26:	2301      	movs	r3, #1
 8010e28:	e000      	b.n	8010e2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e34:	b084      	sub	sp, #16
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b086      	sub	sp, #24
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e46:	2300      	movs	r3, #0
 8010e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010e4e:	2300      	movs	r3, #0
 8010e50:	613b      	str	r3, [r7, #16]
 8010e52:	e009      	b.n	8010e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010e54:	687a      	ldr	r2, [r7, #4]
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	3340      	adds	r3, #64	@ 0x40
 8010e5a:	009b      	lsls	r3, r3, #2
 8010e5c:	4413      	add	r3, r2
 8010e5e:	2200      	movs	r2, #0
 8010e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	3301      	adds	r3, #1
 8010e66:	613b      	str	r3, [r7, #16]
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	2b0e      	cmp	r3, #14
 8010e6c:	d9f2      	bls.n	8010e54 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e72:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010e7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d11c      	bne.n	8010ebc <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	68fa      	ldr	r2, [r7, #12]
 8010e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010e90:	f043 0302 	orr.w	r3, r3, #2
 8010e94:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e9a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ea6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eb2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8010eba:	e011      	b.n	8010ee0 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ec0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ecc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ed8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010ee6:	461a      	mov	r2, r3
 8010ee8:	2300      	movs	r3, #0
 8010eea:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010eec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010ef0:	2b03      	cmp	r3, #3
 8010ef2:	d10d      	bne.n	8010f10 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d104      	bne.n	8010f06 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010efc:	2100      	movs	r1, #0
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f968 	bl	80111d4 <USB_SetDevSpeed>
 8010f04:	e008      	b.n	8010f18 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010f06:	2101      	movs	r1, #1
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f000 f963 	bl	80111d4 <USB_SetDevSpeed>
 8010f0e:	e003      	b.n	8010f18 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010f10:	2103      	movs	r1, #3
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 f95e 	bl	80111d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010f18:	2110      	movs	r1, #16
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 f8fa 	bl	8011114 <USB_FlushTxFifo>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d001      	beq.n	8010f2a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8010f26:	2301      	movs	r3, #1
 8010f28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f000 f924 	bl	8011178 <USB_FlushRxFifo>
 8010f30:	4603      	mov	r3, r0
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d001      	beq.n	8010f3a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8010f36:	2301      	movs	r3, #1
 8010f38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f40:	461a      	mov	r2, r3
 8010f42:	2300      	movs	r3, #0
 8010f44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	2300      	movs	r3, #0
 8010f50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f58:	461a      	mov	r2, r3
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f5e:	2300      	movs	r3, #0
 8010f60:	613b      	str	r3, [r7, #16]
 8010f62:	e043      	b.n	8010fec <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	015a      	lsls	r2, r3, #5
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	4413      	add	r3, r2
 8010f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010f76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010f7a:	d118      	bne.n	8010fae <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d10a      	bne.n	8010f98 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	015a      	lsls	r2, r3, #5
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	4413      	add	r3, r2
 8010f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f8e:	461a      	mov	r2, r3
 8010f90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010f94:	6013      	str	r3, [r2, #0]
 8010f96:	e013      	b.n	8010fc0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	015a      	lsls	r2, r3, #5
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010faa:	6013      	str	r3, [r2, #0]
 8010fac:	e008      	b.n	8010fc0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	015a      	lsls	r2, r3, #5
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fba:	461a      	mov	r2, r3
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	015a      	lsls	r2, r3, #5
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fcc:	461a      	mov	r2, r3
 8010fce:	2300      	movs	r3, #0
 8010fd0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	015a      	lsls	r2, r3, #5
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	4413      	add	r3, r2
 8010fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fde:	461a      	mov	r2, r3
 8010fe0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010fe4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	3301      	adds	r3, #1
 8010fea:	613b      	str	r3, [r7, #16]
 8010fec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d3b5      	bcc.n	8010f64 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	613b      	str	r3, [r7, #16]
 8010ffc:	e043      	b.n	8011086 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	015a      	lsls	r2, r3, #5
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	4413      	add	r3, r2
 8011006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011010:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011014:	d118      	bne.n	8011048 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d10a      	bne.n	8011032 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	015a      	lsls	r2, r3, #5
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	4413      	add	r3, r2
 8011024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011028:	461a      	mov	r2, r3
 801102a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801102e:	6013      	str	r3, [r2, #0]
 8011030:	e013      	b.n	801105a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	015a      	lsls	r2, r3, #5
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	4413      	add	r3, r2
 801103a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801103e:	461a      	mov	r2, r3
 8011040:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011044:	6013      	str	r3, [r2, #0]
 8011046:	e008      	b.n	801105a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	015a      	lsls	r2, r3, #5
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	4413      	add	r3, r2
 8011050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011054:	461a      	mov	r2, r3
 8011056:	2300      	movs	r3, #0
 8011058:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	015a      	lsls	r2, r3, #5
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	4413      	add	r3, r2
 8011062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011066:	461a      	mov	r2, r3
 8011068:	2300      	movs	r3, #0
 801106a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	015a      	lsls	r2, r3, #5
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	4413      	add	r3, r2
 8011074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011078:	461a      	mov	r2, r3
 801107a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801107e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	3301      	adds	r3, #1
 8011084:	613b      	str	r3, [r7, #16]
 8011086:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801108a:	461a      	mov	r2, r3
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	4293      	cmp	r3, r2
 8011090:	d3b5      	bcc.n	8010ffe <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011098:	691b      	ldr	r3, [r3, #16]
 801109a:	68fa      	ldr	r2, [r7, #12]
 801109c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80110a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80110a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2200      	movs	r2, #0
 80110aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80110b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80110b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d105      	bne.n	80110c8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	699b      	ldr	r3, [r3, #24]
 80110c0:	f043 0210 	orr.w	r2, r3, #16
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	699a      	ldr	r2, [r3, #24]
 80110cc:	4b10      	ldr	r3, [pc, #64]	@ (8011110 <USB_DevInit+0x2dc>)
 80110ce:	4313      	orrs	r3, r2
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80110d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d005      	beq.n	80110e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	699b      	ldr	r3, [r3, #24]
 80110e0:	f043 0208 	orr.w	r2, r3, #8
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80110e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d107      	bne.n	8011100 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	699b      	ldr	r3, [r3, #24]
 80110f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80110f8:	f043 0304 	orr.w	r3, r3, #4
 80110fc:	687a      	ldr	r2, [r7, #4]
 80110fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011100:	7dfb      	ldrb	r3, [r7, #23]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3718      	adds	r7, #24
 8011106:	46bd      	mov	sp, r7
 8011108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801110c:	b004      	add	sp, #16
 801110e:	4770      	bx	lr
 8011110:	803c3800 	.word	0x803c3800

08011114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011114:	b480      	push	{r7}
 8011116:	b085      	sub	sp, #20
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801111e:	2300      	movs	r3, #0
 8011120:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	3301      	adds	r3, #1
 8011126:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801112e:	d901      	bls.n	8011134 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011130:	2303      	movs	r3, #3
 8011132:	e01b      	b.n	801116c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	691b      	ldr	r3, [r3, #16]
 8011138:	2b00      	cmp	r3, #0
 801113a:	daf2      	bge.n	8011122 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801113c:	2300      	movs	r3, #0
 801113e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	019b      	lsls	r3, r3, #6
 8011144:	f043 0220 	orr.w	r2, r3, #32
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	3301      	adds	r3, #1
 8011150:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011158:	d901      	bls.n	801115e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801115a:	2303      	movs	r3, #3
 801115c:	e006      	b.n	801116c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	691b      	ldr	r3, [r3, #16]
 8011162:	f003 0320 	and.w	r3, r3, #32
 8011166:	2b20      	cmp	r3, #32
 8011168:	d0f0      	beq.n	801114c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801116a:	2300      	movs	r3, #0
}
 801116c:	4618      	mov	r0, r3
 801116e:	3714      	adds	r7, #20
 8011170:	46bd      	mov	sp, r7
 8011172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011176:	4770      	bx	lr

08011178 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011178:	b480      	push	{r7}
 801117a:	b085      	sub	sp, #20
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011180:	2300      	movs	r3, #0
 8011182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	3301      	adds	r3, #1
 8011188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011190:	d901      	bls.n	8011196 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011192:	2303      	movs	r3, #3
 8011194:	e018      	b.n	80111c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	691b      	ldr	r3, [r3, #16]
 801119a:	2b00      	cmp	r3, #0
 801119c:	daf2      	bge.n	8011184 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801119e:	2300      	movs	r3, #0
 80111a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2210      	movs	r2, #16
 80111a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	3301      	adds	r3, #1
 80111ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80111b4:	d901      	bls.n	80111ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80111b6:	2303      	movs	r3, #3
 80111b8:	e006      	b.n	80111c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	691b      	ldr	r3, [r3, #16]
 80111be:	f003 0310 	and.w	r3, r3, #16
 80111c2:	2b10      	cmp	r3, #16
 80111c4:	d0f0      	beq.n	80111a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80111c6:	2300      	movs	r3, #0
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3714      	adds	r7, #20
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	460b      	mov	r3, r1
 80111de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	78fb      	ldrb	r3, [r7, #3]
 80111ee:	68f9      	ldr	r1, [r7, #12]
 80111f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80111f4:	4313      	orrs	r3, r2
 80111f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr

08011206 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011206:	b480      	push	{r7}
 8011208:	b085      	sub	sp, #20
 801120a:	af00      	add	r7, sp, #0
 801120c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	68fa      	ldr	r2, [r7, #12]
 801121c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011220:	f023 0303 	bic.w	r3, r3, #3
 8011224:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	68fa      	ldr	r2, [r7, #12]
 8011230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011234:	f043 0302 	orr.w	r3, r3, #2
 8011238:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801123a:	2300      	movs	r3, #0
}
 801123c:	4618      	mov	r0, r3
 801123e:	3714      	adds	r7, #20
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr

08011248 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	695b      	ldr	r3, [r3, #20]
 8011254:	f003 0301 	and.w	r3, r3, #1
}
 8011258:	4618      	mov	r0, r3
 801125a:	370c      	adds	r7, #12
 801125c:	46bd      	mov	sp, r7
 801125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011262:	4770      	bx	lr

08011264 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011264:	b480      	push	{r7}
 8011266:	b085      	sub	sp, #20
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801126c:	2300      	movs	r3, #0
 801126e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	3301      	adds	r3, #1
 8011274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801127c:	d901      	bls.n	8011282 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801127e:	2303      	movs	r3, #3
 8011280:	e01b      	b.n	80112ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	691b      	ldr	r3, [r3, #16]
 8011286:	2b00      	cmp	r3, #0
 8011288:	daf2      	bge.n	8011270 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801128a:	2300      	movs	r3, #0
 801128c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	691b      	ldr	r3, [r3, #16]
 8011292:	f043 0201 	orr.w	r2, r3, #1
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	3301      	adds	r3, #1
 801129e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80112a6:	d901      	bls.n	80112ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80112a8:	2303      	movs	r3, #3
 80112aa:	e006      	b.n	80112ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	691b      	ldr	r3, [r3, #16]
 80112b0:	f003 0301 	and.w	r3, r3, #1
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d0f0      	beq.n	801129a <USB_CoreReset+0x36>

  return HAL_OK;
 80112b8:	2300      	movs	r3, #0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3714      	adds	r7, #20
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr

080112c6 <memset>:
 80112c6:	4402      	add	r2, r0
 80112c8:	4603      	mov	r3, r0
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d100      	bne.n	80112d0 <memset+0xa>
 80112ce:	4770      	bx	lr
 80112d0:	f803 1b01 	strb.w	r1, [r3], #1
 80112d4:	e7f9      	b.n	80112ca <memset+0x4>
	...

080112d8 <__libc_init_array>:
 80112d8:	b570      	push	{r4, r5, r6, lr}
 80112da:	4d0d      	ldr	r5, [pc, #52]	@ (8011310 <__libc_init_array+0x38>)
 80112dc:	2600      	movs	r6, #0
 80112de:	4c0d      	ldr	r4, [pc, #52]	@ (8011314 <__libc_init_array+0x3c>)
 80112e0:	1b64      	subs	r4, r4, r5
 80112e2:	10a4      	asrs	r4, r4, #2
 80112e4:	42a6      	cmp	r6, r4
 80112e6:	d109      	bne.n	80112fc <__libc_init_array+0x24>
 80112e8:	4d0b      	ldr	r5, [pc, #44]	@ (8011318 <__libc_init_array+0x40>)
 80112ea:	2600      	movs	r6, #0
 80112ec:	4c0b      	ldr	r4, [pc, #44]	@ (801131c <__libc_init_array+0x44>)
 80112ee:	f000 f817 	bl	8011320 <_init>
 80112f2:	1b64      	subs	r4, r4, r5
 80112f4:	10a4      	asrs	r4, r4, #2
 80112f6:	42a6      	cmp	r6, r4
 80112f8:	d105      	bne.n	8011306 <__libc_init_array+0x2e>
 80112fa:	bd70      	pop	{r4, r5, r6, pc}
 80112fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011300:	3601      	adds	r6, #1
 8011302:	4798      	blx	r3
 8011304:	e7ee      	b.n	80112e4 <__libc_init_array+0xc>
 8011306:	f855 3b04 	ldr.w	r3, [r5], #4
 801130a:	3601      	adds	r6, #1
 801130c:	4798      	blx	r3
 801130e:	e7f2      	b.n	80112f6 <__libc_init_array+0x1e>
 8011310:	08011440 	.word	0x08011440
 8011314:	08011440 	.word	0x08011440
 8011318:	08011440 	.word	0x08011440
 801131c:	08011444 	.word	0x08011444

08011320 <_init>:
 8011320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011322:	bf00      	nop
 8011324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011326:	bc08      	pop	{r3}
 8011328:	469e      	mov	lr, r3
 801132a:	4770      	bx	lr

0801132c <_fini>:
 801132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132e:	bf00      	nop
 8011330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011332:	bc08      	pop	{r3}
 8011334:	469e      	mov	lr, r3
 8011336:	4770      	bx	lr
